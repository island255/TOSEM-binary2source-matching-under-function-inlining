{
  "grep/grep-3.1/gnulib-tests/anytostr.c": {
    "__attribute_warn_unused_result__": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "content": "char * __attribute_warn_unused_result__\nanytostr (inttype i, char *buf)\n{\n  char *p = buf + INT_STRLEN_BOUND (inttype);\n  *p = 0;\n\n  if (i < 0)\n    {\n      do\n        *--p = '0' - i % 10;\n      while ((i /= 10) != 0);\n\n      *--p = '-';\n    }\n  else\n    {\n      do\n        *--p = '0' + i % 10;\n      while ((i /= 10) != 0);\n    }\n\n  return p;\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "char",
        "* __attribute_warn_unused_result__\nanytostr (inttype i, char *buf)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/arg-nonnull.h": {},
  "grep/grep-3.1/gnulib-tests/asnprintf.c": {
    "asnprintf": {
      "start_point": [
        23,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "char *\nasnprintf (char *resultbuf, size_t *lengthp, const char *format, ...)\n{\n  va_list args;\n  char *result;\n\n  va_start (args, format);\n  result = vasnprintf (resultbuf, lengthp, format, args);\n  va_end (args);\n  return result;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "char",
        "*\nasnprintf (char *resultbuf, size_t *lengthp, const char *format, ...)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/c++defs.h": {},
  "grep/grep-3.1/gnulib-tests/dfa-match-aux.c": {
    "dfaerror": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "_Noreturn void\ndfaerror (char const *mesg)\n{\n  printf (\"dfaerror: %s\\n\", mesg);\n  exit (EXIT_FAILURE);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "_Noreturn",
        "void",
        "void"
      ]
    },
    "dfawarn": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        42,
        1
      ],
      "content": "_Noreturn void\ndfawarn (char const *mesg)\n{\n  printf (\"dfawarn: %s\\n\", mesg);\n  exit (EXIT_FAILURE);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "_Noreturn",
        "void",
        "void"
      ]
    },
    "main": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  struct dfa *dfa;\n  char *beg, *end, *p;\n  int allow_nl;\n  struct localeinfo localeinfo;\n\n  if (argc < 3)\n    exit (EXIT_FAILURE);\n\n  setlocale (LC_ALL, \"\");\n  init_localeinfo (&localeinfo);\n\n  dfa = dfaalloc ();\n  dfasyntax (dfa, &localeinfo, RE_SYNTAX_GREP | RE_NO_EMPTY_RANGES, 0);\n  dfacomp (argv[1], strlen (argv[1]), dfa, 0);\n\n  beg = argv[2];\n  end = argv[2] + strlen (argv[2]);\n  allow_nl = argc > 3 && atoi (argv[3]);\n\n  p = dfaexec (dfa, beg, end, allow_nl, NULL, NULL);\n\n  if (p != NULL)\n    printf (\"%zd\\n\", p - beg);\n\n  exit (EXIT_SUCCESS);\n}",
      "lines": 29,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/dup-safer-flag.c": {
    "dup_safer_flag": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "int\ndup_safer_flag (int fd, int flag)\n{\n  return fcntl (fd, (flag & O_CLOEXEC) ? F_DUPFD_CLOEXEC : F_DUPFD,\n                STDERR_FILENO + 1);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/fd-safer-flag.c": {
    "fd_safer_flag": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        51,
        1
      ],
      "content": "int\nfd_safer_flag (int fd, int flag)\n{\n  if (STDIN_FILENO <= fd && fd <= STDERR_FILENO)\n    {\n      int f = dup_safer_flag (fd, flag);\n      int e = errno;\n      close (fd);\n      errno = e;\n      fd = f;\n    }\n\n  return fd;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/fdopen.c": {
    "fdopen_nothrow": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        38,
        5
      ],
      "content": "static FILE *\nfdopen_nothrow (int fd, const char *mode)\n{\n  FILE *result;\n\n  TRY_MSVC_INVAL\n    {\n      result = fdopen (fd, mode);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "FILE",
        "*\nfdopen_nothrow (int fd, const char *mode)",
        "*"
      ]
    },
    "rpl_fdopen": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "content": "FILE *\nrpl_fdopen (int fd, const char *mode)\n{\n  int saved_errno = errno;\n  FILE *fp;\n\n  errno = 0;\n  fp = fdopen_nothrow (fd, mode);\n  if (fp == NULL)\n    {\n      if (errno == 0)\n        errno = EBADF;\n    }\n  else\n    errno = saved_errno;\n\n  return fp;\n}",
      "lines": 18,
      "depth": 8,
      "decorators": [
        "FILE",
        "*\nrpl_fdopen (int fd, const char *mode)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/float+.h": {},
  "grep/grep-3.1/gnulib-tests/float.c": {},
  "grep/grep-3.1/gnulib-tests/float.in.h": {},
  "grep/grep-3.1/gnulib-tests/fpucw.h": {},
  "grep/grep-3.1/gnulib-tests/hash-pjw.c": {
    "hash_pjw": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "size_t\nhash_pjw (const void *x, size_t tablesize)\n{\n  const char *s;\n  size_t h = 0;\n\n  for (s = x; *s; s++)\n    h = *s + ((h << 9) | (h >> (SIZE_BITS - 9)));\n\n  return h % tablesize;\n}",
      "lines": 11,
      "depth": 13,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/hash-pjw.h": {},
  "grep/grep-3.1/gnulib-tests/imaxtostr.c": {},
  "grep/grep-3.1/gnulib-tests/inttostr.c": {},
  "grep/grep-3.1/gnulib-tests/inttostr.h": {},
  "grep/grep-3.1/gnulib-tests/itold.c": {
    "_Qp_itoq": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        27,
        1
      ],
      "content": "void\n_Qp_itoq (long double *result, int a)\n{\n  /* Convert from 'int' to 'double', then from 'double' to 'long double'.  */\n  *result = (double) a;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/localename.c": {
    "gl_locale_name_canonicalize": [
      {
        "start_point": [
          1154,
          0
        ],
        "end_point": [
          1417,
          1
        ],
        "content": "void\ngl_locale_name_canonicalize (char *name)\n{\n  /* This conversion is based on a posting by\n     Deborah GoldSmith <goldsmit@apple.com> on 2005-03-08,\n     http://lists.apple.com/archives/carbon-dev/2005/Mar/msg00293.html */\n\n  /* Convert legacy (NeXTstep inherited) English names to Unix (ISO 639 and\n     ISO 3166) names.  Prior to Mac OS X 10.3, there is no API for doing this.\n     Therefore we do it ourselves, using a table based on the results of the\n     Mac OS X 10.3.8 function\n     CFLocaleCreateCanonicalLocaleIdentifierFromString().  */\n  typedef struct { const char legacy[21+1]; const char unixy[5+1]; }\n          legacy_entry;\n  static const legacy_entry legacy_table[] = {\n    { \"Afrikaans\",             \"af\" },\n    { \"Albanian\",              \"sq\" },\n    { \"Amharic\",               \"am\" },\n    { \"Arabic\",                \"ar\" },\n    { \"Armenian\",              \"hy\" },\n    { \"Assamese\",              \"as\" },\n    { \"Aymara\",                \"ay\" },\n    { \"Azerbaijani\",           \"az\" },\n    { \"Basque\",                \"eu\" },\n    { \"Belarusian\",            \"be\" },\n    { \"Belorussian\",           \"be\" },\n    { \"Bengali\",               \"bn\" },\n    { \"Brazilian Portugese\",   \"pt_BR\" },\n    { \"Brazilian Portuguese\",  \"pt_BR\" },\n    { \"Breton\",                \"br\" },\n    { \"Bulgarian\",             \"bg\" },\n    { \"Burmese\",               \"my\" },\n    { \"Byelorussian\",          \"be\" },\n    { \"Catalan\",               \"ca\" },\n    { \"Chewa\",                 \"ny\" },\n    { \"Chichewa\",              \"ny\" },\n    { \"Chinese\",               \"zh\" },\n    { \"Chinese, Simplified\",   \"zh_CN\" },\n    { \"Chinese, Traditional\",  \"zh_TW\" },\n    { \"Chinese, Tradtional\",   \"zh_TW\" },\n    { \"Croatian\",              \"hr\" },\n    { \"Czech\",                 \"cs\" },\n    { \"Danish\",                \"da\" },\n    { \"Dutch\",                 \"nl\" },\n    { \"Dzongkha\",              \"dz\" },\n    { \"English\",               \"en\" },\n    { \"Esperanto\",             \"eo\" },\n    { \"Estonian\",              \"et\" },\n    { \"Faroese\",               \"fo\" },\n    { \"Farsi\",                 \"fa\" },\n    { \"Finnish\",               \"fi\" },\n    { \"Flemish\",               \"nl_BE\" },\n    { \"French\",                \"fr\" },\n    { \"Galician\",              \"gl\" },\n    { \"Gallegan\",              \"gl\" },\n    { \"Georgian\",              \"ka\" },\n    { \"German\",                \"de\" },\n    { \"Greek\",                 \"el\" },\n    { \"Greenlandic\",           \"kl\" },\n    { \"Guarani\",               \"gn\" },\n    { \"Gujarati\",              \"gu\" },\n    { \"Hawaiian\",              \"haw\" }, /* Yes, \"haw\", not \"cpe\".  */\n    { \"Hebrew\",                \"he\" },\n    { \"Hindi\",                 \"hi\" },\n    { \"Hungarian\",             \"hu\" },\n    { \"Icelandic\",             \"is\" },\n    { \"Indonesian\",            \"id\" },\n    { \"Inuktitut\",             \"iu\" },\n    { \"Irish\",                 \"ga\" },\n    { \"Italian\",               \"it\" },\n    { \"Japanese\",              \"ja\" },\n    { \"Javanese\",              \"jv\" },\n    { \"Kalaallisut\",           \"kl\" },\n    { \"Kannada\",               \"kn\" },\n    { \"Kashmiri\",              \"ks\" },\n    { \"Kazakh\",                \"kk\" },\n    { \"Khmer\",                 \"km\" },\n    { \"Kinyarwanda\",           \"rw\" },\n    { \"Kirghiz\",               \"ky\" },\n    { \"Korean\",                \"ko\" },\n    { \"Kurdish\",               \"ku\" },\n    { \"Latin\",                 \"la\" },\n    { \"Latvian\",               \"lv\" },\n    { \"Lithuanian\",            \"lt\" },\n    { \"Macedonian\",            \"mk\" },\n    { \"Malagasy\",              \"mg\" },\n    { \"Malay\",                 \"ms\" },\n    { \"Malayalam\",             \"ml\" },\n    { \"Maltese\",               \"mt\" },\n    { \"Manx\",                  \"gv\" },\n    { \"Marathi\",               \"mr\" },\n    { \"Moldavian\",             \"mo\" },\n    { \"Mongolian\",             \"mn\" },\n    { \"Nepali\",                \"ne\" },\n    { \"Norwegian\",             \"nb\" }, /* Yes, \"nb\", not the obsolete \"no\".  */\n    { \"Nyanja\",                \"ny\" },\n    { \"Nynorsk\",               \"nn\" },\n    { \"Oriya\",                 \"or\" },\n    { \"Oromo\",                 \"om\" },\n    { \"Panjabi\",               \"pa\" },\n    { \"Pashto\",                \"ps\" },\n    { \"Persian\",               \"fa\" },\n    { \"Polish\",                \"pl\" },\n    { \"Portuguese\",            \"pt\" },\n    { \"Portuguese, Brazilian\", \"pt_BR\" },\n    { \"Punjabi\",               \"pa\" },\n    { \"Pushto\",                \"ps\" },\n    { \"Quechua\",               \"qu\" },\n    { \"Romanian\",              \"ro\" },\n    { \"Ruanda\",                \"rw\" },\n    { \"Rundi\",                 \"rn\" },\n    { \"Russian\",               \"ru\" },\n    { \"Sami\",                  \"se_NO\" }, /* Not just \"se\".  */\n    { \"Sanskrit\",              \"sa\" },\n    { \"Scottish\",              \"gd\" },\n    { \"Serbian\",               \"sr\" },\n    { \"Simplified Chinese\",    \"zh_CN\" },\n    { \"Sindhi\",                \"sd\" },\n    { \"Sinhalese\",             \"si\" },\n    { \"Slovak\",                \"sk\" },\n    { \"Slovenian\",             \"sl\" },\n    { \"Somali\",                \"so\" },\n    { \"Spanish\",               \"es\" },\n    { \"Sundanese\",             \"su\" },\n    { \"Swahili\",               \"sw\" },\n    { \"Swedish\",               \"sv\" },\n    { \"Tagalog\",               \"tl\" },\n    { \"Tajik\",                 \"tg\" },\n    { \"Tajiki\",                \"tg\" },\n    { \"Tamil\",                 \"ta\" },\n    { \"Tatar\",                 \"tt\" },\n    { \"Telugu\",                \"te\" },\n    { \"Thai\",                  \"th\" },\n    { \"Tibetan\",               \"bo\" },\n    { \"Tigrinya\",              \"ti\" },\n    { \"Tongan\",                \"to\" },\n    { \"Traditional Chinese\",   \"zh_TW\" },\n    { \"Turkish\",               \"tr\" },\n    { \"Turkmen\",               \"tk\" },\n    { \"Uighur\",                \"ug\" },\n    { \"Ukrainian\",             \"uk\" },\n    { \"Urdu\",                  \"ur\" },\n    { \"Uzbek\",                 \"uz\" },\n    { \"Vietnamese\",            \"vi\" },\n    { \"Welsh\",                 \"cy\" },\n    { \"Yiddish\",               \"yi\" }\n  };\n\n  /* Convert new-style locale names with language tags (ISO 639 and ISO 15924)\n     to Unix (ISO 639 and ISO 3166) names.  */\n  typedef struct { const char langtag[7+1]; const char unixy[12+1]; }\n          langtag_entry;\n  static const langtag_entry langtag_table[] = {\n    /* Mac OS X has \"az-Arab\", \"az-Cyrl\", \"az-Latn\".\n       The default script for az on Unix is Latin.  */\n    { \"az-Latn\", \"az\" },\n    /* Mac OS X has \"ga-dots\".  Does not yet exist on Unix.  */\n    { \"ga-dots\", \"ga\" },\n    /* Mac OS X has \"kk-Cyrl\".  Does not yet exist on Unix.  */\n    /* Mac OS X has \"mn-Cyrl\", \"mn-Mong\".\n       The default script for mn on Unix is Cyrillic.  */\n    { \"mn-Cyrl\", \"mn\" },\n    /* Mac OS X has \"ms-Arab\", \"ms-Latn\".\n       The default script for ms on Unix is Latin.  */\n    { \"ms-Latn\", \"ms\" },\n    /* Mac OS X has \"tg-Cyrl\".\n       The default script for tg on Unix is Cyrillic.  */\n    { \"tg-Cyrl\", \"tg\" },\n    /* Mac OS X has \"tk-Cyrl\".  Does not yet exist on Unix.  */\n    /* Mac OS X has \"tt-Cyrl\".\n       The default script for tt on Unix is Cyrillic.  */\n    { \"tt-Cyrl\", \"tt\" },\n    /* Mac OS X has \"zh-Hans\", \"zh-Hant\".\n       Country codes are used to distinguish these on Unix.  */\n    { \"zh-Hans\", \"zh_CN\" },\n    { \"zh-Hant\", \"zh_TW\" }\n  };\n\n  /* Convert script names (ISO 15924) to Unix conventions.\n     See http://www.unicode.org/iso15924/iso15924-codes.html  */\n  typedef struct { const char script[4+1]; const char unixy[9+1]; }\n          script_entry;\n  static const script_entry script_table[] = {\n    { \"Arab\", \"arabic\" },\n    { \"Cyrl\", \"cyrillic\" },\n    { \"Mong\", \"mongolian\" }\n  };\n\n  /* Step 1: Convert using legacy_table.  */\n  if (name[0] >= 'A' && name[0] <= 'Z')\n    {\n      unsigned int i1, i2;\n      i1 = 0;\n      i2 = sizeof (legacy_table) / sizeof (legacy_entry);\n      while (i2 - i1 > 1)\n        {\n          /* At this point we know that if name occurs in legacy_table,\n             its index must be >= i1 and < i2.  */\n          unsigned int i = (i1 + i2) >> 1;\n          const legacy_entry *p = &legacy_table[i];\n          if (strcmp (name, p->legacy) < 0)\n            i2 = i;\n          else\n            i1 = i;\n        }\n      if (strcmp (name, legacy_table[i1].legacy) == 0)\n        {\n          strcpy (name, legacy_table[i1].unixy);\n          return;\n        }\n    }\n\n  /* Step 2: Convert using langtag_table and script_table.  */\n  if (strlen (name) == 7 && name[2] == '-')\n    {\n      unsigned int i1, i2;\n      i1 = 0;\n      i2 = sizeof (langtag_table) / sizeof (langtag_entry);\n      while (i2 - i1 > 1)\n        {\n          /* At this point we know that if name occurs in langtag_table,\n             its index must be >= i1 and < i2.  */\n          unsigned int i = (i1 + i2) >> 1;\n          const langtag_entry *p = &langtag_table[i];\n          if (strcmp (name, p->langtag) < 0)\n            i2 = i;\n          else\n            i1 = i;\n        }\n      if (strcmp (name, langtag_table[i1].langtag) == 0)\n        {\n          strcpy (name, langtag_table[i1].unixy);\n          return;\n        }\n\n      i1 = 0;\n      i2 = sizeof (script_table) / sizeof (script_entry);\n      while (i2 - i1 > 1)\n        {\n          /* At this point we know that if (name + 3) occurs in script_table,\n             its index must be >= i1 and < i2.  */\n          unsigned int i = (i1 + i2) >> 1;\n          const script_entry *p = &script_table[i];\n          if (strcmp (name + 3, p->script) < 0)\n            i2 = i;\n          else\n            i1 = i;\n        }\n      if (strcmp (name + 3, script_table[i1].script) == 0)\n        {\n          name[2] = '@';\n          strcpy (name + 3, script_table[i1].unixy);\n          return;\n        }\n    }\n\n  /* Step 3: Convert new-style dash to Unix underscore. */\n  {\n    char *p;\n    for (p = name; *p != '\\0'; p++)\n      if (*p == '-')\n        *p = '_';\n  }\n}",
        "lines": 264,
        "depth": 13,
        "decorators": [
          "void"
        ]
      },
      {
        "start_point": [
          1431,
          0
        ],
        "end_point": [
          1455,
          1
        ],
        "content": "void\ngl_locale_name_canonicalize (char *name)\n{\n  /* FIXME: This is probably incomplete: it does not handle \"zh-Hans\" and\n     \"zh-Hant\".  */\n  char *p;\n\n  for (p = name; *p != '\\0'; p++)\n    if (*p == '-')\n      {\n        *p = '_';\n        p++;\n        for (; *p != '\\0'; p++)\n          {\n            if (*p >= 'a' && *p <= 'z')\n              *p += 'A' - 'a';\n            if (*p == '-')\n              {\n                *p = '\\0';\n                return;\n              }\n          }\n        return;\n      }\n}",
        "lines": 25,
        "depth": 13,
        "decorators": [
          "void"
        ]
      }
    ],
    "gl_locale_name_from_win32_LANGID": {
      "start_point": [
        1460,
        0
      ],
      "end_point": [
        2503,
        1
      ],
      "content": "const char *\ngl_locale_name_from_win32_LANGID (LANGID langid)\n{\n  /* Activate the new code only when the GETTEXT_MUI environment variable is\n     set, for the time being, since the new code is not well tested.  */\n  if (getenv (\"GETTEXT_MUI\") != NULL)\n    {\n      static char namebuf[256];\n\n      /* Query the system's notion of locale name.\n         On Windows95/98/ME, GetLocaleInfoA returns some incorrect results.\n         But we don't need to support systems that are so old.  */\n      if (GetLocaleInfoA (MAKELCID (langid, SORT_DEFAULT), LOCALE_SNAME,\n                          namebuf, sizeof (namebuf) - 1))\n        {\n          /* Convert it to a Unix locale name.  */\n          gl_locale_name_canonicalize (namebuf);\n          return namebuf;\n        }\n    }\n  /* Internet Explorer has an LCID to RFC3066 name mapping stored in\n     HKEY_CLASSES_ROOT\\Mime\\Database\\Rfc1766.  But we better don't use that\n     since IE's i18n subsystem is known to be inconsistent with the native\n     Windows base (e.g. they have different character conversion facilities\n     that produce different results).  */\n  /* Use our own table.  */\n  {\n    int primary, sub;\n\n    /* Split into language and territory part.  */\n    primary = PRIMARYLANGID (langid);\n    sub = SUBLANGID (langid);\n\n    /* Dispatch on language.\n       See also http://www.unicode.org/unicode/onlinedat/languages.html .\n       For details about languages, see http://www.ethnologue.com/ .  */\n    switch (primary)\n      {\n      case LANG_AFRIKAANS:\n        switch (sub)\n          {\n          case SUBLANG_AFRIKAANS_SOUTH_AFRICA: return \"af_ZA\";\n          }\n        return \"af\";\n      case LANG_ALBANIAN:\n        switch (sub)\n          {\n          case SUBLANG_ALBANIAN_ALBANIA: return \"sq_AL\";\n          }\n        return \"sq\";\n      case LANG_ALSATIAN:\n        switch (sub)\n          {\n          case SUBLANG_ALSATIAN_FRANCE: return \"gsw_FR\";\n          }\n        return \"gsw\";\n      case LANG_AMHARIC:\n        switch (sub)\n          {\n          case SUBLANG_AMHARIC_ETHIOPIA: return \"am_ET\";\n          }\n        return \"am\";\n      case LANG_ARABIC:\n        switch (sub)\n          {\n          case SUBLANG_ARABIC_SAUDI_ARABIA: return \"ar_SA\";\n          case SUBLANG_ARABIC_IRAQ: return \"ar_IQ\";\n          case SUBLANG_ARABIC_EGYPT: return \"ar_EG\";\n          case SUBLANG_ARABIC_LIBYA: return \"ar_LY\";\n          case SUBLANG_ARABIC_ALGERIA: return \"ar_DZ\";\n          case SUBLANG_ARABIC_MOROCCO: return \"ar_MA\";\n          case SUBLANG_ARABIC_TUNISIA: return \"ar_TN\";\n          case SUBLANG_ARABIC_OMAN: return \"ar_OM\";\n          case SUBLANG_ARABIC_YEMEN: return \"ar_YE\";\n          case SUBLANG_ARABIC_SYRIA: return \"ar_SY\";\n          case SUBLANG_ARABIC_JORDAN: return \"ar_JO\";\n          case SUBLANG_ARABIC_LEBANON: return \"ar_LB\";\n          case SUBLANG_ARABIC_KUWAIT: return \"ar_KW\";\n          case SUBLANG_ARABIC_UAE: return \"ar_AE\";\n          case SUBLANG_ARABIC_BAHRAIN: return \"ar_BH\";\n          case SUBLANG_ARABIC_QATAR: return \"ar_QA\";\n          }\n        return \"ar\";\n      case LANG_ARMENIAN:\n        switch (sub)\n          {\n          case SUBLANG_ARMENIAN_ARMENIA: return \"hy_AM\";\n          }\n        return \"hy\";\n      case LANG_ASSAMESE:\n        switch (sub)\n          {\n          case SUBLANG_ASSAMESE_INDIA: return \"as_IN\";\n          }\n        return \"as\";\n      case LANG_AZERI:\n        switch (sub)\n          {\n          /* FIXME: Adjust this when Azerbaijani locales appear on Unix.  */\n          case 0x1e: return \"az@latin\";\n          case SUBLANG_AZERI_LATIN: return \"az_AZ@latin\";\n          case 0x1d: return \"az@cyrillic\";\n          case SUBLANG_AZERI_CYRILLIC: return \"az_AZ@cyrillic\";\n          }\n        return \"az\";\n      case LANG_BASHKIR:\n        switch (sub)\n          {\n          case SUBLANG_BASHKIR_RUSSIA: return \"ba_RU\";\n          }\n        return \"ba\";\n      case LANG_BASQUE:\n        switch (sub)\n          {\n          case SUBLANG_BASQUE_BASQUE: return \"eu_ES\";\n          }\n        return \"eu\"; /* Ambiguous: could be \"eu_ES\" or \"eu_FR\".  */\n      case LANG_BELARUSIAN:\n        switch (sub)\n          {\n          case SUBLANG_BELARUSIAN_BELARUS: return \"be_BY\";\n          }\n        return \"be\";\n      case LANG_BENGALI:\n        switch (sub)\n          {\n          case SUBLANG_BENGALI_INDIA: return \"bn_IN\";\n          case SUBLANG_BENGALI_BANGLADESH: return \"bn_BD\";\n          }\n        return \"bn\";\n      case LANG_BRETON:\n        switch (sub)\n          {\n          case SUBLANG_BRETON_FRANCE: return \"br_FR\";\n          }\n        return \"br\";\n      case LANG_BULGARIAN:\n        switch (sub)\n          {\n          case SUBLANG_BULGARIAN_BULGARIA: return \"bg_BG\";\n          }\n        return \"bg\";\n      case LANG_BURMESE:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"my_MM\";\n          }\n        return \"my\";\n      case LANG_CAMBODIAN:\n        switch (sub)\n          {\n          case SUBLANG_CAMBODIAN_CAMBODIA: return \"km_KH\";\n          }\n        return \"km\";\n      case LANG_CATALAN:\n        switch (sub)\n          {\n          case SUBLANG_CATALAN_SPAIN: return \"ca_ES\";\n          }\n        return \"ca\";\n      case LANG_CHEROKEE:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"chr_US\";\n          }\n        return \"chr\";\n      case LANG_CHINESE:\n        switch (sub)\n          {\n          case SUBLANG_CHINESE_TRADITIONAL: case 0x1f: return \"zh_TW\";\n          case SUBLANG_CHINESE_SIMPLIFIED: case 0x00: return \"zh_CN\";\n          case SUBLANG_CHINESE_HONGKONG: return \"zh_HK\"; /* traditional */\n          case SUBLANG_CHINESE_SINGAPORE: return \"zh_SG\"; /* simplified */\n          case SUBLANG_CHINESE_MACAU: return \"zh_MO\"; /* traditional */\n          }\n        return \"zh\";\n      case LANG_CORSICAN:\n        switch (sub)\n          {\n          case SUBLANG_CORSICAN_FRANCE: return \"co_FR\";\n          }\n        return \"co\";\n      case LANG_CROATIAN:      /* LANG_CROATIAN == LANG_SERBIAN == LANG_BOSNIAN\n                                * What used to be called Serbo-Croatian\n                                * should really now be two separate\n                                * languages because of political reasons.\n                                * (Says tml, who knows nothing about Serbian\n                                * or Croatian.)\n                                * (I can feel those flames coming already.)\n                                */\n        switch (sub)\n          {\n          /* Croatian */\n          case 0x00: return \"hr\";\n          case SUBLANG_CROATIAN_CROATIA: return \"hr_HR\";\n          case SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: return \"hr_BA\";\n          /* Serbian */\n          case 0x1f: return \"sr\";\n          case 0x1c: return \"sr\"; /* latin */\n          case SUBLANG_SERBIAN_LATIN: return \"sr_CS\"; /* latin */\n          case 0x09: return \"sr_RS\"; /* latin */\n          case 0x0b: return \"sr_ME\"; /* latin */\n          case 0x06: return \"sr_BA\"; /* latin */\n          case 0x1b: return \"sr@cyrillic\";\n          case SUBLANG_SERBIAN_CYRILLIC: return \"sr_CS@cyrillic\";\n          case 0x0a: return \"sr_RS@cyrillic\";\n          case 0x0c: return \"sr_ME@cyrillic\";\n          case 0x07: return \"sr_BA@cyrillic\";\n          /* Bosnian */\n          case 0x1e: return \"bs\";\n          case 0x1a: return \"bs\"; /* latin */\n          case SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: return \"bs_BA\"; /* latin */\n          case 0x19: return \"bs@cyrillic\";\n          case SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: return \"bs_BA@cyrillic\";\n          }\n        return \"hr\";\n      case LANG_CZECH:\n        switch (sub)\n          {\n          case SUBLANG_CZECH_CZECH_REPUBLIC: return \"cs_CZ\";\n          }\n        return \"cs\";\n      case LANG_DANISH:\n        switch (sub)\n          {\n          case SUBLANG_DANISH_DENMARK: return \"da_DK\";\n          }\n        return \"da\";\n      case LANG_DARI:\n        /* FIXME: Adjust this when such locales appear on Unix.  */\n        switch (sub)\n          {\n          case SUBLANG_DARI_AFGHANISTAN: return \"prs_AF\";\n          }\n        return \"prs\";\n      case LANG_DIVEHI:\n        switch (sub)\n          {\n          case SUBLANG_DIVEHI_MALDIVES: return \"dv_MV\";\n          }\n        return \"dv\";\n      case LANG_DUTCH:\n        switch (sub)\n          {\n          case SUBLANG_DUTCH: return \"nl_NL\";\n          case SUBLANG_DUTCH_BELGIAN: /* FLEMISH, VLAAMS */ return \"nl_BE\";\n          case SUBLANG_DUTCH_SURINAM: return \"nl_SR\";\n          }\n        return \"nl\";\n      case LANG_EDO:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"bin_NG\";\n          }\n        return \"bin\";\n      case LANG_ENGLISH:\n        switch (sub)\n          {\n          /* SUBLANG_ENGLISH_US == SUBLANG_DEFAULT. Heh. I thought\n           * English was the language spoken in England.\n           * Oh well.\n           */\n          case SUBLANG_ENGLISH_US: return \"en_US\";\n          case SUBLANG_ENGLISH_UK: return \"en_GB\";\n          case SUBLANG_ENGLISH_AUS: return \"en_AU\";\n          case SUBLANG_ENGLISH_CAN: return \"en_CA\";\n          case SUBLANG_ENGLISH_NZ: return \"en_NZ\";\n          case SUBLANG_ENGLISH_EIRE: return \"en_IE\";\n          case SUBLANG_ENGLISH_SOUTH_AFRICA: return \"en_ZA\";\n          case SUBLANG_ENGLISH_JAMAICA: return \"en_JM\";\n          case SUBLANG_ENGLISH_CARIBBEAN: return \"en_GD\"; /* Grenada? */\n          case SUBLANG_ENGLISH_BELIZE: return \"en_BZ\";\n          case SUBLANG_ENGLISH_TRINIDAD: return \"en_TT\";\n          case SUBLANG_ENGLISH_ZIMBABWE: return \"en_ZW\";\n          case SUBLANG_ENGLISH_PHILIPPINES: return \"en_PH\";\n          case SUBLANG_ENGLISH_INDONESIA: return \"en_ID\";\n          case SUBLANG_ENGLISH_HONGKONG: return \"en_HK\";\n          case SUBLANG_ENGLISH_INDIA: return \"en_IN\";\n          case SUBLANG_ENGLISH_MALAYSIA: return \"en_MY\";\n          case SUBLANG_ENGLISH_SINGAPORE: return \"en_SG\";\n          }\n        return \"en\";\n      case LANG_ESTONIAN:\n        switch (sub)\n          {\n          case SUBLANG_ESTONIAN_ESTONIA: return \"et_EE\";\n          }\n        return \"et\";\n      case LANG_FAEROESE:\n        switch (sub)\n          {\n          case SUBLANG_FAEROESE_FAROE_ISLANDS: return \"fo_FO\";\n          }\n        return \"fo\";\n      case LANG_FARSI:\n        switch (sub)\n          {\n          case SUBLANG_FARSI_IRAN: return \"fa_IR\";\n          }\n        return \"fa\";\n      case LANG_FINNISH:\n        switch (sub)\n          {\n          case SUBLANG_FINNISH_FINLAND: return \"fi_FI\";\n          }\n        return \"fi\";\n      case LANG_FRENCH:\n        switch (sub)\n          {\n          case SUBLANG_FRENCH: return \"fr_FR\";\n          case SUBLANG_FRENCH_BELGIAN: /* WALLOON */ return \"fr_BE\";\n          case SUBLANG_FRENCH_CANADIAN: return \"fr_CA\";\n          case SUBLANG_FRENCH_SWISS: return \"fr_CH\";\n          case SUBLANG_FRENCH_LUXEMBOURG: return \"fr_LU\";\n          case SUBLANG_FRENCH_MONACO: return \"fr_MC\";\n          case SUBLANG_FRENCH_WESTINDIES: return \"fr\"; /* Caribbean? */\n          case SUBLANG_FRENCH_REUNION: return \"fr_RE\";\n          case SUBLANG_FRENCH_CONGO: return \"fr_CG\";\n          case SUBLANG_FRENCH_SENEGAL: return \"fr_SN\";\n          case SUBLANG_FRENCH_CAMEROON: return \"fr_CM\";\n          case SUBLANG_FRENCH_COTEDIVOIRE: return \"fr_CI\";\n          case SUBLANG_FRENCH_MALI: return \"fr_ML\";\n          case SUBLANG_FRENCH_MOROCCO: return \"fr_MA\";\n          case SUBLANG_FRENCH_HAITI: return \"fr_HT\";\n          }\n        return \"fr\";\n      case LANG_FRISIAN:\n        switch (sub)\n          {\n          case SUBLANG_FRISIAN_NETHERLANDS: return \"fy_NL\";\n          }\n        return \"fy\";\n      case LANG_FULFULDE:\n        /* Spoken in Nigeria, Guinea, Senegal, Mali, Niger, Cameroon, Benin.  */\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"ff_NG\";\n          }\n        return \"ff\";\n      case LANG_GAELIC:\n        switch (sub)\n          {\n          case 0x01: /* SCOTTISH */\n            /* old, superseded by LANG_SCOTTISH_GAELIC */\n            return \"gd_GB\";\n          case SUBLANG_IRISH_IRELAND: return \"ga_IE\";\n          }\n        return \"ga\";\n      case LANG_GALICIAN:\n        switch (sub)\n          {\n          case SUBLANG_GALICIAN_SPAIN: return \"gl_ES\";\n          }\n        return \"gl\";\n      case LANG_GEORGIAN:\n        switch (sub)\n          {\n          case SUBLANG_GEORGIAN_GEORGIA: return \"ka_GE\";\n          }\n        return \"ka\";\n      case LANG_GERMAN:\n        switch (sub)\n          {\n          case SUBLANG_GERMAN: return \"de_DE\";\n          case SUBLANG_GERMAN_SWISS: return \"de_CH\";\n          case SUBLANG_GERMAN_AUSTRIAN: return \"de_AT\";\n          case SUBLANG_GERMAN_LUXEMBOURG: return \"de_LU\";\n          case SUBLANG_GERMAN_LIECHTENSTEIN: return \"de_LI\";\n          }\n        return \"de\";\n      case LANG_GREEK:\n        switch (sub)\n          {\n          case SUBLANG_GREEK_GREECE: return \"el_GR\";\n          }\n        return \"el\";\n      case LANG_GREENLANDIC:\n        switch (sub)\n          {\n          case SUBLANG_GREENLANDIC_GREENLAND: return \"kl_GL\";\n          }\n        return \"kl\";\n      case LANG_GUARANI:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"gn_PY\";\n          }\n        return \"gn\";\n      case LANG_GUJARATI:\n        switch (sub)\n          {\n          case SUBLANG_GUJARATI_INDIA: return \"gu_IN\";\n          }\n        return \"gu\";\n      case LANG_HAUSA:\n        switch (sub)\n          {\n          case 0x1f: return \"ha\";\n          case SUBLANG_HAUSA_NIGERIA_LATIN: return \"ha_NG\";\n          }\n        return \"ha\";\n      case LANG_HAWAIIAN:\n        /* FIXME: Do they mean Hawaiian (\"haw_US\", 1000 speakers)\n           or Hawaii Creole English (\"cpe_US\", 600000 speakers)?  */\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"cpe_US\";\n          }\n        return \"cpe\";\n      case LANG_HEBREW:\n        switch (sub)\n          {\n          case SUBLANG_HEBREW_ISRAEL: return \"he_IL\";\n          }\n        return \"he\";\n      case LANG_HINDI:\n        switch (sub)\n          {\n          case SUBLANG_HINDI_INDIA: return \"hi_IN\";\n          }\n        return \"hi\";\n      case LANG_HUNGARIAN:\n        switch (sub)\n          {\n          case SUBLANG_HUNGARIAN_HUNGARY: return \"hu_HU\";\n          }\n        return \"hu\";\n      case LANG_IBIBIO:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"nic_NG\";\n          }\n        return \"nic\";\n      case LANG_ICELANDIC:\n        switch (sub)\n          {\n          case SUBLANG_ICELANDIC_ICELAND: return \"is_IS\";\n          }\n        return \"is\";\n      case LANG_IGBO:\n        switch (sub)\n          {\n          case SUBLANG_IGBO_NIGERIA: return \"ig_NG\";\n          }\n        return \"ig\";\n      case LANG_INDONESIAN:\n        switch (sub)\n          {\n          case SUBLANG_INDONESIAN_INDONESIA: return \"id_ID\";\n          }\n        return \"id\";\n      case LANG_INUKTITUT:\n        switch (sub)\n          {\n          case 0x1e: return \"iu\"; /* syllabic */\n          case SUBLANG_INUKTITUT_CANADA: return \"iu_CA\"; /* syllabic */\n          case 0x1f: return \"iu@latin\";\n          case SUBLANG_INUKTITUT_CANADA_LATIN: return \"iu_CA@latin\";\n          }\n        return \"iu\";\n      case LANG_ITALIAN:\n        switch (sub)\n          {\n          case SUBLANG_ITALIAN: return \"it_IT\";\n          case SUBLANG_ITALIAN_SWISS: return \"it_CH\";\n          }\n        return \"it\";\n      case LANG_JAPANESE:\n        switch (sub)\n          {\n          case SUBLANG_JAPANESE_JAPAN: return \"ja_JP\";\n          }\n        return \"ja\";\n      case LANG_KANNADA:\n        switch (sub)\n          {\n          case SUBLANG_KANNADA_INDIA: return \"kn_IN\";\n          }\n        return \"kn\";\n      case LANG_KANURI:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"kr_NG\";\n          }\n        return \"kr\";\n      case LANG_KASHMIRI:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"ks_PK\";\n          case SUBLANG_KASHMIRI_INDIA: return \"ks_IN\";\n          }\n        return \"ks\";\n      case LANG_KAZAK:\n        switch (sub)\n          {\n          case SUBLANG_KAZAK_KAZAKHSTAN: return \"kk_KZ\";\n          }\n        return \"kk\";\n      case LANG_KICHE:\n        /* FIXME: Adjust this when such locales appear on Unix.  */\n        switch (sub)\n          {\n          case SUBLANG_KICHE_GUATEMALA: return \"qut_GT\";\n          }\n        return \"qut\";\n      case LANG_KINYARWANDA:\n        switch (sub)\n          {\n          case SUBLANG_KINYARWANDA_RWANDA: return \"rw_RW\";\n          }\n        return \"rw\";\n      case LANG_KONKANI:\n        /* FIXME: Adjust this when such locales appear on Unix.  */\n        switch (sub)\n          {\n          case SUBLANG_KONKANI_INDIA: return \"kok_IN\";\n          }\n        return \"kok\";\n      case LANG_KOREAN:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"ko_KR\";\n          }\n        return \"ko\";\n      case LANG_KYRGYZ:\n        switch (sub)\n          {\n          case SUBLANG_KYRGYZ_KYRGYZSTAN: return \"ky_KG\";\n          }\n        return \"ky\";\n      case LANG_LAO:\n        switch (sub)\n          {\n          case SUBLANG_LAO_LAOS: return \"lo_LA\";\n          }\n        return \"lo\";\n      case LANG_LATIN:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"la_VA\";\n          }\n        return \"la\";\n      case LANG_LATVIAN:\n        switch (sub)\n          {\n          case SUBLANG_LATVIAN_LATVIA: return \"lv_LV\";\n          }\n        return \"lv\";\n      case LANG_LITHUANIAN:\n        switch (sub)\n          {\n          case SUBLANG_LITHUANIAN_LITHUANIA: return \"lt_LT\";\n          }\n        return \"lt\";\n      case LANG_LUXEMBOURGISH:\n        switch (sub)\n          {\n          case SUBLANG_LUXEMBOURGISH_LUXEMBOURG: return \"lb_LU\";\n          }\n        return \"lb\";\n      case LANG_MACEDONIAN:\n        switch (sub)\n          {\n          case SUBLANG_MACEDONIAN_MACEDONIA: return \"mk_MK\";\n          }\n        return \"mk\";\n      case LANG_MALAY:\n        switch (sub)\n          {\n          case SUBLANG_MALAY_MALAYSIA: return \"ms_MY\";\n          case SUBLANG_MALAY_BRUNEI_DARUSSALAM: return \"ms_BN\";\n          }\n        return \"ms\";\n      case LANG_MALAYALAM:\n        switch (sub)\n          {\n          case SUBLANG_MALAYALAM_INDIA: return \"ml_IN\";\n          }\n        return \"ml\";\n      case LANG_MALTESE:\n        switch (sub)\n          {\n          case SUBLANG_MALTESE_MALTA: return \"mt_MT\";\n          }\n        return \"mt\";\n      case LANG_MANIPURI:\n        /* FIXME: Adjust this when such locales appear on Unix.  */\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"mni_IN\";\n          }\n        return \"mni\";\n      case LANG_MAORI:\n        switch (sub)\n          {\n          case SUBLANG_MAORI_NEW_ZEALAND: return \"mi_NZ\";\n          }\n        return \"mi\";\n      case LANG_MAPUDUNGUN:\n        switch (sub)\n          {\n          case SUBLANG_MAPUDUNGUN_CHILE: return \"arn_CL\";\n          }\n        return \"arn\";\n      case LANG_MARATHI:\n        switch (sub)\n          {\n          case SUBLANG_MARATHI_INDIA: return \"mr_IN\";\n          }\n        return \"mr\";\n      case LANG_MOHAWK:\n        switch (sub)\n          {\n          case SUBLANG_MOHAWK_CANADA: return \"moh_CA\";\n          }\n        return \"moh\";\n      case LANG_MONGOLIAN:\n        switch (sub)\n          {\n          case SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: case 0x1e: return \"mn_MN\";\n          case SUBLANG_MONGOLIAN_PRC: case 0x1f: return \"mn_CN\";\n          }\n        return \"mn\"; /* Ambiguous: could be \"mn_CN\" or \"mn_MN\".  */\n      case LANG_NEPALI:\n        switch (sub)\n          {\n          case SUBLANG_NEPALI_NEPAL: return \"ne_NP\";\n          case SUBLANG_NEPALI_INDIA: return \"ne_IN\";\n          }\n        return \"ne\";\n      case LANG_NORWEGIAN:\n        switch (sub)\n          {\n          case 0x1f: return \"nb\";\n          case SUBLANG_NORWEGIAN_BOKMAL: return \"nb_NO\";\n          case 0x1e: return \"nn\";\n          case SUBLANG_NORWEGIAN_NYNORSK: return \"nn_NO\";\n          }\n        return \"no\";\n      case LANG_OCCITAN:\n        switch (sub)\n          {\n          case SUBLANG_OCCITAN_FRANCE: return \"oc_FR\";\n          }\n        return \"oc\";\n      case LANG_ORIYA:\n        switch (sub)\n          {\n          case SUBLANG_ORIYA_INDIA: return \"or_IN\";\n          }\n        return \"or\";\n      case LANG_OROMO:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"om_ET\";\n          }\n        return \"om\";\n      case LANG_PAPIAMENTU:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"pap_AN\";\n          }\n        return \"pap\";\n      case LANG_PASHTO:\n        switch (sub)\n          {\n          case SUBLANG_PASHTO_AFGHANISTAN: return \"ps_AF\";\n          }\n        return \"ps\"; /* Ambiguous: could be \"ps_PK\" or \"ps_AF\".  */\n      case LANG_POLISH:\n        switch (sub)\n          {\n          case SUBLANG_POLISH_POLAND: return \"pl_PL\";\n          }\n        return \"pl\";\n      case LANG_PORTUGUESE:\n        switch (sub)\n          {\n          /* Hmm. SUBLANG_PORTUGUESE_BRAZILIAN == SUBLANG_DEFAULT.\n             Same phenomenon as SUBLANG_ENGLISH_US == SUBLANG_DEFAULT. */\n          case SUBLANG_PORTUGUESE_BRAZILIAN: return \"pt_BR\";\n          case SUBLANG_PORTUGUESE: return \"pt_PT\";\n          }\n        return \"pt\";\n      case LANG_PUNJABI:\n        switch (sub)\n          {\n          case SUBLANG_PUNJABI_INDIA: return \"pa_IN\"; /* Gurmukhi script */\n          case SUBLANG_PUNJABI_PAKISTAN: return \"pa_PK\"; /* Arabic script */\n          }\n        return \"pa\";\n      case LANG_QUECHUA:\n        /* Note: Microsoft uses the non-ISO language code \"quz\".  */\n        switch (sub)\n          {\n          case SUBLANG_QUECHUA_BOLIVIA: return \"qu_BO\";\n          case SUBLANG_QUECHUA_ECUADOR: return \"qu_EC\";\n          case SUBLANG_QUECHUA_PERU: return \"qu_PE\";\n          }\n        return \"qu\";\n      case LANG_ROMANIAN:\n        switch (sub)\n          {\n          case SUBLANG_ROMANIAN_ROMANIA: return \"ro_RO\";\n          case SUBLANG_ROMANIAN_MOLDOVA: return \"ro_MD\";\n          }\n        return \"ro\";\n      case LANG_ROMANSH:\n        switch (sub)\n          {\n          case SUBLANG_ROMANSH_SWITZERLAND: return \"rm_CH\";\n          }\n        return \"rm\";\n      case LANG_RUSSIAN:\n        switch (sub)\n          {\n          case SUBLANG_RUSSIAN_RUSSIA: return \"ru_RU\";\n          case SUBLANG_RUSSIAN_MOLDAVIA: return \"ru_MD\";\n          }\n        return \"ru\"; /* Ambiguous: could be \"ru_RU\" or \"ru_UA\" or \"ru_MD\".  */\n      case LANG_SAMI:\n        switch (sub)\n          {\n          /* Northern Sami */\n          case 0x00: return \"se\";\n          case SUBLANG_SAMI_NORTHERN_NORWAY: return \"se_NO\";\n          case SUBLANG_SAMI_NORTHERN_SWEDEN: return \"se_SE\";\n          case SUBLANG_SAMI_NORTHERN_FINLAND: return \"se_FI\";\n          /* Lule Sami */\n          case 0x1f: return \"smj\";\n          case SUBLANG_SAMI_LULE_NORWAY: return \"smj_NO\";\n          case SUBLANG_SAMI_LULE_SWEDEN: return \"smj_SE\";\n          /* Southern Sami */\n          case 0x1e: return \"sma\";\n          case SUBLANG_SAMI_SOUTHERN_NORWAY: return \"sma_NO\";\n          case SUBLANG_SAMI_SOUTHERN_SWEDEN: return \"sma_SE\";\n          /* Skolt Sami */\n          case 0x1d: return \"sms\";\n          case SUBLANG_SAMI_SKOLT_FINLAND: return \"sms_FI\";\n          /* Inari Sami */\n          case 0x1c: return \"smn\";\n          case SUBLANG_SAMI_INARI_FINLAND: return \"smn_FI\";\n          }\n        return \"se\"; /* or \"smi\"? */\n      case LANG_SANSKRIT:\n        switch (sub)\n          {\n          case SUBLANG_SANSKRIT_INDIA: return \"sa_IN\";\n          }\n        return \"sa\";\n      case LANG_SCOTTISH_GAELIC:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"gd_GB\";\n          }\n        return \"gd\";\n      case LANG_SINDHI:\n        switch (sub)\n          {\n          case SUBLANG_SINDHI_INDIA: return \"sd_IN\";\n          case SUBLANG_SINDHI_PAKISTAN: return \"sd_PK\";\n          /*case SUBLANG_SINDHI_AFGHANISTAN: return \"sd_AF\";*/\n          }\n        return \"sd\";\n      case LANG_SINHALESE:\n        switch (sub)\n          {\n          case SUBLANG_SINHALESE_SRI_LANKA: return \"si_LK\";\n          }\n        return \"si\";\n      case LANG_SLOVAK:\n        switch (sub)\n          {\n          case SUBLANG_SLOVAK_SLOVAKIA: return \"sk_SK\";\n          }\n        return \"sk\";\n      case LANG_SLOVENIAN:\n        switch (sub)\n          {\n          case SUBLANG_SLOVENIAN_SLOVENIA: return \"sl_SI\";\n          }\n        return \"sl\";\n      case LANG_SOMALI:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"so_SO\";\n          }\n        return \"so\";\n      case LANG_SORBIAN:\n        /* FIXME: Adjust this when such locales appear on Unix.  */\n        switch (sub)\n          {\n          /* Upper Sorbian */\n          case 0x00: return \"hsb\";\n          case SUBLANG_UPPER_SORBIAN_GERMANY: return \"hsb_DE\";\n          /* Lower Sorbian */\n          case 0x1f: return \"dsb\";\n          case SUBLANG_LOWER_SORBIAN_GERMANY: return \"dsb_DE\";\n          }\n        return \"wen\";\n      case LANG_SOTHO:\n        /* <http://www.microsoft.com/globaldev/reference/lcid-all.mspx> calls\n           it \"Sepedi\"; according to\n           <http://www.ethnologue.com/show_language.asp?code=nso>\n           <http://www.ethnologue.com/show_language.asp?code=sot>\n           it's the same as Northern Sotho.  */\n        switch (sub)\n          {\n          case SUBLANG_SOTHO_SOUTH_AFRICA: return \"nso_ZA\";\n          }\n        return \"nso\";\n      case LANG_SPANISH:\n        switch (sub)\n          {\n          case SUBLANG_SPANISH: return \"es_ES\";\n          case SUBLANG_SPANISH_MEXICAN: return \"es_MX\";\n          case SUBLANG_SPANISH_MODERN:\n            return \"es_ES@modern\";      /* not seen on Unix */\n          case SUBLANG_SPANISH_GUATEMALA: return \"es_GT\";\n          case SUBLANG_SPANISH_COSTA_RICA: return \"es_CR\";\n          case SUBLANG_SPANISH_PANAMA: return \"es_PA\";\n          case SUBLANG_SPANISH_DOMINICAN_REPUBLIC: return \"es_DO\";\n          case SUBLANG_SPANISH_VENEZUELA: return \"es_VE\";\n          case SUBLANG_SPANISH_COLOMBIA: return \"es_CO\";\n          case SUBLANG_SPANISH_PERU: return \"es_PE\";\n          case SUBLANG_SPANISH_ARGENTINA: return \"es_AR\";\n          case SUBLANG_SPANISH_ECUADOR: return \"es_EC\";\n          case SUBLANG_SPANISH_CHILE: return \"es_CL\";\n          case SUBLANG_SPANISH_URUGUAY: return \"es_UY\";\n          case SUBLANG_SPANISH_PARAGUAY: return \"es_PY\";\n          case SUBLANG_SPANISH_BOLIVIA: return \"es_BO\";\n          case SUBLANG_SPANISH_EL_SALVADOR: return \"es_SV\";\n          case SUBLANG_SPANISH_HONDURAS: return \"es_HN\";\n          case SUBLANG_SPANISH_NICARAGUA: return \"es_NI\";\n          case SUBLANG_SPANISH_PUERTO_RICO: return \"es_PR\";\n          case SUBLANG_SPANISH_US: return \"es_US\";\n          }\n        return \"es\";\n      case LANG_SUTU:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"bnt_TZ\"; /* or \"st_LS\" or \"nso_ZA\"? */\n          }\n        return \"bnt\";\n      case LANG_SWAHILI:\n        switch (sub)\n          {\n          case SUBLANG_SWAHILI_KENYA: return \"sw_KE\";\n          }\n        return \"sw\";\n      case LANG_SWEDISH:\n        switch (sub)\n          {\n          case SUBLANG_SWEDISH_SWEDEN: return \"sv_SE\";\n          case SUBLANG_SWEDISH_FINLAND: return \"sv_FI\";\n          }\n        return \"sv\";\n      case LANG_SYRIAC:\n        switch (sub)\n          {\n          case SUBLANG_SYRIAC_SYRIA: return \"syr_SY\"; /* An extinct language.  */\n          }\n        return \"syr\";\n      case LANG_TAGALOG:\n        switch (sub)\n          {\n          case SUBLANG_TAGALOG_PHILIPPINES: return \"tl_PH\"; /* or \"fil_PH\"? */\n          }\n        return \"tl\"; /* or \"fil\"? */\n      case LANG_TAJIK:\n        switch (sub)\n          {\n          case 0x1f: return \"tg\";\n          case SUBLANG_TAJIK_TAJIKISTAN: return \"tg_TJ\";\n          }\n        return \"tg\";\n      case LANG_TAMAZIGHT:\n        /* Note: Microsoft uses the non-ISO language code \"tmz\".  */\n        switch (sub)\n          {\n          /* FIXME: Adjust this when Tamazight locales appear on Unix.  */\n          case SUBLANG_TAMAZIGHT_ARABIC: return \"ber_MA@arabic\";\n          case 0x1f: return \"ber@latin\";\n          case SUBLANG_TAMAZIGHT_ALGERIA_LATIN: return \"ber_DZ@latin\";\n          }\n        return \"ber\";\n      case LANG_TAMIL:\n        switch (sub)\n          {\n          case SUBLANG_TAMIL_INDIA: return \"ta_IN\";\n          }\n        return \"ta\"; /* Ambiguous: could be \"ta_IN\" or \"ta_LK\" or \"ta_SG\".  */\n      case LANG_TATAR:\n        switch (sub)\n          {\n          case SUBLANG_TATAR_RUSSIA: return \"tt_RU\";\n          }\n        return \"tt\";\n      case LANG_TELUGU:\n        switch (sub)\n          {\n          case SUBLANG_TELUGU_INDIA: return \"te_IN\";\n          }\n        return \"te\";\n      case LANG_THAI:\n        switch (sub)\n          {\n          case SUBLANG_THAI_THAILAND: return \"th_TH\";\n          }\n        return \"th\";\n      case LANG_TIBETAN:\n        switch (sub)\n          {\n          case SUBLANG_TIBETAN_PRC:\n            /* Most Tibetans would not like \"bo_CN\".  But Tibet does not yet\n               have a country code of its own.  */\n            return \"bo\";\n          case SUBLANG_TIBETAN_BHUTAN: return \"bo_BT\";\n          }\n        return \"bo\";\n      case LANG_TIGRINYA:\n        switch (sub)\n          {\n          case SUBLANG_TIGRINYA_ETHIOPIA: return \"ti_ET\";\n          case SUBLANG_TIGRINYA_ERITREA: return \"ti_ER\";\n          }\n        return \"ti\";\n      case LANG_TSONGA:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"ts_ZA\";\n          }\n        return \"ts\";\n      case LANG_TSWANA:\n        /* Spoken in South Africa, Botswana.  */\n        switch (sub)\n          {\n          case SUBLANG_TSWANA_SOUTH_AFRICA: return \"tn_ZA\";\n          }\n        return \"tn\";\n      case LANG_TURKISH:\n        switch (sub)\n          {\n          case SUBLANG_TURKISH_TURKEY: return \"tr_TR\";\n          }\n        return \"tr\";\n      case LANG_TURKMEN:\n        switch (sub)\n          {\n          case SUBLANG_TURKMEN_TURKMENISTAN: return \"tk_TM\";\n          }\n        return \"tk\";\n      case LANG_UIGHUR:\n        switch (sub)\n          {\n          case SUBLANG_UIGHUR_PRC: return \"ug_CN\";\n          }\n        return \"ug\";\n      case LANG_UKRAINIAN:\n        switch (sub)\n          {\n          case SUBLANG_UKRAINIAN_UKRAINE: return \"uk_UA\";\n          }\n        return \"uk\";\n      case LANG_URDU:\n        switch (sub)\n          {\n          case SUBLANG_URDU_PAKISTAN: return \"ur_PK\";\n          case SUBLANG_URDU_INDIA: return \"ur_IN\";\n          }\n        return \"ur\";\n      case LANG_UZBEK:\n        switch (sub)\n          {\n          case 0x1f: return \"uz\";\n          case SUBLANG_UZBEK_LATIN: return \"uz_UZ\";\n          case 0x1e: return \"uz@cyrillic\";\n          case SUBLANG_UZBEK_CYRILLIC: return \"uz_UZ@cyrillic\";\n          }\n        return \"uz\";\n      case LANG_VENDA:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"ve_ZA\";\n          }\n        return \"ve\";\n      case LANG_VIETNAMESE:\n        switch (sub)\n          {\n          case SUBLANG_VIETNAMESE_VIETNAM: return \"vi_VN\";\n          }\n        return \"vi\";\n      case LANG_WELSH:\n        switch (sub)\n          {\n          case SUBLANG_WELSH_UNITED_KINGDOM: return \"cy_GB\";\n          }\n        return \"cy\";\n      case LANG_WOLOF:\n        switch (sub)\n          {\n          case SUBLANG_WOLOF_SENEGAL: return \"wo_SN\";\n          }\n        return \"wo\";\n      case LANG_XHOSA:\n        switch (sub)\n          {\n          case SUBLANG_XHOSA_SOUTH_AFRICA: return \"xh_ZA\";\n          }\n        return \"xh\";\n      case LANG_YAKUT:\n        switch (sub)\n          {\n          case SUBLANG_YAKUT_RUSSIA: return \"sah_RU\";\n          }\n        return \"sah\";\n      case LANG_YI:\n        switch (sub)\n          {\n          case SUBLANG_YI_PRC: return \"ii_CN\";\n          }\n        return \"ii\";\n      case LANG_YIDDISH:\n        switch (sub)\n          {\n          case SUBLANG_DEFAULT: return \"yi_IL\";\n          }\n        return \"yi\";\n      case LANG_YORUBA:\n        switch (sub)\n          {\n          case SUBLANG_YORUBA_NIGERIA: return \"yo_NG\";\n          }\n        return \"yo\";\n      case LANG_ZULU:\n        switch (sub)\n          {\n          case SUBLANG_ZULU_SOUTH_AFRICA: return \"zu_ZA\";\n          }\n        return \"zu\";\n      default: return \"C\";\n      }\n  }\n}",
      "lines": 1044,
      "depth": 12,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_from_win32_LANGID (LANGID langid)",
        "*"
      ]
    },
    "gl_locale_name_from_win32_LCID": {
      "start_point": [
        2508,
        0
      ],
      "end_point": [
        2517,
        1
      ],
      "content": "const char *\ngl_locale_name_from_win32_LCID (LCID lcid)\n{\n  LANGID langid;\n\n  /* Strip off the sorting rules, keep only the language part.  */\n  langid = LANGIDFROMLCID (lcid);\n\n  return gl_locale_name_from_win32_LANGID (langid);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_from_win32_LCID (LCID lcid)",
        "*"
      ]
    },
    "enum_locales_fn": {
      "start_point": [
        2527,
        0
      ],
      "end_point": [
        2553,
        1
      ],
      "content": "static BOOL CALLBACK\nenum_locales_fn (LPTSTR locale_num_str)\n{\n  char *endp;\n  char locval[2 * LOCALE_NAME_MAX_LENGTH + 1 + 1];\n  LCID try_lcid = strtoul (locale_num_str, &endp, 16);\n\n  if (GetLocaleInfo (try_lcid, LOCALE_SENGLANGUAGE,\n                    locval, LOCALE_NAME_MAX_LENGTH))\n    {\n      strcat (locval, \"_\");\n      if (GetLocaleInfo (try_lcid, LOCALE_SENGCOUNTRY,\n                        locval + strlen (locval), LOCALE_NAME_MAX_LENGTH))\n       {\n         size_t locval_len = strlen (locval);\n\n         if (strncmp (locval, lname, locval_len) == 0\n             && (lname[locval_len] == '.'\n                 || lname[locval_len] == '\\0'))\n           {\n             found_lcid = try_lcid;\n             return FALSE;\n           }\n       }\n    }\n  return TRUE;\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "BOOL",
        "CALLBACK",
        "CALLBACK"
      ]
    },
    "get_lcid": {
      "start_point": [
        2562,
        0
      ],
      "end_point": [
        2588,
        1
      ],
      "content": "static LCID\nget_lcid (const char *locale_name)\n{\n  /* A simple cache.  */\n  static LCID last_lcid;\n  static char last_locale[1000];\n\n  /* Lock while looking for an LCID, to protect access to static\n     variables: last_lcid, last_locale, found_lcid, and lname.  */\n  gl_lock_lock (get_lcid_lock);\n  if (last_lcid > 0 && strcmp (locale_name, last_locale) == 0)\n    {\n      gl_lock_unlock (get_lcid_lock);\n      return last_lcid;\n    }\n  strncpy (lname, locale_name, sizeof (lname) - 1);\n  lname[sizeof (lname) - 1] = '\\0';\n  found_lcid = 0;\n  EnumSystemLocales (enum_locales_fn, LCID_SUPPORTED);\n  if (found_lcid > 0)\n    {\n      last_lcid = found_lcid;\n      strcpy (last_locale, locale_name);\n    }\n  gl_lock_unlock (get_lcid_lock);\n  return found_lcid;\n}",
      "lines": 27,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "LCID"
      ]
    },
    "string_hash": {
      "start_point": [
        2604,
        0
      ],
      "end_point": [
        2614,
        1
      ],
      "content": "static size_t _GL_ATTRIBUTE_PURE\nstring_hash (const void *x)\n{\n  const char *s = (const char *) x;\n  size_t h = 0;\n\n  for (; *s; s++)\n    h = *s + ((h << 9) | (h >> (SIZE_BITS - 9)));\n\n  return h;\n}",
      "lines": 11,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "size_t",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "struniq": {
      "start_point": [
        2636,
        0
      ],
      "end_point": [
        2674,
        1
      ],
      "content": "static const char *\nstruniq (const char *string)\n{\n  size_t hashcode = string_hash (string);\n  size_t slot = hashcode % HASH_TABLE_SIZE;\n  size_t size;\n  struct hash_node *new_node;\n  struct hash_node *p;\n  for (p = struniq_hash_table[slot]; p != NULL; p = p->next)\n    if (strcmp (p->contents, string) == 0)\n      return p->contents;\n  size = strlen (string) + 1;\n  new_node =\n    (struct hash_node *)\n    malloc (FLEXSIZEOF (struct hash_node, contents, size));\n  if (new_node == NULL)\n    /* Out of memory.  Return a statically allocated string.  */\n    return \"C\";\n  memcpy (new_node->contents, string, size);\n  /* Lock while inserting new_node.  */\n  gl_lock_lock (struniq_lock);\n  /* Check whether another thread already added the string while we were\n     waiting on the lock.  */\n  for (p = struniq_hash_table[slot]; p != NULL; p = p->next)\n    if (strcmp (p->contents, string) == 0)\n      {\n        free (new_node);\n        new_node = p;\n        goto done;\n      }\n  /* Really insert new_node into the hash table.  Fill new_node entirely first,\n     because other threads may be iterating over the linked list.  */\n  new_node->next = struniq_hash_table[slot];\n  struniq_hash_table[slot] = new_node;\n done:\n  /* Unlock after new_node is inserted.  */\n  gl_lock_unlock (struniq_lock);\n  return new_node->contents;\n}",
      "lines": 39,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\nstruniq (const char *string)",
        "*"
      ]
    },
    "gl_locale_name_thread_unsafe": {
      "start_point": [
        2686,
        0
      ],
      "end_point": [
        2756,
        1
      ],
      "content": "const char *\ngl_locale_name_thread_unsafe (int category, const char *categoryname)\n{\n# if HAVE_USELOCALE\n  {\n    locale_t thread_locale = uselocale (NULL);\n    if (thread_locale != LC_GLOBAL_LOCALE)\n      {\n#  if __GLIBC__ >= 2 && !defined __UCLIBC__\n        /* Work around an incorrect definition of the _NL_LOCALE_NAME macro in\n           glibc < 2.12.\n           See <http://sourceware.org/bugzilla/show_bug.cgi?id=10968>.  */\n        const char *name =\n          nl_langinfo (_NL_ITEM ((category), _NL_ITEM_INDEX (-1)));\n        if (name[0] == '\\0')\n          /* Fallback code for glibc < 2.4, which did not implement\n             nl_langinfo (_NL_LOCALE_NAME (category)).  */\n          name = thread_locale->__names[category];\n        return name;\n#  elif (defined __FreeBSD__ || defined __DragonFly__) || (defined __APPLE__ && defined __MACH__)\n        /* FreeBSD, Mac OS X */\n        int mask;\n\n        switch (category)\n          {\n          case LC_CTYPE:\n            mask = LC_CTYPE_MASK;\n            break;\n          case LC_NUMERIC:\n            mask = LC_NUMERIC_MASK;\n            break;\n          case LC_TIME:\n            mask = LC_TIME_MASK;\n            break;\n          case LC_COLLATE:\n            mask = LC_COLLATE_MASK;\n            break;\n          case LC_MONETARY:\n            mask = LC_MONETARY_MASK;\n            break;\n          case LC_MESSAGES:\n            mask = LC_MESSAGES_MASK;\n            break;\n          default: /* We shouldn't get here.  */\n            return \"\";\n          }\n        return querylocale (mask, thread_locale);\n#  elif defined __sun && HAVE_GETLOCALENAME_L\n        /* Solaris >= 12.  */\n        return getlocalename_l (category, thread_locale);\n#  elif defined __CYGWIN__\n        /* Cygwin < 2.6 lacks uselocale and thread-local locales altogether.\n           Cygwin <= 2.6.1 lacks NL_LOCALE_NAME, requiring peeking inside\n           an opaque struct.  */\n#   ifdef NL_LOCALE_NAME\n        return nl_langinfo_l (NL_LOCALE_NAME (category), thread_locale);\n#   else\n        /* FIXME: Remove when we can assume new-enough Cygwin.  */\n        struct __locale_t {\n          char categories[7][32];\n        };\n        return ((struct __locale_t *) thread_locale)->categories[category];\n#   endif\n#  elif defined __ANDROID__\n        return MB_CUR_MAX == 4 ? \"C.UTF-8\" : \"C\";\n#  endif\n      }\n  }\n# endif\n  return NULL;\n}",
      "lines": 71,
      "depth": 20,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_thread_unsafe (int category, const char *categoryname)",
        "*"
      ]
    },
    "gl_locale_name_thread": {
      "start_point": [
        2760,
        0
      ],
      "end_point": [
        2790,
        1
      ],
      "content": "const char *\ngl_locale_name_thread (int category, const char *categoryname)\n{\n#if HAVE_USELOCALE\n  const char *name = gl_locale_name_thread_unsafe (category, categoryname);\n  if (name != NULL)\n    return struniq (name);\n#elif defined WINDOWS_NATIVE\n  if (LC_MIN <= category && category <= LC_MAX)\n    {\n      char *locname = setlocale (category, NULL);\n      LCID lcid = 0;\n\n      /* If CATEGORY is LC_ALL, the result might be a semi-colon\n        separated list of locales.  We need only one, so we take the\n        one corresponding to LC_CTYPE, as the most important for\n        character translations.  */\n      if (strchr (locname, ';'))\n       locname = setlocale (LC_CTYPE, NULL);\n\n      /* Convert locale name to LCID.  We don't want to use\n         LocaleNameToLCID because (a) it is only available since Vista,\n         and (b) it doesn't accept locale names returned by 'setlocale'.  */\n      lcid = get_lcid (locname);\n\n      if (lcid > 0)\n        return gl_locale_name_from_win32_LCID (lcid);\n    }\n#endif\n  return NULL;\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_thread (int category, const char *categoryname)",
        "*"
      ]
    },
    "gl_locale_name_posix": {
      "start_point": [
        2802,
        0
      ],
      "end_point": [
        2829,
        1
      ],
      "content": "const char *\ngl_locale_name_posix (int category, const char *categoryname)\n{\n  /* Use the POSIX methods of looking to 'LC_ALL', 'LC_xxx', and 'LANG'.\n     On some systems this can be done by the 'setlocale' function itself.  */\n#if defined HAVE_SETLOCALE && defined HAVE_LC_MESSAGES && defined HAVE_LOCALE_NULL\n  return setlocale (category, NULL);\n#else\n  /* On other systems we ignore what setlocale reports and instead look at the\n     environment variables directly.  This is necessary\n       1. on systems which have a facility for customizing the default locale\n          (Mac OS X, native Windows, Cygwin) and where the system's setlocale()\n          function ignores this default locale (Mac OS X, Cygwin), in two cases:\n          a. when the user missed to use the setlocale() override from libintl\n             (for example by not including <libintl.h>),\n          b. when setlocale supports only the \"C\" locale, such as on Cygwin\n             1.5.x.  In this case even the override from libintl cannot help.\n       2. on all systems where setlocale supports only the \"C\" locale.  */\n  /* Strictly speaking, it is a POSIX violation to look at the environment\n     variables regardless whether setlocale has been called or not.  POSIX\n     says:\n         \"For C-language programs, the POSIX locale shall be the\n          default locale when the setlocale() function is not called.\"\n     But we assume that all programs that use internationalized APIs call\n     setlocale (LC_ALL, \"\").  */\n  return gl_locale_name_environ (category, categoryname);\n#endif\n}",
      "lines": 28,
      "depth": 8,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_posix (int category, const char *categoryname)",
        "*"
      ]
    },
    "gl_locale_name_environ": {
      "start_point": [
        2831,
        0
      ],
      "end_point": [
        2862,
        1
      ],
      "content": "const char *\ngl_locale_name_environ (int category, const char *categoryname)\n{\n  const char *retval;\n\n  /* Setting of LC_ALL overrides all other.  */\n  retval = getenv (\"LC_ALL\");\n  if (retval != NULL && retval[0] != '\\0')\n    return retval;\n  /* Next comes the name of the desired category.  */\n  retval = getenv (categoryname);\n  if (retval != NULL && retval[0] != '\\0')\n    return retval;\n  /* Last possibility is the LANG environment variable.  */\n  retval = getenv (\"LANG\");\n  if (retval != NULL && retval[0] != '\\0')\n    {\n#if HAVE_CFLOCALECOPYCURRENT || HAVE_CFPREFERENCESCOPYAPPVALUE\n      /* Mac OS X 10.2 or newer.\n         Ignore invalid LANG value set by the Terminal application.  */\n      if (strcmp (retval, \"UTF-8\") != 0)\n#endif\n#if defined __CYGWIN__\n      /* Cygwin.\n         Ignore dummy LANG value set by ~/.profile.  */\n      if (strcmp (retval, \"C.UTF-8\") != 0)\n#endif\n        return retval;\n    }\n\n  return NULL;\n}",
      "lines": 32,
      "depth": 12,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_environ (int category, const char *categoryname)",
        "*"
      ]
    },
    "gl_locale_name_default": {
      "start_point": [
        2864,
        0
      ],
      "end_point": [
        2961,
        1
      ],
      "content": "const char *\ngl_locale_name_default (void)\n{\n  /* POSIX:2001 says:\n     \"All implementations shall define a locale as the default locale, to be\n      invoked when no environment variables are set, or set to the empty\n      string.  This default locale can be the POSIX locale or any other\n      implementation-defined locale.  Some implementations may provide\n      facilities for local installation administrators to set the default\n      locale, customizing it for each location.  POSIX:2001 does not require\n      such a facility.\n\n     The systems with such a facility are Mac OS X and Windows: They provide a\n     GUI that allows the user to choose a locale.\n       - On Mac OS X, by default, none of LC_* or LANG are set.  Starting with\n         Mac OS X 10.4 or 10.5, LANG is set for processes launched by the\n         'Terminal' application (but sometimes to an incorrect value \"UTF-8\").\n         When no environment variable is set, setlocale (LC_ALL, \"\") uses the\n         \"C\" locale.\n       - On native Windows, by default, none of LC_* or LANG are set.\n         When no environment variable is set, setlocale (LC_ALL, \"\") uses the\n         locale chosen by the user.\n       - On Cygwin 1.5.x, by default, none of LC_* or LANG are set.\n         When no environment variable is set, setlocale (LC_ALL, \"\") uses the\n         \"C\" locale.\n       - On Cygwin 1.7, by default, LANG is set to \"C.UTF-8\" when the default\n         ~/.profile is executed.\n         When no environment variable is set, setlocale (LC_ALL, \"\") uses the\n         \"C.UTF-8\" locale, which operates in the same way as the \"C\" locale.\n  */\n\n#if !(HAVE_CFLOCALECOPYCURRENT || HAVE_CFPREFERENCESCOPYAPPVALUE || defined WINDOWS_NATIVE || defined __CYGWIN__)\n\n  /* The system does not have a way of setting the locale, other than the\n     POSIX specified environment variables.  We use C as default locale.  */\n  return \"C\";\n\n#else\n\n  /* Return an XPG style locale name language[_territory][@modifier].\n     Don't even bother determining the codeset; it's not useful in this\n     context, because message catalogs are not specific to a single\n     codeset.  */\n\n# if HAVE_CFLOCALECOPYCURRENT || HAVE_CFPREFERENCESCOPYAPPVALUE\n  /* Mac OS X 10.2 or newer */\n  {\n    /* Cache the locale name, since CoreFoundation calls are expensive.  */\n    static const char *cached_localename;\n\n    if (cached_localename == NULL)\n      {\n        char namebuf[256];\n#  if HAVE_CFLOCALECOPYCURRENT /* Mac OS X 10.3 or newer */\n        CFLocaleRef locale = CFLocaleCopyCurrent ();\n        CFStringRef name = CFLocaleGetIdentifier (locale);\n\n        if (CFStringGetCString (name, namebuf, sizeof (namebuf),\n                                kCFStringEncodingASCII))\n          {\n            gl_locale_name_canonicalize (namebuf);\n            cached_localename = strdup (namebuf);\n          }\n        CFRelease (locale);\n#  elif HAVE_CFPREFERENCESCOPYAPPVALUE /* Mac OS X 10.2 or newer */\n        CFTypeRef value =\n          CFPreferencesCopyAppValue (CFSTR (\"AppleLocale\"),\n                                     kCFPreferencesCurrentApplication);\n        if (value != NULL\n            && CFGetTypeID (value) == CFStringGetTypeID ()\n            && CFStringGetCString ((CFStringRef)value,\n                                   namebuf, sizeof (namebuf),\n                                   kCFStringEncodingASCII))\n          {\n            gl_locale_name_canonicalize (namebuf);\n            cached_localename = strdup (namebuf);\n          }\n#  endif\n        if (cached_localename == NULL)\n          cached_localename = \"C\";\n      }\n    return cached_localename;\n  }\n\n# endif\n\n# if defined WINDOWS_NATIVE || defined __CYGWIN__ /* Native Windows or Cygwin */\n  {\n    LCID lcid;\n\n    /* Use native Windows API locale ID.  */\n    lcid = GetThreadLocale ();\n\n    return gl_locale_name_from_win32_LCID (lcid);\n  }\n# endif\n#endif\n}",
      "lines": 98,
      "depth": 18,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name_default (void)",
        "*"
      ]
    },
    "gl_locale_name": {
      "start_point": [
        2969,
        0
      ],
      "end_point": [
        2983,
        1
      ],
      "content": "const char *\ngl_locale_name (int category, const char *categoryname)\n{\n  const char *retval;\n\n  retval = gl_locale_name_thread (category, categoryname);\n  if (retval != NULL)\n    return retval;\n\n  retval = gl_locale_name_posix (category, categoryname);\n  if (retval != NULL)\n    return retval;\n\n  return gl_locale_name_default ();\n}",
      "lines": 15,
      "depth": 7,
      "decorators": [
        "const",
        "const",
        "char",
        "*\ngl_locale_name (int category, const char *categoryname)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/localename.h": {},
  "grep/grep-3.1/gnulib-tests/macros.h": {},
  "grep/grep-3.1/gnulib-tests/offtostr.c": {},
  "grep/grep-3.1/gnulib-tests/pipe.c": {
    "pipe": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "int\npipe (int fd[2])\n{\n  /* Mingw changes fd to {-1,-1} on failure, but this violates\n     http://austingroupbugs.net/view.php?id=467 */\n  int tmp[2];\n  int result = _pipe (tmp, 4096, _O_BINARY);\n  if (!result)\n    {\n      fd[0] = tmp[0];\n      fd[1] = tmp[1];\n    }\n  return result;\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/printf-args.c": {
    "PRINTF_FETCHARGS": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        186,
        1
      ],
      "content": "int\nPRINTF_FETCHARGS (va_list args, arguments *a)\n{\n  size_t i;\n  argument *ap;\n\n  for (i = 0, ap = &a->arg[0]; i < a->count; i++, ap++)\n    switch (ap->type)\n      {\n      case TYPE_SCHAR:\n        ap->a.a_schar = va_arg (args, /*signed char*/ int);\n        break;\n      case TYPE_UCHAR:\n        ap->a.a_uchar = va_arg (args, /*unsigned char*/ int);\n        break;\n      case TYPE_SHORT:\n        ap->a.a_short = va_arg (args, /*short*/ int);\n        break;\n      case TYPE_USHORT:\n        ap->a.a_ushort = va_arg (args, /*unsigned short*/ int);\n        break;\n      case TYPE_INT:\n        ap->a.a_int = va_arg (args, int);\n        break;\n      case TYPE_UINT:\n        ap->a.a_uint = va_arg (args, unsigned int);\n        break;\n      case TYPE_LONGINT:\n        ap->a.a_longint = va_arg (args, long int);\n        break;\n      case TYPE_ULONGINT:\n        ap->a.a_ulongint = va_arg (args, unsigned long int);\n        break;\n#if HAVE_LONG_LONG_INT\n      case TYPE_LONGLONGINT:\n        ap->a.a_longlongint = va_arg (args, long long int);\n        break;\n      case TYPE_ULONGLONGINT:\n        ap->a.a_ulonglongint = va_arg (args, unsigned long long int);\n        break;\n#endif\n      case TYPE_DOUBLE:\n        ap->a.a_double = va_arg (args, double);\n        break;\n      case TYPE_LONGDOUBLE:\n        ap->a.a_longdouble = va_arg (args, long double);\n        break;\n      case TYPE_CHAR:\n        ap->a.a_char = va_arg (args, int);\n        break;\n#if HAVE_WINT_T\n      case TYPE_WIDE_CHAR:\n        /* Although ISO C 99 7.24.1.(2) says that wint_t is \"unchanged by\n           default argument promotions\", this is not the case in mingw32,\n           where wint_t is 'unsigned short'.  */\n        ap->a.a_wide_char =\n          (sizeof (wint_t) < sizeof (int)\n           ? (wint_t) va_arg (args, int)\n           : va_arg (args, wint_t));\n        break;\n#endif\n      case TYPE_STRING:\n        ap->a.a_string = va_arg (args, const char *);\n        /* A null pointer is an invalid argument for \"%s\", but in practice\n           it occurs quite frequently in printf statements that produce\n           debug output.  Use a fallback in this case.  */\n        if (ap->a.a_string == NULL)\n          ap->a.a_string = \"(NULL)\";\n        break;\n#if HAVE_WCHAR_T\n      case TYPE_WIDE_STRING:\n        ap->a.a_wide_string = va_arg (args, const wchar_t *);\n        /* A null pointer is an invalid argument for \"%ls\", but in practice\n           it occurs quite frequently in printf statements that produce\n           debug output.  Use a fallback in this case.  */\n        if (ap->a.a_wide_string == NULL)\n          {\n            static const wchar_t wide_null_string[] =\n              {\n                (wchar_t)'(',\n                (wchar_t)'N', (wchar_t)'U', (wchar_t)'L', (wchar_t)'L',\n                (wchar_t)')',\n                (wchar_t)0\n              };\n            ap->a.a_wide_string = wide_null_string;\n          }\n        break;\n#endif\n      case TYPE_POINTER:\n        ap->a.a_pointer = va_arg (args, void *);\n        break;\n      case TYPE_COUNT_SCHAR_POINTER:\n        ap->a.a_count_schar_pointer = va_arg (args, signed char *);\n        break;\n      case TYPE_COUNT_SHORT_POINTER:\n        ap->a.a_count_short_pointer = va_arg (args, short *);\n        break;\n      case TYPE_COUNT_INT_POINTER:\n        ap->a.a_count_int_pointer = va_arg (args, int *);\n        break;\n      case TYPE_COUNT_LONGINT_POINTER:\n        ap->a.a_count_longint_pointer = va_arg (args, long int *);\n        break;\n#if HAVE_LONG_LONG_INT\n      case TYPE_COUNT_LONGLONGINT_POINTER:\n        ap->a.a_count_longlongint_pointer = va_arg (args, long long int *);\n        break;\n#endif\n#if ENABLE_UNISTDIO\n      /* The unistdio extensions.  */\n      case TYPE_U8_STRING:\n        ap->a.a_u8_string = va_arg (args, const uint8_t *);\n        /* A null pointer is an invalid argument for \"%U\", but in practice\n           it occurs quite frequently in printf statements that produce\n           debug output.  Use a fallback in this case.  */\n        if (ap->a.a_u8_string == NULL)\n          {\n            static const uint8_t u8_null_string[] =\n              { '(', 'N', 'U', 'L', 'L', ')', 0 };\n            ap->a.a_u8_string = u8_null_string;\n          }\n        break;\n      case TYPE_U16_STRING:\n        ap->a.a_u16_string = va_arg (args, const uint16_t *);\n        /* A null pointer is an invalid argument for \"%lU\", but in practice\n           it occurs quite frequently in printf statements that produce\n           debug output.  Use a fallback in this case.  */\n        if (ap->a.a_u16_string == NULL)\n          {\n            static const uint16_t u16_null_string[] =\n              { '(', 'N', 'U', 'L', 'L', ')', 0 };\n            ap->a.a_u16_string = u16_null_string;\n          }\n        break;\n      case TYPE_U32_STRING:\n        ap->a.a_u32_string = va_arg (args, const uint32_t *);\n        /* A null pointer is an invalid argument for \"%llU\", but in practice\n           it occurs quite frequently in printf statements that produce\n           debug output.  Use a fallback in this case.  */\n        if (ap->a.a_u32_string == NULL)\n          {\n            static const uint32_t u32_null_string[] =\n              { '(', 'N', 'U', 'L', 'L', ')', 0 };\n            ap->a.a_u32_string = u32_null_string;\n          }\n        break;\n#endif\n      default:\n        /* Unknown type.  */\n        return -1;\n      }\n  return 0;\n}",
      "lines": 153,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/printf-args.h": {},
  "grep/grep-3.1/gnulib-tests/printf-parse.c": {
    "PRINTF_PARSE": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        631,
        1
      ],
      "content": "int\nPRINTF_PARSE (const CHAR_T *format, DIRECTIVES *d, arguments *a)\n{\n  const CHAR_T *cp = format;    /* pointer into format */\n  size_t arg_posn = 0;          /* number of regular arguments consumed */\n  size_t d_allocated;           /* allocated elements of d->dir */\n  size_t a_allocated;           /* allocated elements of a->arg */\n  size_t max_width_length = 0;\n  size_t max_precision_length = 0;\n\n  d->count = 0;\n  d_allocated = N_DIRECT_ALLOC_DIRECTIVES;\n  d->dir = d->direct_alloc_dir;\n\n  a->count = 0;\n  a_allocated = N_DIRECT_ALLOC_ARGUMENTS;\n  a->arg = a->direct_alloc_arg;\n\n#define REGISTER_ARG(_index_,_type_) \\\n  {                                                                     \\\n    size_t n = (_index_);                                               \\\n    if (n >= a_allocated)                                               \\\n      {                                                                 \\\n        size_t memory_size;                                             \\\n        argument *memory;                                               \\\n                                                                        \\\n        a_allocated = xtimes (a_allocated, 2);                          \\\n        if (a_allocated <= n)                                           \\\n          a_allocated = xsum (n, 1);                                    \\\n        memory_size = xtimes (a_allocated, sizeof (argument));          \\\n        if (size_overflow_p (memory_size))                              \\\n          /* Overflow, would lead to out of memory.  */                 \\\n          goto out_of_memory;                                           \\\n        memory = (argument *) (a->arg != a->direct_alloc_arg            \\\n                               ? realloc (a->arg, memory_size)          \\\n                               : malloc (memory_size));                 \\\n        if (memory == NULL)                                             \\\n          /* Out of memory.  */                                         \\\n          goto out_of_memory;                                           \\\n        if (a->arg == a->direct_alloc_arg)                              \\\n          memcpy (memory, a->arg, a->count * sizeof (argument));        \\\n        a->arg = memory;                                                \\\n      }                                                                 \\\n    while (a->count <= n)                                               \\\n      a->arg[a->count++].type = TYPE_NONE;                              \\\n    if (a->arg[n].type == TYPE_NONE)                                    \\\n      a->arg[n].type = (_type_);                                        \\\n    else if (a->arg[n].type != (_type_))                                \\\n      /* Ambiguous type for positional argument.  */                    \\\n      goto error;                                                       \\\n  }\n\n  while (*cp != '\\0')\n    {\n      CHAR_T c = *cp++;\n      if (c == '%')\n        {\n          size_t arg_index = ARG_NONE;\n          DIRECTIVE *dp = &d->dir[d->count]; /* pointer to next directive */\n\n          /* Initialize the next directive.  */\n          dp->dir_start = cp - 1;\n          dp->flags = 0;\n          dp->width_start = NULL;\n          dp->width_end = NULL;\n          dp->width_arg_index = ARG_NONE;\n          dp->precision_start = NULL;\n          dp->precision_end = NULL;\n          dp->precision_arg_index = ARG_NONE;\n          dp->arg_index = ARG_NONE;\n\n          /* Test for positional argument.  */\n          if (*cp >= '0' && *cp <= '9')\n            {\n              const CHAR_T *np;\n\n              for (np = cp; *np >= '0' && *np <= '9'; np++)\n                ;\n              if (*np == '$')\n                {\n                  size_t n = 0;\n\n                  for (np = cp; *np >= '0' && *np <= '9'; np++)\n                    n = xsum (xtimes (n, 10), *np - '0');\n                  if (n == 0)\n                    /* Positional argument 0.  */\n                    goto error;\n                  if (size_overflow_p (n))\n                    /* n too large, would lead to out of memory later.  */\n                    goto error;\n                  arg_index = n - 1;\n                  cp = np + 1;\n                }\n            }\n\n          /* Read the flags.  */\n          for (;;)\n            {\n              if (*cp == '\\'')\n                {\n                  dp->flags |= FLAG_GROUP;\n                  cp++;\n                }\n              else if (*cp == '-')\n                {\n                  dp->flags |= FLAG_LEFT;\n                  cp++;\n                }\n              else if (*cp == '+')\n                {\n                  dp->flags |= FLAG_SHOWSIGN;\n                  cp++;\n                }\n              else if (*cp == ' ')\n                {\n                  dp->flags |= FLAG_SPACE;\n                  cp++;\n                }\n              else if (*cp == '#')\n                {\n                  dp->flags |= FLAG_ALT;\n                  cp++;\n                }\n              else if (*cp == '0')\n                {\n                  dp->flags |= FLAG_ZERO;\n                  cp++;\n                }\n#if __GLIBC__ >= 2 && !defined __UCLIBC__\n              else if (*cp == 'I')\n                {\n                  dp->flags |= FLAG_LOCALIZED;\n                  cp++;\n                }\n#endif\n              else\n                break;\n            }\n\n          /* Parse the field width.  */\n          if (*cp == '*')\n            {\n              dp->width_start = cp;\n              cp++;\n              dp->width_end = cp;\n              if (max_width_length < 1)\n                max_width_length = 1;\n\n              /* Test for positional argument.  */\n              if (*cp >= '0' && *cp <= '9')\n                {\n                  const CHAR_T *np;\n\n                  for (np = cp; *np >= '0' && *np <= '9'; np++)\n                    ;\n                  if (*np == '$')\n                    {\n                      size_t n = 0;\n\n                      for (np = cp; *np >= '0' && *np <= '9'; np++)\n                        n = xsum (xtimes (n, 10), *np - '0');\n                      if (n == 0)\n                        /* Positional argument 0.  */\n                        goto error;\n                      if (size_overflow_p (n))\n                        /* n too large, would lead to out of memory later.  */\n                        goto error;\n                      dp->width_arg_index = n - 1;\n                      cp = np + 1;\n                    }\n                }\n              if (dp->width_arg_index == ARG_NONE)\n                {\n                  dp->width_arg_index = arg_posn++;\n                  if (dp->width_arg_index == ARG_NONE)\n                    /* arg_posn wrapped around.  */\n                    goto error;\n                }\n              REGISTER_ARG (dp->width_arg_index, TYPE_INT);\n            }\n          else if (*cp >= '0' && *cp <= '9')\n            {\n              size_t width_length;\n\n              dp->width_start = cp;\n              for (; *cp >= '0' && *cp <= '9'; cp++)\n                ;\n              dp->width_end = cp;\n              width_length = dp->width_end - dp->width_start;\n              if (max_width_length < width_length)\n                max_width_length = width_length;\n            }\n\n          /* Parse the precision.  */\n          if (*cp == '.')\n            {\n              cp++;\n              if (*cp == '*')\n                {\n                  dp->precision_start = cp - 1;\n                  cp++;\n                  dp->precision_end = cp;\n                  if (max_precision_length < 2)\n                    max_precision_length = 2;\n\n                  /* Test for positional argument.  */\n                  if (*cp >= '0' && *cp <= '9')\n                    {\n                      const CHAR_T *np;\n\n                      for (np = cp; *np >= '0' && *np <= '9'; np++)\n                        ;\n                      if (*np == '$')\n                        {\n                          size_t n = 0;\n\n                          for (np = cp; *np >= '0' && *np <= '9'; np++)\n                            n = xsum (xtimes (n, 10), *np - '0');\n                          if (n == 0)\n                            /* Positional argument 0.  */\n                            goto error;\n                          if (size_overflow_p (n))\n                            /* n too large, would lead to out of memory\n                               later.  */\n                            goto error;\n                          dp->precision_arg_index = n - 1;\n                          cp = np + 1;\n                        }\n                    }\n                  if (dp->precision_arg_index == ARG_NONE)\n                    {\n                      dp->precision_arg_index = arg_posn++;\n                      if (dp->precision_arg_index == ARG_NONE)\n                        /* arg_posn wrapped around.  */\n                        goto error;\n                    }\n                  REGISTER_ARG (dp->precision_arg_index, TYPE_INT);\n                }\n              else\n                {\n                  size_t precision_length;\n\n                  dp->precision_start = cp - 1;\n                  for (; *cp >= '0' && *cp <= '9'; cp++)\n                    ;\n                  dp->precision_end = cp;\n                  precision_length = dp->precision_end - dp->precision_start;\n                  if (max_precision_length < precision_length)\n                    max_precision_length = precision_length;\n                }\n            }\n\n          {\n            arg_type type;\n\n            /* Parse argument type/size specifiers.  */\n            {\n              int flags = 0;\n\n              for (;;)\n                {\n                  if (*cp == 'h')\n                    {\n                      flags |= (1 << (flags & 1));\n                      cp++;\n                    }\n                  else if (*cp == 'L')\n                    {\n                      flags |= 4;\n                      cp++;\n                    }\n                  else if (*cp == 'l')\n                    {\n                      flags += 8;\n                      cp++;\n                    }\n                  else if (*cp == 'j')\n                    {\n                      if (sizeof (intmax_t) > sizeof (long))\n                        {\n                          /* intmax_t = long long */\n                          flags += 16;\n                        }\n                      else if (sizeof (intmax_t) > sizeof (int))\n                        {\n                          /* intmax_t = long */\n                          flags += 8;\n                        }\n                      cp++;\n                    }\n                  else if (*cp == 'z' || *cp == 'Z')\n                    {\n                      /* 'z' is standardized in ISO C 99, but glibc uses 'Z'\n                         because the warning facility in gcc-2.95.2 understands\n                         only 'Z' (see gcc-2.95.2/gcc/c-common.c:1784).  */\n                      if (sizeof (size_t) > sizeof (long))\n                        {\n                          /* size_t = long long */\n                          flags += 16;\n                        }\n                      else if (sizeof (size_t) > sizeof (int))\n                        {\n                          /* size_t = long */\n                          flags += 8;\n                        }\n                      cp++;\n                    }\n                  else if (*cp == 't')\n                    {\n                      if (sizeof (ptrdiff_t) > sizeof (long))\n                        {\n                          /* ptrdiff_t = long long */\n                          flags += 16;\n                        }\n                      else if (sizeof (ptrdiff_t) > sizeof (int))\n                        {\n                          /* ptrdiff_t = long */\n                          flags += 8;\n                        }\n                      cp++;\n                    }\n#if defined __APPLE__ && defined __MACH__\n                  /* On Mac OS X 10.3, PRIdMAX is defined as \"qd\".\n                     We cannot change it to \"lld\" because PRIdMAX must also\n                     be understood by the system's printf routines.  */\n                  else if (*cp == 'q')\n                    {\n                      if (64 / 8 > sizeof (long))\n                        {\n                          /* int64_t = long long */\n                          flags += 16;\n                        }\n                      else\n                        {\n                          /* int64_t = long */\n                          flags += 8;\n                        }\n                      cp++;\n                    }\n#endif\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                  /* On native Windows, PRIdMAX is defined as \"I64d\".\n                     We cannot change it to \"lld\" because PRIdMAX must also\n                     be understood by the system's printf routines.  */\n                  else if (*cp == 'I' && cp[1] == '6' && cp[2] == '4')\n                    {\n                      if (64 / 8 > sizeof (long))\n                        {\n                          /* __int64 = long long */\n                          flags += 16;\n                        }\n                      else\n                        {\n                          /* __int64 = long */\n                          flags += 8;\n                        }\n                      cp += 3;\n                    }\n#endif\n                  else\n                    break;\n                }\n\n              /* Read the conversion character.  */\n              c = *cp++;\n              switch (c)\n                {\n                case 'd': case 'i':\n#if HAVE_LONG_LONG_INT\n                  /* If 'long long' exists and is larger than 'long':  */\n                  if (flags >= 16 || (flags & 4))\n                    type = TYPE_LONGLONGINT;\n                  else\n#endif\n                  /* If 'long long' exists and is the same as 'long', we parse\n                     \"lld\" into TYPE_LONGINT.  */\n                  if (flags >= 8)\n                    type = TYPE_LONGINT;\n                  else if (flags & 2)\n                    type = TYPE_SCHAR;\n                  else if (flags & 1)\n                    type = TYPE_SHORT;\n                  else\n                    type = TYPE_INT;\n                  break;\n                case 'o': case 'u': case 'x': case 'X':\n#if HAVE_LONG_LONG_INT\n                  /* If 'long long' exists and is larger than 'long':  */\n                  if (flags >= 16 || (flags & 4))\n                    type = TYPE_ULONGLONGINT;\n                  else\n#endif\n                  /* If 'unsigned long long' exists and is the same as\n                     'unsigned long', we parse \"llu\" into TYPE_ULONGINT.  */\n                  if (flags >= 8)\n                    type = TYPE_ULONGINT;\n                  else if (flags & 2)\n                    type = TYPE_UCHAR;\n                  else if (flags & 1)\n                    type = TYPE_USHORT;\n                  else\n                    type = TYPE_UINT;\n                  break;\n                case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                case 'a': case 'A':\n                  if (flags >= 16 || (flags & 4))\n                    type = TYPE_LONGDOUBLE;\n                  else\n                    type = TYPE_DOUBLE;\n                  break;\n                case 'c':\n                  if (flags >= 8)\n#if HAVE_WINT_T\n                    type = TYPE_WIDE_CHAR;\n#else\n                    goto error;\n#endif\n                  else\n                    type = TYPE_CHAR;\n                  break;\n#if HAVE_WINT_T\n                case 'C':\n                  type = TYPE_WIDE_CHAR;\n                  c = 'c';\n                  break;\n#endif\n                case 's':\n                  if (flags >= 8)\n#if HAVE_WCHAR_T\n                    type = TYPE_WIDE_STRING;\n#else\n                    goto error;\n#endif\n                  else\n                    type = TYPE_STRING;\n                  break;\n#if HAVE_WCHAR_T\n                case 'S':\n                  type = TYPE_WIDE_STRING;\n                  c = 's';\n                  break;\n#endif\n                case 'p':\n                  type = TYPE_POINTER;\n                  break;\n                case 'n':\n#if HAVE_LONG_LONG_INT\n                  /* If 'long long' exists and is larger than 'long':  */\n                  if (flags >= 16 || (flags & 4))\n                    type = TYPE_COUNT_LONGLONGINT_POINTER;\n                  else\n#endif\n                  /* If 'long long' exists and is the same as 'long', we parse\n                     \"lln\" into TYPE_COUNT_LONGINT_POINTER.  */\n                  if (flags >= 8)\n                    type = TYPE_COUNT_LONGINT_POINTER;\n                  else if (flags & 2)\n                    type = TYPE_COUNT_SCHAR_POINTER;\n                  else if (flags & 1)\n                    type = TYPE_COUNT_SHORT_POINTER;\n                  else\n                    type = TYPE_COUNT_INT_POINTER;\n                  break;\n#if ENABLE_UNISTDIO\n                /* The unistdio extensions.  */\n                case 'U':\n                  if (flags >= 16)\n                    type = TYPE_U32_STRING;\n                  else if (flags >= 8)\n                    type = TYPE_U16_STRING;\n                  else\n                    type = TYPE_U8_STRING;\n                  break;\n#endif\n                case '%':\n                  type = TYPE_NONE;\n                  break;\n                default:\n                  /* Unknown conversion character.  */\n                  goto error;\n                }\n            }\n\n            if (type != TYPE_NONE)\n              {\n                dp->arg_index = arg_index;\n                if (dp->arg_index == ARG_NONE)\n                  {\n                    dp->arg_index = arg_posn++;\n                    if (dp->arg_index == ARG_NONE)\n                      /* arg_posn wrapped around.  */\n                      goto error;\n                  }\n                REGISTER_ARG (dp->arg_index, type);\n              }\n            dp->conversion = c;\n            dp->dir_end = cp;\n          }\n\n          d->count++;\n          if (d->count >= d_allocated)\n            {\n              size_t memory_size;\n              DIRECTIVE *memory;\n\n              d_allocated = xtimes (d_allocated, 2);\n              memory_size = xtimes (d_allocated, sizeof (DIRECTIVE));\n              if (size_overflow_p (memory_size))\n                /* Overflow, would lead to out of memory.  */\n                goto out_of_memory;\n              memory = (DIRECTIVE *) (d->dir != d->direct_alloc_dir\n                                      ? realloc (d->dir, memory_size)\n                                      : malloc (memory_size));\n              if (memory == NULL)\n                /* Out of memory.  */\n                goto out_of_memory;\n              if (d->dir == d->direct_alloc_dir)\n                memcpy (memory, d->dir, d->count * sizeof (DIRECTIVE));\n              d->dir = memory;\n            }\n        }\n#if CHAR_T_ONLY_ASCII\n      else if (!c_isascii (c))\n        {\n          /* Non-ASCII character.  Not supported.  */\n          goto error;\n        }\n#endif\n    }\n  d->dir[d->count].dir_start = cp;\n\n  d->max_width_length = max_width_length;\n  d->max_precision_length = max_precision_length;\n  return 0;\n\nerror:\n  if (a->arg != a->direct_alloc_arg)\n    free (a->arg);\n  if (d->dir != d->direct_alloc_dir)\n    free (d->dir);\n  errno = EINVAL;\n  return -1;\n\nout_of_memory:\n  if (a->arg != a->direct_alloc_arg)\n    free (a->arg);\n  if (d->dir != d->direct_alloc_dir)\n    free (d->dir);\n  errno = ENOMEM;\n  return -1;\n}",
      "lines": 551,
      "depth": 24,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/printf-parse.h": {},
  "grep/grep-3.1/gnulib-tests/putenv.c": {
    "_unsetenv": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        112,
        1
      ],
      "content": "static int\n_unsetenv (const char *name)\n{\n  size_t len;\n#if !HAVE_DECL__PUTENV\n  char **ep;\n#endif\n\n  if (name == NULL || *name == '\\0' || strchr (name, '=') != NULL)\n    {\n      __set_errno (EINVAL);\n      return -1;\n    }\n\n  len = strlen (name);\n\n#if HAVE_DECL__PUTENV\n  {\n    int putenv_result, putenv_errno;\n    char *name_ = malloc (len + 2);\n    memcpy (name_, name, len);\n    name_[len] = '=';\n    name_[len + 1] = 0;\n    putenv_result = _putenv (name_);\n    putenv_errno = errno;\n    free (name_);\n    __set_errno (putenv_errno);\n    return putenv_result;\n  }\n#else\n\n  LOCK;\n\n  ep = environ;\n  while (*ep != NULL)\n    if (!strncmp (*ep, name, len) && (*ep)[len] == '=')\n      {\n        /* Found it.  Remove this pointer by moving later ones back.  */\n        char **dp = ep;\n\n        do\n          dp[0] = dp[1];\n        while (*dp++);\n        /* Continue the loop in case NAME appears again.  */\n      }\n    else\n      ++ep;\n\n  UNLOCK;\n\n  return 0;\n#endif\n}",
      "lines": 53,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "putenv": {
      "start_point": [
        117,
        0
      ],
      "end_point": [
        193,
        1
      ],
      "content": "int\nputenv (char *string)\n{\n  const char *name_end = strchr (string, '=');\n  char **ep;\n\n  if (name_end == NULL)\n    {\n      /* Remove the variable from the environment.  */\n      return _unsetenv (string);\n    }\n\n#if HAVE_DECL__PUTENV\n  /* Rely on _putenv to allocate the new environment.  If other\n     parts of the application use _putenv, the !HAVE_DECL__PUTENV code\n     would fight over who owns the environ vector, causing a crash.  */\n  if (name_end[1])\n    return _putenv (string);\n  else\n    {\n      /* _putenv (\"NAME=\") unsets NAME, so invoke _putenv (\"NAME= \")\n         to allocate the environ vector and then replace the new\n         entry with \"NAME=\".  */\n      int putenv_result, putenv_errno;\n      char *name_x = malloc (name_end - string + sizeof \"= \");\n      if (!name_x)\n        return -1;\n      memcpy (name_x, string, name_end - string + 1);\n      name_x[name_end - string + 1] = ' ';\n      name_x[name_end - string + 2] = 0;\n      putenv_result = _putenv (name_x);\n      putenv_errno = errno;\n      for (ep = environ; *ep; ep++)\n        if (strcmp (*ep, name_x) == 0)\n          {\n            *ep = string;\n            break;\n          }\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n      if (putenv_result == 0)\n        {\n          /* _putenv propagated \"NAME= \" into the subprocess environment;\n             fix that by calling SetEnvironmentVariable directly.  */\n          name_x[name_end - string] = 0;\n          putenv_result = SetEnvironmentVariable (name_x, \"\") ? 0 : -1;\n          putenv_errno = ENOMEM; /* ENOMEM is the only way to fail.  */\n        }\n# endif\n      free (name_x);\n      __set_errno (putenv_errno);\n      return putenv_result;\n    }\n#else\n  for (ep = environ; *ep; ep++)\n    if (strncmp (*ep, string, name_end - string) == 0\n        && (*ep)[name_end - string] == '=')\n      break;\n\n  if (*ep)\n    *ep = string;\n  else\n    {\n      static char **last_environ = NULL;\n      size_t size = ep - environ;\n      char **new_environ = malloc ((size + 2) * sizeof *new_environ);\n      if (! new_environ)\n        return -1;\n      new_environ[0] = string;\n      memcpy (new_environ + 1, environ, (size + 1) * sizeof *new_environ);\n      free (last_environ);\n      last_environ = new_environ;\n      environ = new_environ;\n    }\n\n  return 0;\n#endif\n}",
      "lines": 77,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/setenv.c": {
    "__add_to_environ": {
      "start_point": [
        111,
        0
      ],
      "end_point": [
        287,
        1
      ],
      "content": "int\n__add_to_environ (const char *name, const char *value, const char *combined,\n                  int replace)\n{\n  char **ep;\n  size_t size;\n  const size_t namelen = strlen (name);\n  const size_t vallen = value != NULL ? strlen (value) + 1 : 0;\n\n  LOCK;\n\n  /* We have to get the pointer now that we have the lock and not earlier\n     since another thread might have created a new environment.  */\n  ep = __environ;\n\n  size = 0;\n  if (ep != NULL)\n    {\n      for (; *ep != NULL; ++ep)\n        if (!strncmp (*ep, name, namelen) && (*ep)[namelen] == '=')\n          break;\n        else\n          ++size;\n    }\n\n  if (ep == NULL || *ep == NULL)\n    {\n      char **new_environ;\n#ifdef USE_TSEARCH\n      char *new_value;\n#endif\n\n      /* We allocated this space; we can extend it.  */\n      new_environ =\n        (char **) (last_environ == NULL\n                   ? malloc ((size + 2) * sizeof (char *))\n                   : realloc (last_environ, (size + 2) * sizeof (char *)));\n      if (new_environ == NULL)\n        {\n          /* It's easier to set errno to ENOMEM than to rely on the\n             'malloc-posix' and 'realloc-posix' gnulib modules.  */\n          __set_errno (ENOMEM);\n          UNLOCK;\n          return -1;\n        }\n\n      /* If the whole entry is given add it.  */\n      if (combined != NULL)\n        /* We must not add the string to the search tree since it belongs\n           to the user.  */\n        new_environ[size] = (char *) combined;\n      else\n        {\n          /* See whether the value is already known.  */\n#ifdef USE_TSEARCH\n# ifdef _LIBC\n          new_value = (char *) alloca (namelen + 1 + vallen);\n          __mempcpy (__mempcpy (__mempcpy (new_value, name, namelen), \"=\", 1),\n                     value, vallen);\n# else\n          new_value = (char *) malloca (namelen + 1 + vallen);\n          if (new_value == NULL)\n            {\n              __set_errno (ENOMEM);\n              UNLOCK;\n              return -1;\n            }\n          memcpy (new_value, name, namelen);\n          new_value[namelen] = '=';\n          memcpy (&new_value[namelen + 1], value, vallen);\n# endif\n\n          new_environ[size] = KNOWN_VALUE (new_value);\n          if (new_environ[size] == NULL)\n#endif\n            {\n              new_environ[size] = (char *) malloc (namelen + 1 + vallen);\n              if (new_environ[size] == NULL)\n                {\n#if defined USE_TSEARCH && !defined _LIBC\n                  freea (new_value);\n#endif\n                  __set_errno (ENOMEM);\n                  UNLOCK;\n                  return -1;\n                }\n\n#ifdef USE_TSEARCH\n              memcpy (new_environ[size], new_value, namelen + 1 + vallen);\n#else\n              memcpy (new_environ[size], name, namelen);\n              new_environ[size][namelen] = '=';\n              memcpy (&new_environ[size][namelen + 1], value, vallen);\n#endif\n              /* And save the value now.  We cannot do this when we remove\n                 the string since then we cannot decide whether it is a\n                 user string or not.  */\n              STORE_VALUE (new_environ[size]);\n            }\n#if defined USE_TSEARCH && !defined _LIBC\n          freea (new_value);\n#endif\n        }\n\n      if (__environ != last_environ)\n        memcpy ((char *) new_environ, (char *) __environ,\n                size * sizeof (char *));\n\n      new_environ[size + 1] = NULL;\n\n      last_environ = __environ = new_environ;\n    }\n  else if (replace)\n    {\n      char *np;\n\n      /* Use the user string if given.  */\n      if (combined != NULL)\n        np = (char *) combined;\n      else\n        {\n#ifdef USE_TSEARCH\n          char *new_value;\n# ifdef _LIBC\n          new_value = alloca (namelen + 1 + vallen);\n          __mempcpy (__mempcpy (__mempcpy (new_value, name, namelen), \"=\", 1),\n                     value, vallen);\n# else\n          new_value = malloca (namelen + 1 + vallen);\n          if (new_value == NULL)\n            {\n              __set_errno (ENOMEM);\n              UNLOCK;\n              return -1;\n            }\n          memcpy (new_value, name, namelen);\n          new_value[namelen] = '=';\n          memcpy (&new_value[namelen + 1], value, vallen);\n# endif\n\n          np = KNOWN_VALUE (new_value);\n          if (np == NULL)\n#endif\n            {\n              np = (char *) malloc (namelen + 1 + vallen);\n              if (np == NULL)\n                {\n#if defined USE_TSEARCH && !defined _LIBC\n                  freea (new_value);\n#endif\n                  __set_errno (ENOMEM);\n                  UNLOCK;\n                  return -1;\n                }\n\n#ifdef USE_TSEARCH\n              memcpy (np, new_value, namelen + 1 + vallen);\n#else\n              memcpy (np, name, namelen);\n              np[namelen] = '=';\n              memcpy (&np[namelen + 1], value, vallen);\n#endif\n              /* And remember the value.  */\n              STORE_VALUE (np);\n            }\n#if defined USE_TSEARCH && !defined _LIBC\n          freea (new_value);\n#endif\n        }\n\n      *ep = np;\n    }\n\n  UNLOCK;\n\n  return 0;\n}",
      "lines": 177,
      "depth": 17,
      "decorators": [
        "int"
      ]
    },
    "setenv": {
      "start_point": [
        289,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "int\nsetenv (const char *name, const char *value, int replace)\n{\n  if (name == NULL || *name == '\\0' || strchr (name, '=') != NULL)\n    {\n      __set_errno (EINVAL);\n      return -1;\n    }\n\n  return __add_to_environ (name, value, NULL, replace);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "clearenv": {
      "start_point": [
        304,
        0
      ],
      "end_point": [
        322,
        1
      ],
      "content": "int\nclearenv (void)\n{\n  LOCK;\n\n  if (__environ == last_environ && __environ != NULL)\n    {\n      /* We allocated this environment so we can free it.  */\n      free (__environ);\n      last_environ = NULL;\n    }\n\n  /* Clear the environment pointer removes the whole environment.  */\n  __environ = NULL;\n\n  UNLOCK;\n\n  return 0;\n}",
      "lines": 19,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "free_mem": {
      "start_point": [
        325,
        0
      ],
      "end_point": [
        334,
        1
      ],
      "content": "static void\nfree_mem (void)\n{\n  /* Remove all traces.  */\n  clearenv ();\n\n  /* Now remove the search tree.  */\n  __tdestroy (known_values, free);\n  known_values = NULL;\n}",
      "lines": 10,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "rpl_setenv": {
      "start_point": [
        357,
        0
      ],
      "end_point": [
        387,
        1
      ],
      "content": "int\nrpl_setenv (const char *name, const char *value, int replace)\n{\n  int result;\n  if (!name || !*name || strchr (name, '='))\n    {\n      errno = EINVAL;\n      return -1;\n    }\n  /* Call the real setenv even if replace is 0, in case implementation\n     has underlying data to update, such as when environ changes.  */\n  result = setenv (name, value, replace);\n  if (result == 0 && replace && *value == '=')\n    {\n      char *tmp = getenv (name);\n      if (!STREQ (tmp, value))\n        {\n          int saved_errno;\n          size_t len = strlen (value);\n          tmp = malloca (len + 2);\n          /* Since leading '=' is eaten, double it up.  */\n          *tmp = '=';\n          memcpy (tmp + 1, value, len + 1);\n          result = setenv (name, tmp, replace);\n          saved_errno = errno;\n          freea (tmp);\n          errno = saved_errno;\n        }\n    }\n  return result;\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/setlocale.c": {
    "category_to_name": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "static const char *\ncategory_to_name (int category)\n{\n  const char *retval;\n\n  switch (category)\n  {\n  case LC_COLLATE:\n    retval = \"LC_COLLATE\";\n    break;\n  case LC_CTYPE:\n    retval = \"LC_CTYPE\";\n    break;\n  case LC_MONETARY:\n    retval = \"LC_MONETARY\";\n    break;\n  case LC_NUMERIC:\n    retval = \"LC_NUMERIC\";\n    break;\n  case LC_TIME:\n    retval = \"LC_TIME\";\n    break;\n  case LC_MESSAGES:\n    retval = \"LC_MESSAGES\";\n    break;\n  default:\n    /* If you have a better idea for a default value let me know.  */\n    retval = \"LC_XXX\";\n  }\n\n  return retval;\n}",
      "lines": 32,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\ncategory_to_name (int category)",
        "*"
      ]
    },
    "search": {
      "start_point": [
        567,
        0
      ],
      "end_point": [
        623,
        1
      ],
      "content": "static void\nsearch (const struct table_entry *table, size_t table_size, const char *string,\n        range_t *result)\n{\n  /* The table is sorted.  Perform a binary search.  */\n  size_t hi = table_size;\n  size_t lo = 0;\n  while (lo < hi)\n    {\n      /* Invariant:\n         for i < lo, strcmp (table[i].code, string) < 0,\n         for i >= hi, strcmp (table[i].code, string) > 0.  */\n      size_t mid = (hi + lo) >> 1; /* >= lo, < hi */\n      int cmp = strcmp (table[mid].code, string);\n      if (cmp < 0)\n        lo = mid + 1;\n      else if (cmp > 0)\n        hi = mid;\n      else\n        {\n          /* Found an i with\n               strcmp (language_table[i].code, string) == 0.\n             Find the entire interval of such i.  */\n          {\n            size_t i;\n\n            for (i = mid; i > lo; )\n              {\n                i--;\n                if (strcmp (table[i].code, string) < 0)\n                  {\n                    lo = i + 1;\n                    break;\n                  }\n              }\n          }\n          {\n            size_t i;\n\n            for (i = mid; i < hi; i++)\n              {\n                if (strcmp (table[i].code, string) > 0)\n                  {\n                    hi = i;\n                    break;\n                  }\n              }\n          }\n          /* The set of i with\n               strcmp (language_table[i].code, string) == 0\n             is the interval [lo, hi-1].  */\n          break;\n        }\n    }\n  result->lo = lo;\n  result->hi = hi;\n}",
      "lines": 57,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "setlocale_unixlike": {
      "start_point": [
        627,
        0
      ],
      "end_point": [
        783,
        1
      ],
      "content": "static char *\nsetlocale_unixlike (int category, const char *locale)\n{\n  char *result;\n  char llCC_buf[64];\n  char ll_buf[64];\n  char CC_buf[64];\n\n  /* The native Windows implementation of setlocale understands the special\n     locale name \"C\", but not \"POSIX\".  Therefore map \"POSIX\" to \"C\".  */\n#if (defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__\n  if (locale != NULL && strcmp (locale, \"POSIX\") == 0)\n    locale = \"C\";\n#endif\n\n  /* First, try setlocale with the original argument unchanged.  */\n  result = setlocale (category, locale);\n  if (result != NULL)\n    return result;\n\n  /* Otherwise, assume the argument is in the form\n       language[_territory][.codeset][@modifier]\n     and try to map it using the tables.  */\n  if (strlen (locale) < sizeof (llCC_buf))\n    {\n      /* Second try: Remove the codeset part.  */\n      {\n        const char *p = locale;\n        char *q = llCC_buf;\n\n        /* Copy the part before the dot.  */\n        for (; *p != '\\0' && *p != '.'; p++, q++)\n          *q = *p;\n        if (*p == '.')\n          /* Skip the part up to the '@', if any.  */\n          for (; *p != '\\0' && *p != '@'; p++)\n            ;\n        /* Copy the part starting with '@', if any.  */\n        for (; *p != '\\0'; p++, q++)\n          *q = *p;\n        *q = '\\0';\n      }\n      /* llCC_buf now contains\n           language[_territory][@modifier]\n       */\n      if (strcmp (llCC_buf, locale) != 0)\n        {\n          result = setlocale (category, llCC_buf);\n          if (result != NULL)\n            return result;\n        }\n      /* Look it up in language_table.  */\n      {\n        range_t range;\n        size_t i;\n\n        search (language_table,\n                sizeof (language_table) / sizeof (language_table[0]),\n                llCC_buf,\n                &range);\n\n        for (i = range.lo; i < range.hi; i++)\n          {\n            /* Try the replacement in language_table[i].  */\n            result = setlocale (category, language_table[i].english);\n            if (result != NULL)\n              return result;\n          }\n      }\n      /* Split language[_territory][@modifier]\n         into  ll_buf = language[@modifier]\n         and   CC_buf = territory\n       */\n      {\n        const char *underscore = strchr (llCC_buf, '_');\n        if (underscore != NULL)\n          {\n            const char *territory_start = underscore + 1;\n            const char *territory_end = strchr (territory_start, '@');\n            if (territory_end == NULL)\n              territory_end = territory_start + strlen (territory_start);\n\n            memcpy (ll_buf, llCC_buf, underscore - llCC_buf);\n            strcpy (ll_buf + (underscore - llCC_buf), territory_end);\n\n            memcpy (CC_buf, territory_start, territory_end - territory_start);\n            CC_buf[territory_end - territory_start] = '\\0';\n\n            {\n              /* Look up ll_buf in language_table\n                 and CC_buf in country_table.  */\n              range_t language_range;\n\n              search (language_table,\n                      sizeof (language_table) / sizeof (language_table[0]),\n                      ll_buf,\n                      &language_range);\n              if (language_range.lo < language_range.hi)\n                {\n                  range_t country_range;\n\n                  search (country_table,\n                          sizeof (country_table) / sizeof (country_table[0]),\n                          CC_buf,\n                          &country_range);\n                  if (country_range.lo < country_range.hi)\n                    {\n                      size_t i;\n                      size_t j;\n\n                      for (i = language_range.lo; i < language_range.hi; i++)\n                        for (j = country_range.lo; j < country_range.hi; j++)\n                          {\n                            /* Concatenate the replacements.  */\n                            const char *part1 = language_table[i].english;\n                            size_t part1_len = strlen (part1);\n                            const char *part2 = country_table[j].english;\n                            size_t part2_len = strlen (part2) + 1;\n                            char buf[64+64];\n\n                            if (!(part1_len + 1 + part2_len <= sizeof (buf)))\n                              abort ();\n                            memcpy (buf, part1, part1_len);\n                            buf[part1_len] = '_';\n                            memcpy (buf + part1_len + 1, part2, part2_len);\n\n                            /* Try the concatenated replacements.  */\n                            result = setlocale (category, buf);\n                            if (result != NULL)\n                              return result;\n                          }\n                    }\n\n                  /* Try omitting the country entirely.  This may set a locale\n                     corresponding to the wrong country, but is better than\n                     failing entirely.  */\n                  {\n                    size_t i;\n\n                    for (i = language_range.lo; i < language_range.hi; i++)\n                      {\n                        /* Try only the language replacement.  */\n                        result =\n                          setlocale (category, language_table[i].english);\n                        if (result != NULL)\n                          return result;\n                      }\n                  }\n                }\n            }\n          }\n      }\n    }\n\n  /* Failed.  */\n  return NULL;\n}",
      "lines": 157,
      "depth": 23,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nsetlocale_unixlike (int category, const char *locale)",
        "*"
      ]
    },
    "setlocale_single": {
      "start_point": [
        795,
        0
      ],
      "end_point": [
        809,
        1
      ],
      "content": "static char *\nsetlocale_single (int category, const char *locale)\n{\n  if (category == LC_MESSAGES)\n    {\n      if (locale != NULL)\n        {\n          lc_messages_name[sizeof (lc_messages_name) - 1] = '\\0';\n          strncpy (lc_messages_name, locale, sizeof (lc_messages_name) - 1);\n        }\n      return lc_messages_name;\n    }\n  else\n    return setlocale_unixlike (category, locale);\n}",
      "lines": 15,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nsetlocale_single (int category, const char *locale)",
        "*"
      ]
    },
    "rpl_setlocale": {
      "start_point": [
        815,
        0
      ],
      "end_point": [
        943,
        1
      ],
      "content": "char *\nrpl_setlocale (int category, const char *locale)\n{\n  if (locale != NULL && locale[0] == '\\0')\n    {\n      /* A request to the set the current locale to the default locale.  */\n      if (category == LC_ALL)\n        {\n          /* Set LC_CTYPE first.  Then the other categories.  */\n          static int const categories[] =\n            {\n              LC_NUMERIC,\n              LC_TIME,\n              LC_COLLATE,\n              LC_MONETARY,\n              LC_MESSAGES\n            };\n          char *saved_locale;\n          const char *base_name;\n          unsigned int i;\n\n          /* Back up the old locale, in case one of the steps fails.  */\n          saved_locale = setlocale (LC_ALL, NULL);\n          if (saved_locale == NULL)\n            return NULL;\n          saved_locale = strdup (saved_locale);\n          if (saved_locale == NULL)\n            return NULL;\n\n          /* Set LC_CTYPE category.  Set all other categories (except possibly\n             LC_MESSAGES) to the same value in the same call; this is likely to\n             save calls.  */\n          base_name =\n            gl_locale_name_environ (LC_CTYPE, category_to_name (LC_CTYPE));\n          if (base_name == NULL)\n            base_name = gl_locale_name_default ();\n\n          if (setlocale_unixlike (LC_ALL, base_name) == NULL)\n            goto fail;\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n          /* On native Windows, setlocale(LC_ALL,...) may succeed but set the\n             LC_CTYPE category to an invalid value (\"C\") when it does not\n             support the specified encoding.  Report a failure instead.  */\n          if (strchr (base_name, '.') != NULL\n              && strcmp (setlocale (LC_CTYPE, NULL), \"C\") == 0)\n            goto fail;\n# endif\n\n          for (i = 0; i < sizeof (categories) / sizeof (categories[0]); i++)\n            {\n              int cat = categories[i];\n              const char *name;\n\n              name = gl_locale_name_environ (cat, category_to_name (cat));\n              if (name == NULL)\n                name = gl_locale_name_default ();\n\n              /* If name is the same as base_name, it has already been set\n                 through the setlocale call before the loop.  */\n              if (strcmp (name, base_name) != 0\n# if LC_MESSAGES == 1729\n                  || cat == LC_MESSAGES\n# endif\n                 )\n                if (setlocale_single (cat, name) == NULL)\n                  goto fail;\n            }\n\n          /* All steps were successful.  */\n          free (saved_locale);\n          return setlocale (LC_ALL, NULL);\n\n        fail:\n          if (saved_locale[0] != '\\0') /* don't risk an endless recursion */\n            setlocale (LC_ALL, saved_locale);\n          free (saved_locale);\n          return NULL;\n        }\n      else\n        {\n          const char *name =\n            gl_locale_name_environ (category, category_to_name (category));\n          if (name == NULL)\n            name = gl_locale_name_default ();\n\n          return setlocale_single (category, name);\n        }\n    }\n  else\n    {\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n      if (category == LC_ALL && locale != NULL && strchr (locale, '.') != NULL)\n        {\n          char *saved_locale;\n\n          /* Back up the old locale.  */\n          saved_locale = setlocale (LC_ALL, NULL);\n          if (saved_locale == NULL)\n            return NULL;\n          saved_locale = strdup (saved_locale);\n          if (saved_locale == NULL)\n            return NULL;\n\n          if (setlocale_unixlike (LC_ALL, locale) == NULL)\n            {\n              free (saved_locale);\n              return NULL;\n            }\n\n          /* On native Windows, setlocale(LC_ALL,...) may succeed but set the\n             LC_CTYPE category to an invalid value (\"C\") when it does not\n             support the specified encoding.  Report a failure instead.  */\n          if (strcmp (setlocale (LC_CTYPE, NULL), \"C\") == 0)\n            {\n              if (saved_locale[0] != '\\0') /* don't risk an endless recursion */\n                setlocale (LC_ALL, saved_locale);\n              free (saved_locale);\n              return NULL;\n            }\n\n          /* It was really successful.  */\n          free (saved_locale);\n          return setlocale (LC_ALL, NULL);\n        }\n      else\n# endif\n        return setlocale_single (category, locale);\n    }\n}",
      "lines": 129,
      "depth": 16,
      "decorators": [
        "char",
        "*\nrpl_setlocale (int category, const char *locale)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/signature.h": {},
  "grep/grep-3.1/gnulib-tests/size_max.h": {},
  "grep/grep-3.1/gnulib-tests/snprintf.c": {
    "snprintf": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "int\nsnprintf (char *str, size_t size, const char *format, ...)\n{\n  char *output;\n  size_t len;\n  size_t lenbuf = size;\n  va_list args;\n\n  va_start (args, format);\n  output = vasnprintf (str, &lenbuf, format, args);\n  len = lenbuf;\n  va_end (args);\n\n  if (!output)\n    return -1;\n\n  if (output != str)\n    {\n      if (size)\n        {\n          size_t pruned_len = (len < size ? len : size - 1);\n          memcpy (str, output, pruned_len);\n          str[pruned_len] = '\\0';\n        }\n\n      free (output);\n    }\n\n  if (INT_MAX < len)\n    {\n      errno = EOVERFLOW;\n      return -1;\n    }\n\n  return len;\n}",
      "lines": 36,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/symlink.c": {
    "rpl_symlink": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "int\nrpl_symlink (char const *contents, char const *name)\n{\n  size_t len = strlen (name);\n  if (len && name[len - 1] == '/')\n    {\n      struct stat st;\n      if (lstat (name, &st) == 0)\n        errno = EEXIST;\n      return -1;\n    }\n  return symlink (contents, name);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "symlink": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "int\nsymlink (char const *contents _GL_UNUSED,\n         char const *name _GL_UNUSED)\n{\n  errno = ENOSYS;\n  return -1;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-alignof.c": {
    "main": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "content": "int\nmain ()\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 4,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-alloca-opt.c": {
    "do_allocation": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        29,
        1
      ],
      "content": "static void\ndo_allocation (int n)\n{\n  void *ptr = alloca (n);\n  (void) ptr;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "int\nmain ()\n{\n#if HAVE_ALLOCA\n  int i;\n\n  /* Repeat a lot of times, to make sure there's no memory leak.  */\n  for (i = 0; i < 100000; i++)\n    {\n      /* Try various values.\n         n = 0 gave a crash on Alpha with gcc-2.5.8.\n         Some versions of Mac OS X have a stack size limit of 512 KB.  */\n      func (34);\n      func (134);\n      func (399);\n      func (510823);\n      func (129321);\n      func (0);\n      func (4070);\n      func (4095);\n      func (1);\n      func (16582);\n    }\n#endif\n\n  return 0;\n}",
      "lines": 27,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-argmatch.c": {
    "main": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  /* Not found.  */\n  ASSERT (ARGMATCH (\"klingon\", backup_args, backup_vals) == -1);\n\n  /* Exact match.  */\n  ASSERT (ARGMATCH (\"none\", backup_args, backup_vals) == 1);\n  ASSERT (ARGMATCH (\"nil\", backup_args, backup_vals) == 7);\n\n  /* Too long.  */\n  ASSERT (ARGMATCH (\"nilpotent\", backup_args, backup_vals) == -1);\n\n  /* Abbreviated.  */\n  ASSERT (ARGMATCH (\"simpl\", backup_args, backup_vals) == 3);\n  ASSERT (ARGMATCH (\"simp\", backup_args, backup_vals) == 3);\n  ASSERT (ARGMATCH (\"sim\", backup_args, backup_vals) == 3);\n\n  /* Exact match and abbreviated.  */\n  ASSERT (ARGMATCH (\"numbered\", backup_args, backup_vals) == 9);\n  ASSERT (ARGMATCH (\"numbere\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"number\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"numbe\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"numb\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"num\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"nu\", backup_args, backup_vals) == -2);\n  ASSERT (ARGMATCH (\"n\", backup_args, backup_vals) == -2);\n\n  /* Ambiguous abbreviated.  */\n  ASSERT (ARGMATCH (\"ne\", backup_args, backup_vals) == -2);\n\n  /* Ambiguous abbreviated, but same value.  */\n  ASSERT (ARGMATCH (\"si\", backup_args, backup_vals) == 3);\n  ASSERT (ARGMATCH (\"s\", backup_args, backup_vals) == 3);\n\n  return 0;\n}",
      "lines": 37,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-binary-io.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  /* Test the O_BINARY macro.  */\n  {\n    int fd =\n      open (\"t-bin-out0.tmp\", O_CREAT | O_TRUNC | O_RDWR | O_BINARY, 0600);\n    if (write (fd, \"Hello\\n\", 6) < 0)\n      exit (1);\n    close (fd);\n  }\n  {\n    struct stat statbuf;\n    if (stat (\"t-bin-out0.tmp\", &statbuf) < 0)\n      exit (1);\n    ASSERT (statbuf.st_size == 6);\n  }\n\n  switch (argv[1][0])\n    {\n    case '1':\n      /* Test the set_binary_mode() function.  */\n      set_binary_mode (1, O_BINARY);\n      fputs (\"Hello\\n\", stdout);\n      break;\n\n    default:\n      break;\n    }\n\n  return 0;\n}",
      "lines": 32,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-bitrotate.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "content": "int\nmain (void)\n{\n  ASSERT (rotl8 (42, 0) == 42);\n  ASSERT (rotl8 (42, 1) == 84);\n  ASSERT (rotl8 (42, 2) == 168);\n  ASSERT (rotl8 (42, 3) == 81);\n  ASSERT (rotl8 (42, 4) == 162);\n  ASSERT (rotl8 (42, 5) == 69);\n  ASSERT (rotl8 (42, 6) == 138);\n  ASSERT (rotl8 (42, 7) == 21);\n  ASSERT (rotl8 (42, 8) == 42);\n\n  ASSERT (rotr8 (42, 0) == 42);\n  ASSERT (rotr8 (42, 1) == 21);\n  ASSERT (rotr8 (42, 2) == 138);\n  ASSERT (rotr8 (42, 3) == 69);\n  ASSERT (rotr8 (42, 4) == 162);\n  ASSERT (rotr8 (42, 5) == 81);\n  ASSERT (rotr8 (42, 6) == 168);\n  ASSERT (rotr8 (42, 7) == 84);\n  ASSERT (rotr8 (42, 8) == 42);\n\n  ASSERT (rotl16 (43981, 0) == 43981);\n  ASSERT (rotl16 (43981, 1) == 22427);\n  ASSERT (rotl16 (43981, 2) == 44854);\n  ASSERT (rotl16 (43981, 3) == 24173);\n  ASSERT (rotl16 (43981, 4) == 48346);\n  ASSERT (rotl16 (43981, 5) == 31157);\n  ASSERT (rotl16 (43981, 6) == 62314);\n  ASSERT (rotl16 (43981, 7) == 59093);\n  ASSERT (rotl16 (43981, 8) == 52651);\n  ASSERT (rotl16 (43981, 9) == 39767);\n  ASSERT (rotl16 (43981, 10) == 13999);\n  ASSERT (rotl16 (43981, 11) == 27998);\n  ASSERT (rotl16 (43981, 12) == 55996);\n  ASSERT (rotl16 (43981, 13) == 46457);\n  ASSERT (rotl16 (43981, 14) == 27379);\n  ASSERT (rotl16 (43981, 15) == 54758);\n  ASSERT (rotl16 (43981, 16) == 43981);\n\n  ASSERT (rotr16 (43981, 0) == 43981);\n  ASSERT (rotr16 (43981, 1) == 54758);\n  ASSERT (rotr16 (43981, 2) == 27379);\n  ASSERT (rotr16 (43981, 3) == 46457);\n  ASSERT (rotr16 (43981, 4) == 55996);\n  ASSERT (rotr16 (43981, 5) == 27998);\n  ASSERT (rotr16 (43981, 6) == 13999);\n  ASSERT (rotr16 (43981, 7) == 39767);\n  ASSERT (rotr16 (43981, 8) == 52651);\n  ASSERT (rotr16 (43981, 9) == 59093);\n  ASSERT (rotr16 (43981, 10) == 62314);\n  ASSERT (rotr16 (43981, 11) == 31157);\n  ASSERT (rotr16 (43981, 12) == 48346);\n  ASSERT (rotr16 (43981, 13) == 24173);\n  ASSERT (rotr16 (43981, 14) == 44854);\n  ASSERT (rotr16 (43981, 15) == 22427);\n  ASSERT (rotr16 (43981, 16) == 43981);\n\n  ASSERT (rotl32 (2309737967U, 1) == 324508639U);\n  ASSERT (rotl32 (2309737967U, 2) == 649017278U);\n  ASSERT (rotl32 (2309737967U, 3) == 1298034556U);\n  ASSERT (rotl32 (2309737967U, 4) == 2596069112U);\n  ASSERT (rotl32 (2309737967U, 5) == 897170929U);\n  ASSERT (rotl32 (2309737967U, 6) == 1794341858U);\n  ASSERT (rotl32 (2309737967U, 7) == 3588683716U);\n  ASSERT (rotl32 (2309737967U, 8) == 2882400137U);\n  ASSERT (rotl32 (2309737967U, 9) == 1469832979U);\n  ASSERT (rotl32 (2309737967U, 10) == 2939665958U);\n  ASSERT (rotl32 (2309737967U, 11) == 1584364621U);\n  ASSERT (rotl32 (2309737967U, 12) == 3168729242U);\n  ASSERT (rotl32 (2309737967U, 13) == 2042491189U);\n  ASSERT (rotl32 (2309737967U, 14) == 4084982378U);\n  ASSERT (rotl32 (2309737967U, 15) == 3874997461U);\n  ASSERT (rotl32 (2309737967U, 16) == 3455027627U);\n  ASSERT (rotl32 (2309737967U, 17) == 2615087959U);\n  ASSERT (rotl32 (2309737967U, 18) == 935208623U);\n  ASSERT (rotl32 (2309737967U, 19) == 1870417246U);\n  ASSERT (rotl32 (2309737967U, 20) == 3740834492U);\n  ASSERT (rotl32 (2309737967U, 21) == 3186701689U);\n  ASSERT (rotl32 (2309737967U, 22) == 2078436083U);\n  ASSERT (rotl32 (2309737967U, 23) == 4156872166U);\n  ASSERT (rotl32 (2309737967U, 24) == 4018777037U);\n  ASSERT (rotl32 (2309737967U, 25) == 3742586779U);\n  ASSERT (rotl32 (2309737967U, 26) == 3190206263U);\n  ASSERT (rotl32 (2309737967U, 27) == 2085445231U);\n  ASSERT (rotl32 (2309737967U, 28) == 4170890462U);\n  ASSERT (rotl32 (2309737967U, 29) == 4046813629U);\n  ASSERT (rotl32 (2309737967U, 30) == 3798659963U);\n  ASSERT (rotl32 (2309737967U, 31) == 3302352631U);\n\n  ASSERT (rotr32 (2309737967U, 1) == 3302352631lU);\n  ASSERT (rotr32 (2309737967U, 2) == 3798659963lU);\n  ASSERT (rotr32 (2309737967U, 3) == 4046813629lU);\n  ASSERT (rotr32 (2309737967U, 4) == 4170890462lU);\n  ASSERT (rotr32 (2309737967U, 5) == 2085445231lU);\n  ASSERT (rotr32 (2309737967U, 6) == 3190206263lU);\n  ASSERT (rotr32 (2309737967U, 7) == 3742586779lU);\n  ASSERT (rotr32 (2309737967U, 8) == 4018777037lU);\n  ASSERT (rotr32 (2309737967U, 9) == 4156872166lU);\n  ASSERT (rotr32 (2309737967U, 10) == 2078436083lU);\n  ASSERT (rotr32 (2309737967U, 11) == 3186701689lU);\n  ASSERT (rotr32 (2309737967U, 12) == 3740834492lU);\n  ASSERT (rotr32 (2309737967U, 13) == 1870417246lU);\n  ASSERT (rotr32 (2309737967U, 14) == 935208623lU);\n  ASSERT (rotr32 (2309737967U, 15) == 2615087959lU);\n  ASSERT (rotr32 (2309737967U, 16) == 3455027627lU);\n  ASSERT (rotr32 (2309737967U, 17) == 3874997461lU);\n  ASSERT (rotr32 (2309737967U, 18) == 4084982378lU);\n  ASSERT (rotr32 (2309737967U, 19) == 2042491189lU);\n  ASSERT (rotr32 (2309737967U, 20) == 3168729242lU);\n  ASSERT (rotr32 (2309737967U, 21) == 1584364621lU);\n  ASSERT (rotr32 (2309737967U, 22) == 2939665958lU);\n  ASSERT (rotr32 (2309737967U, 23) == 1469832979lU);\n  ASSERT (rotr32 (2309737967U, 24) == 2882400137lU);\n  ASSERT (rotr32 (2309737967U, 25) == 3588683716lU);\n  ASSERT (rotr32 (2309737967U, 26) == 1794341858lU);\n  ASSERT (rotr32 (2309737967U, 27) == 897170929lU);\n  ASSERT (rotr32 (2309737967U, 28) == 2596069112lU);\n  ASSERT (rotr32 (2309737967U, 29) == 1298034556lU);\n  ASSERT (rotr32 (2309737967U, 30) == 649017278lU);\n  ASSERT (rotr32 (2309737967U, 31) == 324508639lU);\n\n#ifdef UINT64_MAX\n  ASSERT (rotl64 (16045690984503098046ULL, 1) == 13644637895296644477ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 2) == 8842531716883737339ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 3) == 17685063433767474678ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 4) == 16923382793825397741ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 5) == 15400021513941243867ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 6) == 12353298954172936119ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 7) == 6259853834636320623ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 8) == 12519707669272641246ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 9) == 6592671264835730877ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 10) == 13185342529671461754ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 11) == 7923940985633371893ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 12) == 15847881971266743786ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 13) == 13249019868823935957ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 14) == 8051295663938320299ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 15) == 16102591327876640598ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 16) == 13758438582043729581ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 17) == 9070133090377907547ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 18) == 18140266180755815094ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 19) == 17833788287802078573ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 20) == 17220832501894605531ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 21) == 15994920930079659447ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 22) == 13543097786449767279ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 23) == 8639451499189982943ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 24) == 17278902998379965886ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 25) == 16111061923050380157ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 26) == 13775379772391208699ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 27) == 9104015471072865783ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 28) == 18208030942145731566ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 29) == 17969317810581911517ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 30) == 17491891547454271419ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 31) == 16537039021198991223ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 32) == 14627333968688430831ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 33) == 10807923863667310047ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 34) == 3169103653625068479ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 35) == 6338207307250136958ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 36) == 12676414614500273916ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 37) == 6906085155290996217ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 38) == 13812170310581992434ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 39) == 9177596547454433253ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 40) == 18355193094908866506ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 41) == 18263642116108181397ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 42) == 18080540158506811179ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 43) == 17714336243304070743ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 44) == 16981928412898589871ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 45) == 15517112752087628127ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 46) == 12587481430465704639ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 47) == 6728218787221857663ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 48) == 13456437574443715326ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 49) == 8466131075177879037ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 50) == 16932262150355758074ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 51) == 15417780227001964533ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 52) == 12388816380294377451ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 53) == 6330888686879203287ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 54) == 12661777373758406574ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 55) == 6876810673807261533ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 56) == 13753621347614523066ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 57) == 9060498621519494517ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 58) == 18120997243038989034ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 59) == 17795250412368426453ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 60) == 17143756751027301291ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 61) == 15840769428345050967ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 62) == 13234794782980550319ULL);\n  ASSERT (rotl64 (16045690984503098046ULL, 63) == 8022845492251549023ULL);\n\n  ASSERT (rotr64 (16045690984503098046ULL, 1) == 8022845492251549023ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 2) == 13234794782980550319ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 3) == 15840769428345050967ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 4) == 17143756751027301291ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 5) == 17795250412368426453ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 6) == 18120997243038989034ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 7) == 9060498621519494517ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 8) == 13753621347614523066ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 9) == 6876810673807261533ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 10) == 12661777373758406574ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 11) == 6330888686879203287ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 12) == 12388816380294377451ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 13) == 15417780227001964533ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 14) == 16932262150355758074ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 15) == 8466131075177879037ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 16) == 13456437574443715326ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 17) == 6728218787221857663ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 18) == 12587481430465704639ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 19) == 15517112752087628127ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 20) == 16981928412898589871ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 21) == 17714336243304070743ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 22) == 18080540158506811179ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 23) == 18263642116108181397ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 24) == 18355193094908866506ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 25) == 9177596547454433253ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 26) == 13812170310581992434ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 27) == 6906085155290996217ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 28) == 12676414614500273916ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 29) == 6338207307250136958ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 30) == 3169103653625068479ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 31) == 10807923863667310047ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 32) == 14627333968688430831ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 33) == 16537039021198991223ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 34) == 17491891547454271419ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 35) == 17969317810581911517ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 36) == 18208030942145731566ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 37) == 9104015471072865783ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 38) == 13775379772391208699ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 39) == 16111061923050380157ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 40) == 17278902998379965886ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 41) == 8639451499189982943ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 42) == 13543097786449767279ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 43) == 15994920930079659447ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 44) == 17220832501894605531ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 45) == 17833788287802078573ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 46) == 18140266180755815094ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 47) == 9070133090377907547ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 48) == 13758438582043729581ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 49) == 16102591327876640598ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 50) == 8051295663938320299ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 51) == 13249019868823935957ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 52) == 15847881971266743786ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 53) == 7923940985633371893ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 54) == 13185342529671461754ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 55) == 6592671264835730877ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 56) == 12519707669272641246ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 57) == 6259853834636320623ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 58) == 12353298954172936119ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 59) == 15400021513941243867ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 60) == 16923382793825397741ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 61) == 17685063433767474678ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 62) == 8842531716883737339ULL);\n  ASSERT (rotr64 (16045690984503098046ULL, 63) == 13644637895296644477ULL);\n#endif /* UINT64_MAX */\n\n  return 0;\n}",
      "lines": 255,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-btowc.c": {
    "main": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  int c;\n\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  ASSERT (btowc (EOF) == WEOF);\n\n  if (argc > 1)\n    switch (argv[1][0])\n      {\n      case '1':\n        /* Locale encoding is ISO-8859-1 or ISO-8859-15.  */\n        for (c = 0; c < 0x80; c++)\n          ASSERT (btowc (c) == c);\n        for (c = 0xA0; c < 0x100; c++)\n          ASSERT (btowc (c) != WEOF);\n        return 0;\n\n      case '2':\n        /* Locale encoding is UTF-8.  */\n        for (c = 0; c < 0x80; c++)\n          ASSERT (btowc (c) == c);\n        for (c = 0x80; c < 0x100; c++)\n          ASSERT (btowc (c) == WEOF);\n        return 0;\n      }\n\n  return 1;\n}",
      "lines": 33,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-c-ctype.c": {
    "test_agree_with_C_locale": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "static void\ntest_agree_with_C_locale (void)\n{\n  int c;\n\n  for (c = 0; c <= UCHAR_MAX; c++)\n    {\n      ASSERT (c_isascii (c) == (isascii (c) != 0));\n      if (c_isascii (c))\n        {\n          ASSERT (c_isalnum (c) == (isalnum (c) != 0));\n          ASSERT (c_isalpha (c) == (isalpha (c) != 0));\n          ASSERT (c_isblank (c) == (isblank (c) != 0));\n          ASSERT (c_iscntrl (c) == (iscntrl (c) != 0));\n          ASSERT (c_isdigit (c) == (isdigit (c) != 0));\n          ASSERT (c_islower (c) == (islower (c) != 0));\n          ASSERT (c_isgraph (c) == (isgraph (c) != 0));\n          ASSERT (c_isprint (c) == (isprint (c) != 0));\n          ASSERT (c_ispunct (c) == (ispunct (c) != 0));\n          ASSERT (c_isspace (c) == (isspace (c) != 0));\n          ASSERT (c_isupper (c) == (isupper (c) != 0));\n          ASSERT (c_isxdigit (c) == (isxdigit (c) != 0));\n          ASSERT (c_tolower (c) == tolower (c));\n          ASSERT (c_toupper (c) == toupper (c));\n        }\n    }\n}",
      "lines": 27,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_all": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "content": "static void\ntest_all (void)\n{\n  int c;\n  int n_isascii = 0;\n\n  for (c = CHAR_MIN; c <= UCHAR_MAX; c++)\n    {\n      if (! (0 <= c && c <= CHAR_MAX))\n        {\n          ASSERT (! c_isascii (c));\n          ASSERT (! c_isalnum (c));\n          ASSERT (! c_isalpha (c));\n          ASSERT (! c_isblank (c));\n          ASSERT (! c_iscntrl (c));\n          ASSERT (! c_isdigit (c));\n          ASSERT (! c_islower (c));\n          ASSERT (! c_isgraph (c));\n          ASSERT (! c_isprint (c));\n          ASSERT (! c_ispunct (c));\n          ASSERT (! c_isspace (c));\n          ASSERT (! c_isupper (c));\n          ASSERT (! c_isxdigit (c));\n          ASSERT (c_tolower (c) == c);\n          ASSERT (c_toupper (c) == c);\n        }\n\n      n_isascii += c_isascii (c);\n\n#ifdef C_CTYPE_ASCII\n      ASSERT (c_isascii (c) == (0 <= c && c <= 0x7f));\n#endif\n\n      ASSERT (c_isascii (c) == (c_isprint (c) || c_iscntrl (c)));\n\n      ASSERT (c_isalnum (c) == (c_isalpha (c) || c_isdigit (c)));\n\n      ASSERT (c_isalpha (c) == (c_islower (c) || c_isupper (c)));\n\n      switch (c)\n        {\n        case '\\t': case ' ':\n          ASSERT (c_isblank (c) == 1);\n          break;\n        default:\n          ASSERT (c_isblank (c) == 0);\n          break;\n        }\n\n#ifdef C_CTYPE_ASCII\n      ASSERT (c_iscntrl (c) == ((c >= 0 && c < 0x20) || c == 0x7f));\n#endif\n\n      switch (c)\n        {\n        case '\\a': case '\\b': case '\\f': case '\\n':\n        case '\\r': case '\\t': case '\\v':\n          ASSERT (c_iscntrl (c));\n          break;\n        }\n\n      ASSERT (! (c_iscntrl (c) && c_isprint (c)));\n\n      switch (c)\n        {\n        case '0': case '1': case '2': case '3': case '4': case '5':\n        case '6': case '7': case '8': case '9':\n          ASSERT (c_isdigit (c) == 1);\n          break;\n        default:\n          ASSERT (c_isdigit (c) == 0);\n          break;\n        }\n\n      switch (c)\n        {\n        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n        case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':\n        case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':\n        case 's': case 't': case 'u': case 'v': case 'w': case 'x':\n        case 'y': case 'z':\n          ASSERT (c_islower (c) == 1);\n          ASSERT (c_toupper (c) == c - 'a' + 'A');\n          break;\n        default:\n          ASSERT (c_islower (c) == 0);\n          ASSERT (c_toupper (c) == c);\n          break;\n        }\n\n#ifdef C_CTYPE_ASCII\n      ASSERT (c_isgraph (c) == ((c >= 0x20 && c < 0x7f) && c != ' '));\n\n      ASSERT (c_isprint (c) == (c >= 0x20 && c < 0x7f));\n#endif\n\n      ASSERT (c_isgraph (c) == (c_isalnum (c) || c_ispunct (c)));\n\n      ASSERT (c_isprint (c) == (c_isgraph (c) || c == ' '));\n\n      switch (c)\n        {\n        case '!': case '\"': case '#': case '$': case '%': case '&': case '\\'':\n        case '(': case ')': case '*': case '+': case ',': case '-': case '.':\n        case '/': case ':': case ';': case '<': case '=': case '>': case '?':\n        case '@': case '[': case'\\\\': case ']': case '^': case '_': case '`':\n        case '{': case '|': case '}': case '~':\n          ASSERT (c_ispunct (c) == 1);\n          break;\n        default:\n          ASSERT (c_ispunct (c) == 0);\n          break;\n        }\n\n      switch (c)\n        {\n        case ' ': case '\\t': case '\\n': case '\\v': case '\\f': case '\\r':\n          ASSERT (c_isspace (c) == 1);\n          break;\n        default:\n          ASSERT (c_isspace (c) == 0);\n          break;\n        }\n\n      switch (c)\n        {\n        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':\n        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n        case 'Y': case 'Z':\n          ASSERT (c_isupper (c) == 1);\n          ASSERT (c_tolower (c) == c - 'A' + 'a');\n          break;\n        default:\n          ASSERT (c_isupper (c) == 0);\n          ASSERT (c_tolower (c) == c);\n          break;\n        }\n\n      switch (c)\n        {\n        case '0': case '1': case '2': case '3': case '4': case '5':\n        case '6': case '7': case '8': case '9':\n        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n          ASSERT (c_isxdigit (c) == 1);\n          break;\n        default:\n          ASSERT (c_isxdigit (c) == 0);\n          break;\n        }\n    }\n\n  ASSERT (n_isascii == 128);\n}",
      "lines": 156,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        213,
        0
      ],
      "end_point": [
        227,
        1
      ],
      "content": "int\nmain ()\n{\n  test_agree_with_C_locale ();\n\n  test_all ();\n\n  setlocale (LC_ALL, \"de_DE\");\n  test_all ();\n\n  setlocale (LC_ALL, \"ja_JP.EUC-JP\");\n  test_all ();\n\n  return 0;\n}",
      "lines": 15,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-c-strcasecmp.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  if (argc > 1)\n    {\n      /* configure should already have checked that the locale is supported.  */\n      if (setlocale (LC_ALL, \"\") == NULL)\n        return 1;\n    }\n\n  ASSERT (c_strcasecmp (\"paragraph\", \"Paragraph\") == 0);\n\n  ASSERT (c_strcasecmp (\"paragrapH\", \"parAgRaph\") == 0);\n\n  ASSERT (c_strcasecmp (\"paragraph\", \"paraLyzed\") < 0);\n  ASSERT (c_strcasecmp (\"paraLyzed\", \"paragraph\") > 0);\n\n  ASSERT (c_strcasecmp (\"para\", \"paragraph\") < 0);\n  ASSERT (c_strcasecmp (\"paragraph\", \"para\") > 0);\n\n  /* The following tests shows how c_strcasecmp() is different from\n     strcasecmp().  */\n\n  ASSERT (c_strcasecmp (\"\\311mile\", \"\\351mile\") < 0);\n  ASSERT (c_strcasecmp (\"\\351mile\", \"\\311mile\") > 0);\n\n  /* The following tests shows how c_strcasecmp() is different from\n     mbscasecmp().  */\n\n  ASSERT (c_strcasecmp (\"\\303\\266zg\\303\\274r\", \"\\303\\226ZG\\303\\234R\") > 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n  ASSERT (c_strcasecmp (\"\\303\\226ZG\\303\\234R\", \"\\303\\266zg\\303\\274r\") < 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n\n#if C_CTYPE_ASCII\n  /* This test shows how strings of different size cannot compare equal.  */\n  ASSERT (c_strcasecmp (\"turkish\", \"TURK\\304\\260SH\") < 0);\n  ASSERT (c_strcasecmp (\"TURK\\304\\260SH\", \"turkish\") > 0);\n#endif\n\n  return 0;\n}",
      "lines": 40,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-c-strncasecmp.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  if (argc > 1)\n    {\n      /* configure should already have checked that the locale is supported.  */\n      if (setlocale (LC_ALL, \"\") == NULL)\n        return 1;\n    }\n\n  ASSERT (c_strncasecmp (\"paragraph\", \"Paragraph\", 1000000) == 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"Paragraph\", 9) == 0);\n\n  ASSERT (c_strncasecmp (\"paragrapH\", \"parAgRaph\", 1000000) == 0);\n  ASSERT (c_strncasecmp (\"paragrapH\", \"parAgRaph\", 9) == 0);\n\n  ASSERT (c_strncasecmp (\"paragraph\", \"paraLyzed\", 10) < 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"paraLyzed\", 9) < 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"paraLyzed\", 5) < 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"paraLyzed\", 4) == 0);\n  ASSERT (c_strncasecmp (\"paraLyzed\", \"paragraph\", 10) > 0);\n  ASSERT (c_strncasecmp (\"paraLyzed\", \"paragraph\", 9) > 0);\n  ASSERT (c_strncasecmp (\"paraLyzed\", \"paragraph\", 5) > 0);\n  ASSERT (c_strncasecmp (\"paraLyzed\", \"paragraph\", 4) == 0);\n\n  ASSERT (c_strncasecmp (\"para\", \"paragraph\", 10) < 0);\n  ASSERT (c_strncasecmp (\"para\", \"paragraph\", 9) < 0);\n  ASSERT (c_strncasecmp (\"para\", \"paragraph\", 5) < 0);\n  ASSERT (c_strncasecmp (\"para\", \"paragraph\", 4) == 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"para\", 10) > 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"para\", 9) > 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"para\", 5) > 0);\n  ASSERT (c_strncasecmp (\"paragraph\", \"para\", 4) == 0);\n\n  /* The following tests shows how c_strncasecmp() is different from\n     strncasecmp().  */\n\n  ASSERT (c_strncasecmp (\"\\311mily\", \"\\351mile\", 4) < 0);\n  ASSERT (c_strncasecmp (\"\\351mile\", \"\\311mily\", 4) > 0);\n\n  /* The following tests shows how c_strncasecmp() is different from\n     mbsncasecmp().  */\n\n  ASSERT (c_strncasecmp (\"\\303\\266zg\\303\\274r\", \"\\303\\226ZG\\303\\234R\", 99) > 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n  ASSERT (c_strncasecmp (\"\\303\\226ZG\\303\\234R\", \"\\303\\266zg\\303\\274r\", 99) < 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n\n#if C_CTYPE_ASCII\n  /* This test shows how strings of different size cannot compare equal.  */\n  ASSERT (c_strncasecmp (\"turkish\", \"TURK\\304\\260SH\", 7) < 0);\n  ASSERT (c_strncasecmp (\"TURK\\304\\260SH\", \"turkish\", 7) > 0);\n#endif\n\n  return 0;\n}",
      "lines": 54,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-chdir.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        32,
        1
      ],
      "content": "int\nmain (void)\n{\n  ASSERT (chdir (\"/\") == 0);\n\n  return 0;\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-cloexec.c": {
    "is_inheritable": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "static int\nis_inheritable (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  DWORD flags;\n  if (h == INVALID_HANDLE_VALUE || GetHandleInformation (h, &flags) == 0)\n    return 0;\n  return (flags & HANDLE_FLAG_INHERIT) != 0;\n#else\n# ifndef F_GETFD\n#  error Please port fcntl to your platform\n# endif\n  int i = fcntl (fd, F_GETFD);\n  return 0 <= i && (i & FD_CLOEXEC) == 0;\n#endif\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "zero": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        65,
        36
      ],
      "content": "static int zero (void) { return 0; }",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_mode": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "content": "static int\nis_mode (int fd, int mode)\n{\n  int value = setmode (fd, O_BINARY);\n  setmode (fd, value);\n  return mode == value;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        78,
        0
      ],
      "end_point": [
        147,
        1
      ],
      "content": "int\nmain (void)\n{\n  const char *file = \"test-cloexec.tmp\";\n  int fd = creat (file, 0600);\n  int fd2;\n  int bad_fd = getdtablesize ();\n\n  /* Assume std descriptors were provided by invoker.  */\n  ASSERT (STDERR_FILENO < fd);\n  ASSERT (is_inheritable (fd));\n\n  /* Normal use of set_cloexec_flag.  */\n  ASSERT (set_cloexec_flag (fd, true) == 0);\n#if !((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)\n  ASSERT (!is_inheritable (fd));\n#endif\n  ASSERT (set_cloexec_flag (fd, false) == 0);\n  ASSERT (is_inheritable (fd));\n\n  /* Normal use of dup_cloexec.  */\n  fd2 = dup_cloexec (fd);\n  ASSERT (fd < fd2);\n  ASSERT (!is_inheritable (fd2));\n  ASSERT (close (fd) == 0);\n  ASSERT (dup_cloexec (fd2) == fd);\n  ASSERT (!is_inheritable (fd));\n  ASSERT (close (fd2) == 0);\n\n  /* On systems that distinguish between text and binary mode,\n     dup_cloexec reuses the mode of the source.  */\n  setmode (fd, O_BINARY);\n  ASSERT (is_mode (fd, O_BINARY));\n  fd2 = dup_cloexec (fd);\n  ASSERT (fd < fd2);\n  ASSERT (is_mode (fd2, O_BINARY));\n  ASSERT (close (fd2) == 0);\n  setmode (fd, O_TEXT);\n  ASSERT (is_mode (fd, O_TEXT));\n  fd2 = dup_cloexec (fd);\n  ASSERT (fd < fd2);\n  ASSERT (is_mode (fd2, O_TEXT));\n  ASSERT (close (fd2) == 0);\n\n  /* Test error handling.  */\n  errno = 0;\n  ASSERT (set_cloexec_flag (-1, false) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (set_cloexec_flag (bad_fd, false) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (set_cloexec_flag (fd2, false) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (dup_cloexec (-1) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (dup_cloexec (bad_fd) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (dup_cloexec (fd2) == -1);\n  ASSERT (errno == EBADF);\n\n  /* Clean up.  */\n  ASSERT (close (fd) == 0);\n  ASSERT (unlink (file) == 0);\n\n  return 0;\n}",
      "lines": 70,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-close.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    errno = 0;\n    ASSERT (close (-1) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (close (99) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  return 0;\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-ctype.c": {
    "main": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        26,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-dirent-safer.c": {
    "main": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "int\nmain (void)\n{\n  int i;\n  DIR *dp;\n  /* The dirent-safer module works without the use of fdopendir (which\n     would also pull in fchdir and openat); but if those modules were\n     also used, we ensure that they are safe.  In particular, the\n     gnulib version of fdopendir is unable to guarantee that\n     dirfd(fdopendir(fd))==fd, but we can at least guarantee that if\n     they are not equal, the fd returned by dirfd is safe.  */\n#if HAVE_FDOPENDIR || GNULIB_TEST_FDOPENDIR\n  int dfd;\n#endif\n\n  /* We close fd 2 later, so save it in fd 10.  */\n  if (dup2 (STDERR_FILENO, BACKUP_STDERR_FILENO) != BACKUP_STDERR_FILENO\n      || (myerr = fdopen (BACKUP_STDERR_FILENO, \"w\")) == NULL)\n    return 2;\n\n#if HAVE_FDOPENDIR || GNULIB_TEST_FDOPENDIR\n  dfd = open (\".\", O_RDONLY);\n  ASSERT (STDERR_FILENO < dfd);\n#endif\n\n  /* Four iterations, with progressively more standard descriptors\n     closed.  */\n  for (i = -1; i <= STDERR_FILENO; i++)\n    {\n      if (0 <= i)\n        ASSERT (close (i) == 0);\n      dp = opendir (\".\");\n      ASSERT (dp);\n      ASSERT (dirfd (dp) == -1 || STDERR_FILENO < dirfd (dp));\n      ASSERT (closedir (dp) == 0);\n\n#if HAVE_FDOPENDIR || GNULIB_TEST_FDOPENDIR\n      {\n        int fd = dup_safer (dfd);\n        ASSERT (STDERR_FILENO < fd);\n        dp = fdopendir (fd);\n        ASSERT (dp);\n        ASSERT (dirfd (dp) == -1 || STDERR_FILENO < dirfd (dp));\n        ASSERT (closedir (dp) == 0);\n        errno = 0;\n        ASSERT (close (fd) == -1);\n        ASSERT (errno == EBADF);\n      }\n#endif\n    }\n\n#if HAVE_FDOPENDIR || GNULIB_TEST_FDOPENDIR\n  ASSERT (close (dfd) == 0);\n#endif\n\n  return 0;\n}",
      "lines": 57,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-dirent.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        31,
        1
      ],
      "content": "int\nmain (void)\n{\n  return d.d_name[0] + i;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-dup-safer.c": {
    "zero": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        45,
        36
      ],
      "content": "static int zero (void) { return 0; }",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_open": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "content": "static bool\nis_open (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  return (HANDLE) _get_osfhandle (fd) != INVALID_HANDLE_VALUE;\n#else\n# ifndef F_GETFL\n#  error Please port fcntl to your platform\n# endif\n  return 0 <= fcntl (fd, F_GETFL);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_inheritable": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "static bool\nis_inheritable (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  DWORD flags;\n  if (h == INVALID_HANDLE_VALUE || GetHandleInformation (h, &flags) == 0)\n    return 0;\n  return (flags & HANDLE_FLAG_INHERIT) != 0;\n#else\n# ifndef F_GETFD\n#  error Please port fcntl to your platform\n# endif\n  int i = fcntl (fd, F_GETFD);\n  return 0 <= i && (i & FD_CLOEXEC) == 0;\n#endif\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_mode": {
      "start_point": [
        99,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "content": "static bool\nis_mode (int fd, int mode)\n{\n  int value = setmode (fd, O_BINARY);\n  setmode (fd, value);\n  return mode == value;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "main": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "int\nmain (void)\n{\n  int i;\n  int fd;\n  int bad_fd = getdtablesize ();\n\n  /* We close fd 2 later, so save it in fd 10.  */\n  if (dup2 (STDERR_FILENO, BACKUP_STDERR_FILENO) != BACKUP_STDERR_FILENO\n      || (myerr = fdopen (BACKUP_STDERR_FILENO, \"w\")) == NULL)\n    return 2;\n\n  /* Create file for later checks.  */\n  fd = creat (witness, 0600);\n  ASSERT (STDERR_FILENO < fd);\n\n  /* Four iterations, with progressively more standard descriptors\n     closed.  */\n  for (i = -1; i <= STDERR_FILENO; i++)\n    {\n      if (0 <= i)\n        ASSERT (close (i) == 0);\n\n      /* Detect errors.  */\n      errno = 0;\n      ASSERT (dup (-1) == -1);\n      ASSERT (errno == EBADF);\n      errno = 0;\n      ASSERT (dup (bad_fd) == -1);\n      ASSERT (errno == EBADF);\n      close (fd + 1);\n      errno = 0;\n      ASSERT (dup (fd + 1) == -1);\n      ASSERT (errno == EBADF);\n\n      /* Preserve text vs. binary.  */\n      setmode (fd, O_BINARY);\n      ASSERT (dup (fd) == fd + 1);\n      ASSERT (is_open (fd + 1));\n      ASSERT (is_inheritable (fd + 1));\n      ASSERT (is_mode (fd + 1, O_BINARY));\n\n      ASSERT (close (fd + 1) == 0);\n      setmode (fd, O_TEXT);\n      ASSERT (dup (fd) == fd + 1);\n      ASSERT (is_open (fd + 1));\n      ASSERT (is_inheritable (fd + 1));\n      ASSERT (is_mode (fd + 1, O_TEXT));\n\n      /* Create cloexec copy.  */\n      ASSERT (close (fd + 1) == 0);\n      ASSERT (fd_safer_flag (dup_cloexec (fd), O_CLOEXEC) == fd + 1);\n      ASSERT (set_cloexec_flag (fd + 1, true) == 0);\n      ASSERT (is_open (fd + 1));\n      ASSERT (!is_inheritable (fd + 1));\n      ASSERT (close (fd) == 0);\n\n      /* dup always creates inheritable copies.  Also, check that\n         earliest slot past std fds is used.  */\n      ASSERT (dup (fd + 1) == fd);\n      ASSERT (is_open (fd));\n      ASSERT (is_inheritable (fd));\n      ASSERT (close (fd + 1) == 0);\n    }\n\n  /* Cleanup.  */\n  ASSERT (close (fd) == 0);\n  ASSERT (unlink (witness) == 0);\n\n  return 0;\n}",
      "lines": 71,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-dup.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    errno = 0;\n    ASSERT (dup (-1) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (dup (99) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  return 0;\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-dup2.c": {
    "is_open": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "static int\nis_open (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  return (HANDLE) _get_osfhandle (fd) != INVALID_HANDLE_VALUE;\n#else\n# ifndef F_GETFL\n#  error Please port fcntl to your platform\n# endif\n  return 0 <= fcntl (fd, F_GETFL);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_inheritable": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "static int\nis_inheritable (int fd)\n{\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  DWORD flags;\n  if (h == INVALID_HANDLE_VALUE || GetHandleInformation (h, &flags) == 0)\n    return 0;\n  return (flags & HANDLE_FLAG_INHERIT) != 0;\n# else\n#  ifndef F_GETFD\n#   error Please port fcntl to your platform\n#  endif\n  int i = fcntl (fd, F_GETFD);\n  return 0 <= i && (i & FD_CLOEXEC) == 0;\n# endif\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "zero": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        95,
        36
      ],
      "content": "static int zero (void) { return 0; }",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_mode": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "content": "static int\nis_mode (int fd, int mode)\n{\n  int value = setmode (fd, O_BINARY);\n  setmode (fd, value);\n  return mode == value;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        221,
        1
      ],
      "content": "int\nmain (void)\n{\n  const char *file = \"test-dup2.tmp\";\n  char buffer[1];\n  int bad_fd = getdtablesize ();\n  int fd = open (file, O_CREAT | O_TRUNC | O_RDWR, 0600);\n\n  /* Assume std descriptors were provided by invoker.  */\n  ASSERT (STDERR_FILENO < fd);\n  ASSERT (is_open (fd));\n  /* Ignore any other fd's leaked into this process.  */\n  close (fd + 1);\n  close (fd + 2);\n  ASSERT (!is_open (fd + 1));\n  ASSERT (!is_open (fd + 2));\n\n  /* Assigning to self must be a no-op.  */\n  ASSERT (dup2 (fd, fd) == fd);\n  ASSERT (is_open (fd));\n\n  /* The source must be valid.  */\n  errno = 0;\n  ASSERT (dup2 (-1, fd) == -1);\n  ASSERT (errno == EBADF);\n  close (99);\n  errno = 0;\n  ASSERT (dup2 (99, fd) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (dup2 (AT_FDCWD, fd) == -1);\n  ASSERT (errno == EBADF);\n  ASSERT (is_open (fd));\n\n  /* If the source is not open, then the destination is unaffected.  */\n  errno = 0;\n  ASSERT (dup2 (fd + 1, fd + 1) == -1);\n  ASSERT (errno == EBADF);\n  ASSERT (!is_open (fd + 1));\n  errno = 0;\n  ASSERT (dup2 (fd + 1, fd) == -1);\n  ASSERT (errno == EBADF);\n  ASSERT (is_open (fd));\n\n  /* The destination must be valid.  */\n  errno = 0;\n  ASSERT (dup2 (fd, -2) == -1);\n  ASSERT (errno == EBADF);\n  if (bad_fd > 256)\n    {\n      ASSERT (dup2 (fd, 255) == 255);\n      ASSERT (dup2 (fd, 256) == 256);\n      ASSERT (close (255) == 0);\n      ASSERT (close (256) == 0);\n    }\n  ASSERT (dup2 (fd, bad_fd - 1) == bad_fd - 1);\n  ASSERT (close (bad_fd - 1) == 0);\n  errno = 0;\n  ASSERT (dup2 (fd, bad_fd) == -1);\n  ASSERT (errno == EBADF);\n\n  /* Using dup2 can skip fds.  */\n  ASSERT (dup2 (fd, fd + 2) == fd + 2);\n  ASSERT (is_open (fd));\n  ASSERT (!is_open (fd + 1));\n  ASSERT (is_open (fd + 2));\n\n  /* Verify that dup2 closes the previous occupant of a fd.  */\n  ASSERT (open (\"/dev/null\", O_WRONLY, 0600) == fd + 1);\n  ASSERT (dup2 (fd + 1, fd) == fd);\n  ASSERT (close (fd + 1) == 0);\n  ASSERT (write (fd, \"1\", 1) == 1);\n  ASSERT (dup2 (fd + 2, fd) == fd);\n  ASSERT (lseek (fd, 0, SEEK_END) == 0);\n  ASSERT (write (fd + 2, \"2\", 1) == 1);\n  ASSERT (lseek (fd, 0, SEEK_SET) == 0);\n  ASSERT (read (fd, buffer, 1) == 1);\n  ASSERT (*buffer == '2');\n\n#if GNULIB_TEST_CLOEXEC\n  /* Any new fd created by dup2 must not be cloexec.  */\n  ASSERT (close (fd + 2) == 0);\n  ASSERT (dup_cloexec (fd) == fd + 1);\n  ASSERT (!is_inheritable (fd + 1));\n  ASSERT (dup2 (fd + 1, fd + 1) == fd + 1);\n  ASSERT (!is_inheritable (fd + 1));\n  ASSERT (dup2 (fd + 1, fd + 2) == fd + 2);\n  ASSERT (!is_inheritable (fd + 1));\n  ASSERT (is_inheritable (fd + 2));\n  errno = 0;\n  ASSERT (dup2 (fd + 1, -1) == -1);\n  ASSERT (errno == EBADF);\n  ASSERT (!is_inheritable (fd + 1));\n#endif\n\n  /* On systems that distinguish between text and binary mode, dup2\n     reuses the mode of the source.  */\n  setmode (fd, O_BINARY);\n  ASSERT (is_mode (fd, O_BINARY));\n  ASSERT (dup2 (fd, fd + 1) == fd + 1);\n  ASSERT (is_mode (fd + 1, O_BINARY));\n  setmode (fd, O_TEXT);\n  ASSERT (is_mode (fd, O_TEXT));\n  ASSERT (dup2 (fd, fd + 1) == fd + 1);\n  ASSERT (is_mode (fd + 1, O_TEXT));\n\n  /* Clean up.  */\n  ASSERT (close (fd + 2) == 0);\n  ASSERT (close (fd + 1) == 0);\n  ASSERT (close (fd) == 0);\n  ASSERT (unlink (file) == 0);\n\n  return 0;\n}",
      "lines": 114,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-environ.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "int\nmain ()\n{\n  /* The environment variables that are set even in the weirdest situations\n     are HOME and PATH.\n     POSIX says that HOME is initialized by the system, and that PATH may be\n     unset.  But in practice it's more frequent to see HOME unset and PATH\n     set.  So we test the presence of PATH.  */\n  char **remaining_variables = environ;\n  char *string;\n\n  for (; (string = *remaining_variables) != NULL; remaining_variables++)\n    {\n      if (strncmp (string, \"PATH=\", 5) == 0)\n        /* Found the PATH environment variable.  */\n        return 0;\n    }\n  /* Failed to find the PATH environment variable.  */\n  return 1;\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-errno.c": {
    "main": {
      "start_point": [
        107,
        0
      ],
      "end_point": [
        118,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Verify that errno can be assigned.  */\n  errno = EOVERFLOW;\n\n  /* snprintf() callers want to distinguish EINVAL and EOVERFLOW.  */\n  if (errno == EINVAL)\n    return 1;\n\n  return 0;\n}",
      "lines": 12,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-exclude.c": {
    "main": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  int exclude_options = 0;\n  struct exclude *exclude = new_exclude ();\n\n  if (argc == 1)\n    error (1, 0, \"usage: %s file -- words...\", argv[0]);\n\n  while (--argc)\n    {\n      char *opt = *++argv;\n      if (opt[0] == '-')\n        {\n          int neg = 0;\n          int flag;\n          char *s = opt + 1;\n\n          if (opt[1] == '-' && opt[2] == 0)\n            {\n              argc--;\n              break;\n            }\n          if (strlen (s) > 3 && memcmp (s, \"no-\", 3) == 0)\n            {\n              neg = 1;\n              s += 3;\n            }\n          flag = XARGMATCH (opt, s, exclude_keywords, exclude_flags);\n          if (neg)\n            exclude_options &= ~flag;\n          else\n            exclude_options |= flag;\n\n          /* Skip this test if invoked with -leading-dir on a system that\n             lacks support for FNM_LEADING_DIR. */\n          if (strcmp (s, \"leading_dir\") == 0 && FNM_LEADING_DIR == 0)\n            exit (77);\n\n          /* Likewise for -casefold and FNM_CASEFOLD.  */\n          if (strcmp (s, \"casefold\") == 0 && FNM_CASEFOLD == 0)\n            exit (77);\n        }\n      else if (add_exclude_file (add_exclude, exclude, opt,\n                                 exclude_options, '\\n') != 0)\n        error (1, errno, \"error loading %s\", opt);\n    }\n\n  for (; argc; --argc)\n    {\n      char *word = *++argv;\n\n      printf (\"%s: %d\\n\", word, excluded_file_name (exclude, word));\n    }\n\n  free_exclude (exclude);\n  return 0;\n}",
      "lines": 58,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fchdir.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        109,
        1
      ],
      "content": "int\nmain (void)\n{\n  char *cwd;\n  int fd;\n  int i;\n\n  cwd = getcwd (NULL, 0);\n  ASSERT (cwd);\n\n  fd = open (\".\", O_RDONLY);\n  ASSERT (0 <= fd);\n\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    errno = 0;\n    ASSERT (fchdir (-1) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (fchdir (99) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  /* Check for other failure cases.  */\n  {\n    int bad_fd = open (\"/dev/null\", O_RDONLY);\n    ASSERT (0 <= bad_fd);\n    errno = 0;\n    ASSERT (fchdir (bad_fd) == -1);\n    ASSERT (errno == ENOTDIR);\n    ASSERT (close (bad_fd) == 0);\n  }\n\n  /* Repeat test twice, once in '.' and once in '..'.  */\n  for (i = 0; i < 2; i++)\n    {\n      ASSERT (chdir (&\"..\"[1 - i]) == 0);\n      ASSERT (fchdir (fd) == 0);\n      {\n        size_t len = strlen (cwd) + 1;\n        char *new_dir = malloc (len);\n        ASSERT (new_dir);\n        ASSERT (getcwd (new_dir, len) == new_dir);\n        ASSERT (strcmp (cwd, new_dir) == 0);\n        free (new_dir);\n      }\n\n      /* For second iteration, use a cloned fd, to ensure that dup\n         remembers whether an fd was associated with a directory.  */\n      if (!i)\n        {\n          int new_fd = dup (fd);\n          ASSERT (0 <= new_fd);\n          ASSERT (close (fd) == 0);\n          ASSERT (dup2 (new_fd, fd) == fd);\n          ASSERT (close (new_fd) == 0);\n          ASSERT (dup_cloexec (fd) == new_fd);\n          ASSERT (dup2 (new_fd, fd) == fd);\n          ASSERT (close (new_fd) == 0);\n          ASSERT (fcntl (fd, F_DUPFD_CLOEXEC, new_fd) == new_fd);\n          ASSERT (close (fd) == 0);\n          ASSERT (fcntl (new_fd, F_DUPFD, fd) == fd);\n          ASSERT (close (new_fd) == 0);\n#if GNULIB_TEST_DUP3\n          ASSERT (dup3 (fd, new_fd, 0) == new_fd);\n          ASSERT (dup3 (new_fd, fd, 0) == fd);\n          ASSERT (close (new_fd) == 0);\n#endif\n        }\n    }\n\n  free (cwd);\n  return 0;\n}",
      "lines": 77,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fcntl-h.c": {
    "main": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        129,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Ensure no overlap in SEEK_*. */\n  switch (0)\n    {\n    case SEEK_CUR:\n    case SEEK_END:\n    case SEEK_SET:\n      ;\n    }\n\n  /* Ensure no dangerous overlap in non-zero gnulib-defined replacements.  */\n  switch (O_RDONLY)\n    {\n      /* Access modes */\n    case O_RDONLY:\n    case O_WRONLY:\n    case O_RDWR:\n#if O_EXEC && O_EXEC != O_RDONLY\n    case O_EXEC:\n#endif\n#if O_SEARCH && O_EXEC != O_SEARCH && O_SEARCH != O_RDONLY\n    case O_SEARCH:\n#endif\n      i = ! (~O_ACCMODE & (O_RDONLY | O_WRONLY | O_RDWR | O_EXEC | O_SEARCH));\n      break;\n\n      /* Everyone should have these */\n    case O_CREAT:\n    case O_EXCL:\n    case O_TRUNC:\n    case O_APPEND:\n      break;\n\n      /* These might be 0 or O_RDONLY, only test non-zero versions.  */\n#if O_CLOEXEC\n    case O_CLOEXEC:\n#endif\n#if O_DIRECT\n    case O_DIRECT:\n#endif\n#if O_DIRECTORY\n    case O_DIRECTORY:\n#endif\n#if O_DSYNC\n    case O_DSYNC:\n#endif\n#if O_IGNORE_CTTY\n    case O_IGNORE_CTTY:\n#endif\n#if O_NOATIME\n    case O_NOATIME:\n#endif\n#if O_NONBLOCK\n    case O_NONBLOCK:\n#endif\n#if O_NOCTTY\n    case O_NOCTTY:\n#endif\n#if O_NOFOLLOW\n    case O_NOFOLLOW:\n#endif\n#if O_NOLINK\n    case O_NOLINK:\n#endif\n#if O_NOLINKS\n    case O_NOLINKS:\n#endif\n#if O_NOTRANS\n    case O_NOTRANS:\n#endif\n#if O_RSYNC && O_RSYNC != O_DSYNC\n    case O_RSYNC:\n#endif\n#if O_SYNC && O_SYNC != O_DSYNC && O_SYNC != O_RSYNC\n    case O_SYNC:\n#endif\n#if O_TTY_INIT\n    case O_TTY_INIT:\n#endif\n#if O_BINARY\n    case O_BINARY:\n#endif\n#if O_TEXT\n    case O_TEXT:\n#endif\n      ;\n    }\n\n  return !i;\n}",
      "lines": 92,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fcntl-safer.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "int\nmain (void)\n{\n  return test_open (open, true);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fcntl.c": {
    "zero": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        49,
        36
      ],
      "content": "static int zero (void) { return 0; }",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_open": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "static bool\nis_open (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  return (HANDLE) _get_osfhandle (fd) != INVALID_HANDLE_VALUE;\n#else\n# ifndef F_GETFL\n#  error Please port fcntl to your platform\n# endif\n  return 0 <= fcntl (fd, F_GETFL);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_inheritable": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "content": "static bool\nis_inheritable (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  DWORD flags;\n  if (h == INVALID_HANDLE_VALUE || GetHandleInformation (h, &flags) == 0)\n    return false;\n  return (flags & HANDLE_FLAG_INHERIT) != 0;\n#else\n# ifndef F_GETFD\n#  error Please port fcntl to your platform\n# endif\n  int i = fcntl (fd, F_GETFD);\n  return 0 <= i && (i & FD_CLOEXEC) == 0;\n#endif\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_mode": {
      "start_point": [
        93,
        0
      ],
      "end_point": [
        99,
        1
      ],
      "content": "static bool\nis_mode (int fd, int mode)\n{\n  int value = setmode (fd, O_BINARY);\n  setmode (fd, value);\n  return mode == value;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "func1": {
      "start_point": [
        114,
        0
      ],
      "end_point": [
        129,
        1
      ],
      "content": "static int\nfunc1 (int a, ...)\n{\n  va_list arg;\n  int i;\n  va_start (arg, a);\n  if (a < 4)\n    i = va_arg (arg, int);\n  else\n    {\n      struct dummy_struct *s = va_arg (arg, struct dummy_struct *);\n      i = s->value;\n    }\n  va_end (arg);\n  return i;\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "func2": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        139,
        1
      ],
      "content": "static int\nfunc2 (int a, ...)\n{\n  va_list arg;\n  void *p;\n  va_start (arg, a);\n  p = va_arg (arg, void *);\n  va_end (arg);\n  return func1 (a, p);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "check_flags": {
      "start_point": [
        143,
        0
      ],
      "end_point": [
        210,
        1
      ],
      "content": "static void\ncheck_flags (void)\n{\n  switch (0)\n    {\n    case F_DUPFD:\n#if F_DUPFD\n#endif\n\n    case F_DUPFD_CLOEXEC:\n#if F_DUPFD_CLOEXEC\n#endif\n\n    case F_GETFD:\n#if F_GETFD\n#endif\n\n#ifdef F_SETFD\n    case F_SETFD:\n# if F_SETFD\n# endif\n#endif\n\n#ifdef F_GETFL\n    case F_GETFL:\n# if F_GETFL\n# endif\n#endif\n\n#ifdef F_SETFL\n    case F_SETFL:\n# if F_SETFL\n# endif\n#endif\n\n#ifdef F_GETOWN\n    case F_GETOWN:\n# if F_GETOWN\n# endif\n#endif\n\n#ifdef F_SETOWN\n    case F_SETOWN:\n# if F_SETOWN\n# endif\n#endif\n\n#ifdef F_GETLK\n    case F_GETLK:\n# if F_GETLK\n# endif\n#endif\n\n#ifdef F_SETLK\n    case F_SETLK:\n# if F_SETLK\n# endif\n#endif\n\n#ifdef F_SETLKW\n    case F_SETLKW:\n# if F_SETLKW\n# endif\n#endif\n\n      ;\n    }\n}",
      "lines": 68,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        212,
        0
      ],
      "end_point": [
        412,
        1
      ],
      "content": "int\nmain (void)\n{\n  const char *file = \"test-fcntl.tmp\";\n  int fd;\n  int bad_fd = getdtablesize ();\n\n  /* Sanity check that rpl_fcntl is likely to work.  */\n  ASSERT (func2 (1, 2) == 2);\n  ASSERT (func2 (2, -2) == -2);\n  ASSERT (func2 (3, 0x80000000) == 0x80000000);\n  {\n    struct dummy_struct s = { 0L, 4 };\n    ASSERT (func2 (4, &s) == 4);\n  }\n  check_flags ();\n\n  /* Assume std descriptors were provided by invoker, and ignore fds\n     that might have been inherited.  */\n  fd = creat (file, 0600);\n  ASSERT (STDERR_FILENO < fd);\n  close (fd + 1);\n  close (fd + 2);\n\n  /* For F_DUPFD*, the source must be valid.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_DUPFD, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_DUPFD, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_DUPFD, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (-1, F_DUPFD_CLOEXEC, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_DUPFD_CLOEXEC, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_DUPFD_CLOEXEC, 0) == -1);\n  ASSERT (errno == EBADF);\n\n  /* For F_DUPFD*, the destination must be valid.  */\n  errno = 0;\n  ASSERT (fcntl (fd, F_DUPFD, -1) == -1);\n  ASSERT (errno == EINVAL);\n  errno = 0;\n  ASSERT (fcntl (fd, F_DUPFD, bad_fd) == -1);\n  ASSERT (errno == EINVAL);\n  errno = 0;\n  ASSERT (fcntl (fd, F_DUPFD_CLOEXEC, -1) == -1);\n  ASSERT (errno == EINVAL);\n  errno = 0;\n  ASSERT (fcntl (fd, F_DUPFD_CLOEXEC, bad_fd) == -1);\n  ASSERT (errno == EINVAL);\n\n  /* For F_DUPFD*, check for correct inheritance, as well as\n     preservation of text vs. binary.  */\n  setmode (fd, O_BINARY);\n  ASSERT (is_open (fd));\n  ASSERT (!is_open (fd + 1));\n  ASSERT (!is_open (fd + 2));\n  ASSERT (is_inheritable (fd));\n  ASSERT (is_mode (fd, O_BINARY));\n\n  ASSERT (fcntl (fd, F_DUPFD, fd) == fd + 1);\n  ASSERT (is_open (fd));\n  ASSERT (is_open (fd + 1));\n  ASSERT (!is_open (fd + 2));\n  ASSERT (is_inheritable (fd + 1));\n  ASSERT (is_mode (fd, O_BINARY));\n  ASSERT (is_mode (fd + 1, O_BINARY));\n  ASSERT (close (fd + 1) == 0);\n\n  ASSERT (fcntl (fd, F_DUPFD_CLOEXEC, fd + 2) == fd + 2);\n  ASSERT (is_open (fd));\n  ASSERT (!is_open (fd + 1));\n  ASSERT (is_open (fd + 2));\n  ASSERT (is_inheritable (fd));\n  ASSERT (!is_inheritable (fd + 2));\n  ASSERT (is_mode (fd, O_BINARY));\n  ASSERT (is_mode (fd + 2, O_BINARY));\n  ASSERT (close (fd) == 0);\n\n  setmode (fd + 2, O_TEXT);\n  ASSERT (fcntl (fd + 2, F_DUPFD, fd + 1) == fd + 1);\n  ASSERT (!is_open (fd));\n  ASSERT (is_open (fd + 1));\n  ASSERT (is_open (fd + 2));\n  ASSERT (is_inheritable (fd + 1));\n  ASSERT (!is_inheritable (fd + 2));\n  ASSERT (is_mode (fd + 1, O_TEXT));\n  ASSERT (is_mode (fd + 2, O_TEXT));\n  ASSERT (close (fd + 1) == 0);\n\n  ASSERT (fcntl (fd + 2, F_DUPFD_CLOEXEC, 0) == fd);\n  ASSERT (is_open (fd));\n  ASSERT (!is_open (fd + 1));\n  ASSERT (is_open (fd + 2));\n  ASSERT (!is_inheritable (fd));\n  ASSERT (!is_inheritable (fd + 2));\n  ASSERT (is_mode (fd, O_TEXT));\n  ASSERT (is_mode (fd + 2, O_TEXT));\n  ASSERT (close (fd + 2) == 0);\n\n  /* Test F_GETFD on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_GETFD) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_GETFD) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_GETFD) == -1);\n  ASSERT (errno == EBADF);\n\n  /* Test F_GETFD, the FD_CLOEXEC bit.  */\n  {\n    int result = fcntl (fd, F_GETFD);\n    ASSERT (0 <= result);\n    ASSERT ((result & FD_CLOEXEC) == FD_CLOEXEC);\n    ASSERT (dup (fd) == fd + 1);\n    result = fcntl (fd + 1, F_GETFD);\n    ASSERT (0 <= result);\n    ASSERT ((result & FD_CLOEXEC) == 0);\n    ASSERT (close (fd + 1) == 0);\n  }\n\n#ifdef F_SETFD\n  /* Test F_SETFD on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_SETFD, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_SETFD, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_SETFD, 0) == -1);\n  ASSERT (errno == EBADF);\n#endif\n\n#ifdef F_GETFL\n  /* Test F_GETFL on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_GETFL) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_GETFL) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_GETFL) == -1);\n  ASSERT (errno == EBADF);\n#endif\n\n#ifdef F_SETFL\n  /* Test F_SETFL on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_SETFL, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_SETFL, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_SETFL, 0) == -1);\n  ASSERT (errno == EBADF);\n#endif\n\n#ifdef F_GETOWN\n  /* Test F_GETOWN on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_GETOWN) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_GETOWN) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_GETOWN) == -1);\n  ASSERT (errno == EBADF);\n#endif\n\n#ifdef F_SETOWN\n  /* Test F_SETFL on invalid file descriptors.  */\n  errno = 0;\n  ASSERT (fcntl (-1, F_SETOWN, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (fd + 1, F_SETOWN, 0) == -1);\n  ASSERT (errno == EBADF);\n  errno = 0;\n  ASSERT (fcntl (bad_fd, F_SETOWN, 0) == -1);\n  ASSERT (errno == EBADF);\n#endif\n\n  /* Cleanup.  */\n  ASSERT (close (fd) == 0);\n  ASSERT (unlink (file) == 0);\n\n  return 0;\n}",
      "lines": 201,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fdopen.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Test behavior on failure.  POSIX makes it hard to check for\n     failure, since the behavior is not well-defined on invalid file\n     descriptors, so try fdopen 1000 times and if that's not enough to\n     fail due to EMFILE, so be it.  */\n\n  int i;\n  for (i = 0; i < 1000; i++)\n    {\n      errno = 0;\n      if (! fdopen (STDOUT_FILENO, \"w\"))\n        {\n          ASSERT (errno != 0);\n          break;\n        }\n    }\n\n  return 0;\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fdopendir.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char *argv[])\n{\n  DIR *d;\n  int fd;\n\n  /* A non-directory cannot be turned into a directory stream.  */\n  fd = open (\"test-fdopendir.tmp\", O_RDONLY | O_CREAT, 0600);\n  ASSERT (0 <= fd);\n  errno = 0;\n  ASSERT (fdopendir (fd) == NULL);\n  ASSERT (errno == ENOTDIR);\n  ASSERT (close (fd) == 0);\n  ASSERT (unlink (\"test-fdopendir.tmp\") == 0);\n\n  /* A bad fd cannot be turned into a stream.  */\n  {\n    errno = 0;\n    ASSERT (fdopendir (-1) == NULL);\n    ASSERT (errno == EBADF);\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (fdopendir (99) == NULL);\n    ASSERT (errno == EBADF);\n  }\n\n  /* This should work.  */\n  fd = open (\".\", O_RDONLY);\n  ASSERT (0 <= fd);\n  d = fdopendir (fd);\n  ASSERT (d);\n  /* fdopendir should not close fd.  */\n  ASSERT (dup2 (fd, fd) == fd);\n\n  /* Don't test dirfd here.  dirfd (d) must return fd on current POSIX\n     platforms, but on pre-2008 platforms or on non-POSIX platforms\n     dirfd (fd) might return some other descriptor, or -1, and gnulib\n     does not work around this porting problem.  */\n\n  ASSERT (closedir (d) == 0);\n  /* Now we can guarantee that fd must be closed.  */\n  errno = 0;\n  ASSERT (dup2 (fd, fd) == -1);\n  ASSERT (errno == EBADF);\n\n  return 0;\n}",
      "lines": 49,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fgetc.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  const char *filename = \"test-fgetc.txt\";\n\n  /* We don't have an fgetc() function that installs an invalid parameter\n     handler so far.  So install that handler here, explicitly.  */\n#if HAVE_MSVC_INVALID_PARAMETER_HANDLER \\\n    && MSVC_INVALID_PARAMETER_HANDLING == DEFAULT_HANDLING\n  gl_msvc_inval_ensure_handler ();\n#endif\n\n  /* Prepare a file.  */\n  {\n    const char text[] = \"hello world\";\n    int fd = open (filename, O_RDWR | O_CREAT | O_TRUNC, 0600);\n    ASSERT (fd >= 0);\n    ASSERT (write (fd, text, sizeof (text)) == sizeof (text));\n    ASSERT (close (fd) == 0);\n  }\n\n  /* Test that fgetc() sets errno if someone else closes the stream\n     fd behind the back of stdio.  */\n  {\n    FILE *fp = fopen (filename, \"r\");\n    ASSERT (fp != NULL);\n    ASSERT (close (fileno (fp)) == 0);\n    errno = 0;\n    ASSERT (fgetc (fp) == EOF);\n    ASSERT (errno == EBADF);\n    ASSERT (ferror (fp));\n    fclose (fp);\n  }\n\n  /* Test that fgetc() sets errno if the stream was constructed with\n     an invalid file descriptor.  */\n  {\n    FILE *fp = fdopen (-1, \"r\");\n    if (fp != NULL)\n      {\n        errno = 0;\n        ASSERT (fgetc (fp) == EOF);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n  {\n    FILE *fp;\n    close (99);\n    fp = fdopen (99, \"r\");\n    if (fp != NULL)\n      {\n        errno = 0;\n        ASSERT (fgetc (fp) == EOF);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n\n  /* Clean up.  */\n  unlink (filename);\n\n  return 0;\n}",
      "lines": 66,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-float.c": {
    "pow2f": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "static float\npow2f (int n)\n{\n  int k = n;\n  volatile float x = 1;\n  volatile float y = 2;\n  /* Invariant: 2^n == x * y^k.  */\n  if (k < 0)\n    {\n      y = 0.5f;\n      k = - k;\n    }\n  while (k > 0)\n    {\n      if (k != 2 * (k / 2))\n        {\n          x = x * y;\n          k = k - 1;\n        }\n      if (k == 0)\n        break;\n      y = y * y;\n      k = k / 2;\n    }\n  /* Now k == 0, hence x == 2^n.  */\n  return x;\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "float"
      ]
    },
    "pow2d": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "content": "static double\npow2d (int n)\n{\n  int k = n;\n  volatile double x = 1;\n  volatile double y = 2;\n  /* Invariant: 2^n == x * y^k.  */\n  if (k < 0)\n    {\n      y = 0.5;\n      k = - k;\n    }\n  while (k > 0)\n    {\n      if (k != 2 * (k / 2))\n        {\n          x = x * y;\n          k = k - 1;\n        }\n      if (k == 0)\n        break;\n      y = y * y;\n      k = k / 2;\n    }\n  /* Now k == 0, hence x == 2^n.  */\n  return x;\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "double"
      ]
    },
    "pow2l": {
      "start_point": [
        89,
        0
      ],
      "end_point": [
        115,
        1
      ],
      "content": "static long double\npow2l (int n)\n{\n  int k = n;\n  volatile long double x = 1;\n  volatile long double y = 2;\n  /* Invariant: 2^n == x * y^k.  */\n  if (k < 0)\n    {\n      y = 0.5L;\n      k = - k;\n    }\n  while (k > 0)\n    {\n      if (k != 2 * (k / 2))\n        {\n          x = x * y;\n          k = k - 1;\n        }\n      if (k == 0)\n        break;\n      y = y * y;\n      k = k / 2;\n    }\n  /* Now k == 0, hence x == 2^n.  */\n  return x;\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "long double",
        "long",
        "double"
      ]
    },
    "test_float": {
      "start_point": [
        127,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "static void\ntest_float (void)\n{\n  /* Check that the value of FLT_MIN_EXP is well parenthesized.  */\n  ASSERT ((FLT_MIN_EXP % 101111) == (FLT_MIN_EXP) % 101111);\n\n  /* Check that the value of DBL_MIN_10_EXP is well parenthesized.  */\n  ASSERT ((FLT_MIN_10_EXP % 101111) == (FLT_MIN_10_EXP) % 101111);\n\n  /* Check that 'float' is as specified in IEEE 754.  */\n  ASSERT (FLT_MANT_DIG == 24);\n  ASSERT (FLT_MIN_EXP == -125);\n  ASSERT (FLT_MAX_EXP == 128);\n\n  /* Check the value of FLT_MIN_10_EXP.  */\n  ASSERT (FLT_MIN_10_EXP == - (int) (- (FLT_MIN_EXP - 1) * 0.30103));\n\n  /* Check the value of FLT_DIG.  */\n  ASSERT (FLT_DIG == (int) ((FLT_MANT_DIG - 1) * 0.30103));\n\n  /* Check the value of FLT_MIN_10_EXP.  */\n  ASSERT (FLT_MIN_10_EXP == - (int) (- (FLT_MIN_EXP - 1) * 0.30103));\n\n  /* Check the value of FLT_MAX_10_EXP.  */\n  ASSERT (FLT_MAX_10_EXP == (int) (FLT_MAX_EXP * 0.30103));\n\n  /* Check the value of FLT_MAX.  */\n  {\n    volatile float m = FLT_MAX;\n    int n;\n\n    ASSERT (m + m > m);\n    for (n = 0; n <= 2 * FLT_MANT_DIG; n++)\n      {\n        volatile float pow2_n = pow2f (n); /* 2^n */\n        volatile float x = m + (m / pow2_n);\n        if (x > m)\n          ASSERT (x + x == x);\n        else\n          ASSERT (!(x + x == x));\n      }\n  }\n\n  /* Check the value of FLT_MIN.  */\n  {\n    volatile float m = FLT_MIN;\n    volatile float x = pow2f (FLT_MIN_EXP - 1);\n    ASSERT (m == x);\n  }\n\n  /* Check the value of FLT_EPSILON.  */\n  {\n    volatile float e = FLT_EPSILON;\n    volatile float me;\n    int n;\n\n    me = 1.0f + e;\n    ASSERT (me > 1.0f);\n    ASSERT (me - 1.0f == e);\n    for (n = 0; n <= 2 * FLT_MANT_DIG; n++)\n      {\n        volatile float half_n = pow2f (- n); /* 2^-n */\n        volatile float x = me - half_n;\n        if (x < me)\n          ASSERT (x <= 1.0f);\n      }\n  }\n}",
      "lines": 68,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_double": {
      "start_point": [
        206,
        0
      ],
      "end_point": [
        273,
        1
      ],
      "content": "static void\ntest_double (void)\n{\n  /* Check that the value of DBL_MIN_EXP is well parenthesized.  */\n  ASSERT ((DBL_MIN_EXP % 101111) == (DBL_MIN_EXP) % 101111);\n\n  /* Check that the value of DBL_MIN_10_EXP is well parenthesized.  */\n  ASSERT ((DBL_MIN_10_EXP % 101111) == (DBL_MIN_10_EXP) % 101111);\n\n  /* Check that 'double' is as specified in IEEE 754.  */\n  ASSERT (DBL_MANT_DIG == 53);\n  ASSERT (DBL_MIN_EXP == -1021);\n  ASSERT (DBL_MAX_EXP == 1024);\n\n  /* Check the value of DBL_MIN_10_EXP.  */\n  ASSERT (DBL_MIN_10_EXP == - (int) (- (DBL_MIN_EXP - 1) * 0.30103));\n\n  /* Check the value of DBL_DIG.  */\n  ASSERT (DBL_DIG == (int) ((DBL_MANT_DIG - 1) * 0.30103));\n\n  /* Check the value of DBL_MIN_10_EXP.  */\n  ASSERT (DBL_MIN_10_EXP == - (int) (- (DBL_MIN_EXP - 1) * 0.30103));\n\n  /* Check the value of DBL_MAX_10_EXP.  */\n  ASSERT (DBL_MAX_10_EXP == (int) (DBL_MAX_EXP * 0.30103));\n\n  /* Check the value of DBL_MAX.  */\n  {\n    volatile double m = DBL_MAX;\n    int n;\n\n    ASSERT (m + m > m);\n    for (n = 0; n <= 2 * DBL_MANT_DIG; n++)\n      {\n        volatile double pow2_n = pow2d (n); /* 2^n */\n        volatile double x = m + (m / pow2_n);\n        if (x > m)\n          ASSERT (x + x == x);\n        else\n          ASSERT (!(x + x == x));\n      }\n  }\n\n  /* Check the value of DBL_MIN.  */\n  {\n    volatile double m = DBL_MIN;\n    volatile double x = pow2d (DBL_MIN_EXP - 1);\n    ASSERT (m == x);\n  }\n\n  /* Check the value of DBL_EPSILON.  */\n  {\n    volatile double e = DBL_EPSILON;\n    volatile double me;\n    int n;\n\n    me = 1.0 + e;\n    ASSERT (me > 1.0);\n    ASSERT (me - 1.0 == e);\n    for (n = 0; n <= 2 * DBL_MANT_DIG; n++)\n      {\n        volatile double half_n = pow2d (- n); /* 2^-n */\n        volatile double x = me - half_n;\n        if (x < me)\n          ASSERT (x <= 1.0);\n      }\n  }\n}",
      "lines": 68,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_long_double": {
      "start_point": [
        289,
        0
      ],
      "end_point": [
        353,
        1
      ],
      "content": "static void\ntest_long_double (void)\n{\n  /* Check that the value of LDBL_MIN_EXP is well parenthesized.  */\n  ASSERT ((LDBL_MIN_EXP % 101111) == (LDBL_MIN_EXP) % 101111);\n\n  /* Check that the value of LDBL_MIN_10_EXP is well parenthesized.  */\n  ASSERT ((LDBL_MIN_10_EXP % 101111) == (LDBL_MIN_10_EXP) % 101111);\n\n  /* Check that 'long double' is at least as wide as 'double'.  */\n  ASSERT (LDBL_MANT_DIG >= DBL_MANT_DIG);\n  ASSERT (LDBL_MIN_EXP - LDBL_MANT_DIG <= DBL_MIN_EXP - DBL_MANT_DIG);\n  ASSERT (LDBL_MAX_EXP >= DBL_MAX_EXP);\n\n  /* Check the value of LDBL_DIG.  */\n  ASSERT (LDBL_DIG == (int)((LDBL_MANT_DIG - 1) * 0.30103));\n\n  /* Check the value of LDBL_MIN_10_EXP.  */\n  ASSERT (LDBL_MIN_10_EXP == - (int) (- (LDBL_MIN_EXP - 1) * 0.30103));\n\n  /* Check the value of LDBL_MAX_10_EXP.  */\n  ASSERT (LDBL_MAX_10_EXP == (int) (LDBL_MAX_EXP * 0.30103));\n\n  /* Check the value of LDBL_MAX.  */\n  {\n    volatile long double m = LDBL_MAX;\n    int n;\n\n    ASSERT (m + m > m);\n    for (n = 0; n <= 2 * LDBL_MANT_DIG; n++)\n      {\n        volatile long double pow2_n = pow2l (n); /* 2^n */\n        volatile long double x = m + (m / pow2_n);\n        if (x > m)\n          ASSERT (x + x == x);\n        else\n          ASSERT (!(x + x == x));\n      }\n  }\n\n  /* Check the value of LDBL_MIN.  */\n  {\n    volatile long double m = LDBL_MIN;\n    volatile long double x = pow2l (LDBL_MIN_EXP - 1);\n    ASSERT (m == x);\n  }\n\n  /* Check the value of LDBL_EPSILON.  */\n  {\n    volatile long double e = LDBL_EPSILON;\n    volatile long double me;\n    int n;\n\n    me = 1.0L + e;\n    ASSERT (me > 1.0L);\n    ASSERT (me - 1.0L == e);\n    for (n = 0; n <= 2 * LDBL_MANT_DIG; n++)\n      {\n        volatile long double half_n = pow2l (- n); /* 2^-n */\n        volatile long double x = me - half_n;\n        if (x < me)\n          ASSERT (x <= 1.0L);\n      }\n  }\n}",
      "lines": 65,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": [
      {
        "start_point": [
          355,
          0
        ],
        "end_point": [
          372,
          1
        ],
        "content": "int\nmain ()\n{\n  test_float ();\n  test_double ();\n\n  {\n    DECL_LONG_DOUBLE_ROUNDING\n\n    BEGIN_LONG_DOUBLE_ROUNDING ();\n\n    test_long_double ();\n\n    END_LONG_DOUBLE_ROUNDING ();\n  }\n\n  return 0;\n}",
        "lines": 18,
        "depth": 7,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          376,
          0
        ],
        "end_point": [
          381,
          1
        ],
        "content": "int\nmain ()\n{\n  fprintf (stderr, \"Skipping test: FLT_RADIX is not 2.\\n\");\n  return 77;\n}",
        "lines": 6,
        "depth": 7,
        "decorators": [
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/gnulib-tests/test-fnmatch.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nmain ()\n{\n  int res;\n\n  ASSERT (res = fnmatch (\"\", \"\", 0) == 0);\n\n  ASSERT (res = fnmatch (\"*\", \"\", 0) == 0);\n  ASSERT (res = fnmatch (\"*\", \"foo\", 0) == 0);\n  ASSERT (res = fnmatch (\"*\", \"bar\", 0) == 0);\n  ASSERT (res = fnmatch (\"*\", \"*\", 0) == 0);\n  ASSERT (res = fnmatch (\"**\", \"f\", 0) == 0);\n  ASSERT (res = fnmatch (\"**\", \"foo.txt\", 0) == 0);\n  ASSERT (res = fnmatch (\"*.*\", \"foo.txt\", 0) == 0);\n\n  ASSERT (res = fnmatch (\"foo*.txt\", \"foobar.txt\", 0) == 0);\n\n  ASSERT (res = fnmatch (\"foo.txt\", \"foo.txt\", 0) == 0);\n  ASSERT (res = fnmatch (\"foo\\\\.txt\", \"foo.txt\", 0) == 0);\n  ASSERT (res = fnmatch (\"foo\\\\.txt\", \"foo.txt\", FNM_NOESCAPE) == FNM_NOMATCH);\n\n  /* Verify that an unmatched [ is treated as a literal, as POSIX\n     requires.  This test ensures that glibc Bugzilla bug #12378 stays\n     fixed.\n   */\n  ASSERT (res = fnmatch (\"[/b\", \"[/b\", 0) == 0);\n\n  return 0;\n}",
      "lines": 29,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fpending.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "int\nmain (void)\n{\n  ASSERT (__fpending (stdout) == 0);\n\n  fputs (\"foo\", stdout);\n  ASSERT (__fpending (stdout) == 3);\n\n  fflush (stdout);\n  ASSERT (__fpending (stdout) == 0);\n\n  exit (0);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fputc.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  const char *filename = \"test-fputc.txt\";\n\n  /* We don't have an fputc() function that installs an invalid parameter\n     handler so far.  So install that handler here, explicitly.  */\n#if HAVE_MSVC_INVALID_PARAMETER_HANDLER \\\n    && MSVC_INVALID_PARAMETER_HANDLING == DEFAULT_HANDLING\n  gl_msvc_inval_ensure_handler ();\n#endif\n\n  /* Test that fputc() on an unbuffered stream sets errno if someone else\n     closes the stream fd behind the back of stdio.  */\n  {\n    FILE *fp = fopen (filename, \"w\");\n    ASSERT (fp != NULL);\n    setvbuf (fp, NULL, _IONBF, 0);\n    ASSERT (close (fileno (fp)) == 0);\n    errno = 0;\n    ASSERT (fputc ('x', fp) == EOF);\n    ASSERT (errno == EBADF);\n    ASSERT (ferror (fp));\n    fclose (fp);\n  }\n\n  /* Test that fputc() on an unbuffered stream sets errno if the stream\n     was constructed with an invalid file descriptor.  */\n  {\n    FILE *fp = fdopen (-1, \"w\");\n    if (fp != NULL)\n      {\n        setvbuf (fp, NULL, _IONBF, 0);\n        errno = 0;\n        ASSERT (fputc ('x', fp) == EOF);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n  {\n    FILE *fp;\n    close (99);\n    fp = fdopen (99, \"w\");\n    if (fp != NULL)\n      {\n        setvbuf (fp, NULL, _IONBF, 0);\n        errno = 0;\n        ASSERT (fputc ('x', fp) == EOF);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n\n  /* Clean up.  */\n  unlink (filename);\n\n  return 0;\n}",
      "lines": 60,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fread.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        101,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  const char *filename = \"test-fread.txt\";\n\n  /* We don't have an fread() function that installs an invalid parameter\n     handler so far.  So install that handler here, explicitly.  */\n#if HAVE_MSVC_INVALID_PARAMETER_HANDLER \\\n    && MSVC_INVALID_PARAMETER_HANDLING == DEFAULT_HANDLING\n  gl_msvc_inval_ensure_handler ();\n#endif\n\n  /* Prepare a file.  */\n  {\n    const char text[] = \"hello world\";\n    int fd = open (filename, O_RDWR | O_CREAT | O_TRUNC, 0600);\n    ASSERT (fd >= 0);\n    ASSERT (write (fd, text, sizeof (text)) == sizeof (text));\n    ASSERT (close (fd) == 0);\n  }\n\n  /* Test that fread() sets errno if someone else closes the stream\n     fd behind the back of stdio.  */\n  {\n    FILE *fp = fopen (filename, \"r\");\n    char buf[5];\n    ASSERT (fp != NULL);\n    ASSERT (close (fileno (fp)) == 0);\n    errno = 0;\n    ASSERT (fread (buf, 1, sizeof (buf), fp) == 0);\n    ASSERT (errno == EBADF);\n    ASSERT (ferror (fp));\n    fclose (fp);\n  }\n\n  /* Test that fread() sets errno if the stream was constructed with\n     an invalid file descriptor.  */\n  {\n    FILE *fp = fdopen (-1, \"r\");\n    if (fp != NULL)\n      {\n        char buf[1];\n        errno = 0;\n        ASSERT (fread (buf, 1, 1, fp) == 0);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n  {\n    FILE *fp;\n    close (99);\n    fp = fdopen (99, \"r\");\n    if (fp != NULL)\n      {\n        char buf[1];\n        errno = 0;\n        ASSERT (fread (buf, 1, 1, fp) == 0);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n\n  /* Clean up.  */\n  unlink (filename);\n\n  return 0;\n}",
      "lines": 69,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fstat.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    struct stat statbuf;\n\n    errno = 0;\n    ASSERT (fstat (-1, &statbuf) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    struct stat statbuf;\n\n    close (99);\n    errno = 0;\n    ASSERT (fstat (99, &statbuf) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  return 0;\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fstatat.c": {
    "do_stat": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "static int\ndo_stat (char const *name, struct stat *st)\n{\n#ifdef TEST_STATAT\n  return statat (dfd, name, st);\n#else\n  return fstatat (dfd, name, st, 0);\n#endif\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "do_lstat": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "content": "static int\ndo_lstat (char const *name, struct stat *st)\n{\n#ifdef TEST_STATAT\n  return lstatat (dfd, name, st);\n#else\n  return fstatat (dfd, name, st, AT_SYMLINK_NOFOLLOW);\n#endif\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        107,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char *argv[])\n{\n  int result;\n\n  /* Remove any leftovers from a previous partial run.  */\n  ignore_value (system (\"rm -rf \" BASE \"*\"));\n\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    struct stat statbuf;\n\n    errno = 0;\n    ASSERT (fstatat (-1, \"foo\", &statbuf, 0) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    struct stat statbuf;\n\n    close (99);\n    errno = 0;\n    ASSERT (fstatat (99, \"foo\", &statbuf, 0) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  result = test_stat_func (do_stat, false);\n  ASSERT (test_lstat_func (do_lstat, false) == result);\n  dfd = open (\".\", O_RDONLY);\n  ASSERT (0 <= dfd);\n  ASSERT (test_stat_func (do_stat, false) == result);\n  ASSERT (test_lstat_func (do_lstat, false) == result);\n  ASSERT (close (dfd) == 0);\n\n  /* FIXME - add additional tests of dfd not at current directory.  */\n\n  if (result == 77)\n    fputs (\"skipping test: symlinks not supported on this file system\\n\",\n           stderr);\n  return result;\n}",
      "lines": 40,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-fwrite.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  const char *filename = \"test-fwrite.txt\";\n\n  /* We don't have an fwrite() function that installs an invalid parameter\n     handler so far.  So install that handler here, explicitly.  */\n#if HAVE_MSVC_INVALID_PARAMETER_HANDLER \\\n    && MSVC_INVALID_PARAMETER_HANDLING == DEFAULT_HANDLING\n  gl_msvc_inval_ensure_handler ();\n#endif\n\n  /* Test that fwrite() on an unbuffered stream sets errno if someone else\n     closes the stream fd behind the back of stdio.  */\n  {\n    FILE *fp = fopen (filename, \"w\");\n    char buf[5] = \"world\";\n    ASSERT (fp != NULL);\n    setvbuf (fp, NULL, _IONBF, 0);\n    ASSERT (close (fileno (fp)) == 0);\n    errno = 0;\n    ASSERT (fwrite (buf, 1, sizeof (buf), fp) == 0);\n    ASSERT (errno == EBADF);\n    ASSERT (ferror (fp));\n    fclose (fp);\n  }\n\n  /* Test that fwrite() on an unbuffered stream sets errno if the stream\n     was constructed with an invalid file descriptor.  */\n  {\n    FILE *fp = fdopen (-1, \"w\");\n    if (fp != NULL)\n      {\n        char buf[5] = \"world\";\n        setvbuf (fp, NULL, _IONBF, 0);\n        errno = 0;\n        ASSERT (fwrite (buf, 1, sizeof (buf), fp) == 0);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n  {\n    FILE *fp;\n    close (99);\n    fp = fdopen (99, \"w\");\n    if (fp != NULL)\n      {\n        char buf[5] = \"world\";\n        setvbuf (fp, NULL, _IONBF, 0);\n        errno = 0;\n        ASSERT (fwrite (buf, 1, sizeof (buf), fp) == 0);\n        ASSERT (errno == EBADF);\n        ASSERT (ferror (fp));\n        fclose (fp);\n      }\n  }\n\n  /* Clean up.  */\n  unlink (filename);\n\n  return 0;\n}",
      "lines": 63,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getcwd-lgpl.c": {
    "main": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        101,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  char *pwd1;\n  char *pwd2;\n  /* If the user provides an argument, attempt to chdir there first.  */\n  if (1 < argc)\n    {\n      if (chdir (argv[1]) == 0)\n        printf (\"changed to directory %s\\n\", argv[1]);\n    }\n\n  pwd1 = getcwd (NULL, 0);\n  ASSERT (pwd1 && *pwd1);\n  if (1 < argc)\n    printf (\"cwd=%s\\n\", pwd1);\n\n  /* Make sure the result is usable.  */\n  ASSERT (chdir (pwd1) == 0);\n  ASSERT (chdir (\".//./.\") == 0);\n\n  /* Make sure that result is normalized.  */\n  pwd2 = getcwd (NULL, 0);\n  ASSERT (pwd2);\n  ASSERT (strcmp (pwd1, pwd2) == 0);\n  free (pwd2);\n  {\n    size_t len = strlen (pwd1);\n    ssize_t i = len - 10;\n    if (i < 1)\n      i = 1;\n    pwd2 = getcwd (NULL, len + 1);\n    ASSERT (pwd2);\n    free (pwd2);\n    pwd2 = malloc (len + 2);\n    for ( ; i <= len; i++)\n      {\n        char *tmp;\n        errno = 0;\n        ASSERT (getcwd (pwd2, i) == NULL);\n        ASSERT (errno == ERANGE);\n        /* Allow either glibc or BSD behavior, since POSIX allows both.  */\n        errno = 0;\n        tmp = getcwd (NULL, i);\n        if (tmp)\n          {\n            ASSERT (strcmp (pwd1, tmp) == 0);\n            free (tmp);\n          }\n        else\n          {\n            ASSERT (errno == ERANGE);\n          }\n      }\n    ASSERT (getcwd (pwd2, len + 1) == pwd2);\n    pwd2[len] = '/';\n    pwd2[len + 1] = '\\0';\n  }\n  ASSERT (strstr (pwd2, \"/./\") == NULL);\n  ASSERT (strstr (pwd2, \"/../\") == NULL);\n  ASSERT (strstr (pwd2 + 1 + (pwd2[1] == '/'), \"//\") == NULL);\n\n  /* Validate a POSIX requirement on size.  */\n  errno = 0;\n  ASSERT (getcwd(pwd2, 0) == NULL);\n  ASSERT (errno == EINVAL);\n\n  free (pwd1);\n  free (pwd2);\n\n  return 0;\n}",
      "lines": 72,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getdtablesize.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  ASSERT (getdtablesize () >= 3);\n  ASSERT (dup2 (0, getdtablesize() - 1) == getdtablesize () - 1);\n  ASSERT (dup2 (0, getdtablesize()) == -1);\n\n  return 0;\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getopt-gnu.c": {},
  "grep/grep-3.1/gnulib-tests/test-getopt-main.h": {
    "main": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        75,
        1
      ],
      "content": "int\nmain (void)\n{\n   /* This test validates that stderr is used correctly, so move the\n      original into fd 10.  */\n  if (dup2 (STDERR_FILENO, BACKUP_STDERR_FILENO) != BACKUP_STDERR_FILENO\n      || (myerr = fdopen (BACKUP_STDERR_FILENO, \"w\")) == NULL)\n    return 2;\n\n  ASSERT (freopen (TEST_GETOPT_TMP_NAME, \"w\", stderr) == stderr);\n\n  /* These default values are required by POSIX.  */\n  ASSERT (optind == 1);\n  ASSERT (opterr != 0);\n\n  setenv (\"POSIXLY_CORRECT\", \"1\", 1);\n  test_getopt ();\n\n#if TEST_GETOPT_GNU\n  test_getopt_long_posix ();\n#endif\n\n  unsetenv (\"POSIXLY_CORRECT\");\n  test_getopt ();\n\n#if TEST_GETOPT_GNU\n  test_getopt_long ();\n  test_getopt_long_only ();\n#endif\n\n  ASSERT (fclose (stderr) == 0);\n  ASSERT (remove (TEST_GETOPT_TMP_NAME) == 0);\n\n  return 0;\n}",
      "lines": 35,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getopt-posix.c": {},
  "grep/grep-3.1/gnulib-tests/test-getopt.h": {
    "getopt_loop": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "static void\ngetopt_loop (int argc, const char **argv,\n             const char *options,\n             int *a_seen, int *b_seen,\n             const char **p_value, const char **q_value,\n             int *non_options_count, const char **non_options,\n             int *unrecognized, bool *message_issued)\n{\n  int c;\n  int pos = ftell (stderr);\n\n  while ((c = getopt (argc, (char **) argv, options)) != -1)\n    {\n      switch (c)\n        {\n        case 'a':\n          (*a_seen)++;\n          break;\n        case 'b':\n          (*b_seen)++;\n          break;\n        case 'p':\n          *p_value = optarg;\n          break;\n        case 'q':\n          *q_value = optarg;\n          break;\n        case '\\1':\n          /* Must only happen with option '-' at the beginning.  */\n          ASSERT (options[0] == '-');\n          non_options[(*non_options_count)++] = optarg;\n          break;\n        case ':':\n          /* Must only happen with option ':' at the beginning.  */\n          ASSERT (options[0] == ':'\n                  || ((options[0] == '-' || options[0] == '+')\n                      && options[1] == ':'));\n          FALLTHROUGH;\n        case '?':\n          *unrecognized = optopt;\n          break;\n        default:\n          *unrecognized = c;\n          break;\n        }\n    }\n\n  *message_issued = pos < ftell (stderr);\n}",
      "lines": 49,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_getopt": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        1390,
        1
      ],
      "content": "static void\ntest_getopt (void)\n{\n  int start;\n  bool posixly = !!getenv (\"POSIXLY_CORRECT\");\n  /* See comment in getopt.c:\n     glibc gets a LSB-compliant getopt.\n     Standalone applications get a POSIX-compliant getopt.  */\n#if defined __GETOPT_PREFIX || !(__GLIBC__ >= 2 || defined __MINGW32__)\n  /* Using getopt from gnulib or from a non-glibc system.  */\n  posixly = true;\n#endif\n\n  /* Test processing of boolean options.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"ab\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"ab\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ba\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"ab\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"ab\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 2);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n      ASSERT (!output);\n    }\n\n  /* Test processing of options with arguments.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"p:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"p:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"baz\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value != NULL && strcmp (q_value, \"baz\") == 0);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n      ASSERT (!output);\n    }\n\n#if GNULIB_TEST_GETOPT_GNU\n  /* Test processing of options with optional arguments.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"p::q::\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"p::q::\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp::q::\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n      ASSERT (!output);\n    }\n#endif /* GNULIB_TEST_GETOPT_GNU */\n\n  /* Check that invalid options are recognized; and that both opterr\n     and leading ':' can silence output.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-x\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 42;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'x');\n      ASSERT (optind == 5);\n      ASSERT (output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-x\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 0;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'x');\n      ASSERT (optind == 5);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-x\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \":abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'x');\n      ASSERT (optind == 5);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-:\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 42;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == ':');\n      ASSERT (optind == 5);\n      ASSERT (output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-:\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 0;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == ':');\n      ASSERT (optind == 5);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-:\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \":abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == ':');\n      ASSERT (optind == 5);\n      ASSERT (!output);\n    }\n\n  /* Check for missing argument behavior.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ap\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'p');\n      ASSERT (optind == 2);\n      ASSERT (output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ap\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 0;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'p');\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ap\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \":abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'p');\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n\n  /* Check that by default, non-options arguments are moved to the end.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      if (posixly)\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"donald\") == 0);\n          ASSERT (strcmp (argv[2], \"-p\") == 0);\n          ASSERT (strcmp (argv[3], \"billy\") == 0);\n          ASSERT (strcmp (argv[4], \"duck\") == 0);\n          ASSERT (strcmp (argv[5], \"-a\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 0);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value == NULL);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 1);\n          ASSERT (!output);\n        }\n      else\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"-p\") == 0);\n          ASSERT (strcmp (argv[2], \"billy\") == 0);\n          ASSERT (strcmp (argv[3], \"-a\") == 0);\n          ASSERT (strcmp (argv[4], \"donald\") == 0);\n          ASSERT (strcmp (argv[5], \"duck\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 1);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 4);\n          ASSERT (!output);\n        }\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[20];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      if (posixly)\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"donald\") == 0);\n          ASSERT (strcmp (argv[2], \"-p\") == 0);\n          ASSERT (strcmp (argv[3], \"billy\") == 0);\n          ASSERT (strcmp (argv[4], \"duck\") == 0);\n          ASSERT (strcmp (argv[5], \"-a\") == 0);\n          ASSERT (strcmp (argv[6], \"--\") == 0);\n          ASSERT (strcmp (argv[7], \"-b\") == 0);\n          ASSERT (strcmp (argv[8], \"foo\") == 0);\n          ASSERT (strcmp (argv[9], \"-q\") == 0);\n          ASSERT (strcmp (argv[10], \"johnny\") == 0);\n          ASSERT (strcmp (argv[11], \"bar\") == 0);\n          ASSERT (argv[12] == NULL);\n          ASSERT (a_seen == 0);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value == NULL);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 1);\n          ASSERT (!output);\n        }\n      else\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"-p\") == 0);\n          ASSERT (strcmp (argv[2], \"billy\") == 0);\n          ASSERT (strcmp (argv[3], \"-a\") == 0);\n          ASSERT (strcmp (argv[4], \"--\") == 0);\n          ASSERT (strcmp (argv[5], \"donald\") == 0);\n          ASSERT (strcmp (argv[6], \"duck\") == 0);\n          ASSERT (strcmp (argv[7], \"-b\") == 0);\n          ASSERT (strcmp (argv[8], \"foo\") == 0);\n          ASSERT (strcmp (argv[9], \"-q\") == 0);\n          ASSERT (strcmp (argv[10], \"johnny\") == 0);\n          ASSERT (strcmp (argv[11], \"bar\") == 0);\n          ASSERT (argv[12] == NULL);\n          ASSERT (a_seen == 1);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 5);\n          ASSERT (!output);\n        }\n    }\n\n#if GNULIB_TEST_GETOPT_GNU\n  /* Check that the '-' flag causes non-options to be returned in order.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"-abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 3);\n      ASSERT (strcmp (non_options[0], \"donald\") == 0);\n      ASSERT (strcmp (non_options[1], \"duck\") == 0);\n      ASSERT (strcmp (non_options[2], \"bar\") == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 7);\n      ASSERT (!output);\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[20];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"-abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"--\") == 0);\n      ASSERT (strcmp (argv[7], \"-b\") == 0);\n      ASSERT (strcmp (argv[8], \"foo\") == 0);\n      ASSERT (strcmp (argv[9], \"-q\") == 0);\n      ASSERT (strcmp (argv[10], \"johnny\") == 0);\n      ASSERT (strcmp (argv[11], \"bar\") == 0);\n      ASSERT (argv[12] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (!output);\n      if (non_options_count == 2)\n        {\n          /* glibc behaviour.  */\n          ASSERT (non_options_count == 2);\n          ASSERT (strcmp (non_options[0], \"donald\") == 0);\n          ASSERT (strcmp (non_options[1], \"duck\") == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 7);\n        }\n      else\n        {\n          /* Another valid behaviour.  */\n          ASSERT (non_options_count == 7);\n          ASSERT (strcmp (non_options[0], \"donald\") == 0);\n          ASSERT (strcmp (non_options[1], \"duck\") == 0);\n          ASSERT (strcmp (non_options[2], \"-b\") == 0);\n          ASSERT (strcmp (non_options[3], \"foo\") == 0);\n          ASSERT (strcmp (non_options[4], \"-q\") == 0);\n          ASSERT (strcmp (non_options[5], \"johnny\") == 0);\n          ASSERT (strcmp (non_options[6], \"bar\") == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 12);\n        }\n    }\n\n  /* Check that the '-' flag has to come first.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:-\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      if (posixly)\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"donald\") == 0);\n          ASSERT (strcmp (argv[2], \"-p\") == 0);\n          ASSERT (strcmp (argv[3], \"billy\") == 0);\n          ASSERT (strcmp (argv[4], \"duck\") == 0);\n          ASSERT (strcmp (argv[5], \"-a\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 0);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value == NULL);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 1);\n          ASSERT (!output);\n        }\n      else\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"-p\") == 0);\n          ASSERT (strcmp (argv[2], \"billy\") == 0);\n          ASSERT (strcmp (argv[3], \"-a\") == 0);\n          ASSERT (strcmp (argv[4], \"donald\") == 0);\n          ASSERT (strcmp (argv[5], \"duck\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 1);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 4);\n          ASSERT (!output);\n        }\n    }\n\n  /* Check that the '+' flag causes the first non-option to terminate the\n     loop.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"+abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-+\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_loop (argc, argv, \"+abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == '+');\n      ASSERT (optind == 2);\n      ASSERT (output);\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[20];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"+abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"--\") == 0);\n      ASSERT (strcmp (argv[7], \"-b\") == 0);\n      ASSERT (strcmp (argv[8], \"foo\") == 0);\n      ASSERT (strcmp (argv[9], \"-q\") == 0);\n      ASSERT (strcmp (argv[10], \"johnny\") == 0);\n      ASSERT (strcmp (argv[11], \"bar\") == 0);\n      ASSERT (argv[12] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n      ASSERT (!output);\n    }\n#endif /* GNULIB_TEST_GETOPT_GNU */\n\n  /* Check that the '+' flag has to come first.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"abp:q:+\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      if (posixly)\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"donald\") == 0);\n          ASSERT (strcmp (argv[2], \"-p\") == 0);\n          ASSERT (strcmp (argv[3], \"billy\") == 0);\n          ASSERT (strcmp (argv[4], \"duck\") == 0);\n          ASSERT (strcmp (argv[5], \"-a\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 0);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value == NULL);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 1);\n          ASSERT (!output);\n        }\n      else\n        {\n          ASSERT (strcmp (argv[0], \"program\") == 0);\n          ASSERT (strcmp (argv[1], \"-p\") == 0);\n          ASSERT (strcmp (argv[2], \"billy\") == 0);\n          ASSERT (strcmp (argv[3], \"-a\") == 0);\n          ASSERT (strcmp (argv[4], \"donald\") == 0);\n          ASSERT (strcmp (argv[5], \"duck\") == 0);\n          ASSERT (strcmp (argv[6], \"bar\") == 0);\n          ASSERT (argv[7] == NULL);\n          ASSERT (a_seen == 1);\n          ASSERT (b_seen == 0);\n          ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n          ASSERT (q_value == NULL);\n          ASSERT (non_options_count == 0);\n          ASSERT (unrecognized == 0);\n          ASSERT (optind == 4);\n          ASSERT (!output);\n        }\n    }\n\n#if GNULIB_TEST_GETOPT_GNU\n  /* If GNU extensions are supported, require compliance with POSIX\n     interpretation on leading '+' behavior.\n     http://austingroupbugs.net/view.php?id=191  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      getopt_loop (argc, argv, \"+:abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_loop (argc, argv, \"+:abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'p');\n      ASSERT (optind == 2);\n      ASSERT (!output);\n    }\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int a_seen = 0;\n      int b_seen = 0;\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      bool output;\n      int argc = 0;\n      const char *argv[10];\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"-p\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_loop (argc, argv, \"+:abp:q:\",\n                   &a_seen, &b_seen, &p_value, &q_value,\n                   &non_options_count, non_options, &unrecognized, &output);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'p');\n      ASSERT (optind == 3);\n      ASSERT (!output);\n    }\n\n  /* Check that 'W' does not dump core:\n     http://sourceware.org/bugzilla/show_bug.cgi?id=12922\n     Technically, POSIX says the presence of ';' in the opt-string\n     gives unspecified behavior, so we only test this when GNU compliance\n     is desired.  */\n  for (start = OPTIND_MIN; start <= 1; start++)\n    {\n      int argc = 0;\n      const char *argv[10];\n      int pos = ftell (stderr);\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"dummy\";\n      argv[argc] = NULL;\n      optind = start;\n      opterr = 1;\n      ASSERT (getopt (argc, (char **) argv, \"W;\") == 'W');\n      ASSERT (ftell (stderr) == pos);\n      ASSERT (optind == 2);\n    }\n#endif /* GNULIB_TEST_GETOPT_GNU */\n}",
      "lines": 1310,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getopt_long.h": {
    "getopt_long_loop": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "static void\ngetopt_long_loop (int argc, const char **argv,\n                  const char *options, const struct option *long_options,\n                  const char **p_value, const char **q_value,\n                  int *non_options_count, const char **non_options,\n                  int *unrecognized)\n{\n  int option_index = -1;\n  int c;\n\n  opterr = 0;\n  q_seen = 0;\n  while ((c = getopt_long (argc, (char **) argv, options, long_options,\n                           &option_index))\n         != -1)\n    {\n      switch (c)\n        {\n        case 0:\n          /* An option with a non-NULL flag pointer was processed.  */\n          if (q_seen)\n            *q_value = optarg;\n          break;\n        case 'a':\n          a_seen++;\n          break;\n        case 'b':\n          b_seen = 1;\n          break;\n        case 'p':\n          *p_value = optarg;\n          break;\n        case 'q':\n          *q_value = optarg;\n          break;\n        case '\\1':\n          /* Must only happen with option '-' at the beginning.  */\n          ASSERT (options[0] == '-');\n          non_options[(*non_options_count)++] = optarg;\n          break;\n        case ':':\n          /* Must only happen with option ':' at the beginning.  */\n          ASSERT (options[0] == ':'\n                  || ((options[0] == '-' || options[0] == '+')\n                      && options[1] == ':'));\n          FALLTHROUGH;\n        case '?':\n          *unrecognized = optopt;\n          break;\n        default:\n          *unrecognized = c;\n          break;\n        }\n    }\n}",
      "lines": 55,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "do_getopt_long": {
      "start_point": [
        103,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "content": "static int\ndo_getopt_long (int argc, const char **argv, const char *shortopts,\n                const struct option *longopts, int *longind)\n{\n  return getopt_long (argc, (char **) argv, shortopts, longopts, longind);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "test_getopt_long": {
      "start_point": [
        110,
        0
      ],
      "end_point": [
        1812,
        1
      ],
      "content": "static void\ntest_getopt_long (void)\n{\n  int start;\n\n  /* Test disambiguation of options.  */\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--x\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xt\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtr\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtra\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == 1001);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtre\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtrem\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtreme\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == 1002);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtremel\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == 1003);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--xtremely\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"ab\", long_options_required, &option_index);\n    ASSERT (c == 1003);\n  }\n\n  /* Check that -W handles unknown options.  */\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-W\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"W;\", long_options_required, &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 'W');\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-Wunknown\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"W;\", long_options_required, &option_index);\n    /* glibc and BSD behave differently here, but for now, we allow\n       both behaviors since W support is not frequently used.  */\n    if (c == '?')\n      {\n        ASSERT (optopt == 0);\n        ASSERT (optarg == NULL);\n      }\n    else\n      {\n        ASSERT (c == 'W');\n        ASSERT (strcmp (optarg, \"unknown\") == 0);\n      }\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-W\";\n    argv[argc++] = \"unknown\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"W;\", long_options_required, &option_index);\n    /* glibc and BSD behave differently here, but for now, we allow\n       both behaviors since W support is not frequently used.  */\n    if (c == '?')\n      {\n        ASSERT (optopt == 0);\n        ASSERT (optarg == NULL);\n      }\n    else\n      {\n        ASSERT (c == 'W');\n        ASSERT (strcmp (optarg, \"unknown\") == 0);\n      }\n  }\n\n  /* Test that 'W' does not dump core:\n     http://sourceware.org/bugzilla/show_bug.cgi?id=12922  */\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-W\";\n    argv[argc++] = \"dummy\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long (argc, argv, \"W;\", NULL, &option_index);\n    ASSERT (c == 'W');\n    ASSERT (optind == 2);\n  }\n\n  /* Test processing of boolean short options.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ba\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 2);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n\n  /* Test processing of boolean long options.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--alpha\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--beta\";\n      argv[argc++] = \"--alpha\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--alpha\";\n      argv[argc++] = \"--beta\";\n      argv[argc++] = \"--alpha\";\n      argv[argc++] = \"--beta\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 2);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n\n  /* Test processing of boolean long options via -W.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Walpha\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abW;\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"beta\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"alpha\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"aW;b\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Walpha\";\n      argv[argc++] = \"-Wbeta\";\n      argv[argc++] = \"-Walpha\";\n      argv[argc++] = \"-Wbeta\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"W;ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 2);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n\n  /* Test processing of short options with arguments.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"baz\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value != NULL && strcmp (q_value, \"baz\") == 0);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n\n  /* Test processing of long options with arguments.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"--q\";\n      argv[argc++] = \"baz\";\n      argv[argc++] = \"--p=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value != NULL && strcmp (q_value, \"baz\") == 0);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n\n  /* Test processing of long options with arguments via -W.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Wp=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:q:W;\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p:W;q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-ab\";\n      argv[argc++] = \"-Wq\";\n      argv[argc++] = \"baz\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"p=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"W;abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value != NULL && strcmp (q_value, \"baz\") == 0);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 6);\n    }\n\n  /* Test processing of short options with optional arguments.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-pfoo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n\n  /* Test processing of long options with optional arguments.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p=\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && *p_value == '\\0');\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"--p\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n\n  /* Test processing of long options with optional arguments via -W.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Wp=foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::W;\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Wp\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::q::W;\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-Wp=\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"W;p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && *p_value == '\\0');\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"p=\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"W;p::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && *p_value == '\\0');\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 3);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-W\";\n      argv[argc++] = \"p\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"W;abp::q::\", long_options_optional,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      /* ASSERT (p_value == NULL); */\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n\n  /* Check that invalid options are recognized.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-x\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'x');\n      ASSERT (optind == 5);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-:\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == ':');\n      ASSERT (optind == 5);\n    }\n\n  /* Check that unexpected arguments are recognized.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"--a=\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 'a');\n      ASSERT (optind == 4);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"--b=\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"foo\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      /* When flag is non-zero, glibc sets optopt anyway, but BSD\n         leaves optopt unchanged.  */\n      ASSERT (unrecognized == 1 || unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n\n  /* Check that by default, non-options arguments are moved to the end.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"-p\") == 0);\n      ASSERT (strcmp (argv[2], \"billy\") == 0);\n      ASSERT (strcmp (argv[3], \"-a\") == 0);\n      ASSERT (strcmp (argv[4], \"donald\") == 0);\n      ASSERT (strcmp (argv[5], \"duck\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[20];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"-p\") == 0);\n      ASSERT (strcmp (argv[2], \"billy\") == 0);\n      ASSERT (strcmp (argv[3], \"-a\") == 0);\n      ASSERT (strcmp (argv[4], \"--\") == 0);\n      ASSERT (strcmp (argv[5], \"donald\") == 0);\n      ASSERT (strcmp (argv[6], \"duck\") == 0);\n      ASSERT (strcmp (argv[7], \"-b\") == 0);\n      ASSERT (strcmp (argv[8], \"foo\") == 0);\n      ASSERT (strcmp (argv[9], \"-q\") == 0);\n      ASSERT (strcmp (argv[10], \"johnny\") == 0);\n      ASSERT (strcmp (argv[11], \"bar\") == 0);\n      ASSERT (argv[12] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 5);\n    }\n\n  /* Check that the '-' flag causes non-options to be returned in order.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"-abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 3);\n      ASSERT (strcmp (non_options[0], \"donald\") == 0);\n      ASSERT (strcmp (non_options[1], \"duck\") == 0);\n      ASSERT (strcmp (non_options[2], \"bar\") == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 7);\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[20];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"-abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"--\") == 0);\n      ASSERT (strcmp (argv[7], \"-b\") == 0);\n      ASSERT (strcmp (argv[8], \"foo\") == 0);\n      ASSERT (strcmp (argv[9], \"-q\") == 0);\n      ASSERT (strcmp (argv[10], \"johnny\") == 0);\n      ASSERT (strcmp (argv[11], \"bar\") == 0);\n      ASSERT (argv[12] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      if (non_options_count == 2)\n      {\n        /* glibc behaviour.  */\n        ASSERT (non_options_count == 2);\n        ASSERT (strcmp (non_options[0], \"donald\") == 0);\n        ASSERT (strcmp (non_options[1], \"duck\") == 0);\n        ASSERT (unrecognized == 0);\n        ASSERT (optind == 7);\n      }\n      else\n      {\n        /* Another valid behaviour.  */\n        ASSERT (non_options_count == 7);\n        ASSERT (strcmp (non_options[0], \"donald\") == 0);\n        ASSERT (strcmp (non_options[1], \"duck\") == 0);\n        ASSERT (strcmp (non_options[2], \"-b\") == 0);\n        ASSERT (strcmp (non_options[3], \"foo\") == 0);\n        ASSERT (strcmp (non_options[4], \"-q\") == 0);\n        ASSERT (strcmp (non_options[5], \"johnny\") == 0);\n        ASSERT (strcmp (non_options[6], \"bar\") == 0);\n        ASSERT (unrecognized == 0);\n        ASSERT (optind == 12);\n      }\n    }\n\n  /* Check that the '-' flag has to come first.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:-\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"-p\") == 0);\n      ASSERT (strcmp (argv[2], \"billy\") == 0);\n      ASSERT (strcmp (argv[3], \"-a\") == 0);\n      ASSERT (strcmp (argv[4], \"donald\") == 0);\n      ASSERT (strcmp (argv[5], \"duck\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n\n  /* Check that the '+' flag causes the first non-option to terminate the\n     loop.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"+abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n    }\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-+\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"+abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == '+');\n      ASSERT (optind == 2);\n    }\n\n  /* Check that '--' ends the argument processing.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[20];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"--\";\n      argv[argc++] = \"-b\";\n      argv[argc++] = \"foo\";\n      argv[argc++] = \"-q\";\n      argv[argc++] = \"johnny\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"+abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"--\") == 0);\n      ASSERT (strcmp (argv[7], \"-b\") == 0);\n      ASSERT (strcmp (argv[8], \"foo\") == 0);\n      ASSERT (strcmp (argv[9], \"-q\") == 0);\n      ASSERT (strcmp (argv[10], \"johnny\") == 0);\n      ASSERT (strcmp (argv[11], \"bar\") == 0);\n      ASSERT (argv[12] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n    }\n\n  /* Check that the '+' flag has to come first.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:+\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"-p\") == 0);\n      ASSERT (strcmp (argv[2], \"billy\") == 0);\n      ASSERT (strcmp (argv[3], \"-a\") == 0);\n      ASSERT (strcmp (argv[4], \"donald\") == 0);\n      ASSERT (strcmp (argv[5], \"duck\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value != NULL && strcmp (p_value, \"billy\") == 0);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n}",
      "lines": 1703,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_getopt_long_posix": {
      "start_point": [
        1818,
        0
      ],
      "end_point": [
        1926,
        1
      ],
      "content": "static void\ntest_getopt_long_posix (void)\n{\n  int start;\n\n  /* Check that POSIXLY_CORRECT stops parsing the same as leading '+'.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"donald\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"duck\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"bar\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"abp:q:\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (strcmp (argv[0], \"program\") == 0);\n      ASSERT (strcmp (argv[1], \"donald\") == 0);\n      ASSERT (strcmp (argv[2], \"-p\") == 0);\n      ASSERT (strcmp (argv[3], \"billy\") == 0);\n      ASSERT (strcmp (argv[4], \"duck\") == 0);\n      ASSERT (strcmp (argv[5], \"-a\") == 0);\n      ASSERT (strcmp (argv[6], \"bar\") == 0);\n      ASSERT (argv[7] == NULL);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 1);\n    }\n\n  /* Check that POSIXLY_CORRECT doesn't change optional arguments.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-p\";\n      argv[argc++] = \"billy\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"p::\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 0);\n      ASSERT (b_seen == 0);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 2);\n    }\n\n  /* Check that leading - still sees options after non-options.  */\n  for (start = 0; start <= 1; start++)\n    {\n      const char *p_value = NULL;\n      const char *q_value = NULL;\n      int non_options_count = 0;\n      const char *non_options[10];\n      int unrecognized = 0;\n      int argc = 0;\n      const char *argv[10];\n      a_seen = 0;\n      b_seen = 0;\n\n      argv[argc++] = \"program\";\n      argv[argc++] = \"-a\";\n      argv[argc++] = \"billy\";\n      argv[argc++] = \"-b\";\n      argv[argc] = NULL;\n      optind = start;\n      getopt_long_loop (argc, argv, \"-ab\", long_options_required,\n                        &p_value, &q_value,\n                        &non_options_count, non_options, &unrecognized);\n      ASSERT (a_seen == 1);\n      ASSERT (b_seen == 1);\n      ASSERT (p_value == NULL);\n      ASSERT (q_value == NULL);\n      ASSERT (non_options_count == 1);\n      ASSERT (strcmp (non_options[0], \"billy\") == 0);\n      ASSERT (unrecognized == 0);\n      ASSERT (optind == 4);\n    }\n}",
      "lines": 109,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "do_getopt_long_only": {
      "start_point": [
        1931,
        0
      ],
      "end_point": [
        1936,
        1
      ],
      "content": "static int\ndo_getopt_long_only (int argc, const char **argv, const char *shortopts,\n                     const struct option *longopts, int *longind)\n{\n  return getopt_long_only (argc, (char **) argv, shortopts, longopts, longind);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "test_getopt_long_only": {
      "start_point": [
        1938,
        0
      ],
      "end_point": [
        2143,
        1
      ],
      "content": "static void\ntest_getopt_long_only (void)\n{\n  /* Test disambiguation of options.  */\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-x\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"ab\", long_options_required,\n                             &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-x\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx\", long_options_required,\n                             &option_index);\n    ASSERT (c == 'x');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--x\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx\", long_options_required,\n                             &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-b\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    b_seen = 0;\n    c = do_getopt_long_only (argc, argv, \"abx\", long_options_required,\n                             &option_index);\n    ASSERT (c == 'b');\n    ASSERT (b_seen == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"--b\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    b_seen = 0;\n    c = do_getopt_long_only (argc, argv, \"abx\", long_options_required,\n                             &option_index);\n    ASSERT (c == 0);\n    ASSERT (b_seen == 1);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xt\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"ab\", long_options_required,\n                             &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xt\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx\", long_options_required,\n                             &option_index);\n    ASSERT (c == '?');\n    ASSERT (optopt == 0);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xtra\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"ab\", long_options_required,\n                             &option_index);\n    ASSERT (c == 1001);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xtreme\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx:\", long_options_required,\n                             &option_index);\n    ASSERT (c == 1002);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xtremel\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"ab\", long_options_required,\n                             &option_index);\n    /* glibc getopt_long_only is intentionally different from\n       getopt_long when handling a prefix that is common to two\n       spellings, when both spellings have the same option directives.\n       BSD getopt_long_only treats both cases the same.  */\n    ASSERT (c == 1003 || c == '?');\n    ASSERT (optind == 2);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xtremel\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx::\", long_options_required,\n                             &option_index);\n    /* glibc getopt_long_only is intentionally different from\n       getopt_long when handling a prefix that is common to two\n       spellings, when both spellings have the same option directives.\n       BSD getopt_long_only treats both cases the same.  */\n    ASSERT (c == 1003 || c == '?');\n    ASSERT (optind == 2);\n    ASSERT (optarg == NULL);\n  }\n  {\n    int argc = 0;\n    const char *argv[10];\n    int option_index;\n    int c;\n\n    argv[argc++] = \"program\";\n    argv[argc++] = \"-xtras\";\n    argv[argc] = NULL;\n    optind = 1;\n    opterr = 0;\n    c = do_getopt_long_only (argc, argv, \"abx::\", long_options_required,\n                             &option_index);\n    ASSERT (c == 'x');\n    ASSERT (strcmp (optarg, \"tras\") == 0);\n  }\n}",
      "lines": 206,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-getprogname.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "int\nmain (void)\n{\n  char const *p = getprogname ();\n\n  /* libtool creates a temporary executable whose name is sometimes prefixed\n     with \"lt-\" (depends on the platform).  But the name of the temporary\n     executable is a detail that should not be visible to the end user and to\n     the test suite.  Remove this \"lt-\" prefix here.  */\n  if (strncmp (p, \"lt-\", 3) == 0)\n    p += 3;\n\n  /* Note: You can make this test fail\n     a) by running it on a case-insensitive file system (such as on Windows,\n        Cygwin, or on Mac OS X with a case-insensitive HFS+ file system),\n        with an invocation that contains upper case characters, e.g.\n        test-GETPROGNAME,\n     b) by hardlinking or symlinking it to a different name (e.g. test-foo)\n        and invoking it through that name.\n     That's not the intended use. The Makefile always invokes it as\n     'test-getprogname${EXEEXT}'. */\n#if defined __CYGWIN__\n  /* The Cygwin getprogname() function strips the \".exe\" suffix. */\n  assert (STREQ (p, \"test-getprogname\"));\n#else\n  assert (STREQ (p, \"test-getprogname\" EXEEXT));\n#endif\n\n  return 0;\n}",
      "lines": 30,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-hash.c": {
    "hash_compare_strings": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "static bool\nhash_compare_strings (void const *x, void const *y)\n{\n  ASSERT (x != y);\n  return STREQ (x, y) ? true : false;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "hash_freer": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        45,
        1
      ],
      "content": "static void\nhash_freer (void *x)\n{\n  free (x);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "insert_new": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "static void\ninsert_new (Hash_table *ht, const void *ent)\n{\n  void *e = hash_insert (ht, ent);\n  ASSERT (e == ent);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "walk": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "static bool\nwalk (void *ent, void *data)\n{\n  char *str = ent;\n  unsigned int *map = data;\n  switch (*str)\n    {\n    case 'a': *map |= 1; return true;\n    case 'b': *map |= 2; return true;\n    case 'c': *map |= 4; return true;\n    }\n  *map |= 8;\n  return false;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "get_seed": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "content": "static int\nget_seed (char const *str, unsigned int *seed)\n{\n  size_t len = strlen (str);\n  if (len == 0 || strspn (str, \"0123456789\") != len || 10 < len)\n    return 1;\n\n  *seed = atoi (str);\n  return 0;\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        262,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  unsigned int i;\n  unsigned int k;\n  unsigned int table_size[] = {1, 2, 3, 4, 5, 23, 53};\n  Hash_table *ht;\n  Hash_tuning tuning;\n\n  hash_reset_tuning (&tuning);\n  tuning.shrink_threshold = 0.3;\n  tuning.shrink_factor = 0.707;\n  tuning.growth_threshold = 1.5;\n  tuning.growth_factor = 2.0;\n  tuning.is_n_buckets = true;\n\n  if (1 < argc)\n    {\n      unsigned int seed;\n      if (get_seed (argv[1], &seed) != 0)\n        {\n          fprintf (stderr, \"invalid seed: %s\\n\", argv[1]);\n          exit (EXIT_FAILURE);\n        }\n\n      srand (seed);\n    }\n\n  for (i = 0; i < ARRAY_CARDINALITY (table_size); i++)\n    {\n      size_t sz = table_size[i];\n      ht = hash_initialize (sz, NULL, hash_pjw, hash_compare_strings, NULL);\n      ASSERT (ht);\n      insert_new (ht, \"a\");\n      {\n        char *str1 = strdup (\"a\");\n        char *str2;\n        ASSERT (str1);\n        str2 = hash_insert (ht, str1);\n        ASSERT (str1 != str2);\n        ASSERT (STREQ (str1, str2));\n        free (str1);\n      }\n      insert_new (ht, \"b\");\n      insert_new (ht, \"c\");\n      i = 0;\n      ASSERT (hash_do_for_each (ht, walk, &i) == 3);\n      ASSERT (i == 7);\n      {\n        void *buf[5] = { NULL };\n        ASSERT (hash_get_entries (ht, NULL, 0) == 0);\n        ASSERT (hash_get_entries (ht, buf, 5) == 3);\n        ASSERT (STREQ (buf[0], \"a\") || STREQ (buf[0], \"b\") || STREQ (buf[0], \"c\"));\n      }\n      ASSERT (hash_delete (ht, \"a\"));\n      ASSERT (hash_delete (ht, \"a\") == NULL);\n      ASSERT (hash_delete (ht, \"b\"));\n      ASSERT (hash_delete (ht, \"c\"));\n\n      ASSERT (hash_rehash (ht, 47));\n      ASSERT (hash_rehash (ht, 467));\n\n      /* Free an empty table. */\n      hash_clear (ht);\n      hash_free (ht);\n\n      ht = hash_initialize (sz, NULL, hash_pjw, hash_compare_strings, NULL);\n      ASSERT (ht);\n\n      insert_new (ht, \"z\");\n      insert_new (ht, \"y\");\n      insert_new (ht, \"x\");\n      insert_new (ht, \"w\");\n      insert_new (ht, \"v\");\n      insert_new (ht, \"u\");\n\n      hash_clear (ht);\n      ASSERT (hash_get_n_entries (ht) == 0);\n      hash_free (ht);\n\n      /* Test pointer hashing.  */\n      ht = hash_initialize (sz, NULL, NULL, NULL, NULL);\n      ASSERT (ht);\n      {\n        char *str = strdup (\"a\");\n        ASSERT (str);\n        insert_new (ht, \"a\");\n        insert_new (ht, str);\n        ASSERT (hash_lookup (ht, str) == str);\n        free (str);\n      }\n      hash_free (ht);\n    }\n\n  hash_reset_tuning (&tuning);\n  tuning.shrink_threshold = 0.3;\n  tuning.shrink_factor = 0.707;\n  tuning.growth_threshold = 1.5;\n  tuning.growth_factor = 2.0;\n  tuning.is_n_buckets = true;\n  /* Invalid tuning.  */\n  ht = hash_initialize (4651, &tuning, hash_pjw, hash_compare_strings,\n                        hash_freer);\n  ASSERT (!ht);\n\n  /* Alternate tuning.  */\n  tuning.growth_threshold = 0.89;\n\n  /* Run with default tuning, then with custom tuning settings.  */\n  for (k = 0; k < 2; k++)\n    {\n      Hash_tuning const *tune = (k == 0 ? NULL : &tuning);\n      /* Now, each entry is malloc'd.  */\n      ht = hash_initialize (4651, tune, hash_pjw,\n                            hash_compare_strings, hash_freer);\n      ASSERT (ht);\n      for (i = 0; i < 10000; i++)\n        {\n          unsigned int op = rand () % 10;\n          switch (op)\n            {\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n              {\n                char buf[50];\n                char const *p = uinttostr (i, buf);\n                char *p_dup = strdup (p);\n                ASSERT (p_dup);\n                insert_new (ht, p_dup);\n              }\n              break;\n\n            case 6:\n              {\n                size_t n = hash_get_n_entries (ht);\n                ASSERT (hash_rehash (ht, n + rand () % 20));\n              }\n              break;\n\n            case 7:\n              {\n                size_t n = hash_get_n_entries (ht);\n                size_t delta = rand () % 20;\n                if (delta < n)\n                  ASSERT (hash_rehash (ht, n - delta));\n              }\n              break;\n\n            case 8:\n            case 9:\n              {\n                /* Delete a random entry.  */\n                size_t n = hash_get_n_entries (ht);\n                if (n)\n                  {\n                    size_t kk = rand () % n;\n                    void const *p;\n                    void *v;\n                    for (p = hash_get_first (ht); kk;\n                         --kk, p = hash_get_next (ht, p))\n                      {\n                        /* empty */\n                      }\n                    ASSERT (p);\n                    v = hash_delete (ht, p);\n                    ASSERT (v);\n                    free (v);\n                  }\n                break;\n              }\n            }\n          ASSERT (hash_table_ok (ht));\n        }\n\n      hash_free (ht);\n    }\n\n  return 0;\n}",
      "lines": 183,
      "depth": 20,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-i-ring.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "int\nmain (void)\n{\n  int o;\n  I_ring ir;\n  i_ring_init (&ir, -1);\n  o = i_ring_push (&ir, 1);\n  ASSERT (o == -1);\n  o = i_ring_push (&ir, 2);\n  ASSERT (o == -1);\n  o = i_ring_push (&ir, 3);\n  ASSERT (o == -1);\n  o = i_ring_push (&ir, 4);\n  ASSERT (o == -1);\n  o = i_ring_push (&ir, 5);\n  ASSERT (o == 1);\n  o = i_ring_push (&ir, 6);\n  ASSERT (o == 2);\n  o = i_ring_push (&ir, 7);\n  ASSERT (o == 3);\n\n  o = i_ring_pop (&ir);\n  ASSERT (o == 7);\n  o = i_ring_pop (&ir);\n  ASSERT (o == 6);\n  o = i_ring_pop (&ir);\n  ASSERT (o == 5);\n  o = i_ring_pop (&ir);\n  ASSERT (o == 4);\n  ASSERT (i_ring_empty (&ir));\n\n  o = i_ring_push (&ir, 8);\n  ASSERT (o == -1);\n  o = i_ring_pop (&ir);\n  ASSERT (o == 8);\n  ASSERT (i_ring_empty (&ir));\n\n  return 0;\n}",
      "lines": 39,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-iconv-h.c": {
    "main": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        26,
        1
      ],
      "content": "int\nmain ()\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 4,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-iconv.c": {
    "main": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        158,
        1
      ],
      "content": "int\nmain ()\n{\n#if HAVE_ICONV\n  /* Assume that iconv() supports at least the encodings ASCII, ISO-8859-1,\n     and UTF-8.  */\n  iconv_t cd_88591_to_utf8 = iconv_open (\"UTF-8\", \"ISO8859-1\");\n  iconv_t cd_utf8_to_88591 = iconv_open (\"ISO8859-1\", \"UTF-8\");\n\n#if defined __MVS__ && defined __IBMC__\n  /* String literals below are in ASCII, not EBCDIC.  */\n# pragma convert(\"ISO8859-1\")\n# define CONVERT_ENABLED\n#endif\n\n  ASSERT (cd_88591_to_utf8 != (iconv_t)(-1));\n  ASSERT (cd_utf8_to_88591 != (iconv_t)(-1));\n\n  /* Test conversion from ISO-8859-1 to UTF-8 with no errors.  */\n  {\n    static const char input[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    static const char expected[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    char buf[50];\n    const char *inptr = input;\n    size_t inbytesleft = strlen (input);\n    char *outptr = buf;\n    size_t outbytesleft = sizeof (buf);\n    size_t res = iconv (cd_88591_to_utf8,\n                        (ICONV_CONST char **) &inptr, &inbytesleft,\n                        &outptr, &outbytesleft);\n    ASSERT (res == 0 && inbytesleft == 0);\n    ASSERT (outptr == buf + strlen (expected));\n    ASSERT (memcmp (buf, expected, strlen (expected)) == 0);\n  }\n\n  /* Test conversion from ISO-8859-1 to UTF-8 with E2BIG.  */\n  {\n    static const char input[] = \"\\304\";\n    static char buf[2] = { (char)0xDE, (char)0xAD };\n    const char *inptr = input;\n    size_t inbytesleft = 1;\n    char *outptr = buf;\n    size_t outbytesleft = 1;\n    size_t res = iconv (cd_88591_to_utf8,\n                        (ICONV_CONST char **) &inptr, &inbytesleft,\n                        &outptr, &outbytesleft);\n    ASSERT (res == (size_t)(-1) && errno == E2BIG);\n    ASSERT (inbytesleft == 1);\n    ASSERT (outbytesleft == 1);\n    ASSERT ((unsigned char) buf[1] == 0xAD);\n    ASSERT ((unsigned char) buf[0] == 0xDE);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with no errors.  */\n  {\n    static const char input[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    static const char expected[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    char buf[50];\n    const char *inptr = input;\n    size_t inbytesleft = strlen (input);\n    char *outptr = buf;\n    size_t outbytesleft = sizeof (buf);\n    size_t res = iconv (cd_utf8_to_88591,\n                        (ICONV_CONST char **) &inptr, &inbytesleft,\n                        &outptr, &outbytesleft);\n    ASSERT (res == 0 && inbytesleft == 0);\n    ASSERT (outptr == buf + strlen (expected));\n    ASSERT (memcmp (buf, expected, strlen (expected)) == 0);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EILSEQ.  */\n  {\n    static const char input[] = \"\\342\\202\\254\"; /* EURO SIGN */\n    char buf[10];\n    const char *inptr = input;\n    size_t inbytesleft = strlen (input);\n    char *outptr = buf;\n    size_t outbytesleft = sizeof (buf);\n    size_t res = iconv (cd_utf8_to_88591,\n                        (ICONV_CONST char **) &inptr, &inbytesleft,\n                        &outptr, &outbytesleft);\n    if (res == (size_t)(-1))\n      {\n        ASSERT (errno == EILSEQ);\n        ASSERT (inbytesleft == strlen (input) && outptr == buf);\n      }\n    else\n      {\n        ASSERT (res == 1);\n        ASSERT (inbytesleft == 0);\n      }\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EINVAL.  */\n  {\n    static const char input[] = \"\\342\";\n    char buf[10];\n    const char *inptr = input;\n    size_t inbytesleft = 1;\n    char *outptr = buf;\n    size_t outbytesleft = sizeof (buf);\n    size_t res = iconv (cd_utf8_to_88591,\n                        (ICONV_CONST char **) &inptr, &inbytesleft,\n                        &outptr, &outbytesleft);\n    ASSERT (res == (size_t)(-1) && errno == EINVAL);\n    ASSERT (inbytesleft == 1 && outptr == buf);\n  }\n\n  iconv_close (cd_88591_to_utf8);\n  iconv_close (cd_utf8_to_88591);\n\n#ifdef CONVERT_ENABLED\n# pragma convert(pop)\n#endif\n\n#endif /* HAVE_ICONV */\n\n  return 0;\n}",
      "lines": 119,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-ignore-value.c": {
    "doChar": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static char\ndoChar (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "char"
      ]
    },
    "doInt": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "static int\ndoInt (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "doOff": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "content": "static off_t\ndoOff (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "off_t"
      ]
    },
    "doPtr": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "static void *\ndoPtr (void)\n{\n  return NULL;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ndoPtr (void)",
        "*"
      ]
    },
    "doStruct": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "content": "static struct s\ndoStruct (void)\n{\n  static struct s s1;\n  return s1;\n}",
      "lines": 6,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "struct s",
        "struct",
        "s"
      ]
    },
    "main": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* If this test can compile with -Werror and the same warnings as\n     the rest of the project, then we are properly silencing warnings\n     about ignored return values.  */\n  ignore_value (doChar ());\n  ignore_value (doInt ());\n  ignore_value (doOff ());\n  ignore_value (doPtr ());\n  ignore_value (doStruct ());\n  return 0;\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-intprops.c": {
    "main": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        390,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Use VERIFY for tests that must be integer constant expressions,\n     ASSERT otherwise.  */\n\n  /* TYPE_IS_INTEGER.  */\n  ASSERT (TYPE_IS_INTEGER (bool));\n  ASSERT (TYPE_IS_INTEGER (char));\n  ASSERT (TYPE_IS_INTEGER (signed char));\n  ASSERT (TYPE_IS_INTEGER (unsigned char));\n  ASSERT (TYPE_IS_INTEGER (short int));\n  ASSERT (TYPE_IS_INTEGER (unsigned short int));\n  ASSERT (TYPE_IS_INTEGER (int));\n  ASSERT (TYPE_IS_INTEGER (unsigned int));\n  ASSERT (TYPE_IS_INTEGER (long int));\n  ASSERT (TYPE_IS_INTEGER (unsigned long int));\n  ASSERT (TYPE_IS_INTEGER (intmax_t));\n  ASSERT (TYPE_IS_INTEGER (uintmax_t));\n  ASSERT (! TYPE_IS_INTEGER (float));\n  ASSERT (! TYPE_IS_INTEGER (double));\n  ASSERT (! TYPE_IS_INTEGER (long double));\n\n  /* TYPE_SIGNED.  */\n  /* VERIFY (! TYPE_SIGNED (bool)); // not guaranteed by gnulib substitute */\n  VERIFY (TYPE_SIGNED (signed char));\n  VERIFY (! TYPE_SIGNED (unsigned char));\n  VERIFY (TYPE_SIGNED (short int));\n  VERIFY (! TYPE_SIGNED (unsigned short int));\n  VERIFY (TYPE_SIGNED (int));\n  VERIFY (! TYPE_SIGNED (unsigned int));\n  VERIFY (TYPE_SIGNED (long int));\n  VERIFY (! TYPE_SIGNED (unsigned long int));\n  VERIFY (TYPE_SIGNED (intmax_t));\n  VERIFY (! TYPE_SIGNED (uintmax_t));\n  ASSERT (TYPE_SIGNED (float));\n  ASSERT (TYPE_SIGNED (double));\n  ASSERT (TYPE_SIGNED (long double));\n\n  /* Integer representation.  Check that it is two's complement.  */\n  VERIFY (INT_MIN + INT_MAX < 0);\n\n  /* TYPE_MINIMUM, TYPE_MAXIMUM.  */\n  VERIFY (TYPE_MINIMUM (char) == CHAR_MIN);\n  VERIFY (TYPE_MAXIMUM (char) == CHAR_MAX);\n  VERIFY (TYPE_MINIMUM (unsigned char) == 0);\n  VERIFY (TYPE_MAXIMUM (unsigned char) == UCHAR_MAX);\n  VERIFY (TYPE_MINIMUM (signed char) == SCHAR_MIN);\n  VERIFY (TYPE_MAXIMUM (signed char) == SCHAR_MAX);\n  VERIFY (TYPE_MINIMUM (short int) == SHRT_MIN);\n  VERIFY (TYPE_MAXIMUM (short int) == SHRT_MAX);\n  VERIFY (TYPE_MINIMUM (unsigned short int) == 0);\n  VERIFY (TYPE_MAXIMUM (unsigned short int) == USHRT_MAX);\n  VERIFY (TYPE_MINIMUM (int) == INT_MIN);\n  VERIFY (TYPE_MAXIMUM (int) == INT_MAX);\n  VERIFY (TYPE_MINIMUM (unsigned int) == 0);\n  VERIFY (TYPE_MAXIMUM (unsigned int) == UINT_MAX);\n  VERIFY (TYPE_MINIMUM (long int) == LONG_MIN);\n  VERIFY (TYPE_MAXIMUM (long int) == LONG_MAX);\n  VERIFY (TYPE_MINIMUM (unsigned long int) == 0);\n  VERIFY (TYPE_MAXIMUM (unsigned long int) == ULONG_MAX);\n  #ifdef LLONG_MAX\n   verify (TYPE_MINIMUM (long long int) == LLONG_MIN);\n   verify (TYPE_MAXIMUM (long long int) == LLONG_MAX);\n  #endif\n  VERIFY (TYPE_MINIMUM (intmax_t) == INTMAX_MIN);\n  VERIFY (TYPE_MAXIMUM (intmax_t) == INTMAX_MAX);\n  VERIFY (TYPE_MINIMUM (uintmax_t) == 0);\n  VERIFY (TYPE_MAXIMUM (uintmax_t) == UINTMAX_MAX);\n\n  /* TYPE_WIDTH.  */\n  #ifdef CHAR_WIDTH\n   verify (TYPE_WIDTH (char) == CHAR_WIDTH);\n   verify (TYPE_WIDTH (signed char) == SCHAR_WIDTH);\n   verify (TYPE_WIDTH (unsigned char) == UCHAR_WIDTH);\n   verify (TYPE_WIDTH (short int) == SHRT_WIDTH);\n   verify (TYPE_WIDTH (unsigned short int) == USHRT_WIDTH);\n   verify (TYPE_WIDTH (int) == INT_WIDTH);\n   verify (TYPE_WIDTH (unsigned int) == UINT_WIDTH);\n   verify (TYPE_WIDTH (long int) == LONG_WIDTH);\n   verify (TYPE_WIDTH (unsigned long int) == ULONG_WIDTH);\n   #ifdef LLONG_WIDTH\n    verify (TYPE_WIDTH (long long int) == LLONG_WIDTH);\n    verify (TYPE_WIDTH (unsigned long long int) == ULLONG_WIDTH);\n   #endif\n  #endif\n\n  /* INT_BITS_STRLEN_BOUND.  */\n  VERIFY (INT_BITS_STRLEN_BOUND (1) == 1);\n  VERIFY (INT_BITS_STRLEN_BOUND (2620) == 789);\n\n  /* INT_STRLEN_BOUND, INT_BUFSIZE_BOUND.  */\n  #ifdef INT32_MAX /* POSIX guarantees int32_t; this ports to non-POSIX.  */\n  VERIFY (INT_STRLEN_BOUND (int32_t) == sizeof (\"-2147483648\") - 1);\n  VERIFY (INT_BUFSIZE_BOUND (int32_t) == sizeof (\"-2147483648\"));\n  #endif\n  #ifdef INT64_MAX\n  VERIFY (INT_STRLEN_BOUND (int64_t) == sizeof (\"-9223372036854775808\") - 1);\n  VERIFY (INT_BUFSIZE_BOUND (int64_t) == sizeof (\"-9223372036854775808\"));\n  #endif\n\n  /* All the INT_<op>_RANGE_OVERFLOW tests are equally valid as\n     INT_<op>_OVERFLOW tests, so define macros to do both.  OP is the\n     operation, OPNAME its symbolic name, A and B its operands, T the\n     result type, V the overflow flag, and VRES the result if V and if\n     two's complement.  CHECK_BINOP is for most binary operatinos,\n     CHECK_SBINOP for binary +, -, * when the result type is signed,\n     and CHECK_UNOP for unary operations.  */\n  #define CHECK_BINOP(op, opname, a, b, t, v, vres)                       \\\n    VERIFY (INT_##opname##_RANGE_OVERFLOW (a, b, TYPE_MINIMUM (t),        \\\n                                           TYPE_MAXIMUM (t))              \\\n            == (v));                                                      \\\n    VERIFY (INT_##opname##_OVERFLOW (a, b) == (v))\n  #define CHECK_SBINOP(op, opname, a, b, t, v, vres)                      \\\n    CHECK_BINOP(op, opname, a, b, t, v, vres);                            \\\n    {                                                                     \\\n      t result;                                                           \\\n      ASSERT (INT_##opname##_WRAPV (a, b, &result) == (v));               \\\n      ASSERT (result == ((v) ? (vres) : ((a) op (b))));                   \\\n    }\n  #define CHECK_UNOP(op, opname, a, t, v)                                 \\\n    VERIFY (INT_##opname##_RANGE_OVERFLOW (a, TYPE_MINIMUM (t),           \\\n                                           TYPE_MAXIMUM (t))              \\\n            == (v));                                                      \\\n    VERIFY (INT_##opname##_OVERFLOW (a) == (v))\n\n  /* INT_<op>_RANGE_OVERFLOW, INT_<op>_OVERFLOW.  */\n  VERIFY (INT_ADD_RANGE_OVERFLOW (INT_MAX, 1, INT_MIN, INT_MAX));\n  VERIFY (INT_ADD_OVERFLOW (INT_MAX, 1));\n\n  CHECK_SBINOP (+, ADD, INT_MAX, 1, int, true, INT_MIN);\n  CHECK_SBINOP (+, ADD, INT_MAX, -1, int, false, INT_MAX - 1);\n  CHECK_SBINOP (+, ADD, INT_MIN, 1, int, false, INT_MIN + 1);\n  CHECK_SBINOP (+, ADD, INT_MIN, -1, int, true, INT_MAX);\n  CHECK_BINOP (+, ADD, UINT_MAX, 1u, unsigned int, true, 0u);\n  CHECK_BINOP (+, ADD, 0u, 1u, unsigned int, false, 1u);\n\n  CHECK_SBINOP (-, SUBTRACT, INT_MAX, 1, int, false, INT_MAX - 1);\n  CHECK_SBINOP (-, SUBTRACT, INT_MAX, -1, int, true, INT_MIN);\n  CHECK_SBINOP (-, SUBTRACT, INT_MIN, 1, int, true, INT_MAX);\n  CHECK_SBINOP (-, SUBTRACT, INT_MIN, -1, int, false, INT_MIN - -1);\n  CHECK_BINOP (-, SUBTRACT, UINT_MAX, 1u, unsigned int, false, UINT_MAX - 1u);\n  CHECK_BINOP (-, SUBTRACT, 0u, 1u, unsigned int, true, 0u - 1u);\n\n  CHECK_UNOP (-, NEGATE, INT_MIN, int, true);\n  CHECK_UNOP (-, NEGATE, 0, int, false);\n  CHECK_UNOP (-, NEGATE, INT_MAX, int, false);\n  CHECK_UNOP (-, NEGATE, 0u, unsigned int, false);\n  CHECK_UNOP (-, NEGATE, 1u, unsigned int, true);\n  CHECK_UNOP (-, NEGATE, UINT_MAX, unsigned int, true);\n\n  CHECK_SBINOP (*, MULTIPLY, INT_MAX, INT_MAX, int, true, 1);\n  CHECK_SBINOP (*, MULTIPLY, INT_MAX, INT_MIN, int, true, INT_MIN);\n  CHECK_SBINOP (*, MULTIPLY, INT_MIN, INT_MAX, int, true, INT_MIN);\n  CHECK_SBINOP (*, MULTIPLY, INT_MIN, INT_MIN, int, true, 0);\n  CHECK_SBINOP (*, MULTIPLY, -1, INT_MIN, int,\n                INT_NEGATE_OVERFLOW (INT_MIN), INT_MIN);\n  CHECK_SBINOP (*, MULTIPLY, LONG_MIN / INT_MAX, (long int) INT_MAX,\n                long int, false, LONG_MIN - LONG_MIN % INT_MAX);\n\n  CHECK_BINOP (/, DIVIDE, INT_MIN, -1, int,\n               INT_NEGATE_OVERFLOW (INT_MIN), INT_MIN);\n  CHECK_BINOP (/, DIVIDE, INT_MAX, 1, int, false, INT_MAX);\n  CHECK_BINOP (/, DIVIDE, (unsigned int) INT_MIN, -1u, unsigned int,\n               false, INT_MIN / -1u);\n\n  CHECK_BINOP (%, REMAINDER, INT_MIN, -1, int, INT_NEGATE_OVERFLOW (INT_MIN), 0);\n  CHECK_BINOP (%, REMAINDER, INT_MAX, 1, int, false, 0);\n  CHECK_BINOP (%, REMAINDER, (unsigned int) INT_MIN, -1u, unsigned int,\n               false, INT_MIN % -1u);\n\n  CHECK_BINOP (<<, LEFT_SHIFT, UINT_MAX, 1, unsigned int, true, UINT_MAX << 1);\n  CHECK_BINOP (<<, LEFT_SHIFT, UINT_MAX / 2 + 1, 1, unsigned int, true,\n               (UINT_MAX / 2 + 1) << 1);\n  CHECK_BINOP (<<, LEFT_SHIFT, UINT_MAX / 2, 1, unsigned int, false,\n               (UINT_MAX / 2) << 1);\n\n  /* INT_<op>_OVERFLOW and INT_<op>_WRAPV with mixed types.  */\n  #define CHECK_SUM(a, b, t, v, vres)                                     \\\n    CHECK_SUM1(a, b, t, v, vres);                                         \\\n    CHECK_SUM1(b, a, t, v, vres)\n  #define CHECK_SSUM(a, b, t, v, vres)                                    \\\n    CHECK_SSUM1(a, b, t, v, vres);                                        \\\n    CHECK_SSUM1(b, a, t, v, vres)\n  #define CHECK_SUM1(a, b, t, v, vres)                                    \\\n    VERIFY (INT_ADD_OVERFLOW (a, b) == (v))\n  #define CHECK_SSUM1(a, b, t, v, vres)                                   \\\n    CHECK_SUM1(a, b, t, v, vres);                                         \\\n    {                                                                     \\\n      t result;                                                           \\\n      ASSERT (INT_ADD_WRAPV (a, b, &result) == (v));                      \\\n      ASSERT (result == ((v) ? (vres) : ((a) + (b))));                    \\\n    }\n  CHECK_SSUM (-1, LONG_MIN, long int, true, LONG_MAX);\n  CHECK_SUM (-1, UINT_MAX, unsigned int, false, DONTCARE);\n  CHECK_SSUM (-1L, INT_MIN, long int, INT_MIN == LONG_MIN,\n              INT_MIN == LONG_MIN ? INT_MAX : DONTCARE);\n  CHECK_SUM (0u, -1, unsigned int, true, 0u + -1);\n  CHECK_SUM (0u, 0, unsigned int, false, DONTCARE);\n  CHECK_SUM (0u, 1, unsigned int, false, DONTCARE);\n  CHECK_SSUM (1, LONG_MAX, long int, true, LONG_MIN);\n  CHECK_SUM (1, UINT_MAX, unsigned int, true, 0u);\n  CHECK_SSUM (1L, INT_MAX, long int, INT_MAX == LONG_MAX,\n              INT_MAX == LONG_MAX ? INT_MIN : DONTCARE);\n  CHECK_SUM (1u, INT_MAX, unsigned int, INT_MAX == UINT_MAX, 1u + INT_MAX);\n  CHECK_SUM (1u, INT_MIN, unsigned int, true, 1u + INT_MIN);\n  {\n    long int result;\n    ASSERT (INT_ADD_WRAPV (1, INT_MAX, &result) == (INT_MAX == LONG_MAX));\n    ASSERT (INT_ADD_WRAPV (-1, INT_MIN, &result) == (INT_MIN == LONG_MIN));\n  }\n\n  #define CHECK_DIFFERENCE(a, b, t, v, vres)                              \\\n    VERIFY (INT_SUBTRACT_OVERFLOW (a, b) == (v))\n  #define CHECK_SDIFFERENCE(a, b, t, v, vres)                             \\\n    CHECK_DIFFERENCE(a, b, t, v, vres);                                   \\\n    {                                                                     \\\n      t result;                                                           \\\n      ASSERT (INT_SUBTRACT_WRAPV (a, b, &result) == (v));                 \\\n      ASSERT (result == ((v) ? (vres) : ((a) - (b))));                    \\\n    }\n  CHECK_DIFFERENCE (INT_MAX, 1u, unsigned int, UINT_MAX < INT_MAX - 1,\n                    INT_MAX - 1u);\n  CHECK_DIFFERENCE (UINT_MAX, 1, unsigned int, false, UINT_MAX - 1);\n  CHECK_DIFFERENCE (0u, -1, unsigned int, false, 0u - -1);\n  CHECK_DIFFERENCE (UINT_MAX, -1, unsigned int, true, UINT_MAX - -1);\n  CHECK_DIFFERENCE (INT_MIN, 1u, unsigned int, true, INT_MIN - 1u);\n  CHECK_DIFFERENCE (-1, 0u, unsigned int, true, -1 - 0u);\n  CHECK_SDIFFERENCE (-1, INT_MIN, int, false, -1 - INT_MIN);\n  CHECK_SDIFFERENCE (-1, INT_MAX, int, false, -1 - INT_MAX);\n  CHECK_SDIFFERENCE (0, INT_MIN, int, INT_MIN < -INT_MAX, INT_MIN);\n  CHECK_SDIFFERENCE (0, INT_MAX, int, false, 0 - INT_MAX);\n  {\n    long int result;\n    ASSERT (INT_SUBTRACT_WRAPV (INT_MAX, -1, &result) == (INT_MAX == LONG_MAX));\n    ASSERT (INT_SUBTRACT_WRAPV (INT_MIN, 1, &result) == (INT_MAX == LONG_MAX));\n  }\n\n  #define CHECK_PRODUCT(a, b, t, v, vres)                                 \\\n    CHECK_PRODUCT1(a, b, t, v, vres);                                     \\\n    CHECK_PRODUCT1(b, a, t, v, vres)\n  #define CHECK_SPRODUCT(a, b, t, v, vres)                                \\\n    CHECK_SPRODUCT1(a, b, t, v, vres);                                    \\\n    CHECK_SPRODUCT1(b, a, t, v, vres)\n  #define CHECK_PRODUCT1(a, b, t, v, vres)                                \\\n    VERIFY (INT_MULTIPLY_OVERFLOW (a, b) == (v))\n  #define CHECK_SPRODUCT1(a, b, t, v, vres)                               \\\n    CHECK_PRODUCT1(a, b, t, v, vres);                                     \\\n    {                                                                     \\\n      t result;                                                           \\\n      ASSERT (INT_MULTIPLY_WRAPV (a, b, &result) == (v));                 \\\n      ASSERT (result == ((v) ? (vres) : ((a) * (b))));                    \\\n    }\n  CHECK_PRODUCT (-1, 1u, unsigned int, true, -1 * 1u);\n  CHECK_SPRODUCT (-1, INT_MIN, int, INT_NEGATE_OVERFLOW (INT_MIN), INT_MIN);\n  CHECK_PRODUCT (-1, UINT_MAX, unsigned int, true, -1 * UINT_MAX);\n  CHECK_SPRODUCT (-32768, LONG_MAX / -32768 - 1, long int, true, LONG_MIN);\n  CHECK_SPRODUCT (-12345, LONG_MAX / -12345, long int, false, DONTCARE);\n  CHECK_SPRODUCT (0, -1, int, false, DONTCARE);\n  CHECK_SPRODUCT (0, 0, int, false, DONTCARE);\n  CHECK_PRODUCT (0, 0u, unsigned int, false, DONTCARE);\n  CHECK_SPRODUCT (0, 1, int, false, DONTCARE);\n  CHECK_SPRODUCT (0, INT_MAX, int, false, DONTCARE);\n  CHECK_SPRODUCT (0, INT_MIN, int, false, DONTCARE);\n  CHECK_PRODUCT (0, UINT_MAX, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, -1, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, 0, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, 0u, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, 1, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, INT_MAX, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, INT_MIN, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (0u, UINT_MAX, unsigned int, false, DONTCARE);\n  CHECK_SPRODUCT (1, INT_MAX, int, false, DONTCARE);\n  CHECK_SPRODUCT (1, INT_MIN, int, false, DONTCARE);\n  CHECK_PRODUCT (1, UINT_MAX, unsigned int, false, DONTCARE);\n  CHECK_PRODUCT (1u, INT_MIN, unsigned int, true, 1u * INT_MIN);\n  CHECK_PRODUCT (1u, INT_MAX, unsigned int, UINT_MAX < INT_MAX, 1u * INT_MAX);\n  CHECK_PRODUCT (INT_MAX, UINT_MAX, unsigned int, true, INT_MAX * UINT_MAX);\n  CHECK_PRODUCT (INT_MAX, ULONG_MAX, unsigned long int, true,\n                 INT_MAX * ULONG_MAX);\n  CHECK_SPRODUCT (INT_MIN, LONG_MAX / INT_MIN - 1, long int, true, LONG_MIN);\n  CHECK_SPRODUCT (INT_MIN, LONG_MAX / INT_MIN, long int, false, DONTCARE);\n  CHECK_PRODUCT (INT_MIN, UINT_MAX, unsigned int, true, INT_MIN * UINT_MAX);\n  CHECK_PRODUCT (INT_MIN, ULONG_MAX, unsigned long int, true,\n                 INT_MIN * ULONG_MAX);\n  {\n    long int result;\n    ASSERT (INT_MULTIPLY_WRAPV (INT_MAX, INT_MAX, &result)\n            == (LONG_MAX / INT_MAX < INT_MAX));\n    ASSERT (INT_MULTIPLY_WRAPV (INT_MAX, INT_MAX, &result)\n            || result == INT_MAX * (long int) INT_MAX);\n    ASSERT (INT_MULTIPLY_WRAPV (INT_MIN, INT_MIN, &result)\n            || result == INT_MIN * (long int) INT_MIN);\n  }\n\n# ifdef LLONG_MAX\n  {\n    long long int result;\n    ASSERT (INT_MULTIPLY_WRAPV (LONG_MAX, LONG_MAX, &result)\n            == (LLONG_MAX / LONG_MAX < LONG_MAX));\n    ASSERT (INT_MULTIPLY_WRAPV (LONG_MAX, LONG_MAX, &result)\n            || result == LONG_MAX * (long long int) LONG_MAX);\n    ASSERT (INT_MULTIPLY_WRAPV (LONG_MIN, LONG_MIN, &result)\n            || result == LONG_MIN * (long long int) LONG_MIN);\n  }\n# endif\n\n  #define CHECK_QUOTIENT(a, b, v) VERIFY (INT_DIVIDE_OVERFLOW (a, b) == (v))\n\n  CHECK_QUOTIENT (INT_MIN, -1L, INT_MIN == LONG_MIN);\n  CHECK_QUOTIENT (INT_MIN, UINT_MAX, false);\n  CHECK_QUOTIENT (INTMAX_MIN, UINTMAX_MAX, false);\n  CHECK_QUOTIENT (INTMAX_MIN, UINT_MAX, false);\n  CHECK_QUOTIENT (-11, 10u, true);\n  CHECK_QUOTIENT (-10, 10u, true);\n  CHECK_QUOTIENT (-9, 10u, false);\n  CHECK_QUOTIENT (11u, -10, true);\n  CHECK_QUOTIENT (10u, -10, true);\n  CHECK_QUOTIENT (9u, -10, false);\n\n  #define CHECK_REMAINDER(a, b, v) VERIFY (INT_REMAINDER_OVERFLOW (a, b) == (v))\n\n  CHECK_REMAINDER (INT_MIN, -1L, INT_MIN == LONG_MIN);\n  CHECK_REMAINDER (-1, UINT_MAX, true);\n  CHECK_REMAINDER ((intmax_t) -1, UINTMAX_MAX, true);\n  CHECK_REMAINDER (INTMAX_MIN, UINT_MAX,\n                   (INTMAX_MAX < UINT_MAX\n                    && - (unsigned int) INTMAX_MIN % UINT_MAX != 0));\n  CHECK_REMAINDER (INT_MIN, ULONG_MAX, INT_MIN % ULONG_MAX != 1);\n  CHECK_REMAINDER (1u, -1, false);\n  CHECK_REMAINDER (37*39u, -39, false);\n  CHECK_REMAINDER (37*39u + 1, -39, true);\n  CHECK_REMAINDER (37*39u - 1, -39, true);\n  CHECK_REMAINDER (LONG_MAX, -INT_MAX, false);\n\n  return 0;\n}",
      "lines": 337,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-inttostr.c": {
    "main": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "content": "int\nmain (void)\n{\n  size_t b_size = 2;\n  char *b = malloc (b_size);\n  ASSERT (b);\n\n  /* Ideally we would rely on the snprintf-posix module, in which case\n     this guard would not be required, but due to limitations in gnulib's\n     implementation (see modules/snprintf-posix), we cannot.  */\n  if (snprintf (b, b_size, \"%ju\", (uintmax_t) 3) == 1\n      && b[0] == '3' && b[1] == '\\0')\n    {\n      CK (int,          inttostr);\n      CK (unsigned int, uinttostr);\n      CK (off_t,        offtostr);\n      CK (uintmax_t,    umaxtostr);\n      CK (intmax_t,     imaxtostr);\n      free (b);\n      return 0;\n    }\n\n  /* snprintf doesn't accept %ju; skip this test.  */\n  free (b);\n  return 77;\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-inttypes.c": {
    "main": {
      "start_point": [
        113,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-isatty.c": {
    "main": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "int\nmain (void)\n{\n  const char *file = \"test-isatty.txt\";\n\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    errno = 0;\n    ASSERT (isatty (-1) == 0);\n    ASSERT (errno == EBADF\n            || errno == 0 /* seen on IRIX 6.5, Solaris 10 */\n           );\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (isatty (99) == 0);\n    ASSERT (errno == EBADF\n            || errno == 0 /* seen on IRIX 6.5, Solaris 10 */\n           );\n  }\n\n  /* Test behaviour for regular files.  */\n  {\n    int fd;\n\n    fd = open (file, O_WRONLY|O_CREAT|O_TRUNC, 0644);\n    ASSERT (0 <= fd);\n    ASSERT (write (fd, \"hello\", 5) == 5);\n    ASSERT (close (fd) == 0);\n\n    fd = open (file, O_RDONLY);\n    ASSERT (0 <= fd);\n    ASSERT (! isatty (fd));\n    ASSERT (close (fd) == 0);\n  }\n\n  /* Test behaviour for pipes.  */\n  {\n    int fd[2];\n\n    ASSERT (pipe (fd) == 0);\n    ASSERT (! isatty (fd[0]));\n    ASSERT (! isatty (fd[1]));\n    ASSERT (close (fd[0]) == 0);\n    ASSERT (close (fd[1]) == 0);\n  }\n\n  /* Test behaviour for /dev/null.  */\n  {\n    int fd;\n\n    fd = open (DEV_NULL, O_RDONLY);\n    ASSERT (0 <= fd);\n    ASSERT (! isatty (fd));\n    ASSERT (close (fd) == 0);\n  }\n\n  ASSERT (unlink (file) == 0);\n\n  return 0;\n}",
      "lines": 62,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-isblank.c": {
    "main": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  unsigned int c;\n\n  /* Verify the property in the \"C\" locale.\n     POSIX specifies in\n       <http://www.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html>\n     that\n       - in all locales, the blank characters include the <space> and <tab>\n         characters,\n       - in the \"POSIX\" locale (which is usually the same as the \"C\" locale),\n         the blank characters include only the ASCII <space> and <tab>\n         characters.  */\n  for (c = 0; c <= UCHAR_MAX; c++)\n    ASSERT (!isblank (c) == !(c == ' ' || c == '\\t'));\n  ASSERT (!isblank (EOF));\n\n  return 0;\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-iswblank.c": {
    "main": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        34,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Check that the function exist as a function or as a macro.  */\n  (void) iswblank (0);\n  /* Check that the isw* functions map WEOF to 0.  */\n  ASSERT (!iswblank (e));\n\n  return 0;\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-langinfo.c": {
    "main": {
      "start_point": [
        87,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-limits-h.c": {
    "main": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-locale.c": {
    "main": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "int\nmain ()\n{\n#if HAVE_NEWLOCALE\n  /* Check that the locale_t type and the LC_GLOBAL_LOCALE macro are defined.  */\n  locale_t b = LC_GLOBAL_LOCALE;\n  (void) b;\n#endif\n\n  /* Check that 'struct lconv' has the ISO C and POSIX specified members.  */\n  ls += sizeof (*l.decimal_point);\n  ls += sizeof (*l.thousands_sep);\n  ls += sizeof (*l.grouping);\n  ls += sizeof (*l.mon_decimal_point);\n  ls += sizeof (*l.mon_thousands_sep);\n  ls += sizeof (*l.mon_grouping);\n  ls += sizeof (*l.positive_sign);\n  ls += sizeof (*l.negative_sign);\n  ls += sizeof (*l.currency_symbol);\n  ls += sizeof (l.frac_digits);\n  ls += sizeof (l.p_cs_precedes);\n  ls += sizeof (l.p_sign_posn);\n  ls += sizeof (l.p_sep_by_space);\n  ls += sizeof (l.n_cs_precedes);\n  ls += sizeof (l.n_sign_posn);\n  ls += sizeof (l.n_sep_by_space);\n  ls += sizeof (*l.int_curr_symbol);\n  ls += sizeof (l.int_frac_digits);\n  ls += sizeof (l.int_p_cs_precedes);\n  ls += sizeof (l.int_p_sign_posn);\n  ls += sizeof (l.int_p_sep_by_space);\n  ls += sizeof (l.int_n_cs_precedes);\n  ls += sizeof (l.int_n_sign_posn);\n  ls += sizeof (l.int_n_sep_by_space);\n\n  return 0;\n}",
      "lines": 37,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-localeconv.c": {
    "main": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Test localeconv() result in the \"C\" locale.  */\n  {\n    struct lconv *l = localeconv ();\n\n    ASSERT (STREQ (l->decimal_point, \".\"));\n    ASSERT (STREQ (l->thousands_sep, \"\"));\n#if !((defined __FreeBSD__ || defined __DragonFly__) || defined __sun)\n    ASSERT (STREQ (l->grouping, \"\"));\n#endif\n\n    ASSERT (STREQ (l->mon_decimal_point, \"\"));\n    ASSERT (STREQ (l->mon_thousands_sep, \"\"));\n#if !((defined __FreeBSD__ || defined __DragonFly__) || defined __sun)\n    ASSERT (STREQ (l->mon_grouping, \"\"));\n#endif\n    ASSERT (STREQ (l->positive_sign, \"\"));\n    ASSERT (STREQ (l->negative_sign, \"\"));\n\n    ASSERT (STREQ (l->currency_symbol, \"\"));\n    ASSERT (l->frac_digits == CHAR_MAX);\n    ASSERT (l->p_cs_precedes == CHAR_MAX);\n    ASSERT (l->p_sign_posn == CHAR_MAX);\n    ASSERT (l->p_sep_by_space == CHAR_MAX);\n    ASSERT (l->n_cs_precedes == CHAR_MAX);\n    ASSERT (l->n_sign_posn == CHAR_MAX);\n    ASSERT (l->n_sep_by_space == CHAR_MAX);\n\n    ASSERT (STREQ (l->int_curr_symbol, \"\"));\n    ASSERT (l->int_frac_digits == CHAR_MAX);\n    ASSERT (l->int_p_cs_precedes == CHAR_MAX);\n    ASSERT (l->int_p_sign_posn == CHAR_MAX);\n    ASSERT (l->int_p_sep_by_space == CHAR_MAX);\n    ASSERT (l->int_n_cs_precedes == CHAR_MAX);\n    ASSERT (l->int_n_sign_posn == CHAR_MAX);\n    ASSERT (l->int_n_sep_by_space == CHAR_MAX);\n  }\n\n  return 0;\n}",
      "lines": 42,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-localename.c": {
    "test_locale_name": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        225,
        1
      ],
      "content": "static void\ntest_locale_name (void)\n{\n  const char *name;\n\n  /* Check that gl_locale_name returns non-NULL.  */\n  ASSERT (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\") != NULL);\n\n  /* Get into a defined state,  */\n  setlocale (LC_ALL, \"en_US.UTF-8\");\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  uselocale (LC_GLOBAL_LOCALE);\n#endif\n\n  /* Check that when all environment variables are unset,\n     gl_locale_name returns the default locale.  */\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LC_NUMERIC\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"),\n                  gl_locale_name_default ()) == 0);\n  ASSERT (strcmp (gl_locale_name (LC_NUMERIC, \"LC_NUMERIC\"),\n                  gl_locale_name_default ()) == 0);\n\n  /* Check that an empty environment variable is treated like an unset\n     environment variable.  */\n\n  setenv (\"LC_ALL\", \"\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"),\n                  gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"\", 1);\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"),\n                  gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"\", 1);\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"),\n                  gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"\", 1);\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"),\n                  gl_locale_name_default ()) == 0);\n\n  /* Check that LC_ALL overrides the others, and LANG is overridden by the\n     others.  */\n\n  setenv (\"LC_ALL\", \"C\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"), \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"C\", 1);\n  setenv (\"LC_MESSAGES\", \"C\", 1);\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"), \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"C\", 1);\n  setlocale (LC_ALL, \"\");\n  ASSERT (strcmp (gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\"), \"C\") == 0);\n\n  /* Check mixed situations.  */\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  setenv (\"LANG\", \"de_DE.UTF-8\", 1);\n  if (setlocale (LC_ALL, \"\") != NULL)\n    {\n      name = gl_locale_name (LC_CTYPE, \"LC_CTYPE\");\n      ASSERT (strcmp (name, \"de_DE.UTF-8\") == 0);\n      name = gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\");\n      ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n    }\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  unsetenv (\"LANG\");\n  if (setlocale (LC_ALL, \"\") != NULL)\n    {\n      name = gl_locale_name (LC_CTYPE, \"LC_CTYPE\");\n      ASSERT (strcmp (name, gl_locale_name_default ()) == 0);\n      name = gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\");\n      ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n    }\n\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  /* Check that gl_locale_name considers the thread locale.  */\n  {\n    locale_t locale = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n    if (locale != NULL)\n      {\n        uselocale (locale);\n        name = gl_locale_name (LC_CTYPE, \"LC_CTYPE\");\n        ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n        name = gl_locale_name (LC_MESSAGES, \"LC_MESSAGES\");\n        ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n        uselocale (LC_GLOBAL_LOCALE);\n        freelocale (locale);\n      }\n  }\n\n  /* Check that gl_locale_name distinguishes different categories of the\n     thread locale, and that the name is the right one for each.  */\n  {\n    unsigned int i;\n\n    for (i = 0; i < SIZEOF (categories); i++)\n      {\n        int category_mask = categories[i].mask;\n        locale_t loc = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n        if (loc != NULL)\n          {\n            locale_t locale = newlocale (category_mask, \"de_DE.UTF-8\", loc);\n            if (locale == NULL)\n              freelocale (loc);\n            else\n              {\n                unsigned int j;\n\n                uselocale (locale);\n                for (j = 0; j < SIZEOF (categories); j++)\n                  {\n                    const char *name_j =\n                      gl_locale_name (categories[j].cat, categories[j].string);\n                    if (j == i)\n                      ASSERT (strcmp (name_j, \"de_DE.UTF-8\") == 0);\n                    else\n                      ASSERT (strcmp (name_j, \"fr_FR.UTF-8\") == 0);\n                  }\n                uselocale (LC_GLOBAL_LOCALE);\n                freelocale (locale);\n              }\n          }\n      }\n  }\n#endif\n}",
      "lines": 164,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_locale_name_thread": {
      "start_point": [
        228,
        0
      ],
      "end_point": [
        479,
        1
      ],
      "content": "static void\ntest_locale_name_thread (void)\n{\n  /* Get into a defined state,  */\n  setlocale (LC_ALL, \"en_US.UTF-8\");\n\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  /* Check that gl_locale_name_thread returns NULL when no thread locale is\n     set.  */\n  uselocale (LC_GLOBAL_LOCALE);\n  ASSERT (gl_locale_name_thread (LC_CTYPE, \"LC_CTYPE\") == NULL);\n  ASSERT (gl_locale_name_thread (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n\n  /* Check that gl_locale_name_thread considers the thread locale.  */\n  {\n    locale_t locale = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n    if (locale != NULL)\n      {\n        const char *name;\n\n        uselocale (locale);\n        name = gl_locale_name_thread (LC_CTYPE, \"LC_CTYPE\");\n        ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n        name = gl_locale_name_thread (LC_MESSAGES, \"LC_MESSAGES\");\n        ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n        uselocale (LC_GLOBAL_LOCALE);\n        freelocale (locale);\n      }\n  }\n\n  /* Check that gl_locale_name_thread distinguishes different categories of the\n     thread locale, and that the name is the right one for each.  */\n  {\n    unsigned int i;\n\n    for (i = 0; i < SIZEOF (categories); i++)\n      {\n        int category_mask = categories[i].mask;\n        locale_t loc = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n        if (loc != NULL)\n          {\n            locale_t locale = newlocale (category_mask, \"de_DE.UTF-8\", loc);\n            if (locale == NULL)\n              freelocale (loc);\n            else\n              {\n                unsigned int j;\n\n                uselocale (locale);\n                for (j = 0; j < SIZEOF (categories); j++)\n                  {\n                    const char *name_j =\n                      gl_locale_name_thread (categories[j].cat,\n                                             categories[j].string);\n                    if (j == i)\n                      ASSERT (strcmp (name_j, \"de_DE.UTF-8\") == 0);\n                    else\n                      ASSERT (strcmp (name_j, \"fr_FR.UTF-8\") == 0);\n                  }\n                uselocale (LC_GLOBAL_LOCALE);\n                freelocale (locale);\n              }\n          }\n      }\n  }\n\n  /* Check that gl_locale_name_thread returns a string that is allocated with\n     indefinite extent.  */\n  {\n    /* Try many locale names in turn, in order to defeat possible caches.  */\n    static const char * const choices[] =\n      {\n        \"C\",\n        \"POSIX\",\n        \"af_ZA\",\n        \"af_ZA.UTF-8\",\n        \"am_ET\",\n        \"am_ET.UTF-8\",\n        \"be_BY\",\n        \"be_BY.UTF-8\",\n        \"bg_BG\",\n        \"bg_BG.UTF-8\",\n        \"ca_ES\",\n        \"ca_ES.UTF-8\",\n        \"cs_CZ\",\n        \"cs_CZ.UTF-8\",\n        \"da_DK\",\n        \"da_DK.UTF-8\",\n        \"de_AT\",\n        \"de_AT.UTF-8\",\n        \"de_CH\",\n        \"de_CH.UTF-8\",\n        \"de_DE\",\n        \"de_DE.UTF-8\",\n        \"el_GR\",\n        \"el_GR.UTF-8\",\n        \"en_AU\",\n        \"en_AU.UTF-8\",\n        \"en_CA\",\n        \"en_CA.UTF-8\",\n        \"en_GB\",\n        \"en_GB.UTF-8\",\n        \"en_IE\",\n        \"en_IE.UTF-8\",\n        \"en_NZ\",\n        \"en_NZ.UTF-8\",\n        \"en_US\",\n        \"en_US.UTF-8\",\n        \"es_ES\",\n        \"es_ES.UTF-8\",\n        \"et_EE\",\n        \"et_EE.UTF-8\",\n        \"eu_ES\",\n        \"eu_ES.UTF-8\",\n        \"fi_FI\",\n        \"fi_FI.UTF-8\",\n        \"fr_BE\",\n        \"fr_BE.UTF-8\",\n        \"fr_CA\",\n        \"fr_CA.UTF-8\",\n        \"fr_CH\",\n        \"fr_CH.UTF-8\",\n        \"fr_FR\",\n        \"fr_FR.UTF-8\",\n        \"he_IL\",\n        \"he_IL.UTF-8\",\n        \"hr_HR\",\n        \"hr_HR.UTF-8\",\n        \"hu_HU\",\n        \"hu_HU.UTF-8\",\n        \"hy_AM\",\n        \"is_IS\",\n        \"is_IS.UTF-8\",\n        \"it_CH\",\n        \"it_CH.UTF-8\",\n        \"it_IT\",\n        \"it_IT.UTF-8\",\n        \"ja_JP.UTF-8\",\n        \"kk_KZ\",\n        \"kk_KZ.UTF-8\",\n        \"ko_KR.UTF-8\",\n        \"lt_LT\",\n        \"lt_LT.UTF-8\",\n        \"nl_BE\",\n        \"nl_BE.UTF-8\",\n        \"nl_NL\",\n        \"nl_NL.UTF-8\",\n        \"no_NO\",\n        \"no_NO.UTF-8\",\n        \"pl_PL\",\n        \"pl_PL.UTF-8\",\n        \"pt_BR\",\n        \"pt_BR.UTF-8\",\n        \"pt_PT\",\n        \"pt_PT.UTF-8\",\n        \"ro_RO\",\n        \"ro_RO.UTF-8\",\n        \"ru_RU\",\n        \"ru_RU.UTF-8\",\n        \"sk_SK\",\n        \"sk_SK.UTF-8\",\n        \"sl_SI\",\n        \"sl_SI.UTF-8\",\n        \"sv_SE\",\n        \"sv_SE.UTF-8\",\n        \"tr_TR\",\n        \"tr_TR.UTF-8\",\n        \"uk_UA\",\n        \"uk_UA.UTF-8\",\n        \"zh_CN\",\n        \"zh_CN.UTF-8\",\n        \"zh_HK\",\n        \"zh_HK.UTF-8\",\n        \"zh_TW\",\n        \"zh_TW.UTF-8\"\n      };\n    /* Remember which locales are available.  */\n    unsigned char /* bool */ available[SIZEOF (choices)];\n    /* Array of remembered results of gl_locale_name_thread.  */\n    const char *unsaved_names[SIZEOF (choices)][SIZEOF (categories)];\n    /* Array of remembered results of gl_locale_name_thread, stored in safe\n       memory.  */\n    char *saved_names[SIZEOF (choices)][SIZEOF (categories)];\n    unsigned int j;\n\n    for (j = 0; j < SIZEOF (choices); j++)\n      {\n        locale_t locale = newlocale (LC_ALL_MASK, choices[j], NULL);\n        available[j] = (locale != NULL);\n        if (locale != NULL)\n          {\n            unsigned int i;\n\n            uselocale (locale);\n            for (i = 0; i < SIZEOF (categories); i++)\n              {\n                unsaved_names[j][i] = gl_locale_name_thread (categories[i].cat, categories[i].string);\n                saved_names[j][i] = strdup (unsaved_names[j][i]);\n              }\n            uselocale (LC_GLOBAL_LOCALE);\n            freelocale (locale);\n          }\n      }\n    /* Verify the unsaved_names are still valid.  */\n    for (j = 0; j < SIZEOF (choices); j++)\n      if (available[j])\n        {\n          unsigned int i;\n\n          for (i = 0; i < SIZEOF (categories); i++)\n            ASSERT (strcmp (unsaved_names[j][i], saved_names[j][i]) == 0);\n        }\n    /* Allocate many locales, without freeing them.  This is an attempt at\n       overwriting as much of the previously allocated memory as possible.  */\n    for (j = SIZEOF (choices); j > 0; )\n      {\n        j--;\n        if (available[j])\n          {\n            locale_t locale = newlocale (LC_ALL_MASK, choices[j], NULL);\n            unsigned int i;\n\n            ASSERT (locale != NULL);\n            uselocale (locale);\n            for (i = 0; i < SIZEOF (categories); i++)\n              {\n                const char *name = gl_locale_name_thread (categories[i].cat, categories[i].string);\n                ASSERT (strcmp (unsaved_names[j][i], name) == 0);\n              }\n            uselocale (LC_GLOBAL_LOCALE);\n            freelocale (locale);\n          }\n      }\n    /* Verify the unsaved_names are still valid.  */\n    for (j = 0; j < SIZEOF (choices); j++)\n      if (available[j])\n        {\n          unsigned int i;\n\n          for (i = 0; i < SIZEOF (categories); i++)\n            {\n              ASSERT (strcmp (unsaved_names[j][i], saved_names[j][i]) == 0);\n              free (saved_names[j][i]);\n            }\n        }\n  }\n#else\n  /* Check that gl_locale_name_thread always returns NULL.  */\n  ASSERT (gl_locale_name_thread (LC_CTYPE, \"LC_CTYPE\") == NULL);\n  ASSERT (gl_locale_name_thread (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n#endif\n}",
      "lines": 252,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_locale_name_posix": {
      "start_point": [
        482,
        0
      ],
      "end_point": [
        613,
        1
      ],
      "content": "static void\ntest_locale_name_posix (void)\n{\n  const char *name;\n\n  /* Get into a defined state,  */\n  setlocale (LC_ALL, \"en_US.UTF-8\");\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  uselocale (LC_GLOBAL_LOCALE);\n#endif\n\n  /* Check that when all environment variables are unset,\n     gl_locale_name_posix returns either NULL or the default locale.  */\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LC_NUMERIC\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n  name = gl_locale_name_posix (LC_NUMERIC, \"LC_NUMERIC\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n\n  /* Check that an empty environment variable is treated like an unset\n     environment variable.  */\n\n  setenv (\"LC_ALL\", \"\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"\", 1);\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"\", 1);\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"\", 1);\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n\n  /* Check that LC_ALL overrides the others, and LANG is overridden by the\n     others.  */\n\n  setenv (\"LC_ALL\", \"C\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"C\", 1);\n  setenv (\"LC_MESSAGES\", \"C\", 1);\n  unsetenv (\"LANG\");\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"C\", 1);\n  setlocale (LC_ALL, \"\");\n  name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  /* Check mixed situations.  */\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  setenv (\"LANG\", \"de_DE.UTF-8\", 1);\n  if (setlocale (LC_ALL, \"\") != NULL)\n    {\n      name = gl_locale_name_posix (LC_CTYPE, \"LC_CTYPE\");\n      ASSERT (strcmp (name, \"de_DE.UTF-8\") == 0);\n      name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n      ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n    }\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  unsetenv (\"LANG\");\n  if (setlocale (LC_ALL, \"\") != NULL)\n    {\n      name = gl_locale_name_posix (LC_CTYPE, \"LC_CTYPE\");\n      ASSERT (name == NULL || strcmp (name, gl_locale_name_default ()) == 0);\n      name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n      ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n    }\n\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  /* Check that gl_locale_name_posix ignores the thread locale.  */\n  {\n    locale_t locale = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n    if (locale != NULL)\n      {\n        unsetenv (\"LC_ALL\");\n        unsetenv (\"LC_CTYPE\");\n        unsetenv (\"LC_MESSAGES\");\n        setenv (\"LANG\", \"C\", 1);\n        setlocale (LC_ALL, \"\");\n        uselocale (locale);\n        name = gl_locale_name_posix (LC_MESSAGES, \"LC_MESSAGES\");\n        ASSERT (strcmp (name, \"C\") == 0);\n        uselocale (LC_GLOBAL_LOCALE);\n        freelocale (locale);\n      }\n  }\n#endif\n}",
      "lines": 132,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_locale_name_environ": {
      "start_point": [
        616,
        0
      ],
      "end_point": [
        727,
        1
      ],
      "content": "static void\ntest_locale_name_environ (void)\n{\n  const char *name;\n\n  /* Get into a defined state,  */\n  setlocale (LC_ALL, \"en_US.UTF-8\");\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  uselocale (LC_GLOBAL_LOCALE);\n#endif\n\n  /* Check that when all environment variables are unset,\n     gl_locale_name_environ returns NULL.  */\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LC_NUMERIC\");\n  unsetenv (\"LANG\");\n  ASSERT (gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n  ASSERT (gl_locale_name_environ (LC_NUMERIC, \"LC_NUMERIC\") == NULL);\n\n  /* Check that an empty environment variable is treated like an unset\n     environment variable.  */\n\n  setenv (\"LC_ALL\", \"\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  ASSERT (gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"\", 1);\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  ASSERT (gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"\", 1);\n  unsetenv (\"LANG\");\n  ASSERT (gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"\", 1);\n  ASSERT (gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\") == NULL);\n\n  /* Check that LC_ALL overrides the others, and LANG is overridden by the\n     others.  */\n\n  setenv (\"LC_ALL\", \"C\", 1);\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  unsetenv (\"LANG\");\n  name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  setenv (\"LC_CTYPE\", \"C\", 1);\n  setenv (\"LC_MESSAGES\", \"C\", 1);\n  unsetenv (\"LANG\");\n  name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  unsetenv (\"LC_MESSAGES\");\n  setenv (\"LANG\", \"C\", 1);\n  name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"C\") == 0);\n\n  /* Check mixed situations.  */\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  setenv (\"LANG\", \"de_DE.UTF-8\", 1);\n  name = gl_locale_name_environ (LC_CTYPE, \"LC_CTYPE\");\n  ASSERT (strcmp (name, \"de_DE.UTF-8\") == 0);\n  name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n\n  unsetenv (\"LC_ALL\");\n  unsetenv (\"LC_CTYPE\");\n  setenv (\"LC_MESSAGES\", \"fr_FR.UTF-8\", 1);\n  unsetenv (\"LANG\");\n  name = gl_locale_name_environ (LC_CTYPE, \"LC_CTYPE\");\n  ASSERT (name == NULL);\n  name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n  ASSERT (strcmp (name, \"fr_FR.UTF-8\") == 0);\n\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  /* Check that gl_locale_name_environ ignores the thread locale.  */\n  {\n    locale_t locale = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n    if (locale != NULL)\n      {\n        unsetenv (\"LC_ALL\");\n        unsetenv (\"LC_CTYPE\");\n        unsetenv (\"LC_MESSAGES\");\n        setenv (\"LANG\", \"C\", 1);\n        setlocale (LC_ALL, \"\");\n        uselocale (locale);\n        name = gl_locale_name_environ (LC_MESSAGES, \"LC_MESSAGES\");\n        ASSERT (strcmp (name, \"C\") == 0);\n        uselocale (LC_GLOBAL_LOCALE);\n        freelocale (locale);\n      }\n  }\n#endif\n}",
      "lines": 112,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_locale_name_default": {
      "start_point": [
        730,
        0
      ],
      "end_point": [
        756,
        1
      ],
      "content": "static void\ntest_locale_name_default (void)\n{\n  const char *name = gl_locale_name_default ();\n\n  ASSERT (name != NULL);\n\n  /* Only Mac OS X and Windows have a facility for the user to set the default\n     locale.  */\n#if !((defined __APPLE__ && defined __MACH__) || (defined _WIN32 || defined __WIN32__ || defined __CYGWIN__))\n  ASSERT (strcmp (name, \"C\") == 0);\n#endif\n\n#if HAVE_NEWLOCALE && HAVE_USELOCALE\n  /* Check that gl_locale_name_default ignores the thread locale.  */\n  {\n    locale_t locale = newlocale (LC_ALL_MASK, \"fr_FR.UTF-8\", NULL);\n    if (locale != NULL)\n      {\n        uselocale (locale);\n        ASSERT (strcmp (gl_locale_name_default (), name) == 0);\n        uselocale (LC_GLOBAL_LOCALE);\n        freelocale (locale);\n      }\n  }\n#endif\n}",
      "lines": 27,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        758,
        0
      ],
      "end_point": [
        768,
        1
      ],
      "content": "int\nmain ()\n{\n  test_locale_name ();\n  test_locale_name_thread ();\n  test_locale_name_posix ();\n  test_locale_name_environ ();\n  test_locale_name_default ();\n\n  return 0;\n}",
      "lines": 11,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-lseek.c": {
    "main": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  if (argc != 2)\n    return 2;\n  switch (*argv[1])\n    {\n    case '0': /* regular files */\n      ASSERT (lseek (0, (off_t)2, SEEK_SET) == 2);\n      ASSERT (lseek (0, (off_t)-4, SEEK_CUR) == -1);\n      ASSERT (errno == EINVAL);\n      errno = 0;\n#if ! defined __BEOS__\n      /* POSIX says that the last lseek call, when failing, does not change\n         the current offset.  But BeOS sets it to 0.  */\n      ASSERT (lseek (0, (off_t)0, SEEK_CUR) == 2);\n#endif\n#if 0 /* leads to SIGSYS on IRIX 6.5 */\n      ASSERT (lseek (0, (off_t)0, (SEEK_SET | SEEK_CUR | SEEK_END) + 1) == -1);\n      ASSERT (errno == EINVAL);\n#endif\n      ASSERT (lseek (1, (off_t)2, SEEK_SET) == 2);\n      errno = 0;\n      ASSERT (lseek (1, (off_t)-4, SEEK_CUR) == -1);\n      ASSERT (errno == EINVAL);\n      errno = 0;\n#if ! defined __BEOS__\n      /* POSIX says that the last lseek call, when failing, does not change\n         the current offset.  But BeOS sets it to 0.  */\n      ASSERT (lseek (1, (off_t)0, SEEK_CUR) == 2);\n#endif\n#if 0 /* leads to SIGSYS on IRIX 6.5 */\n      ASSERT (lseek (1, (off_t)0, (SEEK_SET | SEEK_CUR | SEEK_END) + 1) == -1);\n      ASSERT (errno == EINVAL);\n#endif\n      break;\n\n    case '1': /* pipes */\n      errno = 0;\n      ASSERT (lseek (0, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == ESPIPE);\n      errno = 0;\n      ASSERT (lseek (1, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == ESPIPE);\n      break;\n\n    case '2': /* closed */\n      /* Explicitly close file descriptors 0 and 1.  The <&- and >&- in the\n         invoking shell are not enough on HP-UX.  */\n      close (0);\n      close (1);\n\n      errno = 0;\n      ASSERT (lseek (0, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == EBADF);\n\n      errno = 0;\n      ASSERT (lseek (1, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == EBADF);\n\n      /* Test behaviour for invalid file descriptors.  */\n      errno = 0;\n      ASSERT (lseek (-1, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == EBADF);\n\n      close (99);\n      errno = 0;\n      ASSERT (lseek (99, (off_t)0, SEEK_CUR) == -1);\n      ASSERT (errno == EBADF);\n\n      break;\n\n    default:\n      return 1;\n    }\n  return 0;\n}",
      "lines": 77,
      "depth": 16,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-lstat.c": {
    "do_lstat": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "static int\ndo_lstat (char const *name, struct stat *st)\n{\n  return lstat (name, st);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Remove any leftovers from a previous partial run.  */\n  ignore_value (system (\"rm -rf \" BASE \"*\"));\n\n  return test_lstat_func (do_lstat, true);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-lstat.h": {
    "test_lstat_func": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        115,
        1
      ],
      "content": "static int\ntest_lstat_func (int (*func) (char const *, struct stat *), bool print)\n{\n  struct stat st1;\n  struct stat st2;\n\n  /* Test for common directories.  */\n  ASSERT (func (\".\", &st1) == 0);\n  ASSERT (func (\"./\", &st2) == 0);\n  ASSERT (SAME_INODE (st1, st2));\n  ASSERT (S_ISDIR (st1.st_mode));\n  ASSERT (S_ISDIR (st2.st_mode));\n  ASSERT (func (\"/\", &st1) == 0);\n  ASSERT (func (\"///\", &st2) == 0);\n  ASSERT (SAME_INODE (st1, st2));\n  ASSERT (S_ISDIR (st1.st_mode));\n  ASSERT (S_ISDIR (st2.st_mode));\n  ASSERT (func (\"..\", &st1) == 0);\n  ASSERT (S_ISDIR (st1.st_mode));\n\n  /* Test for error conditions.  */\n  errno = 0;\n  ASSERT (func (\"\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n  errno = 0;\n  ASSERT (func (\"nosuch\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n  errno = 0;\n  ASSERT (func (\"nosuch/\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n\n  ASSERT (close (creat (BASE \"file\", 0600)) == 0);\n  ASSERT (func (BASE \"file\", &st1) == 0);\n  ASSERT (S_ISREG (st1.st_mode));\n  errno = 0;\n  ASSERT (func (BASE \"file/\", &st1) == -1);\n  ASSERT (errno == ENOTDIR);\n\n  /* Now for some symlink tests, where supported.  We set up:\n     link1 -> directory\n     link2 -> file\n     link3 -> dangling\n     link4 -> loop\n     then test behavior both with and without trailing slash.\n  */\n  if (symlink (\".\", BASE \"link1\") != 0)\n    {\n      ASSERT (unlink (BASE \"file\") == 0);\n      if (print)\n        fputs (\"skipping test: symlinks not supported on this file system\\n\",\n               stderr);\n      return 77;\n    }\n  ASSERT (symlink (BASE \"file\", BASE \"link2\") == 0);\n  ASSERT (symlink (BASE \"nosuch\", BASE \"link3\") == 0);\n  ASSERT (symlink (BASE \"link4\", BASE \"link4\") == 0);\n\n  ASSERT (func (BASE \"link1\", &st1) == 0);\n  ASSERT (S_ISLNK (st1.st_mode));\n  ASSERT (func (BASE \"link1/\", &st1) == 0);\n  ASSERT (stat (BASE \"link1\", &st2) == 0);\n  ASSERT (S_ISDIR (st1.st_mode));\n  ASSERT (S_ISDIR (st2.st_mode));\n  ASSERT (SAME_INODE (st1, st2));\n\n  ASSERT (func (BASE \"link2\", &st1) == 0);\n  ASSERT (S_ISLNK (st1.st_mode));\n  errno = 0;\n  ASSERT (func (BASE \"link2/\", &st1) == -1);\n  ASSERT (errno == ENOTDIR);\n\n  ASSERT (func (BASE \"link3\", &st1) == 0);\n  ASSERT (S_ISLNK (st1.st_mode));\n  errno = 0;\n  ASSERT (func (BASE \"link3/\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n\n  ASSERT (func (BASE \"link4\", &st1) == 0);\n  ASSERT (S_ISLNK (st1.st_mode));\n  errno = 0;\n  ASSERT (func (BASE \"link4/\", &st1) == -1);\n  ASSERT (errno == ELOOP);\n\n  /* Cleanup.  */\n  ASSERT (unlink (BASE \"file\") == 0);\n  ASSERT (unlink (BASE \"link1\") == 0);\n  ASSERT (unlink (BASE \"link2\") == 0);\n  ASSERT (unlink (BASE \"link3\") == 0);\n  ASSERT (unlink (BASE \"link4\") == 0);\n\n  return 0;\n}",
      "lines": 92,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-malloc-gnu.c": {
    "main": {
      "start_point": [
        20,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Check that malloc (0) is not a NULL pointer.  */\n  char *p = malloc (0);\n  if (p == NULL)\n    return 1;\n\n  free (p);\n  return 0;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-malloca.c": {
    "do_allocation": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "static void\ndo_allocation (int n)\n{\n  void *ptr = malloca (n);\n  freea (ptr);\n  safe_alloca (n);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "int\nmain ()\n{\n  int i;\n\n  /* This slows down malloc a lot.  */\n  unsetenv (\"MALLOC_PERTURB_\");\n\n  /* Repeat a lot of times, to make sure there's no memory leak.  */\n  for (i = 0; i < 50000; i++)\n    {\n      /* Try various values.\n         n = 0 gave a crash on Alpha with gcc-2.5.8.\n         Some versions of Mac OS X have a stack size limit of 512 KB.  */\n      func (34);\n      func (134);\n      func (399);\n      func (510823);\n      func (129321);\n      func (0);\n      func (4070);\n      func (4095);\n      func (1);\n      func (16582);\n    }\n\n  return 0;\n}",
      "lines": 28,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbscasecmp.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "int\nmain ()\n{\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  ASSERT (mbscasecmp (\"paragraph\", \"Paragraph\") == 0);\n\n  ASSERT (mbscasecmp (\"paragrapH\", \"parAgRaph\") == 0);\n\n  ASSERT (mbscasecmp (\"paragraph\", \"paraLyzed\") < 0);\n  ASSERT (mbscasecmp (\"paraLyzed\", \"paragraph\") > 0);\n\n  ASSERT (mbscasecmp (\"para\", \"paragraph\") < 0);\n  ASSERT (mbscasecmp (\"paragraph\", \"para\") > 0);\n\n  /* The following tests shows how mbscasecmp() is different from\n     strcasecmp().  */\n\n  ASSERT (mbscasecmp (\"\\303\\266zg\\303\\274r\", \"\\303\\226ZG\\303\\234R\") == 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n  ASSERT (mbscasecmp (\"\\303\\226ZG\\303\\234R\", \"\\303\\266zg\\303\\274r\") == 0); /* \u00c3\u00b6zg\u00c3\u00bcr */\n\n  /* This test shows how strings of different size can compare equal.  */\n  ASSERT (mbscasecmp (\"turkish\", \"TURK\\304\\260SH\") == 0);\n  ASSERT (mbscasecmp (\"TURK\\304\\260SH\", \"turkish\") == 0);\n\n  return 0;\n}",
      "lines": 29,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbsinit.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  static mbstate_t state;\n\n  ASSERT (mbsinit (NULL));\n\n  ASSERT (mbsinit (&state));\n\n  if (argc > 1)\n    {\n      static const char input[1] = \"\\303\";\n      wchar_t wc;\n      size_t ret;\n\n      /* configure should already have checked that the locale is supported.  */\n      if (setlocale (LC_ALL, \"\") == NULL)\n        return 1;\n\n      ret = mbrtowc (&wc, input, 1, &state);\n      ASSERT (ret == (size_t)(-2));\n      ASSERT (!mbsinit (&state));\n    }\n\n  return 0;\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbsrtowcs.c": {
    "main": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        292,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  mbstate_t state;\n  wchar_t wc;\n  size_t ret;\n\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  /* Test NUL byte input.  */\n  {\n    const char *src;\n\n    memset (&state, '\\0', sizeof (mbstate_t));\n\n    src = \"\";\n    ret = mbsrtowcs (NULL, &src, 0, &state);\n    ASSERT (ret == 0);\n    ASSERT (mbsinit (&state));\n\n    src = \"\";\n    ret = mbsrtowcs (NULL, &src, 1, &state);\n    ASSERT (ret == 0);\n    ASSERT (mbsinit (&state));\n\n    wc = (wchar_t) 0xBADFACE;\n    src = \"\";\n    ret = mbsrtowcs (&wc, &src, 0, &state);\n    ASSERT (ret == 0);\n    ASSERT (wc == (wchar_t) 0xBADFACE);\n    ASSERT (mbsinit (&state));\n\n    wc = (wchar_t) 0xBADFACE;\n    src = \"\";\n    ret = mbsrtowcs (&wc, &src, 1, &state);\n    ASSERT (ret == 0);\n    ASSERT (wc == 0);\n    ASSERT (mbsinit (&state));\n  }\n\n  if (argc > 1)\n    {\n      int unlimited;\n\n      for (unlimited = 0; unlimited < 2; unlimited++)\n        {\n          #define BUFSIZE 10\n          wchar_t buf[BUFSIZE];\n          const char *src;\n          mbstate_t temp_state;\n\n          {\n            size_t i;\n            for (i = 0; i < BUFSIZE; i++)\n              buf[i] = (wchar_t) 0xBADFACE;\n          }\n\n          switch (argv[1][0])\n            {\n            case '1':\n              /* Locale encoding is ISO-8859-1 or ISO-8859-15.  */\n              {\n                char input[] = \"B\\374\\337er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n                memset (&state, '\\0', sizeof (mbstate_t));\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input, 1, &state);\n                ASSERT (ret == 1);\n                ASSERT (wc == 'B');\n                ASSERT (mbsinit (&state));\n                input[0] = '\\0';\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input + 1, 1, &state);\n                ASSERT (ret == 1);\n                ASSERT (wctob (wc) == (unsigned char) '\\374');\n                ASSERT (mbsinit (&state));\n                input[1] = '\\0';\n\n                src = input + 2;\n                temp_state = state;\n                ret = mbsrtowcs (NULL, &src, unlimited ? BUFSIZE : 1, &temp_state);\n                ASSERT (ret == 3);\n                ASSERT (src == input + 2);\n                ASSERT (mbsinit (&state));\n\n                src = input + 2;\n                ret = mbsrtowcs (buf, &src, unlimited ? BUFSIZE : 1, &state);\n                ASSERT (ret == (unlimited ? 3 : 1));\n                ASSERT (src == (unlimited ? NULL : input + 3));\n                ASSERT (wctob (buf[0]) == (unsigned char) '\\337');\n                if (unlimited)\n                  {\n                    ASSERT (buf[1] == 'e');\n                    ASSERT (buf[2] == 'r');\n                    ASSERT (buf[3] == 0);\n                    ASSERT (buf[4] == (wchar_t) 0xBADFACE);\n                  }\n                else\n                  ASSERT (buf[1] == (wchar_t) 0xBADFACE);\n                ASSERT (mbsinit (&state));\n              }\n              break;\n\n            case '2':\n              /* Locale encoding is UTF-8.  */\n              {\n                char input[] = \"B\\303\\274\\303\\237er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n                memset (&state, '\\0', sizeof (mbstate_t));\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input, 1, &state);\n                ASSERT (ret == 1);\n                ASSERT (wc == 'B');\n                ASSERT (mbsinit (&state));\n                input[0] = '\\0';\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input + 1, 1, &state);\n                ASSERT (ret == (size_t)(-2));\n                ASSERT (wc == (wchar_t) 0xBADFACE);\n                ASSERT (!mbsinit (&state));\n                input[1] = '\\0';\n\n                src = input + 2;\n                temp_state = state;\n                ret = mbsrtowcs (NULL, &src, unlimited ? BUFSIZE : 2, &temp_state);\n                ASSERT (ret == 4);\n                ASSERT (src == input + 2);\n                ASSERT (!mbsinit (&state));\n\n                src = input + 2;\n                ret = mbsrtowcs (buf, &src, unlimited ? BUFSIZE : 2, &state);\n                ASSERT (ret == (unlimited ? 4 : 2));\n                ASSERT (src == (unlimited ? NULL : input + 5));\n                ASSERT (wctob (buf[0]) == EOF);\n                ASSERT (wctob (buf[1]) == EOF);\n                if (unlimited)\n                  {\n                    ASSERT (buf[2] == 'e');\n                    ASSERT (buf[3] == 'r');\n                    ASSERT (buf[4] == 0);\n                    ASSERT (buf[5] == (wchar_t) 0xBADFACE);\n                  }\n                else\n                  ASSERT (buf[2] == (wchar_t) 0xBADFACE);\n                ASSERT (mbsinit (&state));\n              }\n              break;\n\n            case '3':\n              /* Locale encoding is EUC-JP.  */\n              {\n                char input[] = \"<\\306\\374\\313\\334\\270\\354>\"; /* \"<\u00e6\u0097\u00a5\u00e6\u009c\u00ac\u00e8\u00aa\u009e>\" */\n                memset (&state, '\\0', sizeof (mbstate_t));\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input, 1, &state);\n                ASSERT (ret == 1);\n                ASSERT (wc == '<');\n                ASSERT (mbsinit (&state));\n                input[0] = '\\0';\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input + 1, 2, &state);\n                ASSERT (ret == 2);\n                ASSERT (wctob (wc) == EOF);\n                ASSERT (mbsinit (&state));\n                input[1] = '\\0';\n                input[2] = '\\0';\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input + 3, 1, &state);\n                ASSERT (ret == (size_t)(-2));\n                ASSERT (wc == (wchar_t) 0xBADFACE);\n                ASSERT (!mbsinit (&state));\n                input[3] = '\\0';\n\n                src = input + 4;\n                temp_state = state;\n                ret = mbsrtowcs (NULL, &src, unlimited ? BUFSIZE : 2, &temp_state);\n                ASSERT (ret == 3);\n                ASSERT (src == input + 4);\n                ASSERT (!mbsinit (&state));\n\n                src = input + 4;\n                ret = mbsrtowcs (buf, &src, unlimited ? BUFSIZE : 2, &state);\n                ASSERT (ret == (unlimited ? 3 : 2));\n                ASSERT (src == (unlimited ? NULL : input + 7));\n                ASSERT (wctob (buf[0]) == EOF);\n                ASSERT (wctob (buf[1]) == EOF);\n                if (unlimited)\n                  {\n                    ASSERT (buf[2] == '>');\n                    ASSERT (buf[3] == 0);\n                    ASSERT (buf[4] == (wchar_t) 0xBADFACE);\n                  }\n                else\n                  ASSERT (buf[2] == (wchar_t) 0xBADFACE);\n                ASSERT (mbsinit (&state));\n              }\n              break;\n\n            case '4':\n              /* Locale encoding is GB18030.  */\n              {\n                char input[] = \"B\\250\\271\\201\\060\\211\\070er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n                memset (&state, '\\0', sizeof (mbstate_t));\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input, 1, &state);\n                ASSERT (ret == 1);\n                ASSERT (wc == 'B');\n                ASSERT (mbsinit (&state));\n                input[0] = '\\0';\n\n                wc = (wchar_t) 0xBADFACE;\n                ret = mbrtowc (&wc, input + 1, 1, &state);\n                ASSERT (ret == (size_t)(-2));\n                ASSERT (wc == (wchar_t) 0xBADFACE);\n                ASSERT (!mbsinit (&state));\n                input[1] = '\\0';\n\n                src = input + 2;\n                temp_state = state;\n                ret = mbsrtowcs (NULL, &src, unlimited ? BUFSIZE : 2, &temp_state);\n                ASSERT (ret == 4);\n                ASSERT (src == input + 2);\n                ASSERT (!mbsinit (&state));\n\n                src = input + 2;\n                ret = mbsrtowcs (buf, &src, unlimited ? BUFSIZE : 2, &state);\n                ASSERT (ret == (unlimited ? 4 : 2));\n                ASSERT (src == (unlimited ? NULL : input + 7));\n                ASSERT (wctob (buf[0]) == EOF);\n                ASSERT (wctob (buf[1]) == EOF);\n                if (unlimited)\n                  {\n                    ASSERT (buf[2] == 'e');\n                    ASSERT (buf[3] == 'r');\n                    ASSERT (buf[4] == 0);\n                    ASSERT (buf[5] == (wchar_t) 0xBADFACE);\n                  }\n                else\n                  ASSERT (buf[2] == (wchar_t) 0xBADFACE);\n                ASSERT (mbsinit (&state));\n              }\n              break;\n\n            default:\n              return 1;\n            }\n        }\n\n      return 0;\n    }\n\n  return 1;\n}",
      "lines": 261,
      "depth": 19,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbsstr1.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "content": "int\nmain ()\n{\n  /* This test is executed in the C locale.  */\n\n  {\n    const char input[] = \"foo\";\n    const char *result = mbsstr (input, \"\");\n    ASSERT (result == input);\n  }\n\n  {\n    const char input[] = \"foo\";\n    const char *result = mbsstr (input, \"o\");\n    ASSERT (result == input + 1);\n  }\n\n  {\n    const char input[] = \"ABC ABCDAB ABCDABCDABDE\";\n    const char *result = mbsstr (input, \"ABCDABD\");\n    ASSERT (result == input + 15);\n  }\n\n  {\n    const char input[] = \"ABC ABCDAB ABCDABCDABDE\";\n    const char *result = mbsstr (input, \"ABCDABE\");\n    ASSERT (result == NULL);\n  }\n\n  /* Check that a very long haystack is handled quickly if the needle is\n     short and occurs near the beginning.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *needle =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n    char *haystack = (char *) malloc (m + 1);\n    if (haystack != NULL)\n      {\n        memset (haystack, 'A', m);\n        haystack[0] = 'B';\n        haystack[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (mbsstr (haystack, needle) == haystack + 1);\n          }\n\n        free (haystack);\n      }\n  }\n\n  /* Check that a very long needle is discarded quickly if the haystack is\n     short.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *haystack =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB\";\n    char *needle = (char *) malloc (m + 1);\n    if (needle != NULL)\n      {\n        memset (needle, 'A', m);\n        needle[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (mbsstr (haystack, needle) == NULL);\n          }\n\n        free (needle);\n      }\n  }\n\n  /* Check that the asymptotic worst-case complexity is not quadratic.  */\n  {\n    size_t m = 1000000;\n    char *haystack = (char *) malloc (2 * m + 2);\n    char *needle = (char *) malloc (m + 2);\n    if (haystack != NULL && needle != NULL)\n      {\n        const char *result;\n\n        memset (haystack, 'A', 2 * m);\n        haystack[2 * m] = 'B';\n        haystack[2 * m + 1] = '\\0';\n\n        memset (needle, 'A', m);\n        needle[m] = 'B';\n        needle[m + 1] = '\\0';\n\n        result = mbsstr (haystack, needle);\n        ASSERT (result == haystack + m);\n      }\n    free (needle);\n    free (haystack);\n  }\n\n  return 0;\n}",
      "lines": 102,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbsstr2.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        140,
        1
      ],
      "content": "int\nmain ()\n{\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  {\n    const char input[] = \"f\\303\\266\\303\\266\";\n    const char *result = mbsstr (input, \"\");\n    ASSERT (result == input);\n  }\n\n  {\n    const char input[] = \"f\\303\\266\\303\\266\";\n    const char *result = mbsstr (input, \"\\303\\266\");\n    ASSERT (result == input + 1);\n  }\n\n  {\n    const char input[] = \"f\\303\\266\\303\\266\";\n    const char *result = mbsstr (input, \"\\266\\303\");\n    ASSERT (result == NULL);\n  }\n\n  {\n    const char input[] = \"\\303\\204BC \\303\\204BCD\\303\\204B \\303\\204BCD\\303\\204BCD\\303\\204BDE\"; /* \"\u00c3\u0084BC \u00c3\u0084BCD\u00c3\u0084B \u00c3\u0084BCD\u00c3\u0084BCD\u00c3\u0084BDE\" */\n    const char *result = mbsstr (input, \"\\303\\204BCD\\303\\204BD\"); /* \"\u00c3\u0084BCD\u00c3\u0084BD\" */\n    ASSERT (result == input + 19);\n  }\n\n  {\n    const char input[] = \"\\303\\204BC \\303\\204BCD\\303\\204B \\303\\204BCD\\303\\204BCD\\303\\204BDE\"; /* \"\u00c3\u0084BC \u00c3\u0084BCD\u00c3\u0084B \u00c3\u0084BCD\u00c3\u0084BCD\u00c3\u0084BDE\" */\n    const char *result = mbsstr (input, \"\\303\\204BCD\\303\\204BE\"); /* \"\u00c3\u0084BCD\u00c3\u0084BE\" */\n    ASSERT (result == NULL);\n  }\n\n  /* Check that a very long haystack is handled quickly if the needle is\n     short and occurs near the beginning.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *needle =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n    char *haystack = (char *) malloc (m + 1);\n    if (haystack != NULL)\n      {\n        memset (haystack, 'A', m);\n        haystack[0] = '\\303'; haystack[1] = '\\204';\n        haystack[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (mbsstr (haystack, needle) == haystack + 2);\n          }\n\n        free (haystack);\n      }\n  }\n\n  /* Check that a very long needle is discarded quickly if the haystack is\n     short.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *haystack =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207\"\n      \"A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207\"\n      \"A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207\"\n      \"A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207\"\n      \"A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207A\\303\\207\";\n    char *needle = (char *) malloc (m + 1);\n    if (needle != NULL)\n      {\n        memset (needle, 'A', m);\n        needle[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (mbsstr (haystack, needle) == NULL);\n          }\n\n        free (needle);\n      }\n  }\n\n  /* Check that the asymptotic worst-case complexity is not quadratic.  */\n  {\n    size_t m = 1000000;\n    char *haystack = (char *) malloc (2 * m + 3);\n    char *needle = (char *) malloc (m + 3);\n    if (haystack != NULL && needle != NULL)\n      {\n        const char *result;\n\n        memset (haystack, 'A', 2 * m);\n        haystack[2 * m] = '\\303'; haystack[2 * m + 1] = '\\207';\n        haystack[2 * m + 2] = '\\0';\n\n        memset (needle, 'A', m);\n        needle[m] = '\\303'; needle[m + 1] = '\\207';\n        needle[m + 2] = '\\0';\n\n        result = mbsstr (haystack, needle);\n        ASSERT (result == haystack + m);\n      }\n    free (needle);\n    free (haystack);\n  }\n\n  return 0;\n}",
      "lines": 114,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-mbsstr3.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "content": "int\nmain ()\n{\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  /* Tests with a character < 0x30.  */\n  {\n    const char input[] = \"\\312\\276\\300\\375 \\312\\276\\300\\375 \\312\\276\\300\\375\"; /* \"\u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b\" */\n    const char *result = mbsstr (input, \" \");\n    ASSERT (result == input + 4);\n  }\n\n  {\n    const char input[] = \"\\312\\276\\300\\375\"; /* \"\u00e7\u00a4\u00ba\u00e4\u00be\u008b\" */\n    const char *result = mbsstr (input, \" \");\n    ASSERT (result == NULL);\n  }\n\n  /* Tests with a character >= 0x30.  */\n  {\n    const char input[] = \"\\272\\305123\\324\\313\\320\\320\\241\\243\"; /* \"\u00e5\u008f\u00b7123\u00e8\u00bf\u0090\u00e8\u00a1\u008c\u00e3\u0080\u0082\" */\n    const char *result = mbsstr (input, \"2\");\n    ASSERT (result == input + 3);\n  }\n\n  /* The following tests show how mbsstr() is different from strstr().  */\n\n  {\n    const char input[] = \"\\313\\320\\320\\320\"; /* \"\u00e8\u00af\u00b5\u00e8\u00a1\u008c\" */\n    const char *result = mbsstr (input, \"\\320\\320\"); /* \"\u00e8\u00a1\u008c\" */\n    ASSERT (result == input + 2);\n  }\n\n  {\n    const char input[] = \"\\203\\062\\332\\066123\\324\\313\\320\\320\\241\\243\"; /* \"\u00ec\u0094\u008b123\u00e8\u00bf\u0090\u00e8\u00a1\u008c\u00e3\u0080\u0082\" */\n    const char *result = mbsstr (input, \"2\");\n    ASSERT (result == input + 5);\n  }\n\n  {\n    const char input[] = \"\\312\\276\\300\\375 \\312\\276\\300\\375 \\312\\276\\300\\375\"; /* \"\u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b\" */\n    const char *result = mbsstr (input, \"\\276\\300\"); /* \"\u00e7\u00ba\u00a0\" */\n    ASSERT (result == NULL);\n  }\n\n  {\n    const char input[] = \"\\312\\276\\300\\375 \\312\\276\\300\\375 \\312\\276\\300\\375\"; /* \"\u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b \u00e7\u00a4\u00ba\u00e4\u00be\u008b\" */\n    const char *result = mbsstr (input, \"\\375 \"); /* invalid multibyte sequence */\n    ASSERT (result == NULL);\n  }\n\n  return 0;\n}",
      "lines": 55,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-memchr.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        131,
        1
      ],
      "content": "int\nmain (void)\n{\n  size_t n = 0x100000;\n  char *input = malloc (n);\n  ASSERT (input);\n\n  input[0] = 'a';\n  input[1] = 'b';\n  memset (input + 2, 'c', 1024);\n  memset (input + 1026, 'd', n - 1028);\n  input[n - 2] = 'e';\n  input[n - 1] = 'a';\n\n  /* Basic behavior tests.  */\n  ASSERT (MEMCHR (input, 'a', n) == input);\n\n  ASSERT (MEMCHR (input, 'a', 0) == NULL);\n  ASSERT (MEMCHR (zerosize_ptr (), 'a', 0) == NULL);\n\n  ASSERT (MEMCHR (input, 'b', n) == input + 1);\n  ASSERT (MEMCHR (input, 'c', n) == input + 2);\n  ASSERT (MEMCHR (input, 'd', n) == input + 1026);\n\n  ASSERT (MEMCHR (input + 1, 'a', n - 1) == input + n - 1);\n  ASSERT (MEMCHR (input + 1, 'e', n - 1) == input + n - 2);\n  ASSERT (MEMCHR (input + 1, 0x789abc00 | 'e', n - 1) == input + n - 2);\n\n  ASSERT (MEMCHR (input, 'f', n) == NULL);\n  ASSERT (MEMCHR (input, '\\0', n) == NULL);\n\n  /* Check that a very long haystack is handled quickly if the byte is\n     found near the beginning.  */\n  {\n    size_t repeat = 10000;\n    for (; repeat > 0; repeat--)\n      {\n        ASSERT (MEMCHR (input, 'c', n) == input + 2);\n      }\n  }\n\n  /* Alignment tests.  */\n  {\n    int i, j;\n    for (i = 0; i < 32; i++)\n      {\n        for (j = 0; j < 256; j++)\n          input[i + j] = j;\n        for (j = 0; j < 256; j++)\n          {\n            ASSERT (MEMCHR (input + i, j, 256) == input + i + j);\n          }\n      }\n  }\n\n  /* Check that memchr() does not read past the first occurrence of the\n     byte being searched.  See the Austin Group's clarification\n     <http://www.opengroup.org/austin/docs/austin_454.txt>.\n     Test both '\\0' and something else, since some implementations\n     special-case searching for NUL.\n  */\n  {\n    char *page_boundary = (char *) zerosize_ptr ();\n    /* Too small, and we miss cache line boundary tests; too large,\n       and the test takes cubically longer to complete.  */\n    int limit = 257;\n\n    if (page_boundary != NULL)\n      {\n        for (n = 1; n <= limit; n++)\n          {\n            char *mem = page_boundary - n;\n            memset (mem, 'X', n);\n            ASSERT (MEMCHR (mem, 'U', n) == NULL);\n            ASSERT (MEMCHR (mem, 0, n) == NULL);\n\n            {\n              size_t i;\n              size_t k;\n\n              for (i = 0; i < n; i++)\n                {\n                  mem[i] = 'U';\n                  for (k = i + 1; k < n + limit; k++)\n                    ASSERT (MEMCHR (mem, 'U', k) == mem + i);\n                  mem[i] = 0;\n                  for (k = i + 1; k < n + limit; k++)\n                    ASSERT (MEMCHR (mem, 0, k) == mem + i);\n                  mem[i] = 'X';\n                }\n            }\n          }\n      }\n  }\n\n  free (input);\n\n  return 0;\n}",
      "lines": 99,
      "depth": 19,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-memchr2.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        99,
        1
      ],
      "content": "int\nmain (void)\n{\n  size_t n = 0x100000;\n  char *input = malloc (n);\n  ASSERT (input);\n\n  input[0] = 'a';\n  input[1] = 'b';\n  memset (input + 2, 'c', 1024);\n  memset (input + 1026, 'd', n - 1028);\n  input[n - 2] = 'e';\n  input[n - 1] = 'a';\n\n  /* Basic behavior tests.  */\n  ASSERT (MEMCHR2 (input, 'a', 'b', n) == input);\n  ASSERT (MEMCHR2 (input, 'b', 'a', n) == input);\n\n  ASSERT (MEMCHR2 (input, 'a', 'b', 0) == NULL);\n  ASSERT (MEMCHR2 (zerosize_ptr (), 'a', 'b', 0) == NULL);\n\n  ASSERT (MEMCHR2 (input, 'b', 'd', n) == input + 1);\n  ASSERT (MEMCHR2 (input + 2, 'b', 'd', n - 2) == input + 1026);\n\n  ASSERT (MEMCHR2 (input, 'd', 'e', n) == input + 1026);\n  ASSERT (MEMCHR2 (input, 'e', 'd', n) == input + 1026);\n\n  ASSERT (MEMCHR2 (input + 1, 'a', 'e', n - 1) == input + n - 2);\n  ASSERT (MEMCHR2 (input + 1, 'e', 'a', n - 1) == input + n - 2);\n\n  ASSERT (MEMCHR2 (input, 'f', 'g', n) == NULL);\n  ASSERT (MEMCHR2 (input, 'f', '\\0', n) == NULL);\n\n  ASSERT (MEMCHR2 (input, 'a', 'a', n) == input);\n  ASSERT (MEMCHR2 (input + 1, 'a', 'a', n - 1) == input + n - 1);\n  ASSERT (MEMCHR2 (input, 'f', 'f', n) == NULL);\n\n  /* Check that a very long haystack is handled quickly if one of the\n     two bytes is found near the beginning.  */\n  {\n    size_t repeat = 10000;\n    for (; repeat > 0; repeat--)\n      {\n        ASSERT (MEMCHR2 (input, 'c', 'e', n) == input + 2);\n        ASSERT (MEMCHR2 (input, 'e', 'c', n) == input + 2);\n        ASSERT (MEMCHR2 (input, 'c', '\\0', n) == input + 2);\n        ASSERT (MEMCHR2 (input, '\\0', 'c', n) == input + 2);\n      }\n  }\n\n  /* Alignment tests.  */\n  {\n    int i, j;\n    for (i = 0; i < 32; i++)\n      {\n        for (j = 0; j < 256; j++)\n          input[i + j] = j;\n        for (j = 0; j < 256; j++)\n          {\n            ASSERT (MEMCHR2 (input + i, j, 0xff, 256) == input + i + j);\n            ASSERT (MEMCHR2 (input + i, 0xff, j, 256) == input + i + j);\n          }\n      }\n  }\n\n  free (input);\n\n  return 0;\n}",
      "lines": 69,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-memrchr.c": {
    "main": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "int\nmain (void)\n{\n  size_t n = 0x100000;\n  char *input = malloc (n);\n  ASSERT (input);\n\n  input[n - 1] = 'a';\n  input[n - 2] = 'b';\n  memset (input + n - 1026, 'c', 1024);\n  memset (input + 2, 'd', n - 1028);\n  input[1] = 'e';\n  input[0] = 'a';\n\n  /* Basic behavior tests.  */\n  ASSERT (MEMRCHR (input, 'a', n) == input + n - 1);\n\n  ASSERT (MEMRCHR (input, 'a', 0) == NULL);\n  ASSERT (MEMRCHR (zerosize_ptr (), 'a', 0) == NULL);\n\n  ASSERT (MEMRCHR (input, 'b', n) == input + n - 2);\n  ASSERT (MEMRCHR (input, 'c', n) == input + n - 3);\n  ASSERT (MEMRCHR (input, 'd', n) == input + n - 1027);\n\n  ASSERT (MEMRCHR (input, 'a', n - 1) == input);\n  ASSERT (MEMRCHR (input, 'e', n - 1) == input + 1);\n\n  ASSERT (MEMRCHR (input, 'f', n) == NULL);\n  ASSERT (MEMRCHR (input, '\\0', n) == NULL);\n\n  /* Check that a very long haystack is handled quickly if the byte is\n     found near the end.  */\n  {\n    size_t repeat = 10000;\n    for (; repeat > 0; repeat--)\n      {\n        ASSERT (MEMRCHR (input, 'c', n) == input + n - 3);\n      }\n  }\n\n  /* Alignment tests.  */\n  {\n    int i, j;\n    for (i = 0; i < 32; i++)\n      {\n        for (j = 0; j < 256; j++)\n          input[i + j] = j;\n        for (j = 0; j < 256; j++)\n          {\n            ASSERT (MEMRCHR (input + i, j, 256) == input + i + j);\n          }\n      }\n  }\n\n  free (input);\n\n  return 0;\n}",
      "lines": 58,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-nl_langinfo.c": {
    "main": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        125,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  int pass = atoi (argv[1]);\n  /* pass    locale\n      0        C\n      1        traditional French locale\n      2        French UTF-8 locale\n   */\n\n  setlocale (LC_ALL, \"\");\n\n  /* nl_langinfo items of the LC_CTYPE category */\n  ASSERT (strlen (nl_langinfo (CODESET)) > 0);\n  if (pass == 2)\n    {\n      const char *codeset = nl_langinfo (CODESET);\n      ASSERT (c_strcasecmp (codeset, \"UTF-8\") == 0 || c_strcasecmp (codeset, \"UTF8\") == 0);\n    }\n  /* nl_langinfo items of the LC_NUMERIC category */\n  ASSERT (strlen (nl_langinfo (RADIXCHAR)) > 0);\n  ASSERT (strlen (nl_langinfo (THOUSEP)) >= 0);\n  /* nl_langinfo items of the LC_TIME category */\n  ASSERT (strlen (nl_langinfo (D_T_FMT)) > 0);\n  ASSERT (strlen (nl_langinfo (D_FMT)) > 0);\n  ASSERT (strlen (nl_langinfo (T_FMT)) > 0);\n  ASSERT (strlen (nl_langinfo (T_FMT_AMPM)) >= (pass == 0 ? 1 : 0));\n  ASSERT (strlen (nl_langinfo (AM_STR)) >= (pass == 0 ? 1 : 0));\n  ASSERT (strlen (nl_langinfo (PM_STR)) >= (pass == 0 ? 1 : 0));\n  ASSERT (strlen (nl_langinfo (DAY_1)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_2)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_3)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_4)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_5)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_6)) > 0);\n  ASSERT (strlen (nl_langinfo (DAY_7)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_1)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_2)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_3)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_4)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_5)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_6)) > 0);\n  ASSERT (strlen (nl_langinfo (ABDAY_7)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_1)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_2)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_3)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_4)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_5)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_6)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_7)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_8)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_9)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_10)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_11)) > 0);\n  ASSERT (strlen (nl_langinfo (MON_12)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_1)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_2)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_3)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_4)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_5)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_6)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_7)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_8)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_9)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_10)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_11)) > 0);\n  ASSERT (strlen (nl_langinfo (ABMON_12)) > 0);\n  ASSERT (strlen (nl_langinfo (ERA)) >= 0);\n  ASSERT (strlen (nl_langinfo (ERA_D_FMT)) >= 0);\n  ASSERT (strlen (nl_langinfo (ERA_D_T_FMT)) >= 0);\n  ASSERT (strlen (nl_langinfo (ERA_T_FMT)) >= 0);\n  ASSERT (nl_langinfo (ALT_DIGITS) != NULL);\n  /* nl_langinfo items of the LC_MONETARY category */\n  {\n    const char *currency = nl_langinfo (CRNCYSTR);\n    ASSERT (strlen (currency) >= 0);\n#if !defined __NetBSD__\n    if (pass > 0)\n      ASSERT (strlen (currency) >= 1);\n#endif\n  }\n  /* nl_langinfo items of the LC_MESSAGES category */\n  ASSERT (strlen (nl_langinfo (YESEXPR)) > 0);\n  ASSERT (strlen (nl_langinfo (NOEXPR)) > 0);\n\n  return 0;\n}",
      "lines": 87,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-open.c": {
    "main": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "int\nmain (void)\n{\n  return test_open (open, true);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-open.h": {
    "test_open": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "static ALWAYS_INLINE int\ntest_open (int (*func) (char const *, int, ...), bool print)\n{\n  int fd;\n  /* Remove anything from prior partial run.  */\n  unlink (BASE \"file\");\n\n  /* Cannot create directory.  */\n  errno = 0;\n  ASSERT (func (\"nonexist.ent/\", O_CREAT | O_RDONLY, 0600) == -1);\n  ASSERT (errno == ENOTDIR || errno == EISDIR || errno == ENOENT\n          || errno == EINVAL);\n\n  /* Create a regular file.  */\n  fd = func (BASE \"file\", O_CREAT | O_RDONLY, 0600);\n  ASSERT (0 <= fd);\n  ASSERT (close (fd) == 0);\n\n  /* Trailing slash handling.  */\n  errno = 0;\n  ASSERT (func (BASE \"file/\", O_RDONLY) == -1);\n  ASSERT (errno == ENOTDIR || errno == EISDIR || errno == EINVAL);\n\n  /* Directories cannot be opened for writing.  */\n  errno = 0;\n  ASSERT (func (\".\", O_WRONLY) == -1);\n  ASSERT (errno == EISDIR || errno == EACCES);\n\n  /* /dev/null must exist, and be writable.  */\n  fd = func (\"/dev/null\", O_RDONLY);\n  ASSERT (0 <= fd);\n  {\n    char c;\n    ASSERT (read (fd, &c, 1) == 0);\n  }\n  ASSERT (close (fd) == 0);\n  fd = func (\"/dev/null\", O_WRONLY);\n  ASSERT (0 <= fd);\n  ASSERT (write (fd, \"c\", 1) == 1);\n  ASSERT (close (fd) == 0);\n\n  /* Although O_NONBLOCK on regular files can be ignored, it must not\n     cause a failure.  */\n  fd = func (BASE \"file\", O_NONBLOCK | O_RDONLY);\n  ASSERT (0 <= fd);\n  ASSERT (close (fd) == 0);\n\n  /* Symlink handling, where supported.  */\n  if (symlink (BASE \"file\", BASE \"link\") != 0)\n    {\n      ASSERT (unlink (BASE \"file\") == 0);\n      if (print)\n        fputs (\"skipping test: symlinks not supported on this file system\\n\",\n               stderr);\n      return 77;\n    }\n  errno = 0;\n  ASSERT (func (BASE \"link/\", O_RDONLY) == -1);\n  ASSERT (errno == ENOTDIR);\n  fd = func (BASE \"link\", O_RDONLY);\n  ASSERT (0 <= fd);\n  ASSERT (close (fd) == 0);\n\n  /* Cleanup.  */\n  ASSERT (unlink (BASE \"file\") == 0);\n  ASSERT (unlink (BASE \"link\") == 0);\n\n  return 0;\n}",
      "lines": 69,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "ALWAYS_INLINE",
        "int",
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-openat-safer.c": {
    "main": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "content": "int\nmain (void)\n{\n  int i;\n  int j;\n  int dfd;\n  int fd;\n  char buf[2];\n\n  /* We close fd 2 later, so save it in fd 10.  */\n  if (dup2 (STDERR_FILENO, BACKUP_STDERR_FILENO) != BACKUP_STDERR_FILENO\n      || (myerr = fdopen (BACKUP_STDERR_FILENO, \"w\")) == NULL)\n    return 2;\n\n  /* Create handle for future use.  */\n  dfd = openat (AT_FDCWD, \".\", O_RDONLY);\n  ASSERT (STDERR_FILENO < dfd);\n\n  /* Create file for later checks.  */\n  remove (witness);\n  fd = openat (dfd, witness, O_WRONLY | O_CREAT | O_EXCL, 0600);\n  ASSERT (STDERR_FILENO < fd);\n  ASSERT (write (fd, \"hi\", 2) == 2);\n  ASSERT (close (fd) == 0);\n\n  /* Four iterations, with progressively more standard descriptors\n     closed.  */\n  for (i = -1; i <= STDERR_FILENO; i++)\n    {\n      ASSERT (fchdir (dfd) == 0);\n      if (0 <= i)\n        ASSERT (close (i) == 0);\n\n      /* Execute once in \".\", once in \"..\".  */\n      for (j = 0; j <= 1; j++)\n        {\n          if (j)\n            ASSERT (chdir (\"..\") == 0);\n\n          /* Check for error detection.  */\n          errno = 0;\n          ASSERT (openat (AT_FDCWD, \"\", O_RDONLY) == -1);\n          ASSERT (errno == ENOENT);\n          errno = 0;\n          ASSERT (openat (dfd, \"\", O_RDONLY) == -1);\n          ASSERT (errno == ENOENT);\n          errno = 0;\n          ASSERT (openat (-1, \".\", O_RDONLY) == -1);\n          ASSERT (errno == EBADF);\n\n          /* Check for trailing slash and /dev/null handling.  */\n          errno = 0;\n          ASSERT (openat (dfd, \"nonexist.ent/\", O_CREAT | O_RDONLY,\n                          S_IRUSR | S_IWUSR) == -1);\n          ASSERT (errno == ENOTDIR || errno == EISDIR || errno == ENOENT\n                  || errno == EINVAL);\n          errno = 0;\n          ASSERT (openat (dfd, witness \"/\", O_RDONLY) == -1);\n          ASSERT (errno == ENOTDIR || errno == EISDIR || errno == EINVAL);\n          /* Using a bad directory is okay for absolute paths.  */\n          fd = openat (-1, \"/dev/null\", O_WRONLY);\n          ASSERT (STDERR_FILENO < fd);\n          /* Using a non-directory is wrong for relative paths.  */\n          errno = 0;\n          ASSERT (openat (fd, \".\", O_RDONLY) == -1);\n          ASSERT (errno == EBADF || errno == ENOTDIR);\n          ASSERT (close (fd) == 0);\n\n          /* Check for our witness file.  */\n          fd = openat (dfd, witness, O_RDONLY | O_NOFOLLOW);\n          ASSERT (STDERR_FILENO < fd);\n          ASSERT (read (fd, buf, 2) == 2);\n          ASSERT (buf[0] == 'h' && buf[1] == 'i');\n          ASSERT (close (fd) == 0);\n        }\n    }\n  ASSERT (fchdir (dfd) == 0);\n  ASSERT (unlink (witness) == 0);\n  ASSERT (close (dfd) == 0);\n\n  return 0;\n}",
      "lines": 82,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-openat.c": {
    "do_open": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "static int\ndo_open (char const *name, int flags, ...)\n{\n  if (flags & O_CREAT)\n    {\n      mode_t mode = 0;\n      va_list arg;\n      va_start (arg, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (arg, PROMOTED_MODE_T);\n\n      va_end (arg);\n      return openat (dfd, name, flags, mode);\n    }\n  return openat (dfd, name, flags);\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char *argv[])\n{\n  int result;\n\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    errno = 0;\n    ASSERT (openat (-1, \"foo\", O_RDONLY) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    close (99);\n    errno = 0;\n    ASSERT (openat (99, \"foo\", O_RDONLY) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  /* Basic checks.  */\n  result = test_open (do_open, false);\n  dfd = open (\".\", O_RDONLY);\n  ASSERT (0 <= dfd);\n  ASSERT (test_open (do_open, false) == result);\n  ASSERT (close (dfd) == 0);\n\n  /* Check that even when *-safer modules are in use, plain openat can\n     land in fd 0.  Do this test last, since it is destructive to\n     stdin.  */\n  ASSERT (close (STDIN_FILENO) == 0);\n  ASSERT (openat (AT_FDCWD, \".\", O_RDONLY) == STDIN_FILENO);\n  {\n    dfd = open (\".\", O_RDONLY);\n    ASSERT (STDIN_FILENO < dfd);\n    ASSERT (chdir (\"..\") == 0);\n    ASSERT (close (STDIN_FILENO) == 0);\n    ASSERT (openat (dfd, \".\", O_RDONLY) == STDIN_FILENO);\n    ASSERT (close (dfd) == 0);\n  }\n  return result;\n}",
      "lines": 40,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-pathmax.c": {
    "main": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        31,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-pipe.c": {
    "is_open": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "content": "static bool\nis_open (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows, the initial state of unassigned standard file\n     descriptors is that they are open but point to an\n     INVALID_HANDLE_VALUE, and there is no fcntl.  */\n  return (HANDLE) _get_osfhandle (fd) != INVALID_HANDLE_VALUE;\n#else\n# ifndef F_GETFL\n#  error Please port fcntl to your platform\n# endif\n  return 0 <= fcntl (fd, F_GETFL);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_cloexec": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "static bool\nis_cloexec (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  DWORD flags;\n  ASSERT (GetHandleInformation (h, &flags));\n  return (flags & HANDLE_FLAG_INHERIT) == 0;\n#else\n  int flags;\n  ASSERT ((flags = fcntl (fd, F_GETFD)) >= 0);\n  return (flags & FD_CLOEXEC) != 0;\n#endif\n}",
      "lines": 14,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "is_nonblocking": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "content": "static bool\nis_nonblocking (int fd)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* We don't use the non-blocking mode for sockets here.  */\n  return 0;\n#else\n  int flags;\n  ASSERT ((flags = fcntl (fd, F_GETFL)) >= 0);\n  return (flags & O_NONBLOCK) != 0;\n#endif\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "main": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        107,
        1
      ],
      "content": "int\nmain ()\n{\n  int fd[2];\n\n  fd[0] = -1;\n  fd[1] = -1;\n  ASSERT (pipe (fd) >= 0);\n  ASSERT (fd[0] >= 0);\n  ASSERT (fd[1] >= 0);\n  ASSERT (fd[0] != fd[1]);\n  ASSERT (is_open (fd[0]));\n  ASSERT (is_open (fd[1]));\n  ASSERT (!is_cloexec (fd[0]));\n  ASSERT (!is_cloexec (fd[1]));\n  ASSERT (!is_nonblocking (fd[0]));\n  ASSERT (!is_nonblocking (fd[1]));\n\n  return 0;\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-quotearg-simple.c": {
    "use_quote_double_quotes": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        254,
        1
      ],
      "content": "static char *\nuse_quote_double_quotes (const char *str, size_t *len)\n{\n  char *p = *len == SIZE_MAX ? quotearg_char (str, '\"')\n                               : quotearg_char_mem (str, *len, '\"');\n  *len = strlen (p);\n  return p;\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nuse_quote_double_quotes (const char *str, size_t *len)",
        "*"
      ]
    },
    "main": {
      "start_point": [
        256,
        0
      ],
      "end_point": [
        365,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char *argv[])\n{\n  int i;\n  bool ascii_only = MB_CUR_MAX == 1 && !isprint ((unsigned char) LQ[0]);\n\n  /* This part of the program is hard-wired to the C locale since it\n     does not call setlocale.  However, according to POSIX, the use of\n     8-bit bytes in a character context in the C locale gives\n     unspecified results (that is, the C locale charset is allowed to\n     be unibyte with 8-bit bytes rejected [ASCII], unibyte with 8-bit\n     bytes being characters [often ISO-8859-1], or multibyte [often\n     UTF-8]).  We assume that the latter two cases will be\n     indistinguishable in this test - that is, the LQ and RQ sequences\n     will pass through unchanged in either type of charset.  So when\n     testing for quoting of str7, use the ascii_only flag to decide\n     what to expect for the 8-bit data being quoted.  */\n  ASSERT (!isprint ('\\033'));\n  for (i = literal_quoting_style; i <= clocale_quoting_style; i++)\n    {\n      set_quoting_style (NULL, (enum quoting_style) i);\n      if (!(i == locale_quoting_style || i == clocale_quoting_style)\n          || (strcmp (locale_charset (), \"ASCII\") == 0\n              || strcmp (locale_charset (), \"ANSI_X3.4-1968\") == 0))\n        {\n          compare_strings (use_quotearg_buffer, &results_g[i].group1,\n                           ascii_only);\n          compare_strings (use_quotearg, &results_g[i].group2,\n                           ascii_only);\n          if (i == c_quoting_style)\n            compare_strings (use_quote_double_quotes, &results_g[i].group2,\n                             ascii_only);\n          compare_strings (use_quotearg_colon, &results_g[i].group3,\n                           ascii_only);\n        }\n    }\n\n  set_quoting_style (NULL, literal_quoting_style);\n  ASSERT (set_quoting_flags (NULL, QA_ELIDE_NULL_BYTES) == 0);\n  compare_strings (use_quotearg_buffer, &flag_results[0].group1, ascii_only);\n  compare_strings (use_quotearg, &flag_results[0].group2, ascii_only);\n  compare_strings (use_quotearg_colon, &flag_results[0].group3, ascii_only);\n\n  set_quoting_style (NULL, c_quoting_style);\n  ASSERT (set_quoting_flags (NULL, QA_ELIDE_OUTER_QUOTES)\n          == QA_ELIDE_NULL_BYTES);\n  compare_strings (use_quotearg_buffer, &flag_results[1].group1, ascii_only);\n  compare_strings (use_quotearg, &flag_results[1].group2, ascii_only);\n  compare_strings (use_quote_double_quotes, &flag_results[1].group2,\n                   ascii_only);\n  compare_strings (use_quotearg_colon, &flag_results[1].group3, ascii_only);\n\n  ASSERT (set_quoting_flags (NULL, QA_SPLIT_TRIGRAPHS)\n          == QA_ELIDE_OUTER_QUOTES);\n  compare_strings (use_quotearg_buffer, &flag_results[2].group1, ascii_only);\n  compare_strings (use_quotearg, &flag_results[2].group2, ascii_only);\n  compare_strings (use_quote_double_quotes, &flag_results[2].group2,\n                   ascii_only);\n  compare_strings (use_quotearg_colon, &flag_results[2].group3, ascii_only);\n\n  ASSERT (set_quoting_flags (NULL, 0) == QA_SPLIT_TRIGRAPHS);\n\n  for (i = 0; i < sizeof custom_quotes / sizeof *custom_quotes; ++i)\n    {\n      set_custom_quoting (NULL,\n                          custom_quotes[i][0], custom_quotes[i][1]);\n      compare_strings (use_quotearg_buffer, &custom_results[i].group1,\n                       ascii_only);\n      compare_strings (use_quotearg, &custom_results[i].group2, ascii_only);\n      compare_strings (use_quotearg_colon, &custom_results[i].group3,\n                       ascii_only);\n    }\n\n  {\n    /* Trigger the bug whereby quotearg_buffer would read beyond the NUL\n       that defines the end of the string being quoted.  Use an input\n       string whose NUL is the last byte before an unreadable page.  */\n    char *z = zerosize_ptr ();\n\n    if (z)\n      {\n        size_t q_len = 1024;\n        char *q = malloc (q_len + 1);\n        char buf[10];\n        memset (q, 'Q', q_len);\n        q[q_len] = 0;\n\n        /* Z points to the boundary between a readable/writable page\n           and one that is neither readable nor writable.  Position\n           our string so its NUL is at the end of the writable one.  */\n        char const *str = \"____\";\n        size_t s_len = strlen (str);\n        z -= s_len + 1;\n        memcpy (z, str, s_len + 1);\n\n        set_custom_quoting (NULL, q, q);\n        /* Whether this actually triggers a SEGV depends on the\n           implementation of memcmp: whether it compares only byte-at-\n           a-time, and from left to right (no SEGV) or some other way.  */\n        size_t n = quotearg_buffer (buf, sizeof buf, z, SIZE_MAX, NULL);\n        ASSERT (n == s_len + 2 * q_len);\n        ASSERT (memcmp (buf, q, sizeof buf) == 0);\n        free (q);\n      }\n  }\n\n  quotearg_free ();\n\n  return 0;\n}",
      "lines": 110,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-quotearg.h": {
    "compare": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "static void\ncompare (char const *a, size_t la, char const *b, size_t lb)\n{\n  ASSERT (la == lb);\n  ASSERT (memcmp (a, b, la) == 0);\n  ASSERT (b[lb] == '\\0');\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "compare_strings": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "static void\ncompare_strings (char *(func) (char const *, size_t *),\n                 struct result_strings *results, bool ascii_only)\n{\n  size_t len;\n  char *p;\n\n  len = 0;\n  p = func (inputs.str1, &len);\n  compare (results->str1, strlen (results->str1), p, len);\n\n  len = inputs.len2;\n  p = func (inputs.str2, &len);\n  compare (results->str2, results->len2, p, len);\n\n  len = SIZE_MAX;\n  p = func (inputs.str3, &len);\n  compare (results->str3, strlen (results->str3), p, len);\n\n  len = strlen (inputs.str4);\n  p = func (inputs.str4, &len);\n  compare (results->str4, strlen (results->str4), p, len);\n\n  len = SIZE_MAX;\n  p = func (inputs.str5, &len);\n  compare (results->str5, strlen (results->str5), p, len);\n\n  len = strlen (inputs.str6);\n  p = func (inputs.str6, &len);\n  compare (results->str6, strlen (results->str6), p, len);\n\n  len = strlen (inputs.str7);\n  p = func (inputs.str7, &len);\n  compare (results->str7, strlen (results->str7), p, len);\n\n  len = strlen (inputs.str8a);\n  p = func (inputs.str8a, &len);\n  if (ascii_only)\n    compare (results->str8a, strlen (results->str8a), p, len);\n  else\n    compare (results->str8b, strlen (results->str8b), p, len);\n}",
      "lines": 42,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "use_quotearg_buffer": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        110,
        1
      ],
      "content": "static char *\nuse_quotearg_buffer (const char *str, size_t *len)\n{\n  static char buf[100];\n  size_t size;\n  memset (buf, 0xa5, 100);\n  size = quotearg_buffer (buf, 100, str, *len, NULL);\n  *len = size;\n  ASSERT ((unsigned char) buf[size + 1] == 0xa5);\n  return buf;\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nuse_quotearg_buffer (const char *str, size_t *len)",
        "*"
      ]
    },
    "use_quotearg": {
      "start_point": [
        112,
        0
      ],
      "end_point": [
        118,
        1
      ],
      "content": "static char *\nuse_quotearg (const char *str, size_t *len)\n{\n  char *p = *len == SIZE_MAX ? quotearg (str) : quotearg_mem (str, *len);\n  *len = strlen (p);\n  return p;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nuse_quotearg (const char *str, size_t *len)",
        "*"
      ]
    },
    "use_quotearg_colon": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "content": "static char *\nuse_quotearg_colon (const char *str, size_t *len)\n{\n  char *p = (*len == SIZE_MAX ? quotearg_colon (str)\n             : quotearg_colon_mem (str, *len));\n  *len = strlen (p);\n  return p;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nuse_quotearg_colon (const char *str, size_t *len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-read.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "int\nmain (void)\n{\n  const char *filename = \"test-read.tmp\";\n  int fd;\n\n  /* Create a file with a simple contents.  */\n  fd = open (filename, O_CREAT | O_WRONLY, 0600);\n  ASSERT (fd >= 0);\n  ASSERT (write (fd, \"Hello World\", 11) == 11);\n  ASSERT (close (fd) == 0);\n\n  /* Read from the middle of the file.  */\n  fd = open (filename, O_RDONLY);\n  ASSERT (fd >= 0);\n  ASSERT (lseek (fd, 6, SEEK_SET) == 6);\n  {\n    char buf[10];\n    ssize_t ret = read (fd, buf, 10);\n    ASSERT (ret == 5);\n    ASSERT (memcmp (buf, \"World\", 5) == 0);\n  }\n  ASSERT (close (fd) == 0);\n\n  /* Test behaviour for invalid file descriptors.  */\n  {\n    char byte;\n    errno = 0;\n    ASSERT (read (-1, &byte, 1) == -1);\n    ASSERT (errno == EBADF);\n  }\n  {\n    char byte;\n    close (99);\n    errno = 0;\n    ASSERT (read (99, &byte, 1) == -1);\n    ASSERT (errno == EBADF);\n  }\n\n  /* Clean up.  */\n  unlink (filename);\n\n  return 0;\n}",
      "lines": 44,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-realloc-gnu.c": {
    "main": {
      "start_point": [
        20,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Check that realloc (NULL, 0) is not a NULL pointer.  */\n  char *p = realloc (NULL, 0);\n  if (p == NULL)\n    return 1;\n\n  free (p);\n  return 0;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-regex.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "content": "int\nmain (void)\n{\n  int result = 0;\n  static struct re_pattern_buffer regex;\n  unsigned char folded_chars[UCHAR_MAX + 1];\n  int i;\n  const char *s;\n  struct re_registers regs;\n\n#if HAVE_DECL_ALARM\n  /* Some builds of glibc go into an infinite loop on this test.  */\n  int alarm_value = 2;\n  signal (SIGALRM, SIG_DFL);\n  alarm (alarm_value);\n#endif\n  if (setlocale (LC_ALL, \"en_US.UTF-8\"))\n    {\n      {\n        /* http://sourceware.org/ml/libc-hacker/2006-09/msg00008.html\n           This test needs valgrind to catch the bug on Debian\n           GNU/Linux 3.1 x86, but it might catch the bug better\n           on other platforms and it shouldn't hurt to try the\n           test here.  */\n        static char const pat[] = \"insert into\";\n        static char const data[] =\n          \"\\xFF\\0\\x12\\xA2\\xAA\\xC4\\xB1,K\\x12\\xC4\\xB1*\\xACK\";\n        re_set_syntax (RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE\n                       | RE_ICASE);\n        memset (&regex, 0, sizeof regex);\n        s = re_compile_pattern (pat, sizeof pat - 1, &regex);\n        if (s)\n          result |= 1;\n        else\n          {\n            memset (&regs, 0, sizeof regs);\n            if (re_search (&regex, data, sizeof data - 1,\n                           0, sizeof data - 1, &regs)\n                != -1)\n              result |= 1;\n            regfree (&regex);\n            free (regs.start);\n            free (regs.end);\n          }\n      }\n\n      /* Check whether it's really a UTF-8 locale.\n         On mingw, the setlocale call succeeds but returns\n         \"English_United States.1252\", with locale_charset() returning\n         \"CP1252\".  */\n      if (strcmp (locale_charset (), \"UTF-8\") == 0)\n        {\n          /* This test is from glibc bug 15078.\n             The test case is from Andreas Schwab in\n             <http://www.sourceware.org/ml/libc-alpha/2013-01/msg00967.html>.\n          */\n          static char const pat[] = \"[^x]x\";\n          static char const data[] =\n            /* <U1000><U103B><U103D><U1014><U103A><U102F><U1015><U103A> */\n            \"\\xe1\\x80\\x80\"\n            \"\\xe1\\x80\\xbb\"\n            \"\\xe1\\x80\\xbd\"\n            \"\\xe1\\x80\\x94\"\n            \"\\xe1\\x80\\xba\"\n            \"\\xe1\\x80\\xaf\"\n            \"\\xe1\\x80\\x95\"\n            \"\\xe1\\x80\\xba\"\n            \"x\";\n          re_set_syntax (0);\n          memset (&regex, 0, sizeof regex);\n          s = re_compile_pattern (pat, sizeof pat - 1, &regex);\n          if (s)\n            result |= 1;\n          else\n            {\n              memset (&regs, 0, sizeof regs);\n              i = re_search (&regex, data, sizeof data - 1,\n                             0, sizeof data - 1, 0);\n              if (i != 0 && i != 21)\n                result |= 1;\n              regfree (&regex);\n              free (regs.start);\n              free (regs.end);\n            }\n        }\n\n      if (! setlocale (LC_ALL, \"C\"))\n        return 1;\n    }\n\n  /* This test is from glibc bug 3957, reported by Andrew Mackey.  */\n  re_set_syntax (RE_SYNTAX_EGREP | RE_HAT_LISTS_NOT_NEWLINE);\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"a[^x]b\", 6, &regex);\n  if (s)\n    result |= 2;\n  /* This should fail, but succeeds for glibc-2.5.  */\n  else\n    {\n      memset (&regs, 0, sizeof regs);\n      if (re_search (&regex, \"a\\nb\", 3, 0, 3, &regs) != -1)\n        result |= 2;\n      regfree (&regex);\n      free (regs.start);\n      free (regs.end);\n    }\n\n  /* This regular expression is from Spencer ere test number 75\n     in grep-2.3.  */\n  re_set_syntax (RE_SYNTAX_POSIX_EGREP);\n  memset (&regex, 0, sizeof regex);\n  for (i = 0; i <= UCHAR_MAX; i++)\n    folded_chars[i] = i;\n  regex.translate = folded_chars;\n  s = re_compile_pattern (\"a[[:@:>@:]]b\\n\", 11, &regex);\n  /* This should fail with _Invalid character class name_ error.  */\n  if (!s)\n    {\n      result |= 4;\n      regfree (&regex);\n    }\n\n  /* Ensure that [b-a] is diagnosed as invalid, when\n     using RE_NO_EMPTY_RANGES. */\n  re_set_syntax (RE_SYNTAX_POSIX_EGREP | RE_NO_EMPTY_RANGES);\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"a[b-a]\", 6, &regex);\n  if (s == 0)\n    {\n      result |= 8;\n      regfree (&regex);\n    }\n\n  /* This should succeed, but does not for glibc-2.1.3.  */\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"{1\", 2, &regex);\n  if (s)\n    result |= 8;\n  else\n    regfree (&regex);\n\n  /* The following example is derived from a problem report\n     against gawk from Jorge Stolfi <stolfi@ic.unicamp.br>.  */\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"[an\\371]*n\", 7, &regex);\n  if (s)\n    result |= 8;\n  /* This should match, but does not for glibc-2.2.1.  */\n  else\n    {\n      memset (&regs, 0, sizeof regs);\n      if (re_match (&regex, \"an\", 2, 0, &regs) != 2)\n        result |= 8;\n      regfree (&regex);\n      free (regs.start);\n      free (regs.end);\n    }\n\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"x\", 1, &regex);\n  if (s)\n    result |= 8;\n  /* glibc-2.2.93 does not work with a negative RANGE argument.  */\n  else\n    {\n      memset (&regs, 0, sizeof regs);\n      if (re_search (&regex, \"wxy\", 3, 2, -2, &regs) != 1)\n        result |= 8;\n      regfree (&regex);\n      free (regs.start);\n      free (regs.end);\n    }\n\n  /* The version of regex.c in older versions of gnulib\n     ignored RE_ICASE.  Detect that problem too.  */\n  re_set_syntax (RE_SYNTAX_EMACS | RE_ICASE);\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"x\", 1, &regex);\n  if (s)\n    result |= 16;\n  else\n    {\n      memset (&regs, 0, sizeof regs);\n      if (re_search (&regex, \"WXY\", 3, 0, 3, &regs) < 0)\n        result |= 16;\n      regfree (&regex);\n      free (regs.start);\n      free (regs.end);\n    }\n\n  /* Catch a bug reported by Vin Shelton in\n     http://lists.gnu.org/archive/html/bug-coreutils/2007-06/msg00089.html\n     */\n  re_set_syntax (RE_SYNTAX_POSIX_BASIC\n                 & ~RE_CONTEXT_INVALID_DUP\n                 & ~RE_NO_EMPTY_RANGES);\n  memset (&regex, 0, sizeof regex);\n  s = re_compile_pattern (\"[[:alnum:]_-]\\\\\\\\+$\", 16, &regex);\n  if (s)\n    result |= 32;\n  else\n    regfree (&regex);\n\n  /* REG_STARTEND was added to glibc on 2004-01-15.\n     Reject older versions.  */\n  if (! REG_STARTEND)\n    result |= 64;\n\n#if 0\n  /* It would be nice to reject hosts whose regoff_t values are too\n     narrow (including glibc on hosts with 64-bit ptrdiff_t and\n     32-bit int), but we should wait until glibc implements this\n     feature.  Otherwise, support for equivalence classes and\n     multibyte collation symbols would always be broken except\n     when compiling --without-included-regex.   */\n  if (sizeof (regoff_t) < sizeof (ptrdiff_t)\n      || sizeof (regoff_t) < sizeof (ssize_t))\n    result |= 64;\n#endif\n\n  return result;\n}",
      "lines": 222,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-setenv.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Test overwriting.  */\n  ASSERT (setenv (\"a\", \"==\", -1) == 0);\n  ASSERT (setenv (\"a\", \"2\", 0) == 0);\n  ASSERT (strcmp (getenv (\"a\"), \"==\") == 0);\n\n  /* Required to fail with EINVAL.  */\n  errno = 0;\n  ASSERT (setenv (\"\", \"\", 1) == -1);\n  ASSERT (errno == EINVAL);\n  errno = 0;\n  ASSERT (setenv (\"a=b\", \"\", 0) == -1);\n  ASSERT (errno == EINVAL);\n#if 0\n  /* glibc and gnulib's implementation guarantee this, but POSIX no\n     longer requires it: http://austingroupbugs.net/view.php?id=185  */\n  errno = 0;\n  ASSERT (setenv (NULL, \"\", 0) == -1);\n  ASSERT (errno == EINVAL);\n#endif\n\n  return 0;\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-setlocale1.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        60,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  char *name1;\n  char *name2;\n\n  /* Try to set the locale by implicitly looking at the LC_ALL environment\n     variable.\n     configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  name1 = strdup (setlocale (LC_ALL, NULL));\n\n  /* Reset the locale.  */\n  if (setlocale (LC_ALL, \"C\") == NULL)\n    return 1;\n\n  /* Try to set the locale by explicitly looking at the LC_ALL environment\n     variable.\n     configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, getenv (\"LC_ALL\")) == NULL)\n    return 1;\n\n  name2 = strdup (setlocale (LC_ALL, NULL));\n\n  /* Test that the two results are the same.  */\n  ASSERT (strcmp (name1, name2) == 0);\n  free (name1);\n  free (name2);\n\n  return 0;\n}",
      "lines": 33,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-setlocale2.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Try to set the locale by implicitly looking at the LC_ALL environment\n     variable.  */\n  if (setlocale (LC_ALL, \"\") != NULL)\n    /* It was successful.  Check whether LC_CTYPE is non-trivial.  */\n    if (strcmp (setlocale (LC_CTYPE, NULL), \"C\") == 0)\n      {\n        fprintf (stderr, \"setlocale did not fail for implicit %s\\n\",\n                 getenv (\"LC_ALL\"));\n        return 1;\n      }\n\n  /* Reset the locale.  */\n  if (setlocale (LC_ALL, \"C\") == NULL)\n    return 1;\n\n  /* Try to set the locale by explicitly looking at the LC_ALL environment\n     variable.  */\n  if (setlocale (LC_ALL, getenv (\"LC_ALL\")) != NULL)\n    /* It was successful.  Check whether LC_CTYPE is non-trivial.  */\n    if (strcmp (setlocale (LC_CTYPE, NULL), \"C\") == 0)\n      {\n        fprintf (stderr, \"setlocale did not fail for explicit %s\\n\",\n                 getenv (\"LC_ALL\"));\n        return 1;\n      }\n\n  return 0;\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-snprintf.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  char buf[8];\n  int size;\n  int retval;\n\n  retval = snprintf (NULL, 0, \"%d\", 12345);\n  ASSERT (retval == 5);\n\n  for (size = 0; size <= 8; size++)\n    {\n      memcpy (buf, \"DEADBEEF\", 8);\n      retval = snprintf (buf, size, \"%d\", 12345);\n      ASSERT (retval == 5);\n      if (size < 6)\n        {\n          if (size > 0)\n            {\n              ASSERT (memcmp (buf, \"12345\", size - 1) == 0);\n              ASSERT (buf[size - 1] == '\\0' || buf[size - 1] == '0' + size);\n            }\n#if !CHECK_SNPRINTF_POSIX\n          if (size > 0)\n#endif\n            ASSERT (memcmp (buf + size, &\"DEADBEEF\"[size], 8 - size) == 0);\n        }\n      else\n        {\n          ASSERT (memcmp (buf, \"12345\\0EF\", 8) == 0);\n        }\n    }\n\n  /* Test the support of the POSIX/XSI format strings with positions.  */\n  {\n    char result[100];\n    retval = snprintf (result, sizeof (result), \"%2$d %1$d\", 33, 55);\n    ASSERT (strcmp (result, \"55 33\") == 0);\n    ASSERT (retval == strlen (result));\n  }\n\n  return 0;\n}",
      "lines": 43,
      "depth": 16,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stat.c": {
    "do_stat": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "static int\ndo_stat (char const *name, struct stat *st)\n{\n  return stat (name, st);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nmain (void)\n{\n  return test_stat_func (do_stat, true);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stat.h": {
    "test_stat_func": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        100,
        1
      ],
      "content": "static int\ntest_stat_func (int (*func) (char const *, struct stat *), bool print)\n{\n  struct stat st1;\n  struct stat st2;\n  char *cwd = getcwd (NULL, 0);\n\n  ASSERT (cwd);\n  ASSERT (func (\".\", &st1) == 0);\n  ASSERT (func (\"./\", &st2) == 0);\n  ASSERT (SAME_INODE (st1, st2));\n  ASSERT (func (cwd, &st2) == 0);\n  ASSERT (SAME_INODE (st1, st2));\n  ASSERT (func (\"/\", &st1) == 0);\n  ASSERT (func (\"///\", &st2) == 0);\n  ASSERT (SAME_INODE (st1, st2));\n\n  errno = 0;\n  ASSERT (func (\"\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n  errno = 0;\n  ASSERT (func (\"nosuch\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n  errno = 0;\n  ASSERT (func (\"nosuch/\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n\n  ASSERT (close (creat (BASE \"file\", 0600)) == 0);\n  ASSERT (func (BASE \"file\", &st1) == 0);\n  errno = 0;\n  ASSERT (func (BASE \"file/\", &st1) == -1);\n  ASSERT (errno == ENOTDIR);\n\n  /* Now for some symlink tests, where supported.  We set up:\n     link1 -> directory\n     link2 -> file\n     link3 -> dangling\n     link4 -> loop\n     then test behavior with trailing slash.\n  */\n  if (symlink (\".\", BASE \"link1\") != 0)\n    {\n      ASSERT (unlink (BASE \"file\") == 0);\n      if (print)\n        fputs (\"skipping test: symlinks not supported on this file system\\n\",\n               stderr);\n      return 77;\n    }\n  ASSERT (symlink (BASE \"file\", BASE \"link2\") == 0);\n  ASSERT (symlink (BASE \"nosuch\", BASE \"link3\") == 0);\n  ASSERT (symlink (BASE \"link4\", BASE \"link4\") == 0);\n\n  ASSERT (func (BASE \"link1/\", &st1) == 0);\n  ASSERT (S_ISDIR (st1.st_mode));\n\n  errno = 0;\n  ASSERT (func (BASE \"link2/\", &st1) == -1);\n  ASSERT (errno == ENOTDIR);\n\n  errno = 0;\n  ASSERT (func (BASE \"link3/\", &st1) == -1);\n  ASSERT (errno == ENOENT);\n\n  errno = 0;\n  ASSERT (func (BASE \"link4/\", &st1) == -1);\n  ASSERT (errno == ELOOP);\n\n  /* Cleanup.  */\n  ASSERT (unlink (BASE \"file\") == 0);\n  ASSERT (unlink (BASE \"link1\") == 0);\n  ASSERT (unlink (BASE \"link2\") == 0);\n  ASSERT (unlink (BASE \"link3\") == 0);\n  ASSERT (unlink (BASE \"link4\") == 0);\n  free (cwd);\n\n  return 0;\n}",
      "lines": 77,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stdalign.c": {
    "main": {
      "start_point": [
        79,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "content": "int\nmain ()\n{\n#if defined __SUNPRO_C\n  /* Avoid a test failure due to Sun Studio Developer Bug Report #2125432.  */\n  fputs (\"Skipping test: known Sun C compiler bug\\n\", stderr);\n  return 77;\n#elif defined __HP_cc && __ia64\n  /* Avoid a test failure due to HP-UX Itanium cc bug; see:\n     http://lists.gnu.org/archive/html/bug-gnulib/2017-03/msg00078.html  */\n  fputs (\"Skipping test: known HP-UX Itanium cc compiler bug\\n\", stderr);\n  return 77;\n#else\n  CHECK_ALIGNED (static_char_alignas);\n  CHECK_ALIGNED (static_char_Alignas);\n  CHECK_ALIGNED (static_short_alignas);\n  CHECK_ALIGNED (static_short_Alignas);\n  CHECK_ALIGNED (static_int_alignas);\n  CHECK_ALIGNED (static_int_Alignas);\n  CHECK_ALIGNED (static_long_alignas);\n  CHECK_ALIGNED (static_long_Alignas);\n# ifdef INT64_MAX\n  CHECK_ALIGNED (static_int64_t_alignas);\n  CHECK_ALIGNED (static_int64_t_Alignas);\n# endif\n  CHECK_ALIGNED (static_float_alignas);\n  CHECK_ALIGNED (static_float_Alignas);\n  CHECK_ALIGNED (static_double_alignas);\n  CHECK_ALIGNED (static_double_Alignas);\n  /* CHECK_ALIGNED (static_longdouble_alignas); */\n  /* CHECK_ALIGNED (static_longdouble_Alignas); */\n  CHECK_ALIGNED (static_struct1_alignas);\n  CHECK_ALIGNED (static_struct1_Alignas);\n  CHECK_ALIGNED (static_struct2_alignas);\n  CHECK_ALIGNED (static_struct2_Alignas);\n  CHECK_ALIGNED (static_struct3_alignas);\n  CHECK_ALIGNED (static_struct3_Alignas);\n  CHECK_ALIGNED (static_struct4_alignas);\n  CHECK_ALIGNED (static_struct4_Alignas);\n  return 0;\n#endif\n}",
      "lines": 42,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stdbool.c": {
    "main": {
      "start_point": [
        89,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "content": "int\nmain ()\n{\n  int error = 0;\n\n#if HAVE_STDBOOL_H || 3 <= __GNUC__ /* See above.  */\n# ifdef ADDRESS_CHECK_OKAY /* Avoid gcc warning.  */\n  /* A cast from a variable's address to bool is valid in expressions.  */\n  {\n    bool e1 = &s;\n    if (!e1)\n      error = 1;\n  }\n# endif\n#endif\n\n  /* Catch a bug in IBM AIX xlc compiler version 6.0.0.0\n     reported by James Lemley on 2005-10-05; see\n     http://lists.gnu.org/archive/html/bug-coreutils/2005-10/msg00086.html\n     This is a runtime test, since a corresponding compile-time\n     test would rely on initializer extensions.  */\n  {\n    char digs[] = \"0123456789\";\n    if (&(digs + 5)[-2 + (bool) 1] != &digs[4])\n      error = 1;\n  }\n\n  return error;\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stddef.c": {
    "main": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stdint.c": {
    "main": {
      "start_point": [
        421,
        0
      ],
      "end_point": [
        425,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stdio.c": {
    "main": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        42,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-stdlib.c": {
    "main": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        53,
        1
      ],
      "content": "int\nmain (void)\n{\n  if (test_sys_wait_macros ())\n    return 1;\n\n  return exitcode;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strerror.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "content": "int\nmain (void)\n{\n  char *str;\n\n  errno = 0;\n  str = strerror (EACCES);\n  ASSERT (str);\n  ASSERT (*str);\n  ASSERT (errno == 0);\n\n  errno = 0;\n  str = strerror (ETIMEDOUT);\n  ASSERT (str);\n  ASSERT (*str);\n  ASSERT (errno == 0);\n\n  errno = 0;\n  str = strerror (EOVERFLOW);\n  ASSERT (str);\n  ASSERT (*str);\n  ASSERT (errno == 0);\n\n  /* POSIX requires strerror (0) to succeed.  Reject use of \"Unknown\n     error\", but allow \"Success\", \"No error\", or even Solaris' \"Error\n     0\" which are distinct patterns from true out-of-range strings.\n     http://austingroupbugs.net/view.php?id=382  */\n  errno = 0;\n  str = strerror (0);\n  ASSERT (str);\n  ASSERT (*str);\n  ASSERT (errno == 0);\n  ASSERT (strstr (str, \"nknown\") == NULL);\n  ASSERT (strstr (str, \"ndefined\") == NULL);\n\n  /* POSIX requires strerror to produce a non-NULL result for all\n     inputs; as an extension, we also guarantee a non-empty result.\n     Reporting EINVAL is optional.  */\n  errno = 0;\n  str = strerror (-3);\n  ASSERT (str);\n  ASSERT (*str);\n  ASSERT (errno == 0 || errno == EINVAL);\n\n  return 0;\n}",
      "lines": 46,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-striconv.c": {
    "main": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "int\nmain ()\n{\n#if HAVE_ICONV\n  /* Assume that iconv() supports at least the encodings ASCII, ISO-8859-1,\n     and UTF-8.  */\n  iconv_t cd_88591_to_utf8 = iconv_open (\"UTF-8\", \"ISO-8859-1\");\n  iconv_t cd_utf8_to_88591 = iconv_open (\"ISO-8859-1\", \"UTF-8\");\n\n  ASSERT (cd_88591_to_utf8 != (iconv_t)(-1));\n  ASSERT (cd_utf8_to_88591 != (iconv_t)(-1));\n\n  /* ------------------------- Test mem_cd_iconv() ------------------------- */\n\n  /* Test conversion from ISO-8859-1 to UTF-8 with no errors.  */\n  {\n    static const char input[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    static const char expected[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    char *result = NULL;\n    size_t length = 0;\n    int retval = mem_cd_iconv (input, strlen (input), cd_88591_to_utf8,\n                               &result, &length);\n    ASSERT (retval == 0);\n    ASSERT (length == strlen (expected));\n    ASSERT (result != NULL && memcmp (result, expected, strlen (expected)) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with no errors.  */\n  {\n    static const char input[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    static const char expected[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    char *result = NULL;\n    size_t length = 0;\n    int retval = mem_cd_iconv (input, strlen (input), cd_utf8_to_88591,\n                               &result, &length);\n    ASSERT (retval == 0);\n    ASSERT (length == strlen (expected));\n    ASSERT (result != NULL && memcmp (result, expected, strlen (expected)) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EILSEQ.  */\n  {\n    static const char input[] = \"\\342\\202\\254\"; /* EURO SIGN */\n    char *result = NULL;\n    size_t length = 0;\n    int retval = mem_cd_iconv (input, strlen (input), cd_utf8_to_88591,\n                               &result, &length);\n    ASSERT (retval == -1 && errno == EILSEQ);\n    ASSERT (result == NULL);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EINVAL.  */\n  {\n    static const char input[] = \"\\342\";\n    char *result = NULL;\n    size_t length = 0;\n    int retval = mem_cd_iconv (input, strlen (input), cd_utf8_to_88591,\n                               &result, &length);\n    ASSERT (retval == 0);\n    ASSERT (length == 0);\n    free (result);\n  }\n\n  /* ------------------------- Test str_cd_iconv() ------------------------- */\n\n  /* Test conversion from ISO-8859-1 to UTF-8 with no errors.  */\n  {\n    static const char input[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    static const char expected[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    char *result = str_cd_iconv (input, cd_88591_to_utf8);\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, expected) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with no errors.  */\n  {\n    static const char input[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    static const char expected[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    char *result = str_cd_iconv (input, cd_utf8_to_88591);\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, expected) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EILSEQ.  */\n  {\n    static const char input[] = \"Costs: 27 \\342\\202\\254\"; /* EURO SIGN */\n    char *result = str_cd_iconv (input, cd_utf8_to_88591);\n    ASSERT (result == NULL && errno == EILSEQ);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EINVAL.  */\n  {\n    static const char input[] = \"\\342\";\n    char *result = str_cd_iconv (input, cd_utf8_to_88591);\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, \"\") == 0);\n    free (result);\n  }\n\n  iconv_close (cd_88591_to_utf8);\n  iconv_close (cd_utf8_to_88591);\n\n  /* -------------------------- Test str_iconv() -------------------------- */\n\n  /* Test conversion from ISO-8859-1 to UTF-8 with no errors.  */\n  {\n    static const char input[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    static const char expected[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    char *result = str_iconv (input, \"ISO-8859-1\", \"UTF-8\");\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, expected) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with no errors.  */\n  {\n    static const char input[] = \"\\303\\204rger mit b\\303\\266sen B\\303\\274bchen ohne Augenma\\303\\237\";\n    static const char expected[] = \"\\304rger mit b\\366sen B\\374bchen ohne Augenma\\337\";\n    char *result = str_iconv (input, \"UTF-8\", \"ISO-8859-1\");\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, expected) == 0);\n    free (result);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EILSEQ.  */\n  {\n    static const char input[] = \"Costs: 27 \\342\\202\\254\"; /* EURO SIGN */\n    char *result = str_iconv (input, \"UTF-8\", \"ISO-8859-1\");\n    ASSERT (result == NULL && errno == EILSEQ);\n  }\n\n  /* Test conversion from UTF-8 to ISO-8859-1 with EINVAL.  */\n  {\n    static const char input[] = \"\\342\";\n    char *result = str_iconv (input, \"UTF-8\", \"ISO-8859-1\");\n    ASSERT (result != NULL);\n    ASSERT (strcmp (result, \"\") == 0);\n    free (result);\n  }\n\n#endif\n\n  return 0;\n}",
      "lines": 148,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-string.c": {
    "main": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        32,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strnlen.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "int\nmain (void)\n{\n  size_t i;\n  char *page_boundary = (char *) zerosize_ptr ();\n  if (!page_boundary)\n    {\n      page_boundary = malloc (0x1000);\n      ASSERT (page_boundary);\n      page_boundary += 0x1000;\n    }\n\n  /* Basic behavior tests.  */\n  ASSERT (strnlen (\"a\", 0) == 0);\n  ASSERT (strnlen (\"a\", 1) == 1);\n  ASSERT (strnlen (\"a\", 2) == 1);\n  ASSERT (strnlen (\"\", 0x100000) == 0);\n\n  /* Memory fence and alignment testing.  */\n  for (i = 0; i < 512; i++)\n    {\n      char *start = page_boundary - i;\n      size_t j = i;\n      memset (start, 'x', i);\n      do\n        {\n          if (i != j)\n            {\n              start[j] = 0;\n              ASSERT (strnlen (start, i + j) == j);\n            }\n          ASSERT (strnlen (start, i) == j);\n          ASSERT (strnlen (start, j) == j);\n        }\n      while (j--);\n    }\n\n  return 0;\n}",
      "lines": 39,
      "depth": 16,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strstr.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n#if HAVE_DECL_ALARM\n  /* Declare failure if test takes too long, by using default abort\n     caused by SIGALRM.  All known platforms that lack alarm also have\n     a quadratic strstr, and the replacement strstr is known to not\n     take too long.  */\n  int alarm_value = 50;\n  signal (SIGALRM, SIG_DFL);\n  alarm (alarm_value);\n#endif\n\n  {\n    const char input[] = \"foo\";\n    const char *result = strstr (input, \"\");\n    ASSERT (result == input);\n  }\n\n  {\n    const char input[] = \"foo\";\n    const char *result = strstr (input, \"o\");\n    ASSERT (result == input + 1);\n  }\n\n  {\n    /* On some platforms, the memchr() functions reads past the first\n       occurrence of the byte to be searched, leading to an out-of-bounds\n       read access for strstr().\n       See <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=521737>.\n       This is a bug in memchr(), see the Austin Group's clarification\n       <http://www.opengroup.org/austin/docs/austin_454.txt>.  */\n    const char *fix = \"aBaaaaaaaaaaax\";\n    char *page_boundary = (char *) zerosize_ptr ();\n    size_t len = strlen (fix) + 1;\n    char *input = page_boundary ? page_boundary - len : malloc (len);\n    const char *result;\n\n    strcpy (input, fix);\n    result = strstr (input, \"B1x\");\n    ASSERT (result == NULL);\n    if (!page_boundary)\n      free (input);\n  }\n\n  {\n    const char input[] = \"ABC ABCDAB ABCDABCDABDE\";\n    const char *result = strstr (input, \"ABCDABD\");\n    ASSERT (result == input + 15);\n  }\n\n  {\n    const char input[] = \"ABC ABCDAB ABCDABCDABDE\";\n    const char *result = strstr (input, \"ABCDABE\");\n    ASSERT (result == NULL);\n  }\n\n  {\n    const char input[] = \"ABC ABCDAB ABCDABCDABDE\";\n    const char *result = strstr (input, \"ABCDABCD\");\n    ASSERT (result == input + 11);\n  }\n\n  /* Check that a long periodic needle does not cause false positives.  */\n  {\n    const char input[] = \"F_BD_CE_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD\"\n                         \"_C3_88_20_EF_BF_BD_EF_BF_BD_EF_BF_BD\"\n                         \"_C3_A7_20_EF_BF_BD\";\n    const char need[] = \"_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD\";\n    const char *result = strstr (input, need);\n    ASSERT (result == NULL);\n  }\n  {\n    const char input[] = \"F_BD_CE_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD\"\n                         \"_C3_88_20_EF_BF_BD_EF_BF_BD_EF_BF_BD\"\n                         \"_C3_A7_20_EF_BF_BD_DA_B5_C2_A6_20\"\n                         \"_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD\";\n    const char need[] = \"_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD\";\n    const char *result = strstr (input, need);\n    ASSERT (result == input + 115);\n  }\n\n  /* Check that a very long haystack is handled quickly if the needle is\n     short and occurs near the beginning.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *needle =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n    char *haystack = (char *) malloc (m + 1);\n    if (haystack != NULL)\n      {\n        memset (haystack, 'A', m);\n        haystack[0] = 'B';\n        haystack[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (strstr (haystack, needle) == haystack + 1);\n          }\n\n        free (haystack);\n      }\n  }\n\n  /* Check that a very long needle is discarded quickly if the haystack is\n     short.  */\n  {\n    size_t repeat = 10000;\n    size_t m = 1000000;\n    const char *haystack =\n      \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      \"ABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB\";\n    char *needle = (char *) malloc (m + 1);\n    if (needle != NULL)\n      {\n        memset (needle, 'A', m);\n        needle[m] = '\\0';\n\n        for (; repeat > 0; repeat--)\n          {\n            ASSERT (strstr (haystack, needle) == NULL);\n          }\n\n        free (needle);\n      }\n  }\n\n  /* Check that the asymptotic worst-case complexity is not quadratic.  */\n  {\n    size_t m = 1000000;\n    char *haystack = (char *) malloc (2 * m + 2);\n    char *needle = (char *) malloc (m + 2);\n    if (haystack != NULL && needle != NULL)\n      {\n        const char *result;\n\n        memset (haystack, 'A', 2 * m);\n        haystack[2 * m] = 'B';\n        haystack[2 * m + 1] = '\\0';\n\n        memset (needle, 'A', m);\n        needle[m] = 'B';\n        needle[m + 1] = '\\0';\n\n        result = strstr (haystack, needle);\n        ASSERT (result == haystack + m);\n      }\n    free (needle);\n    free (haystack);\n  }\n\n  /* Sublinear speed is only possible in memmem; strstr must examine\n     every character of haystack to find its length.  */\n\n\n  {\n    /* Ensure that with a barely periodic \"short\" needle, strstr's\n       search does not mistakenly skip just past the match point.\n       This use of strstr would mistakenly return NULL before\n       gnulib v0.0-4927.  */\n    const char *haystack =\n      \"\\n\"\n      \"with_build_libsubdir\\n\"\n      \"with_local_prefix\\n\"\n      \"with_gxx_include_dir\\n\"\n      \"with_cpp_install_dir\\n\"\n      \"enable_generated_files_in_srcdir\\n\"\n      \"with_gnu_ld\\n\"\n      \"with_ld\\n\"\n      \"with_demangler_in_ld\\n\"\n      \"with_gnu_as\\n\"\n      \"with_as\\n\"\n      \"enable_largefile\\n\"\n      \"enable_werror_always\\n\"\n      \"enable_checking\\n\"\n      \"enable_coverage\\n\"\n      \"enable_gather_detailed_mem_stats\\n\"\n      \"enable_build_with_cxx\\n\"\n      \"with_stabs\\n\"\n      \"enable_multilib\\n\"\n      \"enable___cxa_atexit\\n\"\n      \"enable_decimal_float\\n\"\n      \"enable_fixed_point\\n\"\n      \"enable_threads\\n\"\n      \"enable_tls\\n\"\n      \"enable_objc_gc\\n\"\n      \"with_dwarf2\\n\"\n      \"enable_shared\\n\"\n      \"with_build_sysroot\\n\"\n      \"with_sysroot\\n\"\n      \"with_specs\\n\"\n      \"with_pkgversion\\n\"\n      \"with_bugurl\\n\"\n      \"enable_languages\\n\"\n      \"with_multilib_list\\n\";\n    const char *needle = \"\\n\"\n      \"with_gnu_ld\\n\";\n    const char* p = strstr (haystack, needle);\n    ASSERT (p - haystack == 114);\n  }\n\n  {\n    /* Same bug, shorter trigger.  */\n    const char *haystack = \"..wi.d.\";\n    const char *needle = \".d.\";\n    const char* p = strstr (haystack, needle);\n    ASSERT (p - haystack == 4);\n  }\n\n  {\n    /* Like the above, but trigger the flaw in two_way_long_needle\n       by using a needle of length LONG_NEEDLE_THRESHOLD (32) or greater.\n       Rather than trying to find the right alignment manually, I've\n       arbitrarily chosen the following needle and template for the\n       haystack, and ensure that for each placement of the needle in\n       that haystack, strstr finds it.  */\n    const char *needle = \"\\nwith_gnu_ld-extend-to-len-32-b\\n\";\n    const char *h =\n      \"\\n\"\n      \"with_build_libsubdir\\n\"\n      \"with_local_prefix\\n\"\n      \"with_gxx_include_dir\\n\"\n      \"with_cpp_install_dir\\n\"\n      \"with_e_\\n\"\n      \"..............................\\n\"\n      \"with_FGHIJKLMNOPQRSTUVWXYZ\\n\"\n      \"with_567890123456789\\n\"\n      \"with_multilib_list\\n\";\n    size_t h_len = strlen (h);\n    char *haystack = malloc (h_len + 1);\n    size_t i;\n    ASSERT (haystack);\n    for (i = 0; i < h_len - strlen (needle); i++)\n      {\n        const char *p;\n        memcpy (haystack, h, h_len + 1);\n        memcpy (haystack + i, needle, strlen (needle) + 1);\n        p = strstr (haystack, needle);\n        ASSERT (p);\n        ASSERT (p - haystack == i);\n      }\n    free (haystack);\n  }\n\n  return 0;\n}",
      "lines": 248,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strtoimax.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Subject sequence empty or invalid.  */\n  {\n    const char input[] = \"\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" \";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" +\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" -\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n\n  /* Simple integer values.  */\n  {\n    const char input[] = \"0\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 1);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+0\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-0\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"23\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \" 23\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+23\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-23\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == -23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n\n  /* Large integer values.  */\n  {\n    const char input[] = \"2147483647\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == 2147483647);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-2147483648\";\n    char *ptr;\n    intmax_t result;\n    errno = 0;\n    result = strtoimax (input, &ptr, 10);\n    ASSERT (result == -2147483647 - 1);\n    ASSERT (ptr == input + 11);\n    ASSERT (errno == 0);\n  }\n  if (sizeof (intmax_t) > sizeof (int))\n    {\n      const char input[] = \"4294967295\";\n      char *ptr;\n      intmax_t result;\n      errno = 0;\n      result = strtoimax (input, &ptr, 10);\n      ASSERT (result == (intmax_t) 65535 * (intmax_t) 65537);\n      ASSERT (ptr == input + 10);\n      ASSERT (errno == 0);\n    }\n\n  return 0;\n}",
      "lines": 152,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strtoll.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Subject sequence empty or invalid.  */\n  {\n    const char input[] = \"\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" \";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" +\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" -\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n\n  /* Simple integer values.  */\n  {\n    const char input[] = \"0\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 1);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+0\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-0\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"23\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \" 23\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+23\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-23\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == -23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n\n  /* Large integer values.  */\n  {\n    const char input[] = \"2147483647\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == 2147483647);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-2147483648\";\n    char *ptr;\n    long long result;\n    errno = 0;\n    result = strtoll (input, &ptr, 10);\n    ASSERT (result == -2147483647 - 1);\n    ASSERT (ptr == input + 11);\n    ASSERT (errno == 0);\n  }\n  if (sizeof (long long) > sizeof (int))\n    {\n      const char input[] = \"4294967295\";\n      char *ptr;\n      long long result;\n      errno = 0;\n      result = strtoll (input, &ptr, 10);\n      ASSERT (result == 65535LL * 65537LL);\n      ASSERT (ptr == input + 10);\n      ASSERT (errno == 0);\n    }\n\n  return 0;\n}",
      "lines": 152,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strtoull.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Subject sequence empty or invalid.  */\n  {\n    const char input[] = \"\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" \";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" +\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" -\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n\n  /* Simple integer values.  */\n  {\n    const char input[] = \"0\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 1);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+0\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-0\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"23\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \" 23\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+23\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-23\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == - 23ULL);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n\n  /* Large integer values.  */\n  {\n    const char input[] = \"2147483647\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 2147483647);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-2147483648\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == - 2147483648ULL);\n    ASSERT (ptr == input + 11);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"4294967295\";\n    char *ptr;\n    unsigned long long result;\n    errno = 0;\n    result = strtoull (input, &ptr, 10);\n    ASSERT (result == 4294967295U);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n\n  return 0;\n}",
      "lines": 151,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-strtoumax.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Subject sequence empty or invalid.  */\n  {\n    const char input[] = \"\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" \";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" +\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n  {\n    const char input[] = \" -\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input);\n    ASSERT (errno == 0 || errno == EINVAL);\n  }\n\n  /* Simple integer values.  */\n  {\n    const char input[] = \"0\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 1);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+0\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-0\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 0);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"23\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 2);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \" 23\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"+23\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-23\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == - (uintmax_t) 23);\n    ASSERT (ptr == input + 3);\n    ASSERT (errno == 0);\n  }\n\n  /* Large integer values.  */\n  {\n    const char input[] = \"2147483647\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 2147483647);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"-2147483648\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == - (uintmax_t) 2147483648U);\n    ASSERT (ptr == input + 11);\n    ASSERT (errno == 0);\n  }\n  {\n    const char input[] = \"4294967295\";\n    char *ptr;\n    uintmax_t result;\n    errno = 0;\n    result = strtoumax (input, &ptr, 10);\n    ASSERT (result == 4294967295U);\n    ASSERT (ptr == input + 10);\n    ASSERT (errno == 0);\n  }\n\n  return 0;\n}",
      "lines": 151,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-symlink.c": {
    "main": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Remove any leftovers from a previous partial run.  */\n  ignore_value (system (\"rm -rf \" BASE \"*\"));\n\n  return test_symlink (symlink, true);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-symlink.h": {
    "test_symlink": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "content": "static int\ntest_symlink (int (*func) (char const *, char const *), bool print)\n{\n  if (func (\"nowhere\", BASE \"link1\"))\n    {\n      if (print)\n        fputs (\"skipping test: symlinks not supported on this file system\\n\",\n               stderr);\n      return 77;\n    }\n\n  /* Some systems allow the creation of 0-length symlinks as a synonym\n     for \".\"; but most reject it.  */\n  {\n    int status;\n    errno = 0;\n    status = func (\"\", BASE \"link2\");\n    if (status == -1)\n      ASSERT (errno == ENOENT || errno == EINVAL);\n    else\n      {\n        ASSERT (status == 0);\n        ASSERT (unlink (BASE \"link2\") == 0);\n      }\n  }\n\n  /* Sanity checks of failures.  */\n  errno = 0;\n  ASSERT (func (\"nowhere\", \"\") == -1);\n  ASSERT (errno == ENOENT);\n  errno = 0;\n  ASSERT (func (\"nowhere\", \".\") == -1);\n  ASSERT (errno == EEXIST || errno == EINVAL);\n  errno = 0;\n  ASSERT (func (\"somewhere\", BASE \"link1\") == -1);\n  ASSERT (errno == EEXIST);\n  errno = 0;\n  ASSERT (func (\"nowhere\", BASE \"link2/\") == -1);\n  ASSERT (errno == ENOTDIR || errno == ENOENT);\n  ASSERT (mkdir (BASE \"dir\", 0700) == 0);\n  errno = 0;\n  ASSERT (func (\"nowhere\", BASE \"dir\") == -1);\n  ASSERT (errno == EEXIST);\n  errno = 0;\n  ASSERT (func (\"nowhere\", BASE \"dir/\") == -1);\n  ASSERT (errno == EEXIST || errno == EINVAL);\n  ASSERT (close (creat (BASE \"file\", 0600)) == 0);\n  errno = 0;\n  ASSERT (func (\"nowhere\", BASE \"file\") == -1);\n  ASSERT (errno == EEXIST);\n  errno = 0;\n  ASSERT (func (\"nowhere\", BASE \"file/\") == -1);\n  ASSERT (errno == EEXIST || errno == ENOTDIR || errno == ENOENT);\n\n  /* Trailing slash must always be rejected.  */\n  ASSERT (unlink (BASE \"link1\") == 0);\n  ASSERT (func (BASE \"link2\", BASE \"link1\") == 0);\n  errno = 0;\n  ASSERT (func (BASE \"nowhere\", BASE \"link1/\") == -1);\n  ASSERT (errno == EEXIST || errno == ENOTDIR || errno == ENOENT);\n  errno = 0;\n  ASSERT (unlink (BASE \"link2\") == -1);\n  ASSERT (errno == ENOENT);\n\n  /* Cleanup.  */\n  ASSERT (rmdir (BASE \"dir\") == 0);\n  ASSERT (unlink (BASE \"file\") == 0);\n  ASSERT (unlink (BASE \"link1\") == 0);\n\n  return 0;\n}",
      "lines": 71,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-sys_stat.c": {
    "main": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        339,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-sys_types.c": {
    "main": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-sys_wait.h": {
    "test_sys_wait_macros": {
      "start_point": [
        18,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "static int\ntest_sys_wait_macros (void)\n{\n  /* Check subset of <sys/wait.h> macros that must be visible here.\n     Note that some of these macros are only portable when operating\n     on an lvalue.  */\n  int i;\n  for (i = 0; i < 0x8000; i = (i ? i << 1 : 1))\n    {\n      /* POSIX requires that for all valid process statuses, that\n         exactly one of these three macros is true.  But not all\n         possible 16-bit values map to valid process status.\n         Traditionally, 8 of the bits are for WIFEXITED, 7 of the bits\n         to tell between WIFSIGNALED and WIFSTOPPED, and either 0x80\n         or 0x8000 to flag that core was also dumped.  Since we don't\n         know which byte is WIFEXITED, we skip the both possible bits\n         that can signal core dump.  */\n      if (i == 0x80)\n        continue;\n      if (!!WIFSIGNALED (i) + !!WIFEXITED (i) + !!WIFSTOPPED (i) != 1)\n        return 1;\n    }\n  i = WEXITSTATUS (i) + WSTOPSIG (i) + WTERMSIG (i);\n\n  switch (i)\n    {\n#if 0\n  /* Gnulib doesn't guarantee these, yet.  */\n    case WNOHANG:\n    case WUNTRACED:\n#endif\n      break;\n    }\n  return 0;\n}",
      "lines": 35,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-time.c": {
    "main": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-unistd.c": {
    "main": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-unsetenv.c": {
    "main": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        60,
        1
      ],
      "content": "int\nmain (void)\n{\n  char entry[] = \"b=2\";\n\n  /* Test removal when multiple entries present.  */\n  ASSERT (putenv ((char *) \"a=1\") == 0);\n  ASSERT (putenv (entry) == 0);\n  entry[0] = 'a'; /* Unspecified what getenv(\"a\") would be at this point.  */\n  ASSERT (unsetenv (\"a\") == 0); /* Both entries will be removed.  */\n  ASSERT (getenv (\"a\") == NULL);\n  ASSERT (unsetenv (\"a\") == 0);\n\n  /* Required to fail with EINVAL.  */\n  errno = 0;\n  ASSERT (unsetenv (\"\") == -1);\n  ASSERT (errno == EINVAL);\n  errno = 0;\n  ASSERT (unsetenv (\"a=b\") == -1);\n  ASSERT (errno == EINVAL);\n#if 0\n  /* glibc and gnulib's implementation guarantee this, but POSIX no\n     longer requires it: http://austingroupbugs.net/view.php?id=185  */\n  errno = 0;\n  ASSERT (unsetenv (NULL) == -1);\n  ASSERT (errno == EINVAL);\n#endif\n\n  return 0;\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-vasnprintf.c": {
    "test_function": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "static void\ntest_function (char * (*my_asnprintf) (char *, size_t *, const char *, ...))\n{\n  char buf[8];\n  int size;\n\n  for (size = 0; size <= 8; size++)\n    {\n      size_t length = size;\n      char *result = my_asnprintf (NULL, &length, \"%d\", 12345);\n      ASSERT (result != NULL);\n      ASSERT (strcmp (result, \"12345\") == 0);\n      ASSERT (length == 5);\n      free (result);\n    }\n\n  for (size = 0; size <= 8; size++)\n    {\n      size_t length;\n      char *result;\n\n      memcpy (buf, \"DEADBEEF\", 8);\n      length = size;\n      result = my_asnprintf (buf, &length, \"%d\", 12345);\n      ASSERT (result != NULL);\n      ASSERT (strcmp (result, \"12345\") == 0);\n      ASSERT (length == 5);\n      if (size < 6)\n        ASSERT (result != buf);\n      ASSERT (memcmp (buf + size, &\"DEADBEEF\"[size], 8 - size) == 0);\n      if (result != buf)\n        free (result);\n    }\n}",
      "lines": 34,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "my_asnprintf": {
      "start_point": [
        63,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "content": "static char *\nmy_asnprintf (char *resultbuf, size_t *lengthp, const char *format, ...)\n{\n  va_list args;\n  char *ret;\n\n  va_start (args, format);\n  ret = vasnprintf (resultbuf, lengthp, format, args);\n  va_end (args);\n  return ret;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nmy_asnprintf (char *resultbuf, size_t *lengthp, const char *format, ...)",
        "*"
      ]
    },
    "test_vasnprintf": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "static void\ntest_vasnprintf ()\n{\n  test_function (my_asnprintf);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "test_asnprintf": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "content": "static void\ntest_asnprintf ()\n{\n  test_function (asnprintf);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        87,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  test_vasnprintf ();\n  test_asnprintf ();\n  return 0;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-verify-try.c": {},
  "grep/grep-3.1/gnulib-tests/test-verify.c": {
    "function": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "static int\nfunction (int n)\n{\n#if EXP_FAIL == 3\n  verify (n >= 0);                  /* should give ERROR: non-constant expression */\n#endif\n  verify (c == 2);                  /* should be ok */\n#if EXP_FAIL == 4\n  verify (1 + 1 == 3);              /* should give ERROR */\n#endif\n  verify (1 == 1); verify (1 == 1); /* should be ok */\n\n  if (n)\n    return ((void) verify_expr (1 == 1, 1), verify_expr (1 == 1, 8)); /* should be ok */\n#if EXP_FAIL == 5\n  return verify_expr (1 == 2, 5); /* should give ERROR */\n#endif\n  return 0;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "content": "int\nmain (void)\n{\n  return !(function (0) == 0 && function (1) == 8);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-version-etc.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char **argv)\n{\n  version_etc (stdout, \"test-version-etc\", \"dummy\", \"0\", AUTHORS,\n               (const char *) NULL);\n  return 0;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-wchar.c": {
    "main": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        36,
        1
      ],
      "content": "int\nmain (void)\n{\n  return 0;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-wcrtomb-w32.c": {
    "test_one_locale": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        296,
        1
      ],
      "content": "static int\ntest_one_locale (const char *name, int codepage)\n{\n  char buf[64];\n  size_t ret;\n\n# if 1\n  /* Portable code to set the locale.  */\n  {\n    char name_with_codepage[1024];\n\n    sprintf (name_with_codepage, \"%s.%d\", name, codepage);\n\n    /* Set the locale.  */\n    if (setlocale (LC_ALL, name_with_codepage) == NULL)\n      return 77;\n  }\n# else\n  /* Hacky way to set a locale.codepage combination that setlocale() refuses\n     to set.  */\n  {\n    /* Codepage of the current locale, set with setlocale().\n       Not necessarily the same as GetACP().  */\n    extern __declspec(dllimport) unsigned int __lc_codepage;\n\n    /* Set the locale.  */\n    if (setlocale (LC_ALL, name) == NULL)\n      return 77;\n\n    /* Clobber the codepage and MB_CUR_MAX, both set by setlocale().  */\n    __lc_codepage = codepage;\n    switch (codepage)\n      {\n      case 1252:\n      case 1256:\n        MB_CUR_MAX = 1;\n        break;\n      case 932:\n      case 950:\n      case 936:\n        MB_CUR_MAX = 2;\n        break;\n      case 54936:\n      case 65001:\n        MB_CUR_MAX = 4;\n        break;\n      }\n\n    /* Test whether the codepage is really available.  */\n    {\n      mbstate_t state;\n      wchar_t wc;\n\n      memset (&state, '\\0', sizeof (mbstate_t));\n      if (mbrtowc (&wc, \" \", 1, &state) == (size_t)(-1))\n        return 77;\n    }\n  }\n# endif\n\n  /* Test NUL character.  */\n  {\n    buf[0] = 'x';\n    ret = wcrtomb (buf, 0, NULL);\n    ASSERT (ret == 1);\n    ASSERT (buf[0] == '\\0');\n  }\n\n  /* Test single bytes.  */\n  {\n    int c;\n\n    for (c = 0; c < 0x100; c++)\n      switch (c)\n        {\n        case '\\t': case '\\v': case '\\f':\n        case ' ': case '!': case '\"': case '#': case '%':\n        case '&': case '\\'': case '(': case ')': case '*':\n        case '+': case ',': case '-': case '.': case '/':\n        case '0': case '1': case '2': case '3': case '4':\n        case '5': case '6': case '7': case '8': case '9':\n        case ':': case ';': case '<': case '=': case '>':\n        case '?':\n        case 'A': case 'B': case 'C': case 'D': case 'E':\n        case 'F': case 'G': case 'H': case 'I': case 'J':\n        case 'K': case 'L': case 'M': case 'N': case 'O':\n        case 'P': case 'Q': case 'R': case 'S': case 'T':\n        case 'U': case 'V': case 'W': case 'X': case 'Y':\n        case 'Z':\n        case '[': case '\\\\': case ']': case '^': case '_':\n        case 'a': case 'b': case 'c': case 'd': case 'e':\n        case 'f': case 'g': case 'h': case 'i': case 'j':\n        case 'k': case 'l': case 'm': case 'n': case 'o':\n        case 'p': case 'q': case 'r': case 's': case 't':\n        case 'u': case 'v': case 'w': case 'x': case 'y':\n        case 'z': case '{': case '|': case '}': case '~':\n          /* c is in the ISO C \"basic character set\".  */\n          ret = wcrtomb (buf, btowc (c), NULL);\n          ASSERT (ret == 1);\n          ASSERT (buf[0] == (char) c);\n          break;\n        }\n  }\n\n  /* Test special calling convention, passing a NULL pointer.  */\n  {\n    ret = wcrtomb (NULL, '\\0', NULL);\n    ASSERT (ret == 1);\n    ret = wcrtomb (NULL, btowc ('x'), NULL);\n    ASSERT (ret == 1);\n  }\n\n  switch (codepage)\n    {\n    case 1252:\n      /* Locale encoding is CP1252, an extension of ISO-8859-1.  */\n      {\n        /* Convert \"B\\374\\337er\": \"B\u00c3\u00bc\u00c3\u009fer\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00FC, NULL);\n        ASSERT (ret == 1);\n        ASSERT (memcmp (buf, \"\\374\", 1) == 0);\n        ASSERT (buf[1] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00DF, NULL);\n        ASSERT (ret == 1);\n        ASSERT (memcmp (buf, \"\\337\", 1) == 0);\n        ASSERT (buf[1] == 'x');\n      }\n      return 0;\n\n    case 1256:\n      /* Locale encoding is CP1256, not the same as ISO-8859-6.  */\n      {\n        /* Convert \"x\\302\\341\\346y\": \"x\u00d8\u00a2\u00d9\u0084\u00d9\u0088y\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x0622, NULL);\n        ASSERT (ret == 1);\n        ASSERT (memcmp (buf, \"\\302\", 1) == 0);\n        ASSERT (buf[1] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x0644, NULL);\n        ASSERT (ret == 1);\n        ASSERT (memcmp (buf, \"\\341\", 1) == 0);\n        ASSERT (buf[1] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x0648, NULL);\n        ASSERT (ret == 1);\n        ASSERT (memcmp (buf, \"\\346\", 1) == 0);\n        ASSERT (buf[1] == 'x');\n      }\n      return 0;\n\n    case 932:\n      /* Locale encoding is CP932, similar to Shift_JIS.  */\n      {\n        /* Convert \"<\\223\\372\\226\\173\\214\\352>\": \"<\u00e6\u0097\u00a5\u00e6\u009c\u00ac\u00e8\u00aa\u009e>\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x65E5, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\223\\372\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x672C, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\226\\173\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x8A9E, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\214\\352\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n      }\n      return 0;\n\n    case 950:\n      /* Locale encoding is CP950, similar to Big5.  */\n      {\n        /* Convert \"<\\244\\351\\245\\273\\273\\171>\": \"<\u00e6\u0097\u00a5\u00e6\u009c\u00ac\u00e8\u00aa\u009e>\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x65E5, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\244\\351\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x672C, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\245\\273\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x8A9E, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\273\\171\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n      }\n      return 0;\n\n    case 936:\n      /* Locale encoding is CP936 = GBK, an extension of GB2312.  */\n      {\n        /* Convert \"<\\310\\325\\261\\276\\325\\132>\": \"<\u00e6\u0097\u00a5\u00e6\u009c\u00ac\u00e8\u00aa\u009e>\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x65E5, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\310\\325\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x672C, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\261\\276\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x8A9E, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\325\\132\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n      }\n      return 0;\n\n    case 54936:\n      /* Locale encoding is CP54936 = GB18030.  */\n      {\n        /* Convert \"B\\250\\271\\201\\060\\211\\070er\": \"B\u00c3\u00bc\u00c3\u009fer\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00FC, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\250\\271\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00DF, NULL);\n        ASSERT (ret == 4);\n        ASSERT (memcmp (buf, \"\\201\\060\\211\\070\", 4) == 0);\n        ASSERT (buf[4] == 'x');\n      }\n      return 0;\n\n    case 65001:\n      /* Locale encoding is CP65001 = UTF-8.  */\n      {\n        /* Convert \"B\\303\\274\\303\\237er\": \"B\u00c3\u00bc\u00c3\u009fer\" */\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00FC, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\303\\274\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n\n        memset (buf, 'x', 8);\n        ret = wcrtomb (buf, 0x00DF, NULL);\n        ASSERT (ret == 2);\n        ASSERT (memcmp (buf, \"\\303\\237\", 2) == 0);\n        ASSERT (buf[2] == 'x');\n      }\n      return 0;\n\n    default:\n      return 1;\n    }\n}",
      "lines": 268,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": [
      {
        "start_point": [
          298,
          0
        ],
        "end_point": [
          320,
          1
        ],
        "content": "int\nmain (int argc, char *argv[])\n{\n  int codepage = atoi (argv[argc - 1]);\n  int result;\n  int i;\n\n  result = 77;\n  for (i = 1; i < argc - 1; i++)\n    {\n      int ret = test_one_locale (argv[i], codepage);\n\n      if (ret != 77)\n        result = ret;\n    }\n\n  if (result == 77)\n    {\n      fprintf (stderr, \"Skipping test: found no locale with codepage %d\\n\",\n               codepage);\n    }\n  return result;\n}",
        "lines": 23,
        "depth": 10,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          324,
          0
        ],
        "end_point": [
          329,
          1
        ],
        "content": "int\nmain (int argc, char *argv[])\n{\n  fputs (\"Skipping test: not a native Windows system\\n\", stderr);\n  return 77;\n}",
        "lines": 6,
        "depth": 7,
        "decorators": [
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/gnulib-tests/test-wcrtomb.c": {
    "check_character": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        51,
        1
      ],
      "content": "static void\ncheck_character (const char *s, size_t n)\n{\n  wchar_t wc;\n  char buf[64];\n  int iret;\n  size_t ret;\n\n  wc = (wchar_t) 0xBADFACE;\n  iret = mbtowc (&wc, s, n);\n  ASSERT (iret == n);\n\n  ret = wcrtomb (buf, wc, NULL);\n  ASSERT (ret == n);\n  ASSERT (memcmp (buf, s, n) == 0);\n\n  /* Test special calling convention, passing a NULL pointer.  */\n  ret = wcrtomb (NULL, wc, NULL);\n  ASSERT (ret == 1);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  char buf[64];\n  size_t ret;\n\n  /* configure should already have checked that the locale is supported.  */\n  if (setlocale (LC_ALL, \"\") == NULL)\n    return 1;\n\n  /* Test NUL character.  */\n  {\n    buf[0] = 'x';\n    ret = wcrtomb (buf, 0, NULL);\n    ASSERT (ret == 1);\n    ASSERT (buf[0] == '\\0');\n  }\n\n  /* Test single bytes.  */\n  {\n    int c;\n\n    for (c = 0; c < 0x100; c++)\n      switch (c)\n        {\n        case '\\t': case '\\v': case '\\f':\n        case ' ': case '!': case '\"': case '#': case '%':\n        case '&': case '\\'': case '(': case ')': case '*':\n        case '+': case ',': case '-': case '.': case '/':\n        case '0': case '1': case '2': case '3': case '4':\n        case '5': case '6': case '7': case '8': case '9':\n        case ':': case ';': case '<': case '=': case '>':\n        case '?':\n        case 'A': case 'B': case 'C': case 'D': case 'E':\n        case 'F': case 'G': case 'H': case 'I': case 'J':\n        case 'K': case 'L': case 'M': case 'N': case 'O':\n        case 'P': case 'Q': case 'R': case 'S': case 'T':\n        case 'U': case 'V': case 'W': case 'X': case 'Y':\n        case 'Z':\n        case '[': case '\\\\': case ']': case '^': case '_':\n        case 'a': case 'b': case 'c': case 'd': case 'e':\n        case 'f': case 'g': case 'h': case 'i': case 'j':\n        case 'k': case 'l': case 'm': case 'n': case 'o':\n        case 'p': case 'q': case 'r': case 's': case 't':\n        case 'u': case 'v': case 'w': case 'x': case 'y':\n        case 'z': case '{': case '|': case '}': case '~':\n          /* c is in the ISO C \"basic character set\".  */\n          ret = wcrtomb (buf, btowc (c), NULL);\n          ASSERT (ret == 1);\n          ASSERT (buf[0] == (char) c);\n          break;\n        }\n  }\n\n  /* Test special calling convention, passing a NULL pointer.  */\n  {\n    ret = wcrtomb (NULL, '\\0', NULL);\n    ASSERT (ret == 1);\n    ret = wcrtomb (NULL, btowc ('x'), NULL);\n    ASSERT (ret == 1);\n  }\n\n  if (argc > 1)\n    switch (argv[1][0])\n      {\n      case '1':\n        /* Locale encoding is ISO-8859-1 or ISO-8859-15.  */\n        {\n          const char input[] = \"B\\374\\337er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n\n          check_character (input + 1, 1);\n          check_character (input + 2, 1);\n        }\n        return 0;\n\n      case '2':\n        /* Locale encoding is UTF-8.  */\n        {\n          const char input[] = \"B\\303\\274\\303\\237er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n\n          check_character (input + 1, 2);\n          check_character (input + 3, 2);\n        }\n        return 0;\n\n      case '3':\n        /* Locale encoding is EUC-JP.  */\n        {\n          const char input[] = \"<\\306\\374\\313\\334\\270\\354>\"; /* \"<\u00e6\u0097\u00a5\u00e6\u009c\u00ac\u00e8\u00aa\u009e>\" */\n\n          check_character (input + 1, 2);\n          check_character (input + 3, 2);\n          check_character (input + 5, 2);\n        }\n        return 0;\n\n      case '4':\n        /* Locale encoding is GB18030.  */\n        {\n          const char input[] = \"B\\250\\271\\201\\060\\211\\070er\"; /* \"B\u00c3\u00bc\u00c3\u009fer\" */\n\n          check_character (input + 1, 2);\n          check_character (input + 3, 4);\n        }\n        return 0;\n      }\n\n  return 1;\n}",
      "lines": 109,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-wctype-h.c": {
    "main": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "content": "int\nmain (void)\n{\n  /* Check that the isw* functions exist as functions or as macros.  */\n  (void) iswalnum (0);\n  (void) iswalpha (0);\n  (void) iswcntrl (0);\n  (void) iswdigit (0);\n  (void) iswgraph (0);\n  (void) iswlower (0);\n  (void) iswprint (0);\n  (void) iswpunct (0);\n  (void) iswspace (0);\n  (void) iswupper (0);\n  (void) iswxdigit (0);\n\n  /* Check that the isw* functions map WEOF to 0.  */\n  ASSERT (!iswalnum (e));\n  ASSERT (!iswalpha (e));\n  ASSERT (!iswcntrl (e));\n  ASSERT (!iswdigit (e));\n  ASSERT (!iswgraph (e));\n  ASSERT (!iswlower (e));\n  ASSERT (!iswprint (e));\n  ASSERT (!iswpunct (e));\n  ASSERT (!iswspace (e));\n  ASSERT (!iswupper (e));\n  ASSERT (!iswxdigit (e));\n\n  /* Check that the tow* functions exist as functions or as macros.  */\n  (void) towlower (0);\n  (void) towupper (0);\n\n  /* Check that the tow* functions map WEOF to WEOF.  */\n  ASSERT (towlower (e) == e);\n  ASSERT (towupper (e) == e);\n\n  return 0;\n}",
      "lines": 39,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-wcwidth.c": {
    "main": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "content": "int\nmain ()\n{\n  wchar_t wc;\n\n#ifdef C_CTYPE_ASCII\n  /* Test width of ASCII characters.  */\n  for (wc = 0x20; wc < 0x7F; wc++)\n    ASSERT (wcwidth (wc) == 1);\n#endif\n\n  /* Switch to an UTF-8 locale.  */\n  if (setlocale (LC_ALL, \"fr_FR.UTF-8\") != NULL\n      /* Check whether it's really an UTF-8 locale.\n         On OpenBSD 4.0, the setlocale call succeeds only for the LC_CTYPE\n         category and therefore returns \"C/fr_FR.UTF-8/C/C/C/C\", but the\n         LC_CTYPE category is effectively set to an ASCII LC_CTYPE category;\n         in particular, locale_charset() returns \"ASCII\".  */\n      && strcmp (locale_charset (), \"UTF-8\") == 0)\n    {\n      /* Test width of ASCII characters.  */\n      for (wc = 0x20; wc < 0x7F; wc++)\n        ASSERT (wcwidth (wc) == 1);\n\n      /* Test width of some non-spacing characters.  */\n      ASSERT (wcwidth (0x0301) == 0);\n      ASSERT (wcwidth (0x05B0) == 0);\n\n      /* Test width of some format control characters.  */\n      ASSERT (wcwidth (0x200E) <= 0);\n      ASSERT (wcwidth (0x2060) <= 0);\n#if 0  /* wchar_t may be only 16 bits.  */\n      ASSERT (wcwidth (0xE0001) <= 0);\n      ASSERT (wcwidth (0xE0044) <= 0);\n#endif\n\n      /* Test width of some zero width characters.  */\n      ASSERT (wcwidth (0x200B) == 0);\n      ASSERT (wcwidth (0xFEFF) <= 0);\n\n      /* Test width of some CJK characters.  */\n      ASSERT (wcwidth (0x3000) == 2);\n      ASSERT (wcwidth (0xB250) == 2);\n      ASSERT (wcwidth (0xFF1A) == 2);\n#if 0  /* wchar_t may be only 16 bits.  */\n      ASSERT (wcwidth (0x20369) == 2);\n      ASSERT (wcwidth (0x2F876) == 2);\n#endif\n    }\n\n  return 0;\n}",
      "lines": 52,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-xalloc-die.c": {
    "main": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        27,
        1
      ],
      "content": "int\nmain (int argc _GL_UNUSED, char **argv)\n{\n  xalloc_die ();\n  return 0;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-xstrtoimax.c": {},
  "grep/grep-3.1/gnulib-tests/test-xstrtol.c": {
    "print_no_progname": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "static void\nprint_no_progname (void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  strtol_error s_err;\n  int i;\n\n  error_print_progname = print_no_progname;\n\n  for (i = 1; i < argc; i++)\n    {\n      char *p;\n      __strtol_t val;\n\n      s_err = __xstrtol (argv[i], &p, 0, &val, \"bckMw0\");\n      if (s_err == LONGINT_OK)\n        {\n          printf (\"%s->%\" __spec \" (%s)\\n\", argv[i], val, p);\n        }\n      else\n        {\n          xstrtol_fatal (s_err, -2, 'X', NULL, argv[i]);\n        }\n    }\n  exit (0);\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/test-xstrtoul.c": {},
  "grep/grep-3.1/gnulib-tests/uinttostr.c": {},
  "grep/grep-3.1/gnulib-tests/umaxtostr.c": {},
  "grep/grep-3.1/gnulib-tests/unsetenv.c": {
    "unsetenv": {
      "start_point": [
        55,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "content": "int\nunsetenv (const char *name)\n{\n  size_t len;\n  char **ep;\n\n  if (name == NULL || *name == '\\0' || strchr (name, '=') != NULL)\n    {\n      __set_errno (EINVAL);\n      return -1;\n    }\n\n  len = strlen (name);\n\n  LOCK;\n\n  ep = __environ;\n  while (*ep != NULL)\n    if (!strncmp (*ep, name, len) && (*ep)[len] == '=')\n      {\n        /* Found it.  Remove this pointer by moving later ones back.  */\n        char **dp = ep;\n\n        do\n          dp[0] = dp[1];\n        while (*dp++);\n        /* Continue the loop in case NAME appears again.  */\n      }\n    else\n      ++ep;\n\n  UNLOCK;\n\n  return 0;\n}",
      "lines": 35,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "rpl_unsetenv": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        124,
        1
      ],
      "content": "int\nrpl_unsetenv (const char *name)\n{\n  int result = 0;\n  if (!name || !*name || strchr (name, '='))\n    {\n      errno = EINVAL;\n      return -1;\n    }\n  while (getenv (name))\n# if !VOID_UNSETENV\n    result =\n# endif\n      unsetenv (name);\n  return result;\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/unused-parameter.h": {},
  "grep/grep-3.1/gnulib-tests/vasnprintf.c": {
    "local_strnlen": {
      "start_point": [
        227,
        0
      ],
      "end_point": [
        232,
        1
      ],
      "content": "static size_t\nlocal_strnlen (const char *string, size_t maxlen)\n{\n  const char *end = memchr (string, '\\0', maxlen);\n  return end ? (size_t) (end - string) : maxlen;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "local_wcslen": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        255,
        1
      ],
      "content": "static size_t\nlocal_wcslen (const wchar_t *s)\n{\n  const wchar_t *ptr;\n\n  for (ptr = s; *ptr != (wchar_t) 0; ptr++)\n    ;\n  return ptr - s;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "local_wcsnlen": {
      "start_point": [
        266,
        0
      ],
      "end_point": [
        274,
        1
      ],
      "content": "static size_t\nlocal_wcsnlen (const wchar_t *s, size_t maxlen)\n{\n  const wchar_t *ptr;\n\n  for (ptr = s; maxlen > 0 && *ptr != (wchar_t) 0; ptr++, maxlen--)\n    ;\n  return ptr - s;\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "decimal_point_char": {
      "start_point": [
        283,
        0
      ],
      "end_point": [
        302,
        1
      ],
      "content": "static char\ndecimal_point_char (void)\n{\n  const char *point;\n  /* Determine it in a multithread-safe way.  We know nl_langinfo is\n     multithread-safe on glibc systems and Mac OS X systems, but is not required\n     to be multithread-safe by POSIX.  sprintf(), however, is multithread-safe.\n     localeconv() is rarely multithread-safe.  */\n#  if HAVE_NL_LANGINFO && (__GLIBC__ || defined __UCLIBC__ || (defined __APPLE__ && defined __MACH__))\n  point = nl_langinfo (RADIXCHAR);\n#  elif 1\n  char pointbuf[5];\n  sprintf (pointbuf, \"%#.0f\", 1.0);\n  point = &pointbuf[1];\n#  else\n  point = localeconv () -> decimal_point;\n#  endif\n  /* The decimal point is always a single byte: either '.' or ','.  */\n  return (point[0] != '\\0' ? point[0] : '.');\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "char"
      ]
    },
    "is_infinite_or_zero": {
      "start_point": [
        309,
        0
      ],
      "end_point": [
        313,
        1
      ],
      "content": "static int\nis_infinite_or_zero (double x)\n{\n  return isnand (x) || x + x == x;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_infinite_or_zerol": {
      "start_point": [
        320,
        0
      ],
      "end_point": [
        324,
        1
      ],
      "content": "static int\nis_infinite_or_zerol (long double x)\n{\n  return isnanl (x) || x + x == x;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "multiply": {
      "start_point": [
        352,
        0
      ],
      "end_point": [
        415,
        1
      ],
      "content": "static void *\nmultiply (mpn_t src1, mpn_t src2, mpn_t *dest)\n{\n  const mp_limb_t *p1;\n  const mp_limb_t *p2;\n  size_t len1;\n  size_t len2;\n\n  if (src1.nlimbs <= src2.nlimbs)\n    {\n      len1 = src1.nlimbs;\n      p1 = src1.limbs;\n      len2 = src2.nlimbs;\n      p2 = src2.limbs;\n    }\n  else\n    {\n      len1 = src2.nlimbs;\n      p1 = src2.limbs;\n      len2 = src1.nlimbs;\n      p2 = src1.limbs;\n    }\n  /* Now 0 <= len1 <= len2.  */\n  if (len1 == 0)\n    {\n      /* src1 or src2 is zero.  */\n      dest->nlimbs = 0;\n      dest->limbs = (mp_limb_t *) malloc (1);\n    }\n  else\n    {\n      /* Here 1 <= len1 <= len2.  */\n      size_t dlen;\n      mp_limb_t *dp;\n      size_t k, i, j;\n\n      dlen = len1 + len2;\n      dp = (mp_limb_t *) malloc (dlen * sizeof (mp_limb_t));\n      if (dp == NULL)\n        return NULL;\n      for (k = len2; k > 0; )\n        dp[--k] = 0;\n      for (i = 0; i < len1; i++)\n        {\n          mp_limb_t digit1 = p1[i];\n          mp_twolimb_t carry = 0;\n          for (j = 0; j < len2; j++)\n            {\n              mp_limb_t digit2 = p2[j];\n              carry += (mp_twolimb_t) digit1 * (mp_twolimb_t) digit2;\n              carry += dp[i + j];\n              dp[i + j] = (mp_limb_t) carry;\n              carry = carry >> GMP_LIMB_BITS;\n            }\n          dp[i + len2] = (mp_limb_t) carry;\n        }\n      /* Normalise.  */\n      while (dlen > 0 && dp[dlen - 1] == 0)\n        dlen--;\n      dest->nlimbs = dlen;\n      dest->limbs = dp;\n    }\n  return dest->limbs;\n}",
      "lines": 64,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nmultiply (mpn_t src1, mpn_t src2, mpn_t *dest)",
        "*"
      ]
    },
    "divide": {
      "start_point": [
        424,
        0
      ],
      "end_point": [
        847,
        1
      ],
      "content": "static void *\ndivide (mpn_t a, mpn_t b, mpn_t *q)\n{\n  /* Algorithm:\n     First normalise a and b: a=[a[m-1],...,a[0]], b=[b[n-1],...,b[0]]\n     with m>=0 and n>0 (in base beta = 2^GMP_LIMB_BITS).\n     If m<n, then q:=0 and r:=a.\n     If m>=n=1, perform a single-precision division:\n       r:=0, j:=m,\n       while j>0 do\n         {Here (q[m-1]*beta^(m-1)+...+q[j]*beta^j) * b[0] + r*beta^j =\n               = a[m-1]*beta^(m-1)+...+a[j]*beta^j und 0<=r<b[0]<beta}\n         j:=j-1, r:=r*beta+a[j], q[j]:=floor(r/b[0]), r:=r-b[0]*q[j].\n       Normalise [q[m-1],...,q[0]], yields q.\n     If m>=n>1, perform a multiple-precision division:\n       We have a/b < beta^(m-n+1).\n       s:=intDsize-1-(highest bit in b[n-1]), 0<=s<intDsize.\n       Shift a and b left by s bits, copying them. r:=a.\n       r=[r[m],...,r[0]], b=[b[n-1],...,b[0]] with b[n-1]>=beta/2.\n       For j=m-n,...,0: {Here 0 <= r < b*beta^(j+1).}\n         Compute q* :\n           q* := floor((r[j+n]*beta+r[j+n-1])/b[n-1]).\n           In case of overflow (q* >= beta) set q* := beta-1.\n           Compute c2 := ((r[j+n]*beta+r[j+n-1]) - q* * b[n-1])*beta + r[j+n-2]\n           and c3 := b[n-2] * q*.\n           {We have 0 <= c2 < 2*beta^2, even 0 <= c2 < beta^2 if no overflow\n            occurred.  Furthermore 0 <= c3 < beta^2.\n            If there was overflow and\n            r[j+n]*beta+r[j+n-1] - q* * b[n-1] >= beta, i.e. c2 >= beta^2,\n            the next test can be skipped.}\n           While c3 > c2, {Here 0 <= c2 < c3 < beta^2}\n             Put q* := q* - 1, c2 := c2 + b[n-1]*beta, c3 := c3 - b[n-2].\n           If q* > 0:\n             Put r := r - b * q* * beta^j. In detail:\n               [r[n+j],...,r[j]] := [r[n+j],...,r[j]] - q* * [b[n-1],...,b[0]].\n               hence: u:=0, for i:=0 to n-1 do\n                              u := u + q* * b[i],\n                              r[j+i]:=r[j+i]-(u mod beta) (+ beta, if carry),\n                              u:=u div beta (+ 1, if carry in subtraction)\n                      r[n+j]:=r[n+j]-u.\n               {Since always u = (q* * [b[i-1],...,b[0]] div beta^i) + 1\n                               < q* + 1 <= beta,\n                the carry u does not overflow.}\n             If a negative carry occurs, put q* := q* - 1\n               and [r[n+j],...,r[j]] := [r[n+j],...,r[j]] + [0,b[n-1],...,b[0]].\n         Set q[j] := q*.\n       Normalise [q[m-n],..,q[0]]; this yields the quotient q.\n       Shift [r[n-1],...,r[0]] right by s bits and normalise; this yields the\n       rest r.\n       The room for q[j] can be allocated at the memory location of r[n+j].\n     Finally, round-to-even:\n       Shift r left by 1 bit.\n       If r > b or if r = b and q[0] is odd, q := q+1.\n   */\n  const mp_limb_t *a_ptr = a.limbs;\n  size_t a_len = a.nlimbs;\n  const mp_limb_t *b_ptr = b.limbs;\n  size_t b_len = b.nlimbs;\n  mp_limb_t *roomptr;\n  mp_limb_t *tmp_roomptr = NULL;\n  mp_limb_t *q_ptr;\n  size_t q_len;\n  mp_limb_t *r_ptr;\n  size_t r_len;\n\n  /* Allocate room for a_len+2 digits.\n     (Need a_len+1 digits for the real division and 1 more digit for the\n     final rounding of q.)  */\n  roomptr = (mp_limb_t *) malloc ((a_len + 2) * sizeof (mp_limb_t));\n  if (roomptr == NULL)\n    return NULL;\n\n  /* Normalise a.  */\n  while (a_len > 0 && a_ptr[a_len - 1] == 0)\n    a_len--;\n\n  /* Normalise b.  */\n  for (;;)\n    {\n      if (b_len == 0)\n        /* Division by zero.  */\n        abort ();\n      if (b_ptr[b_len - 1] == 0)\n        b_len--;\n      else\n        break;\n    }\n\n  /* Here m = a_len >= 0 and n = b_len > 0.  */\n\n  if (a_len < b_len)\n    {\n      /* m<n: trivial case.  q=0, r := copy of a.  */\n      r_ptr = roomptr;\n      r_len = a_len;\n      memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));\n      q_ptr = roomptr + a_len;\n      q_len = 0;\n    }\n  else if (b_len == 1)\n    {\n      /* n=1: single precision division.\n         beta^(m-1) <= a < beta^m  ==>  beta^(m-2) <= a/b < beta^m  */\n      r_ptr = roomptr;\n      q_ptr = roomptr + 1;\n      {\n        mp_limb_t den = b_ptr[0];\n        mp_limb_t remainder = 0;\n        const mp_limb_t *sourceptr = a_ptr + a_len;\n        mp_limb_t *destptr = q_ptr + a_len;\n        size_t count;\n        for (count = a_len; count > 0; count--)\n          {\n            mp_twolimb_t num =\n              ((mp_twolimb_t) remainder << GMP_LIMB_BITS) | *--sourceptr;\n            *--destptr = num / den;\n            remainder = num % den;\n          }\n        /* Normalise and store r.  */\n        if (remainder > 0)\n          {\n            r_ptr[0] = remainder;\n            r_len = 1;\n          }\n        else\n          r_len = 0;\n        /* Normalise q.  */\n        q_len = a_len;\n        if (q_ptr[q_len - 1] == 0)\n          q_len--;\n      }\n    }\n  else\n    {\n      /* n>1: multiple precision division.\n         beta^(m-1) <= a < beta^m, beta^(n-1) <= b < beta^n  ==>\n         beta^(m-n-1) <= a/b < beta^(m-n+1).  */\n      /* Determine s.  */\n      size_t s;\n      {\n        mp_limb_t msd = b_ptr[b_len - 1]; /* = b[n-1], > 0 */\n        /* Determine s = GMP_LIMB_BITS - integer_length (msd).\n           Code copied from gnulib's integer_length.c.  */\n# if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)\n        s = __builtin_clz (msd);\n# else\n#  if defined DBL_EXPBIT0_WORD && defined DBL_EXPBIT0_BIT\n        if (GMP_LIMB_BITS <= DBL_MANT_BIT)\n          {\n            /* Use 'double' operations.\n               Assumes an IEEE 754 'double' implementation.  */\n#   define DBL_EXP_MASK ((DBL_MAX_EXP - DBL_MIN_EXP) | 7)\n#   define DBL_EXP_BIAS (DBL_EXP_MASK / 2 - 1)\n#   define NWORDS \\\n     ((sizeof (double) + sizeof (unsigned int) - 1) / sizeof (unsigned int))\n            union { double value; unsigned int word[NWORDS]; } m;\n\n            /* Use a single integer to floating-point conversion.  */\n            m.value = msd;\n\n            s = GMP_LIMB_BITS\n                - (((m.word[DBL_EXPBIT0_WORD] >> DBL_EXPBIT0_BIT) & DBL_EXP_MASK)\n                   - DBL_EXP_BIAS);\n          }\n        else\n#   undef NWORDS\n#  endif\n          {\n            s = 31;\n            if (msd >= 0x10000)\n              {\n                msd = msd >> 16;\n                s -= 16;\n              }\n            if (msd >= 0x100)\n              {\n                msd = msd >> 8;\n                s -= 8;\n              }\n            if (msd >= 0x10)\n              {\n                msd = msd >> 4;\n                s -= 4;\n              }\n            if (msd >= 0x4)\n              {\n                msd = msd >> 2;\n                s -= 2;\n              }\n            if (msd >= 0x2)\n              {\n                msd = msd >> 1;\n                s -= 1;\n              }\n          }\n# endif\n      }\n      /* 0 <= s < GMP_LIMB_BITS.\n         Copy b, shifting it left by s bits.  */\n      if (s > 0)\n        {\n          tmp_roomptr = (mp_limb_t *) malloc (b_len * sizeof (mp_limb_t));\n          if (tmp_roomptr == NULL)\n            {\n              free (roomptr);\n              return NULL;\n            }\n          {\n            const mp_limb_t *sourceptr = b_ptr;\n            mp_limb_t *destptr = tmp_roomptr;\n            mp_twolimb_t accu = 0;\n            size_t count;\n            for (count = b_len; count > 0; count--)\n              {\n                accu += (mp_twolimb_t) *sourceptr++ << s;\n                *destptr++ = (mp_limb_t) accu;\n                accu = accu >> GMP_LIMB_BITS;\n              }\n            /* accu must be zero, since that was how s was determined.  */\n            if (accu != 0)\n              abort ();\n          }\n          b_ptr = tmp_roomptr;\n        }\n      /* Copy a, shifting it left by s bits, yields r.\n         Memory layout:\n         At the beginning: r = roomptr[0..a_len],\n         at the end: r = roomptr[0..b_len-1], q = roomptr[b_len..a_len]  */\n      r_ptr = roomptr;\n      if (s == 0)\n        {\n          memcpy (r_ptr, a_ptr, a_len * sizeof (mp_limb_t));\n          r_ptr[a_len] = 0;\n        }\n      else\n        {\n          const mp_limb_t *sourceptr = a_ptr;\n          mp_limb_t *destptr = r_ptr;\n          mp_twolimb_t accu = 0;\n          size_t count;\n          for (count = a_len; count > 0; count--)\n            {\n              accu += (mp_twolimb_t) *sourceptr++ << s;\n              *destptr++ = (mp_limb_t) accu;\n              accu = accu >> GMP_LIMB_BITS;\n            }\n          *destptr++ = (mp_limb_t) accu;\n        }\n      q_ptr = roomptr + b_len;\n      q_len = a_len - b_len + 1; /* q will have m-n+1 limbs */\n      {\n        size_t j = a_len - b_len; /* m-n */\n        mp_limb_t b_msd = b_ptr[b_len - 1]; /* b[n-1] */\n        mp_limb_t b_2msd = b_ptr[b_len - 2]; /* b[n-2] */\n        mp_twolimb_t b_msdd = /* b[n-1]*beta+b[n-2] */\n          ((mp_twolimb_t) b_msd << GMP_LIMB_BITS) | b_2msd;\n        /* Division loop, traversed m-n+1 times.\n           j counts down, b is unchanged, beta/2 <= b[n-1] < beta.  */\n        for (;;)\n          {\n            mp_limb_t q_star;\n            mp_limb_t c1;\n            if (r_ptr[j + b_len] < b_msd) /* r[j+n] < b[n-1] ? */\n              {\n                /* Divide r[j+n]*beta+r[j+n-1] by b[n-1], no overflow.  */\n                mp_twolimb_t num =\n                  ((mp_twolimb_t) r_ptr[j + b_len] << GMP_LIMB_BITS)\n                  | r_ptr[j + b_len - 1];\n                q_star = num / b_msd;\n                c1 = num % b_msd;\n              }\n            else\n              {\n                /* Overflow, hence r[j+n]*beta+r[j+n-1] >= beta*b[n-1].  */\n                q_star = (mp_limb_t)~(mp_limb_t)0; /* q* = beta-1 */\n                /* Test whether r[j+n]*beta+r[j+n-1] - (beta-1)*b[n-1] >= beta\n                   <==> r[j+n]*beta+r[j+n-1] + b[n-1] >= beta*b[n-1]+beta\n                   <==> b[n-1] < floor((r[j+n]*beta+r[j+n-1]+b[n-1])/beta)\n                        {<= beta !}.\n                   If yes, jump directly to the subtraction loop.\n                   (Otherwise, r[j+n]*beta+r[j+n-1] - (beta-1)*b[n-1] < beta\n                    <==> floor((r[j+n]*beta+r[j+n-1]+b[n-1])/beta) = b[n-1] ) */\n                if (r_ptr[j + b_len] > b_msd\n                    || (c1 = r_ptr[j + b_len - 1] + b_msd) < b_msd)\n                  /* r[j+n] >= b[n-1]+1 or\n                     r[j+n] = b[n-1] and the addition r[j+n-1]+b[n-1] gives a\n                     carry.  */\n                  goto subtract;\n              }\n            /* q_star = q*,\n               c1 = (r[j+n]*beta+r[j+n-1]) - q* * b[n-1] (>=0, <beta).  */\n            {\n              mp_twolimb_t c2 = /* c1*beta+r[j+n-2] */\n                ((mp_twolimb_t) c1 << GMP_LIMB_BITS) | r_ptr[j + b_len - 2];\n              mp_twolimb_t c3 = /* b[n-2] * q* */\n                (mp_twolimb_t) b_2msd * (mp_twolimb_t) q_star;\n              /* While c2 < c3, increase c2 and decrease c3.\n                 Consider c3-c2.  While it is > 0, decrease it by\n                 b[n-1]*beta+b[n-2].  Because of b[n-1]*beta+b[n-2] >= beta^2/2\n                 this can happen only twice.  */\n              if (c3 > c2)\n                {\n                  q_star = q_star - 1; /* q* := q* - 1 */\n                  if (c3 - c2 > b_msdd)\n                    q_star = q_star - 1; /* q* := q* - 1 */\n                }\n            }\n            if (q_star > 0)\n              subtract:\n              {\n                /* Subtract r := r - b * q* * beta^j.  */\n                mp_limb_t cr;\n                {\n                  const mp_limb_t *sourceptr = b_ptr;\n                  mp_limb_t *destptr = r_ptr + j;\n                  mp_twolimb_t carry = 0;\n                  size_t count;\n                  for (count = b_len; count > 0; count--)\n                    {\n                      /* Here 0 <= carry <= q*.  */\n                      carry =\n                        carry\n                        + (mp_twolimb_t) q_star * (mp_twolimb_t) *sourceptr++\n                        + (mp_limb_t) ~(*destptr);\n                      /* Here 0 <= carry <= beta*q* + beta-1.  */\n                      *destptr++ = ~(mp_limb_t) carry;\n                      carry = carry >> GMP_LIMB_BITS; /* <= q* */\n                    }\n                  cr = (mp_limb_t) carry;\n                }\n                /* Subtract cr from r_ptr[j + b_len], then forget about\n                   r_ptr[j + b_len].  */\n                if (cr > r_ptr[j + b_len])\n                  {\n                    /* Subtraction gave a carry.  */\n                    q_star = q_star - 1; /* q* := q* - 1 */\n                    /* Add b back.  */\n                    {\n                      const mp_limb_t *sourceptr = b_ptr;\n                      mp_limb_t *destptr = r_ptr + j;\n                      mp_limb_t carry = 0;\n                      size_t count;\n                      for (count = b_len; count > 0; count--)\n                        {\n                          mp_limb_t source1 = *sourceptr++;\n                          mp_limb_t source2 = *destptr;\n                          *destptr++ = source1 + source2 + carry;\n                          carry =\n                            (carry\n                             ? source1 >= (mp_limb_t) ~source2\n                             : source1 > (mp_limb_t) ~source2);\n                        }\n                    }\n                    /* Forget about the carry and about r[j+n].  */\n                  }\n              }\n            /* q* is determined.  Store it as q[j].  */\n            q_ptr[j] = q_star;\n            if (j == 0)\n              break;\n            j--;\n          }\n      }\n      r_len = b_len;\n      /* Normalise q.  */\n      if (q_ptr[q_len - 1] == 0)\n        q_len--;\n# if 0 /* Not needed here, since we need r only to compare it with b/2, and\n          b is shifted left by s bits.  */\n      /* Shift r right by s bits.  */\n      if (s > 0)\n        {\n          mp_limb_t ptr = r_ptr + r_len;\n          mp_twolimb_t accu = 0;\n          size_t count;\n          for (count = r_len; count > 0; count--)\n            {\n              accu = (mp_twolimb_t) (mp_limb_t) accu << GMP_LIMB_BITS;\n              accu += (mp_twolimb_t) *--ptr << (GMP_LIMB_BITS - s);\n              *ptr = (mp_limb_t) (accu >> GMP_LIMB_BITS);\n            }\n        }\n# endif\n      /* Normalise r.  */\n      while (r_len > 0 && r_ptr[r_len - 1] == 0)\n        r_len--;\n    }\n  /* Compare r << 1 with b.  */\n  if (r_len > b_len)\n    goto increment_q;\n  {\n    size_t i;\n    for (i = b_len;;)\n      {\n        mp_limb_t r_i =\n          (i <= r_len && i > 0 ? r_ptr[i - 1] >> (GMP_LIMB_BITS - 1) : 0)\n          | (i < r_len ? r_ptr[i] << 1 : 0);\n        mp_limb_t b_i = (i < b_len ? b_ptr[i] : 0);\n        if (r_i > b_i)\n          goto increment_q;\n        if (r_i < b_i)\n          goto keep_q;\n        if (i == 0)\n          break;\n        i--;\n      }\n  }\n  if (q_len > 0 && ((q_ptr[0] & 1) != 0))\n    /* q is odd.  */\n    increment_q:\n    {\n      size_t i;\n      for (i = 0; i < q_len; i++)\n        if (++(q_ptr[i]) != 0)\n          goto keep_q;\n      q_ptr[q_len++] = 1;\n    }\n  keep_q:\n  if (tmp_roomptr != NULL)\n    free (tmp_roomptr);\n  q->limbs = q_ptr;\n  q->nlimbs = q_len;\n  return roomptr;\n}",
      "lines": 424,
      "depth": 24,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ndivide (mpn_t a, mpn_t b, mpn_t *q)",
        "*"
      ]
    },
    "convert_to_decimal": {
      "start_point": [
        855,
        0
      ],
      "end_point": [
        901,
        1
      ],
      "content": "static char *\nconvert_to_decimal (mpn_t a, size_t extra_zeroes)\n{\n  mp_limb_t *a_ptr = a.limbs;\n  size_t a_len = a.nlimbs;\n  /* 0.03345 is slightly larger than log(2)/(9*log(10)).  */\n  size_t c_len = 9 * ((size_t)(a_len * (GMP_LIMB_BITS * 0.03345f)) + 1);\n  char *c_ptr = (char *) malloc (xsum (c_len, extra_zeroes));\n  if (c_ptr != NULL)\n    {\n      char *d_ptr = c_ptr;\n      for (; extra_zeroes > 0; extra_zeroes--)\n        *d_ptr++ = '0';\n      while (a_len > 0)\n        {\n          /* Divide a by 10^9, in-place.  */\n          mp_limb_t remainder = 0;\n          mp_limb_t *ptr = a_ptr + a_len;\n          size_t count;\n          for (count = a_len; count > 0; count--)\n            {\n              mp_twolimb_t num =\n                ((mp_twolimb_t) remainder << GMP_LIMB_BITS) | *--ptr;\n              *ptr = num / 1000000000;\n              remainder = num % 1000000000;\n            }\n          /* Store the remainder as 9 decimal digits.  */\n          for (count = 9; count > 0; count--)\n            {\n              *d_ptr++ = '0' + (remainder % 10);\n              remainder = remainder / 10;\n            }\n          /* Normalize a.  */\n          if (a_ptr[a_len - 1] == 0)\n            a_len--;\n        }\n      /* Remove leading zeroes.  */\n      while (d_ptr > c_ptr && d_ptr[-1] == '0')\n        d_ptr--;\n      /* But keep at least one zero.  */\n      if (d_ptr == c_ptr)\n        *d_ptr++ = '0';\n      /* Terminate the string.  */\n      *d_ptr = '\\0';\n    }\n  return c_ptr;\n}",
      "lines": 47,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nconvert_to_decimal (mpn_t a, size_t extra_zeroes)",
        "*"
      ]
    },
    "decode_long_double": {
      "start_point": [
        909,
        0
      ],
      "end_point": [
        987,
        1
      ],
      "content": "static void *\ndecode_long_double (long double x, int *ep, mpn_t *mp)\n{\n  mpn_t m;\n  int exp;\n  long double y;\n  size_t i;\n\n  /* Allocate memory for result.  */\n  m.nlimbs = (LDBL_MANT_BIT + GMP_LIMB_BITS - 1) / GMP_LIMB_BITS;\n  m.limbs = (mp_limb_t *) malloc (m.nlimbs * sizeof (mp_limb_t));\n  if (m.limbs == NULL)\n    return NULL;\n  /* Split into exponential part and mantissa.  */\n  y = frexpl (x, &exp);\n  if (!(y >= 0.0L && y < 1.0L))\n    abort ();\n  /* x = 2^exp * y = 2^(exp - LDBL_MANT_BIT) * (y * 2^LDBL_MANT_BIT), and the\n     latter is an integer.  */\n  /* Convert the mantissa (y * 2^LDBL_MANT_BIT) to a sequence of limbs.\n     I'm not sure whether it's safe to cast a 'long double' value between\n     2^31 and 2^32 to 'unsigned int', therefore play safe and cast only\n     'long double' values between 0 and 2^16 (to 'unsigned int' or 'int',\n     doesn't matter).  */\n#  if (LDBL_MANT_BIT % GMP_LIMB_BITS) != 0\n#   if (LDBL_MANT_BIT % GMP_LIMB_BITS) > GMP_LIMB_BITS / 2\n    {\n      mp_limb_t hi, lo;\n      y *= (mp_limb_t) 1 << (LDBL_MANT_BIT % (GMP_LIMB_BITS / 2));\n      hi = (int) y;\n      y -= hi;\n      if (!(y >= 0.0L && y < 1.0L))\n        abort ();\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      lo = (int) y;\n      y -= lo;\n      if (!(y >= 0.0L && y < 1.0L))\n        abort ();\n      m.limbs[LDBL_MANT_BIT / GMP_LIMB_BITS] = (hi << (GMP_LIMB_BITS / 2)) | lo;\n    }\n#   else\n    {\n      mp_limb_t d;\n      y *= (mp_limb_t) 1 << (LDBL_MANT_BIT % GMP_LIMB_BITS);\n      d = (int) y;\n      y -= d;\n      if (!(y >= 0.0L && y < 1.0L))\n        abort ();\n      m.limbs[LDBL_MANT_BIT / GMP_LIMB_BITS] = d;\n    }\n#   endif\n#  endif\n  for (i = LDBL_MANT_BIT / GMP_LIMB_BITS; i > 0; )\n    {\n      mp_limb_t hi, lo;\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      hi = (int) y;\n      y -= hi;\n      if (!(y >= 0.0L && y < 1.0L))\n        abort ();\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      lo = (int) y;\n      y -= lo;\n      if (!(y >= 0.0L && y < 1.0L))\n        abort ();\n      m.limbs[--i] = (hi << (GMP_LIMB_BITS / 2)) | lo;\n    }\n#  if 0 /* On FreeBSD 6.1/x86, 'long double' numbers sometimes have excess\n           precision.  */\n  if (!(y == 0.0L))\n    abort ();\n#  endif\n  /* Normalise.  */\n  while (m.nlimbs > 0 && m.limbs[m.nlimbs - 1] == 0)\n    m.nlimbs--;\n  *mp = m;\n  *ep = exp - LDBL_MANT_BIT;\n  return m.limbs;\n}",
      "lines": 79,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ndecode_long_double (long double x, int *ep, mpn_t *mp)",
        "*"
      ]
    },
    "decode_double": {
      "start_point": [
        997,
        0
      ],
      "end_point": [
        1072,
        1
      ],
      "content": "static void *\ndecode_double (double x, int *ep, mpn_t *mp)\n{\n  mpn_t m;\n  int exp;\n  double y;\n  size_t i;\n\n  /* Allocate memory for result.  */\n  m.nlimbs = (DBL_MANT_BIT + GMP_LIMB_BITS - 1) / GMP_LIMB_BITS;\n  m.limbs = (mp_limb_t *) malloc (m.nlimbs * sizeof (mp_limb_t));\n  if (m.limbs == NULL)\n    return NULL;\n  /* Split into exponential part and mantissa.  */\n  y = frexp (x, &exp);\n  if (!(y >= 0.0 && y < 1.0))\n    abort ();\n  /* x = 2^exp * y = 2^(exp - DBL_MANT_BIT) * (y * 2^DBL_MANT_BIT), and the\n     latter is an integer.  */\n  /* Convert the mantissa (y * 2^DBL_MANT_BIT) to a sequence of limbs.\n     I'm not sure whether it's safe to cast a 'double' value between\n     2^31 and 2^32 to 'unsigned int', therefore play safe and cast only\n     'double' values between 0 and 2^16 (to 'unsigned int' or 'int',\n     doesn't matter).  */\n#  if (DBL_MANT_BIT % GMP_LIMB_BITS) != 0\n#   if (DBL_MANT_BIT % GMP_LIMB_BITS) > GMP_LIMB_BITS / 2\n    {\n      mp_limb_t hi, lo;\n      y *= (mp_limb_t) 1 << (DBL_MANT_BIT % (GMP_LIMB_BITS / 2));\n      hi = (int) y;\n      y -= hi;\n      if (!(y >= 0.0 && y < 1.0))\n        abort ();\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      lo = (int) y;\n      y -= lo;\n      if (!(y >= 0.0 && y < 1.0))\n        abort ();\n      m.limbs[DBL_MANT_BIT / GMP_LIMB_BITS] = (hi << (GMP_LIMB_BITS / 2)) | lo;\n    }\n#   else\n    {\n      mp_limb_t d;\n      y *= (mp_limb_t) 1 << (DBL_MANT_BIT % GMP_LIMB_BITS);\n      d = (int) y;\n      y -= d;\n      if (!(y >= 0.0 && y < 1.0))\n        abort ();\n      m.limbs[DBL_MANT_BIT / GMP_LIMB_BITS] = d;\n    }\n#   endif\n#  endif\n  for (i = DBL_MANT_BIT / GMP_LIMB_BITS; i > 0; )\n    {\n      mp_limb_t hi, lo;\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      hi = (int) y;\n      y -= hi;\n      if (!(y >= 0.0 && y < 1.0))\n        abort ();\n      y *= (mp_limb_t) 1 << (GMP_LIMB_BITS / 2);\n      lo = (int) y;\n      y -= lo;\n      if (!(y >= 0.0 && y < 1.0))\n        abort ();\n      m.limbs[--i] = (hi << (GMP_LIMB_BITS / 2)) | lo;\n    }\n  if (!(y == 0.0))\n    abort ();\n  /* Normalise.  */\n  while (m.nlimbs > 0 && m.limbs[m.nlimbs - 1] == 0)\n    m.nlimbs--;\n  *mp = m;\n  *ep = exp - DBL_MANT_BIT;\n  return m.limbs;\n}",
      "lines": 76,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ndecode_double (double x, int *ep, mpn_t *mp)",
        "*"
      ]
    },
    "scale10_round_decimal_decoded": {
      "start_point": [
        1081,
        0
      ],
      "end_point": [
        1294,
        1
      ],
      "content": "static char *\nscale10_round_decimal_decoded (int e, mpn_t m, void *memory, int n)\n{\n  int s;\n  size_t extra_zeroes;\n  unsigned int abs_n;\n  unsigned int abs_s;\n  mp_limb_t *pow5_ptr;\n  size_t pow5_len;\n  unsigned int s_limbs;\n  unsigned int s_bits;\n  mpn_t pow5;\n  mpn_t z;\n  void *z_memory;\n  char *digits;\n\n  if (memory == NULL)\n    return NULL;\n  /* x = 2^e * m, hence\n     y = round (2^e * 10^n * m) = round (2^(e+n) * 5^n * m)\n       = round (2^s * 5^n * m).  */\n  s = e + n;\n  extra_zeroes = 0;\n  /* Factor out a common power of 10 if possible.  */\n  if (s > 0 && n > 0)\n    {\n      extra_zeroes = (s < n ? s : n);\n      s -= extra_zeroes;\n      n -= extra_zeroes;\n    }\n  /* Here y = round (2^s * 5^n * m) * 10^extra_zeroes.\n     Before converting to decimal, we need to compute\n     z = round (2^s * 5^n * m).  */\n  /* Compute 5^|n|, possibly shifted by |s| bits if n and s have the same\n     sign.  2.322 is slightly larger than log(5)/log(2).  */\n  abs_n = (n >= 0 ? n : -n);\n  abs_s = (s >= 0 ? s : -s);\n  pow5_ptr = (mp_limb_t *) malloc (((int)(abs_n * (2.322f / GMP_LIMB_BITS)) + 1\n                                    + abs_s / GMP_LIMB_BITS + 1)\n                                   * sizeof (mp_limb_t));\n  if (pow5_ptr == NULL)\n    {\n      free (memory);\n      return NULL;\n    }\n  /* Initialize with 1.  */\n  pow5_ptr[0] = 1;\n  pow5_len = 1;\n  /* Multiply with 5^|n|.  */\n  if (abs_n > 0)\n    {\n      static mp_limb_t const small_pow5[13 + 1] =\n        {\n          1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625,\n          48828125, 244140625, 1220703125\n        };\n      unsigned int n13;\n      for (n13 = 0; n13 <= abs_n; n13 += 13)\n        {\n          mp_limb_t digit1 = small_pow5[n13 + 13 <= abs_n ? 13 : abs_n - n13];\n          size_t j;\n          mp_twolimb_t carry = 0;\n          for (j = 0; j < pow5_len; j++)\n            {\n              mp_limb_t digit2 = pow5_ptr[j];\n              carry += (mp_twolimb_t) digit1 * (mp_twolimb_t) digit2;\n              pow5_ptr[j] = (mp_limb_t) carry;\n              carry = carry >> GMP_LIMB_BITS;\n            }\n          if (carry > 0)\n            pow5_ptr[pow5_len++] = (mp_limb_t) carry;\n        }\n    }\n  s_limbs = abs_s / GMP_LIMB_BITS;\n  s_bits = abs_s % GMP_LIMB_BITS;\n  if (n >= 0 ? s >= 0 : s <= 0)\n    {\n      /* Multiply with 2^|s|.  */\n      if (s_bits > 0)\n        {\n          mp_limb_t *ptr = pow5_ptr;\n          mp_twolimb_t accu = 0;\n          size_t count;\n          for (count = pow5_len; count > 0; count--)\n            {\n              accu += (mp_twolimb_t) *ptr << s_bits;\n              *ptr++ = (mp_limb_t) accu;\n              accu = accu >> GMP_LIMB_BITS;\n            }\n          if (accu > 0)\n            {\n              *ptr = (mp_limb_t) accu;\n              pow5_len++;\n            }\n        }\n      if (s_limbs > 0)\n        {\n          size_t count;\n          for (count = pow5_len; count > 0;)\n            {\n              count--;\n              pow5_ptr[s_limbs + count] = pow5_ptr[count];\n            }\n          for (count = s_limbs; count > 0;)\n            {\n              count--;\n              pow5_ptr[count] = 0;\n            }\n          pow5_len += s_limbs;\n        }\n      pow5.limbs = pow5_ptr;\n      pow5.nlimbs = pow5_len;\n      if (n >= 0)\n        {\n          /* Multiply m with pow5.  No division needed.  */\n          z_memory = multiply (m, pow5, &z);\n        }\n      else\n        {\n          /* Divide m by pow5 and round.  */\n          z_memory = divide (m, pow5, &z);\n        }\n    }\n  else\n    {\n      pow5.limbs = pow5_ptr;\n      pow5.nlimbs = pow5_len;\n      if (n >= 0)\n        {\n          /* n >= 0, s < 0.\n             Multiply m with pow5, then divide by 2^|s|.  */\n          mpn_t numerator;\n          mpn_t denominator;\n          void *tmp_memory;\n          tmp_memory = multiply (m, pow5, &numerator);\n          if (tmp_memory == NULL)\n            {\n              free (pow5_ptr);\n              free (memory);\n              return NULL;\n            }\n          /* Construct 2^|s|.  */\n          {\n            mp_limb_t *ptr = pow5_ptr + pow5_len;\n            size_t i;\n            for (i = 0; i < s_limbs; i++)\n              ptr[i] = 0;\n            ptr[s_limbs] = (mp_limb_t) 1 << s_bits;\n            denominator.limbs = ptr;\n            denominator.nlimbs = s_limbs + 1;\n          }\n          z_memory = divide (numerator, denominator, &z);\n          free (tmp_memory);\n        }\n      else\n        {\n          /* n < 0, s > 0.\n             Multiply m with 2^s, then divide by pow5.  */\n          mpn_t numerator;\n          mp_limb_t *num_ptr;\n          num_ptr = (mp_limb_t *) malloc ((m.nlimbs + s_limbs + 1)\n                                          * sizeof (mp_limb_t));\n          if (num_ptr == NULL)\n            {\n              free (pow5_ptr);\n              free (memory);\n              return NULL;\n            }\n          {\n            mp_limb_t *destptr = num_ptr;\n            {\n              size_t i;\n              for (i = 0; i < s_limbs; i++)\n                *destptr++ = 0;\n            }\n            if (s_bits > 0)\n              {\n                const mp_limb_t *sourceptr = m.limbs;\n                mp_twolimb_t accu = 0;\n                size_t count;\n                for (count = m.nlimbs; count > 0; count--)\n                  {\n                    accu += (mp_twolimb_t) *sourceptr++ << s_bits;\n                    *destptr++ = (mp_limb_t) accu;\n                    accu = accu >> GMP_LIMB_BITS;\n                  }\n                if (accu > 0)\n                  *destptr++ = (mp_limb_t) accu;\n              }\n            else\n              {\n                const mp_limb_t *sourceptr = m.limbs;\n                size_t count;\n                for (count = m.nlimbs; count > 0; count--)\n                  *destptr++ = *sourceptr++;\n              }\n            numerator.limbs = num_ptr;\n            numerator.nlimbs = destptr - num_ptr;\n          }\n          z_memory = divide (numerator, pow5, &z);\n          free (num_ptr);\n        }\n    }\n  free (pow5_ptr);\n  free (memory);\n\n  /* Here y = round (x * 10^n) = z * 10^extra_zeroes.  */\n\n  if (z_memory == NULL)\n    return NULL;\n  digits = convert_to_decimal (z, extra_zeroes);\n  free (z_memory);\n  return digits;\n}",
      "lines": 214,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nscale10_round_decimal_decoded (int e, mpn_t m, void *memory, int n)",
        "*"
      ]
    },
    "scale10_round_decimal_long_double": {
      "start_point": [
        1303,
        0
      ],
      "end_point": [
        1310,
        1
      ],
      "content": "static char *\nscale10_round_decimal_long_double (long double x, int n)\n{\n  int e IF_LINT(= 0);\n  mpn_t m;\n  void *memory = decode_long_double (x, &e, &m);\n  return scale10_round_decimal_decoded (e, m, memory, n);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nscale10_round_decimal_long_double (long double x, int n)",
        "*"
      ]
    },
    "scale10_round_decimal_double": {
      "start_point": [
        1321,
        0
      ],
      "end_point": [
        1328,
        1
      ],
      "content": "static char *\nscale10_round_decimal_double (double x, int n)\n{\n  int e IF_LINT(= 0);\n  mpn_t m;\n  void *memory = decode_double (x, &e, &m);\n  return scale10_round_decimal_decoded (e, m, memory, n);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nscale10_round_decimal_double (double x, int n)",
        "*"
      ]
    },
    "floorlog10l": {
      "start_point": [
        1337,
        0
      ],
      "end_point": [
        1419,
        1
      ],
      "content": "static int\nfloorlog10l (long double x)\n{\n  int exp;\n  long double y;\n  double z;\n  double l;\n\n  /* Split into exponential part and mantissa.  */\n  y = frexpl (x, &exp);\n  if (!(y >= 0.0L && y < 1.0L))\n    abort ();\n  if (y == 0.0L)\n    return INT_MIN;\n  if (y < 0.5L)\n    {\n      while (y < (1.0L / (1 << (GMP_LIMB_BITS / 2)) / (1 << (GMP_LIMB_BITS / 2))))\n        {\n          y *= 1.0L * (1 << (GMP_LIMB_BITS / 2)) * (1 << (GMP_LIMB_BITS / 2));\n          exp -= GMP_LIMB_BITS;\n        }\n      if (y < (1.0L / (1 << 16)))\n        {\n          y *= 1.0L * (1 << 16);\n          exp -= 16;\n        }\n      if (y < (1.0L / (1 << 8)))\n        {\n          y *= 1.0L * (1 << 8);\n          exp -= 8;\n        }\n      if (y < (1.0L / (1 << 4)))\n        {\n          y *= 1.0L * (1 << 4);\n          exp -= 4;\n        }\n      if (y < (1.0L / (1 << 2)))\n        {\n          y *= 1.0L * (1 << 2);\n          exp -= 2;\n        }\n      if (y < (1.0L / (1 << 1)))\n        {\n          y *= 1.0L * (1 << 1);\n          exp -= 1;\n        }\n    }\n  if (!(y >= 0.5L && y < 1.0L))\n    abort ();\n  /* Compute an approximation for l = log2(x) = exp + log2(y).  */\n  l = exp;\n  z = y;\n  if (z < 0.70710678118654752444)\n    {\n      z *= 1.4142135623730950488;\n      l -= 0.5;\n    }\n  if (z < 0.8408964152537145431)\n    {\n      z *= 1.1892071150027210667;\n      l -= 0.25;\n    }\n  if (z < 0.91700404320467123175)\n    {\n      z *= 1.0905077326652576592;\n      l -= 0.125;\n    }\n  if (z < 0.9576032806985736469)\n    {\n      z *= 1.0442737824274138403;\n      l -= 0.0625;\n    }\n  /* Now 0.95 <= z <= 1.01.  */\n  z = 1 - z;\n  /* log2(1-z) = 1/log(2) * (- z - z^2/2 - z^3/3 - z^4/4 - ...)\n     Four terms are enough to get an approximation with error < 10^-7.  */\n  l -= 1.4426950408889634074 * z * (1.0 + z * (0.5 + z * ((1.0 / 3) + z * 0.25)));\n  /* Finally multiply with log(2)/log(10), yields an approximation for\n     log10(x).  */\n  l *= 0.30102999566398119523;\n  /* Round down to the next integer.  */\n  return (int) l + (l < 0 ? -1 : 0);\n}",
      "lines": 83,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "floorlog10": {
      "start_point": [
        1428,
        0
      ],
      "end_point": [
        1510,
        1
      ],
      "content": "static int\nfloorlog10 (double x)\n{\n  int exp;\n  double y;\n  double z;\n  double l;\n\n  /* Split into exponential part and mantissa.  */\n  y = frexp (x, &exp);\n  if (!(y >= 0.0 && y < 1.0))\n    abort ();\n  if (y == 0.0)\n    return INT_MIN;\n  if (y < 0.5)\n    {\n      while (y < (1.0 / (1 << (GMP_LIMB_BITS / 2)) / (1 << (GMP_LIMB_BITS / 2))))\n        {\n          y *= 1.0 * (1 << (GMP_LIMB_BITS / 2)) * (1 << (GMP_LIMB_BITS / 2));\n          exp -= GMP_LIMB_BITS;\n        }\n      if (y < (1.0 / (1 << 16)))\n        {\n          y *= 1.0 * (1 << 16);\n          exp -= 16;\n        }\n      if (y < (1.0 / (1 << 8)))\n        {\n          y *= 1.0 * (1 << 8);\n          exp -= 8;\n        }\n      if (y < (1.0 / (1 << 4)))\n        {\n          y *= 1.0 * (1 << 4);\n          exp -= 4;\n        }\n      if (y < (1.0 / (1 << 2)))\n        {\n          y *= 1.0 * (1 << 2);\n          exp -= 2;\n        }\n      if (y < (1.0 / (1 << 1)))\n        {\n          y *= 1.0 * (1 << 1);\n          exp -= 1;\n        }\n    }\n  if (!(y >= 0.5 && y < 1.0))\n    abort ();\n  /* Compute an approximation for l = log2(x) = exp + log2(y).  */\n  l = exp;\n  z = y;\n  if (z < 0.70710678118654752444)\n    {\n      z *= 1.4142135623730950488;\n      l -= 0.5;\n    }\n  if (z < 0.8408964152537145431)\n    {\n      z *= 1.1892071150027210667;\n      l -= 0.25;\n    }\n  if (z < 0.91700404320467123175)\n    {\n      z *= 1.0905077326652576592;\n      l -= 0.125;\n    }\n  if (z < 0.9576032806985736469)\n    {\n      z *= 1.0442737824274138403;\n      l -= 0.0625;\n    }\n  /* Now 0.95 <= z <= 1.01.  */\n  z = 1 - z;\n  /* log2(1-z) = 1/log(2) * (- z - z^2/2 - z^3/3 - z^4/4 - ...)\n     Four terms are enough to get an approximation with error < 10^-7.  */\n  l -= 1.4426950408889634074 * z * (1.0 + z * (0.5 + z * ((1.0 / 3) + z * 0.25)));\n  /* Finally multiply with log(2)/log(10), yields an approximation for\n     log10(x).  */\n  l *= 0.30102999566398119523;\n  /* Round down to the next integer.  */\n  return (int) l + (l < 0 ? -1 : 0);\n}",
      "lines": 83,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_borderline": {
      "start_point": [
        1516,
        0
      ],
      "end_point": [
        1526,
        1
      ],
      "content": "static int\nis_borderline (const char *digits, size_t precision)\n{\n  for (; precision > 0; precision--, digits++)\n    if (*digits != '0')\n      return 0;\n  if (*digits != '1')\n    return 0;\n  digits++;\n  return *digits == '\\0';\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "MAX_ROOM_NEEDED": {
      "start_point": [
        1543,
        0
      ],
      "end_point": [
        1778,
        1
      ],
      "content": "static size_t\nMAX_ROOM_NEEDED (const arguments *ap, size_t arg_index, FCHAR_T conversion,\n                 arg_type type, int flags, size_t width, int has_precision,\n                 size_t precision, int pad_ourselves)\n{\n  size_t tmp_length;\n\n  switch (conversion)\n    {\n    case 'd': case 'i': case 'u':\n# if HAVE_LONG_LONG_INT\n      if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long long) * CHAR_BIT\n                          * 0.30103 /* binary -> decimal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n# endif\n      if (type == TYPE_LONGINT || type == TYPE_ULONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long) * CHAR_BIT\n                          * 0.30103 /* binary -> decimal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n        tmp_length =\n          (unsigned int) (sizeof (unsigned int) * CHAR_BIT\n                          * 0.30103 /* binary -> decimal */\n                         )\n          + 1; /* turn floor into ceil */\n      if (tmp_length < precision)\n        tmp_length = precision;\n      /* Multiply by 2, as an estimate for FLAG_GROUP.  */\n      tmp_length = xsum (tmp_length, tmp_length);\n      /* Add 1, to account for a leading sign.  */\n      tmp_length = xsum (tmp_length, 1);\n      break;\n\n    case 'o':\n# if HAVE_LONG_LONG_INT\n      if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long long) * CHAR_BIT\n                          * 0.333334 /* binary -> octal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n# endif\n      if (type == TYPE_LONGINT || type == TYPE_ULONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long) * CHAR_BIT\n                          * 0.333334 /* binary -> octal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n        tmp_length =\n          (unsigned int) (sizeof (unsigned int) * CHAR_BIT\n                          * 0.333334 /* binary -> octal */\n                         )\n          + 1; /* turn floor into ceil */\n      if (tmp_length < precision)\n        tmp_length = precision;\n      /* Add 1, to account for a leading sign.  */\n      tmp_length = xsum (tmp_length, 1);\n      break;\n\n    case 'x': case 'X':\n# if HAVE_LONG_LONG_INT\n      if (type == TYPE_LONGLONGINT || type == TYPE_ULONGLONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long long) * CHAR_BIT\n                          * 0.25 /* binary -> hexadecimal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n# endif\n      if (type == TYPE_LONGINT || type == TYPE_ULONGINT)\n        tmp_length =\n          (unsigned int) (sizeof (unsigned long) * CHAR_BIT\n                          * 0.25 /* binary -> hexadecimal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n        tmp_length =\n          (unsigned int) (sizeof (unsigned int) * CHAR_BIT\n                          * 0.25 /* binary -> hexadecimal */\n                         )\n          + 1; /* turn floor into ceil */\n      if (tmp_length < precision)\n        tmp_length = precision;\n      /* Add 2, to account for a leading sign or alternate form.  */\n      tmp_length = xsum (tmp_length, 2);\n      break;\n\n    case 'f': case 'F':\n      if (type == TYPE_LONGDOUBLE)\n        tmp_length =\n          (unsigned int) (LDBL_MAX_EXP\n                          * 0.30103 /* binary -> decimal */\n                          * 2 /* estimate for FLAG_GROUP */\n                         )\n          + 1 /* turn floor into ceil */\n          + 10; /* sign, decimal point etc. */\n      else\n        tmp_length =\n          (unsigned int) (DBL_MAX_EXP\n                          * 0.30103 /* binary -> decimal */\n                          * 2 /* estimate for FLAG_GROUP */\n                         )\n          + 1 /* turn floor into ceil */\n          + 10; /* sign, decimal point etc. */\n      tmp_length = xsum (tmp_length, precision);\n      break;\n\n    case 'e': case 'E': case 'g': case 'G':\n      tmp_length =\n        12; /* sign, decimal point, exponent etc. */\n      tmp_length = xsum (tmp_length, precision);\n      break;\n\n    case 'a': case 'A':\n      if (type == TYPE_LONGDOUBLE)\n        tmp_length =\n          (unsigned int) (LDBL_DIG\n                          * 0.831 /* decimal -> hexadecimal */\n                         )\n          + 1; /* turn floor into ceil */\n      else\n        tmp_length =\n          (unsigned int) (DBL_DIG\n                          * 0.831 /* decimal -> hexadecimal */\n                         )\n          + 1; /* turn floor into ceil */\n      if (tmp_length < precision)\n        tmp_length = precision;\n      /* Account for sign, decimal point etc. */\n      tmp_length = xsum (tmp_length, 12);\n      break;\n\n    case 'c':\n# if HAVE_WINT_T && !WIDE_CHAR_VERSION\n      if (type == TYPE_WIDE_CHAR)\n        tmp_length = MB_CUR_MAX;\n      else\n# endif\n        tmp_length = 1;\n      break;\n\n    case 's':\n# if HAVE_WCHAR_T\n      if (type == TYPE_WIDE_STRING)\n        {\n#  if WIDE_CHAR_VERSION\n          /* ISO C says about %ls in fwprintf:\n               \"If the precision is not specified or is greater than the size\n                of the array, the array shall contain a null wide character.\"\n             So if there is a precision, we must not use wcslen.  */\n          const wchar_t *arg = ap->arg[arg_index].a.a_wide_string;\n\n          if (has_precision)\n            tmp_length = local_wcsnlen (arg, precision);\n          else\n            tmp_length = local_wcslen (arg);\n#  else\n          /* ISO C says about %ls in fprintf:\n               \"If a precision is specified, no more than that many bytes are\n                written (including shift sequences, if any), and the array\n                shall contain a null wide character if, to equal the multibyte\n                character sequence length given by the precision, the function\n                would need to access a wide character one past the end of the\n                array.\"\n             So if there is a precision, we must not use wcslen.  */\n          /* This case has already been handled separately in VASNPRINTF.  */\n          abort ();\n#  endif\n        }\n      else\n# endif\n        {\n# if WIDE_CHAR_VERSION\n          /* ISO C says about %s in fwprintf:\n               \"If the precision is not specified or is greater than the size\n                of the converted array, the converted array shall contain a\n                null wide character.\"\n             So if there is a precision, we must not use strlen.  */\n          /* This case has already been handled separately in VASNPRINTF.  */\n          abort ();\n# else\n          /* ISO C says about %s in fprintf:\n               \"If the precision is not specified or greater than the size of\n                the array, the array shall contain a null character.\"\n             So if there is a precision, we must not use strlen.  */\n          const char *arg = ap->arg[arg_index].a.a_string;\n\n          if (has_precision)\n            tmp_length = local_strnlen (arg, precision);\n          else\n            tmp_length = strlen (arg);\n# endif\n        }\n      break;\n\n    case 'p':\n      tmp_length =\n        (unsigned int) (sizeof (void *) * CHAR_BIT\n                        * 0.25 /* binary -> hexadecimal */\n                       )\n          + 1 /* turn floor into ceil */\n          + 2; /* account for leading 0x */\n      break;\n\n    default:\n      abort ();\n    }\n\n  if (!pad_ourselves)\n    {\n# if ENABLE_UNISTDIO\n      /* Padding considers the number of characters, therefore the number of\n         elements after padding may be\n           > max (tmp_length, width)\n         but is certainly\n           <= tmp_length + width.  */\n      tmp_length = xsum (tmp_length, width);\n# else\n      /* Padding considers the number of elements, says POSIX.  */\n      if (tmp_length < width)\n        tmp_length = width;\n# endif\n    }\n\n  tmp_length = xsum (tmp_length, 1); /* account for trailing NUL */\n\n  return tmp_length;\n}",
      "lines": 236,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "xsum": {
      "start_point": [
        4625,
        16
      ],
      "end_point": [
        5544,
        15
      ],
      "content": "int prefixes[2] IF_LINT (= { 0 });\n                int orig_errno;\n#if !USE_SNPRINTF\n                size_t tmp_length;\n                TCHAR_T tmpbuf[700];\n                TCHAR_T *tmp;\n#endif\n\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_width = 0;\n#endif\n#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                width = 0;\n                if (dp->width_start != dp->width_end)\n                  {\n                    if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif\n                  }\n#endif\n\n#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_precision = 0;\n                precision = 6;\n                if (dp->precision_start != dp->precision_end)\n                  {\n                    if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }\n                  }\n#endif\n\n                /* Decide whether to handle the precision ourselves.  */\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                switch (dp->conversion)\n                  {\n                  case 'd': case 'i': case 'u':\n                  case 'o':\n                  case 'x': case 'X': case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;\n                  default:\n                    prec_ourselves = 0;\n                    break;\n                  }\n#endif\n\n                /* Decide whether to perform the padding ourselves.  */\n#if !NEED_PRINTF_FLAG_LEFTADJUST && (!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION)\n                switch (dp->conversion)\n                  {\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif\n# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif\n                    pad_ourselves = 1;\n                    break;\n                  default:\n                    pad_ourselves = prec_ourselves;\n                    break;\n                  }\n#endif\n\n#if !USE_SNPRINTF\n                /* Allocate a temporary buffer of sufficient size for calling\n                   sprintf.  */\n                tmp_length =\n                  MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves);\n\n                if (tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T))\n                  tmp = tmpbuf;\n                else\n                  {\n                    size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));\n\n                    if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;\n                    tmp = (TCHAR_T *) malloc (tmp_memsize);\n                    if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;\n                  }\n#endif\n\n                /* Construct the format string for calling snprintf or\n                   sprintf.  */\n                fbp = buf;\n                *fbp++ = '%';\n#if NEED_PRINTF_FLAG_GROUPING\n                /* The underlying implementation doesn't support the ' flag.\n                   Produce no grouping characters in this case; this is\n                   acceptable because the grouping is locale dependent.  */\n#else\n                if (flags & FLAG_GROUP)\n                  *fbp++ = '\\'';\n#endif\n                if (flags & FLAG_LEFT)\n                  *fbp++ = '-';\n                if (flags & FLAG_SHOWSIGN)\n                  *fbp++ = '+';\n                if (flags & FLAG_SPACE)\n                  *fbp++ = ' ';\n                if (flags & FLAG_ALT)\n                  *fbp++ = '#';\n#if __GLIBC__ >= 2 && !defined __UCLIBC__\n                if (flags & FLAG_LOCALIZED)\n                  *fbp++ = 'I';\n#endif\n                if (!pad_ourselves)\n                  {\n                    if (flags & FLAG_ZERO)\n                      *fbp++ = '0';\n                    if (dp->width_start != dp->width_end)\n                      {\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }\n                if (!prec_ourselves)\n                  {\n                    if (dp->precision_start != dp->precision_end)\n                      {\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }\n\n                switch (type)\n                  {\n#if HAVE_LONG_LONG_INT\n                  case TYPE_LONGLONGINT:\n                  case TYPE_ULONGLONGINT:\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif\n#endif\n                    FALLTHROUGH;\n                  case TYPE_LONGINT:\n                  case TYPE_ULONGINT:\n#if HAVE_WINT_T\n                  case TYPE_WIDE_CHAR:\n#endif\n#if HAVE_WCHAR_T\n                  case TYPE_WIDE_STRING:\n#endif\n                    *fbp++ = 'l';\n                    break;\n                  case TYPE_LONGDOUBLE:\n                    *fbp++ = 'L';\n                    break;\n                  default:\n                    break;\n                  }\n#if NEED_PRINTF_DIRECTIVE_F\n                if (dp->conversion == 'F')\n                  *fbp = 'f';\n                else\n#endif\n                  *fbp = dp->conversion;\n#if USE_SNPRINTF\n# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))\n                fbp[1] = '%';\n                fbp[2] = 'n';\n                fbp[3] = '\\0';\n# else\n                /* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */\n                /* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */\n                fbp[1] = '\\0';\n# endif\n#else\n                fbp[1] = '\\0';\n#endif\n\n                /* Construct the arguments for calling snprintf or sprintf.  */\n                prefix_count = 0;\n                if (!pad_ourselves && dp->width_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;\n                  }\n                if (!prec_ourselves && dp->precision_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;\n                  }\n\n#if USE_SNPRINTF\n                /* The SNPRINTF result is appended after result[0..length].\n                   The latter is an array of DCHAR_T; SNPRINTF appends an\n                   array of TCHAR_T to it.  This is possible because\n                   sizeof (TCHAR_T) divides sizeof (DCHAR_T) and\n                   alignof (TCHAR_T) <= alignof (DCHAR_T).  */\n# define TCHARS_PER_DCHAR (sizeof (DCHAR_T) / sizeof (TCHAR_T))\n                /* Ensure that maxlen below will be >= 2.  Needed on BeOS,\n                   where an snprintf() with maxlen==1 acts like sprintf().  */\n                ENSURE_ALLOCATION (xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR));\n                /* Prepare checking whether snprintf returns the count\n                   via %n.  */\n                *(TCHAR_T *) (result + length) = '\\0';\n#endif\n\n                orig_errno = errno;\n\n                for (;;)\n                  {\n                    int count = -1;\n\n#if USE_SNPRINTF\n                    int retcount = 0;\n                    size_t maxlen = allocated - length;\n                    /* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */\n                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;\n                    maxlen = maxlen * TCHARS_PER_DCHAR;\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#endif\n\n                    errno = 0;\n                    switch (type)\n                      {\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }\n\n#if USE_SNPRINTF\n                    /* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */\n                    if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }\n#endif\n\n                    /* Attempt to handle failure.  */\n                    if (count < 0)\n                      {\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }\n\n#if USE_SNPRINTF\n                    /* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */\n                    if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }\n#endif\n\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }\n#endif\n\n#if !USE_SNPRINTF\n                    if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();\n#endif\n\n#if !DCHAR_IS_TCHAR\n                    /* Convert from TCHAR_T[] to DCHAR_T[].  */\n                    if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }\n#endif\n\n#if DCHAR_IS_TCHAR && !USE_SNPRINTF\n                    /* Make room for the result.  */\n                    if (count > allocated - length)\n                      {\n                        /* Need at least count elements.  But allocate\n                           proportionally.  */\n                        size_t n =\n                          xmax (xsum (length, count), xtimes (allocated, 2));\n\n                        ENSURE_ALLOCATION (n);\n                      }\n#endif\n\n                    /* Here count <= allocated - length.  */\n\n                    /* Perform padding.  */\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (pad_ourselves && has_width)\n                      {\n                        size_t w;\n# if ENABLE_UNISTDIO\n                        /* Outside POSIX, it's preferable to compare the width\n                           against the number of _characters_ of the converted\n                           value.  */\n                        w = DCHAR_MBSNLEN (result + length, count);\n# else\n                        /* The width is compared against the number of _bytes_\n                           of the converted value, says POSIX.  */\n                        w = count;\n# endif\n                        if (w < width)\n                          {\n                            size_t pad = width - w;\n\n                            /* Make room for the result.  */\n                            if (xsum (count, pad) > allocated - length)\n                              {\n                                /* Need at least count + pad elements.  But\n                                   allocate proportionally.  */\n                                size_t n =\n                                  xmax (xsum3 (length, count, pad),\n                                        xtimes (allocated, 2));\n\n# if USE_SNPRINTF\n                                length += count;\n                                ENSURE_ALLOCATION (n);\n                                length -= count;\n# else\n                                ENSURE_ALLOCATION (n);\n# endif\n                              }\n                            /* Here count + pad <= allocated - length.  */\n\n                            {\n# if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                              DCHAR_T * const rp = result + length;\n# else\n                              DCHAR_T * const rp = tmp;\n# endif\n                              DCHAR_T *p = rp + count;\n                              DCHAR_T *end = p + pad;\n                              DCHAR_T *pad_ptr;\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                              if (dp->conversion == 'c'\n                                  || dp->conversion == 's')\n                                /* No zero-padding for string directives.  */\n                                pad_ptr = NULL;\n                              else\n# endif\n                                {\n                                  pad_ptr = (*rp == '-' ? rp + 1 : rp);\n                                  /* No zero-padding of \"inf\" and \"nan\".  */\n                                  if ((*pad_ptr >= 'A' && *pad_ptr <= 'Z')\n                                      || (*pad_ptr >= 'a' && *pad_ptr <= 'z'))\n                                    pad_ptr = NULL;\n                                }\n                              /* The generated string now extends from rp to p,\n                                 with the zero padding insertion point being at\n                                 pad_ptr.  */\n\n                              count = count + pad; /* = end - rp */\n\n                              if (flags & FLAG_LEFT)\n                                {\n                                  /* Pad with spaces on the right.  */\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                              else if ((flags & FLAG_ZERO) && pad_ptr != NULL)\n                                {\n                                  /* Pad with zeroes.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > pad_ptr)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = '0';\n                                }\n                              else\n                                {\n                                  /* Pad with spaces on the left.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > rp)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                            }\n                          }\n                      }\n#endif\n\n                    /* Here still count <= allocated - length.  */\n\n#if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                    /* The snprintf() result did fit.  */\n#else\n                    /* Append the sprintf() result.  */\n                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));\n#endif\n#if !USE_SNPRINTF\n                    if (tmp != tmpbuf)\n                      free (tmp);\n#endif\n\n#if NEED_PRINTF_DIRECTIVE_F\n                    if (dp->conversion == 'F')\n                      {\n                        /* Convert the %f result to upper case for %F.  */\n                        DCHAR_T *rp = result + length;\n                        size_t rc;\n                        for (rc = count; rc > 0; rc--, rp++)\n                          if (*rp >= 'a' && *rp <= 'z')\n                            *rp = *rp - 'a' + 'A';\n                      }\n#endif\n\n                    length += count;\n                    break;\n                  }\n                errno = orig_errno;\n#undef pad_ourselves\n#undef prec_ourselves\n              }",
      "lines": 920,
      "depth": 24,
      "decorators": [
        "int",
        "prefixes[2]",
        "prefixes",
        "[",
        "2",
        "]",
        "IF_LINT (=",
        "IF_LINT",
        "(",
        "=",
        "{ 0 });\n                int orig_errno;\n#if !USE_SNPRINTF\n                size_t tmp_length;\n                TCHAR_T tmpbuf[700];\n                TCHAR_T *tmp;\n#endif\n\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_width = 0;\n#endif\n#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                width = 0;\n                if (dp->width_start != dp->width_end)\n                  {\n                    if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif\n                  }\n#endif\n\n#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_precision = 0;\n                precision = 6;\n                if (dp->precision_start != dp->precision_end)\n                  {\n                    if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }\n                  }\n#endif\n\n                /* Decide whether to handle the precision ourselves.  */\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                switch (dp->conversion)\n                  {\n                  case 'd': case 'i': case 'u':\n                  case 'o':\n                  case 'x': case 'X': case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;\n                  default:\n                    prec_ourselves = 0;\n                    break;\n                  }\n#endif\n\n                /* Decide whether to perform the padding ourselves.  */\n#if !NEED_PRINTF_FLAG_LEFTADJUST && (!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION)\n                switch (dp->conversion)\n                  {\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif\n# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif\n                    pad_ourselves = 1;\n                    break;\n                  default:\n                    pad_ourselves = prec_ourselves;\n                    break;\n                  }\n#endif\n\n#if !USE_SNPRINTF\n                /* Allocate a temporary buffer of sufficient size for calling\n                   sprintf.  */\n                tmp_length =\n                  MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves);\n\n                if (tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T))\n                  tmp = tmpbuf;\n                else\n                  {\n                    size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));\n\n                    if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;\n                    tmp = (TCHAR_T *) malloc (tmp_memsize);\n                    if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;\n                  }\n#endif\n\n                /* Construct the format string for calling snprintf or\n                   sprintf.  */\n                fbp = buf;\n                *fbp++ = '%';\n#if NEED_PRINTF_FLAG_GROUPING\n                /* The underlying implementation doesn't support the ' flag.\n                   Produce no grouping characters in this case; this is\n                   acceptable because the grouping is locale dependent.  */\n#else\n                if (flags & FLAG_GROUP)\n                  *fbp++ = '\\'';\n#endif\n                if (flags & FLAG_LEFT)\n                  *fbp++ = '-';\n                if (flags & FLAG_SHOWSIGN)\n                  *fbp++ = '+';\n                if (flags & FLAG_SPACE)\n                  *fbp++ = ' ';\n                if (flags & FLAG_ALT)\n                  *fbp++ = '#';\n#if __GLIBC__ >= 2 && !defined __UCLIBC__\n                if (flags & FLAG_LOCALIZED)\n                  *fbp++ = 'I';\n#endif\n                if (!pad_ourselves)\n                  {\n                    if (flags & FLAG_ZERO)\n                      *fbp++ = '0';\n                    if (dp->width_start != dp->width_end)\n                      {\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }\n                if (!prec_ourselves)\n                  {\n                    if (dp->precision_start != dp->precision_end)\n                      {\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }\n\n                switch (type)\n                  {\n#if HAVE_LONG_LONG_INT\n                  case TYPE_LONGLONGINT:\n                  case TYPE_ULONGLONGINT:\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif\n#endif\n                    FALLTHROUGH;\n                  case TYPE_LONGINT:\n                  case TYPE_ULONGINT:\n#if HAVE_WINT_T\n                  case TYPE_WIDE_CHAR:\n#endif\n#if HAVE_WCHAR_T\n                  case TYPE_WIDE_STRING:\n#endif\n                    *fbp++ = 'l';\n                    break;\n                  case TYPE_LONGDOUBLE:\n                    *fbp++ = 'L';\n                    break;\n                  default:\n                    break;\n                  }\n#if NEED_PRINTF_DIRECTIVE_F\n                if (dp->conversion == 'F')\n                  *fbp = 'f';\n                else\n#endif\n                  *fbp = dp->conversion;\n#if USE_SNPRINTF\n# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))\n                fbp[1] = '%';\n                fbp[2] = 'n';\n                fbp[3] = '\\0';\n# else\n                /* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */\n                /* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */\n                fbp[1] = '\\0';\n# endif\n#else\n                fbp[1] = '\\0';\n#endif\n\n                /* Construct the arguments for calling snprintf or sprintf.  */\n                prefix_count = 0;\n                if (!pad_ourselves && dp->width_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;\n                  }\n                if (!prec_ourselves && dp->precision_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;\n                  }\n\n#if USE_SNPRINTF\n                /* The SNPRINTF result is appended after result[0..length].\n                   The latter is an array of DCHAR_T; SNPRINTF appends an\n                   array of TCHAR_T to it.  This is possible because\n                   sizeof (TCHAR_T) divides sizeof (DCHAR_T) and\n                   alignof (TCHAR_T) <= alignof (DCHAR_T).  */\n# define TCHARS_PER_DCHAR (sizeof (DCHAR_T) / sizeof (TCHAR_T))\n                /* Ensure that maxlen below will be >= 2.  Needed on BeOS,\n                   where an snprintf() with maxlen==1 acts like sprintf().  */\n                ENSURE_ALLOCATION (xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR));\n                /* Prepare checking whether snprintf returns the count\n                   via %n.  */\n                *(TCHAR_T *) (result + length) = '\\0';\n#endif\n\n                orig_errno = errno;\n\n                for (;;)\n                  {\n                    int count = -1;\n\n#if USE_SNPRINTF\n                    int retcount = 0;\n                    size_t maxlen = allocated - length;\n                    /* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */\n                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;\n                    maxlen = maxlen * TCHARS_PER_DCHAR;\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#endif\n\n                    errno = 0;\n                    switch (type)\n                      {\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }\n\n#if USE_SNPRINTF\n                    /* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */\n                    if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }\n#endif\n\n                    /* Attempt to handle failure.  */\n                    if (count < 0)\n                      {\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }\n\n#if USE_SNPRINTF\n                    /* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */\n                    if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }\n#endif\n\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }\n#endif\n\n#if !USE_SNPRINTF\n                    if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();\n#endif\n\n#if !DCHAR_IS_TCHAR\n                    /* Convert from TCHAR_T[] to DCHAR_T[].  */\n                    if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }\n#endif\n\n#if DCHAR_IS_TCHAR && !USE_SNPRINTF\n                    /* Make room for the result.  */\n                    if (count > allocated - length)\n                      {\n                        /* Need at least count elements.  But allocate\n                           proportionally.  */\n                        size_t n =\n                          xmax (xsum (length, count), xtimes (allocated, 2));\n\n                        ENSURE_ALLOCATION (n);\n                      }\n#endif\n\n                    /* Here count <= allocated - length.  */\n\n                    /* Perform padding.  */\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (pad_ourselves && has_width)\n                      {\n                        size_t w;\n# if ENABLE_UNISTDIO\n                        /* Outside POSIX, it's preferable to compare the width\n                           against the number of _characters_ of the converted\n                           value.  */\n                        w = DCHAR_MBSNLEN (result + length, count);\n# else\n                        /* The width is compared against the number of _bytes_\n                           of the converted value, says POSIX.  */\n                        w = count;\n# endif\n                        if (w < width)\n                          {\n                            size_t pad = width - w;\n\n                            /* Make room for the result.  */\n                            if (xsum (count, pad) > allocated - length)\n                              {\n                                /* Need at least count + pad elements.  But\n                                   allocate proportionally.  */\n                                size_t n =\n                                  xmax (xsum3 (length, count, pad),\n                                        xtimes (allocated, 2));\n\n# if USE_SNPRINTF\n                                length += count;\n                                ENSURE_ALLOCATION (n);\n                                length -= count;\n# else\n                                ENSURE_ALLOCATION (n);\n# endif\n                              }\n                            /* Here count + pad <= allocated - length.  */\n\n                            {\n# if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                              DCHAR_T * const rp = result + length;\n# else\n                              DCHAR_T * const rp = tmp;\n# endif\n                              DCHAR_T *p = rp + count;\n                              DCHAR_T *end = p + pad;\n                              DCHAR_T *pad_ptr;\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                              if (dp->conversion == 'c'\n                                  || dp->conversion == 's')\n                                /* No zero-padding for string directives.  */\n                                pad_ptr = NULL;\n                              else\n# endif\n                                {\n                                  pad_ptr = (*rp == '-' ? rp + 1 : rp);\n                                  /* No zero-padding of \"inf\" and \"nan\".  */\n                                  if ((*pad_ptr >= 'A' && *pad_ptr <= 'Z')\n                                      || (*pad_ptr >= 'a' && *pad_ptr <= 'z'))\n                                    pad_ptr = NULL;\n                                }\n                              /* The generated string now extends from rp to p,\n                                 with the zero padding insertion point being at\n                                 pad_ptr.  */\n\n                              count = count + pad; /* = end - rp */\n\n                              if (flags & FLAG_LEFT)\n                                {\n                                  /* Pad with spaces on the right.  */\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                              else if ((flags & FLAG_ZERO) && pad_ptr != NULL)\n                                {\n                                  /* Pad with zeroes.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > pad_ptr)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = '0';\n                                }\n                              else\n                                {\n                                  /* Pad with spaces on the left.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > rp)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                            }\n                          }\n                      }\n#endif\n\n                    /* Here still count <= allocated - length.  */\n\n#if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                    /* The snprintf() result did fit.  */\n#else\n                    /* Append the sprintf() result.  */\n                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));\n#endif\n#if !USE_SNPRINTF\n                    if (tmp != tmpbuf)\n                      free (tmp);\n#endif\n\n#if NEED_PRINTF_DIRECTIVE_F\n                    if (dp->conversion == 'F')\n                      {\n                        /* Convert the %f result to upper case for %F.  */\n                        DCHAR_T *rp = result + length;\n                        size_t rc;\n                        for (rc = count; rc > 0; rc--, rp++)\n                          if (*rp >= 'a' && *rp <= 'z')\n                            *rp = *rp - 'a' + 'A';\n                      }\n#endif\n\n                    length += count;\n                    break;\n                  }\n                errno = orig_errno;\n#undef pad_ourselves\n#undef prec_ourselves\n              }",
        "{",
        "0 });",
        "0",
        "})",
        "}",
        ")",
        ";",
        "int orig_errno;",
        "int",
        "orig_errno",
        ";",
        "#if !USE_SNPRINTF\n                size_t tmp_length;\n                TCHAR_T tmpbuf[700];\n                TCHAR_T *tmp;\n#endif",
        "#if",
        "!USE_SNPRINTF",
        "!",
        "USE_SNPRINTF",
        "\n",
        "size_t tmp_length;",
        "size_t",
        "tmp_length",
        ";",
        "TCHAR_T tmpbuf[700];",
        "TCHAR_T",
        "tmpbuf[700]",
        "tmpbuf",
        "[",
        "700",
        "]",
        ";",
        "TCHAR_T *tmp;",
        "TCHAR_T",
        "*tmp",
        "*",
        "tmp",
        ";",
        "#endif",
        "#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_width = 0;\n#endif",
        "#if",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "||",
        "ENABLE_UNISTDIO",
        "||",
        "NEED_PRINTF_FLAG_LEFTADJUST",
        "||",
        "NEED_PRINTF_FLAG_ZERO",
        "||",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "has_width = 0;",
        "has_width = 0",
        "has_width",
        "=",
        "0",
        ";",
        "#endif",
        "#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                width = 0;\n                if (dp->width_start != dp->width_end)\n                  {\n                    if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif\n                  }\n#endif",
        "#if",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR || ENABLE_UNISTDIO",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || !DCHAR_IS_TCHAR",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99",
        "!USE_SNPRINTF",
        "!",
        "USE_SNPRINTF",
        "||",
        "!HAVE_SNPRINTF_RETVAL_C99",
        "!",
        "HAVE_SNPRINTF_RETVAL_C99",
        "||",
        "USE_MSVC__SNPRINTF",
        "||",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "||",
        "ENABLE_UNISTDIO",
        "||",
        "NEED_PRINTF_FLAG_LEFTADJUST",
        "||",
        "NEED_PRINTF_FLAG_ZERO",
        "||",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "width = 0;",
        "width = 0",
        "width",
        "=",
        "0",
        ";",
        "if (dp->width_start != dp->width_end)\n                  {\n                    if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif\n                  }",
        "if",
        "(dp->width_start != dp->width_end)",
        "(",
        "dp->width_start != dp->width_end",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        "!=",
        "dp->width_end",
        "dp",
        "->",
        "width_end",
        ")",
        "{\n                    if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif\n                  }",
        "{",
        "if (dp->width_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }",
        "if",
        "(dp->width_arg_index != ARG_NONE)",
        "(",
        "dp->width_arg_index != ARG_NONE",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "!=",
        "ARG_NONE",
        ")",
        "{\n                        int arg;\n\n                        if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->width_arg_index].a.a_int;\n                        width = arg;\n                        if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }\n                      }",
        "{",
        "int arg;",
        "int",
        "arg",
        ";",
        "if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                          abort ();",
        "if",
        "(!(a.arg[dp->width_arg_index].type == TYPE_INT))",
        "(",
        "!(a.arg[dp->width_arg_index].type == TYPE_INT)",
        "!",
        "(a.arg[dp->width_arg_index].type == TYPE_INT)",
        "(",
        "a.arg[dp->width_arg_index].type == TYPE_INT",
        "a.arg[dp->width_arg_index].type",
        "a.arg[dp->width_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "]",
        ".",
        "type",
        "==",
        "TYPE_INT",
        ")",
        ")",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "arg = a.arg[dp->width_arg_index].a.a_int;",
        "arg = a.arg[dp->width_arg_index].a.a_int",
        "arg",
        "=",
        "a.arg[dp->width_arg_index].a.a_int",
        "a.arg[dp->width_arg_index].a",
        "a.arg[dp->width_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_int",
        ";",
        "width = arg;",
        "width = arg",
        "width",
        "=",
        "arg",
        ";",
        "if (arg < 0)\n                          {\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }",
        "if",
        "(arg < 0)",
        "(",
        "arg < 0",
        "arg",
        "<",
        "0",
        ")",
        "{\n                            /* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */\n                            flags |= FLAG_LEFT;\n                            width = -width;\n                          }",
        "{",
        "/* \"A negative field width is taken as a '-' flag\n                                followed by a positive field width.\"  */",
        "flags |= FLAG_LEFT;",
        "flags |= FLAG_LEFT",
        "flags",
        "|=",
        "FLAG_LEFT",
        ";",
        "width = -width;",
        "width = -width",
        "width",
        "=",
        "-width",
        "-",
        "width",
        ";",
        "}",
        "}",
        "else",
        "{\n                        const FCHAR_T *digitp = dp->width_start;\n\n                        do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);\n                      }",
        "{",
        "const FCHAR_T *digitp = dp->width_start;",
        "const",
        "const",
        "FCHAR_T",
        "*digitp = dp->width_start",
        "*digitp",
        "*",
        "digitp",
        "=",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        ";",
        "do\n                          width = xsum (xtimes (width, 10), *digitp++ - '0');\n                        while (digitp != dp->width_end);",
        "do",
        "width = xsum (xtimes (width, 10), *digitp++ - '0');",
        "width = xsum (xtimes (width, 10), *digitp++ - '0')",
        "width",
        "=",
        "xsum (xtimes (width, 10), *digitp++ - '0')",
        "xsum",
        "(xtimes (width, 10), *digitp++ - '0')",
        "(",
        "xtimes (width, 10)",
        "xtimes",
        "(width, 10)",
        "(",
        "width",
        ",",
        "10",
        ")",
        ",",
        "*digitp++ - '0'",
        "*digitp++",
        "*",
        "digitp++",
        "digitp",
        "++",
        "-",
        "'0'",
        "'",
        "'",
        ")",
        ";",
        "while",
        "(digitp != dp->width_end)",
        "(",
        "digitp != dp->width_end",
        "digitp",
        "!=",
        "dp->width_end",
        "dp",
        "->",
        "width_end",
        ")",
        ";",
        "}",
        "#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    has_width = 1;\n#endif",
        "#if",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "||",
        "ENABLE_UNISTDIO",
        "||",
        "NEED_PRINTF_FLAG_LEFTADJUST",
        "||",
        "NEED_PRINTF_FLAG_ZERO",
        "||",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "has_width = 1;",
        "has_width = 1",
        "has_width",
        "=",
        "1",
        ";",
        "#endif",
        "}",
        "#endif",
        "#if !USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || NEED_PRINTF_UNBOUNDED_PRECISION\n                has_precision = 0;\n                precision = 6;\n                if (dp->precision_start != dp->precision_end)\n                  {\n                    if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }\n                  }\n#endif",
        "#if",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF || NEED_PRINTF_UNBOUNDED_PRECISION",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF",
        "!USE_SNPRINTF || !HAVE_SNPRINTF_RETVAL_C99",
        "!USE_SNPRINTF",
        "!",
        "USE_SNPRINTF",
        "||",
        "!HAVE_SNPRINTF_RETVAL_C99",
        "!",
        "HAVE_SNPRINTF_RETVAL_C99",
        "||",
        "USE_MSVC__SNPRINTF",
        "||",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "has_precision = 0;",
        "has_precision = 0",
        "has_precision",
        "=",
        "0",
        ";",
        "precision = 6;",
        "precision = 6",
        "precision",
        "=",
        "6",
        ";",
        "if (dp->precision_start != dp->precision_end)\n                  {\n                    if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }\n                  }",
        "if",
        "(dp->precision_start != dp->precision_end)",
        "(",
        "dp->precision_start != dp->precision_end",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        "!=",
        "dp->precision_end",
        "dp",
        "->",
        "precision_end",
        ")",
        "{\n                    if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }\n                  }",
        "{",
        "if (dp->precision_arg_index != ARG_NONE)\n                      {\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }\n                    else\n                      {\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }",
        "if",
        "(dp->precision_arg_index != ARG_NONE)",
        "(",
        "dp->precision_arg_index != ARG_NONE",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "!=",
        "ARG_NONE",
        ")",
        "{\n                        int arg;\n\n                        if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();\n                        arg = a.arg[dp->precision_arg_index].a.a_int;\n                        /* \"A negative precision is taken as if the precision\n                            were omitted.\"  */\n                        if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }\n                      }",
        "{",
        "int arg;",
        "int",
        "arg",
        ";",
        "if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                          abort ();",
        "if",
        "(!(a.arg[dp->precision_arg_index].type == TYPE_INT))",
        "(",
        "!(a.arg[dp->precision_arg_index].type == TYPE_INT)",
        "!",
        "(a.arg[dp->precision_arg_index].type == TYPE_INT)",
        "(",
        "a.arg[dp->precision_arg_index].type == TYPE_INT",
        "a.arg[dp->precision_arg_index].type",
        "a.arg[dp->precision_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "]",
        ".",
        "type",
        "==",
        "TYPE_INT",
        ")",
        ")",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "arg = a.arg[dp->precision_arg_index].a.a_int;",
        "arg = a.arg[dp->precision_arg_index].a.a_int",
        "arg",
        "=",
        "a.arg[dp->precision_arg_index].a.a_int",
        "a.arg[dp->precision_arg_index].a",
        "a.arg[dp->precision_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_int",
        ";",
        "/* \"A negative precision is taken as if the precision\n                            were omitted.\"  */",
        "if (arg >= 0)\n                          {\n                            precision = arg;\n                            has_precision = 1;\n                          }",
        "if",
        "(arg >= 0)",
        "(",
        "arg >= 0",
        "arg",
        ">=",
        "0",
        ")",
        "{\n                            precision = arg;\n                            has_precision = 1;\n                          }",
        "{",
        "precision = arg;",
        "precision = arg",
        "precision",
        "=",
        "arg",
        ";",
        "has_precision = 1;",
        "has_precision = 1",
        "has_precision",
        "=",
        "1",
        ";",
        "}",
        "}",
        "else",
        "{\n                        const FCHAR_T *digitp = dp->precision_start + 1;\n\n                        precision = 0;\n                        while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');\n                        has_precision = 1;\n                      }",
        "{",
        "const FCHAR_T *digitp = dp->precision_start + 1;",
        "const",
        "const",
        "FCHAR_T",
        "*digitp = dp->precision_start + 1",
        "*digitp",
        "*",
        "digitp",
        "=",
        "dp->precision_start + 1",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        "+",
        "1",
        ";",
        "precision = 0;",
        "precision = 0",
        "precision",
        "=",
        "0",
        ";",
        "while (digitp != dp->precision_end)\n                          precision = xsum (xtimes (precision, 10), *digitp++ - '0');",
        "while",
        "(digitp != dp->precision_end)",
        "(",
        "digitp != dp->precision_end",
        "digitp",
        "!=",
        "dp->precision_end",
        "dp",
        "->",
        "precision_end",
        ")",
        "precision = xsum (xtimes (precision, 10), *digitp++ - '0');",
        "precision = xsum (xtimes (precision, 10), *digitp++ - '0')",
        "precision",
        "=",
        "xsum (xtimes (precision, 10), *digitp++ - '0')",
        "xsum",
        "(xtimes (precision, 10), *digitp++ - '0')",
        "(",
        "xtimes (precision, 10)",
        "xtimes",
        "(precision, 10)",
        "(",
        "precision",
        ",",
        "10",
        ")",
        ",",
        "*digitp++ - '0'",
        "*digitp++",
        "*",
        "digitp++",
        "digitp",
        "++",
        "-",
        "'0'",
        "'",
        "'",
        ")",
        ";",
        "has_precision = 1;",
        "has_precision = 1",
        "has_precision",
        "=",
        "1",
        ";",
        "}",
        "}",
        "#endif",
        "/* Decide whether to handle the precision ourselves.  */",
        "#if NEED_PRINTF_UNBOUNDED_PRECISION\n                switch (dp->conversion)\n                  {\n                  case 'd': case 'i': case 'u':\n                  case 'o':\n                  case 'x': case 'X': case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;\n                  default:\n                    prec_ourselves = 0;\n                    break;\n                  }\n#endif",
        "#if",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "switch (dp->conversion)\n                  {\n                  case 'd': case 'i': case 'u':\n                  case 'o':\n                  case 'x': case 'X': case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;\n                  default:\n                    prec_ourselves = 0;\n                    break;\n                  }",
        "switch",
        "(dp->conversion)",
        "(",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        ")",
        "{\n                  case 'd': case 'i': case 'u':\n                  case 'o':\n                  case 'x': case 'X': case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;\n                  default:\n                    prec_ourselves = 0;\n                    break;\n                  }",
        "{",
        "case 'd':",
        "case",
        "'d'",
        "'",
        "'",
        ":",
        "case 'i':",
        "case",
        "'i'",
        "'",
        "'",
        ":",
        "case 'u':",
        "case",
        "'u'",
        "'",
        "'",
        ":",
        "case 'o':",
        "case",
        "'o'",
        "'",
        "'",
        ":",
        "case 'x':",
        "case",
        "'x'",
        "'",
        "'",
        ":",
        "case 'X':",
        "case",
        "'X'",
        "'",
        "'",
        ":",
        "case 'p':\n                    prec_ourselves = has_precision && (precision > 0);\n                    break;",
        "case",
        "'p'",
        "'",
        "'",
        ":",
        "prec_ourselves = has_precision && (precision > 0);",
        "prec_ourselves = has_precision && (precision > 0)",
        "prec_ourselves",
        "=",
        "has_precision && (precision > 0)",
        "has_precision",
        "&&",
        "(precision > 0)",
        "(",
        "precision > 0",
        "precision",
        ">",
        "0",
        ")",
        ";",
        "break;",
        "break",
        ";",
        "default:\n                    prec_ourselves = 0;\n                    break;",
        "default",
        ":",
        "prec_ourselves = 0;",
        "prec_ourselves = 0",
        "prec_ourselves",
        "=",
        "0",
        ";",
        "break;",
        "break",
        ";",
        "}",
        "#endif",
        "/* Decide whether to perform the padding ourselves.  */",
        "#if !NEED_PRINTF_FLAG_LEFTADJUST && (!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION)\n                switch (dp->conversion)\n                  {\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif\n# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif\n                    pad_ourselves = 1;\n                    break;\n                  default:\n                    pad_ourselves = prec_ourselves;\n                    break;\n                  }\n#endif",
        "#if",
        "!NEED_PRINTF_FLAG_LEFTADJUST && (!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION)",
        "!NEED_PRINTF_FLAG_LEFTADJUST",
        "!",
        "NEED_PRINTF_FLAG_LEFTADJUST",
        "&&",
        "(!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION)",
        "(",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_ZERO",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "||",
        "ENABLE_UNISTDIO",
        "||",
        "NEED_PRINTF_FLAG_ZERO",
        "||",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        ")",
        "\n",
        "switch (dp->conversion)\n                  {\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif\n# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif\n                    pad_ourselves = 1;\n                    break;\n                  default:\n                    pad_ourselves = prec_ourselves;\n                    break;\n                  }",
        "switch",
        "(dp->conversion)",
        "(",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        ")",
        "{\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif\n# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif\n                    pad_ourselves = 1;\n                    break;\n                  default:\n                    pad_ourselves = prec_ourselves;\n                    break;\n                  }",
        "{",
        "# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                  /* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */\n                  case 'c': case 's':\n# endif",
        "# if",
        "!DCHAR_IS_TCHAR || ENABLE_UNISTDIO",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "||",
        "ENABLE_UNISTDIO",
        "\n",
        "/* If we need conversion from TCHAR_T[] to DCHAR_T[], we need\n                     to perform the padding after this conversion.  Functions\n                     with unistdio extensions perform the padding based on\n                     character count rather than element count.  */",
        "case 'c':",
        "case",
        "'c'",
        "'",
        "'",
        ":",
        "case 's':",
        "case",
        "'s'",
        "'",
        "'",
        ":",
        "# endif",
        "# if NEED_PRINTF_FLAG_ZERO\n                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G':\n                  case 'a': case 'A':\n# endif",
        "# if",
        "NEED_PRINTF_FLAG_ZERO",
        "\n",
        "case 'f':",
        "case",
        "'f'",
        "'",
        "'",
        ":",
        "case 'F':",
        "case",
        "'F'",
        "'",
        "'",
        ":",
        "case 'e':",
        "case",
        "'e'",
        "'",
        "'",
        ":",
        "case 'E':",
        "case",
        "'E'",
        "'",
        "'",
        ":",
        "case 'g':",
        "case",
        "'g'",
        "'",
        "'",
        ":",
        "case 'G':",
        "case",
        "'G'",
        "'",
        "'",
        ":",
        "case 'a':",
        "case",
        "'a'",
        "'",
        "'",
        ":",
        "case 'A':",
        "case",
        "'A'",
        "'",
        "'",
        ":",
        "# endif",
        "pad_ourselves = 1;",
        "pad_ourselves = 1",
        "pad_ourselves",
        "=",
        "1",
        ";",
        "break;",
        "break",
        ";",
        "default:\n                    pad_ourselves = prec_ourselves;\n                    break;",
        "default",
        ":",
        "pad_ourselves = prec_ourselves;",
        "pad_ourselves = prec_ourselves",
        "pad_ourselves",
        "=",
        "prec_ourselves",
        ";",
        "break;",
        "break",
        ";",
        "}",
        "#endif",
        "#if !USE_SNPRINTF\n                /* Allocate a temporary buffer of sufficient size for calling\n                   sprintf.  */\n                tmp_length =\n                  MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves);\n\n                if (tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T))\n                  tmp = tmpbuf;\n                else\n                  {\n                    size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));\n\n                    if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;\n                    tmp = (TCHAR_T *) malloc (tmp_memsize);\n                    if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;\n                  }\n#endif",
        "#if",
        "!USE_SNPRINTF",
        "!",
        "USE_SNPRINTF",
        "\n",
        "/* Allocate a temporary buffer of sufficient size for calling\n                   sprintf.  */",
        "tmp_length =\n                  MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves);",
        "tmp_length =\n                  MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves)",
        "tmp_length",
        "=",
        "MAX_ROOM_NEEDED (&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves)",
        "MAX_ROOM_NEEDED",
        "(&a, dp->arg_index, dp->conversion, type,\n                                   flags, width, has_precision, precision,\n                                   pad_ourselves)",
        "(",
        "&a",
        "&",
        "a",
        ",",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        ",",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        ",",
        "type",
        ",",
        "flags",
        ",",
        "width",
        ",",
        "has_precision",
        ",",
        "precision",
        ",",
        "pad_ourselves",
        ")",
        ";",
        "if (tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T))\n                  tmp = tmpbuf;\n                else\n                  {\n                    size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));\n\n                    if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;\n                    tmp = (TCHAR_T *) malloc (tmp_memsize);\n                    if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;\n                  }",
        "if",
        "(tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T))",
        "(",
        "tmp_length <= sizeof (tmpbuf) / sizeof (TCHAR_T)",
        "tmp_length",
        "<=",
        "sizeof (tmpbuf) / sizeof (TCHAR_T)",
        "sizeof (tmpbuf)",
        "sizeof",
        "(",
        "tmpbuf",
        "tmpbuf",
        ")",
        "/",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        "tmp = tmpbuf;",
        "tmp = tmpbuf",
        "tmp",
        "=",
        "tmpbuf",
        ";",
        "else",
        "{\n                    size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));\n\n                    if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;\n                    tmp = (TCHAR_T *) malloc (tmp_memsize);\n                    if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;\n                  }",
        "{",
        "size_t tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T));",
        "size_t",
        "tmp_memsize = xtimes (tmp_length, sizeof (TCHAR_T))",
        "tmp_memsize",
        "=",
        "xtimes (tmp_length, sizeof (TCHAR_T))",
        "xtimes",
        "(tmp_length, sizeof (TCHAR_T))",
        "(",
        "tmp_length",
        ",",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        ";",
        "if (size_overflow_p (tmp_memsize))\n                      /* Overflow, would lead to out of memory.  */\n                      goto out_of_memory;",
        "if",
        "(size_overflow_p (tmp_memsize))",
        "(",
        "size_overflow_p (tmp_memsize)",
        "size_overflow_p",
        "(tmp_memsize)",
        "(",
        "tmp_memsize",
        ")",
        ")",
        "/* Overflow, would lead to out of memory.  */",
        "goto out_of_memory;",
        "goto",
        "out_of_memory",
        ";",
        "tmp = (TCHAR_T *) malloc (tmp_memsize);",
        "tmp = (TCHAR_T *) malloc (tmp_memsize)",
        "tmp",
        "=",
        "(TCHAR_T *) malloc (tmp_memsize)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "malloc (tmp_memsize)",
        "malloc",
        "(tmp_memsize)",
        "(",
        "tmp_memsize",
        ")",
        ";",
        "if (tmp == NULL)\n                      /* Out of memory.  */\n                      goto out_of_memory;",
        "if",
        "(tmp == NULL)",
        "(",
        "tmp == NULL",
        "tmp",
        "==",
        "NULL",
        ")",
        "/* Out of memory.  */",
        "goto out_of_memory;",
        "goto",
        "out_of_memory",
        ";",
        "}",
        "#endif",
        "/* Construct the format string for calling snprintf or\n                   sprintf.  */",
        "fbp = buf;",
        "fbp = buf",
        "fbp",
        "=",
        "buf",
        ";",
        "*fbp++ = '%';",
        "*fbp++ = '%'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'%'",
        "'",
        "'",
        ";",
        "#if NEED_PRINTF_FLAG_GROUPING\n                /* The underlying implementation doesn't support the ' flag.\n                   Produce no grouping characters in this case; this is\n                   acceptable because the grouping is locale dependent.  */\n#else\n                if (flags & FLAG_GROUP)\n                  *fbp++ = '\\'';\n#endif",
        "#if",
        "NEED_PRINTF_FLAG_GROUPING",
        "\n",
        "/* The underlying implementation doesn't support the ' flag.\n                   Produce no grouping characters in this case; this is\n                   acceptable because the grouping is locale dependent.  */",
        "#else\n                if (flags & FLAG_GROUP)\n                  *fbp++ = '\\'';",
        "#else",
        "if (flags & FLAG_GROUP)\n                  *fbp++ = '\\'';",
        "if",
        "(flags & FLAG_GROUP)",
        "(",
        "flags & FLAG_GROUP",
        "flags",
        "&",
        "FLAG_GROUP",
        ")",
        "*fbp++ = '\\'';",
        "*fbp++ = '\\''",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'\\''",
        "'",
        "\\'",
        "'",
        ";",
        "#endif",
        "if (flags & FLAG_LEFT)\n                  *fbp++ = '-';",
        "if",
        "(flags & FLAG_LEFT)",
        "(",
        "flags & FLAG_LEFT",
        "flags",
        "&",
        "FLAG_LEFT",
        ")",
        "*fbp++ = '-';",
        "*fbp++ = '-'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'-'",
        "'",
        "'",
        ";",
        "if (flags & FLAG_SHOWSIGN)\n                  *fbp++ = '+';",
        "if",
        "(flags & FLAG_SHOWSIGN)",
        "(",
        "flags & FLAG_SHOWSIGN",
        "flags",
        "&",
        "FLAG_SHOWSIGN",
        ")",
        "*fbp++ = '+';",
        "*fbp++ = '+'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'+'",
        "'",
        "'",
        ";",
        "if (flags & FLAG_SPACE)\n                  *fbp++ = ' ';",
        "if",
        "(flags & FLAG_SPACE)",
        "(",
        "flags & FLAG_SPACE",
        "flags",
        "&",
        "FLAG_SPACE",
        ")",
        "*fbp++ = ' ';",
        "*fbp++ = ' '",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "' '",
        "'",
        "'",
        ";",
        "if (flags & FLAG_ALT)\n                  *fbp++ = '#';",
        "if",
        "(flags & FLAG_ALT)",
        "(",
        "flags & FLAG_ALT",
        "flags",
        "&",
        "FLAG_ALT",
        ")",
        "*fbp++ = '#';",
        "*fbp++ = '#'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'#'",
        "'",
        "'",
        ";",
        "#if __GLIBC__ >= 2 && !defined __UCLIBC__\n                if (flags & FLAG_LOCALIZED)\n                  *fbp++ = 'I';\n#endif",
        "#if",
        "__GLIBC__ >= 2 && !defined __UCLIBC__",
        "__GLIBC__ >= 2",
        "__GLIBC__",
        ">=",
        "2",
        "&&",
        "!defined __UCLIBC__",
        "!",
        "defined __UCLIBC__",
        "defined",
        "__UCLIBC__",
        "\n",
        "if (flags & FLAG_LOCALIZED)\n                  *fbp++ = 'I';",
        "if",
        "(flags & FLAG_LOCALIZED)",
        "(",
        "flags & FLAG_LOCALIZED",
        "flags",
        "&",
        "FLAG_LOCALIZED",
        ")",
        "*fbp++ = 'I';",
        "*fbp++ = 'I'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'I'",
        "'",
        "'",
        ";",
        "#endif",
        "if (!pad_ourselves)\n                  {\n                    if (flags & FLAG_ZERO)\n                      *fbp++ = '0';\n                    if (dp->width_start != dp->width_end)\n                      {\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }",
        "if",
        "(!pad_ourselves)",
        "(",
        "!pad_ourselves",
        "!",
        "pad_ourselves",
        ")",
        "{\n                    if (flags & FLAG_ZERO)\n                      *fbp++ = '0';\n                    if (dp->width_start != dp->width_end)\n                      {\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }",
        "{",
        "if (flags & FLAG_ZERO)\n                      *fbp++ = '0';",
        "if",
        "(flags & FLAG_ZERO)",
        "(",
        "flags & FLAG_ZERO",
        "flags",
        "&",
        "FLAG_ZERO",
        ")",
        "*fbp++ = '0';",
        "*fbp++ = '0'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'0'",
        "'",
        "'",
        ";",
        "if (dp->width_start != dp->width_end)\n                      {\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }",
        "if",
        "(dp->width_start != dp->width_end)",
        "(",
        "dp->width_start != dp->width_end",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        "!=",
        "dp->width_end",
        "dp",
        "->",
        "width_end",
        ")",
        "{\n                        size_t n = dp->width_end - dp->width_start;\n                        /* The width specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }",
        "{",
        "size_t n = dp->width_end - dp->width_start;",
        "size_t",
        "n = dp->width_end - dp->width_start",
        "n",
        "=",
        "dp->width_end - dp->width_start",
        "dp->width_end",
        "dp",
        "->",
        "width_end",
        "-",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        ";",
        "/* The width specification is known to consist only\n                           of standard ASCII characters.  */",
        "if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }",
        "if",
        "(sizeof (FCHAR_T) == sizeof (TCHAR_T))",
        "(",
        "sizeof (FCHAR_T) == sizeof (TCHAR_T)",
        "sizeof (FCHAR_T)",
        "sizeof",
        "(FCHAR_T)",
        "(",
        "FCHAR_T",
        ")",
        "==",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        "{\n                            memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }",
        "{",
        "memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T));",
        "memcpy (fbp, dp->width_start, n * sizeof (TCHAR_T))",
        "memcpy",
        "(fbp, dp->width_start, n * sizeof (TCHAR_T))",
        "(",
        "fbp",
        ",",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        ",",
        "n * sizeof (TCHAR_T)",
        "n",
        "*",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        ";",
        "fbp += n;",
        "fbp += n",
        "fbp",
        "+=",
        "n",
        ";",
        "}",
        "else",
        "{\n                            const FCHAR_T *mp = dp->width_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }",
        "{",
        "const FCHAR_T *mp = dp->width_start;",
        "const",
        "const",
        "FCHAR_T",
        "*mp = dp->width_start",
        "*mp",
        "*",
        "mp",
        "=",
        "dp->width_start",
        "dp",
        "->",
        "width_start",
        ";",
        "do\n                              *fbp++ = *mp++;\n                            while (--n > 0);",
        "do",
        "*fbp++ = *mp++;",
        "*fbp++ = *mp++",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "*mp++",
        "*",
        "mp++",
        "mp",
        "++",
        ";",
        "while",
        "(--n > 0)",
        "(",
        "--n > 0",
        "--n",
        "--",
        "n",
        ">",
        "0",
        ")",
        ";",
        "}",
        "}",
        "}",
        "if (!prec_ourselves)\n                  {\n                    if (dp->precision_start != dp->precision_end)\n                      {\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }",
        "if",
        "(!prec_ourselves)",
        "(",
        "!prec_ourselves",
        "!",
        "prec_ourselves",
        ")",
        "{\n                    if (dp->precision_start != dp->precision_end)\n                      {\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }\n                  }",
        "{",
        "if (dp->precision_start != dp->precision_end)\n                      {\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }",
        "if",
        "(dp->precision_start != dp->precision_end)",
        "(",
        "dp->precision_start != dp->precision_end",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        "!=",
        "dp->precision_end",
        "dp",
        "->",
        "precision_end",
        ")",
        "{\n                        size_t n = dp->precision_end - dp->precision_start;\n                        /* The precision specification is known to consist only\n                           of standard ASCII characters.  */\n                        if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }\n                      }",
        "{",
        "size_t n = dp->precision_end - dp->precision_start;",
        "size_t",
        "n = dp->precision_end - dp->precision_start",
        "n",
        "=",
        "dp->precision_end - dp->precision_start",
        "dp->precision_end",
        "dp",
        "->",
        "precision_end",
        "-",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        ";",
        "/* The precision specification is known to consist only\n                           of standard ASCII characters.  */",
        "if (sizeof (FCHAR_T) == sizeof (TCHAR_T))\n                          {\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }\n                        else\n                          {\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }",
        "if",
        "(sizeof (FCHAR_T) == sizeof (TCHAR_T))",
        "(",
        "sizeof (FCHAR_T) == sizeof (TCHAR_T)",
        "sizeof (FCHAR_T)",
        "sizeof",
        "(FCHAR_T)",
        "(",
        "FCHAR_T",
        ")",
        "==",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        "{\n                            memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));\n                            fbp += n;\n                          }",
        "{",
        "memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T));",
        "memcpy (fbp, dp->precision_start, n * sizeof (TCHAR_T))",
        "memcpy",
        "(fbp, dp->precision_start, n * sizeof (TCHAR_T))",
        "(",
        "fbp",
        ",",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        ",",
        "n * sizeof (TCHAR_T)",
        "n",
        "*",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        ";",
        "fbp += n;",
        "fbp += n",
        "fbp",
        "+=",
        "n",
        ";",
        "}",
        "else",
        "{\n                            const FCHAR_T *mp = dp->precision_start;\n                            do\n                              *fbp++ = *mp++;\n                            while (--n > 0);\n                          }",
        "{",
        "const FCHAR_T *mp = dp->precision_start;",
        "const",
        "const",
        "FCHAR_T",
        "*mp = dp->precision_start",
        "*mp",
        "*",
        "mp",
        "=",
        "dp->precision_start",
        "dp",
        "->",
        "precision_start",
        ";",
        "do\n                              *fbp++ = *mp++;\n                            while (--n > 0);",
        "do",
        "*fbp++ = *mp++;",
        "*fbp++ = *mp++",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "*mp++",
        "*",
        "mp++",
        "mp",
        "++",
        ";",
        "while",
        "(--n > 0)",
        "(",
        "--n > 0",
        "--n",
        "--",
        "n",
        ">",
        "0",
        ")",
        ";",
        "}",
        "}",
        "}",
        "switch (type)\n                  {\n#if HAVE_LONG_LONG_INT\n                  case TYPE_LONGLONGINT:\n                  case TYPE_ULONGLONGINT:\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif\n#endif\n                    FALLTHROUGH;\n                  case TYPE_LONGINT:\n                  case TYPE_ULONGINT:\n#if HAVE_WINT_T\n                  case TYPE_WIDE_CHAR:\n#endif\n#if HAVE_WCHAR_T\n                  case TYPE_WIDE_STRING:\n#endif\n                    *fbp++ = 'l';\n                    break;\n                  case TYPE_LONGDOUBLE:\n                    *fbp++ = 'L';\n                    break;\n                  default:\n                    break;\n                  }",
        "switch",
        "(type)",
        "(",
        "type",
        ")",
        "{\n#if HAVE_LONG_LONG_INT\n                  case TYPE_LONGLONGINT:\n                  case TYPE_ULONGLONGINT:\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif\n#endif\n                    FALLTHROUGH;\n                  case TYPE_LONGINT:\n                  case TYPE_ULONGINT:\n#if HAVE_WINT_T\n                  case TYPE_WIDE_CHAR:\n#endif\n#if HAVE_WCHAR_T\n                  case TYPE_WIDE_STRING:\n#endif\n                    *fbp++ = 'l';\n                    break;\n                  case TYPE_LONGDOUBLE:\n                    *fbp++ = 'L';\n                    break;\n                  default:\n                    break;\n                  }",
        "{",
        "#if HAVE_LONG_LONG_INT\n                  case TYPE_LONGLONGINT:\n                  case TYPE_ULONGLONGINT:\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif\n#endif",
        "#if",
        "HAVE_LONG_LONG_INT",
        "\n",
        "case TYPE_LONGLONGINT:",
        "case",
        "TYPE_LONGLONGINT",
        ":",
        "case TYPE_ULONGLONGINT:",
        "case",
        "TYPE_ULONGLONGINT",
        ":",
        "# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n                    *fbp++ = 'I';\n                    *fbp++ = '6';\n                    *fbp++ = '4';\n                    break;\n# else\n                    *fbp++ = 'l';\n# endif",
        "# if",
        "(defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__",
        "(defined _WIN32 || defined __WIN32__)",
        "(",
        "defined _WIN32 || defined __WIN32__",
        "defined _WIN32",
        "defined",
        "_WIN32",
        "||",
        "defined __WIN32__",
        "defined",
        "__WIN32__",
        ")",
        "&&",
        "! defined __CYGWIN__",
        "!",
        "defined __CYGWIN__",
        "defined",
        "__CYGWIN__",
        "\n",
        "*fbp++ = 'I';",
        "*fbp++ = 'I'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'I'",
        "'",
        "'",
        ";",
        "*fbp++ = '6';",
        "*fbp++ = '6'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'6'",
        "'",
        "'",
        ";",
        "*fbp++ = '4';",
        "*fbp++ = '4'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'4'",
        "'",
        "'",
        ";",
        "break;",
        "break",
        ";",
        "# else\n                    *fbp++ = 'l';",
        "# else",
        "*fbp++ = 'l';",
        "*fbp++ = 'l'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'l'",
        "'",
        "'",
        ";",
        "# endif",
        "#endif",
        "FALLTHROUGH;",
        "FALLTHROUGH",
        ";",
        "case TYPE_LONGINT:",
        "case",
        "TYPE_LONGINT",
        ":",
        "case TYPE_ULONGINT:",
        "case",
        "TYPE_ULONGINT",
        ":",
        "#if HAVE_WINT_T\n                  case TYPE_WIDE_CHAR:\n#endif",
        "#if",
        "HAVE_WINT_T",
        "\n",
        "case TYPE_WIDE_CHAR:",
        "case",
        "TYPE_WIDE_CHAR",
        ":",
        "#endif",
        "#if HAVE_WCHAR_T\n                  case TYPE_WIDE_STRING:\n#endif",
        "#if",
        "HAVE_WCHAR_T",
        "\n",
        "case TYPE_WIDE_STRING:",
        "case",
        "TYPE_WIDE_STRING",
        ":",
        "#endif",
        "*fbp++ = 'l';",
        "*fbp++ = 'l'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'l'",
        "'",
        "'",
        ";",
        "break;",
        "break",
        ";",
        "case TYPE_LONGDOUBLE:\n                    *fbp++ = 'L';\n                    break;",
        "case",
        "TYPE_LONGDOUBLE",
        ":",
        "*fbp++ = 'L';",
        "*fbp++ = 'L'",
        "*fbp++",
        "*",
        "fbp++",
        "fbp",
        "++",
        "=",
        "'L'",
        "'",
        "'",
        ";",
        "break;",
        "break",
        ";",
        "default:\n                    break;",
        "default",
        ":",
        "break;",
        "break",
        ";",
        "}",
        "#if NEED_PRINTF_DIRECTIVE_F\n                if (dp->conversion == 'F')\n                  *fbp = 'f';\n                else\n#endif",
        "#if",
        "NEED_PRINTF_DIRECTIVE_F",
        "\n",
        "if (dp->conversion == 'F')\n                  *fbp = 'f';",
        "if",
        "(dp->conversion == 'F')",
        "(",
        "dp->conversion == 'F'",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        "==",
        "'F'",
        "'",
        "'",
        ")",
        "*fbp = 'f';",
        "*fbp = 'f'",
        "*fbp",
        "*",
        "fbp",
        "=",
        "'f'",
        "'",
        "'",
        ";",
        "else",
        "else",
        "#endif",
        "*fbp = dp->conversion;",
        "*fbp = dp->conversion",
        "*fbp",
        "*",
        "fbp",
        "=",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        ";",
        "#if USE_SNPRINTF\n# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))\n                fbp[1] = '%';\n                fbp[2] = 'n';\n                fbp[3] = '\\0';\n# else\n                /* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */\n                /* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */\n                fbp[1] = '\\0';\n# endif\n#else\n                fbp[1] = '\\0';\n#endif",
        "#if",
        "USE_SNPRINTF",
        "\n",
        "# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))\n                fbp[1] = '%';\n                fbp[2] = 'n';\n                fbp[3] = '\\0';\n# else\n                /* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */\n                /* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */\n                fbp[1] = '\\0';\n# endif",
        "# if",
        "!(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))",
        "!",
        "(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))",
        "(",
        "((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)",
        "((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__)",
        "(",
        "(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__",
        "(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3))",
        "(",
        "__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)",
        "__GLIBC__ > 2",
        "__GLIBC__",
        ">",
        "2",
        "||",
        "(__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)",
        "(",
        "__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3",
        "__GLIBC__ == 2",
        "__GLIBC__",
        "==",
        "2",
        "&&",
        "__GLIBC_MINOR__ >= 3",
        "__GLIBC_MINOR__",
        ">=",
        "3",
        ")",
        ")",
        "&&",
        "!defined __UCLIBC__",
        "!",
        "defined __UCLIBC__",
        "defined",
        "__UCLIBC__",
        ")",
        "||",
        "((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__)",
        "(",
        "(defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__",
        "(defined _WIN32 || defined __WIN32__)",
        "(",
        "defined _WIN32 || defined __WIN32__",
        "defined _WIN32",
        "defined",
        "_WIN32",
        "||",
        "defined __WIN32__",
        "defined",
        "__WIN32__",
        ")",
        "&&",
        "! defined __CYGWIN__",
        "!",
        "defined __CYGWIN__",
        "defined",
        "__CYGWIN__",
        ")",
        ")",
        "\n",
        "fbp[1] = '%';",
        "fbp[1] = '%'",
        "fbp[1]",
        "fbp",
        "[",
        "1",
        "]",
        "=",
        "'%'",
        "'",
        "'",
        ";",
        "fbp[2] = 'n';",
        "fbp[2] = 'n'",
        "fbp[2]",
        "fbp",
        "[",
        "2",
        "]",
        "=",
        "'n'",
        "'",
        "'",
        ";",
        "fbp[3] = '\\0';",
        "fbp[3] = '\\0'",
        "fbp[3]",
        "fbp",
        "[",
        "3",
        "]",
        "=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ";",
        "# else\n                /* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */\n                /* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */\n                fbp[1] = '\\0';",
        "# else",
        "/* On glibc2 systems from glibc >= 2.3 - probably also older\n                   ones - we know that snprintf's return value conforms to\n                   ISO C 99: the tests gl_SNPRINTF_RETVAL_C99 and\n                   gl_SNPRINTF_TRUNCATION_C99 pass.\n                   Therefore we can avoid using %n in this situation.\n                   On glibc2 systems from 2004-10-18 or newer, the use of %n\n                   in format strings in writable memory may crash the program\n                   (if compiled with _FORTIFY_SOURCE=2), so we should avoid it\n                   in this situation.  */",
        "/* On native Windows systems (such as mingw), we can avoid using\n                   %n because:\n                     - Although the gl_SNPRINTF_TRUNCATION_C99 test fails,\n                       snprintf does not write more than the specified number\n                       of bytes. (snprintf (buf, 3, \"%d %d\", 4567, 89) writes\n                       '4', '5', '6' into buf, not '4', '5', '\\0'.)\n                     - Although the gl_SNPRINTF_RETVAL_C99 test fails, snprintf\n                       allows us to recognize the case of an insufficient\n                       buffer size: it returns -1 in this case.\n                   On native Windows systems (such as mingw) where the OS is\n                   Windows Vista, the use of %n in format strings by default\n                   crashes the program. See\n                     <http://gcc.gnu.org/ml/gcc/2007-06/msg00122.html> and\n                     <http://msdn2.microsoft.com/en-us/library/ms175782(VS.80).aspx>\n                   So we should avoid %n in this situation.  */",
        "fbp[1] = '\\0';",
        "fbp[1] = '\\0'",
        "fbp[1]",
        "fbp",
        "[",
        "1",
        "]",
        "=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ";",
        "# endif",
        "#else\n                fbp[1] = '\\0';",
        "#else",
        "fbp[1] = '\\0';",
        "fbp[1] = '\\0'",
        "fbp[1]",
        "fbp",
        "[",
        "1",
        "]",
        "=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ";",
        "#endif",
        "/* Construct the arguments for calling snprintf or sprintf.  */",
        "prefix_count = 0;",
        "prefix_count = 0",
        "prefix_count",
        "=",
        "0",
        ";",
        "if (!pad_ourselves && dp->width_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;\n                  }",
        "if",
        "(!pad_ourselves && dp->width_arg_index != ARG_NONE)",
        "(",
        "!pad_ourselves && dp->width_arg_index != ARG_NONE",
        "!pad_ourselves",
        "!",
        "pad_ourselves",
        "&&",
        "dp->width_arg_index != ARG_NONE",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "!=",
        "ARG_NONE",
        ")",
        "{\n                    if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;\n                  }",
        "{",
        "if (!(a.arg[dp->width_arg_index].type == TYPE_INT))\n                      abort ();",
        "if",
        "(!(a.arg[dp->width_arg_index].type == TYPE_INT))",
        "(",
        "!(a.arg[dp->width_arg_index].type == TYPE_INT)",
        "!",
        "(a.arg[dp->width_arg_index].type == TYPE_INT)",
        "(",
        "a.arg[dp->width_arg_index].type == TYPE_INT",
        "a.arg[dp->width_arg_index].type",
        "a.arg[dp->width_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "]",
        ".",
        "type",
        "==",
        "TYPE_INT",
        ")",
        ")",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int;",
        "prefixes[prefix_count++] = a.arg[dp->width_arg_index].a.a_int",
        "prefixes[prefix_count++]",
        "prefixes",
        "[",
        "prefix_count++",
        "prefix_count",
        "++",
        "]",
        "=",
        "a.arg[dp->width_arg_index].a.a_int",
        "a.arg[dp->width_arg_index].a",
        "a.arg[dp->width_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->width_arg_index",
        "dp",
        "->",
        "width_arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_int",
        ";",
        "}",
        "if (!prec_ourselves && dp->precision_arg_index != ARG_NONE)\n                  {\n                    if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;\n                  }",
        "if",
        "(!prec_ourselves && dp->precision_arg_index != ARG_NONE)",
        "(",
        "!prec_ourselves && dp->precision_arg_index != ARG_NONE",
        "!prec_ourselves",
        "!",
        "prec_ourselves",
        "&&",
        "dp->precision_arg_index != ARG_NONE",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "!=",
        "ARG_NONE",
        ")",
        "{\n                    if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                      abort ();\n                    prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;\n                  }",
        "{",
        "if (!(a.arg[dp->precision_arg_index].type == TYPE_INT))\n                      abort ();",
        "if",
        "(!(a.arg[dp->precision_arg_index].type == TYPE_INT))",
        "(",
        "!(a.arg[dp->precision_arg_index].type == TYPE_INT)",
        "!",
        "(a.arg[dp->precision_arg_index].type == TYPE_INT)",
        "(",
        "a.arg[dp->precision_arg_index].type == TYPE_INT",
        "a.arg[dp->precision_arg_index].type",
        "a.arg[dp->precision_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "]",
        ".",
        "type",
        "==",
        "TYPE_INT",
        ")",
        ")",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int;",
        "prefixes[prefix_count++] = a.arg[dp->precision_arg_index].a.a_int",
        "prefixes[prefix_count++]",
        "prefixes",
        "[",
        "prefix_count++",
        "prefix_count",
        "++",
        "]",
        "=",
        "a.arg[dp->precision_arg_index].a.a_int",
        "a.arg[dp->precision_arg_index].a",
        "a.arg[dp->precision_arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->precision_arg_index",
        "dp",
        "->",
        "precision_arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_int",
        ";",
        "}",
        "#if USE_SNPRINTF\n                /* The SNPRINTF result is appended after result[0..length].\n                   The latter is an array of DCHAR_T; SNPRINTF appends an\n                   array of TCHAR_T to it.  This is possible because\n                   sizeof (TCHAR_T) divides sizeof (DCHAR_T) and\n                   alignof (TCHAR_T) <= alignof (DCHAR_T).  */\n# define TCHARS_PER_DCHAR (sizeof (DCHAR_T) / sizeof (TCHAR_T))\n                /* Ensure that maxlen below will be >= 2.  Needed on BeOS,\n                   where an snprintf() with maxlen==1 acts like sprintf().  */\n                ENSURE_ALLOCATION (xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR));\n                /* Prepare checking whether snprintf returns the count\n                   via %n.  */\n                *(TCHAR_T *) (result + length) = '\\0';\n#endif",
        "#if",
        "USE_SNPRINTF",
        "\n",
        "/* The SNPRINTF result is appended after result[0..length].\n                   The latter is an array of DCHAR_T; SNPRINTF appends an\n                   array of TCHAR_T to it.  This is possible because\n                   sizeof (TCHAR_T) divides sizeof (DCHAR_T) and\n                   alignof (TCHAR_T) <= alignof (DCHAR_T).  */",
        "# define TCHARS_PER_DCHAR (sizeof (DCHAR_T) / sizeof (TCHAR_T))\n",
        "# define",
        "TCHARS_PER_DCHAR",
        " (sizeof (DCHAR_T) / sizeof (TCHAR_T))",
        "\n",
        "/* Ensure that maxlen below will be >= 2.  Needed on BeOS,\n                   where an snprintf() with maxlen==1 acts like sprintf().  */",
        "ENSURE_ALLOCATION (xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR));",
        "ENSURE_ALLOCATION (xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR))",
        "ENSURE_ALLOCATION",
        "(xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR))",
        "(",
        "xsum (length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR)",
        "xsum",
        "(length,\n                                         (2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR)",
        "(",
        "length",
        ",",
        "(2 + TCHARS_PER_DCHAR - 1)\n                                         / TCHARS_PER_DCHAR",
        "(2 + TCHARS_PER_DCHAR - 1)",
        "(",
        "2 + TCHARS_PER_DCHAR - 1",
        "2 + TCHARS_PER_DCHAR",
        "2",
        "+",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        ")",
        ";",
        "/* Prepare checking whether snprintf returns the count\n                   via %n.  */",
        "*(TCHAR_T *) (result + length) = '\\0';",
        "*(TCHAR_T *) (result + length) = '\\0'",
        "*(TCHAR_T *) (result + length)",
        "*",
        "(TCHAR_T *) (result + length)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        "=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ";",
        "#endif",
        "orig_errno = errno;",
        "orig_errno = errno",
        "orig_errno",
        "=",
        "errno",
        ";",
        "for (;;)\n                  {\n                    int count = -1;\n\n#if USE_SNPRINTF\n                    int retcount = 0;\n                    size_t maxlen = allocated - length;\n                    /* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */\n                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;\n                    maxlen = maxlen * TCHARS_PER_DCHAR;\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#endif\n\n                    errno = 0;\n                    switch (type)\n                      {\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }\n\n#if USE_SNPRINTF\n                    /* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */\n                    if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }\n#endif\n\n                    /* Attempt to handle failure.  */\n                    if (count < 0)\n                      {\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }\n\n#if USE_SNPRINTF\n                    /* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */\n                    if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }\n#endif\n\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }\n#endif\n\n#if !USE_SNPRINTF\n                    if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();\n#endif\n\n#if !DCHAR_IS_TCHAR\n                    /* Convert from TCHAR_T[] to DCHAR_T[].  */\n                    if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }\n#endif\n\n#if DCHAR_IS_TCHAR && !USE_SNPRINTF\n                    /* Make room for the result.  */\n                    if (count > allocated - length)\n                      {\n                        /* Need at least count elements.  But allocate\n                           proportionally.  */\n                        size_t n =\n                          xmax (xsum (length, count), xtimes (allocated, 2));\n\n                        ENSURE_ALLOCATION (n);\n                      }\n#endif\n\n                    /* Here count <= allocated - length.  */\n\n                    /* Perform padding.  */\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (pad_ourselves && has_width)\n                      {\n                        size_t w;\n# if ENABLE_UNISTDIO\n                        /* Outside POSIX, it's preferable to compare the width\n                           against the number of _characters_ of the converted\n                           value.  */\n                        w = DCHAR_MBSNLEN (result + length, count);\n# else\n                        /* The width is compared against the number of _bytes_\n                           of the converted value, says POSIX.  */\n                        w = count;\n# endif\n                        if (w < width)\n                          {\n                            size_t pad = width - w;\n\n                            /* Make room for the result.  */\n                            if (xsum (count, pad) > allocated - length)\n                              {\n                                /* Need at least count + pad elements.  But\n                                   allocate proportionally.  */\n                                size_t n =\n                                  xmax (xsum3 (length, count, pad),\n                                        xtimes (allocated, 2));\n\n# if USE_SNPRINTF\n                                length += count;\n                                ENSURE_ALLOCATION (n);\n                                length -= count;\n# else\n                                ENSURE_ALLOCATION (n);\n# endif\n                              }\n                            /* Here count + pad <= allocated - length.  */\n\n                            {\n# if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                              DCHAR_T * const rp = result + length;\n# else\n                              DCHAR_T * const rp = tmp;\n# endif\n                              DCHAR_T *p = rp + count;\n                              DCHAR_T *end = p + pad;\n                              DCHAR_T *pad_ptr;\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                              if (dp->conversion == 'c'\n                                  || dp->conversion == 's')\n                                /* No zero-padding for string directives.  */\n                                pad_ptr = NULL;\n                              else\n# endif\n                                {\n                                  pad_ptr = (*rp == '-' ? rp + 1 : rp);\n                                  /* No zero-padding of \"inf\" and \"nan\".  */\n                                  if ((*pad_ptr >= 'A' && *pad_ptr <= 'Z')\n                                      || (*pad_ptr >= 'a' && *pad_ptr <= 'z'))\n                                    pad_ptr = NULL;\n                                }\n                              /* The generated string now extends from rp to p,\n                                 with the zero padding insertion point being at\n                                 pad_ptr.  */\n\n                              count = count + pad; /* = end - rp */\n\n                              if (flags & FLAG_LEFT)\n                                {\n                                  /* Pad with spaces on the right.  */\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                              else if ((flags & FLAG_ZERO) && pad_ptr != NULL)\n                                {\n                                  /* Pad with zeroes.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > pad_ptr)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = '0';\n                                }\n                              else\n                                {\n                                  /* Pad with spaces on the left.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > rp)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                            }\n                          }\n                      }\n#endif\n\n                    /* Here still count <= allocated - length.  */\n\n#if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                    /* The snprintf() result did fit.  */\n#else\n                    /* Append the sprintf() result.  */\n                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));\n#endif\n#if !USE_SNPRINTF\n                    if (tmp != tmpbuf)\n                      free (tmp);\n#endif\n\n#if NEED_PRINTF_DIRECTIVE_F\n                    if (dp->conversion == 'F')\n                      {\n                        /* Convert the %f result to upper case for %F.  */\n                        DCHAR_T *rp = result + length;\n                        size_t rc;\n                        for (rc = count; rc > 0; rc--, rp++)\n                          if (*rp >= 'a' && *rp <= 'z')\n                            *rp = *rp - 'a' + 'A';\n                      }\n#endif\n\n                    length += count;\n                    break;\n                  }",
        "for",
        "(",
        ";",
        ";",
        ")",
        "{\n                    int count = -1;\n\n#if USE_SNPRINTF\n                    int retcount = 0;\n                    size_t maxlen = allocated - length;\n                    /* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */\n                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;\n                    maxlen = maxlen * TCHARS_PER_DCHAR;\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#endif\n\n                    errno = 0;\n                    switch (type)\n                      {\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }\n\n#if USE_SNPRINTF\n                    /* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */\n                    if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }\n#endif\n\n                    /* Attempt to handle failure.  */\n                    if (count < 0)\n                      {\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }\n\n#if USE_SNPRINTF\n                    /* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */\n                    if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }\n#endif\n\n#if NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }\n#endif\n\n#if !USE_SNPRINTF\n                    if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();\n#endif\n\n#if !DCHAR_IS_TCHAR\n                    /* Convert from TCHAR_T[] to DCHAR_T[].  */\n                    if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }\n#endif\n\n#if DCHAR_IS_TCHAR && !USE_SNPRINTF\n                    /* Make room for the result.  */\n                    if (count > allocated - length)\n                      {\n                        /* Need at least count elements.  But allocate\n                           proportionally.  */\n                        size_t n =\n                          xmax (xsum (length, count), xtimes (allocated, 2));\n\n                        ENSURE_ALLOCATION (n);\n                      }\n#endif\n\n                    /* Here count <= allocated - length.  */\n\n                    /* Perform padding.  */\n#if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO || NEED_PRINTF_FLAG_LEFTADJUST || NEED_PRINTF_FLAG_ZERO || NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (pad_ourselves && has_width)\n                      {\n                        size_t w;\n# if ENABLE_UNISTDIO\n                        /* Outside POSIX, it's preferable to compare the width\n                           against the number of _characters_ of the converted\n                           value.  */\n                        w = DCHAR_MBSNLEN (result + length, count);\n# else\n                        /* The width is compared against the number of _bytes_\n                           of the converted value, says POSIX.  */\n                        w = count;\n# endif\n                        if (w < width)\n                          {\n                            size_t pad = width - w;\n\n                            /* Make room for the result.  */\n                            if (xsum (count, pad) > allocated - length)\n                              {\n                                /* Need at least count + pad elements.  But\n                                   allocate proportionally.  */\n                                size_t n =\n                                  xmax (xsum3 (length, count, pad),\n                                        xtimes (allocated, 2));\n\n# if USE_SNPRINTF\n                                length += count;\n                                ENSURE_ALLOCATION (n);\n                                length -= count;\n# else\n                                ENSURE_ALLOCATION (n);\n# endif\n                              }\n                            /* Here count + pad <= allocated - length.  */\n\n                            {\n# if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                              DCHAR_T * const rp = result + length;\n# else\n                              DCHAR_T * const rp = tmp;\n# endif\n                              DCHAR_T *p = rp + count;\n                              DCHAR_T *end = p + pad;\n                              DCHAR_T *pad_ptr;\n# if !DCHAR_IS_TCHAR || ENABLE_UNISTDIO\n                              if (dp->conversion == 'c'\n                                  || dp->conversion == 's')\n                                /* No zero-padding for string directives.  */\n                                pad_ptr = NULL;\n                              else\n# endif\n                                {\n                                  pad_ptr = (*rp == '-' ? rp + 1 : rp);\n                                  /* No zero-padding of \"inf\" and \"nan\".  */\n                                  if ((*pad_ptr >= 'A' && *pad_ptr <= 'Z')\n                                      || (*pad_ptr >= 'a' && *pad_ptr <= 'z'))\n                                    pad_ptr = NULL;\n                                }\n                              /* The generated string now extends from rp to p,\n                                 with the zero padding insertion point being at\n                                 pad_ptr.  */\n\n                              count = count + pad; /* = end - rp */\n\n                              if (flags & FLAG_LEFT)\n                                {\n                                  /* Pad with spaces on the right.  */\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                              else if ((flags & FLAG_ZERO) && pad_ptr != NULL)\n                                {\n                                  /* Pad with zeroes.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > pad_ptr)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = '0';\n                                }\n                              else\n                                {\n                                  /* Pad with spaces on the left.  */\n                                  DCHAR_T *q = end;\n\n                                  while (p > rp)\n                                    *--q = *--p;\n                                  for (; pad > 0; pad--)\n                                    *p++ = ' ';\n                                }\n                            }\n                          }\n                      }\n#endif\n\n                    /* Here still count <= allocated - length.  */\n\n#if !DCHAR_IS_TCHAR || USE_SNPRINTF\n                    /* The snprintf() result did fit.  */\n#else\n                    /* Append the sprintf() result.  */\n                    memcpy (result + length, tmp, count * sizeof (DCHAR_T));\n#endif\n#if !USE_SNPRINTF\n                    if (tmp != tmpbuf)\n                      free (tmp);\n#endif\n\n#if NEED_PRINTF_DIRECTIVE_F\n                    if (dp->conversion == 'F')\n                      {\n                        /* Convert the %f result to upper case for %F.  */\n                        DCHAR_T *rp = result + length;\n                        size_t rc;\n                        for (rc = count; rc > 0; rc--, rp++)\n                          if (*rp >= 'a' && *rp <= 'z')\n                            *rp = *rp - 'a' + 'A';\n                      }\n#endif\n\n                    length += count;\n                    break;\n                  }",
        "{",
        "int count = -1;",
        "int",
        "count = -1",
        "count",
        "=",
        "-1",
        ";",
        "#if USE_SNPRINTF\n                    int retcount = 0;\n                    size_t maxlen = allocated - length;\n                    /* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */\n                    if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;\n                    maxlen = maxlen * TCHARS_PER_DCHAR;\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n#endif",
        "#if",
        "USE_SNPRINTF",
        "\n",
        "int retcount = 0;",
        "int",
        "retcount = 0",
        "retcount",
        "=",
        "0",
        ";",
        "size_t maxlen = allocated - length;",
        "size_t",
        "maxlen = allocated - length",
        "maxlen",
        "=",
        "allocated - length",
        "allocated",
        "-",
        "length",
        ";",
        "/* SNPRINTF can fail if its second argument is\n                       > INT_MAX.  */",
        "if (maxlen > INT_MAX / TCHARS_PER_DCHAR)\n                      maxlen = INT_MAX / TCHARS_PER_DCHAR;",
        "if",
        "(maxlen > INT_MAX / TCHARS_PER_DCHAR)",
        "(",
        "maxlen > INT_MAX / TCHARS_PER_DCHAR",
        "maxlen",
        ">",
        "INT_MAX / TCHARS_PER_DCHAR",
        "INT_MAX",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        "maxlen = INT_MAX / TCHARS_PER_DCHAR;",
        "maxlen = INT_MAX / TCHARS_PER_DCHAR",
        "maxlen",
        "=",
        "INT_MAX / TCHARS_PER_DCHAR",
        "INT_MAX",
        "/",
        "TCHARS_PER_DCHAR",
        ";",
        "maxlen = maxlen * TCHARS_PER_DCHAR;",
        "maxlen = maxlen * TCHARS_PER_DCHAR",
        "maxlen",
        "=",
        "maxlen * TCHARS_PER_DCHAR",
        "maxlen",
        "*",
        "TCHARS_PER_DCHAR",
        ";",
        "# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n",
        "# define",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        " \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             arg, &count);                  \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], arg, &count);     \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        retcount = SNPRINTF ((TCHAR_T *) (result + length), \\\n                                             maxlen, buf,                   \\\n                                             prefixes[0], prefixes[1], arg, \\\n                                             &count);                       \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }",
        "\n",
        "#else\n# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n",
        "#else",
        "# define SNPRINTF_BUF(arg) \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }\n",
        "# define",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        " \\\n                    switch (prefix_count)                                   \\\n                      {                                                     \\\n                      case 0:                                               \\\n                        count = sprintf (tmp, buf, arg);                    \\\n                        break;                                              \\\n                      case 1:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], arg);       \\\n                        break;                                              \\\n                      case 2:                                               \\\n                        count = sprintf (tmp, buf, prefixes[0], prefixes[1],\\\n                                         arg);                              \\\n                        break;                                              \\\n                      default:                                              \\\n                        abort ();                                           \\\n                      }",
        "\n",
        "#endif",
        "errno = 0;",
        "errno = 0",
        "errno",
        "=",
        "0",
        ";",
        "switch (type)\n                      {\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }",
        "switch",
        "(type)",
        "(",
        "type",
        ")",
        "{\n                      case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif\n                      case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      default:\n                        abort ();\n                      }",
        "{",
        "case TYPE_SCHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_SCHAR",
        ":",
        "{\n                          int arg = a.arg[dp->arg_index].a.a_schar;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "int arg = a.arg[dp->arg_index].a.a_schar;",
        "int",
        "arg = a.arg[dp->arg_index].a.a_schar",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_schar",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_schar",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_UCHAR:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_UCHAR",
        ":",
        "{\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uchar;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "unsigned int arg = a.arg[dp->arg_index].a.a_uchar;",
        "unsigned int",
        "unsigned",
        "int",
        "arg = a.arg[dp->arg_index].a.a_uchar",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_uchar",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_uchar",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_SHORT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_SHORT",
        ":",
        "{\n                          int arg = a.arg[dp->arg_index].a.a_short;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "int arg = a.arg[dp->arg_index].a.a_short;",
        "int",
        "arg = a.arg[dp->arg_index].a.a_short",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_short",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_short",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_USHORT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_USHORT",
        ":",
        "{\n                          unsigned int arg = a.arg[dp->arg_index].a.a_ushort;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "unsigned int arg = a.arg[dp->arg_index].a.a_ushort;",
        "unsigned int",
        "unsigned",
        "int",
        "arg = a.arg[dp->arg_index].a.a_ushort",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_ushort",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_ushort",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_INT:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_INT",
        ":",
        "{\n                          int arg = a.arg[dp->arg_index].a.a_int;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "int arg = a.arg[dp->arg_index].a.a_int;",
        "int",
        "arg = a.arg[dp->arg_index].a.a_int",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_int",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_int",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_UINT:\n                        {\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_UINT",
        ":",
        "{\n                          unsigned int arg = a.arg[dp->arg_index].a.a_uint;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "unsigned int arg = a.arg[dp->arg_index].a.a_uint;",
        "unsigned int",
        "unsigned",
        "int",
        "arg = a.arg[dp->arg_index].a.a_uint",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_uint",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_uint",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_LONGINT:\n                        {\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_LONGINT",
        ":",
        "{\n                          long int arg = a.arg[dp->arg_index].a.a_longint;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "long int arg = a.arg[dp->arg_index].a.a_longint;",
        "long int",
        "long",
        "int",
        "arg = a.arg[dp->arg_index].a.a_longint",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_longint",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_longint",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_ULONGINT:\n                        {\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_ULONGINT",
        ":",
        "{\n                          unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "unsigned long int arg = a.arg[dp->arg_index].a.a_ulongint;",
        "unsigned long int",
        "unsigned",
        "long",
        "int",
        "arg = a.arg[dp->arg_index].a.a_ulongint",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_ulongint",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_ulongint",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#if HAVE_LONG_LONG_INT\n                      case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n                      case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif",
        "#if",
        "HAVE_LONG_LONG_INT",
        "\n",
        "case TYPE_LONGLONGINT:\n                        {\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_LONGLONGINT",
        ":",
        "{\n                          long long int arg = a.arg[dp->arg_index].a.a_longlongint;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "long long int arg = a.arg[dp->arg_index].a.a_longlongint;",
        "long long int",
        "long",
        "long",
        "int",
        "arg = a.arg[dp->arg_index].a.a_longlongint",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_longlongint",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_longlongint",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_ULONGLONGINT:\n                        {\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_ULONGLONGINT",
        ":",
        "{\n                          unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "unsigned long long int arg = a.arg[dp->arg_index].a.a_ulonglongint;",
        "unsigned long long int",
        "unsigned",
        "long",
        "long",
        "int",
        "arg = a.arg[dp->arg_index].a.a_ulonglongint",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_ulonglongint",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_ulonglongint",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#endif",
        "case TYPE_DOUBLE:\n                        {\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_DOUBLE",
        ":",
        "{\n                          double arg = a.arg[dp->arg_index].a.a_double;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "double arg = a.arg[dp->arg_index].a.a_double;",
        "double",
        "arg = a.arg[dp->arg_index].a.a_double",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_double",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_double",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_LONGDOUBLE:\n                        {\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_LONGDOUBLE",
        ":",
        "{\n                          long double arg = a.arg[dp->arg_index].a.a_longdouble;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "long double arg = a.arg[dp->arg_index].a.a_longdouble;",
        "long double",
        "long",
        "double",
        "arg = a.arg[dp->arg_index].a.a_longdouble",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_longdouble",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_longdouble",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "case TYPE_CHAR:\n                        {\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_CHAR",
        ":",
        "{\n                          int arg = a.arg[dp->arg_index].a.a_char;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "int arg = a.arg[dp->arg_index].a.a_char;",
        "int",
        "arg = a.arg[dp->arg_index].a.a_char",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_char",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_char",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#if HAVE_WINT_T\n                      case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif",
        "#if",
        "HAVE_WINT_T",
        "\n",
        "case TYPE_WIDE_CHAR:\n                        {\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_WIDE_CHAR",
        ":",
        "{\n                          wint_t arg = a.arg[dp->arg_index].a.a_wide_char;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "wint_t arg = a.arg[dp->arg_index].a.a_wide_char;",
        "wint_t",
        "arg = a.arg[dp->arg_index].a.a_wide_char",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_wide_char",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_wide_char",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#endif",
        "case TYPE_STRING:\n                        {\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_STRING",
        ":",
        "{\n                          const char *arg = a.arg[dp->arg_index].a.a_string;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "const char *arg = a.arg[dp->arg_index].a.a_string;",
        "const",
        "const",
        "char",
        "*arg = a.arg[dp->arg_index].a.a_string",
        "*arg",
        "*",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_string",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_string",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#if HAVE_WCHAR_T\n                      case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;\n#endif",
        "#if",
        "HAVE_WCHAR_T",
        "\n",
        "case TYPE_WIDE_STRING:\n                        {\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_WIDE_STRING",
        ":",
        "{\n                          const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "const wchar_t *arg = a.arg[dp->arg_index].a.a_wide_string;",
        "const",
        "const",
        "wchar_t",
        "*arg = a.arg[dp->arg_index].a.a_wide_string",
        "*arg",
        "*",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_wide_string",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_wide_string",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "#endif",
        "case TYPE_POINTER:\n                        {\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }\n                        break;",
        "case",
        "TYPE_POINTER",
        ":",
        "{\n                          void *arg = a.arg[dp->arg_index].a.a_pointer;\n                          SNPRINTF_BUF (arg);\n                        }",
        "{",
        "void *arg = a.arg[dp->arg_index].a.a_pointer;",
        "void",
        "*arg = a.arg[dp->arg_index].a.a_pointer",
        "*arg",
        "*",
        "arg",
        "=",
        "a.arg[dp->arg_index].a.a_pointer",
        "a.arg[dp->arg_index].a",
        "a.arg[dp->arg_index]",
        "a.arg",
        "a",
        ".",
        "arg",
        "[",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        "]",
        ".",
        "a",
        ".",
        "a_pointer",
        ";",
        "SNPRINTF_BUF (arg);",
        "SNPRINTF_BUF (arg)",
        "SNPRINTF_BUF",
        "(arg)",
        "(",
        "arg",
        ")",
        ";",
        "}",
        "break;",
        "break",
        ";",
        "default:\n                        abort ();",
        "default",
        ":",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "}",
        "#if USE_SNPRINTF\n                    /* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */\n                    if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }\n#endif",
        "#if",
        "USE_SNPRINTF",
        "\n",
        "/* Portability: Not all implementations of snprintf()\n                       are ISO C 99 compliant.  Determine the number of\n                       bytes that snprintf() has produced or would have\n                       produced.  */",
        "if (count >= 0)\n                      {\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }\n                    else\n                      {\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }",
        "if",
        "(count >= 0)",
        "(",
        "count >= 0",
        "count",
        ">=",
        "0",
        ")",
        "{\n                        /* Verify that snprintf() has NUL-terminated its\n                           result.  */\n                        if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();\n                        /* Portability hack.  */\n                        if (retcount > count)\n                          count = retcount;\n                      }",
        "{",
        "/* Verify that snprintf() has NUL-terminated its\n                           result.  */",
        "if (count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')\n                          abort ();",
        "if",
        "(count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0')",
        "(",
        "count < maxlen\n                            && ((TCHAR_T *) (result + length)) [count] != '\\0'",
        "count < maxlen",
        "count",
        "<",
        "maxlen",
        "&&",
        "((TCHAR_T *) (result + length)) [count] != '\\0'",
        "((TCHAR_T *) (result + length)) [count]",
        "((TCHAR_T *) (result + length))",
        "(",
        "(TCHAR_T *) (result + length)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        ")",
        "[",
        "count",
        "]",
        "!=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ")",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "/* Portability hack.  */",
        "if (retcount > count)\n                          count = retcount;",
        "if",
        "(retcount > count)",
        "(",
        "retcount > count",
        "retcount",
        ">",
        "count",
        ")",
        "count = retcount;",
        "count = retcount",
        "count",
        "=",
        "retcount",
        ";",
        "}",
        "else",
        "{\n                        /* snprintf() doesn't understand the '%n'\n                           directive.  */\n                        if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }\n                      }",
        "{",
        "/* snprintf() doesn't understand the '%n'\n                           directive.  */",
        "if (fbp[1] != '\\0')\n                          {\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }\n                        else\n                          {\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }",
        "if",
        "(fbp[1] != '\\0')",
        "(",
        "fbp[1] != '\\0'",
        "fbp[1]",
        "fbp",
        "[",
        "1",
        "]",
        "!=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ")",
        "{\n                            /* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */\n                            fbp[1] = '\\0';\n                            continue;\n                          }",
        "{",
        "/* Don't use the '%n' directive; instead, look\n                               at the snprintf() return value.  */",
        "fbp[1] = '\\0';",
        "fbp[1] = '\\0'",
        "fbp[1]",
        "fbp",
        "[",
        "1",
        "]",
        "=",
        "'\\0'",
        "'",
        "\\0",
        "'",
        ";",
        "continue;",
        "continue",
        ";",
        "}",
        "else",
        "{\n                            /* Look at the snprintf() return value.  */\n                            if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;\n                          }",
        "{",
        "/* Look at the snprintf() return value.  */",
        "if (retcount < 0)\n                              {\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }\n                            else\n                              count = retcount;",
        "if",
        "(retcount < 0)",
        "(",
        "retcount < 0",
        "retcount",
        "<",
        "0",
        ")",
        "{\n# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif\n                              }",
        "{",
        "# if !HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF\n                                /* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */\n                                size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);\n\n                                if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }\n# endif",
        "# if",
        "!HAVE_SNPRINTF_RETVAL_C99 || USE_MSVC__SNPRINTF",
        "!HAVE_SNPRINTF_RETVAL_C99",
        "!",
        "HAVE_SNPRINTF_RETVAL_C99",
        "||",
        "USE_MSVC__SNPRINTF",
        "\n",
        "/* HP-UX 10.20 snprintf() is doubly deficient:\n                                   It doesn't understand the '%n' directive,\n                                   *and* it returns -1 (rather than the length\n                                   that would have been required) when the\n                                   buffer is too small.\n                                   But a failure at this point can also come\n                                   from other reasons than a too small buffer,\n                                   such as an invalid wide string argument to\n                                   the %ls directive, or possibly an invalid\n                                   floating-point argument.  */",
        "size_t tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves);",
        "size_t",
        "tmp_length =\n                                  MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves)",
        "tmp_length",
        "=",
        "MAX_ROOM_NEEDED (&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves)",
        "MAX_ROOM_NEEDED",
        "(&a, dp->arg_index,\n                                                   dp->conversion, type, flags,\n                                                   width,\n                                                   has_precision,\n                                                   precision, pad_ourselves)",
        "(",
        "&a",
        "&",
        "a",
        ",",
        "dp->arg_index",
        "dp",
        "->",
        "arg_index",
        ",",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        ",",
        "type",
        ",",
        "flags",
        ",",
        "width",
        ",",
        "has_precision",
        ",",
        "precision",
        ",",
        "pad_ourselves",
        ")",
        ";",
        "if (maxlen < tmp_length)\n                                  {\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }",
        "if",
        "(maxlen < tmp_length)",
        "(",
        "maxlen < tmp_length",
        "maxlen",
        "<",
        "tmp_length",
        ")",
        "{\n                                    /* Make more room.  But try to do through\n                                       this reallocation only once.  */\n                                    size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);\n                                    /* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */\n                                    size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);\n                                    if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;\n                                    ENSURE_ALLOCATION (bigger_need);\n                                    continue;\n                                  }",
        "{",
        "/* Make more room.  But try to do through\n                                       this reallocation only once.  */",
        "size_t bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR);",
        "size_t",
        "bigger_need =\n                                      xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR)",
        "bigger_need",
        "=",
        "xsum (length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR)",
        "xsum",
        "(length,\n                                            xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR)",
        "(",
        "length",
        ",",
        "xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)\n                                            / TCHARS_PER_DCHAR",
        "xsum (tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)",
        "xsum",
        "(tmp_length,\n                                                  TCHARS_PER_DCHAR - 1)",
        "(",
        "tmp_length",
        ",",
        "TCHARS_PER_DCHAR - 1",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        ";",
        "/* And always grow proportionally.\n                                       (There may be several arguments, each\n                                       needing a little more room than the\n                                       previous one.)  */",
        "size_t bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12);",
        "size_t",
        "bigger_need2 =\n                                      xsum (xtimes (allocated, 2), 12)",
        "bigger_need2",
        "=",
        "xsum (xtimes (allocated, 2), 12)",
        "xsum",
        "(xtimes (allocated, 2), 12)",
        "(",
        "xtimes (allocated, 2)",
        "xtimes",
        "(allocated, 2)",
        "(",
        "allocated",
        ",",
        "2",
        ")",
        ",",
        "12",
        ")",
        ";",
        "if (bigger_need < bigger_need2)\n                                      bigger_need = bigger_need2;",
        "if",
        "(bigger_need < bigger_need2)",
        "(",
        "bigger_need < bigger_need2",
        "bigger_need",
        "<",
        "bigger_need2",
        ")",
        "bigger_need = bigger_need2;",
        "bigger_need = bigger_need2",
        "bigger_need",
        "=",
        "bigger_need2",
        ";",
        "ENSURE_ALLOCATION (bigger_need);",
        "ENSURE_ALLOCATION (bigger_need)",
        "ENSURE_ALLOCATION",
        "(bigger_need)",
        "(",
        "bigger_need",
        ")",
        ";",
        "continue;",
        "continue",
        ";",
        "}",
        "# endif",
        "}",
        "else",
        "count = retcount;",
        "count = retcount",
        "count",
        "=",
        "retcount",
        ";",
        "}",
        "}",
        "#endif",
        "/* Attempt to handle failure.  */",
        "if (count < 0)\n                      {\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }",
        "if",
        "(count < 0)",
        "(",
        "count < 0",
        "count",
        "<",
        "0",
        ")",
        "{\n                        /* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */\n                        int saved_errno = errno;\n                        if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }\n\n                        if (!(result == resultbuf || result == NULL))\n                          free (result);\n                        if (buf_malloced != NULL)\n                          free (buf_malloced);\n                        CLEANUP ();\n\n                        errno = saved_errno;\n                        return NULL;\n                      }",
        "{",
        "/* SNPRINTF or sprintf failed.  Save and use the errno\n                           that it has set, if any.  */",
        "int saved_errno = errno;",
        "int",
        "saved_errno = errno",
        "saved_errno",
        "=",
        "errno",
        ";",
        "if (saved_errno == 0)\n                          {\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }",
        "if",
        "(saved_errno == 0)",
        "(",
        "saved_errno == 0",
        "saved_errno",
        "==",
        "0",
        ")",
        "{\n                            if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;\n                          }",
        "{",
        "if (dp->conversion == 'c' || dp->conversion == 's')\n                              saved_errno = EILSEQ;\n                            else\n                              saved_errno = EINVAL;",
        "if",
        "(dp->conversion == 'c' || dp->conversion == 's')",
        "(",
        "dp->conversion == 'c' || dp->conversion == 's'",
        "dp->conversion == 'c'",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        "==",
        "'c'",
        "'",
        "'",
        "||",
        "dp->conversion == 's'",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        "==",
        "'s'",
        "'",
        "'",
        ")",
        "saved_errno = EILSEQ;",
        "saved_errno = EILSEQ",
        "saved_errno",
        "=",
        "EILSEQ",
        ";",
        "else",
        "saved_errno = EINVAL;",
        "saved_errno = EINVAL",
        "saved_errno",
        "=",
        "EINVAL",
        ";",
        "}",
        "if (!(result == resultbuf || result == NULL))\n                          free (result);",
        "if",
        "(!(result == resultbuf || result == NULL))",
        "(",
        "!(result == resultbuf || result == NULL)",
        "!",
        "(result == resultbuf || result == NULL)",
        "(",
        "result == resultbuf || result == NULL",
        "result == resultbuf",
        "result",
        "==",
        "resultbuf",
        "||",
        "result == NULL",
        "result",
        "==",
        "NULL",
        ")",
        ")",
        "free (result);",
        "free (result)",
        "free",
        "(result)",
        "(",
        "result",
        ")",
        ";",
        "if (buf_malloced != NULL)\n                          free (buf_malloced);",
        "if",
        "(buf_malloced != NULL)",
        "(",
        "buf_malloced != NULL",
        "buf_malloced",
        "!=",
        "NULL",
        ")",
        "free (buf_malloced);",
        "free (buf_malloced)",
        "free",
        "(buf_malloced)",
        "(",
        "buf_malloced",
        ")",
        ";",
        "CLEANUP ();",
        "CLEANUP ()",
        "CLEANUP",
        "()",
        "(",
        ")",
        ";",
        "errno = saved_errno;",
        "errno = saved_errno",
        "errno",
        "=",
        "saved_errno",
        ";",
        "return NULL;",
        "return",
        "NULL",
        ";",
        "}",
        "#if USE_SNPRINTF\n                    /* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */\n                    if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }\n#endif",
        "#if",
        "USE_SNPRINTF",
        "\n",
        "/* Handle overflow of the allocated buffer.\n                       If such an overflow occurs, a C99 compliant snprintf()\n                       returns a count >= maxlen.  However, a non-compliant\n                       snprintf() function returns only count = maxlen - 1.  To\n                       cover both cases, test whether count >= maxlen - 1.  */",
        "if ((unsigned int) count + 1 >= maxlen)\n                      {\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }",
        "if",
        "((unsigned int) count + 1 >= maxlen)",
        "(",
        "(unsigned int) count + 1 >= maxlen",
        "(unsigned int) count + 1",
        "(unsigned int) count",
        "(",
        "unsigned int",
        "unsigned int",
        "unsigned",
        "int",
        ")",
        "count",
        "+",
        "1",
        ">=",
        "maxlen",
        ")",
        "{\n                        /* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */\n                        if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }\n                      }",
        "{",
        "/* If maxlen already has attained its allowed maximum,\n                           allocating more memory will not increase maxlen.\n                           Instead of looping, bail out.  */",
        "if (maxlen == INT_MAX / TCHARS_PER_DCHAR)\n                          goto overflow;\n                        else\n                          {\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }",
        "if",
        "(maxlen == INT_MAX / TCHARS_PER_DCHAR)",
        "(",
        "maxlen == INT_MAX / TCHARS_PER_DCHAR",
        "maxlen",
        "==",
        "INT_MAX / TCHARS_PER_DCHAR",
        "INT_MAX",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        "goto overflow;",
        "goto",
        "overflow",
        ";",
        "else",
        "{\n                            /* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */\n                            size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));\n\n                            ENSURE_ALLOCATION (n);\n                            continue;\n                          }",
        "{",
        "/* Need at least (count + 1) * sizeof (TCHAR_T)\n                               bytes.  (The +1 is for the trailing NUL.)\n                               But ask for (count + 2) * sizeof (TCHAR_T)\n                               bytes, so that in the next round, we likely get\n                                 maxlen > (unsigned int) count + 1\n                               and so we don't get here again.\n                               And allocate proportionally, to avoid looping\n                               eternally if snprintf() reports a too small\n                               count.  */",
        "size_t n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2));",
        "size_t",
        "n =\n                              xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2))",
        "n",
        "=",
        "xmax (xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2))",
        "xmax",
        "(xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR),\n                                    xtimes (allocated, 2))",
        "(",
        "xsum (length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR)",
        "xsum",
        "(length,\n                                          ((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR)",
        "(",
        "length",
        ",",
        "((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)\n                                          / TCHARS_PER_DCHAR",
        "((unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1)",
        "(",
        "(unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR - 1",
        "(unsigned int) count + 2\n                                           + TCHARS_PER_DCHAR",
        "(unsigned int) count + 2",
        "(unsigned int) count",
        "(",
        "unsigned int",
        "unsigned int",
        "unsigned",
        "int",
        ")",
        "count",
        "+",
        "2",
        "+",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        ",",
        "xtimes (allocated, 2)",
        "xtimes",
        "(allocated, 2)",
        "(",
        "allocated",
        ",",
        "2",
        ")",
        ")",
        ";",
        "ENSURE_ALLOCATION (n);",
        "ENSURE_ALLOCATION (n)",
        "ENSURE_ALLOCATION",
        "(n)",
        "(",
        "n",
        ")",
        ";",
        "continue;",
        "continue",
        ";",
        "}",
        "}",
        "#endif",
        "#if NEED_PRINTF_UNBOUNDED_PRECISION\n                    if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }\n#endif",
        "#if",
        "NEED_PRINTF_UNBOUNDED_PRECISION",
        "\n",
        "if (prec_ourselves)\n                      {\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }",
        "if",
        "(prec_ourselves)",
        "(",
        "prec_ourselves",
        ")",
        "{\n                        /* Handle the precision.  */\n                        TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);\n# else\n                          tmp;\n# endif\n                        size_t prefix_count;\n                        size_t move;\n\n                        prefix_count = 0;\n                        /* Put the additional zeroes after the sign.  */\n                        if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;\n\n                        move = count - prefix_count;\n                        if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }\n                      }",
        "{",
        "/* Handle the precision.  */",
        "TCHAR_T *prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length);",
        "TCHAR_T",
        "*prec_ptr =\n# if USE_SNPRINTF\n                          (TCHAR_T *) (result + length)",
        "*prec_ptr",
        "*",
        "prec_ptr",
        "=",
        "# if",
        "# if",
        "USE_SNPRINTF\n                          (TCHAR_T *) (result + length)",
        "USE_SNPRINTF\n                          (TCHAR_T *)",
        "USE_SNPRINTF",
        "(TCHAR_T *)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        ";",
        "# else\n                          tmp;\n",
        "# else",
        "\n                          tmp;",
        "\n",
        "# endif\n                        size_t prefix_count;\n",
        "# endif",
        "\n                        size_t prefix_count;",
        "\n",
        "size_t move;",
        "size_t",
        "move",
        ";",
        "prefix_count = 0;",
        "prefix_count = 0",
        "prefix_count",
        "=",
        "0",
        ";",
        "/* Put the additional zeroes after the sign.  */",
        "if (count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))\n                          prefix_count = 1;\n                        /* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */\n                        else if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;",
        "if",
        "(count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '))",
        "(",
        "count >= 1\n                            && (*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' ')",
        "count >= 1",
        "count",
        ">=",
        "1",
        "&&",
        "(*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' ')",
        "(",
        "*prec_ptr == '-' || *prec_ptr == '+'\n                                || *prec_ptr == ' '",
        "*prec_ptr == '-' || *prec_ptr == '+'",
        "*prec_ptr == '-'",
        "*prec_ptr",
        "*",
        "prec_ptr",
        "==",
        "'-'",
        "'",
        "'",
        "||",
        "*prec_ptr == '+'",
        "*prec_ptr",
        "*",
        "prec_ptr",
        "==",
        "'+'",
        "'",
        "'",
        "||",
        "*prec_ptr == ' '",
        "*prec_ptr",
        "*",
        "prec_ptr",
        "==",
        "' '",
        "'",
        "'",
        ")",
        ")",
        "prefix_count = 1;",
        "prefix_count = 1",
        "prefix_count",
        "=",
        "1",
        ";",
        "/* Put the additional zeroes after the 0x prefix if\n                           (flags & FLAG_ALT) || (dp->conversion == 'p').  */",
        "else",
        "if (count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))\n                          prefix_count = 2;",
        "if",
        "(count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X'))",
        "(",
        "count >= 2\n                                 && prec_ptr[0] == '0'\n                                 && (prec_ptr[1] == 'x' || prec_ptr[1] == 'X')",
        "count >= 2\n                                 && prec_ptr[0] == '0'",
        "count >= 2",
        "count",
        ">=",
        "2",
        "&&",
        "prec_ptr[0] == '0'",
        "prec_ptr[0]",
        "prec_ptr",
        "[",
        "0",
        "]",
        "==",
        "'0'",
        "'",
        "'",
        "&&",
        "(prec_ptr[1] == 'x' || prec_ptr[1] == 'X')",
        "(",
        "prec_ptr[1] == 'x' || prec_ptr[1] == 'X'",
        "prec_ptr[1] == 'x'",
        "prec_ptr[1]",
        "prec_ptr",
        "[",
        "1",
        "]",
        "==",
        "'x'",
        "'",
        "'",
        "||",
        "prec_ptr[1] == 'X'",
        "prec_ptr[1]",
        "prec_ptr",
        "[",
        "1",
        "]",
        "==",
        "'X'",
        "'",
        "'",
        ")",
        ")",
        "prefix_count = 2;",
        "prefix_count = 2",
        "prefix_count",
        "=",
        "2",
        ";",
        "move = count - prefix_count;",
        "move = count - prefix_count",
        "move",
        "=",
        "count - prefix_count",
        "count",
        "-",
        "prefix_count",
        ";",
        "if (precision > move)\n                          {\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }",
        "if",
        "(precision > move)",
        "(",
        "precision > move",
        "precision",
        ">",
        "move",
        ")",
        "{\n                            /* Insert zeroes.  */\n                            size_t insert = precision - move;\n                            TCHAR_T *prec_end;\n\n# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif\n\n                            prec_end = prec_ptr + count;\n                            prec_ptr += prefix_count;\n\n                            while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }\n\n                            prec_end += insert;\n                            do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);\n\n                            count += insert;\n                          }",
        "{",
        "/* Insert zeroes.  */",
        "size_t insert = precision - move;",
        "size_t",
        "insert = precision - move",
        "insert",
        "=",
        "precision - move",
        "precision",
        "-",
        "move",
        ";",
        "TCHAR_T *prec_end;",
        "TCHAR_T",
        "*prec_end",
        "*",
        "prec_end",
        ";",
        "# if USE_SNPRINTF\n                            size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);\n                            length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            ENSURE_ALLOCATION (n);\n                            length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;\n                            prec_ptr = (TCHAR_T *) (result + length);\n# endif",
        "# if",
        "USE_SNPRINTF",
        "\n",
        "size_t n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR);",
        "size_t",
        "n =\n                              xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR)",
        "n",
        "=",
        "xsum (length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR)",
        "xsum",
        "(length,\n                                    (count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR)",
        "(",
        "length",
        ",",
        "(count + insert + TCHARS_PER_DCHAR - 1)\n                                    / TCHARS_PER_DCHAR",
        "(count + insert + TCHARS_PER_DCHAR - 1)",
        "(",
        "count + insert + TCHARS_PER_DCHAR - 1",
        "count + insert + TCHARS_PER_DCHAR",
        "count + insert",
        "count",
        "+",
        "insert",
        "+",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ")",
        ";",
        "length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;",
        "length += (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR",
        "length",
        "+=",
        "(count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR",
        "(count + TCHARS_PER_DCHAR - 1)",
        "(",
        "count + TCHARS_PER_DCHAR - 1",
        "count + TCHARS_PER_DCHAR",
        "count",
        "+",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ";",
        "ENSURE_ALLOCATION (n);",
        "ENSURE_ALLOCATION (n)",
        "ENSURE_ALLOCATION",
        "(n)",
        "(",
        "n",
        ")",
        ";",
        "length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR;",
        "length -= (count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR",
        "length",
        "-=",
        "(count + TCHARS_PER_DCHAR - 1) / TCHARS_PER_DCHAR",
        "(count + TCHARS_PER_DCHAR - 1)",
        "(",
        "count + TCHARS_PER_DCHAR - 1",
        "count + TCHARS_PER_DCHAR",
        "count",
        "+",
        "TCHARS_PER_DCHAR",
        "-",
        "1",
        ")",
        "/",
        "TCHARS_PER_DCHAR",
        ";",
        "prec_ptr = (TCHAR_T *) (result + length);",
        "prec_ptr = (TCHAR_T *) (result + length)",
        "prec_ptr",
        "=",
        "(TCHAR_T *) (result + length)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        ";",
        "# endif",
        "prec_end = prec_ptr + count;",
        "prec_end = prec_ptr + count",
        "prec_end",
        "=",
        "prec_ptr + count",
        "prec_ptr",
        "+",
        "count",
        ";",
        "prec_ptr += prefix_count;",
        "prec_ptr += prefix_count",
        "prec_ptr",
        "+=",
        "prefix_count",
        ";",
        "while (prec_end > prec_ptr)\n                              {\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }",
        "while",
        "(prec_end > prec_ptr)",
        "(",
        "prec_end > prec_ptr",
        "prec_end",
        ">",
        "prec_ptr",
        ")",
        "{\n                                prec_end--;\n                                prec_end[insert] = prec_end[0];\n                              }",
        "{",
        "prec_end--;",
        "prec_end--",
        "prec_end",
        "--",
        ";",
        "prec_end[insert] = prec_end[0];",
        "prec_end[insert] = prec_end[0]",
        "prec_end[insert]",
        "prec_end",
        "[",
        "insert",
        "]",
        "=",
        "prec_end[0]",
        "prec_end",
        "[",
        "0",
        "]",
        ";",
        "}",
        "prec_end += insert;",
        "prec_end += insert",
        "prec_end",
        "+=",
        "insert",
        ";",
        "do\n                              *--prec_end = '0';\n                            while (prec_end > prec_ptr);",
        "do",
        "*--prec_end = '0';",
        "*--prec_end = '0'",
        "*--prec_end",
        "*",
        "--prec_end",
        "--",
        "prec_end",
        "=",
        "'0'",
        "'",
        "'",
        ";",
        "while",
        "(prec_end > prec_ptr)",
        "(",
        "prec_end > prec_ptr",
        "prec_end",
        ">",
        "prec_ptr",
        ")",
        ";",
        "count += insert;",
        "count += insert",
        "count",
        "+=",
        "insert",
        ";",
        "}",
        "}",
        "#endif",
        "#if !USE_SNPRINTF\n                    if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();\n#endif",
        "#if",
        "!USE_SNPRINTF",
        "!",
        "USE_SNPRINTF",
        "\n",
        "if (count >= tmp_length)\n                      /* tmp_length was incorrectly calculated - fix the\n                         code above!  */\n                      abort ();",
        "if",
        "(count >= tmp_length)",
        "(",
        "count >= tmp_length",
        "count",
        ">=",
        "tmp_length",
        ")",
        "/* tmp_length was incorrectly calculated - fix the\n                         code above!  */",
        "abort ();",
        "abort ()",
        "abort",
        "()",
        "(",
        ")",
        ";",
        "#endif",
        "#if !DCHAR_IS_TCHAR\n                    /* Convert from TCHAR_T[] to DCHAR_T[].  */\n                    if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }\n#endif",
        "#if",
        "!DCHAR_IS_TCHAR",
        "!",
        "DCHAR_IS_TCHAR",
        "\n",
        "/* Convert from TCHAR_T[] to DCHAR_T[].  */",
        "if (dp->conversion == 'c' || dp->conversion == 's')\n                      {\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }\n                    else\n                      {\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }",
        "if",
        "(dp->conversion == 'c' || dp->conversion == 's')",
        "(",
        "dp->conversion == 'c' || dp->conversion == 's'",
        "dp->conversion == 'c'",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        "==",
        "'c'",
        "'",
        "'",
        "||",
        "dp->conversion == 's'",
        "dp->conversion",
        "dp",
        "->",
        "conversion",
        "==",
        "'s'",
        "'",
        "'",
        ")",
        "{\n                        /* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */\n                        const TCHAR_T *tmpsrc;\n                        DCHAR_T *tmpdst;\n                        size_t tmpdst_len;\n                        /* This code assumes that TCHAR_T is 'char'.  */\n                        verify (sizeof (TCHAR_T) == 1);\n# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif\n                        tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);\n                        if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }\n                        ENSURE_ALLOCATION (xsum (length, tmpdst_len));\n                        DCHAR_CPY (result + length, tmpdst, tmpdst_len);\n                        free (tmpdst);\n                        count = tmpdst_len;\n                      }",
        "{",
        "/* type = TYPE_CHAR or TYPE_WIDE_CHAR or TYPE_STRING\n                           TYPE_WIDE_STRING.\n                           The result string is not certainly ASCII.  */",
        "const TCHAR_T *tmpsrc;",
        "const",
        "const",
        "TCHAR_T",
        "*tmpsrc",
        "*",
        "tmpsrc",
        ";",
        "DCHAR_T *tmpdst;",
        "DCHAR_T",
        "*tmpdst",
        "*",
        "tmpdst",
        ";",
        "size_t tmpdst_len;",
        "size_t",
        "tmpdst_len",
        ";",
        "/* This code assumes that TCHAR_T is 'char'.  */",
        "verify (sizeof (TCHAR_T) == 1);",
        "verify (sizeof (TCHAR_T) == 1)",
        "verify",
        "(sizeof (TCHAR_T) == 1)",
        "(",
        "sizeof (TCHAR_T) == 1",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        "==",
        "1",
        ")",
        ";",
        "# if USE_SNPRINTF\n                        tmpsrc = (TCHAR_T *) (result + length);\n# else\n                        tmpsrc = tmp;\n# endif",
        "# if",
        "USE_SNPRINTF",
        "\n",
        "tmpsrc = (TCHAR_T *) (result + length);",
        "tmpsrc = (TCHAR_T *) (result + length)",
        "tmpsrc",
        "=",
        "(TCHAR_T *) (result + length)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        ";",
        "# else\n                        tmpsrc = tmp;",
        "# else",
        "tmpsrc = tmp;",
        "tmpsrc = tmp",
        "tmpsrc",
        "=",
        "tmp",
        ";",
        "# endif",
        "tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len);",
        "tmpdst =\n                          DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len)",
        "tmpdst",
        "=",
        "DCHAR_CONV_FROM_ENCODING (locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len)",
        "DCHAR_CONV_FROM_ENCODING",
        "(locale_charset (),\n                                                    iconveh_question_mark,\n                                                    tmpsrc, count,\n                                                    NULL,\n                                                    NULL, &tmpdst_len)",
        "(",
        "locale_charset ()",
        "locale_charset",
        "()",
        "(",
        ")",
        ",",
        "iconveh_question_mark",
        ",",
        "tmpsrc",
        ",",
        "count",
        ",",
        "NULL",
        ",",
        "NULL",
        ",",
        "&tmpdst_len",
        "&",
        "tmpdst_len",
        ")",
        ";",
        "if (tmpdst == NULL)\n                          {\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }",
        "if",
        "(tmpdst == NULL)",
        "(",
        "tmpdst == NULL",
        "tmpdst",
        "==",
        "NULL",
        ")",
        "{\n                            int saved_errno = errno;\n                            if (!(result == resultbuf || result == NULL))\n                              free (result);\n                            if (buf_malloced != NULL)\n                              free (buf_malloced);\n                            CLEANUP ();\n                            errno = saved_errno;\n                            return NULL;\n                          }",
        "{",
        "int saved_errno = errno;",
        "int",
        "saved_errno = errno",
        "saved_errno",
        "=",
        "errno",
        ";",
        "if (!(result == resultbuf || result == NULL))\n                              free (result);",
        "if",
        "(!(result == resultbuf || result == NULL))",
        "(",
        "!(result == resultbuf || result == NULL)",
        "!",
        "(result == resultbuf || result == NULL)",
        "(",
        "result == resultbuf || result == NULL",
        "result == resultbuf",
        "result",
        "==",
        "resultbuf",
        "||",
        "result == NULL",
        "result",
        "==",
        "NULL",
        ")",
        ")",
        "free (result);",
        "free (result)",
        "free",
        "(result)",
        "(",
        "result",
        ")",
        ";",
        "if (buf_malloced != NULL)\n                              free (buf_malloced);",
        "if",
        "(buf_malloced != NULL)",
        "(",
        "buf_malloced != NULL",
        "buf_malloced",
        "!=",
        "NULL",
        ")",
        "free (buf_malloced);",
        "free (buf_malloced)",
        "free",
        "(buf_malloced)",
        "(",
        "buf_malloced",
        ")",
        ";",
        "CLEANUP ();",
        "CLEANUP ()",
        "CLEANUP",
        "()",
        "(",
        ")",
        ";",
        "errno = saved_errno;",
        "errno = saved_errno",
        "errno",
        "=",
        "saved_errno",
        ";",
        "return NULL;",
        "return",
        "NULL",
        ";",
        "}",
        "ENSURE_ALLOCATION (xsum (length, tmpdst_len));",
        "ENSURE_ALLOCATION (xsum (length, tmpdst_len))",
        "ENSURE_ALLOCATION",
        "(xsum (length, tmpdst_len))",
        "(",
        "xsum (length, tmpdst_len)",
        "xsum",
        "(length, tmpdst_len)",
        "(",
        "length",
        ",",
        "tmpdst_len",
        ")",
        ")",
        ";",
        "DCHAR_CPY (result + length, tmpdst, tmpdst_len);",
        "DCHAR_CPY (result + length, tmpdst, tmpdst_len)",
        "DCHAR_CPY",
        "(result + length, tmpdst, tmpdst_len)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ",",
        "tmpdst",
        ",",
        "tmpdst_len",
        ")",
        ";",
        "free (tmpdst);",
        "free (tmpdst)",
        "free",
        "(tmpdst)",
        "(",
        "tmpdst",
        ")",
        ";",
        "count = tmpdst_len;",
        "count = tmpdst_len",
        "count",
        "=",
        "tmpdst_len",
        ";",
        "}",
        "else",
        "{\n                        /* The result string is ASCII.\n                           Simple 1:1 conversion.  */\n# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif\n                          {\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }\n                      }",
        "{",
        "/* The result string is ASCII.\n                           Simple 1:1 conversion.  */",
        "# if USE_SNPRINTF\n                        /* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */\n                        if (sizeof (DCHAR_T) != sizeof (TCHAR_T))\n# endif",
        "# if",
        "USE_SNPRINTF",
        "\n",
        "/* If sizeof (DCHAR_T) == sizeof (TCHAR_T), it's a\n                           no-op conversion, in-place on the array starting\n                           at (result + length).  */",
        "if (sizeof (DCHAR_T) != sizeof (TCHAR_T))",
        "if",
        "(sizeof (DCHAR_T) != sizeof (TCHAR_T))",
        "(",
        "sizeof (DCHAR_T) != sizeof (TCHAR_T)",
        "sizeof (DCHAR_T)",
        "sizeof",
        "(DCHAR_T)",
        "(",
        "DCHAR_T",
        ")",
        "!=",
        "sizeof (TCHAR_T)",
        "sizeof",
        "(TCHAR_T)",
        "(",
        "TCHAR_T",
        ")",
        ")",
        "",
        "",
        "# endif",
        "{\n                            const TCHAR_T *tmpsrc;\n                            DCHAR_T *tmpdst;\n                            size_t n;\n\n# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif\n                            tmpdst = result + length;\n                            /* Copy backwards, because of overlapping.  */\n                            tmpsrc += count;\n                            tmpdst += count;\n                            for (n = count; n > 0; n--)\n                              *--tmpdst = *--tmpsrc;\n                          }",
        "{",
        "const TCHAR_T *tmpsrc;",
        "const",
        "const",
        "TCHAR_T",
        "*tmpsrc",
        "*",
        "tmpsrc",
        ";",
        "DCHAR_T *tmpdst;",
        "DCHAR_T",
        "*tmpdst",
        "*",
        "tmpdst",
        ";",
        "size_t n;",
        "size_t",
        "n",
        ";",
        "# if USE_SNPRINTF\n                            if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }\n# else\n                            tmpsrc = tmp;\n                            ENSURE_ALLOCATION (xsum (length, count));\n# endif",
        "# if",
        "USE_SNPRINTF",
        "\n",
        "if (result == resultbuf)\n                              {\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }\n                            else\n                              {\n                                /* ENSURE_ALLOCATION will move the array\n                                   (because it uses realloc().  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                                tmpsrc = (TCHAR_T *) (result + length);\n                              }",
        "if",
        "(result == resultbuf)",
        "(",
        "result == resultbuf",
        "result",
        "==",
        "resultbuf",
        ")",
        "{\n                                tmpsrc = (TCHAR_T *) (result + length);\n                                /* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */\n                                ENSURE_ALLOCATION (xsum (length, count));\n                              }",
        "{",
        "tmpsrc = (TCHAR_T *) (result + length);",
        "tmpsrc = (TCHAR_T *) (result + length)",
        "tmpsrc",
        "=",
        "(TCHAR_T *) (result + length)",
        "(",
        "TCHAR_T *",
        "TCHAR_T",
        "*",
        "*",
        ")",
        "(result + length)",
        "(",
        "result + length",
        "result",
        "+",
        "length",
        ")",
        ";",
        "/* ENSURE_ALLOCATION will not move tmpsrc\n                                   (because it's part of resultbuf).  */",
        "ENSURE_ALLOCATION (xsum (length, count));",
        "ENSURE_ALLOCATION",
        "(xsum (length, count))",
        "("
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/vasnprintf.h": {},
  "grep/grep-3.1/gnulib-tests/warn-on-use.h": {},
  "grep/grep-3.1/gnulib-tests/xsize.c": {},
  "grep/grep-3.1/gnulib-tests/xsize.h": {
    "size_t": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "content": "__attribute__ ((__pure__))\n#endif\nxsum (size_t size1, size_t size2)\n{\n  size_t sum = size1 + size2;\n  return (sum >= size1 ? sum : SIZE_MAX);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": null
    },
    "__pure__": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "__attribute__ ((__pure__))\n#endif\nxmax (size_t size1, size_t size2)\n{\n  /* No explicit check is needed here, because for any n:\n     max (SIZE_MAX, n) == SIZE_MAX and max (n, SIZE_MAX) == SIZE_MAX.  */\n  return (size1 >= size2 ? size1 : size2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": null
    }
  },
  "grep/grep-3.1/gnulib-tests/zerosize-ptr.h": {
    "zerosize_ptr": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "static void *\nzerosize_ptr (void)\n{\n/* Use mmap and mprotect when they exist.  Don't test HAVE_MMAP, because it is\n   not defined on HP-UX 11 (since it does not support MAP_FIXED).  */\n#if HAVE_SYS_MMAN_H && HAVE_MPROTECT\n# if HAVE_MAP_ANONYMOUS\n  const int flags = MAP_ANONYMOUS | MAP_PRIVATE;\n  const int fd = -1;\n# else /* !HAVE_MAP_ANONYMOUS */\n  const int flags = MAP_FILE | MAP_PRIVATE;\n  int fd = open (\"/dev/zero\", O_RDONLY, 0666);\n  if (fd >= 0)\n# endif\n    {\n      int pagesize = getpagesize ();\n      char *two_pages =\n        (char *) mmap (NULL, 2 * pagesize, PROT_READ | PROT_WRITE,\n                       flags, fd, 0);\n      if (two_pages != (char *)(-1)\n          && mprotect (two_pages + pagesize, pagesize, PROT_NONE) == 0)\n        return two_pages + pagesize;\n    }\n#endif\n  return NULL;\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nzerosize_ptr (void)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/_Noreturn.h": {},
  "grep/grep-3.1/gnulib-tests/unistr/test-u8-mbtoucr.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        186,
        1
      ],
      "content": "int\nmain ()\n{\n  ucs4_t uc;\n  int ret;\n\n  /* Test NUL unit input.  */\n  {\n    static const uint8_t input[] = \"\";\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == 1);\n    ASSERT (uc == 0);\n  }\n\n  /* Test ISO 646 unit input.  */\n  {\n    ucs4_t c;\n    uint8_t buf[1];\n\n    for (c = 0; c < 0x80; c++)\n      {\n        buf[0] = c;\n        uc = 0xBADFACE;\n        ret = u8_mbtoucr (&uc, buf, 1);\n        ASSERT (ret == 1);\n        ASSERT (uc == c);\n      }\n  }\n\n  /* Test 2-byte character input.  */\n  {\n    static const uint8_t input[] = { 0xC3, 0x97 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == 2);\n    ASSERT (uc == 0x00D7);\n  }\n\n  /* Test 3-byte character input.  */\n  {\n    static const uint8_t input[] = { 0xE2, 0x82, 0xAC };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 3);\n    ASSERT (ret == 3);\n    ASSERT (uc == 0x20AC);\n  }\n\n  /* Test 4-byte character input.  */\n  {\n    static const uint8_t input[] = { 0xF4, 0x8F, 0xBF, 0xBD };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 4);\n    ASSERT (ret == 4);\n    ASSERT (uc == 0x10FFFD);\n  }\n\n  /* Test incomplete/invalid 1-byte input.  */\n  {\n    static const uint8_t input[] = { 0xC1 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xC3 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xE2 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF4 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xFE };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 1);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n\n  /* Test incomplete/invalid 2-byte input.  */\n  {\n    static const uint8_t input[] = { 0xE0, 0x9F };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xE2, 0x82 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xE2, 0xD0 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF0, 0x8F };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF3, 0x8F };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF3, 0xD0 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 2);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n\n  /* Test incomplete/invalid 3-byte input.  */\n  {\n    static const uint8_t input[] = { 0xF3, 0x8F, 0xBF };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 3);\n    ASSERT (ret == -2);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF3, 0xD0, 0xBF };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 3);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n  {\n    static const uint8_t input[] = { 0xF3, 0x8F, 0xD0 };\n    uc = 0xBADFACE;\n    ret = u8_mbtoucr (&uc, input, 3);\n    ASSERT (ret == -1);\n    ASSERT (uc == 0xFFFD);\n  }\n\n  return 0;\n}",
      "lines": 163,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/unistr/test-u8-uctomb.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        156,
        1
      ],
      "content": "int\nmain ()\n{\n  /* Test ISO 646 character, in particular the NUL character.  */\n  {\n    ucs4_t uc;\n\n    for (uc = 0; uc < 0x80; uc++)\n      {\n        uint8_t buf[5] = { MAGIC, MAGIC, MAGIC, MAGIC, MAGIC };\n        int ret;\n\n        ret = u8_uctomb (buf, uc, 0);\n        ASSERT (ret == -2);\n        ASSERT (buf[0] == MAGIC);\n\n        ret = u8_uctomb (buf, uc, 1);\n        ASSERT (ret == 1);\n        ASSERT (buf[0] == uc);\n        ASSERT (buf[1] == MAGIC);\n      }\n  }\n\n  /* Test 2-byte character.  */\n  {\n    ucs4_t uc = 0x00D7;\n    uint8_t buf[5] = { MAGIC, MAGIC, MAGIC, MAGIC, MAGIC };\n    int ret;\n\n    ret = u8_uctomb (buf, uc, 0);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 1);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 2);\n    ASSERT (ret == 2);\n    ASSERT (buf[0] == 0xC3);\n    ASSERT (buf[1] == 0x97);\n    ASSERT (buf[2] == MAGIC);\n  }\n\n  /* Test 3-byte character.  */\n  {\n    ucs4_t uc = 0x20AC;\n    uint8_t buf[5] = { MAGIC, MAGIC, MAGIC, MAGIC, MAGIC };\n    int ret;\n\n    ret = u8_uctomb (buf, uc, 0);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 1);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 2);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n    ASSERT (buf[1] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 3);\n    ASSERT (ret == 3);\n    ASSERT (buf[0] == 0xE2);\n    ASSERT (buf[1] == 0x82);\n    ASSERT (buf[2] == 0xAC);\n    ASSERT (buf[3] == MAGIC);\n  }\n\n  /* Test 4-byte character.  */\n  {\n    ucs4_t uc = 0x10FFFD;\n    uint8_t buf[5] = { MAGIC, MAGIC, MAGIC, MAGIC, MAGIC };\n    int ret;\n\n    ret = u8_uctomb (buf, uc, 0);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 1);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 2);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n    ASSERT (buf[1] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 3);\n    ASSERT (ret == -2);\n    ASSERT (buf[0] == MAGIC);\n    ASSERT (buf[1] == MAGIC);\n    ASSERT (buf[2] == MAGIC);\n\n    ret = u8_uctomb (buf, uc, 4);\n    ASSERT (ret == 4);\n    ASSERT (buf[0] == 0xF4);\n    ASSERT (buf[1] == 0x8F);\n    ASSERT (buf[2] == 0xBF);\n    ASSERT (buf[3] == 0xBD);\n    ASSERT (buf[4] == MAGIC);\n  }\n\n  /* Test invalid characters.  */\n  {\n    ucs4_t invalid[] = { 0x110000, 0xD800, 0xDBFF, 0xDC00, 0xDFFF };\n    uint8_t buf[5] = { MAGIC, MAGIC, MAGIC, MAGIC, MAGIC };\n    size_t i;\n\n    for (i = 0; i < SIZEOF (invalid); i++)\n      {\n        ucs4_t uc = invalid[i];\n        int n;\n\n        for (n = 0; n <= 4; n++)\n          {\n            int ret = u8_uctomb (buf, uc, n);\n            ASSERT (ret == -1);\n            ASSERT (buf[0] == MAGIC);\n            ASSERT (buf[1] == MAGIC);\n            ASSERT (buf[2] == MAGIC);\n            ASSERT (buf[3] == MAGIC);\n            ASSERT (buf[4] == MAGIC);\n          }\n      }\n  }\n\n  return 0;\n}",
      "lines": 131,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/uniwidth/test-uc_width.c": {
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nmain ()\n{\n  ucs4_t uc;\n\n  /* Test width of ASCII characters.  */\n  for (uc = 0x0020; uc < 0x007F; uc++)\n    ASSERT (uc_width (uc, \"ISO-8859-2\") == 1);\n\n  /* Test width of some non-spacing characters.  */\n  ASSERT (uc_width (0x0301, \"UTF-8\") == 0);\n  ASSERT (uc_width (0x05B0, \"UTF-8\") == 0);\n\n  /* Test width of some format control characters.  */\n  ASSERT (uc_width (0x200E, \"UTF-8\") == 0);\n  ASSERT (uc_width (0x2060, \"UTF-8\") == 0);\n  ASSERT (uc_width (0xE0001, \"UTF-8\") == 0);\n  ASSERT (uc_width (0xE0044, \"UTF-8\") == 0);\n\n  /* Test width of some zero width characters.  */\n  ASSERT (uc_width (0x200B, \"UTF-8\") == 0);\n  ASSERT (uc_width (0xFEFF, \"UTF-8\") == 0);\n\n  /* Test width of some CJK characters.  */\n  ASSERT (uc_width (0x3000, \"UTF-8\") == 2);\n  ASSERT (uc_width (0xB250, \"UTF-8\") == 2);\n  ASSERT (uc_width (0xFF1A, \"UTF-8\") == 2);\n  ASSERT (uc_width (0x20369, \"UTF-8\") == 2);\n  ASSERT (uc_width (0x2F876, \"UTF-8\") == 2);\n\n  return 0;\n}",
      "lines": 32,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/gnulib-tests/uniwidth/test-uc_width2.c": {
    "finish_interval": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static void\nfinish_interval (void)\n{\n  if (current_width != 0)\n    {\n      if (current_start == current_end)\n        printf (\"%04X\\t\\t%c\\n\", (unsigned) current_start, current_width);\n      else\n        printf (\"%04X..%04X\\t%c\\n\", (unsigned) current_start,\n                (unsigned) current_end, current_width);\n      current_width = 0;\n    }\n}",
      "lines": 13,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "add_to_interval": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "static void\nadd_to_interval (ucs4_t uc, char width)\n{\n  if (current_width == width && uc == current_end + 1)\n    current_end = uc;\n  else\n    {\n      finish_interval ();\n      current_width = width;\n      current_start = current_end = uc;\n    }\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "content": "int\nmain ()\n{\n  ucs4_t uc;\n\n  for (uc = 0; uc < 0x110000; uc++)\n    {\n      int w1 = uc_width (uc, \"UTF-8\");\n      int w2 = uc_width (uc, \"GBK\");\n      char width =\n        (w1 == 0 && w2 == 0 ? '0' :\n         w1 == 1 && w2 == 1 ? '1' :\n         w1 == 1 && w2 == 2 ? 'A' :\n         w1 == 2 && w2 == 2 ? '2' :\n         0);\n      if (width == 0)\n        {\n          /* uc must be a control character.  */\n          ASSERT (w1 < 0 && w2 < 0);\n        }\n      else\n        add_to_interval (uc, width);\n    }\n  finish_interval ();\n\n  return 0;\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/alignof.h": {},
  "grep/grep-3.1/lib/alloca.c": {
    "find_stack_direction": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        104,
        1
      ],
      "content": "static int\nfind_stack_direction (int *addr, int depth)\n{\n  int dir, dummy = 0;\n  if (! addr)\n    addr = &dummy;\n  *addr = addr < &dummy ? 1 : addr == &dummy ? 0 : -1;\n  dir = depth ? find_stack_direction (addr, depth - 1) : 0;\n  return dir + dummy;\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "alloca": {
      "start_point": [
        138,
        0
      ],
      "end_point": [
        206,
        1
      ],
      "content": "void *\nalloca (size_t size)\n{\n  auto char probe;              /* Probes stack depth: */\n  register char *depth = ADDRESS_FUNCTION (probe);\n\n#  if STACK_DIRECTION == 0\n  if (STACK_DIR == 0)           /* Unknown growth direction.  */\n    STACK_DIR = find_stack_direction (NULL, (size & 1) + 20);\n#  endif\n\n  /* Reclaim garbage, defined as all alloca'd storage that\n     was allocated from deeper in the stack than currently.  */\n\n  {\n    register header *hp;        /* Traverses linked list.  */\n\n#  ifdef emacs\n    BLOCK_INPUT;\n#  endif\n\n    for (hp = last_alloca_header; hp != NULL;)\n      if ((STACK_DIR > 0 && hp->h.deep > depth)\n          || (STACK_DIR < 0 && hp->h.deep < depth))\n        {\n          register header *np = hp->h.next;\n\n          free (hp);            /* Collect garbage.  */\n\n          hp = np;              /* -> next header.  */\n        }\n      else\n        break;                  /* Rest are not deeper.  */\n\n    last_alloca_header = hp;    /* -> last valid storage.  */\n\n#  ifdef emacs\n    UNBLOCK_INPUT;\n#  endif\n  }\n\n  if (size == 0)\n    return NULL;                /* No allocation required.  */\n\n  /* Allocate combined header + user data storage.  */\n\n  {\n    /* Address of header.  */\n    register header *new;\n\n    size_t combined_size = sizeof (header) + size;\n    if (combined_size < sizeof (header))\n      memory_full ();\n\n    new = malloc (combined_size);\n\n    if (! new)\n      memory_full ();\n\n    new->h.next = last_alloca_header;\n    new->h.deep = depth;\n\n    last_alloca_header = new;\n\n    /* User storage begins just after header.  */\n\n    return (void *) (new + 1);\n  }\n}",
      "lines": 69,
      "depth": 13,
      "decorators": [
        "void",
        "*\nalloca (size_t size)",
        "*"
      ]
    },
    "i00afunc": [
      {
        "start_point": [
          328,
          0
        ],
        "end_point": [
          393,
          1
        ],
        "content": "static long\ni00afunc (long *address)\n{\n  struct stk_stat status;\n  struct stk_trailer *trailer;\n  long *block, size;\n  long result = 0;\n\n  /* We want to iterate through all of the segments.  The first\n     step is to get the stack status structure.  We could do this\n     more quickly and more directly, perhaps, by referencing the\n     $LM00 common block, but I know that this works.  */\n\n  STKSTAT (&status);\n\n  /* Set up the iteration.  */\n\n  trailer = (struct stk_trailer *) (status.current_address\n                                    + status.current_size\n                                    - 15);\n\n  /* There must be at least one stack segment.  Therefore it is\n     a fatal error if \"trailer\" is null.  */\n\n  if (trailer == 0)\n    abort ();\n\n  /* Discard segments that do not contain our argument address.  */\n\n  while (trailer != 0)\n    {\n      block = (long *) trailer->this_address;\n      size = trailer->this_size;\n      if (block == 0 || size == 0)\n        abort ();\n      trailer = (struct stk_trailer *) trailer->link;\n      if ((block <= address) && (address < (block + size)))\n        break;\n    }\n\n  /* Set the result to the offset in this segment and add the sizes\n     of all predecessor segments.  */\n\n  result = address - block;\n\n  if (trailer == 0)\n    {\n      return result;\n    }\n\n  do\n    {\n      if (trailer->this_size <= 0)\n        abort ();\n      result += trailer->this_size;\n      trailer = (struct stk_trailer *) trailer->link;\n    }\n  while (trailer != 0);\n\n  /* We are done.  Note that if you present a bogus address (one\n     not in any segment), you will get a different number back, formed\n     from subtracting the address of the first block.  This is probably\n     not what you want.  */\n\n  return (result);\n}",
        "lines": 66,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "long",
          "long"
        ]
      },
      {
        "start_point": [
          402,
          0
        ],
        "end_point": [
          471,
          1
        ],
        "content": "static long\ni00afunc (long address)\n{\n  long stkl = 0;\n\n  long size, pseg, this_segment, stack;\n  long result = 0;\n\n  struct stack_segment_linkage *ssptr;\n\n  /* Register B67 contains the address of the end of the\n     current stack segment.  If you (as a subprogram) store\n     your registers on the stack and find that you are past\n     the contents of B67, you have overflowed the segment.\n\n     B67 also points to the stack segment linkage control\n     area, which is what we are really interested in.  */\n\n  stkl = CRAY_STACKSEG_END ();\n  ssptr = (struct stack_segment_linkage *) stkl;\n\n  /* If one subtracts 'size' from the end of the segment,\n     one has the address of the first word of the segment.\n\n     If this is not the first segment, 'pseg' will be\n     nonzero.  */\n\n  pseg = ssptr->sspseg;\n  size = ssptr->sssize;\n\n  this_segment = stkl - size;\n\n  /* It is possible that calling this routine itself caused\n     a stack overflow.  Discard stack segments which do not\n     contain the target address.  */\n\n  while (!(this_segment <= address && address <= stkl))\n    {\n#    ifdef DEBUG_I00AFUNC\n      fprintf (stderr, \"%011o %011o %011o\\n\", this_segment, address, stkl);\n#    endif\n      if (pseg == 0)\n        break;\n      stkl = stkl - pseg;\n      ssptr = (struct stack_segment_linkage *) stkl;\n      size = ssptr->sssize;\n      pseg = ssptr->sspseg;\n      this_segment = stkl - size;\n    }\n\n  result = address - this_segment;\n\n  /* If you subtract pseg from the current end of the stack,\n     you get the address of the previous stack segment's end.\n     This seems a little convoluted to me, but I'll bet you save\n     a cycle somewhere.  */\n\n  while (pseg != 0)\n    {\n#    ifdef DEBUG_I00AFUNC\n      fprintf (stderr, \"%011o %011o\\n\", pseg, size);\n#    endif\n      stkl = stkl - pseg;\n      ssptr = (struct stack_segment_linkage *) stkl;\n      size = ssptr->sssize;\n      pseg = ssptr->sspseg;\n      result += size;\n    }\n  return (result);\n}",
        "lines": 70,
        "depth": 10,
        "decorators": [
          "static",
          "static",
          "long",
          "long"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/alloca.in.h": {},
  "grep/grep-3.1/lib/arg-nonnull.h": {},
  "grep/grep-3.1/lib/argmatch.c": {
    "__argmatch_die": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "content": "static void\n__argmatch_die (void)\n{\n  ARGMATCH_DIE;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "argmatch": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "ptrdiff_t\nargmatch (const char *arg, const char *const *arglist,\n          const char *vallist, size_t valsize)\n{\n  size_t i;                     /* Temporary index in ARGLIST.  */\n  size_t arglen;                /* Length of ARG.  */\n  ptrdiff_t matchind = -1;      /* Index of first nonexact match.  */\n  bool ambiguous = false;       /* If true, multiple nonexact match(es).  */\n\n  arglen = strlen (arg);\n\n  /* Test all elements for either exact match or abbreviated matches.  */\n  for (i = 0; arglist[i]; i++)\n    {\n      if (!strncmp (arglist[i], arg, arglen))\n        {\n          if (strlen (arglist[i]) == arglen)\n            /* Exact match found.  */\n            return i;\n          else if (matchind == -1)\n            /* First nonexact match found.  */\n            matchind = i;\n          else\n            {\n              /* Second nonexact match found.  */\n              if (vallist == NULL\n                  || memcmp (vallist + valsize * matchind,\n                             vallist + valsize * i, valsize))\n                {\n                  /* There is a real ambiguity, or we could not\n                     disambiguate. */\n                  ambiguous = true;\n                }\n            }\n        }\n    }\n  if (ambiguous)\n    return -2;\n  else\n    return matchind;\n}",
      "lines": 41,
      "depth": 17,
      "decorators": [
        "ptrdiff_t"
      ]
    },
    "argmatch_invalid": {
      "start_point": [
        129,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "content": "void\nargmatch_invalid (const char *context, const char *value, ptrdiff_t problem)\n{\n  char const *format = (problem == -1\n                        ? _(\"invalid argument %s for %s\")\n                        : _(\"ambiguous argument %s for %s\"));\n\n  error (0, 0, format, quotearg_n_style (0, ARGMATCH_QUOTING_STYLE, value),\n         quote_n (1, context));\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "argmatch_valid": {
      "start_point": [
        144,
        0
      ],
      "end_point": [
        166,
        1
      ],
      "content": "void\nargmatch_valid (const char *const *arglist,\n                const char *vallist, size_t valsize)\n{\n  size_t i;\n  const char *last_val = NULL;\n\n  /* We try to put synonyms on the same line.  The assumption is that\n     synonyms follow each other */\n  fputs (_(\"Valid arguments are:\"), stderr);\n  for (i = 0; arglist[i]; i++)\n    if ((i == 0)\n        || memcmp (last_val, vallist + valsize * i, valsize))\n      {\n        fprintf (stderr, \"\\n  - %s\", quote (arglist[i]));\n        last_val = vallist + valsize * i;\n      }\n    else\n      {\n        fprintf (stderr, \", %s\", quote (arglist[i]));\n      }\n  putc ('\\n', stderr);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "__xargmatch_internal": {
      "start_point": [
        174,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "content": "ptrdiff_t\n__xargmatch_internal (const char *context,\n                      const char *arg, const char *const *arglist,\n                      const char *vallist, size_t valsize,\n                      argmatch_exit_fn exit_fn)\n{\n  ptrdiff_t res = argmatch (arg, arglist, vallist, valsize);\n  if (res >= 0)\n    /* Success. */\n    return res;\n\n  /* We failed.  Explain why. */\n  argmatch_invalid (context, arg, res);\n  argmatch_valid (arglist, vallist, valsize);\n  (*exit_fn) ();\n\n  return -1; /* To please the compilers. */\n}",
      "lines": 18,
      "depth": 7,
      "decorators": [
        "ptrdiff_t"
      ]
    },
    "argmatch_to_argument": {
      "start_point": [
        195,
        0
      ],
      "end_point": [
        206,
        1
      ],
      "content": "const char *\nargmatch_to_argument (const char *value,\n                      const char *const *arglist,\n                      const char *vallist, size_t valsize)\n{\n  size_t i;\n\n  for (i = 0; arglist[i]; i++)\n    if (!memcmp (value, vallist + valsize * i, valsize))\n      return arglist[i];\n  return NULL;\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nargmatch_to_argument (const char *value,\n                      const char *const *arglist,\n                      const char *vallist, size_t valsize)",
        "*"
      ]
    },
    "main": {
      "start_point": [
        249,
        0
      ],
      "end_point": [
        273,
        1
      ],
      "content": "int\nmain (int argc, const char *const *argv)\n{\n  const char *cp;\n  enum backup_type backup_type = no_backups;\n\n  if (argc > 2)\n    {\n      fprintf (stderr, \"Usage: %s [VERSION_CONTROL]\\n\", getprogname ());\n      exit (1);\n    }\n\n  if ((cp = getenv (\"VERSION_CONTROL\")))\n    backup_type = XARGMATCH (\"$VERSION_CONTROL\", cp,\n                             backup_args, backup_vals);\n\n  if (argc == 2)\n    backup_type = XARGMATCH (getprogname (), argv[1],\n                             backup_args, backup_vals);\n\n  printf (\"The version control is '%s'\\n\",\n          ARGMATCH_TO_ARGUMENT (backup_type, backup_args, backup_vals));\n\n  return 0;\n}",
      "lines": 25,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/argmatch.h": {},
  "grep/grep-3.1/lib/assure.h": {},
  "grep/grep-3.1/lib/at-func.c": {
    "AT_FUNC_NAME": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        142,
        1
      ],
      "content": "FUNC_RESULT\nAT_FUNC_NAME (int fd, char const *file AT_FUNC_POST_FILE_PARAM_DECLS)\n{\n  VALIDATE_FLAG (flag);\n\n  if (fd == AT_FDCWD || IS_ABSOLUTE_FILE_NAME (file))\n    return CALL_FUNC (file);\n\n#ifdef GNULIB_SUPPORT_ONLY_AT_FDCWD\n  errno = ENOTSUP;\n  return FUNC_FAIL;\n#else\n  {\n  /* Be careful to choose names unlikely to conflict with\n     AT_FUNC_POST_FILE_PARAM_DECLS.  */\n  struct saved_cwd saved_cwd;\n  int saved_errno;\n  FUNC_RESULT err;\n\n  {\n    char proc_buf[OPENAT_BUFFER_SIZE];\n    char *proc_file = openat_proc_name (proc_buf, fd, file);\n    if (proc_file)\n      {\n        FUNC_RESULT proc_result = CALL_FUNC (proc_file);\n        int proc_errno = errno;\n        if (proc_file != proc_buf)\n          free (proc_file);\n        /* If the syscall succeeds, or if it fails with an unexpected\n           errno value, then return right away.  Otherwise, fall through\n           and resort to using save_cwd/restore_cwd.  */\n        if (FUNC_FAIL != proc_result)\n          return proc_result;\n        if (! EXPECTED_ERRNO (proc_errno))\n          {\n            errno = proc_errno;\n            return proc_result;\n          }\n      }\n  }\n\n  if (save_cwd (&saved_cwd) != 0)\n    openat_save_fail (errno);\n  if (0 <= fd && fd == saved_cwd.desc)\n    {\n      /* If saving the working directory collides with the user's\n         requested fd, then the user's fd must have been closed to\n         begin with.  */\n      free_cwd (&saved_cwd);\n      errno = EBADF;\n      return FUNC_FAIL;\n    }\n\n  if (fchdir (fd) != 0)\n    {\n      saved_errno = errno;\n      free_cwd (&saved_cwd);\n      errno = saved_errno;\n      return FUNC_FAIL;\n    }\n\n  err = CALL_FUNC (file);\n  saved_errno = (err == FUNC_FAIL ? errno : 0);\n\n  if (restore_cwd (&saved_cwd) != 0)\n    openat_restore_fail (errno);\n\n  free_cwd (&saved_cwd);\n\n  if (saved_errno)\n    errno = saved_errno;\n  return err;\n  }\n#endif\n}",
      "lines": 75,
      "depth": 14,
      "decorators": [
        "FUNC_RESULT"
      ]
    }
  },
  "grep/grep-3.1/lib/basename-lgpl.c": {
    "last_component": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "char *\nlast_component (char const *name)\n{\n  char const *base = name + FILE_SYSTEM_PREFIX_LEN (name);\n  char const *p;\n  bool saw_slash = false;\n\n  while (ISSLASH (*base))\n    base++;\n\n  for (p = base; *p; p++)\n    {\n      if (ISSLASH (*p))\n        saw_slash = true;\n      else if (saw_slash)\n        {\n          base = p;\n          saw_slash = false;\n        }\n    }\n\n  return (char *) base;\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "char",
        "*\nlast_component (char const *name)",
        "*"
      ]
    },
    "base_len": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "content": "size_t\nbase_len (char const *name)\n{\n  size_t len;\n  size_t prefix_len = FILE_SYSTEM_PREFIX_LEN (name);\n\n  for (len = strlen (name);  1 < len && ISSLASH (name[len - 1]);  len--)\n    continue;\n\n  if (DOUBLE_SLASH_IS_DISTINCT_ROOT && len == 1\n      && ISSLASH (name[0]) && ISSLASH (name[1]) && ! name[2])\n    return 2;\n\n  if (FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE && prefix_len\n      && len == prefix_len && ISSLASH (name[prefix_len]))\n    return prefix_len + 1;\n\n  return len;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/binary-io.c": {
    "__gl_setmode_check": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "int\n__gl_setmode_check (int fd)\n{\n  if (isatty (fd))\n    {\n      errno = EINVAL;\n      return -1;\n    }\n  else\n    return 0;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/binary-io.h": {
    "__gl_setmode": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "BINARY_IO_INLINE int\n__gl_setmode (int fd, int mode)\n{\n  (void) fd;\n  (void) mode;\n  return O_BINARY;\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "BINARY_IO_INLINE",
        "int",
        "int"
      ]
    },
    "__gl_setmode_check": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        61,
        41
      ],
      "content": "BINARY_IO_INLINE int\n__gl_setmode_check (int fd) { return 0; }",
      "lines": 2,
      "depth": 5,
      "decorators": [
        "BINARY_IO_INLINE",
        "int",
        "int"
      ]
    },
    "set_binary_mode": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        75,
        1
      ],
      "content": "BINARY_IO_INLINE int\nset_binary_mode (int fd, int mode)\n{\n  int r = __gl_setmode_check (fd);\n  return r != 0 ? r : __gl_setmode (fd, mode);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "BINARY_IO_INLINE",
        "int",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/bitrotate.c": {},
  "grep/grep-3.1/lib/bitrotate.h": {
    "uint64_t": [
      {
        "start_point": [
          37,
          0
        ],
        "end_point": [
          41,
          1
        ],
        "content": "BITROTATE_INLINE uint64_t\nrotl64 (uint64_t x, int n)\n{\n  return ((x << n) | (x >> (64 - n))) & UINT64_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      },
      {
        "start_point": [
          46,
          0
        ],
        "end_point": [
          50,
          1
        ],
        "content": "BITROTATE_INLINE uint64_t\nrotr64 (uint64_t x, int n)\n{\n  return ((x >> n) | (x << (64 - n))) & UINT64_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      }
    ],
    "uint32_t": [
      {
        "start_point": [
          56,
          0
        ],
        "end_point": [
          60,
          1
        ],
        "content": "BITROTATE_INLINE uint32_t\nrotl32 (uint32_t x, int n)\n{\n  return ((x << n) | (x >> (32 - n))) & UINT32_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      },
      {
        "start_point": [
          65,
          0
        ],
        "end_point": [
          69,
          1
        ],
        "content": "BITROTATE_INLINE uint32_t\nrotr32 (uint32_t x, int n)\n{\n  return ((x >> n) | (x << (32 - n))) & UINT32_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      }
    ],
    "rotl_sz": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "content": "BITROTATE_INLINE size_t\nrotl_sz (size_t x, int n)\n{\n  return ((x << n) | (x >> ((CHAR_BIT * sizeof x) - n))) & SIZE_MAX;\n}",
      "lines": 5,
      "depth": 14,
      "decorators": [
        "BITROTATE_INLINE",
        "size_t",
        "size_t"
      ]
    },
    "rotr_sz": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "BITROTATE_INLINE size_t\nrotr_sz (size_t x, int n)\n{\n  return ((x >> n) | (x << ((CHAR_BIT * sizeof x) - n))) & SIZE_MAX;\n}",
      "lines": 5,
      "depth": 14,
      "decorators": [
        "BITROTATE_INLINE",
        "size_t",
        "size_t"
      ]
    },
    "uint16_t": [
      {
        "start_point": [
          94,
          0
        ],
        "end_point": [
          98,
          1
        ],
        "content": "BITROTATE_INLINE uint16_t\nrotl16 (uint16_t x, int n)\n{\n  return ((x << n) | (x >> (16 - n))) & UINT16_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      },
      {
        "start_point": [
          105,
          0
        ],
        "end_point": [
          109,
          1
        ],
        "content": "BITROTATE_INLINE uint16_t\nrotr16 (uint16_t x, int n)\n{\n  return ((x >> n) | (x << (16 - n))) & UINT16_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      }
    ],
    "uint8_t": [
      {
        "start_point": [
          116,
          0
        ],
        "end_point": [
          120,
          1
        ],
        "content": "BITROTATE_INLINE uint8_t\nrotl8 (uint8_t x, int n)\n{\n  return ((x << n) | (x >> (8 - n))) & UINT8_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      },
      {
        "start_point": [
          127,
          0
        ],
        "end_point": [
          131,
          1
        ],
        "content": "BITROTATE_INLINE uint8_t\nrotr8 (uint8_t x, int n)\n{\n  return ((x >> n) | (x << (8 - n))) & UINT8_MAX;\n}",
        "lines": 5,
        "depth": 11,
        "decorators": [
          "BITROTATE_INLINE"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/btowc.c": {
    "btowc": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        38,
        1
      ],
      "content": "wint_t\nbtowc (int c)\n{\n  if (c != EOF)\n    {\n      char buf[1];\n      wchar_t wc;\n\n      buf[0] = c;\n      if (mbtowc (&wc, buf, 1) >= 0)\n        return wc;\n    }\n  return WEOF;\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "wint_t"
      ]
    }
  },
  "grep/grep-3.1/lib/c++defs.h": {},
  "grep/grep-3.1/lib/c-ctype.c": {},
  "grep/grep-3.1/lib/c-ctype.h": {
    "c_isalnum": {
      "start_point": [
        167,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isalnum (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_DIGIT:\n    _C_CTYPE_LOWER:\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isalpha": {
      "start_point": [
        181,
        0
      ],
      "end_point": [
        192,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isalpha (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_LOWER:\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isascii": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isascii (int c)\n{\n  switch (c)\n    {\n    case ' ':\n    _C_CTYPE_CNTRL:\n    _C_CTYPE_DIGIT:\n    _C_CTYPE_LOWER:\n    _C_CTYPE_PUNCT:\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isblank": {
      "start_point": [
        213,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isblank (int c)\n{\n  return c == ' ' || c == '\\t';\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_iscntrl": {
      "start_point": [
        219,
        0
      ],
      "end_point": [
        229,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_iscntrl (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_CNTRL:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isdigit": {
      "start_point": [
        231,
        0
      ],
      "end_point": [
        241,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isdigit (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_DIGIT:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isgraph": {
      "start_point": [
        243,
        0
      ],
      "end_point": [
        256,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isgraph (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_DIGIT:\n    _C_CTYPE_LOWER:\n    _C_CTYPE_PUNCT:\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_islower": {
      "start_point": [
        258,
        0
      ],
      "end_point": [
        268,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_islower (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_LOWER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isprint": {
      "start_point": [
        270,
        0
      ],
      "end_point": [
        284,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isprint (int c)\n{\n  switch (c)\n    {\n    case ' ':\n    _C_CTYPE_DIGIT:\n    _C_CTYPE_LOWER:\n    _C_CTYPE_PUNCT:\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_ispunct": {
      "start_point": [
        286,
        0
      ],
      "end_point": [
        296,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_ispunct (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_PUNCT:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isspace": {
      "start_point": [
        298,
        0
      ],
      "end_point": [
        308,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isspace (int c)\n{\n  switch (c)\n    {\n    case ' ': case '\\t': case '\\n': case '\\v': case '\\f': case '\\r':\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isupper": {
      "start_point": [
        310,
        0
      ],
      "end_point": [
        320,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isupper (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_UPPER:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_isxdigit": {
      "start_point": [
        322,
        0
      ],
      "end_point": [
        333,
        1
      ],
      "content": "C_CTYPE_INLINE bool\nc_isxdigit (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_DIGIT:\n    _C_CTYPE_A_THRU_F:\n      return true;\n    default:\n      return false;\n    }\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "C_CTYPE_INLINE",
        "bool",
        "bool"
      ]
    },
    "c_tolower": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        345,
        1
      ],
      "content": "C_CTYPE_INLINE int\nc_tolower (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_UPPER:\n      return c - 'A' + 'a';\n    default:\n      return c;\n    }\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "C_CTYPE_INLINE",
        "int",
        "int"
      ]
    },
    "c_toupper": {
      "start_point": [
        347,
        0
      ],
      "end_point": [
        357,
        1
      ],
      "content": "C_CTYPE_INLINE int\nc_toupper (int c)\n{\n  switch (c)\n    {\n    _C_CTYPE_LOWER:\n      return c - 'a' + 'A';\n    default:\n      return c;\n    }\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "C_CTYPE_INLINE",
        "int",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/c-strcase.h": {},
  "grep/grep-3.1/lib/c-strcasecmp.c": {
    "c_strcasecmp": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nc_strcasecmp (const char *s1, const char *s2)\n{\n  register const unsigned char *p1 = (const unsigned char *) s1;\n  register const unsigned char *p2 = (const unsigned char *) s2;\n  unsigned char c1, c2;\n\n  if (p1 == p2)\n    return 0;\n\n  do\n    {\n      c1 = c_tolower (*p1);\n      c2 = c_tolower (*p2);\n\n      if (c1 == '\\0')\n        break;\n\n      ++p1;\n      ++p2;\n    }\n  while (c1 == c2);\n\n  if (UCHAR_MAX <= INT_MAX)\n    return c1 - c2;\n  else\n    /* On machines where 'char' and 'int' are types of the same size, the\n       difference of two 'unsigned char' values - including the sign bit -\n       doesn't fit in an 'int'.  */\n    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);\n}",
      "lines": 31,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/c-strcaseeq.h": {
    "strcaseeq9": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static inline int\nstrcaseeq9 (const char *s1, const char *s2)\n{\n  return c_strcasecmp (s1 + 9, s2 + 9) == 0;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq8": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "content": "static inline int\nstrcaseeq8 (const char *s1, const char *s2, char s28)\n{\n  if (CASEEQ (s1[8], s28))\n    {\n      if (s28 == 0)\n        return 1;\n      else\n        return strcaseeq9 (s1, s2);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq7": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "static inline int\nstrcaseeq7 (const char *s1, const char *s2, char s27, char s28)\n{\n  if (CASEEQ (s1[7], s27))\n    {\n      if (s27 == 0)\n        return 1;\n      else\n        return strcaseeq8 (s1, s2, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq6": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "content": "static inline int\nstrcaseeq6 (const char *s1, const char *s2, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[6], s26))\n    {\n      if (s26 == 0)\n        return 1;\n      else\n        return strcaseeq7 (s1, s2, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq5": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        100,
        1
      ],
      "content": "static inline int\nstrcaseeq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[5], s25))\n    {\n      if (s25 == 0)\n        return 1;\n      else\n        return strcaseeq6 (s1, s2, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq4": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "content": "static inline int\nstrcaseeq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[4], s24))\n    {\n      if (s24 == 0)\n        return 1;\n      else\n        return strcaseeq5 (s1, s2, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq3": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "content": "static inline int\nstrcaseeq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[3], s23))\n    {\n      if (s23 == 0)\n        return 1;\n      else\n        return strcaseeq4 (s1, s2, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq2": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        142,
        1
      ],
      "content": "static inline int\nstrcaseeq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[2], s22))\n    {\n      if (s22 == 0)\n        return 1;\n      else\n        return strcaseeq3 (s1, s2, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq1": {
      "start_point": [
        144,
        0
      ],
      "end_point": [
        156,
        1
      ],
      "content": "static inline int\nstrcaseeq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[1], s21))\n    {\n      if (s21 == 0)\n        return 1;\n      else\n        return strcaseeq2 (s1, s2, s22, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "strcaseeq0": {
      "start_point": [
        158,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "content": "static inline int\nstrcaseeq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (CASEEQ (s1[0], s20))\n    {\n      if (s20 == 0)\n        return 1;\n      else\n        return strcaseeq1 (s1, s2, s21, s22, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/c-strncasecmp.c": {
    "c_strncasecmp": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\nc_strncasecmp (const char *s1, const char *s2, size_t n)\n{\n  register const unsigned char *p1 = (const unsigned char *) s1;\n  register const unsigned char *p2 = (const unsigned char *) s2;\n  unsigned char c1, c2;\n\n  if (p1 == p2 || n == 0)\n    return 0;\n\n  do\n    {\n      c1 = c_tolower (*p1);\n      c2 = c_tolower (*p2);\n\n      if (--n == 0 || c1 == '\\0')\n        break;\n\n      ++p1;\n      ++p2;\n    }\n  while (c1 == c2);\n\n  if (UCHAR_MAX <= INT_MAX)\n    return c1 - c2;\n  else\n    /* On machines where 'char' and 'int' are types of the same size, the\n       difference of two 'unsigned char' values - including the sign bit -\n       doesn't fit in an 'int'.  */\n    return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);\n}",
      "lines": 31,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/chdir-long.c": {
    "cdb_init": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "static void\ncdb_init (struct cd_buf *cdb)\n{\n  cdb->fd = AT_FDCWD;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "cdb_fchdir": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "static int\ncdb_fchdir (struct cd_buf const *cdb)\n{\n  return fchdir (cdb->fd);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "cdb_free": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "content": "static void\ncdb_free (struct cd_buf const *cdb)\n{\n  if (0 <= cdb->fd)\n    {\n      bool close_fail = close (cdb->fd);\n      assure (! close_fail);\n    }\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "cdb_advance_fd": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "content": "static int\ncdb_advance_fd (struct cd_buf *cdb, char const *dir)\n{\n  int new_fd = openat (cdb->fd, dir,\n                       O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK);\n  if (new_fd < 0)\n    return -1;\n\n  cdb_free (cdb);\n  cdb->fd = new_fd;\n\n  return 0;\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "find_non_slash": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "content": "static char * _GL_ATTRIBUTE_PURE\nfind_non_slash (char const *s)\n{\n  size_t n_slash = strspn (s, \"/\");\n  return (char *) s + n_slash;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "char",
        "* _GL_ATTRIBUTE_PURE\nfind_non_slash (char const *s)",
        "*",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "chdir_long": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "content": "int\nchdir_long (char *dir)\n{\n  int e = chdir (dir);\n  if (e == 0 || errno != ENAMETOOLONG)\n    return e;\n\n  {\n    size_t len = strlen (dir);\n    char *dir_end = dir + len;\n    struct cd_buf cdb;\n    size_t n_leading_slash;\n\n    cdb_init (&cdb);\n\n    /* If DIR is the empty string, then the chdir above\n       must have failed and set errno to ENOENT.  */\n    assure (0 < len);\n    assure (PATH_MAX <= len);\n\n    /* Count leading slashes.  */\n    n_leading_slash = strspn (dir, \"/\");\n\n    /* Handle any leading slashes as well as any name that matches\n       the regular expression, m!^//hostname[/]*! .  Handling this\n       prefix separately usually results in a single additional\n       cdb_advance_fd call, but it's worthwhile, since it makes the\n       code in the following loop cleaner.  */\n    if (n_leading_slash == 2)\n      {\n        int err;\n        /* Find next slash.\n           We already know that dir[2] is neither a slash nor '\\0'.  */\n        char *slash = memchr (dir + 3, '/', dir_end - (dir + 3));\n        if (slash == NULL)\n          {\n            errno = ENAMETOOLONG;\n            return -1;\n          }\n        *slash = '\\0';\n        err = cdb_advance_fd (&cdb, dir);\n        *slash = '/';\n        if (err != 0)\n          goto Fail;\n        dir = find_non_slash (slash + 1);\n      }\n    else if (n_leading_slash)\n      {\n        if (cdb_advance_fd (&cdb, \"/\") != 0)\n          goto Fail;\n        dir += n_leading_slash;\n      }\n\n    assure (*dir != '/');\n    assure (dir <= dir_end);\n\n    while (PATH_MAX <= dir_end - dir)\n      {\n        int err;\n        /* Find a slash that is PATH_MAX or fewer bytes away from dir.\n           I.e. see if there is a slash that will give us a name of\n           length PATH_MAX-1 or less.  */\n        char *slash = memrchr (dir, '/', PATH_MAX);\n        if (slash == NULL)\n          {\n            errno = ENAMETOOLONG;\n            return -1;\n          }\n\n        *slash = '\\0';\n        assure (slash - dir < PATH_MAX);\n        err = cdb_advance_fd (&cdb, dir);\n        *slash = '/';\n        if (err != 0)\n          goto Fail;\n\n        dir = find_non_slash (slash + 1);\n      }\n\n    if (dir < dir_end)\n      {\n        if (cdb_advance_fd (&cdb, dir) != 0)\n          goto Fail;\n      }\n\n    if (cdb_fchdir (&cdb) != 0)\n      goto Fail;\n\n    cdb_free (&cdb);\n    return 0;\n\n   Fail:\n    {\n      int saved_errno = errno;\n      cdb_free (&cdb);\n      errno = saved_errno;\n      return -1;\n    }\n  }\n}",
      "lines": 100,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "main": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        256,
        1
      ],
      "content": "int\nmain (int argc, char *argv[])\n{\n  char *line = NULL;\n  size_t n = 0;\n  int len;\n\n  atexit (close_stdout);\n\n  len = getline (&line, &n, stdin);\n  if (len < 0)\n    {\n      int saved_errno = errno;\n      if (feof (stdin))\n        exit (0);\n\n      error (EXIT_FAILURE, saved_errno,\n             \"reading standard input\");\n    }\n  else if (len == 0)\n    exit (0);\n\n  if (line[len-1] == '\\n')\n    line[len-1] = '\\0';\n\n  if (chdir_long (line) != 0)\n    error (EXIT_FAILURE, errno,\n           \"chdir_long failed: %s\", line);\n\n  if (argc <= 1)\n    {\n      /* Using 'pwd' here makes sense only if it is a robust implementation,\n         like the one in coreutils after the 2004-04-19 changes.  */\n      char const *cmd = \"pwd\";\n      execlp (cmd, (char *) NULL);\n      error (EXIT_FAILURE, errno, \"%s\", cmd);\n    }\n\n  fclose (stdin);\n  fclose (stderr);\n\n  exit (EXIT_SUCCESS);\n}",
      "lines": 43,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/chdir-long.h": {},
  "grep/grep-3.1/lib/cloexec.c": {
    "set_cloexec_flag": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "int\nset_cloexec_flag (int desc, bool value)\n{\n#ifdef F_SETFD\n\n  int flags = fcntl (desc, F_GETFD, 0);\n\n  if (0 <= flags)\n    {\n      int newflags = (value ? flags | FD_CLOEXEC : flags & ~FD_CLOEXEC);\n\n      if (flags == newflags\n          || fcntl (desc, F_SETFD, newflags) != -1)\n        return 0;\n    }\n\n  return -1;\n\n#else /* !F_SETFD */\n\n  /* Use dup2 to reject invalid file descriptors; the cloexec flag\n     will be unaffected.  */\n  if (desc < 0)\n    {\n      errno = EBADF;\n      return -1;\n    }\n  if (dup2 (desc, desc) < 0)\n    /* errno is EBADF here.  */\n    return -1;\n\n  /* There is nothing we can do on this kind of platform.  Punt.  */\n  return 0;\n#endif /* !F_SETFD */\n}",
      "lines": 35,
      "depth": 12,
      "decorators": [
        "int"
      ]
    },
    "dup_cloexec": {
      "start_point": [
        78,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "content": "int\ndup_cloexec (int fd)\n{\n  return fcntl (fd, F_DUPFD_CLOEXEC, 0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/cloexec.h": {},
  "grep/grep-3.1/lib/close-stream.c": {
    "close_stream": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        77,
        1
      ],
      "content": "int\nclose_stream (FILE *stream)\n{\n  const bool some_pending = (__fpending (stream) != 0);\n  const bool prev_fail = (ferror (stream) != 0);\n  const bool fclose_fail = (fclose (stream) != 0);\n\n  /* Return an error indication if there was a previous failure or if\n     fclose failed, with one exception: ignore an fclose failure if\n     there was no previous error, no data remains to be flushed, and\n     fclose failed with EBADF.  That can happen when a program like cp\n     is invoked like this 'cp a b >&-' (i.e., with standard output\n     closed) and doesn't generate any output (hence no previous error\n     and nothing to be flushed).  */\n\n  if (prev_fail || (fclose_fail && (some_pending || errno != EBADF)))\n    {\n      if (! fclose_fail)\n        errno = 0;\n      return EOF;\n    }\n\n  return 0;\n}",
      "lines": 24,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/close-stream.h": {},
  "grep/grep-3.1/lib/close.c": {
    "close_nothrow": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        39,
        5
      ],
      "content": "static int\nclose_nothrow (int fd)\n{\n  int result;\n\n  TRY_MSVC_INVAL\n    {\n      result = close (fd);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_close": {
      "start_point": [
        55,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "int\nrpl_close (int fd)\n{\n#if WINDOWS_SOCKETS\n  int retval = execute_all_close_hooks (close_nothrow, fd);\n#else\n  int retval = close_nothrow (fd);\n#endif\n\n#if REPLACE_FCHDIR\n  if (retval >= 0)\n    _gl_unregister_fd (fd);\n#endif\n\n  return retval;\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/closedir.c": {
    "closedir": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "int\nclosedir (DIR *dirp)\n{\n# if REPLACE_FCHDIR || REPLACE_DIRFD\n  int fd = dirfd (dirp);\n# endif\n  int retval;\n\n#if HAVE_CLOSEDIR\n# undef closedir\n\n  retval = closedir (dirp);\n\n# ifdef __KLIBC__\n  if (!retval)\n    _gl_unregister_dirp_fd (fd);\n# endif\n#else\n\n  if (dirp->current != INVALID_HANDLE_VALUE)\n    FindClose (dirp->current);\n  free (dirp);\n\n  retval = 0;\n\n#endif\n\n#if REPLACE_FCHDIR\n  if (retval >= 0)\n    _gl_unregister_fd (fd);\n#endif\n  return retval;\n}",
      "lines": 33,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/closeout.c": {
    "close_stdout_set_file_name": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        53,
        1
      ],
      "content": "void\nclose_stdout_set_file_name (const char *file)\n{\n  file_name = file;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "close_stdout_set_ignore_EPIPE": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "void\nclose_stdout_set_ignore_EPIPE (bool ignore)\n{\n  ignore_EPIPE = ignore;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "close_stdout": {
      "start_point": [
        115,
        0
      ],
      "end_point": [
        135,
        1
      ],
      "content": "void\nclose_stdout (void)\n{\n  if (close_stream (stdout) != 0\n      && !(ignore_EPIPE && errno == EPIPE))\n    {\n      char const *write_error = _(\"write error\");\n      if (file_name)\n        error (0, errno, \"%s: %s\", quotearg_colon (file_name),\n               write_error);\n      else\n        error (0, errno, \"%s\", write_error);\n\n      _exit (exit_failure);\n    }\n\n  /* Close stderr only if not sanitizing, as sanitizers may report to\n     stderr after this function returns.  */\n  if (!SANITIZE_ADDRESS && close_stream (stderr) != 0)\n    _exit (exit_failure);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/closeout.h": {},
  "grep/grep-3.1/lib/colorize-posix.c": {
    "should_colorize": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "int\nshould_colorize (void)\n{\n  char const *t = getenv (\"TERM\");\n  return t && strcmp (t, \"dumb\") != 0;\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "init_colorize": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        42,
        29
      ],
      "content": "void init_colorize (void) { }",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "print_start_colorize": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "void\nprint_start_colorize (char const *sgr_start, char const *sgr_seq)\n{\n  printf (sgr_start, sgr_seq);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "print_end_colorize": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "void\nprint_end_colorize (char const *sgr_end)\n{\n  fputs (sgr_end, stdout);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/colorize-w32.c": {
    "init_colorize": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        47,
        1
      ],
      "content": "void\ninit_colorize (void)\n{\n  CONSOLE_SCREEN_BUFFER_INFO csbi;\n\n  hstdout = GetStdHandle (STD_OUTPUT_HANDLE);\n  if (hstdout != INVALID_HANDLE_VALUE\n      && GetConsoleScreenBufferInfo (hstdout, &csbi))\n     norm_attr = csbi.wAttributes;\n  else\n    hstdout = INVALID_HANDLE_VALUE;\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "should_colorize": {
      "start_point": [
        50,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "content": "int\nshould_colorize (void)\n{\n  /* $TERM is not normally defined on DOS/Windows, so don't require\n     it for highlighting.  But some programs, like Emacs, do define\n     it when running Grep as a subprocess, so make sure they don't\n     set TERM=dumb.  */\n  char const *t = getenv (\"TERM\");\n  return ! (t && strcmp (t, \"dumb\") == 0);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "w32_sgr2attr": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        150,
        1
      ],
      "content": "static int\nw32_sgr2attr (const char *sgr_seq)\n{\n  const char *s, *p;\n  int code, fg = norm_attr & 15, bg = norm_attr & (15 << 4);\n  int bright = 0, inverse = 0;\n  static const int fg_color[] = {\n    0,\t\t\t/* black */\n    FOREGROUND_RED,\t/* red */\n    FOREGROUND_GREEN,\t/* green */\n    FOREGROUND_GREEN | FOREGROUND_RED, /* yellow */\n    FOREGROUND_BLUE,\t\t       /* blue */\n    FOREGROUND_BLUE | FOREGROUND_RED,  /* magenta */\n    FOREGROUND_BLUE | FOREGROUND_GREEN, /* cyan */\n    FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE /* gray */\n  };\n  static const int bg_color[] = {\n    0,\t\t\t/* black */\n    BACKGROUND_RED,\t/* red */\n    BACKGROUND_GREEN,\t/* green */\n    BACKGROUND_GREEN | BACKGROUND_RED, /* yellow */\n    BACKGROUND_BLUE,\t\t       /* blue */\n    BACKGROUND_BLUE | BACKGROUND_RED,  /* magenta */\n    BACKGROUND_BLUE | BACKGROUND_GREEN, /* cyan */\n    BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE /* gray */\n  };\n\n  for (s = p = sgr_seq; *s; p++)\n    {\n      if (*p == ';' || *p == '\\0')\n        {\n          code = strtol (s, NULL, 10);\n          s = p + (*p != '\\0');\n\n          switch (code)\n            {\n            case 0:\t/* all attributes off */\n              fg = norm_attr & 15;\n              bg = norm_attr & (15 << 4);\n              bright = 0;\n              inverse = 0;\n              break;\n            case 1:\t/* intensity on */\n              bright = 1;\n              break;\n            case 7:\t/* inverse video */\n              inverse = 1;\n              break;\n            case 22:\t/* intensity off */\n              bright = 0;\n              break;\n            case 27:\t/* inverse off */\n              inverse = 0;\n              break;\n            case 30: case 31: case 32: case 33: /* foreground color */\n            case 34: case 35: case 36: case 37:\n              fg = fg_color[code - 30];\n              break;\n            case 39:\t/* default foreground */\n              fg = norm_attr & 15;\n              break;\n            case 40: case 41: case 42: case 43: /* background color */\n            case 44: case 45: case 46: case 47:\n              bg = bg_color[code - 40];\n              break;\n            case 49:\t/* default background */\n              bg = norm_attr & (15 << 4);\n              break;\n            default:\n              break;\n            }\n        }\n    }\n  if (inverse)\n    {\n      int t = fg;\n      fg = (bg >> 4);\n      bg = (t << 4);\n    }\n  if (bright)\n    fg |= FOREGROUND_INTENSITY;\n\n  return (bg & (15 << 4)) | (fg & 15);\n}",
      "lines": 84,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "print_start_colorize": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "content": "void\nprint_start_colorize (char const *sgr_start, char const *sgr_seq)\n{\n  /* If stdout is connected to a console, set the console text\n     attribute directly instead of using SGR_START.  Otherwise, use\n     SGR_START to emit the SGR escape sequence as on Posix platforms;\n     this is needed when Grep is invoked as a subprocess of another\n     program, such as Emacs, which will handle the display of the\n     matches.  */\n  if (hstdout != INVALID_HANDLE_VALUE)\n    {\n      SHORT attr = w32_sgr2attr (sgr_seq);\n      SetConsoleTextAttribute (hstdout, attr);\n    }\n  else\n    printf (sgr_start, sgr_seq);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "w32_clreol": {
      "start_point": [
        179,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "static void\nw32_clreol (void)\n{\n  DWORD nchars;\n  COORD start_pos;\n  DWORD written;\n  CONSOLE_SCREEN_BUFFER_INFO csbi;\n\n  GetConsoleScreenBufferInfo (hstdout, &csbi);\n  start_pos = csbi.dwCursorPosition;\n  nchars = csbi.dwSize.X - start_pos.X;\n\n  FillConsoleOutputAttribute (hstdout, norm_attr, nchars, start_pos,\n                              &written);\n  FillConsoleOutputCharacter (hstdout, ' ', nchars, start_pos, &written);\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_end_colorize": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "content": "void\nprint_end_colorize (char const *sgr_end)\n{\n  if (hstdout != INVALID_HANDLE_VALUE)\n    {\n      SetConsoleTextAttribute (hstdout, norm_attr);\n      w32_clreol ();\n    }\n  else\n    fputs (sgr_end, stdout);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/colorize.h": {},
  "grep/grep-3.1/lib/creat-safer.c": {
    "creat_safer": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "int\ncreat_safer (char const *file, mode_t mode)\n{\n  return fd_safer (creat (file, mode));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/ctype.in.h": {},
  "grep/grep-3.1/lib/cycle-check.c": {
    "is_zero_or_power_of_two": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "static bool\nis_zero_or_power_of_two (uintmax_t i)\n{\n  return (i & (i - 1)) == 0;\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "cycle_check_init": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "content": "void\ncycle_check_init (struct cycle_check_state *state)\n{\n  state->chdir_counter = 0;\n  state->magic = CC_MAGIC;\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "cycle_check": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        84,
        1
      ],
      "content": "bool\ncycle_check (struct cycle_check_state *state, struct stat const *sb)\n{\n  assure (state->magic == CC_MAGIC);\n\n  /* If the current directory ever happens to be the same\n     as the one we last recorded for the cycle detection,\n     then it's obviously part of a cycle.  */\n  if (state->chdir_counter && SAME_INODE (*sb, state->dev_ino))\n    return true;\n\n  /* If the number of \"descending\" chdir calls is a power of two,\n     record the dev/ino of the current directory.  */\n  if (is_zero_or_power_of_two (++(state->chdir_counter)))\n    {\n      /* On all architectures that we know about, if the counter\n         overflows then there is a directory cycle here somewhere,\n         even if we haven't detected it yet.  Typically this happens\n         only after the counter is incremented 2**64 times, so it's a\n         fairly theoretical point.  */\n      if (state->chdir_counter == 0)\n        return true;\n\n      state->dev_ino.st_dev = sb->st_dev;\n      state->dev_ino.st_ino = sb->st_ino;\n    }\n\n  return false;\n}",
      "lines": 29,
      "depth": 10,
      "decorators": [
        "bool"
      ]
    }
  },
  "grep/grep-3.1/lib/cycle-check.h": {},
  "grep/grep-3.1/lib/dev-ino.h": {},
  "grep/grep-3.1/lib/dfa.c": {
    "streq": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "static bool\nstreq (char const *a, char const *b)\n{\n  return strcmp (a, b) == 0;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "isasciidigit": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        45,
        1
      ],
      "content": "static bool\nisasciidigit (char c)\n{\n  return '0' <= c && c <= '9';\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "to_uchar": {
      "start_point": [
        118,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "static unsigned char\nto_uchar (char ch)\n{\n  return ch;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "unsigned char",
        "unsigned",
        "char"
      ]
    },
    "newline_constraint": {
      "start_point": [
        159,
        0
      ],
      "end_point": [
        163,
        1
      ],
      "content": "static int\nnewline_constraint (int constraint)\n{\n  return (constraint >> 6) & 7;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "letter_constraint": {
      "start_point": [
        164,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "content": "static int\nletter_constraint (int constraint)\n{\n  return (constraint >> 3) & 7;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "other_constraint": {
      "start_point": [
        169,
        0
      ],
      "end_point": [
        173,
        1
      ],
      "content": "static int\nother_constraint (int constraint)\n{\n  return constraint & 7;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "succeeds_in_context": {
      "start_point": [
        175,
        0
      ],
      "end_point": [
        182,
        1
      ],
      "content": "static bool\nsucceeds_in_context (int constraint, int prev, int curr)\n{\n  return !! (((curr & CTX_NONE      ? other_constraint (constraint) : 0) \\\n              | (curr & CTX_LETTER  ? letter_constraint (constraint) : 0) \\\n              | (curr & CTX_NEWLINE ? newline_constraint (constraint) : 0)) \\\n             & prev);\n}",
      "lines": 8,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "prev_newline_dependent": {
      "start_point": [
        185,
        0
      ],
      "end_point": [
        189,
        1
      ],
      "content": "static bool\nprev_newline_dependent (int constraint)\n{\n  return ((constraint ^ constraint >> 2) & 0111) != 0;\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "prev_letter_dependent": {
      "start_point": [
        190,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "static bool\nprev_letter_dependent (int constraint)\n{\n  return ((constraint ^ constraint >> 1) & 0111) != 0;\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "accepting": {
      "start_point": [
        573,
        0
      ],
      "end_point": [
        577,
        1
      ],
      "content": "static bool\naccepting (state_num s, struct dfa const *r)\n{\n  return r->states[s].constraint != 0;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "accepts_in_context": {
      "start_point": [
        580,
        0
      ],
      "end_point": [
        584,
        1
      ],
      "content": "static bool\naccepts_in_context (int prev, int curr, state_num state, struct dfa const *dfa)\n{\n  return succeeds_in_context (dfa->states[state].constraint, prev, curr);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "mbs_to_wchar": {
      "start_point": [
        605,
        0
      ],
      "end_point": [
        625,
        1
      ],
      "content": "static size_t\nmbs_to_wchar (wint_t *pwc, char const *s, size_t n, struct dfa *d)\n{\n  unsigned char uc = s[0];\n  wint_t wc = d->localeinfo.sbctowc[uc];\n\n  if (wc == WEOF)\n    {\n      wchar_t wch;\n      size_t nbytes = mbrtowc (&wch, s, n, &d->mbs);\n      if (0 < nbytes && nbytes < (size_t) -2)\n        {\n          *pwc = wch;\n          return nbytes;\n        }\n      memset (&d->mbs, 0, sizeof d->mbs);\n    }\n\n  *pwc = wc;\n  return 1;\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "prtok": {
      "start_point": [
        629,
        0
      ],
      "end_point": [
        701,
        1
      ],
      "content": "static void\nprtok (token t)\n{\n  if (t < 0)\n    fprintf (stderr, \"END\");\n  else if (t < NOTCHAR)\n    {\n      unsigned int ch = t;\n      fprintf (stderr, \"0x%02x\", ch);\n    }\n  else\n    {\n      char const *s;\n      switch (t)\n        {\n        case EMPTY:\n          s = \"EMPTY\";\n          break;\n        case BACKREF:\n          s = \"BACKREF\";\n          break;\n        case BEGLINE:\n          s = \"BEGLINE\";\n          break;\n        case ENDLINE:\n          s = \"ENDLINE\";\n          break;\n        case BEGWORD:\n          s = \"BEGWORD\";\n          break;\n        case ENDWORD:\n          s = \"ENDWORD\";\n          break;\n        case LIMWORD:\n          s = \"LIMWORD\";\n          break;\n        case NOTLIMWORD:\n          s = \"NOTLIMWORD\";\n          break;\n        case QMARK:\n          s = \"QMARK\";\n          break;\n        case STAR:\n          s = \"STAR\";\n          break;\n        case PLUS:\n          s = \"PLUS\";\n          break;\n        case CAT:\n          s = \"CAT\";\n          break;\n        case OR:\n          s = \"OR\";\n          break;\n        case LPAREN:\n          s = \"LPAREN\";\n          break;\n        case RPAREN:\n          s = \"RPAREN\";\n          break;\n        case ANYCHAR:\n          s = \"ANYCHAR\";\n          break;\n        case MBCSET:\n          s = \"MBCSET\";\n          break;\n        default:\n          s = \"CSET\";\n          break;\n        }\n      fprintf (stderr, \"%s\", s);\n    }\n}",
      "lines": 73,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "tstbit": {
      "start_point": [
        706,
        0
      ],
      "end_point": [
        710,
        1
      ],
      "content": "static bool\ntstbit (unsigned int b, charclass const *c)\n{\n  return c->w[b / CHARCLASS_WORD_BITS] >> b % CHARCLASS_WORD_BITS & 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "setbit": {
      "start_point": [
        712,
        0
      ],
      "end_point": [
        717,
        1
      ],
      "content": "static void\nsetbit (unsigned int b, charclass *c)\n{\n  charclass_word one = 1;\n  c->w[b / CHARCLASS_WORD_BITS] |= one << b % CHARCLASS_WORD_BITS;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "clrbit": {
      "start_point": [
        719,
        0
      ],
      "end_point": [
        724,
        1
      ],
      "content": "static void\nclrbit (unsigned int b, charclass *c)\n{\n  charclass_word one = 1;\n  c->w[b / CHARCLASS_WORD_BITS] &= ~(one << b % CHARCLASS_WORD_BITS);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "zeroset": {
      "start_point": [
        726,
        0
      ],
      "end_point": [
        730,
        1
      ],
      "content": "static void\nzeroset (charclass *s)\n{\n  memset (s, 0, sizeof *s);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fillset": {
      "start_point": [
        732,
        0
      ],
      "end_point": [
        737,
        1
      ],
      "content": "static void\nfillset (charclass *s)\n{\n  for (int i = 0; i < CHARCLASS_WORDS; i++)\n    s->w[i] = CHARCLASS_WORD_MASK;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "notset": {
      "start_point": [
        739,
        0
      ],
      "end_point": [
        744,
        1
      ],
      "content": "static void\nnotset (charclass *s)\n{\n  for (int i = 0; i < CHARCLASS_WORDS; ++i)\n    s->w[i] = CHARCLASS_WORD_MASK & ~s->w[i];\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "equal": {
      "start_point": [
        746,
        0
      ],
      "end_point": [
        753,
        1
      ],
      "content": "static bool\nequal (charclass const *s1, charclass const *s2)\n{\n  charclass_word w = 0;\n  for (int i = 0; i < CHARCLASS_WORDS; i++)\n    w |= s1->w[i] ^ s2->w[i];\n  return w == 0;\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "emptyset": {
      "start_point": [
        755,
        0
      ],
      "end_point": [
        762,
        1
      ],
      "content": "static bool\nemptyset (charclass const *s)\n{\n  charclass_word w = 0;\n  for (int i = 0; i < CHARCLASS_WORDS; i++)\n    w |= s->w[i];\n  return w == 0;\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "xpalloc": {
      "start_point": [
        780,
        0
      ],
      "end_point": [
        822,
        1
      ],
      "content": "static void *\nxpalloc (void *pa, ptrdiff_t *nitems, ptrdiff_t nitems_incr_min,\n\t ptrdiff_t nitems_max, ptrdiff_t item_size)\n{\n  ptrdiff_t n0 = *nitems;\n\n  /* The approximate size to use for initial small allocation\n     requests.  This is the largest \"small\" request for the GNU C\n     library malloc.  */\n  enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };\n\n  /* If the array is tiny, grow it to about (but no greater than)\n     DEFAULT_MXFAST bytes.  Otherwise, grow it by about 50%.\n     Adjust the growth according to three constraints: NITEMS_INCR_MIN,\n     NITEMS_MAX, and what the C language can represent safely.  */\n\n  ptrdiff_t n, nbytes;\n  if (INT_ADD_WRAPV (n0, n0 >> 1, &n))\n    n = PTRDIFF_MAX;\n  if (0 <= nitems_max && nitems_max < n)\n    n = nitems_max;\n\n  ptrdiff_t adjusted_nbytes\n    = ((INT_MULTIPLY_WRAPV (n, item_size, &nbytes) || SIZE_MAX < nbytes)\n       ? MIN (PTRDIFF_MAX, SIZE_MAX)\n       : nbytes < DEFAULT_MXFAST ? DEFAULT_MXFAST : 0);\n  if (adjusted_nbytes)\n    {\n      n = adjusted_nbytes / item_size;\n      nbytes = adjusted_nbytes - adjusted_nbytes % item_size;\n    }\n\n  if (! pa)\n    *nitems = 0;\n  if (n - n0 < nitems_incr_min\n      && (INT_ADD_WRAPV (n0, nitems_incr_min, &n)\n\t  || (0 <= nitems_max && nitems_max < n)\n\t  || INT_MULTIPLY_WRAPV (n, item_size, &nbytes)))\n    xalloc_die ();\n  pa = xrealloc (pa, nbytes);\n  *nitems = n;\n  return pa;\n}",
      "lines": 43,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nxpalloc (void *pa, ptrdiff_t *nitems, ptrdiff_t nitems_incr_min,\n\t ptrdiff_t nitems_max, ptrdiff_t item_size)",
        "*"
      ]
    },
    "maybe_realloc": {
      "start_point": [
        833,
        0
      ],
      "end_point": [
        840,
        1
      ],
      "content": "static void *\nmaybe_realloc (void *pa, ptrdiff_t i, ptrdiff_t *nitems,\n               ptrdiff_t nitems_max, ptrdiff_t item_size)\n{\n  if (i < *nitems)\n    return pa;\n  return xpalloc (pa, nitems, 1, nitems_max, item_size);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nmaybe_realloc (void *pa, ptrdiff_t i, ptrdiff_t *nitems,\n               ptrdiff_t nitems_max, ptrdiff_t item_size)",
        "*"
      ]
    },
    "charclass_index": {
      "start_point": [
        843,
        0
      ],
      "end_point": [
        856,
        1
      ],
      "content": "static ptrdiff_t\ncharclass_index (struct dfa *d, charclass *s)\n{\n  ptrdiff_t i;\n\n  for (i = 0; i < d->cindex; ++i)\n    if (equal (s, &d->charclasses[i]))\n      return i;\n  d->charclasses = maybe_realloc (d->charclasses, d->cindex, &d->calloc,\n                                  TOKEN_MAX - CSET, sizeof *d->charclasses);\n  ++d->cindex;\n  d->charclasses[i] = *s;\n  return i;\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "ptrdiff_t"
      ]
    },
    "unibyte_word_constituent": {
      "start_point": [
        858,
        0
      ],
      "end_point": [
        862,
        1
      ],
      "content": "static bool\nunibyte_word_constituent (struct dfa const *dfa, unsigned char c)\n{\n  return dfa->localeinfo.sbctowc[c] != WEOF && (isalnum (c) || (c) == '_');\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "char_context": {
      "start_point": [
        864,
        0
      ],
      "end_point": [
        872,
        1
      ],
      "content": "static int\nchar_context (struct dfa const *dfa, unsigned char c)\n{\n  if (c == dfa->syntax.eolbyte && !dfa->syntax.anchor)\n    return CTX_NEWLINE;\n  if (unibyte_word_constituent (dfa, c))\n    return CTX_LETTER;\n  return CTX_NONE;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "setbit_wc": {
      "start_point": [
        879,
        0
      ],
      "end_point": [
        888,
        1
      ],
      "content": "static bool\nsetbit_wc (wint_t wc, charclass *c)\n{\n  int b = wctob (wc);\n  if (b < 0)\n    return false;\n\n  setbit (b, c);\n  return true;\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "setbit_case_fold_c": {
      "start_point": [
        892,
        0
      ],
      "end_point": [
        899,
        1
      ],
      "content": "static void\nsetbit_case_fold_c (int b, charclass *c)\n{\n  int ub = toupper (b);\n  for (int i = 0; i < NOTCHAR; i++)\n    if (toupper (i) == ub)\n      setbit (i, c);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "using_simple_locale": {
      "start_point": [
        903,
        0
      ],
      "end_point": [
        931,
        1
      ],
      "content": "static bool\nusing_simple_locale (bool multibyte)\n{\n  /* The native character set is known to be compatible with\n     the C locale.  The following test isn't perfect, but it's good\n     enough in practice, as only ASCII and EBCDIC are in common use\n     and this test correctly accepts ASCII and rejects EBCDIC.  */\n  enum { native_c_charset =\n    ('\\b' == 8 && '\\t' == 9 && '\\n' == 10 && '\\v' == 11 && '\\f' == 12\n     && '\\r' == 13 && ' ' == 32 && '!' == 33 && '\"' == 34 && '#' == 35\n     && '%' == 37 && '&' == 38 && '\\'' == 39 && '(' == 40 && ')' == 41\n     && '*' == 42 && '+' == 43 && ',' == 44 && '-' == 45 && '.' == 46\n     && '/' == 47 && '0' == 48 && '9' == 57 && ':' == 58 && ';' == 59\n     && '<' == 60 && '=' == 61 && '>' == 62 && '?' == 63 && 'A' == 65\n     && 'Z' == 90 && '[' == 91 && '\\\\' == 92 && ']' == 93 && '^' == 94\n     && '_' == 95 && 'a' == 97 && 'z' == 122 && '{' == 123 && '|' == 124\n     && '}' == 125 && '~' == 126)\n  };\n\n  if (!native_c_charset || multibyte)\n    return false;\n  else\n    {\n      /* Treat C and POSIX locales as being compatible.  Also, treat\n         errors as compatible, as these are invariably from stubs.  */\n      char const *loc = setlocale (LC_ALL, NULL);\n      return !loc || streq (loc, \"C\") || streq (loc, \"POSIX\");\n    }\n}",
      "lines": 29,
      "depth": 50,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fetch_wc": {
      "start_point": [
        939,
        0
      ],
      "end_point": [
        949,
        1
      ],
      "content": "static int\nfetch_wc (struct dfa *dfa)\n{\n  size_t nbytes = mbs_to_wchar (&dfa->lex.wctok, dfa->lex.ptr, dfa->lex.left,\n                                dfa);\n  dfa->lex.cur_mb_len = nbytes;\n  int c = nbytes == 1 ? to_uchar (dfa->lex.ptr[0]) : EOF;\n  dfa->lex.ptr += nbytes;\n  dfa->lex.left -= nbytes;\n  return c;\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "bracket_fetch_wc": {
      "start_point": [
        953,
        0
      ],
      "end_point": [
        959,
        1
      ],
      "content": "static int\nbracket_fetch_wc (struct dfa *dfa)\n{\n  if (! dfa->lex.left)\n    dfaerror (_(\"unbalanced [\"));\n  return fetch_wc (dfa);\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_GL_ATTRIBUTE_PURE": [
      {
        "start_point": [
          990,
          0
        ],
        "end_point": [
          997,
          1
        ],
        "content": "static const struct dfa_ctype *_GL_ATTRIBUTE_PURE\nfind_pred (const char *str)\n{\n  for (unsigned int i = 0; prednames[i].name; ++i)\n    if (streq (str, prednames[i].name))\n      return &prednames[i];\n  return NULL;\n}",
        "lines": 8,
        "depth": 10,
        "decorators": [
          "static",
          "static",
          "const",
          "const",
          "struct dfa_ctype",
          "struct",
          "dfa_ctype",
          "*_GL_ATTRIBUTE_PURE\nfind_pred (const char *str)",
          "*"
        ]
      },
      {
        "start_point": [
          1857,
          0
        ],
        "end_point": [
          1875,
          1
        ],
        "content": "static size_t _GL_ATTRIBUTE_PURE\nnsubtoks (struct dfa const *dfa, size_t tindex)\n{\n  switch (dfa->tokens[tindex - 1])\n    {\n    default:\n      return 1;\n    case QMARK:\n    case STAR:\n    case PLUS:\n      return 1 + nsubtoks (dfa, tindex - 1);\n    case CAT:\n    case OR:\n      {\n        size_t ntoks1 = nsubtoks (dfa, tindex - 1);\n        return 1 + ntoks1 + nsubtoks (dfa, tindex - 1 - ntoks1);\n      }\n    }\n}",
        "lines": 19,
        "depth": 13,
        "decorators": [
          "static",
          "static",
          "size_t"
        ]
      }
    ],
    "parse_bracket_exp": {
      "start_point": [
        1001,
        0
      ],
      "end_point": [
        1224,
        1
      ],
      "content": "static token\nparse_bracket_exp (struct dfa *dfa)\n{\n  /* This is a bracket expression that dfaexec is known to\n     process correctly.  */\n  bool known_bracket_exp = true;\n\n  /* Used to warn about [:space:].\n     Bit 0 = first character is a colon.\n     Bit 1 = last character is a colon.\n     Bit 2 = includes any other character but a colon.\n     Bit 3 = includes ranges, char/equiv classes or collation elements.  */\n  int colon_warning_state;\n\n  dfa->lex.brack.nchars = 0;\n  charclass ccl;\n  zeroset (&ccl);\n  int c = bracket_fetch_wc (dfa);\n  bool invert = c == '^';\n  if (invert)\n    {\n      c = bracket_fetch_wc (dfa);\n      known_bracket_exp = dfa->simple_locale;\n    }\n  wint_t wc = dfa->lex.wctok;\n  int c1;\n  wint_t wc1;\n  colon_warning_state = (c == ':');\n  do\n    {\n      c1 = NOTCHAR;\t/* Mark c1 as not initialized.  */\n      colon_warning_state &= ~2;\n\n      /* Note that if we're looking at some other [:...:] construct,\n         we just treat it as a bunch of ordinary characters.  We can do\n         this because we assume regex has checked for syntax errors before\n         dfa is ever called.  */\n      if (c == '[')\n        {\n          c1 = bracket_fetch_wc (dfa);\n          wc1 = dfa->lex.wctok;\n\n          if ((c1 == ':' && (dfa->syntax.syntax_bits & RE_CHAR_CLASSES))\n              || c1 == '.' || c1 == '=')\n            {\n              enum { MAX_BRACKET_STRING_LEN = 32 };\n              char str[MAX_BRACKET_STRING_LEN + 1];\n              size_t len = 0;\n              for (;;)\n                {\n                  c = bracket_fetch_wc (dfa);\n                  if (dfa->lex.left == 0\n                      || (c == c1 && dfa->lex.ptr[0] == ']'))\n                    break;\n                  if (len < MAX_BRACKET_STRING_LEN)\n                    str[len++] = c;\n                  else\n                    /* This is in any case an invalid class name.  */\n                    str[0] = '\\0';\n                }\n              str[len] = '\\0';\n\n              /* Fetch bracket.  */\n              c = bracket_fetch_wc (dfa);\n              wc = dfa->lex.wctok;\n              if (c1 == ':')\n                /* Build character class.  POSIX allows character\n                   classes to match multicharacter collating elements,\n                   but the regex code does not support that, so do not\n                   worry about that possibility.  */\n                {\n                  char const *class\n                    = (dfa->syntax.case_fold && (streq (str, \"upper\")\n                                                 || streq (str, \"lower\"))\n                       ? \"alpha\" : str);\n                  const struct dfa_ctype *pred = find_pred (class);\n                  if (!pred)\n                    dfaerror (_(\"invalid character class\"));\n\n                  if (dfa->localeinfo.multibyte && !pred->single_byte_only)\n                    known_bracket_exp = false;\n                  else\n                    for (int c2 = 0; c2 < NOTCHAR; ++c2)\n                      if (pred->func (c2))\n                        setbit (c2, &ccl);\n                }\n              else\n                known_bracket_exp = false;\n\n              colon_warning_state |= 8;\n\n              /* Fetch new lookahead character.  */\n              c1 = bracket_fetch_wc (dfa);\n              wc1 = dfa->lex.wctok;\n              continue;\n            }\n\n          /* We treat '[' as a normal character here.  c/c1/wc/wc1\n             are already set up.  */\n        }\n\n      if (c == '\\\\'\n          && (dfa->syntax.syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))\n        {\n          c = bracket_fetch_wc (dfa);\n          wc = dfa->lex.wctok;\n        }\n\n      if (c1 == NOTCHAR)\n        {\n          c1 = bracket_fetch_wc (dfa);\n          wc1 = dfa->lex.wctok;\n        }\n\n      if (c1 == '-')\n        /* build range characters.  */\n        {\n          int c2 = bracket_fetch_wc (dfa);\n          wint_t wc2 = dfa->lex.wctok;\n\n          /* A bracket expression like [a-[.aa.]] matches an unknown set.\n             Treat it like [-a[.aa.]] while parsing it, and\n             remember that the set is unknown.  */\n          if (c2 == '[' && dfa->lex.ptr[0] == '.')\n            {\n              known_bracket_exp = false;\n              c2 = ']';\n            }\n\n          if (c2 == ']')\n            {\n              /* In the case [x-], the - is an ordinary hyphen,\n                 which is left in c1, the lookahead character.  */\n              dfa->lex.ptr -= dfa->lex.cur_mb_len;\n              dfa->lex.left += dfa->lex.cur_mb_len;\n            }\n          else\n            {\n              if (c2 == '\\\\' && (dfa->syntax.syntax_bits\n                                 & RE_BACKSLASH_ESCAPE_IN_LISTS))\n                {\n                  c2 = bracket_fetch_wc (dfa);\n                  wc2 = dfa->lex.wctok;\n                }\n\n              colon_warning_state |= 8;\n              c1 = bracket_fetch_wc (dfa);\n              wc1 = dfa->lex.wctok;\n\n              /* Treat [x-y] as a range if x != y.  */\n              if (wc != wc2 || wc == WEOF)\n                {\n                  if (dfa->simple_locale\n                      || (isasciidigit (c) & isasciidigit (c2)))\n                    {\n                      for (int ci = c; ci <= c2; ci++)\n                        if (dfa->syntax.case_fold && isalpha (ci))\n                          setbit_case_fold_c (ci, &ccl);\n                        else\n                          setbit (ci, &ccl);\n                    }\n                  else\n                    known_bracket_exp = false;\n\n                  continue;\n                }\n            }\n        }\n\n      colon_warning_state |= (c == ':') ? 2 : 4;\n\n      if (!dfa->localeinfo.multibyte)\n        {\n          if (dfa->syntax.case_fold && isalpha (c))\n            setbit_case_fold_c (c, &ccl);\n          else\n            setbit (c, &ccl);\n          continue;\n        }\n\n      if (wc == WEOF)\n        known_bracket_exp = false;\n      else\n        {\n          wchar_t folded[CASE_FOLDED_BUFSIZE + 1];\n          unsigned int n = (dfa->syntax.case_fold\n                            ? case_folded_counterparts (wc, folded + 1) + 1\n                            : 1);\n          folded[0] = wc;\n          for (unsigned int i = 0; i < n; i++)\n            if (!setbit_wc (folded[i], &ccl))\n              {\n                dfa->lex.brack.chars\n                  = maybe_realloc (dfa->lex.brack.chars, dfa->lex.brack.nchars,\n                                   &dfa->lex.brack.nchars_alloc, -1,\n                                   sizeof *dfa->lex.brack.chars);\n                dfa->lex.brack.chars[dfa->lex.brack.nchars++] = folded[i];\n              }\n        }\n    }\n  while ((wc = wc1, (c = c1) != ']'));\n\n  if (colon_warning_state == 7)\n    dfawarn (_(\"character class syntax is [[:space:]], not [:space:]\"));\n\n  if (! known_bracket_exp)\n    return BACKREF;\n\n  if (dfa->localeinfo.multibyte && (invert || dfa->lex.brack.nchars != 0))\n    {\n      dfa->lex.brack.invert = invert;\n      dfa->lex.brack.cset = emptyset (&ccl) ? -1 : charclass_index (dfa, &ccl);\n      return MBCSET;\n    }\n\n  if (invert)\n    {\n      notset (&ccl);\n      if (dfa->syntax.syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)\n        clrbit ('\\n', &ccl);\n    }\n\n  return CSET + charclass_index (dfa, &ccl);\n}",
      "lines": 224,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "token"
      ]
    },
    "push_lex_state": {
      "start_point": [
        1232,
        0
      ],
      "end_point": [
        1239,
        1
      ],
      "content": "static void\npush_lex_state (struct dfa *dfa, struct lexptr *ls, char const *s)\n{\n  ls->ptr = dfa->lex.ptr;\n  ls->left = dfa->lex.left;\n  dfa->lex.ptr = s;\n  dfa->lex.left = strlen (s);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "pop_lex_state": {
      "start_point": [
        1241,
        0
      ],
      "end_point": [
        1246,
        1
      ],
      "content": "static void\npop_lex_state (struct dfa *dfa, struct lexptr const *ls)\n{\n  dfa->lex.ptr = ls->ptr;\n  dfa->lex.left = ls->left;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "lex": {
      "start_point": [
        1248,
        0
      ],
      "end_point": [
        1593,
        1
      ],
      "content": "static token\nlex (struct dfa *dfa)\n{\n  bool backslash = false;\n\n  /* Basic plan: We fetch a character.  If it's a backslash,\n     we set the backslash flag and go through the loop again.\n     On the plus side, this avoids having a duplicate of the\n     main switch inside the backslash case.  On the minus side,\n     it means that just about every case begins with\n     \"if (backslash) ...\".  */\n  for (int i = 0; i < 2; ++i)\n    {\n      if (! dfa->lex.left)\n        return dfa->lex.lasttok = END;\n      int c = fetch_wc (dfa);\n\n      switch (c)\n        {\n        case '\\\\':\n          if (backslash)\n            goto normal_char;\n          if (dfa->lex.left == 0)\n            dfaerror (_(\"unfinished \\\\ escape\"));\n          backslash = true;\n          break;\n\n        case '^':\n          if (backslash)\n            goto normal_char;\n          if (dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_ANCHORS\n              || dfa->lex.lasttok == END || dfa->lex.lasttok == LPAREN\n              || dfa->lex.lasttok == OR)\n            return dfa->lex.lasttok = BEGLINE;\n          goto normal_char;\n\n        case '$':\n          if (backslash)\n            goto normal_char;\n          if (dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_ANCHORS\n              || dfa->lex.left == 0\n              || ((dfa->lex.left\n                   > !(dfa->syntax.syntax_bits & RE_NO_BK_PARENS))\n                  && (dfa->lex.ptr[!(dfa->syntax.syntax_bits & RE_NO_BK_PARENS)\n                                   & (dfa->lex.ptr[0] == '\\\\')]\n                      == ')'))\n              || ((dfa->lex.left\n                   > !(dfa->syntax.syntax_bits & RE_NO_BK_VBAR))\n                  && (dfa->lex.ptr[!(dfa->syntax.syntax_bits & RE_NO_BK_VBAR)\n                                   & (dfa->lex.ptr[0] == '\\\\')]\n                      == '|'))\n              || ((dfa->syntax.syntax_bits & RE_NEWLINE_ALT)\n                  && dfa->lex.left > 0 && dfa->lex.ptr[0] == '\\n'))\n            return dfa->lex.lasttok = ENDLINE;\n          goto normal_char;\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_BK_REFS))\n            {\n              dfa->lex.laststart = false;\n              return dfa->lex.lasttok = BACKREF;\n            }\n          goto normal_char;\n\n        case '`':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            {\n              /* FIXME: should be beginning of string */\n              return dfa->lex.lasttok = BEGLINE;\n            }\n          goto normal_char;\n\n        case '\\'':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            {\n              /* FIXME: should be end of string */\n              return dfa->lex.lasttok = ENDLINE;\n            }\n          goto normal_char;\n\n        case '<':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            return dfa->lex.lasttok = BEGWORD;\n          goto normal_char;\n\n        case '>':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            return dfa->lex.lasttok = ENDWORD;\n          goto normal_char;\n\n        case 'b':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            return dfa->lex.lasttok = LIMWORD;\n          goto normal_char;\n\n        case 'B':\n          if (backslash && !(dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            return dfa->lex.lasttok = NOTLIMWORD;\n          goto normal_char;\n\n        case '?':\n          if (dfa->syntax.syntax_bits & RE_LIMITED_OPS)\n            goto normal_char;\n          if (backslash != ((dfa->syntax.syntax_bits & RE_BK_PLUS_QM) != 0))\n            goto normal_char;\n          if (!(dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_OPS)\n              && dfa->lex.laststart)\n            goto normal_char;\n          return dfa->lex.lasttok = QMARK;\n\n        case '*':\n          if (backslash)\n            goto normal_char;\n          if (!(dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_OPS)\n              && dfa->lex.laststart)\n            goto normal_char;\n          return dfa->lex.lasttok = STAR;\n\n        case '+':\n          if (dfa->syntax.syntax_bits & RE_LIMITED_OPS)\n            goto normal_char;\n          if (backslash != ((dfa->syntax.syntax_bits & RE_BK_PLUS_QM) != 0))\n            goto normal_char;\n          if (!(dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_OPS)\n              && dfa->lex.laststart)\n            goto normal_char;\n          return dfa->lex.lasttok = PLUS;\n\n        case '{':\n          if (!(dfa->syntax.syntax_bits & RE_INTERVALS))\n            goto normal_char;\n          if (backslash != ((dfa->syntax.syntax_bits & RE_NO_BK_BRACES) == 0))\n            goto normal_char;\n          if (!(dfa->syntax.syntax_bits & RE_CONTEXT_INDEP_OPS)\n              && dfa->lex.laststart)\n            goto normal_char;\n\n          /* Cases:\n             {M} - exact count\n             {M,} - minimum count, maximum is infinity\n             {,N} - 0 through N\n             {,} - 0 to infinity (same as '*')\n             {M,N} - M through N */\n          {\n            char const *p = dfa->lex.ptr;\n            char const *lim = p + dfa->lex.left;\n            dfa->lex.minrep = dfa->lex.maxrep = -1;\n            for (; p != lim && isasciidigit (*p); p++)\n              dfa->lex.minrep = (dfa->lex.minrep < 0\n                                 ? *p - '0'\n                                 : MIN (RE_DUP_MAX + 1,\n                                        dfa->lex.minrep * 10 + *p - '0'));\n            if (p != lim)\n              {\n                if (*p != ',')\n                  dfa->lex.maxrep = dfa->lex.minrep;\n                else\n                  {\n                    if (dfa->lex.minrep < 0)\n                      dfa->lex.minrep = 0;\n                    while (++p != lim && isasciidigit (*p))\n                      dfa->lex.maxrep\n                        = (dfa->lex.maxrep < 0\n                           ? *p - '0'\n                           : MIN (RE_DUP_MAX + 1,\n                                  dfa->lex.maxrep * 10 + *p - '0'));\n                  }\n              }\n            if (! ((! backslash || (p != lim && *p++ == '\\\\'))\n                   && p != lim && *p++ == '}'\n                   && 0 <= dfa->lex.minrep\n                   && (dfa->lex.maxrep < 0\n                       || dfa->lex.minrep <= dfa->lex.maxrep)))\n              {\n                if (dfa->syntax.syntax_bits & RE_INVALID_INTERVAL_ORD)\n                  goto normal_char;\n                dfaerror (_(\"invalid content of \\\\{\\\\}\"));\n              }\n            if (RE_DUP_MAX < dfa->lex.maxrep)\n              dfaerror (_(\"regular expression too big\"));\n            dfa->lex.ptr = p;\n            dfa->lex.left = lim - p;\n          }\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok = REPMN;\n\n        case '|':\n          if (dfa->syntax.syntax_bits & RE_LIMITED_OPS)\n            goto normal_char;\n          if (backslash != ((dfa->syntax.syntax_bits & RE_NO_BK_VBAR) == 0))\n            goto normal_char;\n          dfa->lex.laststart = true;\n          return dfa->lex.lasttok = OR;\n\n        case '\\n':\n          if (dfa->syntax.syntax_bits & RE_LIMITED_OPS\n              || backslash || !(dfa->syntax.syntax_bits & RE_NEWLINE_ALT))\n            goto normal_char;\n          dfa->lex.laststart = true;\n          return dfa->lex.lasttok = OR;\n\n        case '(':\n          if (backslash != ((dfa->syntax.syntax_bits & RE_NO_BK_PARENS) == 0))\n            goto normal_char;\n          dfa->lex.parens++;\n          dfa->lex.laststart = true;\n          return dfa->lex.lasttok = LPAREN;\n\n        case ')':\n          if (backslash != ((dfa->syntax.syntax_bits & RE_NO_BK_PARENS) == 0))\n            goto normal_char;\n          if (dfa->lex.parens == 0\n              && dfa->syntax.syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)\n            goto normal_char;\n          dfa->lex.parens--;\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok = RPAREN;\n\n        case '.':\n          if (backslash)\n            goto normal_char;\n          if (dfa->canychar == (size_t) -1)\n            {\n              charclass ccl;\n              fillset (&ccl);\n              if (!(dfa->syntax.syntax_bits & RE_DOT_NEWLINE))\n                clrbit ('\\n', &ccl);\n              if (dfa->syntax.syntax_bits & RE_DOT_NOT_NULL)\n                clrbit ('\\0', &ccl);\n              if (dfa->localeinfo.multibyte)\n                for (int c2 = 0; c2 < NOTCHAR; c2++)\n                  if (dfa->localeinfo.sbctowc[c2] == WEOF)\n                    clrbit (c2, &ccl);\n              dfa->canychar = charclass_index (dfa, &ccl);\n            }\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok = (dfa->localeinfo.multibyte\n                                     ? ANYCHAR\n                                     : CSET + dfa->canychar);\n\n        case 's':\n        case 'S':\n          if (!backslash || (dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            goto normal_char;\n          if (!dfa->localeinfo.multibyte)\n            {\n              charclass ccl;\n              zeroset (&ccl);\n              for (int c2 = 0; c2 < NOTCHAR; ++c2)\n                if (isspace (c2))\n                  setbit (c2, &ccl);\n              if (c == 'S')\n                notset (&ccl);\n              dfa->lex.laststart = false;\n              return dfa->lex.lasttok = CSET + charclass_index (dfa, &ccl);\n            }\n\n          /* FIXME: see if optimizing this, as is done with ANYCHAR and\n             add_utf8_anychar, makes sense.  */\n\n          /* \\s and \\S are documented to be equivalent to [[:space:]] and\n             [^[:space:]] respectively, so tell the lexer to process those\n             strings, each minus its \"already processed\" '['.  */\n          {\n            struct lexptr ls;\n            push_lex_state (dfa, &ls, &\"^[:space:]]\"[c == 's']);\n            dfa->lex.lasttok = parse_bracket_exp (dfa);\n            pop_lex_state (dfa, &ls);\n          }\n\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok;\n\n        case 'w':\n        case 'W':\n          if (!backslash || (dfa->syntax.syntax_bits & RE_NO_GNU_OPS))\n            goto normal_char;\n\n          if (!dfa->localeinfo.multibyte)\n            {\n              charclass ccl;\n              zeroset (&ccl);\n              for (int c2 = 0; c2 < NOTCHAR; ++c2)\n                if (dfa->syntax.sbit[c2] == CTX_LETTER)\n                  setbit (c2, &ccl);\n              if (c == 'W')\n                notset (&ccl);\n              dfa->lex.laststart = false;\n              return dfa->lex.lasttok = CSET + charclass_index (dfa, &ccl);\n            }\n\n          /* FIXME: see if optimizing this, as is done with ANYCHAR and\n             add_utf8_anychar, makes sense.  */\n\n          /* \\w and \\W are documented to be equivalent to [_[:alnum:]] and\n             [^_[:alnum:]] respectively, so tell the lexer to process those\n             strings, each minus its \"already processed\" '['.  */\n          {\n            struct lexptr ls;\n            push_lex_state (dfa, &ls, &\"^_[:alnum:]]\"[c == 'w']);\n            dfa->lex.lasttok = parse_bracket_exp (dfa);\n            pop_lex_state (dfa, &ls);\n          }\n\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok;\n\n        case '[':\n          if (backslash)\n            goto normal_char;\n          dfa->lex.laststart = false;\n          return dfa->lex.lasttok = parse_bracket_exp (dfa);\n\n        default:\n        normal_char:\n          dfa->lex.laststart = false;\n          /* For multibyte character sets, folding is done in atom.  Always\n             return WCHAR.  */\n          if (dfa->localeinfo.multibyte)\n            return dfa->lex.lasttok = WCHAR;\n\n          if (dfa->syntax.case_fold && isalpha (c))\n            {\n              charclass ccl;\n              zeroset (&ccl);\n              setbit_case_fold_c (c, &ccl);\n              return dfa->lex.lasttok = CSET + charclass_index (dfa, &ccl);\n            }\n\n          return dfa->lex.lasttok = c;\n        }\n    }\n\n  /* The above loop should consume at most a backslash\n     and some other character.  */\n  abort ();\n  return END;                   /* keeps pedantic compilers happy.  */\n}",
      "lines": 346,
      "depth": 25,
      "decorators": [
        "static",
        "static",
        "token"
      ]
    },
    "addtok_mb": {
      "start_point": [
        1595,
        0
      ],
      "end_point": [
        1634,
        1
      ],
      "content": "static void\naddtok_mb (struct dfa *dfa, token t, char mbprop)\n{\n  if (dfa->talloc == dfa->tindex)\n    {\n      dfa->tokens = x2nrealloc (dfa->tokens, &dfa->talloc,\n                                sizeof *dfa->tokens);\n      if (dfa->localeinfo.multibyte)\n        dfa->multibyte_prop = xnrealloc (dfa->multibyte_prop, dfa->talloc,\n                                         sizeof *dfa->multibyte_prop);\n    }\n  if (dfa->localeinfo.multibyte)\n    dfa->multibyte_prop[dfa->tindex] = mbprop;\n  dfa->tokens[dfa->tindex++] = t;\n\n  switch (t)\n    {\n    case QMARK:\n    case STAR:\n    case PLUS:\n      break;\n\n    case CAT:\n    case OR:\n      dfa->parse.depth--;\n      break;\n\n    case BACKREF:\n      dfa->fast = false;\n      FALLTHROUGH;\n    default:\n      dfa->nleaves++;\n      FALLTHROUGH;\n    case EMPTY:\n      dfa->parse.depth++;\n      break;\n    }\n  if (dfa->parse.depth > dfa->depth)\n    dfa->depth = dfa->parse.depth;\n}",
      "lines": 40,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "addtok": {
      "start_point": [
        1640,
        0
      ],
      "end_point": [
        1671,
        1
      ],
      "content": "static void\naddtok (struct dfa *dfa, token t)\n{\n  if (dfa->localeinfo.multibyte && t == MBCSET)\n    {\n      bool need_or = false;\n\n      /* Extract wide characters into alternations for better performance.\n         This does not require UTF-8.  */\n      for (ptrdiff_t i = 0; i < dfa->lex.brack.nchars; i++)\n        {\n          addtok_wc (dfa, dfa->lex.brack.chars[i]);\n          if (need_or)\n            addtok (dfa, OR);\n          need_or = true;\n        }\n      dfa->lex.brack.nchars = 0;\n\n      /* Wide characters have been handled above, so it is possible\n         that the set is empty now.  Do nothing in that case.  */\n      if (dfa->lex.brack.cset != -1)\n        {\n          addtok (dfa, CSET + dfa->lex.brack.cset);\n          if (need_or)\n            addtok (dfa, OR);\n        }\n    }\n  else\n    {\n      addtok_mb (dfa, t, 3);\n    }\n}",
      "lines": 32,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "addtok_wc": {
      "start_point": [
        1679,
        0
      ],
      "end_point": [
        1702,
        1
      ],
      "content": "static void\naddtok_wc (struct dfa *dfa, wint_t wc)\n{\n  unsigned char buf[MB_LEN_MAX];\n  mbstate_t s = { 0 };\n  size_t stored_bytes = wcrtomb ((char *) buf, wc, &s);\n\n  if (stored_bytes != (size_t) -1)\n    dfa->lex.cur_mb_len = stored_bytes;\n  else\n    {\n      /* This is merely stop-gap.  buf[0] is undefined, yet skipping\n         the addtok_mb call altogether can corrupt the heap.  */\n      dfa->lex.cur_mb_len = 1;\n      buf[0] = 0;\n    }\n\n  addtok_mb (dfa, buf[0], dfa->lex.cur_mb_len == 1 ? 3 : 1);\n  for (int i = 1; i < dfa->lex.cur_mb_len; i++)\n    {\n      addtok_mb (dfa, buf[i], i == dfa->lex.cur_mb_len - 1 ? 2 : 0);\n      addtok (dfa, CAT);\n    }\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "add_utf8_anychar": {
      "start_point": [
        1704,
        0
      ],
      "end_point": [
        1759,
        1
      ],
      "content": "static void\nadd_utf8_anychar (struct dfa *dfa)\n{\n  static charclass const utf8_classes[5] = {\n    /* 80-bf: non-leading bytes.  */\n    CHARCLASS_INIT (0, 0, 0, 0, 0xffffffff, 0xffffffff, 0, 0),\n\n    /* 00-7f: 1-byte sequence.  */\n    CHARCLASS_INIT (0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0, 0, 0, 0),\n\n    /* c2-df: 2-byte sequence.  */\n    CHARCLASS_INIT (0, 0, 0, 0, 0, 0, 0xfffffffc, 0),\n\n    /* e0-ef: 3-byte sequence.  */\n    CHARCLASS_INIT (0, 0, 0, 0, 0, 0, 0, 0xffff),\n\n    /* f0-f7: 4-byte sequence.  */\n    CHARCLASS_INIT (0, 0, 0, 0, 0, 0, 0, 0xff0000)\n  };\n  const unsigned int n = sizeof (utf8_classes) / sizeof (utf8_classes[0]);\n\n  /* Define the five character classes that are needed below.  */\n  if (dfa->utf8_anychar_classes[0] == 0)\n    for (unsigned int i = 0; i < n; i++)\n      {\n        charclass c = utf8_classes[i];\n        if (i == 1)\n          {\n            if (!(dfa->syntax.syntax_bits & RE_DOT_NEWLINE))\n              clrbit ('\\n', &c);\n            if (dfa->syntax.syntax_bits & RE_DOT_NOT_NULL)\n              clrbit ('\\0', &c);\n          }\n        dfa->utf8_anychar_classes[i] = CSET + charclass_index (dfa, &c);\n      }\n\n  /* A valid UTF-8 character is\n\n     ([0x00-0x7f]\n     |[0xc2-0xdf][0x80-0xbf]\n     |[0xe0-0xef[0x80-0xbf][0x80-0xbf]\n     |[0xf0-f7][0x80-0xbf][0x80-0xbf][0x80-0xbf])\n\n     which I'll write more concisely \"B|CA|DAA|EAAA\".  Factor the [0x00-0x7f]\n     and you get \"B|(C|(D|EA)A)A\".  And since the token buffer is in reverse\n     Polish notation, you get \"B C D E A CAT OR A CAT OR A CAT OR\".  */\n  unsigned int i;\n  for (i = 1; i < n; i++)\n    addtok (dfa, dfa->utf8_anychar_classes[i]);\n  while (--i > 1)\n    {\n      addtok (dfa, dfa->utf8_anychar_classes[0]);\n      addtok (dfa, CAT);\n      addtok (dfa, OR);\n    }\n}",
      "lines": 56,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "atom": {
      "start_point": [
        1796,
        0
      ],
      "end_point": [
        1854,
        1
      ],
      "content": "static void\natom (struct dfa *dfa)\n{\n  if (dfa->parse.tok == WCHAR)\n    {\n      if (dfa->lex.wctok == WEOF)\n        addtok (dfa, BACKREF);\n      else\n        {\n          addtok_wc (dfa, dfa->lex.wctok);\n\n          if (dfa->syntax.case_fold)\n            {\n              wchar_t folded[CASE_FOLDED_BUFSIZE];\n              unsigned int n = case_folded_counterparts (dfa->lex.wctok,\n                                                         folded);\n              for (unsigned int i = 0; i < n; i++)\n                {\n                  addtok_wc (dfa, folded[i]);\n                  addtok (dfa, OR);\n                }\n            }\n        }\n\n      dfa->parse.tok = lex (dfa);\n    }\n  else if (dfa->parse.tok == ANYCHAR && dfa->localeinfo.using_utf8)\n    {\n      /* For UTF-8 expand the period to a series of CSETs that define a valid\n         UTF-8 character.  This avoids using the slow multibyte path.  I'm\n         pretty sure it would be both profitable and correct to do it for\n         any encoding; however, the optimization must be done manually as\n         it is done above in add_utf8_anychar.  So, let's start with\n         UTF-8: it is the most used, and the structure of the encoding\n         makes the correctness more obvious.  */\n      add_utf8_anychar (dfa);\n      dfa->parse.tok = lex (dfa);\n    }\n  else if ((0 <= dfa->parse.tok && dfa->parse.tok < NOTCHAR)\n           || dfa->parse.tok >= CSET || dfa->parse.tok == BACKREF\n           || dfa->parse.tok == BEGLINE || dfa->parse.tok == ENDLINE\n           || dfa->parse.tok == BEGWORD || dfa->parse.tok == ANYCHAR\n           || dfa->parse.tok == MBCSET || dfa->parse.tok == ENDWORD\n           || dfa->parse.tok == LIMWORD || dfa->parse.tok == NOTLIMWORD)\n    {\n      addtok (dfa, dfa->parse.tok);\n      dfa->parse.tok = lex (dfa);\n    }\n  else if (dfa->parse.tok == LPAREN)\n    {\n      dfa->parse.tok = lex (dfa);\n      regexp (dfa);\n      if (dfa->parse.tok != RPAREN)\n        dfaerror (_(\"unbalanced (\"));\n      dfa->parse.tok = lex (dfa);\n    }\n  else\n    addtok (dfa, EMPTY);\n}",
      "lines": 59,
      "depth": 22,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "copytoks": {
      "start_point": [
        1878,
        0
      ],
      "end_point": [
        1888,
        1
      ],
      "content": "static void\ncopytoks (struct dfa *dfa, size_t tindex, size_t ntokens)\n{\n  if (dfa->localeinfo.multibyte)\n    for (size_t i = 0; i < ntokens; ++i)\n      addtok_mb (dfa, dfa->tokens[tindex + i],\n                 dfa->multibyte_prop[tindex + i]);\n  else\n    for (size_t i = 0; i < ntokens; ++i)\n      addtok_mb (dfa, dfa->tokens[tindex + i], 3);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "closure": {
      "start_point": [
        1890,
        0
      ],
      "end_point": [
        1929,
        1
      ],
      "content": "static void\nclosure (struct dfa *dfa)\n{\n  atom (dfa);\n  while (dfa->parse.tok == QMARK || dfa->parse.tok == STAR\n         || dfa->parse.tok == PLUS || dfa->parse.tok == REPMN)\n    if (dfa->parse.tok == REPMN && (dfa->lex.minrep || dfa->lex.maxrep))\n      {\n        size_t ntokens = nsubtoks (dfa, dfa->tindex);\n        size_t tindex = dfa->tindex - ntokens;\n        if (dfa->lex.maxrep < 0)\n          addtok (dfa, PLUS);\n        if (dfa->lex.minrep == 0)\n          addtok (dfa, QMARK);\n        int i;\n        for (i = 1; i < dfa->lex.minrep; i++)\n          {\n            copytoks (dfa, tindex, ntokens);\n            addtok (dfa, CAT);\n          }\n        for (; i < dfa->lex.maxrep; i++)\n          {\n            copytoks (dfa, tindex, ntokens);\n            addtok (dfa, QMARK);\n            addtok (dfa, CAT);\n          }\n        dfa->parse.tok = lex (dfa);\n      }\n    else if (dfa->parse.tok == REPMN)\n      {\n        dfa->tindex -= nsubtoks (dfa, dfa->tindex);\n        dfa->parse.tok = lex (dfa);\n        closure (dfa);\n      }\n    else\n      {\n        addtok (dfa, dfa->parse.tok);\n        dfa->parse.tok = lex (dfa);\n      }\n}",
      "lines": 40,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "branch": {
      "start_point": [
        1931,
        0
      ],
      "end_point": [
        1941,
        1
      ],
      "content": "static void\nbranch (struct dfa* dfa)\n{\n  closure (dfa);\n  while (dfa->parse.tok != RPAREN && dfa->parse.tok != OR\n         && dfa->parse.tok >= 0)\n    {\n      closure (dfa);\n      addtok (dfa, CAT);\n    }\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "regexp": {
      "start_point": [
        1943,
        0
      ],
      "end_point": [
        1953,
        1
      ],
      "content": "static void\nregexp (struct dfa *dfa)\n{\n  branch (dfa);\n  while (dfa->parse.tok == OR)\n    {\n      dfa->parse.tok = lex (dfa);\n      branch (dfa);\n      addtok (dfa, OR);\n    }\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dfaparse": {
      "start_point": [
        1958,
        0
      ],
      "end_point": [
        1984,
        1
      ],
      "content": "static void\ndfaparse (char const *s, size_t len, struct dfa *d)\n{\n  d->lex.ptr = s;\n  d->lex.left = len;\n  d->lex.lasttok = END;\n  d->lex.laststart = true;\n\n  if (!d->syntax.syntax_bits_set)\n    dfaerror (_(\"no syntax specified\"));\n\n  d->parse.tok = lex (d);\n  d->parse.depth = d->depth;\n\n  regexp (d);\n\n  if (d->parse.tok != END)\n    dfaerror (_(\"unbalanced )\"));\n\n  addtok (d, END - d->nregexps);\n  addtok (d, CAT);\n\n  if (d->nregexps)\n    addtok (d, OR);\n\n  ++d->nregexps;\n}",
      "lines": 27,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "copy": {
      "start_point": [
        1989,
        0
      ],
      "end_point": [
        2001,
        1
      ],
      "content": "static void\ncopy (position_set const *src, position_set *dst)\n{\n  if (dst->alloc < src->nelem)\n    {\n      free (dst->elems);\n      dst->elems = xpalloc (NULL, &dst->alloc, src->nelem - dst->alloc, -1,\n                            sizeof *dst->elems);\n    }\n  dst->nelem = src->nelem;\n  if (src->nelem != 0)\n    memcpy (dst->elems, src->elems, src->nelem * sizeof *dst->elems);\n}",
      "lines": 13,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "alloc_position_set": {
      "start_point": [
        2003,
        0
      ],
      "end_point": [
        2009,
        1
      ],
      "content": "static void\nalloc_position_set (position_set *s, size_t size)\n{\n  s->elems = xnmalloc (size, sizeof *s->elems);\n  s->alloc = size;\n  s->nelem = 0;\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "insert": {
      "start_point": [
        2015,
        0
      ],
      "end_point": [
        2039,
        1
      ],
      "content": "static void\ninsert (position p, position_set *s)\n{\n  ptrdiff_t count = s->nelem;\n  ptrdiff_t lo = 0, hi = count;\n  while (lo < hi)\n    {\n      ptrdiff_t mid = (lo + hi) >> 1;\n      if (s->elems[mid].index > p.index)\n        lo = mid + 1;\n      else if (s->elems[mid].index == p.index)\n        {\n          s->elems[mid].constraint |= p.constraint;\n          return;\n        }\n      else\n        hi = mid;\n    }\n\n  s->elems = maybe_realloc (s->elems, count, &s->alloc, -1, sizeof *s->elems);\n  for (ptrdiff_t i = count; i > lo; i--)\n    s->elems[i] = s->elems[i - 1];\n  s->elems[lo] = p;\n  ++s->nelem;\n}",
      "lines": 25,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "merge_constrained": {
      "start_point": [
        2044,
        0
      ],
      "end_point": [
        2077,
        1
      ],
      "content": "static void\nmerge_constrained (position_set const *s1, position_set const *s2,\n                   unsigned int c2, position_set *m)\n{\n  ptrdiff_t i = 0, j = 0;\n\n  if (m->alloc - s1->nelem < s2->nelem)\n    {\n      free (m->elems);\n      m->alloc = s1->nelem;\n      m->elems = xpalloc (NULL, &m->alloc, s2->nelem, -1, sizeof *m->elems);\n    }\n  m->nelem = 0;\n  while (i < s1->nelem || j < s2->nelem)\n    if (! (j < s2->nelem)\n        || (i < s1->nelem && s1->elems[i].index >= s2->elems[j].index))\n      {\n        unsigned int c = ((i < s1->nelem && j < s2->nelem\n                           && s1->elems[i].index == s2->elems[j].index)\n                          ? s2->elems[j++].constraint & c2\n                          : 0);\n        m->elems[m->nelem].index = s1->elems[i].index;\n        m->elems[m->nelem++].constraint = s1->elems[i++].constraint | c;\n      }\n    else\n      {\n        if (s2->elems[j].constraint & c2)\n          {\n            m->elems[m->nelem].index = s2->elems[j].index;\n            m->elems[m->nelem++].constraint = s2->elems[j].constraint & c2;\n          }\n        j++;\n      }\n}",
      "lines": 34,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "merge": {
      "start_point": [
        2081,
        0
      ],
      "end_point": [
        2085,
        1
      ],
      "content": "static void\nmerge (position_set const *s1, position_set const *s2, position_set *m)\n{\n  merge_constrained (s1, s2, -1, m);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "delete": {
      "start_point": [
        2089,
        0
      ],
      "end_point": [
        2112,
        1
      ],
      "content": "static unsigned int\ndelete (size_t del, position_set *s)\n{\n  size_t count = s->nelem;\n  size_t lo = 0, hi = count;\n  while (lo < hi)\n    {\n      size_t mid = (lo + hi) >> 1;\n      if (s->elems[mid].index > del)\n        lo = mid + 1;\n      else if (s->elems[mid].index == del)\n        {\n          unsigned int c = s->elems[mid].constraint;\n          size_t i;\n          for (i = mid; i + 1 < count; i++)\n            s->elems[i] = s->elems[i + 1];\n          s->nelem = i;\n          return c;\n        }\n      else\n        hi = mid;\n    }\n  return 0;\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "replace": {
      "start_point": [
        2115,
        0
      ],
      "end_point": [
        2126,
        1
      ],
      "content": "static void\nreplace (position_set *dst, size_t del, position_set *add,\n         unsigned int constraint, position_set *tmp)\n{\n  unsigned int c = delete (del, dst) & constraint;\n\n  if (c)\n    {\n      copy (dst, tmp);\n      merge_constrained (tmp, add, c, dst);\n    }\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "state_index": {
      "start_point": [
        2131,
        0
      ],
      "end_point": [
        2210,
        1
      ],
      "content": "static state_num\nstate_index (struct dfa *d, position_set const *s, int context)\n{\n  size_t hash = 0;\n  int constraint = 0;\n  state_num i;\n  token first_end = 0;\n\n  for (i = 0; i < s->nelem; ++i)\n    hash ^= s->elems[i].index + s->elems[i].constraint;\n\n  /* Try to find a state that exactly matches the proposed one.  */\n  for (i = 0; i < d->sindex; ++i)\n    {\n      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem\n          || context != d->states[i].context)\n        continue;\n      state_num j;\n      for (j = 0; j < s->nelem; ++j)\n        if (s->elems[j].constraint != d->states[i].elems.elems[j].constraint\n            || s->elems[j].index != d->states[i].elems.elems[j].index)\n          break;\n      if (j == s->nelem)\n        return i;\n    }\n\n#ifdef DEBUG\n  fprintf (stderr, \"new state %zd\\n nextpos:\", i);\n  for (state_num j = 0; j < s->nelem; j++)\n    {\n      fprintf (stderr, \" %zu:\", s->elems[j].index);\n      prtok (d->tokens[s->elems[j].index]);\n    }\n  fprintf (stderr, \"\\n context:\");\n  if (context ^ CTX_ANY)\n    {\n      if (context & CTX_NONE)\n        fprintf (stderr, \" CTX_NONE\");\n      if (context & CTX_LETTER)\n        fprintf (stderr, \" CTX_LETTER\");\n      if (context & CTX_NEWLINE)\n        fprintf (stderr, \" CTX_NEWLINE\");\n    }\n  else\n    fprintf (stderr, \" CTX_ANY\");\n  fprintf (stderr, \"\\n\");\n#endif\n\n  for (state_num j = 0; j < s->nelem; j++)\n    {\n      int c = s->elems[j].constraint;\n      if (d->tokens[s->elems[j].index] < 0)\n        {\n          if (succeeds_in_context (c, context, CTX_ANY))\n            constraint |= c;\n          if (!first_end)\n            first_end = d->tokens[s->elems[j].index];\n        }\n      else if (d->tokens[s->elems[j].index] == BACKREF)\n        constraint = NO_CONSTRAINT;\n    }\n\n\n  /* Create a new state.  */\n  d->states = maybe_realloc (d->states, d->sindex, &d->salloc, -1,\n                             sizeof *d->states);\n  d->states[i].hash = hash;\n  alloc_position_set (&d->states[i].elems, s->nelem);\n  copy (s, &d->states[i].elems);\n  d->states[i].context = context;\n  d->states[i].constraint = constraint;\n  d->states[i].first_end = first_end;\n  d->states[i].mbps.nelem = 0;\n  d->states[i].mbps.elems = NULL;\n  d->states[i].mb_trindex = -1;\n\n  ++d->sindex;\n\n  return i;\n}",
      "lines": 80,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "state_num"
      ]
    },
    "epsclosure": {
      "start_point": [
        2217,
        0
      ],
      "end_point": [
        2262,
        1
      ],
      "content": "static void\nepsclosure (position_set *initial, struct dfa const *d)\n{\n  position_set tmp;\n  alloc_position_set (&tmp, d->nleaves);\n  for (size_t i = 0; i < d->tindex; ++i)\n    if (d->follows[i].nelem > 0 && d->tokens[i] >= NOTCHAR\n        && d->tokens[i] != BACKREF && d->tokens[i] != ANYCHAR\n        && d->tokens[i] != MBCSET && d->tokens[i] < CSET)\n      {\n        unsigned int constraint;\n        switch (d->tokens[i])\n          {\n          case BEGLINE:\n            constraint = BEGLINE_CONSTRAINT;\n            break;\n          case ENDLINE:\n            constraint = ENDLINE_CONSTRAINT;\n            break;\n          case BEGWORD:\n            constraint = BEGWORD_CONSTRAINT;\n            break;\n          case ENDWORD:\n            constraint = ENDWORD_CONSTRAINT;\n            break;\n          case LIMWORD:\n            constraint = LIMWORD_CONSTRAINT;\n            break;\n          case NOTLIMWORD:\n            constraint = NOTLIMWORD_CONSTRAINT;\n            break;\n          default:\n            constraint = NO_CONSTRAINT;\n            break;\n          }\n\n        delete (i, &d->follows[i]);\n\n        for (size_t j = 0; j < d->tindex; j++)\n          if (i != j && d->follows[j].nelem > 0)\n            replace (&d->follows[j], i, &d->follows[i], constraint, &tmp);\n\n        replace (initial, i, &d->follows[i], constraint, &tmp);\n      }\n  free (tmp.elems);\n}",
      "lines": 46,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "charclass_context": {
      "start_point": [
        2267,
        0
      ],
      "end_point": [
        2283,
        1
      ],
      "content": "static int\ncharclass_context (struct dfa const *dfa, charclass const *c)\n{\n  int context = 0;\n\n  for (unsigned int j = 0; j < CHARCLASS_WORDS; ++j)\n    {\n      if (c->w[j] & dfa->syntax.newline.w[j])\n        context |= CTX_NEWLINE;\n      if (c->w[j] & dfa->syntax.letters.w[j])\n        context |= CTX_LETTER;\n      if (c->w[j] & ~(dfa->syntax.letters.w[j] | dfa->syntax.newline.w[j]))\n        context |= CTX_NONE;\n    }\n\n  return context;\n}",
      "lines": 17,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "state_separate_contexts": {
      "start_point": [
        2291,
        0
      ],
      "end_point": [
        2305,
        1
      ],
      "content": "static int _GL_ATTRIBUTE_PURE\nstate_separate_contexts (position_set const *s)\n{\n  int separate_contexts = 0;\n\n  for (size_t j = 0; j < s->nelem; j++)\n    {\n      if (prev_newline_dependent (s->elems[j].constraint))\n        separate_contexts |= CTX_NEWLINE;\n      if (prev_letter_dependent (s->elems[j].constraint))\n        separate_contexts |= CTX_LETTER;\n    }\n\n  return separate_contexts;\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "dfaanalyze": {
      "start_point": [
        2360,
        0
      ],
      "end_point": [
        2568,
        1
      ],
      "content": "static void\ndfaanalyze (struct dfa *d, bool searchflag)\n{\n  /* Array allocated to hold position sets.  */\n  position *posalloc = xnmalloc (d->nleaves, 2 * sizeof *posalloc);\n  /* Firstpos and lastpos elements.  */\n  position *firstpos = posalloc + d->nleaves;\n  position *lastpos = firstpos + d->nleaves;\n\n  /* Stack for element counts and nullable flags.  */\n  struct\n  {\n    /* Whether the entry is nullable.  */\n    bool nullable;\n\n    /* Counts of firstpos and lastpos sets.  */\n    size_t nfirstpos;\n    size_t nlastpos;\n  } *stkalloc = xnmalloc (d->depth, sizeof *stkalloc), *stk = stkalloc;\n\n  position_set merged;          /* Result of merging sets.  */\n\n#ifdef DEBUG\n  fprintf (stderr, \"dfaanalyze:\\n\");\n  for (size_t i = 0; i < d->tindex; ++i)\n    {\n      fprintf (stderr, \" %zu:\", i);\n      prtok (d->tokens[i]);\n    }\n  putc ('\\n', stderr);\n#endif\n\n  d->searchflag = searchflag;\n  alloc_position_set (&merged, d->nleaves);\n  d->follows = xcalloc (d->tindex, sizeof *d->follows);\n\n  for (size_t i = 0; i < d->tindex; ++i)\n    {\n      switch (d->tokens[i])\n        {\n        case EMPTY:\n          /* The empty set is nullable.  */\n          stk->nullable = true;\n\n          /* The firstpos and lastpos of the empty leaf are both empty.  */\n          stk->nfirstpos = stk->nlastpos = 0;\n          stk++;\n          break;\n\n        case STAR:\n        case PLUS:\n          /* Every element in the firstpos of the argument is in the follow\n             of every element in the lastpos.  */\n          {\n            position_set tmp;\n            tmp.nelem = stk[-1].nfirstpos;\n            tmp.elems = firstpos;\n            position *pos = lastpos;\n            for (size_t j = 0; j < stk[-1].nlastpos; j++)\n              {\n                merge (&tmp, &d->follows[pos[j].index], &merged);\n                copy (&merged, &d->follows[pos[j].index]);\n              }\n          }\n          FALLTHROUGH;\n        case QMARK:\n          /* A QMARK or STAR node is automatically nullable.  */\n          if (d->tokens[i] != PLUS)\n            stk[-1].nullable = true;\n          break;\n\n        case CAT:\n          /* Every element in the firstpos of the second argument is in the\n             follow of every element in the lastpos of the first argument.  */\n          {\n            position_set tmp;\n            tmp.nelem = stk[-1].nfirstpos;\n            tmp.elems = firstpos;\n            position *pos = lastpos + stk[-1].nlastpos;\n            for (size_t j = 0; j < stk[-2].nlastpos; j++)\n              {\n                merge (&tmp, &d->follows[pos[j].index], &merged);\n                copy (&merged, &d->follows[pos[j].index]);\n              }\n          }\n\n          /* The firstpos of a CAT node is the firstpos of the first argument,\n             union that of the second argument if the first is nullable.  */\n          if (stk[-2].nullable)\n            stk[-2].nfirstpos += stk[-1].nfirstpos;\n          else\n            firstpos += stk[-1].nfirstpos;\n\n          /* The lastpos of a CAT node is the lastpos of the second argument,\n             union that of the first argument if the second is nullable.  */\n          if (stk[-1].nullable)\n            stk[-2].nlastpos += stk[-1].nlastpos;\n          else\n            {\n              position *pos = lastpos + stk[-2].nlastpos;\n              for (size_t j = stk[-1].nlastpos; j-- > 0;)\n                pos[j] = lastpos[j];\n              lastpos += stk[-2].nlastpos;\n              stk[-2].nlastpos = stk[-1].nlastpos;\n            }\n\n          /* A CAT node is nullable if both arguments are nullable.  */\n          stk[-2].nullable &= stk[-1].nullable;\n          stk--;\n          break;\n\n        case OR:\n          /* The firstpos is the union of the firstpos of each argument.  */\n          stk[-2].nfirstpos += stk[-1].nfirstpos;\n\n          /* The lastpos is the union of the lastpos of each argument.  */\n          stk[-2].nlastpos += stk[-1].nlastpos;\n\n          /* An OR node is nullable if either argument is nullable.  */\n          stk[-2].nullable |= stk[-1].nullable;\n          stk--;\n          break;\n\n        default:\n          /* Anything else is a nonempty position.  (Note that special\n             constructs like \\< are treated as nonempty strings here;\n             an \"epsilon closure\" effectively makes them nullable later.\n             Backreferences have to get a real position so we can detect\n             transitions on them later.  But they are nullable.  */\n          stk->nullable = d->tokens[i] == BACKREF;\n\n          /* This position is in its own firstpos and lastpos.  */\n          stk->nfirstpos = stk->nlastpos = 1;\n          stk++;\n\n          --firstpos, --lastpos;\n          firstpos->index = lastpos->index = i;\n          firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;\n\n          break;\n        }\n#ifdef DEBUG\n      /* ... balance the above nonsyntactic #ifdef goo...  */\n      fprintf (stderr, \"node %zu:\", i);\n      prtok (d->tokens[i]);\n      putc ('\\n', stderr);\n      fprintf (stderr,\n               stk[-1].nullable ? \" nullable: yes\\n\" : \" nullable: no\\n\");\n      fprintf (stderr, \" firstpos:\");\n      for (size_t j = stk[-1].nfirstpos; j-- > 0;)\n        {\n          fprintf (stderr, \" %zu:\", firstpos[j].index);\n          prtok (d->tokens[firstpos[j].index]);\n        }\n      fprintf (stderr, \"\\n lastpos:\");\n      for (size_t j = stk[-1].nlastpos; j-- > 0;)\n        {\n          fprintf (stderr, \" %zu:\", lastpos[j].index);\n          prtok (d->tokens[lastpos[j].index]);\n        }\n      putc ('\\n', stderr);\n#endif\n    }\n\n#ifdef DEBUG\n  for (size_t i = 0; i < d->tindex; ++i)\n    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF\n        || d->tokens[i] == ANYCHAR || d->tokens[i] == MBCSET\n        || d->tokens[i] >= CSET)\n      {\n        fprintf (stderr, \"follows(%zu:\", i);\n        prtok (d->tokens[i]);\n        fprintf (stderr, \"):\");\n        for (size_t j = d->follows[i].nelem; j-- > 0;)\n          {\n            fprintf (stderr, \" %zu:\", d->follows[i].elems[j].index);\n            prtok (d->tokens[d->follows[i].elems[j].index]);\n          }\n        putc ('\\n', stderr);\n      }\n#endif\n\n  /* Get the epsilon closure of the firstpos of the regexp.  The result will\n     be the set of positions of state 0.  */\n  merged.nelem = 0;\n  for (size_t i = 0; i < stk[-1].nfirstpos; ++i)\n    insert (firstpos[i], &merged);\n\n  /* For each follow set that is the follow set of a real position, replace\n     it with its epsilon closure.  */\n  epsclosure (&merged, d);\n\n  /* Context wanted by some position.  */\n  int separate_contexts = state_separate_contexts (&merged);\n\n  /* Build the initial state.  */\n  if (separate_contexts & CTX_NEWLINE)\n    state_index (d, &merged, CTX_NEWLINE);\n  d->initstate_notbol = d->min_trcount\n    = state_index (d, &merged, separate_contexts ^ CTX_ANY);\n  if (separate_contexts & CTX_LETTER)\n    d->min_trcount = state_index (d, &merged, CTX_LETTER);\n  d->min_trcount++;\n  d->trcount = 0;\n\n  free (posalloc);\n  free (stkalloc);\n  free (merged.elems);\n}",
      "lines": 209,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "realloc_trans_if_necessary": {
      "start_point": [
        2571,
        0
      ],
      "end_point": [
        2603,
        1
      ],
      "content": "static void\nrealloc_trans_if_necessary (struct dfa *d)\n{\n  state_num oldalloc = d->tralloc;\n  if (oldalloc < d->sindex)\n    {\n      state_num **realtrans = d->trans ? d->trans - 2 : NULL;\n      ptrdiff_t newalloc1 = realtrans ? d->tralloc + 2 : 0;\n      realtrans = xpalloc (realtrans, &newalloc1, d->sindex - oldalloc,\n                           -1, sizeof *realtrans);\n      realtrans[0] = realtrans[1] = NULL;\n      d->trans = realtrans + 2;\n      ptrdiff_t newalloc = d->tralloc = newalloc1 - 2;\n      d->fails = xnrealloc (d->fails, newalloc, sizeof *d->fails);\n      d->success = xnrealloc (d->success, newalloc, sizeof *d->success);\n      d->newlines = xnrealloc (d->newlines, newalloc, sizeof *d->newlines);\n      if (d->localeinfo.multibyte)\n        {\n          realtrans = d->mb_trans ? d->mb_trans - 2 : NULL;\n          realtrans = xnrealloc (realtrans, newalloc1, sizeof *realtrans);\n          if (oldalloc == 0)\n            realtrans[0] = realtrans[1] = NULL;\n          d->mb_trans = realtrans + 2;\n        }\n      for (; oldalloc < newalloc; oldalloc++)\n        {\n          d->trans[oldalloc] = NULL;\n          d->fails[oldalloc] = NULL;\n          if (d->localeinfo.multibyte)\n            d->mb_trans[oldalloc] = NULL;\n        }\n    }\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "build_state": {
      "start_point": [
        2638,
        0
      ],
      "end_point": [
        2921,
        1
      ],
      "content": "static state_num\nbuild_state (state_num s, struct dfa *d, unsigned char uc)\n{\n  position_set follows;         /* Union of the follows of the group.  */\n  position_set tmp;             /* Temporary space for merging sets.  */\n  state_num state;              /* New state.  */\n  state_num state_newline;      /* New state on a newline transition.  */\n  state_num state_letter;       /* New state on a letter transition.  */\n\n#ifdef DEBUG\n  fprintf (stderr, \"build state %td\\n\", s);\n#endif\n\n  /* A pointer to the new transition table, and the table itself.  */\n  state_num **ptrans = (accepting (s, d) ? d->fails : d->trans) + s;\n  state_num *trans = *ptrans;\n\n  if (!trans)\n    {\n      /* MAX_TRCOUNT is an arbitrary upper limit on the number of\n         transition tables that can exist at once, other than for\n         initial states.  Often-used transition tables are quickly\n         rebuilt, whereas rarely-used ones are cleared away.  */\n      if (MAX_TRCOUNT <= d->trcount)\n        {\n          for (state_num i = d->min_trcount; i < d->tralloc; i++)\n            {\n              free (d->trans[i]);\n              free (d->fails[i]);\n              d->trans[i] = d->fails[i] = NULL;\n            }\n          d->trcount = 0;\n        }\n\n      d->trcount++;\n      *ptrans = trans = xmalloc (NOTCHAR * sizeof *trans);\n\n      /* Fill transition table with a default value which means that the\n         transited state has not been calculated yet.  */\n      for (int i = 0; i < NOTCHAR; i++)\n        trans[i] = -2;\n    }\n\n  /* Set up the success bits for this state.  */\n  d->success[s] = 0;\n  if (accepts_in_context (d->states[s].context, CTX_NEWLINE, s, d))\n    d->success[s] |= CTX_NEWLINE;\n  if (accepts_in_context (d->states[s].context, CTX_LETTER, s, d))\n    d->success[s] |= CTX_LETTER;\n  if (accepts_in_context (d->states[s].context, CTX_NONE, s, d))\n    d->success[s] |= CTX_NONE;\n\n  /* Positions that match the input char.  */\n  leaf_set group;\n  group.elems = xnmalloc (d->nleaves, sizeof *group.elems);\n  group.nelem = 0;\n\n  /* The group's label.  */\n  charclass label;\n  fillset (&label);\n\n  for (size_t i = 0; i < d->states[s].elems.nelem; ++i)\n    {\n      charclass matches;            /* Set of matching characters.  */\n      position pos = d->states[s].elems.elems[i];\n      bool matched = false;\n      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)\n        {\n          zeroset (&matches);\n          setbit (d->tokens[pos.index], &matches);\n          if (d->tokens[pos.index] == uc)\n            matched = true;\n        }\n      else if (d->tokens[pos.index] >= CSET)\n        {\n          matches = d->charclasses[d->tokens[pos.index] - CSET];\n          if (tstbit (uc, &matches))\n            matched = true;\n        }\n      else if (d->tokens[pos.index] == ANYCHAR)\n        {\n          matches = d->charclasses[d->canychar];\n          if (tstbit (uc, &matches))\n            matched = true;\n\n          /* ANYCHAR must match with a single character, so we must put\n             it to D->states[s].mbps which contains the positions which\n             can match with a single character not a byte.  If all\n             positions which has ANYCHAR does not depend on context of\n             next character, we put the follows instead of it to\n             D->states[s].mbps to optimize.  */\n          if (succeeds_in_context (pos.constraint, d->states[s].context,\n                                   CTX_NONE))\n            {\n              if (d->states[s].mbps.nelem == 0)\n                alloc_position_set (&d->states[s].mbps,\n                                    d->follows[pos.index].nelem);\n              for (size_t j = 0; j < d->follows[pos.index].nelem; j++)\n                insert (d->follows[pos.index].elems[j], &d->states[s].mbps);\n            }\n        }\n      else\n        continue;\n\n      /* Some characters may need to be eliminated from matches because\n         they fail in the current context.  */\n      if (pos.constraint != NO_CONSTRAINT)\n        {\n          if (!succeeds_in_context (pos.constraint,\n                                    d->states[s].context, CTX_NEWLINE))\n            for (size_t j = 0; j < CHARCLASS_WORDS; ++j)\n              matches.w[j] &= ~d->syntax.newline.w[j];\n          if (!succeeds_in_context (pos.constraint,\n                                    d->states[s].context, CTX_LETTER))\n            for (size_t j = 0; j < CHARCLASS_WORDS; ++j)\n              matches.w[j] &= ~d->syntax.letters.w[j];\n          if (!succeeds_in_context (pos.constraint,\n                                    d->states[s].context, CTX_NONE))\n            for (size_t j = 0; j < CHARCLASS_WORDS; ++j)\n              matches.w[j] &= d->syntax.letters.w[j] | d->syntax.newline.w[j];\n\n          /* If there are no characters left, there's no point in going on.  */\n          if (emptyset (&matches))\n            continue;\n\n          /* If we have reset the bit that made us declare \"matched\", reset\n             that indicator, too.  This is required to avoid an infinite loop\n             with this command: echo cx | LC_ALL=C grep -E 'c\\b[x ]'  */\n          if (!tstbit (uc, &matches))\n            matched = false;\n        }\n\n#ifdef DEBUG\n      fprintf (stderr, \" nextpos %zu:\", pos.index);\n      prtok (d->tokens[pos.index]);\n      fprintf (stderr, \" of\");\n      for (size_t j = 0; j < NOTCHAR; j++)\n        if (tstbit (j, &matches))\n          fprintf (stderr, \" 0x%02zx\", j);\n      fprintf (stderr, \"\\n\");\n#endif\n\n      if (matched)\n        {\n          for (size_t k = 0; k < CHARCLASS_WORDS; ++k)\n            label.w[k] &= matches.w[k];\n          group.elems[group.nelem++] = pos.index;\n        }\n      else\n        {\n          for (size_t k = 0; k < CHARCLASS_WORDS; ++k)\n            label.w[k] &= ~matches.w[k];\n        }\n    }\n\n  alloc_position_set (&follows, d->nleaves);\n  alloc_position_set (&tmp, d->nleaves);\n\n  if (group.nelem > 0)\n    {\n      follows.nelem = 0;\n\n      /* Find the union of the follows of the positions of the group.\n         This is a hideously inefficient loop.  Fix it someday.  */\n      for (size_t j = 0; j < group.nelem; ++j)\n        for (size_t k = 0; k < d->follows[group.elems[j]].nelem; ++k)\n          insert (d->follows[group.elems[j]].elems[k], &follows);\n\n      /* If we are building a searching matcher, throw in the positions\n         of state 0 as well, if possible.  */\n      if (d->searchflag)\n        {\n          /* If a token in follows.elems is not 1st byte of a multibyte\n             character, or the states of follows must accept the bytes\n             which are not 1st byte of the multibyte character.\n             Then, if a state of follows encounters a byte, it must not be\n             a 1st byte of a multibyte character nor a single byte character.\n             In this case, do not add state[0].follows to next state, because\n             state[0] must accept 1st-byte.\n\n             For example, suppose <sb a> is a certain single byte character,\n             <mb A> is a certain multibyte character, and the codepoint of\n             <sb a> equals the 2nd byte of the codepoint of <mb A>.  When\n             state[0] accepts <sb a>, state[i] transits to state[i+1] by\n             accepting the 1st byte of <mb A>, and state[i+1] accepts the\n             2nd byte of <mb A>, if state[i+1] encounters the codepoint of\n             <sb a>, it must not be <sb a> but the 2nd byte of <mb A>, so do\n             not add state[0].  */\n\n          bool mergeit = !d->localeinfo.multibyte;\n          if (!mergeit)\n            {\n              mergeit = true;\n              for (size_t j = 0; mergeit && j < follows.nelem; j++)\n                mergeit &= d->multibyte_prop[follows.elems[j].index];\n            }\n          if (mergeit)\n            {\n              merge (&d->states[0].elems, &follows, &tmp);\n              copy (&tmp, &follows);\n            }\n        }\n\n      /* Find out if the new state will want any context information,\n         by calculating possible contexts that the group can match,\n         and separate contexts that the new state wants to know.  */\n      int possible_contexts = charclass_context (d, &label);\n      int separate_contexts = state_separate_contexts (&follows);\n\n      /* Find the state(s) corresponding to the union of the follows.  */\n      if (possible_contexts & ~separate_contexts)\n        state = state_index (d, &follows, separate_contexts ^ CTX_ANY);\n      else\n        state = -1;\n      if (separate_contexts & possible_contexts & CTX_NEWLINE)\n        state_newline = state_index (d, &follows, CTX_NEWLINE);\n      else\n        state_newline = state;\n      if (separate_contexts & possible_contexts & CTX_LETTER)\n        state_letter = state_index (d, &follows, CTX_LETTER);\n      else\n        state_letter = state;\n\n      /* Reallocate now, to reallocate any newline transition properly.  */\n      realloc_trans_if_necessary (d);\n    }\n\n  /* If we are a searching matcher, the default transition is to a state\n     containing the positions of state 0, otherwise the default transition\n     is to fail miserably.  */\n  else if (d->searchflag)\n    {\n      state_newline = 0;\n      state_letter = d->min_trcount - 1;\n      state = d->initstate_notbol;\n    }\n  else\n    {\n      state_newline = -1;\n      state_letter = -1;\n      state = -1;\n    }\n\n  /* Set the transitions for each character in the label.  */\n  for (size_t i = 0; i < NOTCHAR; i++)\n    if (tstbit (i, &label))\n      switch (d->syntax.sbit[i])\n        {\n        case CTX_NEWLINE:\n          trans[i] = state_newline;\n          break;\n        case CTX_LETTER:\n          trans[i] = state_letter;\n          break;\n        default:\n          trans[i] = state;\n          break;\n        }\n\n#ifdef DEBUG\n  fprintf (stderr, \"trans table %td\", s);\n  for (size_t i = 0; i < NOTCHAR; ++i)\n    {\n      if (!(i & 0xf))\n        fprintf (stderr, \"\\n\");\n      fprintf (stderr, \" %2td\", trans[i]);\n    }\n  fprintf (stderr, \"\\n\");\n#endif\n\n  free (group.elems);\n  free (follows.elems);\n  free (tmp.elems);\n\n  /* Keep the newline transition in a special place so we can use it as\n     a sentinel.  */\n  if (tstbit (d->syntax.eolbyte, &label))\n    {\n      d->newlines[s] = trans[d->syntax.eolbyte];\n      trans[d->syntax.eolbyte] = -1;\n    }\n\n  return trans[uc];\n}",
      "lines": 284,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "state_num"
      ]
    },
    "transit_state_singlebyte": {
      "start_point": [
        2929,
        0
      ],
      "end_point": [
        2954,
        1
      ],
      "content": "static state_num\ntransit_state_singlebyte (struct dfa *d, state_num s, unsigned char const **pp)\n{\n  state_num *t;\n\n  if (d->trans[s])\n    t = d->trans[s];\n  else if (d->fails[s])\n    t = d->fails[s];\n  else\n    {\n      build_state (s, d, **pp);\n      if (d->trans[s])\n        t = d->trans[s];\n      else\n        {\n          t = d->fails[s];\n          assert (t);\n        }\n    }\n\n  if (t[**pp] == -2)\n    build_state (s, d, **pp);\n\n  return t[*(*pp)++];\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "state_num"
      ]
    },
    "transit_state": {
      "start_point": [
        2959,
        0
      ],
      "end_point": [
        3028,
        1
      ],
      "content": "static state_num\ntransit_state (struct dfa *d, state_num s, unsigned char const **pp,\n               unsigned char const *end)\n{\n  wint_t wc;\n\n  int mbclen = mbs_to_wchar (&wc, (char const *) *pp, end - *pp, d);\n\n  /* This state has some operators which can match a multibyte character.  */\n  d->mb_follows.nelem = 0;\n\n  /* Calculate the state which can be reached from the state 's' by\n     consuming 'mbclen' single bytes from the buffer.  */\n  state_num s1 = s;\n  int mbci;\n  for (mbci = 0; mbci < mbclen && (mbci == 0 || d->min_trcount <= s); mbci++)\n    s = transit_state_singlebyte (d, s, pp);\n  *pp += mbclen - mbci;\n\n  if (wc == WEOF)\n    {\n      /* It is an invalid character, so ANYCHAR is not accepted.  */\n      return s;\n    }\n\n  /* If all positions which have ANYCHAR do not depend on the context\n     of the next character, calculate the next state with\n     pre-calculated follows and cache the result.  */\n  if (d->states[s1].mb_trindex < 0)\n    {\n      if (MAX_TRCOUNT <= d->mb_trcount)\n        {\n          state_num s3;\n          for (s3 = -1; s3 < d->tralloc; s3++)\n            {\n              free (d->mb_trans[s3]);\n              d->mb_trans[s3] = NULL;\n            }\n\n          for (state_num i = 0; i < d->sindex; i++)\n            d->states[i].mb_trindex = -1;\n          d->mb_trcount = 0;\n        }\n      d->states[s1].mb_trindex = d->mb_trcount++;\n    }\n\n  if (! d->mb_trans[s])\n    {\n      enum { TRANSPTR_SIZE = sizeof *d->mb_trans[s] };\n      enum { TRANSALLOC_SIZE = MAX_TRCOUNT * TRANSPTR_SIZE };\n      d->mb_trans[s] = xmalloc (TRANSALLOC_SIZE);\n      for (int i = 0; i < MAX_TRCOUNT; i++)\n        d->mb_trans[s][i] = -1;\n    }\n  else if (d->mb_trans[s][d->states[s1].mb_trindex] >= 0)\n    return d->mb_trans[s][d->states[s1].mb_trindex];\n\n  if (s == -1)\n    copy (&d->states[s1].mbps, &d->mb_follows);\n  else\n    merge (&d->states[s1].mbps, &d->states[s].elems, &d->mb_follows);\n\n  int separate_contexts = state_separate_contexts (&d->mb_follows);\n  state_num s2 = state_index (d, &d->mb_follows, separate_contexts ^ CTX_ANY);\n  realloc_trans_if_necessary (d);\n\n  d->mb_trans[s][d->states[s1].mb_trindex] = s2;\n\n  return s2;\n}",
      "lines": 70,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "state_num"
      ]
    },
    "skip_remains_mb": {
      "start_point": [
        3045,
        0
      ],
      "end_point": [
        3058,
        1
      ],
      "content": "static unsigned char const *\nskip_remains_mb (struct dfa *d, unsigned char const *p,\n                 unsigned char const *mbp, char const *end)\n{\n  if (d->syntax.never_trail[*p])\n    return p;\n  while (mbp < p)\n    {\n      wint_t wc;\n      mbp += mbs_to_wchar (&wc, (char const *) mbp,\n                           end - (char const *) mbp, d);\n    }\n  return mbp;\n}",
      "lines": 14,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "unsigned char",
        "unsigned",
        "char",
        "const",
        "const",
        "*\nskip_remains_mb (struct dfa *d, unsigned char const *p,\n                 unsigned char const *mbp, char const *end)",
        "*"
      ]
    },
    "dfaexec_main": {
      "start_point": [
        3080,
        0
      ],
      "end_point": [
        3258,
        1
      ],
      "content": "static inline char *\ndfaexec_main (struct dfa *d, char const *begin, char *end, bool allow_nl,\n              size_t *count, bool multibyte)\n{\n  if (MAX_TRCOUNT <= d->sindex)\n    {\n      for (state_num s = d->min_trcount; s < d->sindex; s++)\n        {\n          free (d->states[s].elems.elems);\n          free (d->states[s].mbps.elems);\n        }\n      d->sindex = d->min_trcount;\n\n      if (d->trans)\n        {\n          for (state_num s = 0; s < d->tralloc; s++)\n            {\n              free (d->trans[s]);\n              free (d->fails[s]);\n              d->trans[s] = d->fails[s] = NULL;\n            }\n          d->trcount = 0;\n        }\n\n      if (d->localeinfo.multibyte && d->mb_trans)\n        {\n          for (state_num s = -1; s < d->tralloc; s++)\n            {\n              free (d->mb_trans[s]);\n              d->mb_trans[s] = NULL;\n            }\n          for (state_num s = 0; s < d->min_trcount; s++)\n            d->states[s].mb_trindex = -1;\n          d->mb_trcount = 0;\n        }\n    }\n\n  if (!d->tralloc)\n    realloc_trans_if_necessary (d);\n\n  /* Current state.  */\n  state_num s = 0, s1 = 0;\n\n  /* Current input character.  */\n  unsigned char const *p = (unsigned char const *) begin;\n  unsigned char const *mbp = p;\n\n  /* Copy of d->trans so it can be optimized into a register.  */\n  state_num **trans = d->trans;\n  unsigned char eol = d->syntax.eolbyte;  /* Likewise for eolbyte.  */\n  unsigned char saved_end = *(unsigned char *) end;\n  *end = eol;\n\n  if (multibyte)\n    {\n      memset (&d->mbs, 0, sizeof d->mbs);\n      if (d->mb_follows.alloc == 0)\n        alloc_position_set (&d->mb_follows, d->nleaves);\n    }\n\n  size_t nlcount = 0;\n  for (;;)\n    {\n      state_num *t;\n      while ((t = trans[s]) != NULL)\n        {\n          if (s < d->min_trcount)\n            {\n              if (!multibyte || d->states[s].mbps.nelem == 0)\n                {\n                  while (t[*p] == s)\n                    p++;\n                }\n              if (multibyte)\n                p = mbp = skip_remains_mb (d, p, mbp, end);\n            }\n\n          if (multibyte)\n            {\n              s1 = s;\n\n              if (d->states[s].mbps.nelem == 0\n                  || d->localeinfo.sbctowc[*p] != WEOF || (char *) p >= end)\n                {\n                  /* If an input character does not match ANYCHAR, do it\n                     like a single-byte character.  */\n                  s = t[*p++];\n                }\n              else\n                {\n                  s = transit_state (d, s, &p, (unsigned char *) end);\n                  mbp = p;\n                  trans = d->trans;\n                }\n            }\n          else\n            {\n              s1 = t[*p++];\n              t = trans[s1];\n              if (! t)\n                {\n                  state_num tmp = s;\n                  s = s1;\n                  s1 = tmp;     /* swap */\n                  break;\n                }\n              if (s < d->min_trcount)\n                {\n                  while (t[*p] == s1)\n                    p++;\n                }\n              s = t[*p++];\n            }\n        }\n\n      if (s < 0)\n        {\n          if (s == -2)\n            {\n              s = build_state (s1, d, p[-1]);\n              trans = d->trans;\n            }\n          else if ((char *) p <= end && p[-1] == eol && 0 <= d->newlines[s1])\n            {\n              /* The previous character was a newline.  Count it, and skip\n                 checking of multibyte character boundary until here.  */\n              nlcount++;\n              mbp = p;\n\n              s = (allow_nl ? d->newlines[s1]\n                   : d->syntax.sbit[eol] == CTX_NEWLINE ? 0\n                   : d->syntax.sbit[eol] == CTX_LETTER ? d->min_trcount - 1\n                   : d->initstate_notbol);\n            }\n          else\n            {\n              p = NULL;\n              goto done;\n            }\n        }\n      else if (d->fails[s])\n        {\n          if ((d->success[s] & d->syntax.sbit[*p])\n              || ((char *) p == end\n                  && accepts_in_context (d->states[s].context, CTX_NEWLINE, s,\n                                         d)))\n            goto done;\n\n          if (multibyte && s < d->min_trcount)\n            p = mbp = skip_remains_mb (d, p, mbp, end);\n\n          s1 = s;\n          if (!multibyte || d->states[s].mbps.nelem == 0\n              || d->localeinfo.sbctowc[*p] != WEOF || (char *) p >= end)\n            {\n              /* If a input character does not match ANYCHAR, do it\n                 like a single-byte character.  */\n              s = d->fails[s][*p++];\n            }\n          else\n            {\n              s = transit_state (d, s, &p, (unsigned char *) end);\n              mbp = p;\n              trans = d->trans;\n            }\n        }\n      else\n        {\n          build_state (s, d, p[0]);\n          trans = d->trans;\n        }\n    }\n\n done:\n  if (count)\n    *count += nlcount;\n  *end = saved_end;\n  return (char *) p;\n}",
      "lines": 179,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "char",
        "*\ndfaexec_main (struct dfa *d, char const *begin, char *end, bool allow_nl,\n              size_t *count, bool multibyte)",
        "*"
      ]
    },
    "dfaexec_mb": {
      "start_point": [
        3263,
        0
      ],
      "end_point": [
        3268,
        1
      ],
      "content": "static char *\ndfaexec_mb (struct dfa *d, char const *begin, char *end,\n            bool allow_nl, size_t *count, bool *backref)\n{\n  return dfaexec_main (d, begin, end, allow_nl, count, true);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "char",
        "*\ndfaexec_mb (struct dfa *d, char const *begin, char *end,\n            bool allow_nl, size_t *count, bool *backref)",
        "*"
      ]
    },
    "dfaexec_sb": {
      "start_point": [
        3270,
        0
      ],
      "end_point": [
        3275,
        1
      ],
      "content": "static char *\ndfaexec_sb (struct dfa *d, char const *begin, char *end,\n            bool allow_nl, size_t *count, bool *backref)\n{\n  return dfaexec_main (d, begin, end, allow_nl, count, false);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "char",
        "*\ndfaexec_sb (struct dfa *d, char const *begin, char *end,\n            bool allow_nl, size_t *count, bool *backref)",
        "*"
      ]
    },
    "dfaexec_noop": {
      "start_point": [
        3279,
        0
      ],
      "end_point": [
        3285,
        1
      ],
      "content": "static char *\ndfaexec_noop (struct dfa *d, char const *begin, char *end,\n              bool allow_nl, size_t *count, bool *backref)\n{\n  *backref = true;\n  return (char *) begin;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "char",
        "*\ndfaexec_noop (struct dfa *d, char const *begin, char *end,\n              bool allow_nl, size_t *count, bool *backref)",
        "*"
      ]
    },
    "dfaexec": {
      "start_point": [
        3291,
        0
      ],
      "end_point": [
        3296,
        1
      ],
      "content": "char *\ndfaexec (struct dfa *d, char const *begin, char *end,\n         bool allow_nl, size_t *count, bool *backref)\n{\n  return d->dfaexec (d, begin, end, allow_nl, count, backref);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "char",
        "*\ndfaexec (struct dfa *d, char const *begin, char *end,\n         bool allow_nl, size_t *count, bool *backref)",
        "*"
      ]
    },
    "dfasuperset": {
      "start_point": [
        3298,
        0
      ],
      "end_point": [
        3302,
        1
      ],
      "content": "struct dfa *\ndfasuperset (struct dfa const *d)\n{\n  return d->superset;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "struct dfa",
        "struct",
        "dfa",
        "*\ndfasuperset (struct dfa const *d)",
        "*"
      ]
    },
    "dfaisfast": {
      "start_point": [
        3304,
        0
      ],
      "end_point": [
        3308,
        1
      ],
      "content": "bool\ndfaisfast (struct dfa const *d)\n{\n  return d->fast;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "bool"
      ]
    },
    "free_mbdata": {
      "start_point": [
        3310,
        0
      ],
      "end_point": [
        3324,
        1
      ],
      "content": "static void\nfree_mbdata (struct dfa *d)\n{\n  free (d->multibyte_prop);\n  free (d->lex.brack.chars);\n  free (d->mb_follows.elems);\n\n  if (d->mb_trans)\n    {\n      state_num s;\n      for (s = -1; s < d->tralloc; s++)\n        free (d->mb_trans[s]);\n      free (d->mb_trans - 2);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dfa_supported": {
      "start_point": [
        3327,
        0
      ],
      "end_point": [
        3347,
        1
      ],
      "content": "static bool _GL_ATTRIBUTE_PURE\ndfa_supported (struct dfa const *d)\n{\n  for (size_t i = 0; i < d->tindex; i++)\n    {\n      switch (d->tokens[i])\n        {\n        case BEGWORD:\n        case ENDWORD:\n        case LIMWORD:\n        case NOTLIMWORD:\n          if (!d->localeinfo.multibyte)\n            continue;\n          FALLTHROUGH;\n        case BACKREF:\n        case MBCSET:\n          return false;\n        }\n    }\n  return true;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "dfaoptimize": {
      "start_point": [
        3349,
        0
      ],
      "end_point": [
        3386,
        1
      ],
      "content": "static void\ndfaoptimize (struct dfa *d)\n{\n  if (!d->localeinfo.using_utf8)\n    return;\n\n  bool have_backref = false;\n  for (size_t i = 0; i < d->tindex; ++i)\n    {\n      switch (d->tokens[i])\n        {\n        case ANYCHAR:\n          /* Lowered.  */\n          abort ();\n        case BACKREF:\n          have_backref = true;\n          break;\n        case MBCSET:\n          /* Requires multi-byte algorithm.  */\n          return;\n        default:\n          break;\n        }\n    }\n\n  if (!have_backref && d->superset)\n    {\n      /* The superset DFA is not likely to be much faster, so remove it.  */\n      dfafree (d->superset);\n      free (d->superset);\n      d->superset = NULL;\n    }\n\n  free_mbdata (d);\n  d->localeinfo.multibyte = false;\n  d->dfaexec = dfaexec_sb;\n  d->fast = true;\n}",
      "lines": 38,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dfassbuild": {
      "start_point": [
        3388,
        0
      ],
      "end_point": [
        3467,
        1
      ],
      "content": "static void\ndfassbuild (struct dfa *d)\n{\n  struct dfa *sup = dfaalloc ();\n\n  *sup = *d;\n  sup->localeinfo.multibyte = false;\n  sup->dfaexec = dfaexec_sb;\n  sup->multibyte_prop = NULL;\n  sup->superset = NULL;\n  sup->states = NULL;\n  sup->sindex = 0;\n  sup->follows = NULL;\n  sup->tralloc = 0;\n  sup->trans = NULL;\n  sup->fails = NULL;\n  sup->success = NULL;\n  sup->newlines = NULL;\n\n  sup->charclasses = xnmalloc (sup->calloc, sizeof *sup->charclasses);\n  if (d->cindex)\n    {\n      memcpy (sup->charclasses, d->charclasses,\n              d->cindex * sizeof *sup->charclasses);\n    }\n\n  sup->tokens = xnmalloc (d->tindex, 2 * sizeof *sup->tokens);\n  sup->talloc = d->tindex * 2;\n\n  bool have_achar = false;\n  bool have_nchar = false;\n  size_t j;\n  for (size_t i = j = 0; i < d->tindex; i++)\n    {\n      switch (d->tokens[i])\n        {\n        case ANYCHAR:\n        case MBCSET:\n        case BACKREF:\n          {\n            charclass ccl;\n            fillset (&ccl);\n            sup->tokens[j++] = CSET + charclass_index (sup, &ccl);\n            sup->tokens[j++] = STAR;\n            if (d->tokens[i + 1] == QMARK || d->tokens[i + 1] == STAR\n                || d->tokens[i + 1] == PLUS)\n              i++;\n            have_achar = true;\n          }\n          break;\n        case BEGWORD:\n        case ENDWORD:\n        case LIMWORD:\n        case NOTLIMWORD:\n          if (d->localeinfo.multibyte)\n            {\n              /* These constraints aren't supported in a multibyte locale.\n                 Ignore them in the superset DFA.  */\n              sup->tokens[j++] = EMPTY;\n              break;\n            }\n          FALLTHROUGH;\n        default:\n          sup->tokens[j++] = d->tokens[i];\n          if ((0 <= d->tokens[i] && d->tokens[i] < NOTCHAR)\n              || d->tokens[i] >= CSET)\n            have_nchar = true;\n          break;\n        }\n    }\n  sup->tindex = j;\n\n  if (have_nchar && (have_achar || d->localeinfo.multibyte))\n    d->superset = sup;\n  else\n    {\n      dfafree (sup);\n      free (sup);\n    }\n}",
      "lines": 80,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dfacomp": {
      "start_point": [
        3470,
        0
      ],
      "end_point": [
        3491,
        1
      ],
      "content": "void\ndfacomp (char const *s, size_t len, struct dfa *d, bool searchflag)\n{\n  dfaparse (s, len, d);\n  dfassbuild (d);\n\n  if (dfa_supported (d))\n    {\n      dfaoptimize (d);\n      dfaanalyze (d, searchflag);\n    }\n  else\n    {\n      d->dfaexec = dfaexec_noop;\n    }\n\n  if (d->superset)\n    {\n      d->fast = true;\n      dfaanalyze (d->superset, searchflag);\n    }\n}",
      "lines": 22,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "dfafree": {
      "start_point": [
        3494,
        0
      ],
      "end_point": [
        3533,
        1
      ],
      "content": "void\ndfafree (struct dfa *d)\n{\n  free (d->charclasses);\n  free (d->tokens);\n\n  if (d->localeinfo.multibyte)\n    free_mbdata (d);\n\n  for (size_t i = 0; i < d->sindex; ++i)\n    {\n      free (d->states[i].elems.elems);\n      free (d->states[i].mbps.elems);\n    }\n  free (d->states);\n\n  if (d->follows)\n    {\n      for (size_t i = 0; i < d->tindex; ++i)\n        free (d->follows[i].elems);\n      free (d->follows);\n    }\n\n  if (d->trans)\n    {\n      for (size_t i = 0; i < d->tralloc; ++i)\n        {\n          free (d->trans[i]);\n          free (d->fails[i]);\n        }\n\n      free (d->trans - 2);\n      free (d->fails);\n      free (d->newlines);\n      free (d->success);\n    }\n\n  if (d->superset)\n    dfafree (d->superset);\n}",
      "lines": 40,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "icatalloc": {
      "start_point": [
        3617,
        0
      ],
      "end_point": [
        3627,
        1
      ],
      "content": "static char *\nicatalloc (char *old, char const *new)\n{\n  size_t newsize = strlen (new);\n  if (newsize == 0)\n    return old;\n  size_t oldsize = strlen (old);\n  char *result = xrealloc (old, oldsize + newsize + 1);\n  memcpy (result + oldsize, new, newsize + 1);\n  return result;\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nicatalloc (char *old, char const *new)",
        "*"
      ]
    },
    "freelist": {
      "start_point": [
        3629,
        0
      ],
      "end_point": [
        3634,
        1
      ],
      "content": "static void\nfreelist (char **cpp)\n{\n  while (*cpp)\n    free (*cpp++);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "enlist": {
      "start_point": [
        3636,
        0
      ],
      "end_point": [
        3666,
        1
      ],
      "content": "static char **\nenlist (char **cpp, char *new, size_t len)\n{\n  new = memcpy (xmalloc (len + 1), new, len);\n  new[len] = '\\0';\n  /* Is there already something in the list that's new (or longer)?  */\n  size_t i;\n  for (i = 0; cpp[i] != NULL; ++i)\n    if (strstr (cpp[i], new) != NULL)\n      {\n        free (new);\n        return cpp;\n      }\n  /* Eliminate any obsoleted strings.  */\n  for (size_t j = 0; cpp[j] != NULL; )\n    if (strstr (new, cpp[j]) == NULL)\n      ++j;\n    else\n      {\n        free (cpp[j]);\n        if (--i == j)\n          break;\n        cpp[j] = cpp[i];\n        cpp[i] = NULL;\n      }\n  /* Add the new string.  */\n  cpp = xnrealloc (cpp, i + 2, sizeof *cpp);\n  cpp[i] = new;\n  cpp[i + 1] = NULL;\n  return cpp;\n}",
      "lines": 31,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "char",
        "**\nenlist (char **cpp, char *new, size_t len)",
        "*",
        "*\nenlist (char **cpp, char *new, size_t len)",
        "*"
      ]
    },
    "comsubs": {
      "start_point": [
        3670,
        0
      ],
      "end_point": [
        3692,
        1
      ],
      "content": "static char **\ncomsubs (char *left, char const *right)\n{\n  char **cpp = xzalloc (sizeof *cpp);\n\n  for (char *lcp = left; *lcp != '\\0'; lcp++)\n    {\n      size_t len = 0;\n      char *rcp = strchr (right, *lcp);\n      while (rcp != NULL)\n        {\n          size_t i;\n          for (i = 1; lcp[i] != '\\0' && lcp[i] == rcp[i]; ++i)\n            continue;\n          if (i > len)\n            len = i;\n          rcp = strchr (rcp + 1, *lcp);\n        }\n      if (len != 0)\n        cpp = enlist (cpp, lcp, len);\n    }\n  return cpp;\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "char",
        "**\ncomsubs (char *left, char const *right)",
        "*",
        "*\ncomsubs (char *left, char const *right)",
        "*"
      ]
    },
    "addlists": {
      "start_point": [
        3694,
        0
      ],
      "end_point": [
        3700,
        1
      ],
      "content": "static char **\naddlists (char **old, char **new)\n{\n  for (; *new; new++)\n    old = enlist (old, *new, strlen (*new));\n  return old;\n}",
      "lines": 7,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "char",
        "**\naddlists (char **old, char **new)",
        "*",
        "*\naddlists (char **old, char **new)",
        "*"
      ]
    },
    "inboth": {
      "start_point": [
        3704,
        0
      ],
      "end_point": [
        3720,
        1
      ],
      "content": "static char **\ninboth (char **left, char **right)\n{\n  char **both = xzalloc (sizeof *both);\n\n  for (size_t lnum = 0; left[lnum] != NULL; ++lnum)\n    {\n      for (size_t rnum = 0; right[rnum] != NULL; ++rnum)\n        {\n          char **temp = comsubs (left[lnum], right[rnum]);\n          both = addlists (both, temp);\n          freelist (temp);\n          free (temp);\n        }\n    }\n  return both;\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "char",
        "**\ninboth (char **left, char **right)",
        "*",
        "*\ninboth (char **left, char **right)",
        "*"
      ]
    },
    "allocmust": {
      "start_point": [
        3735,
        0
      ],
      "end_point": [
        3747,
        1
      ],
      "content": "static must *\nallocmust (must *mp, size_t size)\n{\n  must *new_mp = xmalloc (sizeof *new_mp);\n  new_mp->in = xzalloc (sizeof *new_mp->in);\n  new_mp->left = xzalloc (size);\n  new_mp->right = xzalloc (size);\n  new_mp->is = xzalloc (size);\n  new_mp->begline = false;\n  new_mp->endline = false;\n  new_mp->prev = mp;\n  return new_mp;\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "must",
        "*\nallocmust (must *mp, size_t size)",
        "*"
      ]
    },
    "resetmust": {
      "start_point": [
        3749,
        0
      ],
      "end_point": [
        3757,
        1
      ],
      "content": "static void\nresetmust (must *mp)\n{\n  freelist (mp->in);\n  mp->in[0] = NULL;\n  mp->left[0] = mp->right[0] = mp->is[0] = '\\0';\n  mp->begline = false;\n  mp->endline = false;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "freemust": {
      "start_point": [
        3759,
        0
      ],
      "end_point": [
        3768,
        1
      ],
      "content": "static void\nfreemust (must *mp)\n{\n  freelist (mp->in);\n  free (mp->in);\n  free (mp->left);\n  free (mp->right);\n  free (mp->is);\n  free (mp);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dfamust": {
      "start_point": [
        3770,
        0
      ],
      "end_point": [
        4005,
        1
      ],
      "content": "struct dfamust *\ndfamust (struct dfa const *d)\n{\n  must *mp = NULL;\n  char const *result = \"\";\n  bool exact = false;\n  bool begline = false;\n  bool endline = false;\n  bool need_begline = false;\n  bool need_endline = false;\n  bool case_fold_unibyte = d->syntax.case_fold && MB_CUR_MAX == 1;\n\n  for (size_t ri = 0; ri < d->tindex; ++ri)\n    {\n      token t = d->tokens[ri];\n      switch (t)\n        {\n        case BEGLINE:\n          mp = allocmust (mp, 2);\n          mp->begline = true;\n          need_begline = true;\n          break;\n        case ENDLINE:\n          mp = allocmust (mp, 2);\n          mp->endline = true;\n          need_endline = true;\n          break;\n        case LPAREN:\n        case RPAREN:\n          assert (!\"neither LPAREN nor RPAREN may appear here\");\n\n        case EMPTY:\n        case BEGWORD:\n        case ENDWORD:\n        case LIMWORD:\n        case NOTLIMWORD:\n        case BACKREF:\n        case ANYCHAR:\n        case MBCSET:\n          mp = allocmust (mp, 2);\n          break;\n\n        case STAR:\n        case QMARK:\n          resetmust (mp);\n          break;\n\n        case OR:\n          {\n            char **new;\n            must *rmp = mp;\n            must *lmp = mp = mp->prev;\n            size_t j, ln, rn, n;\n\n            /* Guaranteed to be.  Unlikely, but ...  */\n            if (streq (lmp->is, rmp->is))\n              {\n                lmp->begline &= rmp->begline;\n                lmp->endline &= rmp->endline;\n              }\n            else\n              {\n                lmp->is[0] = '\\0';\n                lmp->begline = false;\n                lmp->endline = false;\n              }\n            /* Left side--easy */\n            size_t i = 0;\n            while (lmp->left[i] != '\\0' && lmp->left[i] == rmp->left[i])\n              ++i;\n            lmp->left[i] = '\\0';\n            /* Right side */\n            ln = strlen (lmp->right);\n            rn = strlen (rmp->right);\n            n = ln;\n            if (n > rn)\n              n = rn;\n            for (i = 0; i < n; ++i)\n              if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])\n                break;\n            for (j = 0; j < i; ++j)\n              lmp->right[j] = lmp->right[(ln - i) + j];\n            lmp->right[j] = '\\0';\n            new = inboth (lmp->in, rmp->in);\n            freelist (lmp->in);\n            free (lmp->in);\n            lmp->in = new;\n            freemust (rmp);\n          }\n          break;\n\n        case PLUS:\n          mp->is[0] = '\\0';\n          break;\n\n        case END:\n          assert (!mp->prev);\n          for (size_t i = 0; mp->in[i] != NULL; ++i)\n            if (strlen (mp->in[i]) > strlen (result))\n              result = mp->in[i];\n          if (streq (result, mp->is))\n            {\n              if ((!need_begline || mp->begline) && (!need_endline\n                                                     || mp->endline))\n                exact = true;\n              begline = mp->begline;\n              endline = mp->endline;\n            }\n          goto done;\n\n        case CAT:\n          {\n            must *rmp = mp;\n            must *lmp = mp = mp->prev;\n\n            /* In.  Everything in left, plus everything in\n               right, plus concatenation of\n               left's right and right's left.  */\n            lmp->in = addlists (lmp->in, rmp->in);\n            if (lmp->right[0] != '\\0' && rmp->left[0] != '\\0')\n              {\n                size_t lrlen = strlen (lmp->right);\n                size_t rllen = strlen (rmp->left);\n                char *tp = xmalloc (lrlen + rllen);\n                memcpy (tp, lmp->right, lrlen);\n                memcpy (tp + lrlen, rmp->left, rllen);\n                lmp->in = enlist (lmp->in, tp, lrlen + rllen);\n                free (tp);\n              }\n            /* Left-hand */\n            if (lmp->is[0] != '\\0')\n              lmp->left = icatalloc (lmp->left, rmp->left);\n            /* Right-hand */\n            if (rmp->is[0] == '\\0')\n              lmp->right[0] = '\\0';\n            lmp->right = icatalloc (lmp->right, rmp->right);\n            /* Guaranteed to be */\n            if ((lmp->is[0] != '\\0' || lmp->begline)\n                && (rmp->is[0] != '\\0' || rmp->endline))\n              {\n                lmp->is = icatalloc (lmp->is, rmp->is);\n                lmp->endline = rmp->endline;\n              }\n            else\n              {\n                lmp->is[0] = '\\0';\n                lmp->begline = false;\n                lmp->endline = false;\n              }\n            freemust (rmp);\n          }\n          break;\n\n        case '\\0':\n          /* Not on *my* shift.  */\n          goto done;\n\n        default:\n          if (CSET <= t)\n            {\n              /* If T is a singleton, or if case-folding in a unibyte\n                 locale and T's members all case-fold to the same char,\n                 convert T to one of its members.  Otherwise, do\n                 nothing further with T.  */\n              charclass *ccl = &d->charclasses[t - CSET];\n              int j;\n              for (j = 0; j < NOTCHAR; j++)\n                if (tstbit (j, ccl))\n                  break;\n              if (! (j < NOTCHAR))\n                {\n                  mp = allocmust (mp, 2);\n                  break;\n                }\n              t = j;\n              while (++j < NOTCHAR)\n                if (tstbit (j, ccl)\n                    && ! (case_fold_unibyte\n                          && toupper (j) == toupper (t)))\n                  break;\n              if (j < NOTCHAR)\n                {\n                  mp = allocmust (mp, 2);\n                  break;\n                }\n            }\n\n          size_t rj = ri + 2;\n          if (d->tokens[ri + 1] == CAT)\n            {\n              for (; rj < d->tindex - 1; rj += 2)\n                {\n                  if ((rj != ri && (d->tokens[rj] <= 0\n                                    || NOTCHAR <= d->tokens[rj]))\n                      || d->tokens[rj + 1] != CAT)\n                    break;\n                }\n            }\n          mp = allocmust (mp, ((rj - ri) >> 1) + 1);\n          mp->is[0] = mp->left[0] = mp->right[0]\n            = case_fold_unibyte ? toupper (t) : t;\n\n          size_t i;\n          for (i = 1; ri + 2 < rj; i++)\n            {\n              ri += 2;\n              t = d->tokens[ri];\n              mp->is[i] = mp->left[i] = mp->right[i]\n                = case_fold_unibyte ? toupper (t) : t;\n            }\n          mp->is[i] = mp->left[i] = mp->right[i] = '\\0';\n          mp->in = enlist (mp->in, mp->is, i);\n          break;\n        }\n    }\n done:;\n\n  struct dfamust *dm = NULL;\n  if (*result)\n    {\n      dm = xmalloc (sizeof *dm);\n      dm->exact = exact;\n      dm->begline = begline;\n      dm->endline = endline;\n      dm->must = xstrdup (result);\n    }\n\n  while (mp)\n    {\n      must *prev = mp->prev;\n      freemust (mp);\n      mp = prev;\n    }\n\n  return dm;\n}",
      "lines": 236,
      "depth": 22,
      "decorators": [
        "struct dfamust",
        "struct",
        "dfamust",
        "*\ndfamust (struct dfa const *d)",
        "*"
      ]
    },
    "dfamustfree": {
      "start_point": [
        4007,
        0
      ],
      "end_point": [
        4012,
        1
      ],
      "content": "void\ndfamustfree (struct dfamust *dm)\n{\n  free (dm->must);\n  free (dm);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "dfaalloc": {
      "start_point": [
        4014,
        0
      ],
      "end_point": [
        4018,
        1
      ],
      "content": "struct dfa *\ndfaalloc (void)\n{\n  return xmalloc (sizeof (struct dfa));\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "struct dfa",
        "struct",
        "dfa",
        "*\ndfaalloc (void)",
        "*"
      ]
    },
    "dfasyntax": {
      "start_point": [
        4021,
        0
      ],
      "end_point": [
        4061,
        1
      ],
      "content": "void\ndfasyntax (struct dfa *dfa, struct localeinfo const *linfo,\n           reg_syntax_t bits, int dfaopts)\n{\n  memset (dfa, 0, offsetof (struct dfa, dfaexec));\n  dfa->dfaexec = linfo->multibyte ? dfaexec_mb : dfaexec_sb;\n  dfa->simple_locale = using_simple_locale (linfo->multibyte);\n  dfa->localeinfo = *linfo;\n\n  dfa->fast = !dfa->localeinfo.multibyte;\n\n  dfa->canychar = -1;\n  dfa->lex.cur_mb_len = 1;\n  dfa->syntax.syntax_bits_set = true;\n  dfa->syntax.case_fold = (bits & RE_ICASE) != 0;\n  dfa->syntax.anchor = (dfaopts & DFA_ANCHOR) != 0;\n  dfa->syntax.eolbyte = dfaopts & DFA_EOL_NUL ? '\\0' : '\\n';\n  dfa->syntax.syntax_bits = bits;\n\n  for (int i = CHAR_MIN; i <= CHAR_MAX; ++i)\n    {\n      unsigned char uc = i;\n\n      dfa->syntax.sbit[uc] = char_context (dfa, uc);\n      switch (dfa->syntax.sbit[uc])\n        {\n        case CTX_LETTER:\n          setbit (uc, &dfa->syntax.letters);\n          break;\n        case CTX_NEWLINE:\n          setbit (uc, &dfa->syntax.newline);\n          break;\n        }\n\n      /* POSIX requires that the five bytes in \"\\n\\r./\" (including the\n         terminating NUL) cannot occur inside a multibyte character.  */\n      dfa->syntax.never_trail[uc] = (dfa->localeinfo.using_utf8\n                                     ? (uc & 0xc0) != 0x80\n                                     : strchr (\"\\n\\r./\", uc) != NULL);\n    }\n}",
      "lines": 41,
      "depth": 14,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/dfa.h": {},
  "grep/grep-3.1/lib/dirent--.h": {},
  "grep/grep-3.1/lib/dirent-private.h": {},
  "grep/grep-3.1/lib/dirent-safer.h": {},
  "grep/grep-3.1/lib/dirent.in.h": {
    "dirfd": {
      "start_point": [
        171,
        0
      ],
      "end_point": [
        171,
        58
      ],
      "content": "static inline int (dirfd) (DIR *dp) { return dirfd (dp); }",
      "lines": 1,
      "depth": 6,
      "decorators": null
    }
  },
  "grep/grep-3.1/lib/dirfd.c": {
    "_gl_register_dirp_fd": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "int\n_gl_register_dirp_fd (int fd, DIR *dirp)\n{\n  struct dirp_fd_list *new_dirp_fd = malloc (sizeof *new_dirp_fd);\n  if (!new_dirp_fd)\n    return -1;\n\n  new_dirp_fd->dirp = dirp;\n  new_dirp_fd->fd = fd;\n  new_dirp_fd->next = dirp_fd_start;\n\n  dirp_fd_start = new_dirp_fd;\n\n  return 0;\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "_gl_unregister_dirp_fd": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "content": "void\n_gl_unregister_dirp_fd (int fd)\n{\n  struct dirp_fd_list *dirp_fd;\n  struct dirp_fd_list *dirp_fd_prev;\n\n  for (dirp_fd_prev = NULL, dirp_fd = dirp_fd_start; dirp_fd;\n       dirp_fd_prev = dirp_fd, dirp_fd = dirp_fd->next)\n    {\n      if (dirp_fd->fd == fd)\n        {\n          if (dirp_fd_prev)\n            dirp_fd_prev->next = dirp_fd->next;\n          else  /* dirp_fd == dirp_fd_start */\n            dirp_fd_start = dirp_fd_start->next;\n\n          close (fd);\n          free (dirp_fd);\n          break;\n        }\n    }\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "dirfd": {
      "start_point": [
        77,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "int\ndirfd (DIR *dir_p)\n{\n  int fd = DIR_TO_FD (dir_p);\n  if (fd == -1)\n#ifndef __KLIBC__\n    errno = ENOTSUP;\n#else\n    {\n      struct dirp_fd_list *dirp_fd;\n\n      for (dirp_fd = dirp_fd_start; dirp_fd; dirp_fd = dirp_fd->next)\n        if (dirp_fd->dirp == dir_p)\n          return dirp_fd->fd;\n\n      errno = EINVAL;\n    }\n#endif\n\n  return fd;\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/dirname-lgpl.c": {
    "dir_len": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "size_t\ndir_len (char const *file)\n{\n  size_t prefix_length = FILE_SYSTEM_PREFIX_LEN (file);\n  size_t length;\n\n  /* Advance prefix_length beyond important leading slashes.  */\n  prefix_length += (prefix_length != 0\n                    ? (FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE\n                       && ISSLASH (file[prefix_length]))\n                    : (ISSLASH (file[0])\n                       ? ((DOUBLE_SLASH_IS_DISTINCT_ROOT\n                           && ISSLASH (file[1]) && ! ISSLASH (file[2])\n                           ? 2 : 1))\n                       : 0));\n\n  /* Strip the basename and any redundant slashes before it.  */\n  for (length = last_component (file) - file;\n       prefix_length < length; length--)\n    if (! ISSLASH (file[length - 1]))\n      break;\n  return length;\n}",
      "lines": 23,
      "depth": 17,
      "decorators": [
        "size_t"
      ]
    },
    "mdir_name": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "content": "char *\nmdir_name (char const *file)\n{\n  size_t length = dir_len (file);\n  bool append_dot = (length == 0\n                     || (FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE\n                         && length == FILE_SYSTEM_PREFIX_LEN (file)\n                         && file[2] != '\\0' && ! ISSLASH (file[2])));\n  char *dir = malloc (length + append_dot + 1);\n  if (!dir)\n    return NULL;\n  memcpy (dir, file, length);\n  if (append_dot)\n    dir[length++] = '.';\n  dir[length] = '\\0';\n  return dir;\n}",
      "lines": 17,
      "depth": 14,
      "decorators": [
        "char",
        "*\nmdir_name (char const *file)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/dirname.h": {},
  "grep/grep-3.1/lib/dosname.h": {},
  "grep/grep-3.1/lib/dup-safer.c": {
    "dup_safer": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "int\ndup_safer (int fd)\n{\n  return fcntl (fd, F_DUPFD, STDERR_FILENO + 1);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/dup.c": {
    "dup_nothrow": [
      {
        "start_point": [
          31,
          0
        ],
        "end_point": [
          39,
          5
        ],
        "content": "static int\ndup_nothrow (int fd)\n{\n  int result;\n\n  TRY_MSVC_INVAL\n    {\n      result = dup (fd);\n    }",
        "lines": 9,
        "depth": 7,
        "decorators": [
          "static",
          "static",
          "int"
        ]
      },
      {
        "start_point": [
          55,
          0
        ],
        "end_point": [
          73,
          1
        ],
        "content": "static int\ndup_nothrow (int fd)\n{\n  int dupfd;\n  struct stat sbuf;\n\n  dupfd = dup (fd);\n  if (dupfd == -1 && errno == ENOTSUP \\\n      && !fstat (fd, &sbuf) && S_ISDIR (sbuf.st_mode))\n    {\n      char path[_MAX_PATH];\n\n      /* Get a path from fd */\n      if (!__libc_Back_ioFHToPath (fd, path, sizeof (path)))\n        dupfd = open (path, O_RDONLY);\n    }\n\n  return dupfd;\n}",
        "lines": 19,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "int"
        ]
      }
    ],
    "rpl_dup": {
      "start_point": [
        78,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "int\nrpl_dup (int fd)\n{\n  int result = dup_nothrow (fd);\n#if REPLACE_FCHDIR\n  if (result >= 0)\n    result = _gl_register_dup (fd, result);\n#endif\n  return result;\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/dup2.c": {
    "dup2_nothrow": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        57,
        5
      ],
      "content": "static int\ndup2_nothrow (int fd, int desired_fd)\n{\n  int result;\n\n  TRY_MSVC_INVAL\n    {\n      result = dup2 (fd, desired_fd);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "ms_windows_dup2": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "static int\nms_windows_dup2 (int fd, int desired_fd)\n{\n  int result;\n\n  /* If fd is closed, mingw hangs on dup2 (fd, fd).  If fd is open,\n     dup2 (fd, fd) returns 0, but all further attempts to use fd in\n     future dup2 calls will hang.  */\n  if (fd == desired_fd)\n    {\n      if ((HANDLE) _get_osfhandle (fd) == INVALID_HANDLE_VALUE)\n        {\n          errno = EBADF;\n          return -1;\n        }\n      return fd;\n    }\n\n  /* Wine 1.0.1 return 0 when desired_fd is negative but not -1:\n     http://bugs.winehq.org/show_bug.cgi?id=21289 */\n  if (desired_fd < 0)\n    {\n      errno = EBADF;\n      return -1;\n    }\n\n  result = dup2_nothrow (fd, desired_fd);\n\n  if (result == 0)\n    result = desired_fd;\n\n  return result;\n}",
      "lines": 33,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "klibc_dup2dirfd": {
      "start_point": [
        111,
        0
      ],
      "end_point": [
        137,
        1
      ],
      "content": "static int\nklibc_dup2dirfd (int fd, int desired_fd)\n{\n  int tempfd;\n  int dupfd;\n\n  tempfd = open (\"NUL\", O_RDONLY);\n  if (tempfd == -1)\n    return -1;\n\n  if (tempfd == desired_fd)\n    {\n      close (tempfd);\n\n      char path[_MAX_PATH];\n      if (__libc_Back_ioFHToPath (fd, path, sizeof (path)))\n        return -1;\n\n      return open(path, O_RDONLY);\n    }\n\n  dupfd = klibc_dup2dirfd (fd, desired_fd);\n\n  close (tempfd);\n\n  return dupfd;\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "klibc_dup2": {
      "start_point": [
        139,
        0
      ],
      "end_point": [
        155,
        1
      ],
      "content": "static int\nklibc_dup2 (int fd, int desired_fd)\n{\n  int dupfd;\n  struct stat sbuf;\n\n  dupfd = dup2 (fd, desired_fd);\n  if (dupfd == -1 && errno == ENOTSUP \\\n      && !fstat (fd, &sbuf) && S_ISDIR (sbuf.st_mode))\n    {\n      close (desired_fd);\n\n      return klibc_dup2dirfd (fd, desired_fd);\n    }\n\n  return dupfd;\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_dup2": {
      "start_point": [
        160,
        0
      ],
      "end_point": [
        190,
        1
      ],
      "content": "int\nrpl_dup2 (int fd, int desired_fd)\n{\n  int result;\n\n# ifdef F_GETFL\n  /* On Linux kernels 2.6.26-2.6.29, dup2 (fd, fd) returns -EBADF.\n     On Cygwin 1.5.x, dup2 (1, 1) returns 0.\n     On Cygwin 1.7.17, dup2 (1, -1) dumps core.\n     On Cygwin 1.7.25, dup2 (1, 256) can dump core.\n     On Haiku, dup2 (fd, fd) mistakenly clears FD_CLOEXEC.  */\n#  if HAVE_SETDTABLESIZE\n  setdtablesize (desired_fd + 1);\n#  endif\n  if (desired_fd < 0)\n    fd = desired_fd;\n  if (fd == desired_fd)\n    return fcntl (fd, F_GETFL) == -1 ? -1 : fd;\n# endif\n\n  result = dup2 (fd, desired_fd);\n\n  /* Correct an errno value on FreeBSD 6.1 and Cygwin 1.5.x.  */\n  if (result == -1 && errno == EMFILE)\n    errno = EBADF;\n# if REPLACE_FCHDIR\n  if (fd != desired_fd && result != -1)\n    result = _gl_register_dup (fd, result);\n# endif\n  return result;\n}",
      "lines": 31,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "dupfd": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "content": "static int\ndupfd (int fd, int desired_fd)\n{\n  int duplicated_fd = dup (fd);\n  if (duplicated_fd < 0 || duplicated_fd == desired_fd)\n    return duplicated_fd;\n  else\n    {\n      int r = dupfd (fd, desired_fd);\n      int e = errno;\n      close (duplicated_fd);\n      errno = e;\n      return r;\n    }\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "dup2": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        233,
        1
      ],
      "content": "int\ndup2 (int fd, int desired_fd)\n{\n  int result = fcntl (fd, F_GETFL) < 0 ? -1 : fd;\n  if (result == -1 || fd == desired_fd)\n    return result;\n  close (desired_fd);\n# ifdef F_DUPFD\n  result = fcntl (fd, F_DUPFD, desired_fd);\n#  if REPLACE_FCHDIR\n  if (0 <= result)\n    result = _gl_register_dup (fd, result);\n#  endif\n# else\n  result = dupfd (fd, desired_fd);\n# endif\n  if (result == -1 && (errno == EMFILE || errno == EINVAL))\n    errno = EBADF;\n  return result;\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/errno.in.h": {},
  "grep/grep-3.1/lib/error.c": {
    "is_open": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "content": "static int\nis_open (int fd)\n{\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* On native Windows: The initial state of unassigned standard file\n     descriptors is that they are open but point to an INVALID_HANDLE_VALUE.\n     There is no fcntl, and the gnulib replacement fcntl does not support\n     F_GETFL.  */\n  return (HANDLE) _get_osfhandle (fd) != INVALID_HANDLE_VALUE;\n# else\n#  ifndef F_GETFL\n#   error Please port fcntl to your platform\n#  endif\n  return 0 <= fcntl (fd, F_GETFL);\n# endif\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "flush_stdout": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        171,
        1
      ],
      "content": "static void\nflush_stdout (void)\n{\n#if !_LIBC\n  int stdout_fd;\n\n# if GNULIB_FREOPEN_SAFER\n  /* Use of gnulib's freopen-safer module normally ensures that\n       fileno (stdout) == 1\n     whenever stdout is open.  */\n  stdout_fd = STDOUT_FILENO;\n# else\n  /* POSIX states that fileno (stdout) after fclose is unspecified.  But in\n     practice it is not a problem, because stdout is statically allocated and\n     the fd of a FILE stream is stored as a field in its allocated memory.  */\n  stdout_fd = fileno (stdout);\n# endif\n  /* POSIX states that fflush (stdout) after fclose is unspecified; it\n     is safe in glibc, but not on all other platforms.  fflush (NULL)\n     is always defined, but too draconian.  */\n  if (0 <= stdout_fd && is_open (stdout_fd))\n#endif\n    fflush (stdout);\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_errno_message": {
      "start_point": [
        173,
        0
      ],
      "end_point": [
        202,
        1
      ],
      "content": "static void\nprint_errno_message (int errnum)\n{\n  char const *s;\n\n#if _LIBC || GNULIB_STRERROR_R_POSIX || defined HAVE_STRERROR_R\n  char errbuf[1024];\n# if _LIBC || (!GNULIB_STRERROR_R_POSIX && STRERROR_R_CHAR_P)\n  s = __strerror_r (errnum, errbuf, sizeof errbuf);\n# else\n  if (__strerror_r (errnum, errbuf, sizeof errbuf) == 0)\n    s = errbuf;\n  else\n    s = 0;\n# endif\n#else\n  s = strerror (errnum);\n#endif\n\n#if !_LIBC\n  if (! s)\n    s = _(\"Unknown system error\");\n#endif\n\n#if _LIBC\n  __fxprintf (NULL, \": %s\", s);\n#else\n  fprintf (stderr, \": %s\", s);\n#endif\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "error_tail": {
      "start_point": [
        205,
        42
      ],
      "end_point": [
        286,
        1
      ],
      "content": "char *message, va_list args)\n{\n#if _LIBC\n  if (_IO_fwide (stderr, 0) > 0)\n    {\n      size_t len = strlen (message) + 1;\n      wchar_t *wmessage = NULL;\n      mbstate_t st;\n      size_t res;\n      const char *tmp;\n      bool use_malloc = false;\n\n      while (1)\n        {\n          if (__libc_use_alloca (len * sizeof (wchar_t)))\n            wmessage = (wchar_t *) alloca (len * sizeof (wchar_t));\n          else\n            {\n              if (!use_malloc)\n                wmessage = NULL;\n\n              wchar_t *p = (wchar_t *) realloc (wmessage,\n                                                len * sizeof (wchar_t));\n              if (p == NULL)\n                {\n                  free (wmessage);\n                  fputws_unlocked (L\"out of memory\\n\", stderr);\n                  return;\n                }\n              wmessage = p;\n              use_malloc = true;\n            }\n\n          memset (&st, '\\0', sizeof (st));\n          tmp = message;\n\n          res = mbsrtowcs (wmessage, &tmp, len, &st);\n          if (res != len)\n            break;\n\n          if (__builtin_expect (len >= SIZE_MAX / sizeof (wchar_t) / 2, 0))\n            {\n              /* This really should not happen if everything is fine.  */\n              res = (size_t) -1;\n              break;\n            }\n\n          len *= 2;\n        }\n\n      if (res == (size_t) -1)\n        {\n          /* The string cannot be converted.  */\n          if (use_malloc)\n            {\n              free (wmessage);\n              use_malloc = false;\n            }\n          wmessage = (wchar_t *) L\"???\";\n        }\n\n      __vfwprintf (stderr, wmessage, args);\n\n      if (use_malloc)\n        free (wmessage);\n    }\n  else\n#endif\n    vfprintf (stderr, message, args);\n\n  ++error_message_count;\n  if (errnum)\n    print_errno_message (errnum);\n#if _LIBC\n  __fxprintf (NULL, \"\\n\");\n#else\n  putc ('\\n', stderr);\n#endif\n  fflush (stderr);\n  if (status)\n    exit (status);\n}",
      "lines": 82,
      "depth": 18,
      "decorators": null
    },
    "error": {
      "start_point": [
        293,
        0
      ],
      "end_point": [
        331,
        1
      ],
      "content": "void\nerror (int status, int errnum, const char *message, ...)\n{\n  va_list args;\n\n#if defined _LIBC && defined __libc_ptf_call\n  /* We do not want this call to be cut short by a thread\n     cancellation.  Therefore disable cancellation for now.  */\n  int state = PTHREAD_CANCEL_ENABLE;\n  __libc_ptf_call (pthread_setcancelstate, (PTHREAD_CANCEL_DISABLE, &state),\n                   0);\n#endif\n\n  flush_stdout ();\n#ifdef _LIBC\n  _IO_flockfile (stderr);\n#endif\n  if (error_print_progname)\n    (*error_print_progname) ();\n  else\n    {\n#if _LIBC\n      __fxprintf (NULL, \"%s: \", program_name);\n#else\n      fprintf (stderr, \"%s: \", program_name);\n#endif\n    }\n\n  va_start (args, message);\n  error_tail (status, errnum, message, args);\n  va_end (args);\n\n#ifdef _LIBC\n  _IO_funlockfile (stderr);\n# ifdef __libc_ptf_call\n  __libc_ptf_call (pthread_setcancelstate, (state, NULL), 0);\n# endif\n#endif\n}",
      "lines": 39,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "error_at_line": {
      "start_point": [
        337,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "content": "void\nerror_at_line (int status, int errnum, const char *file_name,\n               unsigned int line_number, const char *message, ...)\n{\n  va_list args;\n\n  if (error_one_per_line)\n    {\n      static const char *old_file_name;\n      static unsigned int old_line_number;\n\n      if (old_line_number == line_number\n          && (file_name == old_file_name\n              || (old_file_name != NULL\n                  && file_name != NULL\n                  && strcmp (old_file_name, file_name) == 0)))\n\n        /* Simply return and print nothing.  */\n        return;\n\n      old_file_name = file_name;\n      old_line_number = line_number;\n    }\n\n#if defined _LIBC && defined __libc_ptf_call\n  /* We do not want this call to be cut short by a thread\n     cancellation.  Therefore disable cancellation for now.  */\n  int state = PTHREAD_CANCEL_ENABLE;\n  __libc_ptf_call (pthread_setcancelstate, (PTHREAD_CANCEL_DISABLE, &state),\n                   0);\n#endif\n\n  flush_stdout ();\n#ifdef _LIBC\n  _IO_flockfile (stderr);\n#endif\n  if (error_print_progname)\n    (*error_print_progname) ();\n  else\n    {\n#if _LIBC\n      __fxprintf (NULL, \"%s:\", program_name);\n#else\n      fprintf (stderr, \"%s:\", program_name);\n#endif\n    }\n\n#if _LIBC\n  __fxprintf (NULL, file_name != NULL ? \"%s:%u: \" : \" \",\n              file_name, line_number);\n#else\n  fprintf (stderr, file_name != NULL ? \"%s:%u: \" : \" \",\n           file_name, line_number);\n#endif\n\n  va_start (args, message);\n  error_tail (status, errnum, message, args);\n  va_end (args);\n\n#ifdef _LIBC\n  _IO_funlockfile (stderr);\n# ifdef __libc_ptf_call\n  __libc_ptf_call (pthread_setcancelstate, (state, NULL), 0);\n# endif\n#endif\n}",
      "lines": 66,
      "depth": 15,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/error.h": {},
  "grep/grep-3.1/lib/exclude.c": {
    "exclude_add_pattern_buffer": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        137,
        1
      ],
      "content": "void\nexclude_add_pattern_buffer (struct exclude *ex, char *buf)\n{\n  struct pattern_buffer *pbuf = xmalloc (sizeof *pbuf);\n  pbuf->base = buf;\n  pbuf->next = ex->patbuf;\n  ex->patbuf = pbuf;\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "fnmatch_pattern_has_wildcards": {
      "start_point": [
        141,
        0
      ],
      "end_point": [
        176,
        1
      ],
      "content": "bool\nfnmatch_pattern_has_wildcards (const char *str, int options)\n{\n  while (1)\n    {\n      switch (*str++)\n        {\n\tcase '.':\n\tcase '{':\n\tcase '}':\n\tcase '(':\n\tcase ')':\n\t  if (options & EXCLUDE_REGEX)\n\t    return true;\n\t  break;\n\n        case '\\\\':\n\t  if (options & EXCLUDE_REGEX)\n\t    continue;\n\t  else\n\t    str += ! (options & FNM_NOESCAPE) && *str;\n          break;\n\n        case '+': case '@': case '!':\n          if (options & FNM_EXTMATCH && *str == '(')\n            return true;\n          break;\n\n        case '?': case '*': case '[':\n          return true;\n\n        case '\\0':\n          return false;\n        }\n    }\n}",
      "lines": 36,
      "depth": 15,
      "decorators": [
        "bool"
      ]
    },
    "unescape_pattern": {
      "start_point": [
        178,
        0
      ],
      "end_point": [
        185,
        1
      ],
      "content": "static void\nunescape_pattern (char *str)\n{\n  char const *q = str;\n  do\n    q += *q == '\\\\' && q[1];\n  while ((*str++ = *q++));\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "new_exclude": {
      "start_point": [
        189,
        0
      ],
      "end_point": [
        193,
        1
      ],
      "content": "struct exclude *\nnew_exclude (void)\n{\n  return xzalloc (sizeof *new_exclude ());\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "struct exclude",
        "struct",
        "exclude",
        "*\nnew_exclude (void)",
        "*"
      ]
    },
    "string_hasher": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        201,
        1
      ],
      "content": "static size_t\nstring_hasher (void const *data, size_t n_buckets)\n{\n  char const *p = data;\n  return hash_string (p, n_buckets);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "string_hasher_ci": {
      "start_point": [
        204,
        0
      ],
      "end_point": [
        225,
        1
      ],
      "content": "static size_t\nstring_hasher_ci (void const *data, size_t n_buckets)\n{\n  char const *p = data;\n  mbui_iterator_t iter;\n  size_t value = 0;\n\n  for (mbui_init (iter, p); mbui_avail (iter); mbui_advance (iter))\n    {\n      mbchar_t m = mbui_cur (iter);\n      wchar_t wc;\n\n      if (m.wc_valid)\n        wc = towlower (m.wc);\n      else\n        wc = *m.ptr;\n\n      value = (value * 31 + wc) % n_buckets;\n    }\n\n  return value;\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "string_compare": {
      "start_point": [
        228,
        0
      ],
      "end_point": [
        234,
        1
      ],
      "content": "static bool\nstring_compare (void const *data1, void const *data2)\n{\n  char const *p1 = data1;\n  char const *p2 = data2;\n  return strcmp (p1, p2) == 0;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "string_compare_ci": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "content": "static bool\nstring_compare_ci (void const *data1, void const *data2)\n{\n  char const *p1 = data1;\n  char const *p2 = data2;\n  return mbscasecmp (p1, p2) == 0;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "string_free": {
      "start_point": [
        245,
        0
      ],
      "end_point": [
        249,
        1
      ],
      "content": "static void\nstring_free (void *data)\n{\n  free (data);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "new_exclude_segment": {
      "start_point": [
        253,
        0
      ],
      "end_point": [
        277,
        1
      ],
      "content": "static void\nnew_exclude_segment (struct exclude *ex, enum exclude_type type, int options)\n{\n  struct exclude_segment *sp = xzalloc (sizeof (struct exclude_segment));\n  sp->type = type;\n  sp->options = options;\n  switch (type)\n    {\n    case exclude_pattern:\n      break;\n\n    case exclude_hash:\n      sp->v.table = hash_initialize (0, NULL,\n                                     (options & FNM_CASEFOLD) ?\n                                       string_hasher_ci\n                                       : string_hasher,\n                                     (options & FNM_CASEFOLD) ?\n                                       string_compare_ci\n                                       : string_compare,\n                                     string_free);\n      break;\n    }\n  sp->next = ex->head;\n  ex->head = sp;\n}",
      "lines": 25,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "free_exclude_segment": {
      "start_point": [
        280,
        0
      ],
      "end_point": [
        301,
        1
      ],
      "content": "static void\nfree_exclude_segment (struct exclude_segment *seg)\n{\n  size_t i;\n\n  switch (seg->type)\n    {\n    case exclude_pattern:\n      for (i = 0; i < seg->v.pat.exclude_count; i++)\n\t{\n\t  if (seg->v.pat.exclude[i].options & EXCLUDE_REGEX)\n\t    regfree (&seg->v.pat.exclude[i].v.re);\n\t}\n      free (seg->v.pat.exclude);\n      break;\n\n    case exclude_hash:\n      hash_free (seg->v.table);\n      break;\n    }\n  free (seg);\n}",
      "lines": 22,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "free_exclude": {
      "start_point": [
        304,
        0
      ],
      "end_point": [
        326,
        1
      ],
      "content": "void\nfree_exclude (struct exclude *ex)\n{\n  struct exclude_segment *seg;\n  struct pattern_buffer *pbuf;\n\n  for (seg = ex->head; seg; )\n    {\n      struct exclude_segment *next = seg->next;\n      free_exclude_segment (seg);\n      seg = next;\n    }\n\n  for (pbuf = ex->patbuf; pbuf; )\n    {\n      struct pattern_buffer *next = pbuf->next;\n      free (pbuf->base);\n      free (pbuf);\n      pbuf = next;\n    }\n\n  free (ex);\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "fnmatch_no_wildcards": {
      "start_point": [
        331,
        0
      ],
      "end_point": [
        374,
        1
      ],
      "content": "static int\nfnmatch_no_wildcards (char const *pattern, char const *f, int options)\n{\n  if (! (options & FNM_LEADING_DIR))\n    return ((options & FNM_CASEFOLD)\n            ? mbscasecmp (pattern, f)\n            : strcmp (pattern, f));\n  else if (! (options & FNM_CASEFOLD))\n    {\n      size_t patlen = strlen (pattern);\n      int r = strncmp (pattern, f, patlen);\n      if (! r)\n        {\n          r = f[patlen];\n          if (r == '/')\n            r = 0;\n        }\n      return r;\n    }\n  else\n    {\n      /* Walk through a copy of F, seeing whether P matches any prefix\n         of F.\n\n         FIXME: This is an O(N**2) algorithm; it should be O(N).\n         Also, the copy should not be necessary.  However, fixing this\n         will probably involve a change to the mbs* API.  */\n\n      char *fcopy = xstrdup (f);\n      char *p;\n      int r;\n      for (p = fcopy; ; *p++ = '/')\n        {\n          p = strchr (p, '/');\n          if (p)\n            *p = '\\0';\n          r = mbscasecmp (pattern, fcopy);\n          if (!p || r <= 0)\n            break;\n        }\n      free (fcopy);\n      return r;\n    }\n}",
      "lines": 44,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "exclude_fnmatch": {
      "start_point": [
        376,
        0
      ],
      "end_point": [
        392,
        1
      ],
      "content": "bool\nexclude_fnmatch (char const *pattern, char const *f, int options)\n{\n  int (*matcher) (char const *, char const *, int) =\n    (options & EXCLUDE_WILDCARDS\n     ? fnmatch\n     : fnmatch_no_wildcards);\n  bool matched = ((*matcher) (pattern, f, options) == 0);\n  char const *p;\n\n  if (! (options & EXCLUDE_ANCHORED))\n    for (p = f; *p && ! matched; p++)\n      if (*p == '/' && p[1] != '/')\n\tmatched = ((*matcher) (pattern, p + 1, options) == 0);\n\n  return matched;\n}",
      "lines": 17,
      "depth": 13,
      "decorators": [
        "bool"
      ]
    },
    "exclude_patopts": {
      "start_point": [
        394,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "content": "static bool\nexclude_patopts (struct patopts const *opts, char const *f)\n{\n  int options = opts->options;\n\n  return (options & EXCLUDE_REGEX)\n          ? regexec (&opts->v.re, f, 0, NULL, 0) == 0\n          : exclude_fnmatch (opts->v.pattern, f, options);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "file_pattern_matches": {
      "start_point": [
        406,
        0
      ],
      "end_point": [
        419,
        1
      ],
      "content": "static bool\nfile_pattern_matches (struct exclude_segment const *seg, char const *f)\n{\n  size_t exclude_count = seg->v.pat.exclude_count;\n  struct patopts const *exclude = seg->v.pat.exclude;\n  size_t i;\n\n  for (i = 0; i < exclude_count; i++)\n    {\n      if (exclude_patopts (exclude + i, f))\n        return true;\n    }\n  return false;\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "file_name_matches": {
      "start_point": [
        424,
        0
      ],
      "end_point": [
        464,
        1
      ],
      "content": "static bool\nfile_name_matches (struct exclude_segment const *seg, char const *f,\n                   char *buffer)\n{\n  int options = seg->options;\n  Hash_table *table = seg->v.table;\n\n  do\n    {\n      /* initialize the pattern */\n      strcpy (buffer, f);\n\n      while (1)\n        {\n          if (hash_lookup (table, buffer))\n            return true;\n          if (options & FNM_LEADING_DIR)\n            {\n              char *p = strrchr (buffer, '/');\n              if (p)\n                {\n                  *p = 0;\n                  continue;\n                }\n            }\n          break;\n        }\n\n      if (!(options & EXCLUDE_ANCHORED))\n        {\n          f = strchr (f, '/');\n          if (f)\n            f++;\n        }\n      else\n        break;\n    }\n  while (f);\n\n  return false;\n}",
      "lines": 41,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "excluded_file_name": {
      "start_point": [
        468,
        0
      ],
      "end_point": [
        512,
        1
      ],
      "content": "bool\nexcluded_file_name (struct exclude const *ex, char const *f)\n{\n  struct exclude_segment *seg;\n  bool invert = false;\n  char *filename = NULL;\n\n  /* If no patterns are given, the default is to include.  */\n  if (!ex->head)\n    return false;\n\n  /* Scan through the segments, reporting the status of the first match.\n     The segments are in reverse order, so this reports the status of\n     the last match in the original option list.  */\n  for (seg = ex->head; ; seg = seg->next)\n    {\n      if (seg->type == exclude_hash)\n        {\n          if (!filename)\n            filename = xmalloc (strlen (f) + 1);\n          if (file_name_matches (seg, f, filename))\n            break;\n        }\n      else\n        {\n          if (file_pattern_matches (seg, f))\n            break;\n        }\n\n      if (! seg->next)\n        {\n          /* If patterns are given but none match, the default is the\n             opposite of the last segment (i.e., the first in the\n             original option list).  For example, in the command\n             'grep -r --exclude=\"a*\" --include=\"*b\" pat dir', the\n             first option is --exclude so any file name matching\n             neither a* nor *b is included.  */\n          invert = true;\n          break;\n        }\n    }\n\n  free (filename);\n  return invert ^ ! (seg->options & EXCLUDE_INCLUDE);\n}",
      "lines": 45,
      "depth": 15,
      "decorators": [
        "bool"
      ]
    },
    "add_exclude": {
      "start_point": [
        516,
        0
      ],
      "end_point": [
        602,
        1
      ],
      "content": "void\nadd_exclude (struct exclude *ex, char const *pattern, int options)\n{\n  struct exclude_segment *seg;\n  struct exclude_pattern *pat;\n  struct patopts *patopts;\n\n  if ((options & (EXCLUDE_REGEX|EXCLUDE_WILDCARDS))\n      && fnmatch_pattern_has_wildcards (pattern, options))\n    {\n      if (! (ex->head && ex->head->type == exclude_pattern\n\t     && ((ex->head->options & EXCLUDE_INCLUDE)\n\t\t == (options & EXCLUDE_INCLUDE))))\n\tnew_exclude_segment (ex, exclude_pattern, options);\n\n      seg = ex->head;\n\n      pat = &seg->v.pat;\n      if (pat->exclude_count == pat->exclude_alloc)\n        pat->exclude = x2nrealloc (pat->exclude, &pat->exclude_alloc,\n                                   sizeof *pat->exclude);\n      patopts = &pat->exclude[pat->exclude_count++];\n\n      patopts->options = options;\n      if (options & EXCLUDE_REGEX)\n\t{\n\t  int rc;\n\t  int cflags = REG_NOSUB|REG_EXTENDED|\n\t               ((options & FNM_CASEFOLD) ? REG_ICASE : 0);\n\n\t  if (options & FNM_LEADING_DIR)\n\t    {\n\t      char *tmp;\n\t      size_t len = strlen (pattern);\n\n\t      while (len > 0 && ISSLASH (pattern[len-1]))\n\t\t--len;\n\n\t      if (len == 0)\n\t\trc = 1;\n\t      else\n\t\t{\n\t\t  tmp = xmalloc (len + 7);\n\t\t  memcpy (tmp, pattern, len);\n\t\t  strcpy (tmp + len, \"(/.*)?\");\n\t\t  rc = regcomp (&patopts->v.re, tmp, cflags);\n\t\t  free (tmp);\n\t\t}\n\t    }\n\t  else\n\t    rc = regcomp (&patopts->v.re, pattern, cflags);\n\n\t  if (rc)\n\t    {\n\t      pat->exclude_count--;\n\t      return;\n\t    }\n\t}\n      else\n\t{\n\t  if (options & EXCLUDE_ALLOC)\n\t    {\n\t      pattern = xstrdup (pattern);\n\t      exclude_add_pattern_buffer (ex, (char*) pattern);\n\t    }\n\t  patopts->v.pattern = pattern;\n\t}\n    }\n  else\n    {\n      char *str, *p;\n      int exclude_hash_flags = (EXCLUDE_INCLUDE | EXCLUDE_ANCHORED\n                                | FNM_LEADING_DIR | FNM_CASEFOLD);\n      if (! (ex->head && ex->head->type == exclude_hash\n             && ((ex->head->options & exclude_hash_flags)\n                 == (options & exclude_hash_flags))))\n        new_exclude_segment (ex, exclude_hash, options);\n      seg = ex->head;\n\n      str = xstrdup (pattern);\n      if ((options & (EXCLUDE_WILDCARDS | FNM_NOESCAPE)) == EXCLUDE_WILDCARDS)\n        unescape_pattern (str);\n      p = hash_insert (seg->v.table, str);\n      if (p != str)\n        free (str);\n    }\n}",
      "lines": 87,
      "depth": 18,
      "decorators": [
        "void"
      ]
    },
    "add_exclude_fp": {
      "start_point": [
        609,
        0
      ],
      "end_point": [
        665,
        1
      ],
      "content": "int\nadd_exclude_fp (void (*add_func) (struct exclude *, char const *, int, void *),\n\t\tstruct exclude *ex, FILE *fp, int options,\n\t\tchar line_end,\n\t\tvoid *data)\n{\n  char *buf = NULL;\n  char *p;\n  char *pattern;\n  char const *lim;\n  size_t buf_alloc = 0;\n  size_t buf_count = 0;\n  int c;\n  int e = 0;\n\n  while ((c = getc (fp)) != EOF)\n    {\n      if (buf_count == buf_alloc)\n        buf = x2realloc (buf, &buf_alloc);\n      buf[buf_count++] = c;\n    }\n\n  if (ferror (fp))\n    e = errno;\n\n  buf = xrealloc (buf, buf_count + 1);\n  buf[buf_count] = line_end;\n  lim = buf + buf_count + ! (buf_count == 0 || buf[buf_count - 1] == line_end);\n\n  exclude_add_pattern_buffer (ex, buf);\n\n  pattern = buf;\n\n  for (p = buf; p < lim; p++)\n    if (*p == line_end)\n      {\n        char *pattern_end = p;\n\n        if (isspace ((unsigned char) line_end))\n          {\n            for (; ; pattern_end--)\n              if (pattern_end == pattern)\n                goto next_pattern;\n              else if (! isspace ((unsigned char) pattern_end[-1]))\n                break;\n          }\n\n        *pattern_end = '\\0';\n        (*add_func) (ex, pattern, options, data);\n\n      next_pattern:\n        pattern = p + 1;\n      }\n\n  errno = e;\n  return e ? -1 : 0;\n}",
      "lines": 57,
      "depth": 18,
      "decorators": [
        "int"
      ]
    },
    "call_addfn": {
      "start_point": [
        667,
        0
      ],
      "end_point": [
        672,
        1
      ],
      "content": "static void\ncall_addfn (struct exclude *ex, char const *pattern, int options, void *data)\n{\n  void (**addfnptr) (struct exclude *, char const *, int) = data;\n  (*addfnptr) (ex, pattern, options);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "add_exclude_file": {
      "start_point": [
        674,
        0
      ],
      "end_point": [
        694,
        1
      ],
      "content": "int\nadd_exclude_file (void (*add_func) (struct exclude *, char const *, int),\n\t\t  struct exclude *ex, char const *file_name, int options,\n\t\t  char line_end)\n{\n  bool use_stdin = file_name[0] == '-' && !file_name[1];\n  FILE *in;\n  int rc = 0;\n\n  if (use_stdin)\n    in = stdin;\n  else if (! (in = fopen (file_name, \"r\")))\n    return -1;\n\n  rc = add_exclude_fp (call_addfn, ex, in, options, line_end, &add_func);\n\n  if (!use_stdin && fclose (in) != 0)\n    rc = -1;\n\n  return rc;\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/exclude.h": {},
  "grep/grep-3.1/lib/exitfail.c": {},
  "grep/grep-3.1/lib/exitfail.h": {},
  "grep/grep-3.1/lib/fchdir.c": {
    "ensure_dirs_slot": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        84,
        1
      ],
      "content": "static bool\nensure_dirs_slot (size_t fd)\n{\n  if (fd < dirs_allocated)\n    free (dirs[fd].name);\n  else\n    {\n      size_t new_allocated;\n      dir_info_t *new_dirs;\n\n      new_allocated = 2 * dirs_allocated + 1;\n      if (new_allocated <= fd)\n        new_allocated = fd + 1;\n      new_dirs =\n        (dirs != NULL\n         ? (dir_info_t *) realloc (dirs, new_allocated * sizeof *dirs)\n         : (dir_info_t *) malloc (new_allocated * sizeof *dirs));\n      if (new_dirs == NULL)\n        return false;\n      memset (new_dirs + dirs_allocated, 0,\n              (new_allocated - dirs_allocated) * sizeof *dirs);\n      dirs = new_dirs;\n      dirs_allocated = new_allocated;\n    }\n  return true;\n}",
      "lines": 26,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "get_name": {
      "start_point": [
        87,
        0
      ],
      "end_point": [
        107,
        1
      ],
      "content": "static char *\nget_name (char const *dir)\n{\n  char *cwd;\n  char *result;\n  int saved_errno;\n\n  if (IS_ABSOLUTE_FILE_NAME (dir))\n    return strdup (dir);\n\n  /* We often encounter \".\"; treat it as a special case.  */\n  cwd = getcwd (NULL, 0);\n  if (!cwd || (dir[0] == '.' && dir[1] == '\\0'))\n    return cwd;\n\n  result = mfile_name_concat (cwd, dir, NULL);\n  saved_errno = errno;\n  free (cwd);\n  errno = saved_errno;\n  return result;\n}",
      "lines": 21,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nget_name (char const *dir)",
        "*"
      ]
    },
    "_gl_unregister_fd": {
      "start_point": [
        114,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "void\n_gl_unregister_fd (int fd)\n{\n  if (fd >= 0 && fd < dirs_allocated)\n    {\n      free (dirs[fd].name);\n      dirs[fd].name = NULL;\n    }\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_gl_register_fd": {
      "start_point": [
        129,
        0
      ],
      "end_point": [
        148,
        1
      ],
      "content": "int\n_gl_register_fd (int fd, const char *filename)\n{\n  struct stat statbuf;\n\n  assure (0 <= fd);\n  if (REPLACE_OPEN_DIRECTORY\n      || (fstat (fd, &statbuf) == 0 && S_ISDIR (statbuf.st_mode)))\n    {\n      if (!ensure_dirs_slot (fd)\n          || (dirs[fd].name = get_name (filename)) == NULL)\n        {\n          int saved_errno = errno;\n          close (fd);\n          errno = saved_errno;\n          return -1;\n        }\n    }\n  return fd;\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "_gl_register_dup": {
      "start_point": [
        155,
        0
      ],
      "end_point": [
        178,
        1
      ],
      "content": "int\n_gl_register_dup (int oldfd, int newfd)\n{\n  assure (0 <= oldfd && 0 <= newfd && oldfd != newfd);\n  if (oldfd < dirs_allocated && dirs[oldfd].name)\n    {\n      /* Duplicated a directory; must ensure newfd is allocated.  */\n      if (!ensure_dirs_slot (newfd)\n          || (dirs[newfd].name = strdup (dirs[oldfd].name)) == NULL)\n        {\n          int saved_errno = errno;\n          close (newfd);\n          errno = saved_errno;\n          newfd = -1;\n        }\n    }\n  else if (newfd < dirs_allocated)\n    {\n      /* Duplicated a non-directory; ensure newfd is cleared.  */\n      free (dirs[newfd].name);\n      dirs[newfd].name = NULL;\n    }\n  return newfd;\n}",
      "lines": 24,
      "depth": 15,
      "decorators": [
        "int"
      ]
    },
    "_gl_directory_name": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        197,
        1
      ],
      "content": "const char *\n_gl_directory_name (int fd)\n{\n  if (0 <= fd && fd < dirs_allocated && dirs[fd].name != NULL)\n    return dirs[fd].name;\n  /* At this point, fd is either invalid, or open but not a directory.\n     If dup2 fails, errno is correctly EBADF.  */\n  if (0 <= fd)\n    {\n      if (dup2 (fd, fd) == fd)\n        errno = ENOTDIR;\n    }\n  else\n    errno = EBADF;\n  return NULL;\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "const",
        "const",
        "char",
        "*\n_gl_directory_name (int fd)",
        "*"
      ]
    },
    "fchdir": {
      "start_point": [
        202,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "content": "int\nfchdir (int fd)\n{\n  const char *name = _gl_directory_name (fd);\n  return name ? chdir (name) : -1;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fcntl--.h": {},
  "grep/grep-3.1/lib/fcntl-safer.h": {},
  "grep/grep-3.1/lib/fcntl.c": {
    "dupfd": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        165,
        1
      ],
      "content": "static int\ndupfd (int oldfd, int newfd, int flags)\n{\n  /* Mingw has no way to create an arbitrary fd.  Iterate until all\n     file descriptors less than newfd are filled up.  */\n  HANDLE curr_process = GetCurrentProcess ();\n  HANDLE old_handle = (HANDLE) _get_osfhandle (oldfd);\n  unsigned char fds_to_close[OPEN_MAX_MAX / CHAR_BIT];\n  unsigned int fds_to_close_bound = 0;\n  int result;\n  BOOL inherit = flags & O_CLOEXEC ? FALSE : TRUE;\n  int mode;\n\n  if (newfd < 0 || getdtablesize () <= newfd)\n    {\n      errno = EINVAL;\n      return -1;\n    }\n  if (old_handle == INVALID_HANDLE_VALUE\n      || (mode = setmode (oldfd, O_BINARY)) == -1)\n    {\n      /* oldfd is not open, or is an unassigned standard file\n         descriptor.  */\n      errno = EBADF;\n      return -1;\n    }\n  setmode (oldfd, mode);\n  flags |= mode;\n\n  for (;;)\n    {\n      HANDLE new_handle;\n      int duplicated_fd;\n      unsigned int index;\n\n      if (!DuplicateHandle (curr_process,           /* SourceProcessHandle */\n                            old_handle,             /* SourceHandle */\n                            curr_process,           /* TargetProcessHandle */\n                            (PHANDLE) &new_handle,  /* TargetHandle */\n                            (DWORD) 0,              /* DesiredAccess */\n                            inherit,                /* InheritHandle */\n                            DUPLICATE_SAME_ACCESS)) /* Options */\n        {\n          switch (GetLastError ())\n            {\n              case ERROR_TOO_MANY_OPEN_FILES:\n                errno = EMFILE;\n                break;\n              case ERROR_INVALID_HANDLE:\n              case ERROR_INVALID_TARGET_HANDLE:\n              case ERROR_DIRECT_ACCESS_HANDLE:\n                errno = EBADF;\n                break;\n              case ERROR_INVALID_PARAMETER:\n              case ERROR_INVALID_FUNCTION:\n              case ERROR_INVALID_ACCESS:\n                errno = EINVAL;\n                break;\n              default:\n                errno = EACCES;\n                break;\n            }\n          result = -1;\n          break;\n        }\n      duplicated_fd = _open_osfhandle ((intptr_t) new_handle, flags);\n      if (duplicated_fd < 0)\n        {\n          CloseHandle (new_handle);\n          result = -1;\n          break;\n        }\n      if (newfd <= duplicated_fd)\n        {\n          result = duplicated_fd;\n          break;\n        }\n\n      /* Set the bit duplicated_fd in fds_to_close[].  */\n      index = (unsigned int) duplicated_fd / CHAR_BIT;\n      if (fds_to_close_bound <= index)\n        {\n          if (sizeof fds_to_close <= index)\n            /* Need to increase OPEN_MAX_MAX.  */\n            abort ();\n          memset (fds_to_close + fds_to_close_bound, '\\0',\n                  index + 1 - fds_to_close_bound);\n          fds_to_close_bound = index + 1;\n        }\n      fds_to_close[index] |= 1 << ((unsigned int) duplicated_fd % CHAR_BIT);\n    }\n\n  /* Close the previous fds that turned out to be too small.  */\n  {\n    int saved_errno = errno;\n    unsigned int duplicated_fd;\n\n    for (duplicated_fd = 0;\n         duplicated_fd < fds_to_close_bound * CHAR_BIT;\n         duplicated_fd++)\n      if ((fds_to_close[duplicated_fd / CHAR_BIT]\n           >> (duplicated_fd % CHAR_BIT))\n          & 1)\n        close (duplicated_fd);\n\n    errno = saved_errno;\n  }\n\n# if REPLACE_FCHDIR\n  if (0 <= result)\n    result = _gl_register_dup (oldfd, result);\n# endif\n  return result;\n}",
      "lines": 114,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "klibc_fcntl": {
      "start_point": [
        173,
        0
      ],
      "end_point": [
        250,
        1
      ],
      "content": "static int\nklibc_fcntl (int fd, int action, /* arg */...)\n{\n  va_list arg_ptr;\n  int arg;\n  struct stat sbuf;\n  int result = -1;\n\n  va_start (arg_ptr, action);\n  arg = va_arg (arg_ptr, int);\n  result = fcntl (fd, action, arg);\n  /* EPERM for F_DUPFD, ENOTSUP for others */\n  if (result == -1 && (errno == EPERM || errno == ENOTSUP)\n      && !fstat (fd, &sbuf) && S_ISDIR (sbuf.st_mode))\n  {\n    ULONG ulMode;\n\n    switch (action)\n      {\n      case F_DUPFD:\n        /* Find available fd */\n        while (fcntl (arg, F_GETFL) != -1 || errno != EBADF)\n          arg++;\n\n        result = dup2 (fd, arg);\n        break;\n\n      /* Using underlying APIs is right ? */\n      case F_GETFD:\n        if (DosQueryFHState (fd, &ulMode))\n          break;\n\n        result = (ulMode & OPEN_FLAGS_NOINHERIT) ? FD_CLOEXEC : 0;\n        break;\n\n      case F_SETFD:\n        if (arg & ~FD_CLOEXEC)\n          break;\n\n        if (DosQueryFHState (fd, &ulMode))\n          break;\n\n        if (arg & FD_CLOEXEC)\n          ulMode |= OPEN_FLAGS_NOINHERIT;\n        else\n          ulMode &= ~OPEN_FLAGS_NOINHERIT;\n\n        /* Filter supported flags.  */\n        ulMode &= (OPEN_FLAGS_WRITE_THROUGH | OPEN_FLAGS_FAIL_ON_ERROR\n                   | OPEN_FLAGS_NO_CACHE | OPEN_FLAGS_NOINHERIT);\n\n        if (DosSetFHState (fd, ulMode))\n          break;\n\n        result = 0;\n        break;\n\n      case F_GETFL:\n        result = 0;\n        break;\n\n      case F_SETFL:\n        if (arg != 0)\n          break;\n\n        result = 0;\n        break;\n\n      default :\n        errno = EINVAL;\n        break;\n      }\n  }\n\n  va_end (arg_ptr);\n\n  return result;\n}",
      "lines": 78,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_fcntl": {
      "start_point": [
        274,
        0
      ],
      "end_point": [
        417,
        1
      ],
      "content": "int\nrpl_fcntl (int fd, int action, /* arg */...)\n{\n  va_list arg;\n  int result = -1;\n  va_start (arg, action);\n  switch (action)\n    {\n\n#if !HAVE_FCNTL\n    case F_DUPFD:\n      {\n        int target = va_arg (arg, int);\n        result = dupfd (fd, target, 0);\n        break;\n      }\n#elif FCNTL_DUPFD_BUGGY || REPLACE_FCHDIR\n    case F_DUPFD:\n      {\n        int target = va_arg (arg, int);\n        /* Detect invalid target; needed for cygwin 1.5.x.  */\n        if (target < 0 || getdtablesize () <= target)\n          errno = EINVAL;\n        else\n          {\n            /* Haiku alpha 2 loses fd flags on original.  */\n            int flags = fcntl (fd, F_GETFD);\n            if (flags < 0)\n              {\n                result = -1;\n                break;\n              }\n            result = fcntl (fd, action, target);\n            if (0 <= result && fcntl (fd, F_SETFD, flags) == -1)\n              {\n                int saved_errno = errno;\n                close (result);\n                result = -1;\n                errno = saved_errno;\n              }\n# if REPLACE_FCHDIR\n            if (0 <= result)\n              result = _gl_register_dup (fd, result);\n# endif\n          }\n        break;\n      } /* F_DUPFD */\n#endif /* FCNTL_DUPFD_BUGGY || REPLACE_FCHDIR */\n\n    case F_DUPFD_CLOEXEC:\n      {\n        int target = va_arg (arg, int);\n\n#if !HAVE_FCNTL\n        result = dupfd (fd, target, O_CLOEXEC);\n        break;\n#else /* HAVE_FCNTL */\n        /* Try the system call first, if the headers claim it exists\n           (that is, if GNULIB_defined_F_DUPFD_CLOEXEC is 0), since we\n           may be running with a glibc that has the macro but with an\n           older kernel that does not support it.  Cache the\n           information on whether the system call really works, but\n           avoid caching failure if the corresponding F_DUPFD fails\n           for any reason.  0 = unknown, 1 = yes, -1 = no.  */\n        static int have_dupfd_cloexec = GNULIB_defined_F_DUPFD_CLOEXEC ? -1 : 0;\n        if (0 <= have_dupfd_cloexec)\n          {\n            result = fcntl (fd, action, target);\n            if (0 <= result || errno != EINVAL)\n              {\n                have_dupfd_cloexec = 1;\n# if REPLACE_FCHDIR\n                if (0 <= result)\n                  result = _gl_register_dup (fd, result);\n# endif\n              }\n            else\n              {\n                result = rpl_fcntl (fd, F_DUPFD, target);\n                if (result < 0)\n                  break;\n                have_dupfd_cloexec = -1;\n              }\n          }\n        else\n          result = rpl_fcntl (fd, F_DUPFD, target);\n        if (0 <= result && have_dupfd_cloexec == -1)\n          {\n            int flags = fcntl (result, F_GETFD);\n            if (flags < 0 || fcntl (result, F_SETFD, flags | FD_CLOEXEC) == -1)\n              {\n                int saved_errno = errno;\n                close (result);\n                errno = saved_errno;\n                result = -1;\n              }\n          }\n        break;\n#endif /* HAVE_FCNTL */\n      } /* F_DUPFD_CLOEXEC */\n\n#if !HAVE_FCNTL\n    case F_GETFD:\n      {\n# if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n        HANDLE handle = (HANDLE) _get_osfhandle (fd);\n        DWORD flags;\n        if (handle == INVALID_HANDLE_VALUE\n            || GetHandleInformation (handle, &flags) == 0)\n          errno = EBADF;\n        else\n          result = (flags & HANDLE_FLAG_INHERIT) ? 0 : FD_CLOEXEC;\n# else /* !W32 */\n        /* Use dup2 to reject invalid file descriptors.  No way to\n           access this information, so punt.  */\n        if (0 <= dup2 (fd, fd))\n          result = 0;\n# endif /* !W32 */\n        break;\n      } /* F_GETFD */\n#endif /* !HAVE_FCNTL */\n\n      /* Implementing F_SETFD on mingw is not trivial - there is no\n         API for changing the O_NOINHERIT bit on an fd, and merely\n         changing the HANDLE_FLAG_INHERIT bit on the underlying handle\n         can lead to odd state.  It may be possible by duplicating the\n         handle, using _open_osfhandle with the right flags, then\n         using dup2 to move the duplicate onto the original, but that\n         is not supported for now.  */\n\n    default:\n      {\n#if HAVE_FCNTL\n        void *p = va_arg (arg, void *);\n        result = fcntl (fd, action, p);\n#else\n        errno = EINVAL;\n#endif\n        break;\n      }\n    }\n  va_end (arg);\n  return result;\n}",
      "lines": 144,
      "depth": 19,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fcntl.in.h": {},
  "grep/grep-3.1/lib/fd-hook.c": {
    "execute_close_hooks": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        42,
        1
      ],
      "content": "int\nexecute_close_hooks (const struct fd_hook *remaining_list, gl_close_fn primary,\n                     int fd)\n{\n  if (remaining_list == &anchor)\n    /* End of list reached.  */\n    return primary (fd);\n  else\n    return remaining_list->private_close_fn (remaining_list->private_next,\n                                             primary, fd);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "execute_all_close_hooks": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "content": "int\nexecute_all_close_hooks (gl_close_fn primary, int fd)\n{\n  return execute_close_hooks (anchor.private_next, primary, fd);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "execute_ioctl_hooks": {
      "start_point": [
        50,
        0
      ],
      "end_point": [
        60,
        1
      ],
      "content": "int\nexecute_ioctl_hooks (const struct fd_hook *remaining_list, gl_ioctl_fn primary,\n                     int fd, int request, void *arg)\n{\n  if (remaining_list == &anchor)\n    /* End of list reached.  */\n    return primary (fd, request, arg);\n  else\n    return remaining_list->private_ioctl_fn (remaining_list->private_next,\n                                             primary, fd, request, arg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "execute_all_ioctl_hooks": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "int\nexecute_all_ioctl_hooks (gl_ioctl_fn primary,\n                         int fd, int request, void *arg)\n{\n  return execute_ioctl_hooks (anchor.private_next, primary, fd, request, arg);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "register_fd_hook": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "content": "void\nregister_fd_hook (close_hook_fn close_hook, ioctl_hook_fn ioctl_hook, struct fd_hook *link)\n{\n  if (close_hook == NULL)\n    close_hook = execute_close_hooks;\n  if (ioctl_hook == NULL)\n    ioctl_hook = execute_ioctl_hooks;\n\n  if (link->private_next == NULL && link->private_prev == NULL)\n    {\n      /* Add the link to the doubly linked list.  */\n      link->private_next = anchor.private_next;\n      link->private_prev = &anchor;\n      link->private_close_fn = close_hook;\n      link->private_ioctl_fn = ioctl_hook;\n      anchor.private_next->private_prev = link;\n      anchor.private_next = link;\n    }\n  else\n    {\n      /* The link is already in use.  */\n      if (link->private_close_fn != close_hook\n          || link->private_ioctl_fn != ioctl_hook)\n        abort ();\n    }\n}",
      "lines": 26,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "unregister_fd_hook": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        113,
        1
      ],
      "content": "void\nunregister_fd_hook (struct fd_hook *link)\n{\n  struct fd_hook *next = link->private_next;\n  struct fd_hook *prev = link->private_prev;\n\n  if (next != NULL && prev != NULL)\n    {\n      /* The link is in use.  Remove it from the doubly linked list.  */\n      prev->private_next = next;\n      next->private_prev = prev;\n      /* Clear the link, to mark it unused.  */\n      link->private_next = NULL;\n      link->private_prev = NULL;\n      link->private_close_fn = NULL;\n      link->private_ioctl_fn = NULL;\n    }\n}",
      "lines": 18,
      "depth": 8,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/fd-hook.h": {},
  "grep/grep-3.1/lib/fd-safer.c": {
    "fd_safer": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "content": "int\nfd_safer (int fd)\n{\n  if (STDIN_FILENO <= fd && fd <= STDERR_FILENO)\n    {\n      int f = dup_safer (fd);\n      int e = errno;\n      close (fd);\n      errno = e;\n      fd = f;\n    }\n\n  return fd;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fdopendir.c": {
    "fdopendir": [
      {
        "start_point": [
          67,
          0
        ],
        "end_point": [
          97,
          1
        ],
        "content": "DIR *\nfdopendir (int fd)\n{\n  char path[_MAX_PATH];\n  DIR *dirp;\n\n  /* Get a path from fd */\n  if (__libc_Back_ioFHToPath (fd, path, sizeof (path)))\n    return NULL;\n\n  dirp = opendir (path);\n  if (!dirp)\n    return NULL;\n\n  /* Unregister fd registered by opendir() */\n  _gl_unregister_dirp_fd (dirfd (dirp));\n\n  /* Register our fd */\n  if (_gl_register_dirp_fd (fd, dirp))\n    {\n      int saved_errno = errno;\n\n      closedir (dirp);\n\n      errno = saved_errno;\n\n      dirp = NULL;\n    }\n\n  return dirp;\n}",
        "lines": 31,
        "depth": 9,
        "decorators": [
          "DIR",
          "*\nfdopendir (int fd)",
          "*"
        ]
      },
      {
        "start_point": [
          99,
          0
        ],
        "end_point": [
          120,
          1
        ],
        "content": "DIR *\nfdopendir (int fd)\n{\n  DIR *dir = fdopendir_with_dup (fd, -1, NULL);\n\n  if (! REPLACE_FCHDIR && ! dir)\n    {\n      int saved_errno = errno;\n      if (EXPECTED_ERRNO (saved_errno))\n        {\n          struct saved_cwd cwd;\n          if (save_cwd (&cwd) != 0)\n            openat_save_fail (errno);\n          dir = fdopendir_with_dup (fd, -1, &cwd);\n          saved_errno = errno;\n          free_cwd (&cwd);\n          errno = saved_errno;\n        }\n    }\n\n  return dir;\n}",
        "lines": 22,
        "depth": 13,
        "decorators": [
          "DIR",
          "*\nfdopendir (int fd)",
          "*"
        ]
      }
    ],
    "fdopendir_with_dup": {
      "start_point": [
        134,
        0
      ],
      "end_point": [
        169,
        1
      ],
      "content": "static DIR *\nfdopendir_with_dup (int fd, int older_dupfd, struct saved_cwd const *cwd)\n{\n  int dupfd = dup (fd);\n  if (dupfd < 0 && errno == EMFILE)\n    dupfd = older_dupfd;\n  if (dupfd < 0)\n    return NULL;\n  else\n    {\n      DIR *dir;\n      int saved_errno;\n      if (dupfd < fd - 1 && dupfd != older_dupfd)\n        {\n          dir = fdopendir_with_dup (fd, dupfd, cwd);\n          saved_errno = errno;\n        }\n      else\n        {\n          close (fd);\n          dir = fd_clone_opendir (dupfd, cwd);\n          saved_errno = errno;\n          if (! dir)\n            {\n              int fd1 = dup (dupfd);\n              if (fd1 != fd)\n                openat_save_fail (fd1 < 0 ? errno : EBADF);\n            }\n        }\n\n      if (dupfd != older_dupfd)\n        close (dupfd);\n      errno = saved_errno;\n      return dir;\n    }\n}",
      "lines": 36,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "DIR",
        "*\nfdopendir_with_dup (int fd, int older_dupfd, struct saved_cwd const *cwd)",
        "*"
      ]
    },
    "fd_clone_opendir": {
      "start_point": [
        174,
        0
      ],
      "end_point": [
        223,
        1
      ],
      "content": "static DIR *\nfd_clone_opendir (int fd, struct saved_cwd const *cwd)\n{\n  if (REPLACE_FCHDIR || ! cwd)\n    {\n      DIR *dir = NULL;\n      int saved_errno = EOPNOTSUPP;\n      char buf[OPENAT_BUFFER_SIZE];\n      char *proc_file = openat_proc_name (buf, fd, \".\");\n      if (proc_file)\n        {\n          dir = opendir (proc_file);\n          saved_errno = errno;\n          if (proc_file != buf)\n            free (proc_file);\n        }\n# if REPLACE_FCHDIR\n      if (! dir && EXPECTED_ERRNO (saved_errno))\n        {\n          char const *name = _gl_directory_name (fd);\n          DIR *dp = name ? opendir (name) : NULL;\n\n          /* The caller has done an elaborate dance to arrange for opendir to\n             consume just the right file descriptor.  If dirfd returns -1,\n             though, we're on a system like mingw where opendir does not\n             consume a file descriptor.  Consume it via 'dup' instead.  */\n          if (dp && dirfd (dp) < 0)\n            dup (fd);\n\n          return dp;\n        }\n# endif\n      errno = saved_errno;\n      return dir;\n    }\n  else\n    {\n      if (fchdir (fd) != 0)\n        return NULL;\n      else\n        {\n          DIR *dir = opendir (\".\");\n          int saved_errno = errno;\n          if (restore_cwd (cwd) != 0)\n            openat_restore_fail (errno);\n          errno = saved_errno;\n          return dir;\n        }\n    }\n}",
      "lines": 50,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "DIR",
        "*\nfd_clone_opendir (int fd, struct saved_cwd const *cwd)",
        "*"
      ]
    },
    "rpl_fdopendir": {
      "start_point": [
        234,
        0
      ],
      "end_point": [
        246,
        1
      ],
      "content": "DIR *\nrpl_fdopendir (int fd)\n{\n  struct stat st;\n  if (fstat (fd, &st))\n    return NULL;\n  if (!S_ISDIR (st.st_mode))\n    {\n      errno = ENOTDIR;\n      return NULL;\n    }\n  return fdopendir (fd);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "DIR",
        "*\nrpl_fdopendir (int fd)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/filename.h": {},
  "grep/grep-3.1/lib/filenamecat-lgpl.c": {
    "longest_relative_suffix": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        42,
        1
      ],
      "content": "static char const * _GL_ATTRIBUTE_PURE\nlongest_relative_suffix (char const *f)\n{\n  for (f += FILE_SYSTEM_PREFIX_LEN (f); ISSLASH (*f); f++)\n    continue;\n  return f;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "char",
        "const",
        "const",
        "* _GL_ATTRIBUTE_PURE\nlongest_relative_suffix (char const *f)",
        "*",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "mfile_name_concat": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "char *\nmfile_name_concat (char const *dir, char const *abase, char **base_in_result)\n{\n  char const *dirbase = last_component (dir);\n  size_t dirbaselen = base_len (dirbase);\n  size_t dirlen = dirbase - dir + dirbaselen;\n  size_t needs_separator = (dirbaselen && ! ISSLASH (dirbase[dirbaselen - 1]));\n\n  char const *base = longest_relative_suffix (abase);\n  size_t baselen = strlen (base);\n\n  char *p_concat = malloc (dirlen + needs_separator + baselen + 1);\n  char *p;\n\n  if (p_concat == NULL)\n    return NULL;\n\n  p = mempcpy (p_concat, dir, dirlen);\n  *p = DIRECTORY_SEPARATOR;\n  p += needs_separator;\n\n  if (base_in_result)\n    *base_in_result = p - IS_ABSOLUTE_FILE_NAME (abase);\n\n  p = mempcpy (p, base, baselen);\n  *p = '\\0';\n\n  return p_concat;\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "char",
        "*\nmfile_name_concat (char const *dir, char const *abase, char **base_in_result)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/filenamecat.h": {},
  "grep/grep-3.1/lib/flexmember.h": {},
  "grep/grep-3.1/lib/fnmatch.c": {
    "is_char_class": {
      "start_point": [
        211,
        0
      ],
      "end_point": [
        268,
        1
      ],
      "content": "static wctype_t\nis_char_class (const wchar_t *wcs)\n{\n  char s[CHAR_CLASS_MAX_LENGTH + 1];\n  char *cp = s;\n\n  do\n    {\n      /* Test for a printable character from the portable character set.  */\n#  ifdef _LIBC\n      if (*wcs < 0x20 || *wcs > 0x7e\n          || *wcs == 0x24 || *wcs == 0x40 || *wcs == 0x60)\n        return (wctype_t) 0;\n#  else\n      switch (*wcs)\n        {\n        case L' ': case L'!': case L'\"': case L'#': case L'%':\n        case L'&': case L'\\'': case L'(': case L')': case L'*':\n        case L'+': case L',': case L'-': case L'.': case L'/':\n        case L'0': case L'1': case L'2': case L'3': case L'4':\n        case L'5': case L'6': case L'7': case L'8': case L'9':\n        case L':': case L';': case L'<': case L'=': case L'>':\n        case L'?':\n        case L'A': case L'B': case L'C': case L'D': case L'E':\n        case L'F': case L'G': case L'H': case L'I': case L'J':\n        case L'K': case L'L': case L'M': case L'N': case L'O':\n        case L'P': case L'Q': case L'R': case L'S': case L'T':\n        case L'U': case L'V': case L'W': case L'X': case L'Y':\n        case L'Z':\n        case L'[': case L'\\\\': case L']': case L'^': case L'_':\n        case L'a': case L'b': case L'c': case L'd': case L'e':\n        case L'f': case L'g': case L'h': case L'i': case L'j':\n        case L'k': case L'l': case L'm': case L'n': case L'o':\n        case L'p': case L'q': case L'r': case L's': case L't':\n        case L'u': case L'v': case L'w': case L'x': case L'y':\n        case L'z': case L'{': case L'|': case L'}': case L'~':\n          break;\n        default:\n          return (wctype_t) 0;\n        }\n#  endif\n\n      /* Avoid overrunning the buffer.  */\n      if (cp == s + CHAR_CLASS_MAX_LENGTH)\n        return (wctype_t) 0;\n\n      *cp++ = (char) *wcs++;\n    }\n  while (*wcs != L'\\0');\n\n  *cp = '\\0';\n\n#  ifdef _LIBC\n  return __wctype (s);\n#  else\n  return wctype (s);\n#  endif\n}",
      "lines": 58,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "wctype_t"
      ]
    },
    "fnmatch": {
      "start_point": [
        275,
        0
      ],
      "end_point": [
        343,
        1
      ],
      "content": "int\nfnmatch (const char *pattern, const char *string, int flags)\n{\n# if HANDLE_MULTIBYTE\n#  define ALLOCA_LIMIT 2000\n  if (__builtin_expect (MB_CUR_MAX, 1) != 1)\n    {\n      mbstate_t ps;\n      size_t patsize;\n      size_t strsize;\n      size_t totsize;\n      wchar_t *wpattern;\n      wchar_t *wstring;\n      int res;\n\n      /* Calculate the size needed to convert the strings to\n         wide characters.  */\n      memset (&ps, '\\0', sizeof (ps));\n      patsize = mbsrtowcs (NULL, &pattern, 0, &ps) + 1;\n      if (__builtin_expect (patsize != 0, 1))\n        {\n          assert (mbsinit (&ps));\n          strsize = mbsrtowcs (NULL, &string, 0, &ps) + 1;\n          if (__builtin_expect (strsize != 0, 1))\n            {\n              assert (mbsinit (&ps));\n              totsize = patsize + strsize;\n              if (__builtin_expect (! (patsize <= totsize\n                                       && totsize <= SIZE_MAX / sizeof (wchar_t)),\n                                    0))\n                {\n                  errno = ENOMEM;\n                  return -1;\n                }\n\n              /* Allocate room for the wide characters.  */\n              if (__builtin_expect (totsize < ALLOCA_LIMIT, 1))\n                wpattern = (wchar_t *) alloca (totsize * sizeof (wchar_t));\n              else\n                {\n                  wpattern = malloc (totsize * sizeof (wchar_t));\n                  if (__builtin_expect (! wpattern, 0))\n                    {\n                      errno = ENOMEM;\n                      return -1;\n                    }\n                }\n              wstring = wpattern + patsize;\n\n              /* Convert the strings into wide characters.  */\n              mbsrtowcs (wpattern, &pattern, patsize, &ps);\n              assert (mbsinit (&ps));\n              mbsrtowcs (wstring, &string, strsize, &ps);\n\n              res = internal_fnwmatch (wpattern, wstring, wstring + strsize - 1,\n                                       flags & FNM_PERIOD, flags);\n\n              if (__builtin_expect (! (totsize < ALLOCA_LIMIT), 0))\n                free (wpattern);\n              return res;\n            }\n        }\n    }\n\n# endif /* HANDLE_MULTIBYTE */\n\n  return internal_fnmatch (pattern, string, string + strlen (string),\n                           flags & FNM_PERIOD, flags);\n}",
      "lines": 69,
      "depth": 21,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fnmatch.in.h": {},
  "grep/grep-3.1/lib/fnmatch_loop.c": {
    "internal_function": [
      {
        "start_point": [
          23,
          0
        ],
        "end_point": [
          981,
          1
        ],
        "content": "static int\ninternal_function\nFCT (const CHAR *pattern, const CHAR *string, const CHAR *string_end,\n     bool no_leading_period, int flags)\n{\n  register const CHAR *p = pattern, *n = string;\n  register UCHAR c;\n#ifdef _LIBC\n# if WIDE_CHAR_VERSION\n  const char *collseq = (const char *)\n    _NL_CURRENT(LC_COLLATE, _NL_COLLATE_COLLSEQWC);\n# else\n  const UCHAR *collseq = (const UCHAR *)\n    _NL_CURRENT(LC_COLLATE, _NL_COLLATE_COLLSEQMB);\n# endif\n#endif\n\n  while ((c = *p++) != L_('\\0'))\n    {\n      bool new_no_leading_period = false;\n      c = FOLD (c);\n\n      switch (c)\n        {\n        case L_('?'):\n          if (__builtin_expect (flags & FNM_EXTMATCH, 0) && *p == '(')\n            {\n              int res;\n\n              res = EXT (c, p, n, string_end, no_leading_period,\n                         flags);\n              if (res != -1)\n                return res;\n            }\n\n          if (n == string_end)\n            return FNM_NOMATCH;\n          else if (*n == L_('/') && (flags & FNM_FILE_NAME))\n            return FNM_NOMATCH;\n          else if (*n == L_('.') && no_leading_period)\n            return FNM_NOMATCH;\n          break;\n\n        case L_('\\\\'):\n          if (!(flags & FNM_NOESCAPE))\n            {\n              c = *p++;\n              if (c == L_('\\0'))\n                /* Trailing \\ loses.  */\n                return FNM_NOMATCH;\n              c = FOLD (c);\n            }\n          if (n == string_end || FOLD ((UCHAR) *n) != c)\n            return FNM_NOMATCH;\n          break;\n\n        case L_('*'):\n          if (__builtin_expect (flags & FNM_EXTMATCH, 0) && *p == '(')\n            {\n              int res;\n\n              res = EXT (c, p, n, string_end, no_leading_period,\n                         flags);\n              if (res != -1)\n                return res;\n            }\n\n          if (n != string_end && *n == L_('.') && no_leading_period)\n            return FNM_NOMATCH;\n\n          for (c = *p++; c == L_('?') || c == L_('*'); c = *p++)\n            {\n              if (*p == L_('(') && (flags & FNM_EXTMATCH) != 0)\n                {\n                  const CHAR *endp = END (p);\n                  if (endp != p)\n                    {\n                      /* This is a pattern.  Skip over it.  */\n                      p = endp;\n                      continue;\n                    }\n                }\n\n              if (c == L_('?'))\n                {\n                  /* A ? needs to match one character.  */\n                  if (n == string_end)\n                    /* There isn't another character; no match.  */\n                    return FNM_NOMATCH;\n                  else if (*n == L_('/')\n                           && __builtin_expect (flags & FNM_FILE_NAME, 0))\n                    /* A slash does not match a wildcard under\n                       FNM_FILE_NAME.  */\n                    return FNM_NOMATCH;\n                  else\n                    /* One character of the string is consumed in matching\n                       this ? wildcard, so *??? won't match if there are\n                       less than three characters.  */\n                    ++n;\n                }\n            }\n\n          if (c == L_('\\0'))\n            /* The wildcard(s) is/are the last element of the pattern.\n               If the name is a file name and contains another slash\n               this means it cannot match, unless the FNM_LEADING_DIR\n               flag is set.  */\n            {\n              int result = (flags & FNM_FILE_NAME) == 0 ? 0 : FNM_NOMATCH;\n\n              if (flags & FNM_FILE_NAME)\n                {\n                  if (flags & FNM_LEADING_DIR)\n                    result = 0;\n                  else\n                    {\n                      if (MEMCHR (n, L_('/'), string_end - n) == NULL)\n                        result = 0;\n                    }\n                }\n\n              return result;\n            }\n          else\n            {\n              const CHAR *endp;\n\n              endp = MEMCHR (n, (flags & FNM_FILE_NAME) ? L_('/') : L_('\\0'),\n                             string_end - n);\n              if (endp == NULL)\n                endp = string_end;\n\n              if (c == L_('[')\n                  || (__builtin_expect (flags & FNM_EXTMATCH, 0) != 0\n                      && (c == L_('@') || c == L_('+') || c == L_('!'))\n                      && *p == L_('(')))\n                {\n                  int flags2 = ((flags & FNM_FILE_NAME)\n                                ? flags : (flags & ~FNM_PERIOD));\n                  bool no_leading_period2 = no_leading_period;\n\n                  for (--p; n < endp; ++n, no_leading_period2 = false)\n                    if (FCT (p, n, string_end, no_leading_period2, flags2)\n                        == 0)\n                      return 0;\n                }\n              else if (c == L_('/') && (flags & FNM_FILE_NAME))\n                {\n                  while (n < string_end && *n != L_('/'))\n                    ++n;\n                  if (n < string_end && *n == L_('/')\n                      && (FCT (p, n + 1, string_end, flags & FNM_PERIOD, flags)\n                          == 0))\n                    return 0;\n                }\n              else\n                {\n                  int flags2 = ((flags & FNM_FILE_NAME)\n                                ? flags : (flags & ~FNM_PERIOD));\n                  int no_leading_period2 = no_leading_period;\n\n                  if (c == L_('\\\\') && !(flags & FNM_NOESCAPE))\n                    c = *p;\n                  c = FOLD (c);\n                  for (--p; n < endp; ++n, no_leading_period2 = false)\n                    if (FOLD ((UCHAR) *n) == c\n                        && (FCT (p, n, string_end, no_leading_period2, flags2)\n                            == 0))\n                      return 0;\n                }\n            }\n\n          /* If we come here no match is possible with the wildcard.  */\n          return FNM_NOMATCH;\n\n        case L_('['):\n          {\n            /* Nonzero if the sense of the character class is inverted.  */\n            const CHAR *p_init = p;\n            const CHAR *n_init = n;\n            register bool not;\n            CHAR cold;\n            UCHAR fn;\n\n            if (posixly_correct == 0)\n              posixly_correct = getenv (\"POSIXLY_CORRECT\") != NULL ? 1 : -1;\n\n            if (n == string_end)\n              return FNM_NOMATCH;\n\n            if (*n == L_('.') && no_leading_period)\n              return FNM_NOMATCH;\n\n            if (*n == L_('/') && (flags & FNM_FILE_NAME))\n              /* '/' cannot be matched.  */\n              return FNM_NOMATCH;\n\n            not = (*p == L_('!') || (posixly_correct < 0 && *p == L_('^')));\n            if (not)\n              ++p;\n\n            fn = FOLD ((UCHAR) *n);\n\n            c = *p++;\n            for (;;)\n              {\n\t\tbool is_range = false;\n\n                if (!(flags & FNM_NOESCAPE) && c == L_('\\\\'))\n                  {\n                    if (*p == L_('\\0'))\n                      return FNM_NOMATCH;\n                    c = FOLD ((UCHAR) *p);\n                    ++p;\n\n                    goto normal_bracket;\n                  }\n                else if (c == L_('[') && *p == L_(':'))\n                  {\n                    /* Leave room for the null.  */\n                    CHAR str[CHAR_CLASS_MAX_LENGTH + 1];\n                    size_t c1 = 0;\n#if defined _LIBC || WIDE_CHAR_SUPPORT\n                    wctype_t wt;\n#endif\n                    const CHAR *startp = p;\n\n                    for (;;)\n                      {\n                        if (c1 == CHAR_CLASS_MAX_LENGTH)\n                          /* The name is too long and therefore the pattern\n                             is ill-formed.  */\n                          return FNM_NOMATCH;\n\n                        c = *++p;\n                        if (c == L_(':') && p[1] == L_(']'))\n                          {\n                            p += 2;\n                            break;\n                          }\n                        if (c < L_('a') || c >= L_('z'))\n                          {\n                            /* This cannot possibly be a character class name.\n                               Match it as a normal range.  */\n                            p = startp;\n                            c = L_('[');\n                            goto normal_bracket;\n                          }\n                        str[c1++] = c;\n                      }\n                    str[c1] = L_('\\0');\n\n#if defined _LIBC || WIDE_CHAR_SUPPORT\n                    wt = IS_CHAR_CLASS (str);\n                    if (wt == 0)\n                      /* Invalid character class name.  */\n                      return FNM_NOMATCH;\n\n# if defined _LIBC && ! WIDE_CHAR_VERSION\n                    /* The following code is glibc specific but does\n                       there a good job in speeding up the code since\n                       we can avoid the btowc() call.  */\n                    if (_ISCTYPE ((UCHAR) *n, wt))\n                      goto matched;\n# else\n                    if (ISWCTYPE (BTOWC ((UCHAR) *n), wt))\n                      goto matched;\n# endif\n#else\n                    if ((STREQ (str, L_(\"alnum\")) && isalnum ((UCHAR) *n))\n                        || (STREQ (str, L_(\"alpha\")) && isalpha ((UCHAR) *n))\n                        || (STREQ (str, L_(\"blank\")) && isblank ((UCHAR) *n))\n                        || (STREQ (str, L_(\"cntrl\")) && iscntrl ((UCHAR) *n))\n                        || (STREQ (str, L_(\"digit\")) && isdigit ((UCHAR) *n))\n                        || (STREQ (str, L_(\"graph\")) && isgraph ((UCHAR) *n))\n                        || (STREQ (str, L_(\"lower\")) && islower ((UCHAR) *n))\n                        || (STREQ (str, L_(\"print\")) && isprint ((UCHAR) *n))\n                        || (STREQ (str, L_(\"punct\")) && ispunct ((UCHAR) *n))\n                        || (STREQ (str, L_(\"space\")) && isspace ((UCHAR) *n))\n                        || (STREQ (str, L_(\"upper\")) && isupper ((UCHAR) *n))\n                        || (STREQ (str, L_(\"xdigit\")) && isxdigit ((UCHAR) *n)))\n                      goto matched;\n#endif\n                    c = *p++;\n                  }\n#ifdef _LIBC\n                else if (c == L_('[') && *p == L_('='))\n                  {\n                    UCHAR str[1];\n                    uint32_t nrules =\n                      _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n                    const CHAR *startp = p;\n\n                    c = *++p;\n                    if (c == L_('\\0'))\n                      {\n                        p = startp;\n                        c = L_('[');\n                        goto normal_bracket;\n                      }\n                    str[0] = c;\n\n                    c = *++p;\n                    if (c != L_('=') || p[1] != L_(']'))\n                      {\n                        p = startp;\n                        c = L_('[');\n                        goto normal_bracket;\n                      }\n                    p += 2;\n\n                    if (nrules == 0)\n                      {\n                        if ((UCHAR) *n == str[0])\n                          goto matched;\n                      }\n                    else\n                      {\n                        const int32_t *table;\n# if WIDE_CHAR_VERSION\n                        const int32_t *weights;\n                        const int32_t *extra;\n# else\n                        const unsigned char *weights;\n                        const unsigned char *extra;\n# endif\n                        const int32_t *indirect;\n                        int32_t idx;\n                        const UCHAR *cp = (const UCHAR *) str;\n\n                        /* This #include defines a local function!  */\n# if WIDE_CHAR_VERSION\n#  include <locale/weightwc.h>\n# else\n#  include <locale/weight.h>\n# endif\n\n# if WIDE_CHAR_VERSION\n                        table = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEWC);\n                        weights = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_WEIGHTWC);\n                        extra = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_EXTRAWC);\n                        indirect = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_INDIRECTWC);\n# else\n                        table = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);\n                        weights = (const unsigned char *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_WEIGHTMB);\n                        extra = (const unsigned char *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_EXTRAMB);\n                        indirect = (const int32_t *)\n                          _NL_CURRENT (LC_COLLATE, _NL_COLLATE_INDIRECTMB);\n# endif\n\n                        idx = findidx (&cp);\n                        if (idx != 0)\n                          {\n                            /* We found a table entry.  Now see whether the\n                               character we are currently at has the same\n                               equivalence class value.  */\n                            int len = weights[idx & 0xffffff];\n                            int32_t idx2;\n                            const UCHAR *np = (const UCHAR *) n;\n\n                            idx2 = findidx (&np);\n                            if (idx2 != 0\n                                && (idx >> 24) == (idx2 >> 24)\n                                && len == weights[idx2 & 0xffffff])\n                              {\n                                int cnt = 0;\n\n                                idx &= 0xffffff;\n                                idx2 &= 0xffffff;\n\n                                while (cnt < len\n                                       && (weights[idx + 1 + cnt]\n                                           == weights[idx2 + 1 + cnt]))\n                                  ++cnt;\n\n                                if (cnt == len)\n                                  goto matched;\n                              }\n                          }\n                      }\n\n                    c = *p++;\n                  }\n#endif\n                else if (c == L_('\\0'))\n                  {\n                    /* [ unterminated, treat as normal character.  */\n                    p = p_init;\n                    n = n_init;\n                    c = L_('[');\n                    goto normal_match;\n                  }\n                else\n                  {\n#ifdef _LIBC\n                    bool is_seqval = false;\n\n                    if (c == L_('[') && *p == L_('.'))\n                      {\n                        uint32_t nrules =\n                          _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n                        const CHAR *startp = p;\n                        size_t c1 = 0;\n\n                        while (1)\n                          {\n                            c = *++p;\n                            if (c == L_('.') && p[1] == L_(']'))\n                              {\n                                p += 2;\n                                break;\n                              }\n                            if (c == '\\0')\n                              return FNM_NOMATCH;\n                            ++c1;\n                          }\n\n                        /* We have to handling the symbols differently in\n                           ranges since then the collation sequence is\n                           important.  */\n                        is_range = *p == L_('-') && p[1] != L_('\\0');\n\n                        if (nrules == 0)\n                          {\n                            /* There are no names defined in the collation\n                               data.  Therefore we only accept the trivial\n                               names consisting of the character itself.  */\n                            if (c1 != 1)\n                              return FNM_NOMATCH;\n\n                            if (!is_range && *n == startp[1])\n                              goto matched;\n\n                            cold = startp[1];\n                            c = *p++;\n                          }\n                        else\n                          {\n                            int32_t table_size;\n                            const int32_t *symb_table;\n# ifdef WIDE_CHAR_VERSION\n                            char str[c1];\n                            size_t strcnt;\n# else\n#  define str (startp + 1)\n# endif\n                            const unsigned char *extra;\n                            int32_t idx;\n                            int32_t elem;\n                            int32_t second;\n                            int32_t hash;\n\n# ifdef WIDE_CHAR_VERSION\n                            /* We have to convert the name to a single-byte\n                               string.  This is possible since the names\n                               consist of ASCII characters and the internal\n                               representation is UCS4.  */\n                            for (strcnt = 0; strcnt < c1; ++strcnt)\n                              str[strcnt] = startp[1 + strcnt];\n# endif\n\n                            table_size =\n                              _NL_CURRENT_WORD (LC_COLLATE,\n                                                _NL_COLLATE_SYMB_HASH_SIZEMB);\n                            symb_table = (const int32_t *)\n                              _NL_CURRENT (LC_COLLATE,\n                                           _NL_COLLATE_SYMB_TABLEMB);\n                            extra = (const unsigned char *)\n                              _NL_CURRENT (LC_COLLATE,\n                                           _NL_COLLATE_SYMB_EXTRAMB);\n\n                            /* Locate the character in the hashing table.  */\n                            hash = elem_hash (str, c1);\n\n                            idx = 0;\n                            elem = hash % table_size;\n                            if (symb_table[2 * elem] != 0)\n                              {\n                                second = hash % (table_size - 2) + 1;\n\n                                do\n                                  {\n                                    /* First compare the hashing value.  */\n                                    if (symb_table[2 * elem] == hash\n                                        && (c1\n                                            == extra[symb_table[2 * elem + 1]])\n                                        && memcmp (str,\n                                                   &extra[symb_table[2 * elem\n                                                                     + 1]\n                                                          + 1], c1) == 0)\n                                      {\n                                        /* Yep, this is the entry.  */\n                                        idx = symb_table[2 * elem + 1];\n                                        idx += 1 + extra[idx];\n                                        break;\n                                      }\n\n                                    /* Next entry.  */\n                                    elem += second;\n                                  }\n                                while (symb_table[2 * elem] != 0);\n                              }\n\n                            if (symb_table[2 * elem] != 0)\n                              {\n                                /* Compare the byte sequence but only if\n                                   this is not part of a range.  */\n# ifdef WIDE_CHAR_VERSION\n                                int32_t *wextra;\n\n                                idx += 1 + extra[idx];\n                                /* Adjust for the alignment.  */\n                                idx = (idx + 3) & ~3;\n\n                                wextra = (int32_t *) &extra[idx + 4];\n# endif\n\n                                if (! is_range)\n                                  {\n# ifdef WIDE_CHAR_VERSION\n                                    for (c1 = 0;\n                                         (int32_t) c1 < wextra[idx];\n                                         ++c1)\n                                      if (n[c1] != wextra[1 + c1])\n                                        break;\n\n                                    if ((int32_t) c1 == wextra[idx])\n                                      goto matched;\n# else\n                                    for (c1 = 0; c1 < extra[idx]; ++c1)\n                                      if (n[c1] != extra[1 + c1])\n                                        break;\n\n                                    if (c1 == extra[idx])\n                                      goto matched;\n# endif\n                                  }\n\n                                /* Get the collation sequence value.  */\n                                is_seqval = true;\n# ifdef WIDE_CHAR_VERSION\n                                cold = wextra[1 + wextra[idx]];\n# else\n                                /* Adjust for the alignment.  */\n                                idx += 1 + extra[idx];\n                                idx = (idx + 3) & ~4;\n                                cold = *((int32_t *) &extra[idx]);\n# endif\n\n                                c = *p++;\n                              }\n                            else if (c1 == 1)\n                              {\n                                /* No valid character.  Match it as a\n                                   single byte.  */\n                                if (!is_range && *n == str[0])\n                                  goto matched;\n\n                                cold = str[0];\n                                c = *p++;\n                              }\n                            else\n                              return FNM_NOMATCH;\n                          }\n                      }\n                    else\n# undef str\n#endif\n                      {\n                        c = FOLD (c);\n                      normal_bracket:\n\n                        /* We have to handling the symbols differently in\n                           ranges since then the collation sequence is\n                           important.  */\n                        is_range = (*p == L_('-') && p[1] != L_('\\0')\n                                    && p[1] != L_(']'));\n\n                        if (!is_range && c == fn)\n                          goto matched;\n\n#if _LIBC\n                        /* This is needed if we goto normal_bracket; from\n                           outside of is_seqval's scope.  */\n                        is_seqval = false;\n#endif\n\n                        cold = c;\n                        c = *p++;\n                      }\n\n                    if (c == L_('-') && *p != L_(']'))\n                      {\n#if _LIBC\n                        /* We have to find the collation sequence\n                           value for C.  Collation sequence is nothing\n                           we can regularly access.  The sequence\n                           value is defined by the order in which the\n                           definitions of the collation values for the\n                           various characters appear in the source\n                           file.  A strange concept, nowhere\n                           documented.  */\n                        uint32_t fcollseq;\n                        uint32_t lcollseq;\n                        UCHAR cend = *p++;\n\n# ifdef WIDE_CHAR_VERSION\n                        /* Search in the 'names' array for the characters.  */\n                        fcollseq = __collseq_table_lookup (collseq, fn);\n                        if (fcollseq == ~((uint32_t) 0))\n                          /* XXX We don't know anything about the character\n                             we are supposed to match.  This means we are\n                             failing.  */\n                          goto range_not_matched;\n\n                        if (is_seqval)\n                          lcollseq = cold;\n                        else\n                          lcollseq = __collseq_table_lookup (collseq, cold);\n# else\n                        fcollseq = collseq[fn];\n                        lcollseq = is_seqval ? cold : collseq[(UCHAR) cold];\n# endif\n\n                        is_seqval = false;\n                        if (cend == L_('[') && *p == L_('.'))\n                          {\n                            uint32_t nrules =\n                              _NL_CURRENT_WORD (LC_COLLATE,\n                                                _NL_COLLATE_NRULES);\n                            const CHAR *startp = p;\n                            size_t c1 = 0;\n\n                            while (1)\n                              {\n                                c = *++p;\n                                if (c == L_('.') && p[1] == L_(']'))\n                                  {\n                                    p += 2;\n                                    break;\n                                  }\n                                if (c == '\\0')\n                                  return FNM_NOMATCH;\n                                ++c1;\n                              }\n\n                            if (nrules == 0)\n                              {\n                                /* There are no names defined in the\n                                   collation data.  Therefore we only\n                                   accept the trivial names consisting\n                                   of the character itself.  */\n                                if (c1 != 1)\n                                  return FNM_NOMATCH;\n\n                                cend = startp[1];\n                              }\n                            else\n                              {\n                                int32_t table_size;\n                                const int32_t *symb_table;\n# ifdef WIDE_CHAR_VERSION\n                                char str[c1];\n                                size_t strcnt;\n# else\n#  define str (startp + 1)\n# endif\n                                const unsigned char *extra;\n                                int32_t idx;\n                                int32_t elem;\n                                int32_t second;\n                                int32_t hash;\n\n# ifdef WIDE_CHAR_VERSION\n                                /* We have to convert the name to a single-byte\n                                   string.  This is possible since the names\n                                   consist of ASCII characters and the internal\n                                   representation is UCS4.  */\n                                for (strcnt = 0; strcnt < c1; ++strcnt)\n                                  str[strcnt] = startp[1 + strcnt];\n# endif\n\n                                table_size =\n                                  _NL_CURRENT_WORD (LC_COLLATE,\n                                                    _NL_COLLATE_SYMB_HASH_SIZEMB);\n                                symb_table = (const int32_t *)\n                                  _NL_CURRENT (LC_COLLATE,\n                                               _NL_COLLATE_SYMB_TABLEMB);\n                                extra = (const unsigned char *)\n                                  _NL_CURRENT (LC_COLLATE,\n                                               _NL_COLLATE_SYMB_EXTRAMB);\n\n                                /* Locate the character in the hashing\n                                   table.  */\n                                hash = elem_hash (str, c1);\n\n                                idx = 0;\n                                elem = hash % table_size;\n                                if (symb_table[2 * elem] != 0)\n                                  {\n                                    second = hash % (table_size - 2) + 1;\n\n                                    do\n                                      {\n                                        /* First compare the hashing value.  */\n                                        if (symb_table[2 * elem] == hash\n                                            && (c1\n                                                == extra[symb_table[2 * elem + 1]])\n                                            && memcmp (str,\n                                                       &extra[symb_table[2 * elem + 1]\n                                                              + 1], c1) == 0)\n                                          {\n                                            /* Yep, this is the entry.  */\n                                            idx = symb_table[2 * elem + 1];\n                                            idx += 1 + extra[idx];\n                                            break;\n                                          }\n\n                                        /* Next entry.  */\n                                        elem += second;\n                                      }\n                                    while (symb_table[2 * elem] != 0);\n                                  }\n\n                                if (symb_table[2 * elem] != 0)\n                                  {\n                                    /* Compare the byte sequence but only if\n                                       this is not part of a range.  */\n# ifdef WIDE_CHAR_VERSION\n                                    int32_t *wextra;\n\n                                    idx += 1 + extra[idx];\n                                    /* Adjust for the alignment.  */\n                                    idx = (idx + 3) & ~4;\n\n                                    wextra = (int32_t *) &extra[idx + 4];\n# endif\n                                    /* Get the collation sequence value.  */\n                                    is_seqval = true;\n# ifdef WIDE_CHAR_VERSION\n                                    cend = wextra[1 + wextra[idx]];\n# else\n                                    /* Adjust for the alignment.  */\n                                    idx += 1 + extra[idx];\n                                    idx = (idx + 3) & ~4;\n                                    cend = *((int32_t *) &extra[idx]);\n# endif\n                                  }\n                                else if (symb_table[2 * elem] != 0 && c1 == 1)\n                                  {\n                                    cend = str[0];\n                                    c = *p++;\n                                  }\n                                else\n                                  return FNM_NOMATCH;\n                              }\n# undef str\n                          }\n                        else\n                          {\n                            if (!(flags & FNM_NOESCAPE) && cend == L_('\\\\'))\n                              cend = *p++;\n                            if (cend == L_('\\0'))\n                              return FNM_NOMATCH;\n                            cend = FOLD (cend);\n                          }\n\n                        /* XXX It is not entirely clear to me how to handle\n                           characters which are not mentioned in the\n                           collation specification.  */\n                        if (\n# ifdef WIDE_CHAR_VERSION\n                            lcollseq == 0xffffffff ||\n# endif\n                            lcollseq <= fcollseq)\n                          {\n                            /* We have to look at the upper bound.  */\n                            uint32_t hcollseq;\n\n                            if (is_seqval)\n                              hcollseq = cend;\n                            else\n                              {\n# ifdef WIDE_CHAR_VERSION\n                                hcollseq =\n                                  __collseq_table_lookup (collseq, cend);\n                                if (hcollseq == ~((uint32_t) 0))\n                                  {\n                                    /* Hum, no information about the upper\n                                       bound.  The matching succeeds if the\n                                       lower bound is matched exactly.  */\n                                    if (lcollseq != fcollseq)\n                                      goto range_not_matched;\n\n                                    goto matched;\n                                  }\n# else\n                                hcollseq = collseq[cend];\n# endif\n                              }\n\n                            if (lcollseq <= hcollseq && fcollseq <= hcollseq)\n                              goto matched;\n                          }\n# ifdef WIDE_CHAR_VERSION\n                      range_not_matched:\n# endif\n#else\n                        /* We use a boring value comparison of the character\n                           values.  This is better than comparing using\n                           'strcoll' since the latter would have surprising\n                           and sometimes fatal consequences.  */\n                        UCHAR cend = *p++;\n\n                        if (!(flags & FNM_NOESCAPE) && cend == L_('\\\\'))\n                          cend = *p++;\n                        if (cend == L_('\\0'))\n                          return FNM_NOMATCH;\n\n                        /* It is a range.  */\n                        if (cold <= fn && fn <= cend)\n                          goto matched;\n#endif\n\n                        c = *p++;\n                      }\n                  }\n\n                if (c == L_(']'))\n                  break;\n              }\n\n            if (!not)\n              return FNM_NOMATCH;\n            break;\n\n          matched:\n            /* Skip the rest of the [...] that already matched.  */\n            do\n              {\n              ignore_next:\n                c = *p++;\n\n                if (c == L_('\\0'))\n                  /* [... (unterminated) loses.  */\n                  return FNM_NOMATCH;\n\n                if (!(flags & FNM_NOESCAPE) && c == L_('\\\\'))\n                  {\n                    if (*p == L_('\\0'))\n                      return FNM_NOMATCH;\n                    /* XXX 1003.2d11 is unclear if this is right.  */\n                    ++p;\n                  }\n                else if (c == L_('[') && *p == L_(':'))\n                  {\n                    int c1 = 0;\n                    const CHAR *startp = p;\n\n                    while (1)\n                      {\n                        c = *++p;\n                        if (++c1 == CHAR_CLASS_MAX_LENGTH)\n                          return FNM_NOMATCH;\n\n                        if (*p == L_(':') && p[1] == L_(']'))\n                          break;\n\n                        if (c < L_('a') || c >= L_('z'))\n                          {\n                            p = startp;\n                            goto ignore_next;\n                          }\n                      }\n                    p += 2;\n                    c = *p++;\n                  }\n                else if (c == L_('[') && *p == L_('='))\n                  {\n                    c = *++p;\n                    if (c == L_('\\0'))\n                      return FNM_NOMATCH;\n                    c = *++p;\n                    if (c != L_('=') || p[1] != L_(']'))\n                      return FNM_NOMATCH;\n                    p += 2;\n                    c = *p++;\n                  }\n                else if (c == L_('[') && *p == L_('.'))\n                  {\n                    ++p;\n                    while (1)\n                      {\n                        c = *++p;\n                        if (c == '\\0')\n                          return FNM_NOMATCH;\n\n                        if (*p == L_('.') && p[1] == L_(']'))\n                          break;\n                      }\n                    p += 2;\n                    c = *p++;\n                  }\n              }\n            while (c != L_(']'));\n            if (not)\n              return FNM_NOMATCH;\n          }\n          break;\n\n        case L_('+'):\n        case L_('@'):\n        case L_('!'):\n          if (__builtin_expect (flags & FNM_EXTMATCH, 0) && *p == '(')\n            {\n              int res;\n\n              res = EXT (c, p, n, string_end, no_leading_period, flags);\n              if (res != -1)\n                return res;\n            }\n          goto normal_match;\n\n        case L_('/'):\n          if (NO_LEADING_PERIOD (flags))\n            {\n              if (n == string_end || c != (UCHAR) *n)\n                return FNM_NOMATCH;\n\n              new_no_leading_period = true;\n              break;\n            }\n          FALLTHROUGH;\n        default:\n        normal_match:\n          if (n == string_end || c != FOLD ((UCHAR) *n))\n            return FNM_NOMATCH;\n        }\n\n      no_leading_period = new_no_leading_period;\n      ++n;\n    }\n\n  if (n == string_end)\n    return 0;\n\n  if ((flags & FNM_LEADING_DIR) && n != string_end && *n == L_('/'))\n    /* The FNM_LEADING_DIR flag says that \"foo*\" matches \"foobar/frobozz\".  */\n    return 0;\n\n  return FNM_NOMATCH;\n}",
        "lines": 959,
        "depth": 36,
        "decorators": [
          "static",
          "static",
          "int"
        ]
      },
      {
        "start_point": [
          984,
          0
        ],
        "end_point": [
          1020,
          1
        ],
        "content": "static const CHAR *\ninternal_function\nEND (const CHAR *pattern)\n{\n  const CHAR *p = pattern;\n\n  while (1)\n    if (*++p == L_('\\0'))\n      /* This is an invalid pattern.  */\n      return pattern;\n    else if (*p == L_('['))\n      {\n        /* Handle brackets special.  */\n        if (posixly_correct == 0)\n          posixly_correct = getenv (\"POSIXLY_CORRECT\") != NULL ? 1 : -1;\n\n        /* Skip the not sign.  We have to recognize it because of a possibly\n           following ']'.  */\n        if (*++p == L_('!') || (posixly_correct < 0 && *p == L_('^')))\n          ++p;\n        /* A leading ']' is recognized as such.  */\n        if (*p == L_(']'))\n          ++p;\n        /* Skip over all characters of the list.  */\n        while (*p != L_(']'))\n          if (*p++ == L_('\\0'))\n            /* This is no valid pattern.  */\n            return pattern;\n      }\n    else if ((*p == L_('?') || *p == L_('*') || *p == L_('+') || *p == L_('@')\n              || *p == L_('!')) && p[1] == L_('('))\n      p = END (p + 1);\n    else if (*p == L_(')'))\n      break;\n\n  return p + 1;\n}",
        "lines": 37,
        "depth": 18,
        "decorators": [
          "static",
          "static",
          "const",
          "const",
          "CHAR",
          "*\ninternal_function\nEND (const CHAR *pattern)",
          "*"
        ]
      },
      {
        "start_point": [
          1023,
          0
        ],
        "end_point": [
          1201,
          1
        ],
        "content": "static int\ninternal_function\nEXT (INT opt, const CHAR *pattern, const CHAR *string, const CHAR *string_end,\n     bool no_leading_period, int flags)\n{\n  const CHAR *startp;\n  size_t level;\n  struct patternlist\n  {\n    struct patternlist *next;\n    CHAR str[FLEXIBLE_ARRAY_MEMBER];\n  } *list = NULL;\n  struct patternlist **lastp = &list;\n  size_t pattern_len = STRLEN (pattern);\n  const CHAR *p;\n  const CHAR *rs;\n  enum { ALLOCA_LIMIT = 8000 };\n\n  /* Parse the pattern.  Store the individual parts in the list.  */\n  level = 0;\n  for (startp = p = pattern + 1; ; ++p)\n    if (*p == L_('\\0'))\n      /* This is an invalid pattern.  */\n      return -1;\n    else if (*p == L_('['))\n      {\n        /* Handle brackets special.  */\n        if (posixly_correct == 0)\n          posixly_correct = getenv (\"POSIXLY_CORRECT\") != NULL ? 1 : -1;\n\n        /* Skip the not sign.  We have to recognize it because of a possibly\n           following ']'.  */\n        if (*++p == L_('!') || (posixly_correct < 0 && *p == L_('^')))\n          ++p;\n        /* A leading ']' is recognized as such.  */\n        if (*p == L_(']'))\n          ++p;\n        /* Skip over all characters of the list.  */\n        while (*p != L_(']'))\n          if (*p++ == L_('\\0'))\n            /* This is no valid pattern.  */\n            return -1;\n      }\n    else if ((*p == L_('?') || *p == L_('*') || *p == L_('+') || *p == L_('@')\n              || *p == L_('!')) && p[1] == L_('('))\n      /* Remember the nesting level.  */\n      ++level;\n    else if (*p == L_(')'))\n      {\n        if (level-- == 0)\n          {\n            /* This means we found the end of the pattern.  */\n#define NEW_PATTERN \\\n            struct patternlist *newp;                                         \\\n            size_t plen;                                                      \\\n            size_t plensize;                                                  \\\n            size_t newpsize;                                                  \\\n                                                                              \\\n            plen = (opt == L_('?') || opt == L_('@')                          \\\n                    ? pattern_len                                             \\\n                    : p - startp + 1UL);                                      \\\n            plensize = plen * sizeof (CHAR);                                  \\\n            newpsize = FLEXSIZEOF (struct patternlist, str, plensize);        \\\n            if ((size_t) -1 / sizeof (CHAR) < plen                            \\\n                || newpsize < offsetof (struct patternlist, str)              \\\n                || ALLOCA_LIMIT <= newpsize)                                  \\\n              return -1;                                                      \\\n            newp = (struct patternlist *) alloca (newpsize);                  \\\n            *((CHAR *) MEMPCPY (newp->str, startp, p - startp)) = L_('\\0');    \\\n            newp->next = NULL;                                                \\\n            *lastp = newp;                                                    \\\n            lastp = &newp->next\n            NEW_PATTERN;\n            break;\n          }\n      }\n    else if (*p == L_('|'))\n      {\n        if (level == 0)\n          {\n            NEW_PATTERN;\n            startp = p + 1;\n          }\n      }\n  assert (list != NULL);\n  assert (p[-1] == L_(')'));\n#undef NEW_PATTERN\n\n  switch (opt)\n    {\n    case L_('*'):\n      if (FCT (p, string, string_end, no_leading_period, flags) == 0)\n        return 0;\n      FALLTHROUGH;\n    case L_('+'):\n      do\n        {\n          for (rs = string; rs <= string_end; ++rs)\n            /* First match the prefix with the current pattern with the\n               current pattern.  */\n            if (FCT (list->str, string, rs, no_leading_period,\n                     flags & FNM_FILE_NAME ? flags : flags & ~FNM_PERIOD) == 0\n                /* This was successful.  Now match the rest with the rest\n                   of the pattern.  */\n                && (FCT (p, rs, string_end,\n                         rs == string\n                         ? no_leading_period\n                         : rs[-1] == '/' && NO_LEADING_PERIOD (flags),\n                         flags & FNM_FILE_NAME\n                         ? flags : flags & ~FNM_PERIOD) == 0\n                    /* This didn't work.  Try the whole pattern.  */\n                    || (rs != string\n                        && FCT (pattern - 1, rs, string_end,\n                                rs == string\n                                ? no_leading_period\n                                : rs[-1] == '/' && NO_LEADING_PERIOD (flags),\n                                flags & FNM_FILE_NAME\n                                ? flags : flags & ~FNM_PERIOD) == 0)))\n              /* It worked.  Signal success.  */\n              return 0;\n        }\n      while ((list = list->next) != NULL);\n\n      /* None of the patterns lead to a match.  */\n      return FNM_NOMATCH;\n\n    case L_('?'):\n      if (FCT (p, string, string_end, no_leading_period, flags) == 0)\n        return 0;\n      FALLTHROUGH;\n    case L_('@'):\n      do\n        /* I cannot believe it but 'strcat' is actually acceptable\n           here.  Match the entire string with the prefix from the\n           pattern list and the rest of the pattern following the\n           pattern list.  */\n        if (FCT (STRCAT (list->str, p), string, string_end,\n                 no_leading_period,\n                 flags & FNM_FILE_NAME ? flags : flags & ~FNM_PERIOD) == 0)\n          /* It worked.  Signal success.  */\n          return 0;\n      while ((list = list->next) != NULL);\n\n      /* None of the patterns lead to a match.  */\n      return FNM_NOMATCH;\n\n    case L_('!'):\n      for (rs = string; rs <= string_end; ++rs)\n        {\n          struct patternlist *runp;\n\n          for (runp = list; runp != NULL; runp = runp->next)\n            if (FCT (runp->str, string, rs,  no_leading_period,\n                     flags & FNM_FILE_NAME ? flags : flags & ~FNM_PERIOD) == 0)\n              break;\n\n          /* If none of the patterns matched see whether the rest does.  */\n          if (runp == NULL\n              && (FCT (p, rs, string_end,\n                       rs == string\n                       ? no_leading_period\n                       : rs[-1] == '/' && NO_LEADING_PERIOD (flags),\n                       flags & FNM_FILE_NAME ? flags : flags & ~FNM_PERIOD)\n                  == 0))\n            /* This is successful.  */\n            return 0;\n        }\n\n      /* None of the patterns together with the rest of the pattern\n         lead to a match.  */\n      return FNM_NOMATCH;\n\n    default:\n      assert (! \"Invalid extended matching operator\");\n      break;\n    }\n\n  return -1;\n}",
        "lines": 179,
        "depth": 23,
        "decorators": [
          "static",
          "static",
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/fpending.c": {
    "__fpending": {
      "start_point": [
        28,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "content": "size_t\n__fpending (FILE *fp)\n{\n  /* Most systems provide FILE as a struct and the necessary bitmask in\n     <stdio.h>, because they need it for implementing getc() and putc() as\n     fast macros.  */\n#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */\n  return fp->_IO_write_ptr - fp->_IO_write_base;\n#elif defined __sferror || defined __DragonFly__ || defined __ANDROID__\n  /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin, Minix 3, Android */\n  return fp->_p - fp->_bf._base;\n#elif defined __EMX__                /* emx+gcc */\n  return fp->_ptr - fp->_buffer;\n#elif defined __minix                /* Minix */\n  return fp_->_ptr - fp_->_buf;\n#elif defined _IOERR                 /* AIX, HP-UX, IRIX, OSF/1, Solaris, OpenServer, mingw, MSVC, NonStop Kernel */\n  return (fp_->_ptr ? fp_->_ptr - fp_->_base : 0);\n#elif defined __UCLIBC__             /* uClibc */\n  return (fp->__modeflags & __FLAG_WRITING ? fp->__bufpos - fp->__bufstart : 0);\n#elif defined __QNX__                /* QNX */\n  return (fp->_Mode & 0x2000 /*_MWRITE*/ ? fp->_Next - fp->_Buf : 0);\n#elif defined __MINT__               /* Atari FreeMiNT */\n  return fp->__bufp - fp->__buffer;\n#elif defined EPLAN9                 /* Plan9 */\n  return fp->wp - fp->buf;\n#elif defined __VMS                  /* VMS */\n  return (*fp)->_ptr - (*fp)->_base;\n#else\n# error \"Please port gnulib fpending.c to your platform!\"\n  return 1;\n#endif\n}",
      "lines": 32,
      "depth": 18,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/fpending.h": {},
  "grep/grep-3.1/lib/fstat.c": {
    "orig_fstat": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "static int\norig_fstat (int fd, struct stat *buf)\n{\n  return fstat (fd, buf);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_fstat": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "int\nrpl_fstat (int fd, struct stat *buf)\n{\n#if REPLACE_FCHDIR && REPLACE_OPEN_DIRECTORY\n  /* Handle the case when rpl_open() used a dummy file descriptor to work\n     around an open() that can't normally visit directories.  */\n  const char *name = _gl_directory_name (fd);\n  if (name != NULL)\n    return stat (name, buf);\n#endif\n\n#ifdef WINDOWS_NATIVE\n  /* Fill the fields ourselves, because the original fstat function returns\n     values for st_atime, st_mtime, st_ctime that depend on the current time\n     zone.  See\n     <https://lists.gnu.org/archive/html/bug-gnulib/2017-04/msg00134.html>  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n\n  if (h == INVALID_HANDLE_VALUE)\n    {\n      errno = EBADF;\n      return -1;\n    }\n  return _gl_fstat_by_handle (h, NULL, buf);\n#else\n  return orig_fstat (fd, buf);\n#endif\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fstatat.c": {
    "orig_fstatat": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "static int\norig_fstatat (int fd, char const *filename, struct stat *buf, int flags)\n{\n  return fstatat (fd, filename, buf, flags);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_fstatat": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "int\nrpl_fstatat (int fd, char const *file, struct stat *st, int flag)\n{\n  int result = orig_fstatat (fd, file, st, flag);\n  size_t len;\n\n  if (LSTAT_FOLLOWS_SLASHED_SYMLINK || result != 0)\n    return result;\n  len = strlen (file);\n  if (flag & AT_SYMLINK_NOFOLLOW)\n    {\n      /* Fix lstat behavior.  */\n      if (file[len - 1] != '/' || S_ISDIR (st->st_mode))\n        return 0;\n      if (!S_ISLNK (st->st_mode))\n        {\n          errno = ENOTDIR;\n          return -1;\n        }\n      result = orig_fstatat (fd, file, st, flag & ~AT_SYMLINK_NOFOLLOW);\n    }\n  /* Fix stat behavior.  */\n  if (result == 0 && !S_ISDIR (st->st_mode) && file[len - 1] == '/')\n    {\n      errno = ENOTDIR;\n      return -1;\n    }\n  return result;\n}",
      "lines": 29,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "stat_func": {
      "start_point": [
        99,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "static int\nstat_func (char const *name, struct stat *st)\n{\n  return stat (name, st);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/fts-cycle.c": {
    "AD_compare": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "static bool\nAD_compare (void const *x, void const *y)\n{\n  struct Active_dir const *ax = x;\n  struct Active_dir const *ay = y;\n  return ax->ino == ay->ino\n      && ax->dev == ay->dev;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "AD_hash": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static size_t\nAD_hash (void const *x, size_t table_size)\n{\n  struct Active_dir const *ax = x;\n  return (uintmax_t) ax->ino % table_size;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "setup_dir": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "content": "static bool\nsetup_dir (FTS *fts)\n{\n  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))\n    {\n      enum { HT_INITIAL_SIZE = 31 };\n      fts->fts_cycle.ht = hash_initialize (HT_INITIAL_SIZE, NULL, AD_hash,\n                                           AD_compare, free);\n      if (! fts->fts_cycle.ht)\n        return false;\n    }\n  else\n    {\n      fts->fts_cycle.state = malloc (sizeof *fts->fts_cycle.state);\n      if (! fts->fts_cycle.state)\n        return false;\n      cycle_check_init (fts->fts_cycle.state);\n    }\n\n  return true;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "enter_dir": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        119,
        1
      ],
      "content": "static bool\nenter_dir (FTS *fts, FTSENT *ent)\n{\n  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))\n    {\n      struct stat const *st = ent->fts_statp;\n      struct Active_dir *ad = malloc (sizeof *ad);\n      struct Active_dir *ad_from_table;\n\n      if (!ad)\n        return false;\n\n      ad->dev = st->st_dev;\n      ad->ino = st->st_ino;\n      ad->fts_ent = ent;\n\n      /* See if we've already encountered this directory.\n         This can happen when following symlinks as well as\n         with a corrupted directory hierarchy. */\n      ad_from_table = hash_insert (fts->fts_cycle.ht, ad);\n\n      if (ad_from_table != ad)\n        {\n          free (ad);\n          if (!ad_from_table)\n            return false;\n\n          /* There was an entry with matching dev/inode already in the table.\n             Record the fact that we've found a cycle.  */\n          ent->fts_cycle = ad_from_table->fts_ent;\n          ent->fts_info = FTS_DC;\n        }\n    }\n  else\n    {\n      if (cycle_check (fts->fts_cycle.state, ent->fts_statp))\n        {\n          /* FIXME: setting fts_cycle like this isn't proper.\n             To do what the documentation requires, we'd have to\n             go around the cycle again and find the right entry.\n             But no callers in coreutils use the fts_cycle member. */\n          ent->fts_cycle = ent;\n          ent->fts_info = FTS_DC;\n        }\n    }\n\n  return true;\n}",
      "lines": 48,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "leave_dir": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "content": "static void\nleave_dir (FTS *fts, FTSENT *ent)\n{\n  struct stat const *st = ent->fts_statp;\n  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))\n    {\n      struct Active_dir obj;\n      void *found;\n      obj.dev = st->st_dev;\n      obj.ino = st->st_ino;\n      found = hash_delete (fts->fts_cycle.ht, &obj);\n      if (!found)\n        abort ();\n      free (found);\n    }\n  else\n    {\n      FTSENT *parent = ent->fts_parent;\n      if (parent != NULL && 0 <= parent->fts_level)\n        CYCLE_CHECK_REFLECT_CHDIR_UP (fts->fts_cycle.state,\n                                      *(parent->fts_statp), *st);\n    }\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "free_dir": {
      "start_point": [
        149,
        0
      ],
      "end_point": [
        159,
        1
      ],
      "content": "static void\nfree_dir (FTS *sp)\n{\n  if (sp->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))\n    {\n      if (sp->fts_cycle.ht)\n        hash_free (sp->fts_cycle.ht);\n    }\n  else\n    free (sp->fts_cycle.state);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/fts.c": {
    "fd_ring_clear": {
      "start_point": [
        278,
        0
      ],
      "end_point": [
        287,
        1
      ],
      "content": "static void\nfd_ring_clear (I_ring *fd_ring)\n{\n  while ( ! i_ring_empty (fd_ring))\n    {\n      int fd = i_ring_pop (fd_ring);\n      if (0 <= fd)\n        close (fd);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fts_set_stat_required": {
      "start_point": [
        292,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "static void\nfts_set_stat_required (FTSENT *p, bool required)\n{\n  fts_assert (p->fts_info == FTS_NSOK);\n  p->fts_statp->st_size = (required\n                           ? FTS_STAT_REQUIRED\n                           : FTS_NO_STAT_REQUIRED);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "internal_function": [
      {
        "start_point": [
          303,
          0
        ],
        "end_point": [
          325,
          1
        ],
        "content": "static DIR *\ninternal_function\nopendirat (int fd, char const *dir, int extra_flags, int *pdir_fd)\n{\n  int new_fd = openat (fd, dir,\n                       (O_RDONLY | O_DIRECTORY | O_NOCTTY | O_NONBLOCK\n                        | extra_flags));\n  DIR *dirp;\n\n  if (new_fd < 0)\n    return NULL;\n  set_cloexec_flag (new_fd, true);\n  dirp = fdopendir (new_fd);\n  if (dirp)\n    *pdir_fd = new_fd;\n  else\n    {\n      int saved_errno = errno;\n      close (new_fd);\n      errno = saved_errno;\n    }\n  return dirp;\n}",
        "lines": 23,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "DIR",
          "*\ninternal_function\nopendirat (int fd, char const *dir, int extra_flags, int *pdir_fd)",
          "*"
        ]
      },
      {
        "start_point": [
          373,
          0
        ],
        "end_point": [
          387,
          1
        ],
        "content": "static int\ninternal_function\ndiropen (FTS const *sp, char const *dir)\n{\n  int open_flags = (O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK\n                    | (ISSET (FTS_PHYSICAL) ? O_NOFOLLOW : 0)\n                    | (ISSET (FTS_NOATIME) ? O_NOATIME : 0));\n\n  int fd = (ISSET (FTS_CWDFD)\n            ? openat (sp->fts_cwd_fd, dir, open_flags)\n            : open (dir, open_flags));\n  if (0 <= fd)\n    set_cloexec_flag (fd, true);\n  return fd;\n}",
        "lines": 15,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "int"
        ]
      },
      {
        "start_point": [
          579,
          0
        ],
        "end_point": [
          601,
          1
        ],
        "content": "static void\ninternal_function\nfts_load (FTS *sp, register FTSENT *p)\n{\n        register size_t len;\n        register char *cp;\n\n        /*\n         * Load the stream structure for the next traversal.  Since we don't\n         * actually enter the directory until after the preorder visit, set\n         * the fts_accpath field specially so the chdir gets done to the right\n         * place and the user can access the first node.  From fts_open it's\n         * known that the file name will fit.\n         */\n        len = p->fts_pathlen = p->fts_namelen;\n        memmove(sp->fts_path, p->fts_name, len + 1);\n        if ((cp = strrchr(p->fts_name, '/')) && (cp != p->fts_name || cp[1])) {\n                len = strlen(++cp);\n                memmove(p->fts_name, cp, len + 1);\n                p->fts_namelen = len;\n        }\n        p->fts_accpath = p->fts_path = sp->fts_path;\n}",
        "lines": 23,
        "depth": 11,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          1298,
          0
        ],
        "end_point": [
          1666,
          1
        ],
        "content": "static FTSENT *\ninternal_function\nfts_build (register FTS *sp, int type)\n{\n        register FTSENT *p, *head;\n        register size_t nitems;\n        FTSENT *tail;\n        void *oldaddr;\n        int saved_errno;\n        bool descend;\n        bool doadjust;\n        ptrdiff_t level;\n        nlink_t nlinks;\n        bool nostat;\n        size_t len, maxlen, new_len;\n        char *cp;\n        int dir_fd;\n        FTSENT *cur = sp->fts_cur;\n        bool continue_readdir = !!cur->fts_dirp;\n        size_t max_entries;\n\n        /* When cur->fts_dirp is non-NULL, that means we should\n           continue calling readdir on that existing DIR* pointer\n           rather than opening a new one.  */\n        if (continue_readdir)\n          {\n            DIR *dp = cur->fts_dirp;\n            dir_fd = dirfd (dp);\n            if (dir_fd < 0)\n              {\n                closedir_and_clear (cur->fts_dirp);\n                if (type == BREAD)\n                  {\n                    cur->fts_info = FTS_DNR;\n                    cur->fts_errno = errno;\n                  }\n                return NULL;\n              }\n          }\n        else\n          {\n            /* Open the directory for reading.  If this fails, we're done.\n               If being called from fts_read, set the fts_info field. */\n            if ((cur->fts_dirp = fts_opendir(cur->fts_accpath, &dir_fd)) == NULL)\n              {\n                if (type == BREAD)\n                  {\n                    cur->fts_info = FTS_DNR;\n                    cur->fts_errno = errno;\n                  }\n                return NULL;\n              }\n            /* Rather than calling fts_stat for each and every entry encountered\n               in the readdir loop (below), stat each directory only right after\n               opening it.  */\n            if (cur->fts_info == FTS_NSOK)\n              cur->fts_info = fts_stat(sp, cur, false);\n            else if (sp->fts_options & FTS_TIGHT_CYCLE_CHECK)\n              {\n                /* Now read the stat info again after opening a directory to\n                   reveal eventual changes caused by a submount triggered by\n                   the traversal.  But do it only for utilities which use\n                   FTS_TIGHT_CYCLE_CHECK.  Therefore, only find and du\n                   benefit/suffer from this feature for now.  */\n                LEAVE_DIR (sp, cur, \"4\");\n                fts_stat (sp, cur, false);\n                if (! enter_dir (sp, cur))\n                  {\n                    __set_errno (ENOMEM);\n                    return NULL;\n                  }\n              }\n          }\n\n        /* Maximum number of readdir entries to read at one time.  This\n           limitation is to avoid reading millions of entries into memory\n           at once.  When an fts_compar function is specified, we have no\n           choice: we must read all entries into memory before calling that\n           function.  But when no such function is specified, we can read\n           entries in batches that are large enough to help us with inode-\n           sorting, yet not so large that we risk exhausting memory.  */\n        max_entries = sp->fts_compar ? SIZE_MAX : FTS_MAX_READDIR_ENTRIES;\n\n        /*\n         * Nlinks is the number of possible entries of type directory in the\n         * directory if we're cheating on stat calls, 0 if we're not doing\n         * any stat calls at all, (nlink_t) -1 if we're statting everything.\n         */\n        if (type == BNAMES) {\n                nlinks = 0;\n                /* Be quiet about nostat, GCC. */\n                nostat = false;\n        } else if (ISSET(FTS_NOSTAT) && ISSET(FTS_PHYSICAL)) {\n                nlinks = (cur->fts_statp->st_nlink\n                          - (ISSET(FTS_SEEDOT) ? 0 : 2));\n                nostat = true;\n        } else {\n                nlinks = -1;\n                nostat = false;\n        }\n\n        /*\n         * If we're going to need to stat anything or we want to descend\n         * and stay in the directory, chdir.  If this fails we keep going,\n         * but set a flag so we don't chdir after the post-order visit.\n         * We won't be able to stat anything, but we can still return the\n         * names themselves.  Note, that since fts_read won't be able to\n         * chdir into the directory, it will have to return different file\n         * names than before, i.e. \"a/b\" instead of \"b\".  Since the node\n         * has already been visited in pre-order, have to wait until the\n         * post-order visit to return the error.  There is a special case\n         * here, if there was nothing to stat then it's not an error to\n         * not be able to stat.  This is all fairly nasty.  If a program\n         * needed sorted entries or stat information, they had better be\n         * checking FTS_NS on the returned nodes.\n         */\n        if (continue_readdir)\n          {\n            /* When resuming a short readdir run, we already have\n               the required dirp and dir_fd.  */\n            descend = true;\n          }\n        else if (nlinks || type == BREAD) {\n                if (ISSET(FTS_CWDFD))\n                  {\n                    dir_fd = dup (dir_fd);\n                    if (0 <= dir_fd)\n                      set_cloexec_flag (dir_fd, true);\n                  }\n                if (dir_fd < 0 || fts_safe_changedir(sp, cur, dir_fd, NULL)) {\n                        if (nlinks && type == BREAD)\n                                cur->fts_errno = errno;\n                        cur->fts_flags |= FTS_DONTCHDIR;\n                        descend = false;\n                        closedir_and_clear(cur->fts_dirp);\n                        if (ISSET(FTS_CWDFD) && 0 <= dir_fd)\n                                close (dir_fd);\n                        cur->fts_dirp = NULL;\n                } else\n                        descend = true;\n        } else\n                descend = false;\n\n        /*\n         * Figure out the max file name length that can be stored in the\n         * current buffer -- the inner loop allocates more space as necessary.\n         * We really wouldn't have to do the maxlen calculations here, we\n         * could do them in fts_read before returning the name, but it's a\n         * lot easier here since the length is part of the dirent structure.\n         *\n         * If not changing directories set a pointer so that can just append\n         * each new component into the file name.\n         */\n        len = NAPPEND(cur);\n        if (ISSET(FTS_NOCHDIR)) {\n                cp = sp->fts_path + len;\n                *cp++ = '/';\n        } else {\n                /* GCC, you're too verbose. */\n                cp = NULL;\n        }\n        len++;\n        maxlen = sp->fts_pathlen - len;\n\n        level = cur->fts_level + 1;\n\n        /* Read the directory, attaching each entry to the \"link\" pointer. */\n        doadjust = false;\n        head = NULL;\n        tail = NULL;\n        nitems = 0;\n        while (cur->fts_dirp) {\n                bool is_dir;\n                size_t d_namelen;\n                __set_errno (0);\n                struct dirent *dp = readdir(cur->fts_dirp);\n                if (dp == NULL) {\n                        if (errno) {\n                                cur->fts_errno = errno;\n                                /* If we've not read any items yet, treat\n                                   the error as if we can't access the dir.  */\n                                cur->fts_info = (continue_readdir || nitems)\n                                                ? FTS_ERR : FTS_DNR;\n                        }\n                        break;\n                }\n                if (!ISSET(FTS_SEEDOT) && ISDOT(dp->d_name))\n                        continue;\n\n                d_namelen = _D_EXACT_NAMLEN (dp);\n                p = fts_alloc (sp, dp->d_name, d_namelen);\n                if (!p)\n                        goto mem1;\n                if (d_namelen >= maxlen) {\n                        /* include space for NUL */\n                        oldaddr = sp->fts_path;\n                        if (! fts_palloc(sp, d_namelen + len + 1)) {\n                                /*\n                                 * No more memory.  Save\n                                 * errno, free up the current structure and the\n                                 * structures already allocated.\n                                 */\nmem1:                           saved_errno = errno;\n                                free(p);\n                                fts_lfree(head);\n                                closedir_and_clear(cur->fts_dirp);\n                                cur->fts_info = FTS_ERR;\n                                SET(FTS_STOP);\n                                __set_errno (saved_errno);\n                                return (NULL);\n                        }\n                        /* Did realloc() change the pointer? */\n                        if (oldaddr != sp->fts_path) {\n                                doadjust = true;\n                                if (ISSET(FTS_NOCHDIR))\n                                        cp = sp->fts_path + len;\n                        }\n                        maxlen = sp->fts_pathlen - len;\n                }\n\n                new_len = len + d_namelen;\n                if (new_len < len) {\n                        /*\n                         * In the unlikely event that we would end up\n                         * with a file name longer than SIZE_MAX, free up\n                         * the current structure and the structures already\n                         * allocated, then error out with ENAMETOOLONG.\n                         */\n                        free(p);\n                        fts_lfree(head);\n                        closedir_and_clear(cur->fts_dirp);\n                        cur->fts_info = FTS_ERR;\n                        SET(FTS_STOP);\n                        __set_errno (ENAMETOOLONG);\n                        return (NULL);\n                }\n                p->fts_level = level;\n                p->fts_parent = sp->fts_cur;\n                p->fts_pathlen = new_len;\n\n                /* Store dirent.d_ino, in case we need to sort\n                   entries before processing them.  */\n                p->fts_statp->st_ino = D_INO (dp);\n\n                /* Build a file name for fts_stat to stat. */\n                if (ISSET(FTS_NOCHDIR)) {\n                        p->fts_accpath = p->fts_path;\n                        memmove(cp, p->fts_name, p->fts_namelen + 1);\n                } else\n                        p->fts_accpath = p->fts_name;\n\n                if (sp->fts_compar == NULL || ISSET(FTS_DEFER_STAT)) {\n                        /* Record what fts_read will have to do with this\n                           entry. In many cases, it will simply fts_stat it,\n                           but we can take advantage of any d_type information\n                           to optimize away the unnecessary stat calls.  I.e.,\n                           if FTS_NOSTAT is in effect and we're not following\n                           symlinks (FTS_PHYSICAL) and d_type indicates this\n                           is *not* a directory, then we won't have to stat it\n                           at all.  If it *is* a directory, then (currently)\n                           we stat it regardless, in order to get device and\n                           inode numbers.  Some day we might optimize that\n                           away, too, for directories where d_ino is known to\n                           be valid.  */\n                        bool skip_stat = (ISSET(FTS_PHYSICAL)\n                                          && ISSET(FTS_NOSTAT)\n                                          && DT_IS_KNOWN(dp)\n                                          && ! DT_MUST_BE(dp, DT_DIR));\n                        p->fts_info = FTS_NSOK;\n                        /* Propagate dirent.d_type information back\n                           to caller, when possible.  */\n                        set_stat_type (p->fts_statp, D_TYPE (dp));\n                        fts_set_stat_required(p, !skip_stat);\n                        is_dir = (ISSET(FTS_PHYSICAL)\n                                  && DT_MUST_BE(dp, DT_DIR));\n                } else {\n                        p->fts_info = fts_stat(sp, p, false);\n                        is_dir = (p->fts_info == FTS_D\n                                  || p->fts_info == FTS_DC\n                                  || p->fts_info == FTS_DOT);\n                }\n\n                /* Decrement link count if applicable. */\n                if (nlinks > 0 && is_dir)\n                        nlinks -= nostat;\n\n                /* We walk in directory order so \"ls -f\" doesn't get upset. */\n                p->fts_link = NULL;\n                if (head == NULL)\n                        head = tail = p;\n                else {\n                        tail->fts_link = p;\n                        tail = p;\n                }\n                ++nitems;\n                if (max_entries <= nitems) {\n                        /* When there are too many dir entries, leave\n                           fts_dirp open, so that a subsequent fts_read\n                           can take up where we leave off.  */\n                        goto break_without_closedir;\n                }\n        }\n\n        if (cur->fts_dirp)\n                closedir_and_clear(cur->fts_dirp);\n\n break_without_closedir:\n\n        /*\n         * If realloc() changed the address of the file name, adjust the\n         * addresses for the rest of the tree and the dir list.\n         */\n        if (doadjust)\n                fts_padjust(sp, head);\n\n        /*\n         * If not changing directories, reset the file name back to original\n         * state.\n         */\n        if (ISSET(FTS_NOCHDIR)) {\n                if (len == sp->fts_pathlen || nitems == 0)\n                        --cp;\n                *cp = '\\0';\n        }\n\n        /*\n         * If descended after called from fts_children or after called from\n         * fts_read and nothing found, get back.  At the root level we use\n         * the saved fd; if one of fts_open()'s arguments is a relative name\n         * to an empty directory, we wind up here with no other way back.  If\n         * can't get back, we're done.\n         */\n        if (!continue_readdir && descend && (type == BCHILD || !nitems) &&\n            (cur->fts_level == FTS_ROOTLEVEL\n             ? restore_initial_cwd(sp)\n             : fts_safe_changedir(sp, cur->fts_parent, -1, \"..\"))) {\n                cur->fts_info = FTS_ERR;\n                SET(FTS_STOP);\n                fts_lfree(head);\n                return (NULL);\n        }\n\n        /* If didn't find anything, return NULL. */\n        if (!nitems) {\n                if (type == BREAD\n                    && cur->fts_info != FTS_DNR && cur->fts_info != FTS_ERR)\n                        cur->fts_info = FTS_DP;\n                fts_lfree(head);\n                return (NULL);\n        }\n\n        /* If there are many entries, no sorting function has been specified,\n           and this file system is of a type that may be slow with a large\n           number of entries, then sort the directory entries on increasing\n           inode numbers.  */\n        if (nitems > _FTS_INODE_SORT_DIR_ENTRIES_THRESHOLD\n            && !sp->fts_compar\n            && ISSET (FTS_CWDFD)\n            && dirent_inode_sort_may_be_useful (sp->fts_cwd_fd)) {\n                sp->fts_compar = fts_compare_ino;\n                head = fts_sort (sp, head, nitems);\n                sp->fts_compar = NULL;\n        }\n\n        /* Sort the entries. */\n        if (sp->fts_compar && nitems > 1)\n                head = fts_sort(sp, head, nitems);\n        return (head);\n}",
        "lines": 369,
        "depth": 15,
        "decorators": [
          "static",
          "static",
          "FTSENT",
          "*\ninternal_function\nfts_build (register FTS *sp, int type)",
          "*"
        ]
      },
      {
        "start_point": [
          1875,
          0
        ],
        "end_point": [
          1923,
          1
        ],
        "content": "static FTSENT *\ninternal_function\nfts_sort (FTS *sp, FTSENT *head, register size_t nitems)\n{\n        register FTSENT **ap, *p;\n\n        /* On most modern hosts, void * and FTSENT ** have the same\n           run-time representation, and one can convert sp->fts_compar to\n           the type qsort expects without problem.  Use the heuristic that\n           this is OK if the two pointer types are the same size, and if\n           converting FTSENT ** to long int is the same as converting\n           FTSENT ** to void * and then to long int.  This heuristic isn't\n           valid in general but we don't know of any counterexamples.  */\n        FTSENT *dummy;\n        int (*compare) (void const *, void const *) =\n          ((sizeof &dummy == sizeof (void *)\n            && (long int) &dummy == (long int) (void *) &dummy)\n           ? (int (*) (void const *, void const *)) sp->fts_compar\n           : fts_compar);\n\n        /*\n         * Construct an array of pointers to the structures and call qsort(3).\n         * Reassemble the array in the order returned by qsort.  If unable to\n         * sort for memory reasons, return the directory entries in their\n         * current order.  Allocate enough space for the current needs plus\n         * 40 so don't realloc one entry at a time.\n         */\n        if (nitems > sp->fts_nitems) {\n                FTSENT **a;\n\n                sp->fts_nitems = nitems + 40;\n                if (SIZE_MAX / sizeof *a < sp->fts_nitems\n                    || ! (a = realloc (sp->fts_array,\n                                       sp->fts_nitems * sizeof *a))) {\n                        free(sp->fts_array);\n                        sp->fts_array = NULL;\n                        sp->fts_nitems = 0;\n                        return (head);\n                }\n                sp->fts_array = a;\n        }\n        for (ap = sp->fts_array, p = head; p; p = p->fts_link)\n                *ap++ = p;\n        qsort((void *)sp->fts_array, nitems, sizeof(FTSENT *), compare);\n        for (head = *(ap = sp->fts_array); --nitems; ++ap)\n                ap[0]->fts_link = ap[1];\n        ap[0]->fts_link = NULL;\n        return (head);\n}",
        "lines": 49,
        "depth": 16,
        "decorators": [
          "static",
          "static",
          "FTSENT",
          "*\ninternal_function\nfts_sort (FTS *sp, FTSENT *head, register size_t nitems)",
          "*"
        ]
      },
      {
        "start_point": [
          1925,
          0
        ],
        "end_point": [
          1954,
          1
        ],
        "content": "static FTSENT *\ninternal_function\nfts_alloc (FTS *sp, const char *name, register size_t namelen)\n{\n        register FTSENT *p;\n        size_t len;\n\n        /*\n         * The file name is a variable length array.  Allocate the FTSENT\n         * structure and the file name in one chunk.\n         */\n        len = FLEXSIZEOF(FTSENT, fts_name, namelen + 1);\n        if ((p = malloc(len)) == NULL)\n                return (NULL);\n\n        /* Copy the name and guarantee NUL termination. */\n        memcpy(p->fts_name, name, namelen);\n        p->fts_name[namelen] = '\\0';\n\n        p->fts_namelen = namelen;\n        p->fts_fts = sp;\n        p->fts_path = sp->fts_path;\n        p->fts_errno = 0;\n        p->fts_dirp = NULL;\n        p->fts_flags = 0;\n        p->fts_instr = FTS_NOINSTR;\n        p->fts_number = 0;\n        p->fts_pointer = NULL;\n        return (p);\n}",
        "lines": 30,
        "depth": 10,
        "decorators": [
          "static",
          "static",
          "FTSENT",
          "*\ninternal_function\nfts_alloc (FTS *sp, const char *name, register size_t namelen)",
          "*"
        ]
      },
      {
        "start_point": [
          1956,
          0
        ],
        "end_point": [
          1969,
          1
        ],
        "content": "static void\ninternal_function\nfts_lfree (register FTSENT *head)\n{\n        register FTSENT *p;\n\n        /* Free a linked list of structures. */\n        while ((p = head)) {\n                head = head->fts_link;\n                if (p->fts_dirp)\n                        closedir (p->fts_dirp);\n                free(p);\n        }\n}",
        "lines": 14,
        "depth": 10,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          1978,
          0
        ],
        "end_point": [
          2003,
          1
        ],
        "content": "static bool\ninternal_function\nfts_palloc (FTS *sp, size_t more)\n{\n        char *p;\n        size_t new_len = sp->fts_pathlen + more + 256;\n\n        /*\n         * See if fts_pathlen would overflow.\n         */\n        if (new_len < sp->fts_pathlen) {\n                free(sp->fts_path);\n                sp->fts_path = NULL;\n                __set_errno (ENAMETOOLONG);\n                return false;\n        }\n        sp->fts_pathlen = new_len;\n        p = realloc(sp->fts_path, sp->fts_pathlen);\n        if (p == NULL) {\n                free(sp->fts_path);\n                sp->fts_path = NULL;\n                return false;\n        }\n        sp->fts_path = p;\n        return true;\n}",
        "lines": 26,
        "depth": 9,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      }
    ],
    "cwd_advance_fd": {
      "start_point": [
        332,
        0
      ],
      "end_point": [
        355,
        1
      ],
      "content": "static void\ninternal_function\ncwd_advance_fd (FTS *sp, int fd, bool chdir_down_one)\n{\n  int old = sp->fts_cwd_fd;\n  fts_assert (old != fd || old == AT_FDCWD);\n\n  if (chdir_down_one)\n    {\n      /* Push \"old\" onto the ring.\n         If the displaced file descriptor is non-negative, close it.  */\n      int prev_fd_in_slot = i_ring_push (&sp->fts_fd_ring, old);\n      fd_ring_print (sp, stderr, \"post-push\");\n      if (0 <= prev_fd_in_slot)\n        close (prev_fd_in_slot); /* ignore any close failure */\n    }\n  else if ( ! ISSET (FTS_NOCHDIR))\n    {\n      if (0 <= old)\n        close (old); /* ignore any close failure */\n    }\n\n  sp->fts_cwd_fd = fd;\n}",
      "lines": 24,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "restore_initial_cwd": {
      "start_point": [
        361,
        0
      ],
      "end_point": [
        367,
        1
      ],
      "content": "static int\nrestore_initial_cwd (FTS *sp)\n{\n  int fail = FCHDIR (sp, ISSET (FTS_CWDFD) ? AT_FDCWD : sp->fts_rfd);\n  fd_ring_clear (&(sp->fts_fd_ring));\n  return fail;\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "fts_open": {
      "start_point": [
        389,
        0
      ],
      "end_point": [
        577,
        1
      ],
      "content": "FTS *\nfts_open (char * const *argv,\n          register int options,\n          int (*compar) (FTSENT const **, FTSENT const **))\n{\n        register FTS *sp;\n        register FTSENT *p, *root;\n        register size_t nitems;\n        FTSENT *parent = NULL;\n        FTSENT *tmp = NULL;     /* pacify gcc */\n        bool defer_stat;\n\n        /* Options check. */\n        if (options & ~FTS_OPTIONMASK) {\n                __set_errno (EINVAL);\n                return (NULL);\n        }\n        if ((options & FTS_NOCHDIR) && (options & FTS_CWDFD)) {\n                __set_errno (EINVAL);\n                return (NULL);\n        }\n        if ( ! (options & (FTS_LOGICAL | FTS_PHYSICAL))) {\n                __set_errno (EINVAL);\n                return (NULL);\n        }\n\n        /* Allocate/initialize the stream */\n        if ((sp = malloc(sizeof(FTS))) == NULL)\n                return (NULL);\n        memset(sp, 0, sizeof(FTS));\n        sp->fts_compar = compar;\n        sp->fts_options = options;\n\n        /* Logical walks turn on NOCHDIR; symbolic links are too hard. */\n        if (ISSET(FTS_LOGICAL)) {\n                SET(FTS_NOCHDIR);\n                CLR(FTS_CWDFD);\n        }\n\n        /* Initialize fts_cwd_fd.  */\n        sp->fts_cwd_fd = AT_FDCWD;\n        if ( ISSET(FTS_CWDFD) && ! HAVE_OPENAT_SUPPORT)\n          {\n            /* While it isn't technically necessary to open \".\" this\n               early, doing it here saves us the trouble of ensuring\n               later (where it'd be messier) that \".\" can in fact\n               be opened.  If not, revert to FTS_NOCHDIR mode.  */\n            int fd = open (\".\",\n                           O_SEARCH | (ISSET (FTS_NOATIME) ? O_NOATIME : 0));\n            if (fd < 0)\n              {\n                /* Even if \".\" is unreadable, don't revert to FTS_NOCHDIR mode\n                   on systems like Linux+PROC_FS, where our openat emulation\n                   is good enough.  Note: on a system that emulates\n                   openat via /proc, this technique can still fail, but\n                   only in extreme conditions, e.g., when the working\n                   directory cannot be saved (i.e. save_cwd fails) --\n                   and that happens on Linux only when \".\" is unreadable\n                   and the CWD would be longer than PATH_MAX.\n                   FIXME: once Linux kernel openat support is well established,\n                   replace the above open call and this entire if/else block\n                   with the body of the if-block below.  */\n                if ( openat_needs_fchdir ())\n                  {\n                    SET(FTS_NOCHDIR);\n                    CLR(FTS_CWDFD);\n                  }\n              }\n            else\n              {\n                close (fd);\n              }\n          }\n\n        /*\n         * Start out with 1K of file name space, and enough, in any case,\n         * to hold the user's file names.\n         */\n#ifndef MAXPATHLEN\n# define MAXPATHLEN 1024\n#endif\n        {\n          size_t maxarglen = fts_maxarglen(argv);\n          if (! fts_palloc(sp, MAX(maxarglen, MAXPATHLEN)))\n                  goto mem1;\n        }\n\n        /* Allocate/initialize root's parent. */\n        if (*argv != NULL) {\n                if ((parent = fts_alloc(sp, \"\", 0)) == NULL)\n                        goto mem2;\n                parent->fts_level = FTS_ROOTPARENTLEVEL;\n          }\n\n        /* The classic fts implementation would call fts_stat with\n           a new entry for each iteration of the loop below.\n           If the comparison function is not specified or if the\n           FTS_DEFER_STAT option is in effect, don't stat any entry\n           in this loop.  This is an attempt to minimize the interval\n           between the initial stat/lstat/fstatat and the point at which\n           a directory argument is first opened.  This matters for any\n           directory command line argument that resides on a file system\n           without genuine i-nodes.  If you specify FTS_DEFER_STAT along\n           with a comparison function, that function must not access any\n           data via the fts_statp pointer.  */\n        defer_stat = (compar == NULL || ISSET(FTS_DEFER_STAT));\n\n        /* Allocate/initialize root(s). */\n        for (root = NULL, nitems = 0; *argv != NULL; ++argv, ++nitems) {\n                /* *Do* allow zero-length file names. */\n                size_t len = strlen(*argv);\n\n                if ( ! (options & FTS_VERBATIM))\n                  {\n                    /* If there are two or more trailing slashes, trim all but one,\n                       but don't change \"//\" to \"/\", and do map \"///\" to \"/\".  */\n                    char const *v = *argv;\n                    if (2 < len && v[len - 1] == '/')\n                      while (1 < len && v[len - 2] == '/')\n                        --len;\n                  }\n\n                if ((p = fts_alloc(sp, *argv, len)) == NULL)\n                        goto mem3;\n                p->fts_level = FTS_ROOTLEVEL;\n                p->fts_parent = parent;\n                p->fts_accpath = p->fts_name;\n                /* Even when defer_stat is true, be sure to stat the first\n                   command line argument, since fts_read (at least with\n                   FTS_XDEV) requires that.  */\n                if (defer_stat && root != NULL) {\n                        p->fts_info = FTS_NSOK;\n                        fts_set_stat_required(p, true);\n                } else {\n                        p->fts_info = fts_stat(sp, p, false);\n                }\n\n                /*\n                 * If comparison routine supplied, traverse in sorted\n                 * order; otherwise traverse in the order specified.\n                 */\n                if (compar) {\n                        p->fts_link = root;\n                        root = p;\n                } else {\n                        p->fts_link = NULL;\n                        if (root == NULL)\n                                tmp = root = p;\n                        else {\n                                tmp->fts_link = p;\n                                tmp = p;\n                        }\n                }\n        }\n        if (compar && nitems > 1)\n                root = fts_sort(sp, root, nitems);\n\n        /*\n         * Allocate a dummy pointer and make fts_read think that we've just\n         * finished the node before the root(s); set p->fts_info to FTS_INIT\n         * so that everything about the \"current\" node is ignored.\n         */\n        if ((sp->fts_cur = fts_alloc(sp, \"\", 0)) == NULL)\n                goto mem3;\n        sp->fts_cur->fts_link = root;\n        sp->fts_cur->fts_info = FTS_INIT;\n        if (! setup_dir (sp))\n                goto mem3;\n\n        /*\n         * If using chdir(2), grab a file descriptor pointing to dot to ensure\n         * that we can get back here; this could be avoided for some file names,\n         * but almost certainly not worth the effort.  Slashes, symbolic links,\n         * and \"..\" are all fairly nasty problems.  Note, if we can't get the\n         * descriptor we run anyway, just more slowly.\n         */\n        if (!ISSET(FTS_NOCHDIR) && !ISSET(FTS_CWDFD)\n            && (sp->fts_rfd = diropen (sp, \".\")) < 0)\n                SET(FTS_NOCHDIR);\n\n        i_ring_init (&sp->fts_fd_ring, -1);\n        return (sp);\n\nmem3:   fts_lfree(root);\n        free(parent);\nmem2:   free(sp->fts_path);\nmem1:   free(sp);\n        return (NULL);\n}",
      "lines": 189,
      "depth": 14,
      "decorators": [
        "FTS",
        "*\nfts_open (char * const *argv,\n          register int options,\n          int (*compar) (FTSENT const **, FTSENT const **))",
        "*"
      ]
    },
    "fts_close": {
      "start_point": [
        603,
        0
      ],
      "end_point": [
        665,
        1
      ],
      "content": "int\nfts_close (FTS *sp)\n{\n        register FTSENT *freep, *p;\n        int saved_errno = 0;\n\n        /*\n         * This still works if we haven't read anything -- the dummy structure\n         * points to the root list, so we step through to the end of the root\n         * list which has a valid parent pointer.\n         */\n        if (sp->fts_cur) {\n                for (p = sp->fts_cur; p->fts_level >= FTS_ROOTLEVEL;) {\n                        freep = p;\n                        p = p->fts_link != NULL ? p->fts_link : p->fts_parent;\n                        free(freep);\n                }\n                free(p);\n        }\n\n        /* Free up child linked list, sort array, file name buffer. */\n        if (sp->fts_child)\n                fts_lfree(sp->fts_child);\n        free(sp->fts_array);\n        free(sp->fts_path);\n\n        if (ISSET(FTS_CWDFD))\n          {\n            if (0 <= sp->fts_cwd_fd)\n              if (close (sp->fts_cwd_fd))\n                saved_errno = errno;\n          }\n        else if (!ISSET(FTS_NOCHDIR))\n          {\n            /* Return to original directory, save errno if necessary. */\n            if (fchdir(sp->fts_rfd))\n              saved_errno = errno;\n\n            /* If close fails, record errno only if saved_errno is zero,\n               so that we report the probably-more-meaningful fchdir errno.  */\n            if (close (sp->fts_rfd))\n              if (saved_errno == 0)\n                saved_errno = errno;\n          }\n\n        fd_ring_clear (&sp->fts_fd_ring);\n\n        if (sp->fts_leaf_optimization_works_ht)\n          hash_free (sp->fts_leaf_optimization_works_ht);\n\n        free_dir (sp);\n\n        /* Free up the stream pointer. */\n        free(sp);\n\n        /* Set errno and return. */\n        if (saved_errno) {\n                __set_errno (saved_errno);\n                return (-1);\n        }\n\n        return (0);\n}",
      "lines": 63,
      "depth": 12,
      "decorators": [
        "int"
      ]
    },
    "dirent_inode_sort_may_be_useful": [
      {
        "start_point": [
          683,
          0
        ],
        "end_point": [
          710,
          1
        ],
        "content": "static bool\ndirent_inode_sort_may_be_useful (int dir_fd)\n{\n  /* Skip the sort only if we can determine efficiently\n     that skipping it is the right thing to do.\n     The cost of performing an unnecessary sort is negligible,\n     while the cost of *not* performing it can be O(N^2) with\n     a very large constant.  */\n  struct statfs fs_buf;\n\n  /* If fstatfs fails, assume sorting would be useful.  */\n  if (fstatfs (dir_fd, &fs_buf) != 0)\n    return true;\n\n  /* FIXME: what about when f_type is not an integral type?\n     deal with that if/when it's encountered.  */\n  switch (fs_buf.f_type)\n    {\n    case S_MAGIC_TMPFS:\n    case S_MAGIC_NFS:\n      /* On a file system of any of these types, sorting\n         is unnecessary, and hence wasteful.  */\n      return false;\n\n    default:\n      return true;\n    }\n}",
        "lines": 28,
        "depth": 9,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      },
      {
        "start_point": [
          753,
          0
        ],
        "end_point": [
          754,
          72
        ],
        "content": "static bool\ndirent_inode_sort_may_be_useful (int dir_fd _GL_UNUSED) { return true; }",
        "lines": 2,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      }
    ],
    "leaf_optimization_applies": [
      {
        "start_point": [
          715,
          0
        ],
        "end_point": [
          750,
          1
        ],
        "content": "static bool\nleaf_optimization_applies (int dir_fd)\n{\n  struct statfs fs_buf;\n\n  /* If fstatfs fails, assume we can't use the optimization.  */\n  if (fstatfs (dir_fd, &fs_buf) != 0)\n    return false;\n\n  /* FIXME: do we need to detect AFS mount points?  I doubt it,\n     unless fstatfs can report S_MAGIC_REISERFS for such a directory.  */\n\n  switch (fs_buf.f_type)\n    {\n      /* List here the file system types that lack usable dirent.d_type\n         info, yet for which the optimization does apply.  */\n    case S_MAGIC_REISERFS:\n    case S_MAGIC_XFS:\n      return true;\n\n      /* Explicitly list here any other file system type for which the\n         optimization is not applicable, but need documentation.  */\n    case S_MAGIC_NFS:\n      /* NFS provides usable dirent.d_type but not necessarily for all entries\n         of large directories, so as per <https://bugzilla.redhat.com/1252549>\n         NFS should return true.  However st_nlink values are not accurate on\n         all implementations as per <https://bugzilla.redhat.com/1299169>.  */\n      FALLTHROUGH;\n    case S_MAGIC_PROC:\n      /* Per <http://bugs.debian.org/143111> /proc may have\n         bogus stat.st_nlink values.  */\n      FALLTHROUGH;\n    default:\n      return false;\n    }\n}",
        "lines": 36,
        "depth": 9,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      },
      {
        "start_point": [
          755,
          0
        ],
        "end_point": [
          756,
          67
        ],
        "content": "static bool\nleaf_optimization_applies (int dir_fd _GL_UNUSED) { return false; }",
        "lines": 2,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      }
    ],
    "LCO_hash": {
      "start_point": [
        772,
        0
      ],
      "end_point": [
        777,
        1
      ],
      "content": "static size_t\nLCO_hash (void const *x, size_t table_size)\n{\n  struct LCO_ent const *ax = x;\n  return (uintmax_t) ax->st_dev % table_size;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "LCO_compare": {
      "start_point": [
        779,
        0
      ],
      "end_point": [
        785,
        1
      ],
      "content": "static bool\nLCO_compare (void const *x, void const *y)\n{\n  struct LCO_ent const *ax = x;\n  struct LCO_ent const *ay = y;\n  return ax->st_dev == ay->st_dev;\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "link_count_optimize_ok": {
      "start_point": [
        790,
        0
      ],
      "end_point": [
        839,
        1
      ],
      "content": "static bool\nlink_count_optimize_ok (FTSENT const *p)\n{\n  FTS *sp = p->fts_fts;\n  Hash_table *h = sp->fts_leaf_optimization_works_ht;\n  struct LCO_ent tmp;\n  struct LCO_ent *ent;\n  bool opt_ok;\n  struct LCO_ent *t2;\n\n  /* If we're not in CWDFD mode, don't bother with this optimization,\n     since the caller is not serious about performance. */\n  if (!ISSET(FTS_CWDFD))\n    return false;\n\n  /* map st_dev to the boolean, leaf_optimization_works */\n  if (h == NULL)\n    {\n      h = sp->fts_leaf_optimization_works_ht\n        = hash_initialize (LCO_HT_INITIAL_SIZE, NULL, LCO_hash,\n                           LCO_compare, free);\n      if (h == NULL)\n        return false;\n    }\n  tmp.st_dev = p->fts_statp->st_dev;\n  ent = hash_lookup (h, &tmp);\n  if (ent)\n    return ent->opt_ok;\n\n  /* Look-up failed.  Query directly and cache the result.  */\n  t2 = malloc (sizeof *t2);\n  if (t2 == NULL)\n    return false;\n\n  /* Is it ok to perform the optimization in the dir, FTS_CWD_FD?  */\n  opt_ok = leaf_optimization_applies (sp->fts_cwd_fd);\n  t2->opt_ok = opt_ok;\n  t2->st_dev = p->fts_statp->st_dev;\n\n  ent = hash_insert (h, t2);\n  if (ent == NULL)\n    {\n      /* insertion failed */\n      free (t2);\n      return false;\n    }\n  fts_assert (ent == t2);\n\n  return opt_ok;\n}",
      "lines": 50,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fts_read": {
      "start_point": [
        849,
        0
      ],
      "end_point": [
        1119,
        1
      ],
      "content": "FTSENT *\nfts_read (register FTS *sp)\n{\n        register FTSENT *p, *tmp;\n        register unsigned short int instr;\n        register char *t;\n\n        /* If finished or unrecoverable error, return NULL. */\n        if (sp->fts_cur == NULL || ISSET(FTS_STOP))\n                return (NULL);\n\n        /* Set current node pointer. */\n        p = sp->fts_cur;\n\n        /* Save and zero out user instructions. */\n        instr = p->fts_instr;\n        p->fts_instr = FTS_NOINSTR;\n\n        /* Any type of file may be re-visited; re-stat and re-turn. */\n        if (instr == FTS_AGAIN) {\n                p->fts_info = fts_stat(sp, p, false);\n                return (p);\n        }\n        Dprintf ((\"fts_read: p=%s\\n\",\n                  p->fts_info == FTS_INIT ? \"\" : p->fts_path));\n\n        /*\n         * Following a symlink -- SLNONE test allows application to see\n         * SLNONE and recover.  If indirecting through a symlink, have\n         * keep a pointer to current location.  If unable to get that\n         * pointer, follow fails.\n         */\n        if (instr == FTS_FOLLOW &&\n            (p->fts_info == FTS_SL || p->fts_info == FTS_SLNONE)) {\n                p->fts_info = fts_stat(sp, p, true);\n                if (p->fts_info == FTS_D && !ISSET(FTS_NOCHDIR)) {\n                        if ((p->fts_symfd = diropen (sp, \".\")) < 0) {\n                                p->fts_errno = errno;\n                                p->fts_info = FTS_ERR;\n                        } else\n                                p->fts_flags |= FTS_SYMFOLLOW;\n                }\n                goto check_for_dir;\n        }\n\n        /* Directory in pre-order. */\n        if (p->fts_info == FTS_D) {\n                /* If skipped or crossed mount point, do post-order visit. */\n                if (instr == FTS_SKIP ||\n                    (ISSET(FTS_XDEV) && p->fts_statp->st_dev != sp->fts_dev)) {\n                        if (p->fts_flags & FTS_SYMFOLLOW)\n                                (void)close(p->fts_symfd);\n                        if (sp->fts_child) {\n                                fts_lfree(sp->fts_child);\n                                sp->fts_child = NULL;\n                        }\n                        p->fts_info = FTS_DP;\n                        LEAVE_DIR (sp, p, \"1\");\n                        return (p);\n                }\n\n                /* Rebuild if only read the names and now traversing. */\n                if (sp->fts_child != NULL && ISSET(FTS_NAMEONLY)) {\n                        CLR(FTS_NAMEONLY);\n                        fts_lfree(sp->fts_child);\n                        sp->fts_child = NULL;\n                }\n\n                /*\n                 * Cd to the subdirectory.\n                 *\n                 * If have already read and now fail to chdir, whack the list\n                 * to make the names come out right, and set the parent errno\n                 * so the application will eventually get an error condition.\n                 * Set the FTS_DONTCHDIR flag so that when we logically change\n                 * directories back to the parent we don't do a chdir.\n                 *\n                 * If haven't read do so.  If the read fails, fts_build sets\n                 * FTS_STOP or the fts_info field of the node.\n                 */\n                if (sp->fts_child != NULL) {\n                        if (fts_safe_changedir(sp, p, -1, p->fts_accpath)) {\n                                p->fts_errno = errno;\n                                p->fts_flags |= FTS_DONTCHDIR;\n                                for (p = sp->fts_child; p != NULL;\n                                     p = p->fts_link)\n                                        p->fts_accpath =\n                                            p->fts_parent->fts_accpath;\n                        }\n                } else if ((sp->fts_child = fts_build(sp, BREAD)) == NULL) {\n                        if (ISSET(FTS_STOP))\n                                return (NULL);\n                        /* If fts_build's call to fts_safe_changedir failed\n                           because it was not able to fchdir into a\n                           subdirectory, tell the caller.  */\n                        if (p->fts_errno && p->fts_info != FTS_DNR)\n                                p->fts_info = FTS_ERR;\n                        LEAVE_DIR (sp, p, \"2\");\n                        return (p);\n                }\n                p = sp->fts_child;\n                sp->fts_child = NULL;\n                goto name;\n        }\n\n        /* Move to the next node on this level. */\nnext:   tmp = p;\n\n        /* If we have so many directory entries that we're reading them\n           in batches, and we've reached the end of the current batch,\n           read in a new batch.  */\n        if (p->fts_link == NULL && p->fts_parent->fts_dirp)\n          {\n            p = tmp->fts_parent;\n            sp->fts_cur = p;\n            sp->fts_path[p->fts_pathlen] = '\\0';\n\n            if ((p = fts_build (sp, BREAD)) == NULL)\n              {\n                if (ISSET(FTS_STOP))\n                  return NULL;\n                goto cd_dot_dot;\n              }\n\n            free(tmp);\n            goto name;\n          }\n\n        if ((p = p->fts_link) != NULL) {\n                sp->fts_cur = p;\n                free(tmp);\n\n                /*\n                 * If reached the top, return to the original directory (or\n                 * the root of the tree), and load the file names for the next\n                 * root.\n                 */\n                if (p->fts_level == FTS_ROOTLEVEL) {\n                        if (restore_initial_cwd(sp)) {\n                                SET(FTS_STOP);\n                                return (NULL);\n                        }\n                        free_dir(sp);\n                        fts_load(sp, p);\n                        setup_dir(sp);\n                        goto check_for_dir;\n                }\n\n                /*\n                 * User may have called fts_set on the node.  If skipped,\n                 * ignore.  If followed, get a file descriptor so we can\n                 * get back if necessary.\n                 */\n                if (p->fts_instr == FTS_SKIP)\n                        goto next;\n                if (p->fts_instr == FTS_FOLLOW) {\n                        p->fts_info = fts_stat(sp, p, true);\n                        if (p->fts_info == FTS_D && !ISSET(FTS_NOCHDIR)) {\n                                if ((p->fts_symfd = diropen (sp, \".\")) < 0) {\n                                        p->fts_errno = errno;\n                                        p->fts_info = FTS_ERR;\n                                } else\n                                        p->fts_flags |= FTS_SYMFOLLOW;\n                        }\n                        p->fts_instr = FTS_NOINSTR;\n                }\n\nname:           t = sp->fts_path + NAPPEND(p->fts_parent);\n                *t++ = '/';\n                memmove(t, p->fts_name, p->fts_namelen + 1);\ncheck_for_dir:\n                sp->fts_cur = p;\n                if (p->fts_info == FTS_NSOK)\n                  {\n                    if (p->fts_statp->st_size == FTS_STAT_REQUIRED)\n                      {\n                        FTSENT *parent = p->fts_parent;\n                        if (FTS_ROOTLEVEL < p->fts_level\n                            /* ->fts_n_dirs_remaining is not valid\n                               for command-line-specified names.  */\n                            && parent->fts_n_dirs_remaining == 0\n                            && ISSET(FTS_NOSTAT)\n                            && ISSET(FTS_PHYSICAL)\n                            && link_count_optimize_ok (parent))\n                          {\n                            /* nothing more needed */\n                          }\n                        else\n                          {\n                            p->fts_info = fts_stat(sp, p, false);\n                            if (S_ISDIR(p->fts_statp->st_mode)\n                                && p->fts_level != FTS_ROOTLEVEL\n                                && parent->fts_n_dirs_remaining)\n                                  parent->fts_n_dirs_remaining--;\n                          }\n                      }\n                    else\n                      fts_assert (p->fts_statp->st_size == FTS_NO_STAT_REQUIRED);\n                  }\n\n                if (p->fts_info == FTS_D)\n                  {\n                    /* Now that P->fts_statp is guaranteed to be valid,\n                       if this is a command-line directory, record its\n                       device number, to be used for FTS_XDEV.  */\n                    if (p->fts_level == FTS_ROOTLEVEL)\n                      sp->fts_dev = p->fts_statp->st_dev;\n                    Dprintf ((\"  entering: %s\\n\", p->fts_path));\n                    if (! enter_dir (sp, p))\n                      {\n                        __set_errno (ENOMEM);\n                        return NULL;\n                      }\n                  }\n                return p;\n        }\ncd_dot_dot:\n\n        /* Move up to the parent node. */\n        p = tmp->fts_parent;\n        sp->fts_cur = p;\n        free(tmp);\n\n        if (p->fts_level == FTS_ROOTPARENTLEVEL) {\n                /*\n                 * Done; free everything up and set errno to 0 so the user\n                 * can distinguish between error and EOF.\n                 */\n                free(p);\n                __set_errno (0);\n                return (sp->fts_cur = NULL);\n        }\n\n        fts_assert (p->fts_info != FTS_NSOK);\n\n        /* NUL terminate the file name.  */\n        sp->fts_path[p->fts_pathlen] = '\\0';\n\n        /*\n         * Return to the parent directory.  If at a root node, restore\n         * the initial working directory.  If we came through a symlink,\n         * go back through the file descriptor.  Otherwise, move up\n         * one level, via \"..\".\n         */\n        if (p->fts_level == FTS_ROOTLEVEL) {\n                if (restore_initial_cwd(sp)) {\n                        p->fts_errno = errno;\n                        SET(FTS_STOP);\n                }\n        } else if (p->fts_flags & FTS_SYMFOLLOW) {\n                if (FCHDIR(sp, p->fts_symfd)) {\n                        p->fts_errno = errno;\n                        SET(FTS_STOP);\n                }\n                (void)close(p->fts_symfd);\n        } else if (!(p->fts_flags & FTS_DONTCHDIR) &&\n                   fts_safe_changedir(sp, p->fts_parent, -1, \"..\")) {\n                p->fts_errno = errno;\n                SET(FTS_STOP);\n        }\n\n        /* If the directory causes a cycle, preserve the FTS_DC flag and keep\n           the corresponding dev/ino pair in the hash table.  It is going to be\n           removed when leaving the original directory.  */\n        if (p->fts_info != FTS_DC) {\n                p->fts_info = p->fts_errno ? FTS_ERR : FTS_DP;\n                if (p->fts_errno == 0)\n                        LEAVE_DIR (sp, p, \"3\");\n        }\n        return ISSET(FTS_STOP) ? NULL : p;\n}",
      "lines": 271,
      "depth": 19,
      "decorators": [
        "FTSENT",
        "*\nfts_read (register FTS *sp)",
        "*"
      ]
    },
    "fts_set": {
      "start_point": [
        1128,
        0
      ],
      "end_point": [
        1138,
        1
      ],
      "content": "int\nfts_set(FTS *sp _GL_UNUSED, FTSENT *p, int instr)\n{\n        if (instr != 0 && instr != FTS_AGAIN && instr != FTS_FOLLOW &&\n            instr != FTS_NOINSTR && instr != FTS_SKIP) {\n                __set_errno (EINVAL);\n                return (1);\n        }\n        p->fts_instr = instr;\n        return (0);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "fts_children": {
      "start_point": [
        1140,
        0
      ],
      "end_point": [
        1216,
        1
      ],
      "content": "FTSENT *\nfts_children (register FTS *sp, int instr)\n{\n        register FTSENT *p;\n        int fd;\n\n        if (instr != 0 && instr != FTS_NAMEONLY) {\n                __set_errno (EINVAL);\n                return (NULL);\n        }\n\n        /* Set current node pointer. */\n        p = sp->fts_cur;\n\n        /*\n         * Errno set to 0 so user can distinguish empty directory from\n         * an error.\n         */\n        __set_errno (0);\n\n        /* Fatal errors stop here. */\n        if (ISSET(FTS_STOP))\n                return (NULL);\n\n        /* Return logical hierarchy of user's arguments. */\n        if (p->fts_info == FTS_INIT)\n                return (p->fts_link);\n\n        /*\n         * If not a directory being visited in pre-order, stop here.  Could\n         * allow FTS_DNR, assuming the user has fixed the problem, but the\n         * same effect is available with FTS_AGAIN.\n         */\n        if (p->fts_info != FTS_D /* && p->fts_info != FTS_DNR */)\n                return (NULL);\n\n        /* Free up any previous child list. */\n        if (sp->fts_child != NULL)\n                fts_lfree(sp->fts_child);\n\n        if (instr == FTS_NAMEONLY) {\n                SET(FTS_NAMEONLY);\n                instr = BNAMES;\n        } else\n                instr = BCHILD;\n\n        /*\n         * If using chdir on a relative file name and called BEFORE fts_read\n         * does its chdir to the root of a traversal, we can lose -- we need to\n         * chdir into the subdirectory, and we don't know where the current\n         * directory is, so we can't get back so that the upcoming chdir by\n         * fts_read will work.\n         */\n        if (p->fts_level != FTS_ROOTLEVEL || p->fts_accpath[0] == '/' ||\n            ISSET(FTS_NOCHDIR))\n                return (sp->fts_child = fts_build(sp, instr));\n\n        if ((fd = diropen (sp, \".\")) < 0)\n                return (sp->fts_child = NULL);\n        sp->fts_child = fts_build(sp, instr);\n        if (ISSET(FTS_CWDFD))\n          {\n            cwd_advance_fd (sp, fd, true);\n          }\n        else\n          {\n            if (fchdir(fd))\n              {\n                int saved_errno = errno;\n                close (fd);\n                __set_errno (saved_errno);\n                return NULL;\n              }\n            close (fd);\n          }\n        return (sp->fts_child);\n}",
      "lines": 77,
      "depth": 11,
      "decorators": [
        "FTSENT",
        "*\nfts_children (register FTS *sp, int instr)",
        "*"
      ]
    },
    "fts_compare_ino": {
      "start_point": [
        1223,
        0
      ],
      "end_point": [
        1228,
        1
      ],
      "content": "static int\nfts_compare_ino (struct _ftsent const **a, struct _ftsent const **b)\n{\n  return (a[0]->fts_statp->st_ino < b[0]->fts_statp->st_ino ? -1\n          : b[0]->fts_statp->st_ino < a[0]->fts_statp->st_ino ? 1 : 0);\n}",
      "lines": 6,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "set_stat_type": {
      "start_point": [
        1232,
        0
      ],
      "end_point": [
        1263,
        1
      ],
      "content": "static void\nset_stat_type (struct stat *st, unsigned int dtype)\n{\n  mode_t type;\n  switch (dtype)\n    {\n    case DT_BLK:\n      type = S_IFBLK;\n      break;\n    case DT_CHR:\n      type = S_IFCHR;\n      break;\n    case DT_DIR:\n      type = S_IFDIR;\n      break;\n    case DT_FIFO:\n      type = S_IFIFO;\n      break;\n    case DT_LNK:\n      type = S_IFLNK;\n      break;\n    case DT_REG:\n      type = S_IFREG;\n      break;\n    case DT_SOCK:\n      type = S_IFSOCK;\n      break;\n    default:\n      type = 0;\n    }\n  st->st_mode = type;\n}",
      "lines": 32,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "find_matching_ancestor": {
      "start_point": [
        1673,
        0
      ],
      "end_point": [
        1694,
        1
      ],
      "content": "static void\nfind_matching_ancestor (FTSENT const *e_curr, struct Active_dir const *ad)\n{\n  FTSENT const *ent;\n  for (ent = e_curr; ent->fts_level >= FTS_ROOTLEVEL; ent = ent->fts_parent)\n    {\n      if (ad->ino == ent->fts_statp->st_ino\n          && ad->dev == ent->fts_statp->st_dev)\n        return;\n    }\n  printf (\"ERROR: tree dir, %s, not active\\n\", ad->fts_ent->fts_accpath);\n  printf (\"active dirs:\\n\");\n  for (ent = e_curr;\n       ent->fts_level >= FTS_ROOTLEVEL; ent = ent->fts_parent)\n    printf (\"  %s(%\"PRIuMAX\"/%\"PRIuMAX\") to %s(%\"PRIuMAX\"/%\"PRIuMAX\")...\\n\",\n            ad->fts_ent->fts_accpath,\n            (uintmax_t) ad->dev,\n            (uintmax_t) ad->ino,\n            ent->fts_accpath,\n            (uintmax_t) ent->fts_statp->st_dev,\n            (uintmax_t) ent->fts_statp->st_ino);\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fts_cross_check": {
      "start_point": [
        1696,
        0
      ],
      "end_point": [
        1728,
        1
      ],
      "content": "void\nfts_cross_check (FTS const *sp)\n{\n  FTSENT const *ent = sp->fts_cur;\n  FTSENT const *t;\n  if ( ! ISSET (FTS_TIGHT_CYCLE_CHECK))\n    return;\n\n  Dprintf ((\"fts-cross-check cur=%s\\n\", ent->fts_path));\n  /* Make sure every parent dir is in the tree.  */\n  for (t = ent->fts_parent; t->fts_level >= FTS_ROOTLEVEL; t = t->fts_parent)\n    {\n      struct Active_dir ad;\n      ad.ino = t->fts_statp->st_ino;\n      ad.dev = t->fts_statp->st_dev;\n      if ( ! hash_lookup (sp->fts_cycle.ht, &ad))\n        printf (\"ERROR: active dir, %s, not in tree\\n\", t->fts_path);\n    }\n\n  /* Make sure every dir in the tree is an active dir.\n     But ENT is not necessarily a directory.  If so, just skip this part. */\n  if (ent->fts_parent->fts_level >= FTS_ROOTLEVEL\n      && (ent->fts_info == FTS_DP\n          || ent->fts_info == FTS_D))\n    {\n      struct Active_dir *ad;\n      for (ad = hash_get_first (sp->fts_cycle.ht); ad != NULL;\n           ad = hash_get_next (sp->fts_cycle.ht, ad))\n        {\n          find_matching_ancestor (ent, ad);\n        }\n    }\n}",
      "lines": 33,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "same_fd": {
      "start_point": [
        1730,
        0
      ],
      "end_point": [
        1737,
        1
      ],
      "content": "static bool\nsame_fd (int fd1, int fd2)\n{\n  struct stat sb1, sb2;\n  return (fstat (fd1, &sb1) == 0\n          && fstat (fd2, &sb2) == 0\n          && SAME_INODE (sb1, sb2));\n}",
      "lines": 8,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fd_ring_print": {
      "start_point": [
        1739,
        0
      ],
      "end_point": [
        1765,
        1
      ],
      "content": "static void\nfd_ring_print (FTS const *sp, FILE *stream, char const *msg)\n{\n  I_ring const *fd_ring = &sp->fts_fd_ring;\n  unsigned int i = fd_ring->fts_front;\n  char *cwd = getcwdat (sp->fts_cwd_fd, NULL, 0);\n  fprintf (stream, \"=== %s ========== %s\\n\", msg, cwd);\n  free (cwd);\n  if (i_ring_empty (fd_ring))\n    return;\n\n  while (true)\n    {\n      int fd = fd_ring->fts_fd_ring[i];\n      if (fd < 0)\n        fprintf (stream, \"%d: %d:\\n\", i, fd);\n      else\n        {\n          char *wd = getcwdat (fd, NULL, 0);\n          fprintf (stream, \"%d: %d: %s\\n\", i, fd, wd);\n          free (wd);\n        }\n      if (i == fd_ring->fts_back)\n        break;\n      i = (i + I_RING_SIZE - 1) % I_RING_SIZE;\n    }\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fd_ring_check": {
      "start_point": [
        1769,
        0
      ],
      "end_point": [
        1809,
        1
      ],
      "content": "static void\nfd_ring_check (FTS const *sp)\n{\n  if (!fts_debug)\n    return;\n\n  /* Make a writable copy.  */\n  I_ring fd_w = sp->fts_fd_ring;\n\n  int cwd_fd = sp->fts_cwd_fd;\n  cwd_fd = dup (cwd_fd);\n  char *dot = getcwdat (cwd_fd, NULL, 0);\n  error (0, 0, \"===== check ===== cwd: %s\", dot);\n  free (dot);\n  while ( ! i_ring_empty (&fd_w))\n    {\n      int fd = i_ring_pop (&fd_w);\n      if (0 <= fd)\n        {\n          int parent_fd = openat (cwd_fd, \"..\", O_SEARCH | O_NOATIME);\n          if (parent_fd < 0)\n            {\n              // Warn?\n              break;\n            }\n          if (!same_fd (fd, parent_fd))\n            {\n              char *cwd = getcwdat (fd, NULL, 0);\n              error (0, errno, \"ring  : %s\", cwd);\n              char *c2 = getcwdat (parent_fd, NULL, 0);\n              error (0, errno, \"parent: %s\", c2);\n              free (cwd);\n              free (c2);\n              fts_assert (0);\n            }\n          close (cwd_fd);\n          cwd_fd = parent_fd;\n        }\n    }\n  close (cwd_fd);\n}",
      "lines": 41,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fts_stat": {
      "start_point": [
        1812,
        0
      ],
      "end_point": [
        1860,
        1
      ],
      "content": "static unsigned short int\ninternal_function\nfts_stat(FTS *sp, register FTSENT *p, bool follow)\n{\n        struct stat *sbp = p->fts_statp;\n        int saved_errno;\n\n        if (p->fts_level == FTS_ROOTLEVEL && ISSET(FTS_COMFOLLOW))\n                follow = true;\n\n        /*\n         * If doing a logical walk, or application requested FTS_FOLLOW, do\n         * a stat(2).  If that fails, check for a non-existent symlink.  If\n         * fail, set the errno from the stat call.\n         */\n        if (ISSET(FTS_LOGICAL) || follow) {\n                if (stat(p->fts_accpath, sbp)) {\n                        saved_errno = errno;\n                        if (errno == ENOENT\n                            && lstat(p->fts_accpath, sbp) == 0) {\n                                __set_errno (0);\n                                return (FTS_SLNONE);\n                        }\n                        p->fts_errno = saved_errno;\n                        goto err;\n                }\n        } else if (fstatat(sp->fts_cwd_fd, p->fts_accpath, sbp,\n                           AT_SYMLINK_NOFOLLOW)) {\n                p->fts_errno = errno;\nerr:            memset(sbp, 0, sizeof(struct stat));\n                return (FTS_NS);\n        }\n\n        if (S_ISDIR(sbp->st_mode)) {\n                p->fts_n_dirs_remaining = (sbp->st_nlink\n                                           - (ISSET(FTS_SEEDOT) ? 0 : 2));\n                if (ISDOT(p->fts_name)) {\n                        /* Command-line \".\" and \"..\" are real directories. */\n                        return (p->fts_level == FTS_ROOTLEVEL ? FTS_D : FTS_DOT);\n                }\n\n                return (FTS_D);\n        }\n        if (S_ISLNK(sbp->st_mode))\n                return (FTS_SL);\n        if (S_ISREG(sbp->st_mode))\n                return (FTS_F);\n        return (FTS_DEFAULT);\n}",
      "lines": 49,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "unsigned short int",
        "unsigned",
        "short",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "fts_compar": {
      "start_point": [
        1862,
        0
      ],
      "end_point": [
        1873,
        1
      ],
      "content": "static int\nfts_compar (void const *a, void const *b)\n{\n  /* Convert A and B to the correct types, to pacify the compiler, and\n     for portability to bizarre hosts where \"void const *\" and \"FTSENT\n     const **\" differ in runtime representation.  The comparison\n     function cannot modify *a and *b, but there is no compile-time\n     check for this.  */\n  FTSENT const **pa = (FTSENT const **) a;\n  FTSENT const **pb = (FTSENT const **) b;\n  return pa[0]->fts_fts->fts_compar (pa, pb);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "fts_padjust": {
      "start_point": [
        2009,
        0
      ],
      "end_point": [
        2032,
        1
      ],
      "content": "static void\ninternal_function\nfts_padjust (FTS *sp, FTSENT *head)\n{\n        FTSENT *p;\n        char *addr = sp->fts_path;\n\n#define ADJUST(p) do {                                                  \\\n        if ((p)->fts_accpath != (p)->fts_name) {                        \\\n                (p)->fts_accpath =                                      \\\n                    (char *)addr + ((p)->fts_accpath - (p)->fts_path);  \\\n        }                                                               \\\n        (p)->fts_path = addr;                                           \\\n} while (0)\n        /* Adjust the current set of children. */\n        for (p = sp->fts_child; p; p = p->fts_link)\n                ADJUST(p);\n\n        /* Adjust the rest of the tree, including the current level. */\n        for (p = head; p->fts_level >= FTS_ROOTLEVEL;) {\n                ADJUST(p);\n                p = p->fts_link ? p->fts_link : p->fts_parent;\n        }\n}",
      "lines": 24,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "fts_maxarglen": {
      "start_point": [
        2035,
        18
      ],
      "end_point": [
        2044,
        1
      ],
      "content": "_GL_ATTRIBUTE_PURE\nfts_maxarglen (char * const *argv)\n{\n        size_t len, max;\n\n        for (max = 0; *argv; ++argv)\n                if ((len = strlen(*argv)) > max)\n                        max = len;\n        return (max + 1);\n}",
      "lines": 10,
      "depth": 12,
      "decorators": [
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "fts_safe_changedir": {
      "start_point": [
        2055,
        0
      ],
      "end_point": [
        2139,
        1
      ],
      "content": "static int\ninternal_function\nfts_safe_changedir (FTS *sp, FTSENT *p, int fd, char const *dir)\n{\n        int ret;\n        bool is_dotdot = dir && STREQ (dir, \"..\");\n        int newfd;\n\n        /* This clause handles the unusual case in which FTS_NOCHDIR\n           is specified, along with FTS_CWDFD.  In that case, there is\n           no need to change even the virtual cwd file descriptor.\n           However, if FD is non-negative, we do close it here.  */\n        if (ISSET (FTS_NOCHDIR))\n          {\n            if (ISSET (FTS_CWDFD) && 0 <= fd)\n              close (fd);\n            return 0;\n          }\n\n        if (fd < 0 && is_dotdot && ISSET (FTS_CWDFD))\n          {\n            /* When possible, skip the diropen and subsequent fstat+dev/ino\n               comparison.  I.e., when changing to parent directory\n               (chdir (\"..\")), use a file descriptor from the ring and\n               save the overhead of diropen+fstat, as well as avoiding\n               failure when we lack \"x\" access to the virtual cwd.  */\n            if ( ! i_ring_empty (&sp->fts_fd_ring))\n              {\n                int parent_fd;\n                fd_ring_print (sp, stderr, \"pre-pop\");\n                parent_fd = i_ring_pop (&sp->fts_fd_ring);\n                is_dotdot = true;\n                if (0 <= parent_fd)\n                  {\n                    fd = parent_fd;\n                    dir = NULL;\n                  }\n              }\n          }\n\n        newfd = fd;\n        if (fd < 0 && (newfd = diropen (sp, dir)) < 0)\n          return -1;\n\n        /* The following dev/inode check is necessary if we're doing a\n           \"logical\" traversal (through symlinks, a la chown -L), if the\n           system lacks O_NOFOLLOW support, or if we're changing to \"..\"\n           (but not via a popped file descriptor).  When changing to the\n           name \"..\", O_NOFOLLOW can't help.  In general, when the target is\n           not \"..\", diropen's use of O_NOFOLLOW ensures we don't mistakenly\n           follow a symlink, so we can avoid the expense of this fstat.  */\n        if (ISSET(FTS_LOGICAL) || ! HAVE_WORKING_O_NOFOLLOW\n            || (dir && STREQ (dir, \"..\")))\n          {\n            struct stat sb;\n            if (fstat(newfd, &sb))\n              {\n                ret = -1;\n                goto bail;\n              }\n            if (p->fts_statp->st_dev != sb.st_dev\n                || p->fts_statp->st_ino != sb.st_ino)\n              {\n                __set_errno (ENOENT);           /* disinformation */\n                ret = -1;\n                goto bail;\n              }\n          }\n\n        if (ISSET(FTS_CWDFD))\n          {\n            cwd_advance_fd (sp, newfd, ! is_dotdot);\n            return 0;\n          }\n\n        ret = fchdir(newfd);\nbail:\n        if (fd < 0)\n          {\n            int oerrno = errno;\n            (void)close(newfd);\n            __set_errno (oerrno);\n          }\n        return ret;\n}",
      "lines": 85,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    }
  },
  "grep/grep-3.1/lib/fts_.h": {},
  "grep/grep-3.1/lib/getcwd-lgpl.c": {
    "rpl_getcwd": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        123,
        1
      ],
      "content": "char *\nrpl_getcwd (char *buf, size_t size)\n{\n  char *ptr;\n  char *result;\n\n  /* Handle single size operations.  */\n  if (buf)\n    {\n      if (!size)\n        {\n          errno = EINVAL;\n          return NULL;\n        }\n      return getcwd (buf, size);\n    }\n\n  if (size)\n    {\n      buf = malloc (size);\n      if (!buf)\n        {\n          errno = ENOMEM;\n          return NULL;\n        }\n      result = getcwd (buf, size);\n      if (!result)\n        {\n          int saved_errno = errno;\n          free (buf);\n          errno = saved_errno;\n        }\n      return result;\n    }\n\n  /* Flexible sizing requested.  Avoid over-allocation for the common\n     case of a name that fits within a 4k page, minus some space for\n     local variables, to be sure we don't skip over a guard page.  */\n  {\n    char tmp[4032];\n    size = sizeof tmp;\n    ptr = getcwd (tmp, size);\n    if (ptr)\n      {\n        result = strdup (ptr);\n        if (!result)\n          errno = ENOMEM;\n        return result;\n      }\n    if (errno != ERANGE)\n      return NULL;\n  }\n\n  /* My what a large directory name we have.  */\n  do\n    {\n      size <<= 1;\n      ptr = realloc (buf, size);\n      if (ptr == NULL)\n        {\n          free (buf);\n          errno = ENOMEM;\n          return NULL;\n        }\n      buf = ptr;\n      result = getcwd (buf, size);\n    }\n  while (!result && errno == ERANGE);\n\n  if (!result)\n    {\n      int saved_errno = errno;\n      free (buf);\n      errno = saved_errno;\n    }\n  else\n    {\n      /* Trim to fit, if possible.  */\n      result = realloc (buf, strlen (buf) + 1);\n      if (!result)\n        result = buf;\n    }\n  return result;\n}",
      "lines": 84,
      "depth": 12,
      "decorators": [
        "char",
        "*\nrpl_getcwd (char *buf, size_t size)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/getdtablesize.c": {
    "_setmaxstdio_nothrow": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        39,
        5
      ],
      "content": "static int\n_setmaxstdio_nothrow (int newmax)\n{\n  int result;\n\n  TRY_MSVC_INVAL\n    {\n      result = _setmaxstdio (newmax);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "getdtablesize": [
      {
        "start_point": [
          56,
          0
        ],
        "end_point": [
          87,
          1
        ],
        "content": "int\ngetdtablesize (void)\n{\n  if (dtablesize == 0)\n    {\n      /* We are looking for the number N such that the valid file descriptors\n         are 0..N-1.  It can be obtained through a loop as follows:\n           {\n             int fd;\n             for (fd = 3; fd < 65536; fd++)\n               if (dup2 (0, fd) == -1)\n                 break;\n             return fd;\n           }\n         On Windows XP, the result is 2048.\n         The drawback of this loop is that it allocates memory for a libc\n         internal array that is never freed.\n\n         The number N can also be obtained as the upper bound for\n         _getmaxstdio ().  _getmaxstdio () returns the maximum number of open\n         FILE objects.  The sanity check in _setmaxstdio reveals the maximum\n         number of file descriptors.  This too allocates memory, but it is\n         freed when we call _setmaxstdio with the original value.  */\n      int orig_max_stdio = _getmaxstdio ();\n      unsigned int bound;\n      for (bound = 0x10000; _setmaxstdio_nothrow (bound) < 0; bound = bound / 2)\n        ;\n      _setmaxstdio_nothrow (orig_max_stdio);\n      dtablesize = bound;\n    }\n  return dtablesize;\n}",
        "lines": 32,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          108,
          0
        ],
        "end_point": [
          121,
          1
        ],
        "content": "int\ngetdtablesize (void)\n{\n  struct rlimit lim;\n\n  if (getrlimit (RLIMIT_NOFILE, &lim) == 0\n      && 0 <= lim.rlim_cur && lim.rlim_cur <= INT_MAX\n      && lim.rlim_cur != RLIM_INFINITY\n      && lim.rlim_cur != RLIM_SAVED_CUR\n      && lim.rlim_cur != RLIM_SAVED_MAX)\n    return lim.rlim_cur;\n\n  return INT_MAX;\n}",
        "lines": 14,
        "depth": 14,
        "decorators": [
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/getopt-cdefs.in.h": {},
  "grep/grep-3.1/lib/getopt-core.h": {},
  "grep/grep-3.1/lib/getopt-ext.h": {
    "struct": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "__BEGIN_DECLS\n\n/* Describe the long-named options requested by the application.\n   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector\n   of 'struct option' terminated by an element containing a name which is\n   zero.\n\n   The field 'has_arg' is:\n   no_argument\t\t(or 0) if the option does not take an argument,\n   required_argument\t(or 1) if the option requires an argument,\n   optional_argument \t(or 2) if the option takes an optional argument.\n\n   If the field 'flag' is not NULL, it points to a variable that is set\n   to the value given in the field 'val' when the option is found, but\n   left unchanged if the option is not found.\n\n   To have a long-named option do something other than set an 'int' to\n   a compiled-in constant, such as set a value from 'optarg', set the\n   option's 'flag' field to zero and its 'val' field to a nonzero\n   value (the equivalent single-letter option character, if there is\n   one).  For long options that have a zero 'flag' field, 'getopt'\n   returns the contents of the 'val' field.  */\n\nstruct option\n{\n  const char *name;\n  /* has_arg can't be an enum because some compilers complain about\n     type mismatches in all the code that assumes it is an int.  */\n  int has_arg;\n  int *flag;\n  int val;\n}",
      "lines": 32,
      "depth": 5,
      "decorators": null
    }
  },
  "grep/grep-3.1/lib/getopt-pfx-core.h": {},
  "grep/grep-3.1/lib/getopt-pfx-ext.h": {},
  "grep/grep-3.1/lib/getopt.c": {
    "exchange": {
      "start_point": [
        129,
        0
      ],
      "end_point": [
        182,
        1
      ],
      "content": "static void\nexchange (char **argv, struct _getopt_data *d)\n{\n  int bottom = d->__first_nonopt;\n  int middle = d->__last_nonopt;\n  int top = d->optind;\n  char *tem;\n\n  /* Exchange the shorter segment with the far end of the longer segment.\n     That puts the shorter segment into the right place.\n     It leaves the longer segment in the right place overall,\n     but it consists of two parts that need to be swapped next.  */\n\n  while (top > middle && middle > bottom)\n    {\n      if (top - middle > middle - bottom)\n\t{\n\t  /* Bottom segment is the short one.  */\n\t  int len = middle - bottom;\n\t  int i;\n\n\t  /* Swap it with the top part of the top segment.  */\n\t  for (i = 0; i < len; i++)\n\t    {\n\t      tem = argv[bottom + i];\n\t      argv[bottom + i] = argv[top - (middle - bottom) + i];\n\t      argv[top - (middle - bottom) + i] = tem;\n\t    }\n\t  /* Exclude the moved bottom segment from further swapping.  */\n\t  top -= len;\n\t}\n      else\n\t{\n\t  /* Top segment is the short one.  */\n\t  int len = top - middle;\n\t  int i;\n\n\t  /* Swap it with the bottom part of the bottom segment.  */\n\t  for (i = 0; i < len; i++)\n\t    {\n\t      tem = argv[bottom + i];\n\t      argv[bottom + i] = argv[middle + i];\n\t      argv[middle + i] = tem;\n\t    }\n\t  /* Exclude the moved top segment from further swapping.  */\n\t  bottom += len;\n\t}\n    }\n\n  /* Update records for the slots the non-options now occupy.  */\n\n  d->__first_nonopt += (d->optind - d->__last_nonopt);\n  d->__last_nonopt = d->optind;\n}",
      "lines": 54,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "process_long_option": {
      "start_point": [
        192,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "content": "static int\nprocess_long_option (int argc, char **argv, const char *optstring,\n\t\t     const struct option *longopts, int *longind,\n\t\t     int long_only, struct _getopt_data *d,\n\t\t     int print_errors, const char *prefix)\n{\n  char *nameend;\n  size_t namelen;\n  const struct option *p;\n  const struct option *pfound = NULL;\n  int n_options;\n  int option_index;\n\n  for (nameend = d->__nextchar; *nameend && *nameend != '='; nameend++)\n    /* Do nothing.  */ ;\n  namelen = nameend - d->__nextchar;\n\n  /* First look for an exact match, counting the options as a side\n     effect.  */\n  for (p = longopts, n_options = 0; p->name; p++, n_options++)\n    if (!strncmp (p->name, d->__nextchar, namelen)\n\t&& namelen == strlen (p->name))\n      {\n\t/* Exact match found.  */\n\tpfound = p;\n\toption_index = n_options;\n\tbreak;\n      }\n\n  if (pfound == NULL)\n    {\n      /* Didn't find an exact match, so look for abbreviations.  */\n      unsigned char *ambig_set = NULL;\n      int ambig_malloced = 0;\n      int ambig_fallback = 0;\n      int indfound = -1;\n\n      for (p = longopts, option_index = 0; p->name; p++, option_index++)\n\tif (!strncmp (p->name, d->__nextchar, namelen))\n\t  {\n\t    if (pfound == NULL)\n\t      {\n\t\t/* First nonexact match found.  */\n\t\tpfound = p;\n\t\tindfound = option_index;\n\t      }\n\t    else if (long_only\n\t\t     || pfound->has_arg != p->has_arg\n\t\t     || pfound->flag != p->flag\n\t\t     || pfound->val != p->val)\n\t      {\n\t\t/* Second or later nonexact match found.  */\n\t\tif (!ambig_fallback)\n\t\t  {\n\t\t    if (!print_errors)\n\t\t      /* Don't waste effort tracking the ambig set if\n\t\t\t we're not going to print it anyway.  */\n\t\t      ambig_fallback = 1;\n\t\t    else if (!ambig_set)\n\t\t      {\n\t\t\tif (__libc_use_alloca (n_options))\n\t\t\t  ambig_set = alloca (n_options);\n\t\t\telse if ((ambig_set = malloc (n_options)) == NULL)\n\t\t\t  /* Fall back to simpler error message.  */\n\t\t\t  ambig_fallback = 1;\n\t\t\telse\n\t\t\t  ambig_malloced = 1;\n\n\t\t\tif (ambig_set)\n\t\t\t  {\n\t\t\t    memset (ambig_set, 0, n_options);\n\t\t\t    ambig_set[indfound] = 1;\n\t\t\t  }\n\t\t      }\n\t\t    if (ambig_set)\n\t\t      ambig_set[option_index] = 1;\n\t\t  }\n\t      }\n\t  }\n\n      if (ambig_set || ambig_fallback)\n\t{\n\t  if (print_errors)\n\t    {\n\t      if (ambig_fallback)\n\t\tfprintf (stderr, _(\"%s: option '%s%s' is ambiguous\\n\"),\n\t\t\t argv[0], prefix, d->__nextchar);\n\t      else\n\t\t{\n\t\t  flockfile (stderr);\n\t\t  fprintf (stderr,\n\t\t\t   _(\"%s: option '%s%s' is ambiguous; possibilities:\"),\n\t\t\t   argv[0], prefix, d->__nextchar);\n\n\t\t  for (option_index = 0; option_index < n_options; option_index++)\n\t\t    if (ambig_set[option_index])\n\t\t      fprintf (stderr, \" '%s%s'\",\n\t\t\t       prefix, longopts[option_index].name);\n\n\t\t  /* This must use 'fprintf' even though it's only\n\t\t     printing a single character, so that it goes through\n\t\t     __fxprintf_nocancel when compiled as part of glibc.  */\n\t\t  fprintf (stderr, \"\\n\");\n\t\t  funlockfile (stderr);\n\t\t}\n\t    }\n\t  if (ambig_malloced)\n\t    free (ambig_set);\n\t  d->__nextchar += strlen (d->__nextchar);\n\t  d->optind++;\n\t  d->optopt = 0;\n\t  return '?';\n\t}\n\n      option_index = indfound;\n    }\n\n  if (pfound == NULL)\n    {\n      /* Can't find it as a long option.  If this is not getopt_long_only,\n\t or the option starts with '--' or is not a valid short option,\n\t then it's an error.  */\n      if (!long_only || argv[d->optind][1] == '-'\n\t  || strchr (optstring, *d->__nextchar) == NULL)\n\t{\n\t  if (print_errors)\n\t    fprintf (stderr, _(\"%s: unrecognized option '%s%s'\\n\"),\n\t\t     argv[0], prefix, d->__nextchar);\n\n\t  d->__nextchar = NULL;\n\t  d->optind++;\n\t  d->optopt = 0;\n\t  return '?';\n\t}\n\n      /* Otherwise interpret it as a short option.  */\n      return -1;\n    }\n\n  /* We have found a matching long option.  Consume it.  */\n  d->optind++;\n  d->__nextchar = NULL;\n  if (*nameend)\n    {\n      /* Don't test has_arg with >, because some C compilers don't\n\t allow it to be used on enums.  */\n      if (pfound->has_arg)\n\td->optarg = nameend + 1;\n      else\n\t{\n\t  if (print_errors)\n\t    fprintf (stderr,\n\t\t     _(\"%s: option '%s%s' doesn't allow an argument\\n\"),\n\t\t     argv[0], prefix, pfound->name);\n\n\t  d->optopt = pfound->val;\n\t  return '?';\n\t}\n    }\n  else if (pfound->has_arg == 1)\n    {\n      if (d->optind < argc)\n\td->optarg = argv[d->optind++];\n      else\n\t{\n\t  if (print_errors)\n\t    fprintf (stderr,\n\t\t     _(\"%s: option '%s%s' requires an argument\\n\"),\n\t\t     argv[0], prefix, pfound->name);\n\n\t  d->optopt = pfound->val;\n\t  return optstring[0] == ':' ? ':' : '?';\n\t}\n    }\n\n  if (longind != NULL)\n    *longind = option_index;\n  if (pfound->flag)\n    {\n      *(pfound->flag) = pfound->val;\n      return 0;\n    }\n  return pfound->val;\n}",
      "lines": 184,
      "depth": 24,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_getopt_initialize": {
      "start_point": [
        379,
        0
      ],
      "end_point": [
        411,
        1
      ],
      "content": "static const char *\n_getopt_initialize (int argc _GL_UNUSED,\n\t\t    char **argv _GL_UNUSED, const char *optstring,\n\t\t    struct _getopt_data *d, int posixly_correct)\n{\n  /* Start processing options with ARGV-element 1 (since ARGV-element 0\n     is the program name); the sequence of previously skipped\n     non-option ARGV-elements is empty.  */\n  if (d->optind == 0)\n    d->optind = 1;\n\n  d->__first_nonopt = d->__last_nonopt = d->optind;\n  d->__nextchar = NULL;\n\n  /* Determine how to handle the ordering of options and nonoptions.  */\n  if (optstring[0] == '-')\n    {\n      d->__ordering = RETURN_IN_ORDER;\n      ++optstring;\n    }\n  else if (optstring[0] == '+')\n    {\n      d->__ordering = REQUIRE_ORDER;\n      ++optstring;\n    }\n  else if (posixly_correct || !!getenv (\"POSIXLY_CORRECT\"))\n    d->__ordering = REQUIRE_ORDER;\n  else\n    d->__ordering = PERMUTE;\n\n  d->__initialized = 1;\n  return optstring;\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\n_getopt_initialize (int argc _GL_UNUSED,\n\t\t    char **argv _GL_UNUSED, const char *optstring,\n\t\t    struct _getopt_data *d, int posixly_correct)",
        "*"
      ]
    },
    "_getopt_internal_r": {
      "start_point": [
        469,
        0
      ],
      "end_point": [
        699,
        1
      ],
      "content": "int\n_getopt_internal_r (int argc, char **argv, const char *optstring,\n\t\t    const struct option *longopts, int *longind,\n\t\t    int long_only, struct _getopt_data *d, int posixly_correct)\n{\n  int print_errors = d->opterr;\n\n  if (argc < 1)\n    return -1;\n\n  d->optarg = NULL;\n\n  if (d->optind == 0 || !d->__initialized)\n    optstring = _getopt_initialize (argc, argv, optstring, d, posixly_correct);\n  else if (optstring[0] == '-' || optstring[0] == '+')\n    optstring++;\n\n  if (optstring[0] == ':')\n    print_errors = 0;\n\n  /* Test whether ARGV[optind] points to a non-option argument.  */\n#define NONOPTION_P (argv[d->optind][0] != '-' || argv[d->optind][1] == '\\0')\n\n  if (d->__nextchar == NULL || *d->__nextchar == '\\0')\n    {\n      /* Advance to the next ARGV-element.  */\n\n      /* Give FIRST_NONOPT & LAST_NONOPT rational values if OPTIND has been\n\t moved back by the user (who may also have changed the arguments).  */\n      if (d->__last_nonopt > d->optind)\n\td->__last_nonopt = d->optind;\n      if (d->__first_nonopt > d->optind)\n\td->__first_nonopt = d->optind;\n\n      if (d->__ordering == PERMUTE)\n\t{\n\t  /* If we have just processed some options following some non-options,\n\t     exchange them so that the options come first.  */\n\n\t  if (d->__first_nonopt != d->__last_nonopt\n\t      && d->__last_nonopt != d->optind)\n\t    exchange (argv, d);\n\t  else if (d->__last_nonopt != d->optind)\n\t    d->__first_nonopt = d->optind;\n\n\t  /* Skip any additional non-options\n\t     and extend the range of non-options previously skipped.  */\n\n\t  while (d->optind < argc && NONOPTION_P)\n\t    d->optind++;\n\t  d->__last_nonopt = d->optind;\n\t}\n\n      /* The special ARGV-element '--' means premature end of options.\n\t Skip it like a null option,\n\t then exchange with previous non-options as if it were an option,\n\t then skip everything else like a non-option.  */\n\n      if (d->optind != argc && !strcmp (argv[d->optind], \"--\"))\n\t{\n\t  d->optind++;\n\n\t  if (d->__first_nonopt != d->__last_nonopt\n\t      && d->__last_nonopt != d->optind)\n\t    exchange (argv, d);\n\t  else if (d->__first_nonopt == d->__last_nonopt)\n\t    d->__first_nonopt = d->optind;\n\t  d->__last_nonopt = argc;\n\n\t  d->optind = argc;\n\t}\n\n      /* If we have done all the ARGV-elements, stop the scan\n\t and back over any non-options that we skipped and permuted.  */\n\n      if (d->optind == argc)\n\t{\n\t  /* Set the next-arg-index to point at the non-options\n\t     that we previously skipped, so the caller will digest them.  */\n\t  if (d->__first_nonopt != d->__last_nonopt)\n\t    d->optind = d->__first_nonopt;\n\t  return -1;\n\t}\n\n      /* If we have come to a non-option and did not permute it,\n\t either stop the scan or describe it to the caller and pass it by.  */\n\n      if (NONOPTION_P)\n\t{\n\t  if (d->__ordering == REQUIRE_ORDER)\n\t    return -1;\n\t  d->optarg = argv[d->optind++];\n\t  return 1;\n\t}\n\n      /* We have found another option-ARGV-element.\n\t Check whether it might be a long option.  */\n      if (longopts)\n\t{\n\t  if (argv[d->optind][1] == '-')\n\t    {\n\t      /* \"--foo\" is always a long option.  The special option\n\t\t \"--\" was handled above.  */\n\t      d->__nextchar = argv[d->optind] + 2;\n\t      return process_long_option (argc, argv, optstring, longopts,\n\t\t\t\t\t  longind, long_only, d,\n\t\t\t\t\t  print_errors, \"--\");\n\t    }\n\n\t  /* If long_only and the ARGV-element has the form \"-f\",\n\t     where f is a valid short option, don't consider it an\n\t     abbreviated form of a long option that starts with f.\n\t     Otherwise there would be no way to give the -f short\n\t     option.\n\n\t     On the other hand, if there's a long option \"fubar\" and\n\t     the ARGV-element is \"-fu\", do consider that an\n\t     abbreviation of the long option, just like \"--fu\", and\n\t     not \"-f\" with arg \"u\".\n\n\t     This distinction seems to be the most useful approach.  */\n\t  if (long_only && (argv[d->optind][2]\n\t\t\t    || !strchr (optstring, argv[d->optind][1])))\n\t    {\n\t      int code;\n\t      d->__nextchar = argv[d->optind] + 1;\n\t      code = process_long_option (argc, argv, optstring, longopts,\n\t\t\t\t\t  longind, long_only, d,\n\t\t\t\t\t  print_errors, \"-\");\n\t      if (code != -1)\n\t\treturn code;\n\t    }\n\t}\n\n      /* It is not a long option.  Skip the initial punctuation.  */\n      d->__nextchar = argv[d->optind] + 1;\n    }\n\n  /* Look at and handle the next short option-character.  */\n\n  {\n    char c = *d->__nextchar++;\n    const char *temp = strchr (optstring, c);\n\n    /* Increment 'optind' when we start to process its last character.  */\n    if (*d->__nextchar == '\\0')\n      ++d->optind;\n\n    if (temp == NULL || c == ':' || c == ';')\n      {\n\tif (print_errors)\n\t  fprintf (stderr, _(\"%s: invalid option -- '%c'\\n\"), argv[0], c);\n\td->optopt = c;\n\treturn '?';\n      }\n\n    /* Convenience. Treat POSIX -W foo same as long option --foo */\n    if (temp[0] == 'W' && temp[1] == ';' && longopts != NULL)\n      {\n\t/* This is an option that requires an argument.  */\n\tif (*d->__nextchar != '\\0')\n\t  d->optarg = d->__nextchar;\n\telse if (d->optind == argc)\n\t  {\n\t    if (print_errors)\n\t      fprintf (stderr,\n\t\t       _(\"%s: option requires an argument -- '%c'\\n\"),\n\t\t       argv[0], c);\n\n\t    d->optopt = c;\n\t    if (optstring[0] == ':')\n\t      c = ':';\n\t    else\n\t      c = '?';\n\t    return c;\n\t  }\n\telse\n\t  d->optarg = argv[d->optind];\n\n\td->__nextchar = d->optarg;\n\td->optarg = NULL;\n\treturn process_long_option (argc, argv, optstring, longopts, longind,\n\t\t\t\t    0 /* long_only */, d, print_errors, \"-W \");\n      }\n    if (temp[1] == ':')\n      {\n\tif (temp[2] == ':')\n\t  {\n\t    /* This is an option that accepts an argument optionally.  */\n\t    if (*d->__nextchar != '\\0')\n\t      {\n\t\td->optarg = d->__nextchar;\n\t\td->optind++;\n\t      }\n\t    else\n\t      d->optarg = NULL;\n\t    d->__nextchar = NULL;\n\t  }\n\telse\n\t  {\n\t    /* This is an option that requires an argument.  */\n\t    if (*d->__nextchar != '\\0')\n\t      {\n\t\td->optarg = d->__nextchar;\n\t\t/* If we end this ARGV-element by taking the rest as an arg,\n\t\t   we must advance to the next element now.  */\n\t\td->optind++;\n\t      }\n\t    else if (d->optind == argc)\n\t      {\n\t\tif (print_errors)\n\t\t  fprintf (stderr,\n\t\t\t   _(\"%s: option requires an argument -- '%c'\\n\"),\n\t\t\t   argv[0], c);\n\n\t\td->optopt = c;\n\t\tif (optstring[0] == ':')\n\t\t  c = ':';\n\t\telse\n\t\t  c = '?';\n\t      }\n\t    else\n\t      /* We already incremented 'optind' once;\n\t\t increment it again when taking next ARGV-elt as argument.  */\n\t      d->optarg = argv[d->optind++];\n\t    d->__nextchar = NULL;\n\t  }\n      }\n    return c;\n  }\n}",
      "lines": 231,
      "depth": 18,
      "decorators": [
        "int"
      ]
    },
    "_getopt_internal": {
      "start_point": [
        701,
        0
      ],
      "end_point": [
        720,
        1
      ],
      "content": "int\n_getopt_internal (int argc, char **argv, const char *optstring,\n\t\t  const struct option *longopts, int *longind, int long_only,\n\t\t  int posixly_correct)\n{\n  int result;\n\n  getopt_data.optind = optind;\n  getopt_data.opterr = opterr;\n\n  result = _getopt_internal_r (argc, argv, optstring, longopts,\n\t\t\t       longind, long_only, &getopt_data,\n\t\t\t       posixly_correct);\n\n  optind = getopt_data.optind;\n  optarg = getopt_data.optarg;\n  optopt = getopt_data.optopt;\n\n  return result;\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "main": {
      "start_point": [
        747,
        0
      ],
      "end_point": [
        808,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  int c;\n  int digit_optind = 0;\n\n  while (1)\n    {\n      int this_option_optind = optind ? optind : 1;\n\n      c = getopt (argc, argv, \"abc:d:0123456789\");\n      if (c == -1)\n\tbreak;\n\n      switch (c)\n\t{\n\tcase '0':\n\tcase '1':\n\tcase '2':\n\tcase '3':\n\tcase '4':\n\tcase '5':\n\tcase '6':\n\tcase '7':\n\tcase '8':\n\tcase '9':\n\t  if (digit_optind != 0 && digit_optind != this_option_optind)\n\t    printf (\"digits occur in two different argv-elements.\\n\");\n\t  digit_optind = this_option_optind;\n\t  printf (\"option %c\\n\", c);\n\t  break;\n\n\tcase 'a':\n\t  printf (\"option a\\n\");\n\t  break;\n\n\tcase 'b':\n\t  printf (\"option b\\n\");\n\t  break;\n\n\tcase 'c':\n\t  printf (\"option c with value '%s'\\n\", optarg);\n\t  break;\n\n\tcase '?':\n\t  break;\n\n\tdefault:\n\t  printf (\"?? getopt returned character code 0%o ??\\n\", c);\n\t}\n    }\n\n  if (optind < argc)\n    {\n      printf (\"non-option ARGV-elements: \");\n      while (optind < argc)\n\tprintf (\"%s \", argv[optind++]);\n      printf (\"\\n\");\n    }\n\n  exit (0);\n}",
      "lines": 62,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/getopt.in.h": {},
  "grep/grep-3.1/lib/getopt1.c": {
    "getopt_long": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        32,
        1
      ],
      "content": "int\ngetopt_long (int argc, char *__getopt_argv_const *argv, const char *options,\n\t     const struct option *long_options, int *opt_index)\n{\n  return _getopt_internal (argc, (char **) argv, options, long_options,\n\t\t\t   opt_index, 0, 0);\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "_getopt_long_r": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        41,
        1
      ],
      "content": "int\n_getopt_long_r (int argc, char **argv, const char *options,\n\t\tconst struct option *long_options, int *opt_index,\n\t\tstruct _getopt_data *d)\n{\n  return _getopt_internal_r (argc, argv, options, long_options, opt_index,\n\t\t\t     0, d, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "getopt_long_only": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\ngetopt_long_only (int argc, char *__getopt_argv_const *argv,\n\t\t  const char *options,\n\t\t  const struct option *long_options, int *opt_index)\n{\n  return _getopt_internal (argc, (char **) argv, options, long_options,\n\t\t\t   opt_index, 1, 0);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "_getopt_long_only_r": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "content": "int\n_getopt_long_only_r (int argc, char **argv, const char *options,\n\t\t     const struct option *long_options, int *opt_index,\n\t\t     struct _getopt_data *d)\n{\n  return _getopt_internal_r (argc, argv, options, long_options, opt_index,\n\t\t\t     1, d, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "main": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        156,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  int c;\n  int digit_optind = 0;\n\n  while (1)\n    {\n      int this_option_optind = optind ? optind : 1;\n      int option_index = 0;\n      static const struct option long_options[] =\n      {\n\t{\"add\", 1, 0, 0},\n\t{\"append\", 0, 0, 0},\n\t{\"delete\", 1, 0, 0},\n\t{\"verbose\", 0, 0, 0},\n\t{\"create\", 0, 0, 0},\n\t{\"file\", 1, 0, 0},\n\t{0, 0, 0, 0}\n      };\n\n      c = getopt_long (argc, argv, \"abc:d:0123456789\",\n\t\t       long_options, &option_index);\n      if (c == -1)\n\tbreak;\n\n      switch (c)\n\t{\n\tcase 0:\n\t  printf (\"option %s\", long_options[option_index].name);\n\t  if (optarg)\n\t    printf (\" with arg %s\", optarg);\n\t  printf (\"\\n\");\n\t  break;\n\n\tcase '0':\n\tcase '1':\n\tcase '2':\n\tcase '3':\n\tcase '4':\n\tcase '5':\n\tcase '6':\n\tcase '7':\n\tcase '8':\n\tcase '9':\n\t  if (digit_optind != 0 && digit_optind != this_option_optind)\n\t    printf (\"digits occur in two different argv-elements.\\n\");\n\t  digit_optind = this_option_optind;\n\t  printf (\"option %c\\n\", c);\n\t  break;\n\n\tcase 'a':\n\t  printf (\"option a\\n\");\n\t  break;\n\n\tcase 'b':\n\t  printf (\"option b\\n\");\n\t  break;\n\n\tcase 'c':\n\t  printf (\"option c with value '%s'\\n\", optarg);\n\t  break;\n\n\tcase 'd':\n\t  printf (\"option d with value '%s'\\n\", optarg);\n\t  break;\n\n\tcase '?':\n\t  break;\n\n\tdefault:\n\t  printf (\"?? getopt returned character code 0%o ??\\n\", c);\n\t}\n    }\n\n  if (optind < argc)\n    {\n      printf (\"non-option ARGV-elements: \");\n      while (optind < argc)\n\tprintf (\"%s \", argv[optind++]);\n      printf (\"\\n\");\n    }\n\n  exit (0);\n}",
      "lines": 85,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/getopt_int.h": {},
  "grep/grep-3.1/lib/getpagesize.c": {
    "getpagesize": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        36,
        1
      ],
      "content": "int\ngetpagesize (void)\n{\n  SYSTEM_INFO system_info;\n  GetSystemInfo (&system_info);\n  return system_info.dwPageSize;\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/getprogname.c": {
    "getprogname": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        182,
        1
      ],
      "content": "char const *\ngetprogname (void)\n{\n# if HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME                /* glibc, BeOS */\n  /* https://www.gnu.org/software/libc/manual/html_node/Error-Messages.html */\n  return program_invocation_short_name;\n# elif HAVE_DECL_PROGRAM_INVOCATION_NAME                    /* glibc, BeOS */\n  /* https://www.gnu.org/software/libc/manual/html_node/Error-Messages.html */\n  return last_component (program_invocation_name);\n# elif HAVE_GETEXECNAME                                     /* Solaris */\n  /* http://docs.oracle.com/cd/E19253-01/816-5168/6mbb3hrb1/index.html */\n  const char *p = getexecname ();\n  if (!p)\n    p = \"?\";\n  return last_component (p);\n# elif HAVE_DECL___ARGV                                     /* mingw, MSVC */\n  /* https://msdn.microsoft.com/en-us/library/dn727674.aspx */\n  const char *p = __argv && __argv[0] ? __argv[0] : \"?\";\n  return last_component (p);\n# elif HAVE_VAR___PROGNAME                                  /* OpenBSD, QNX */\n  /* http://man.openbsd.org/style.9 */\n  /* http://www.qnx.de/developers/docs/6.5.0/index.jsp?topic=%2Fcom.qnx.doc.neutrino_lib_ref%2Fp%2F__progname.html */\n  /* Be careful to declare this only when we absolutely need it\n     (OpenBSD 5.1), rather than when it's available.  Otherwise,\n     its mere declaration makes program_invocation_short_name\n     malfunction (have zero length) with Fedora 25's glibc.  */\n  extern char *__progname;\n  const char *p = __progname;\n  return p && p[0] ? p : \"?\";\n# elif _AIX                                                 /* AIX */\n  /* Idea by Bastien ROUCARI\u00c3\u0088S,\n     http://lists.gnu.org/archive/html/bug-gnulib/2010-12/msg00095.html\n     Reference: http://\n   ibm.biz/knowctr#ssw_aix_53/com.ibm.aix.basetechref/doc/basetrf1/getprocs.htm\n  */\n  static char *p;\n  static int first = 1;\n  if (first)\n    {\n      first = 0;\n      pid_t pid = getpid ();\n      struct procentry64 procs;\n      p = (0 < getprocs64 (&procs, sizeof procs, NULL, 0, &pid, 1)\n           ? strdup (procs.pi_comm)\n           : NULL);\n      if (!p)\n        p = \"?\";\n    }\n  return p;\n# elif defined __hpux\n  static char *p;\n  static int first = 1;\n  if (first)\n    {\n      first = 0;\n      pid_t pid = getpid ();\n      struct pst_status status;\n      p = (0 < pstat_getproc (&status, sizeof status, 0, pid)\n           ? strdup (status.pst_ucomm)\n           : NULL);\n      if (!p)\n        p = \"?\";\n    }\n  return p;\n# elif __MVS__                                              /* z/OS */\n  /* https://www.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.bpxbd00/rtwgetp.htm */\n  static char *p = \"?\";\n  static int first = 1;\n  if (first)\n    {\n      pid_t pid = getpid ();\n      int token;\n      W_PSPROC buf;\n      first = 0;\n      memset (&buf, 0, sizeof(buf));\n      buf.ps_cmdptr    = (char *) malloc (buf.ps_cmdlen    = PS_CMDBLEN_LONG);\n      buf.ps_conttyptr = (char *) malloc (buf.ps_conttylen = PS_CONTTYBLEN);\n      buf.ps_pathptr   = (char *) malloc (buf.ps_pathlen   = PS_PATHBLEN);\n      if (buf.ps_cmdptr && buf.ps_conttyptr && buf.ps_pathptr)\n        {\n          for (token = 0; token >= 0;\n               token = w_getpsent (token, &buf, sizeof(buf)))\n            {\n              if (token > 0 && buf.ps_pid == pid)\n                {\n                  char *s = strdup (last_component (buf.ps_pathptr));\n                  if (s)\n                    p = s;\n                  break;\n                }\n            }\n        }\n      free (buf.ps_cmdptr);\n      free (buf.ps_conttyptr);\n      free (buf.ps_pathptr);\n    }\n  return p;\n# elif defined __sgi                                        /* IRIX */\n  char filename[50];\n  int fd;\n\n  sprintf (filename, \"/proc/pinfo/%d\", (int) getpid ());\n  fd = open (filename, O_RDONLY);\n  if (0 <= fd)\n    {\n      prpsinfo_t buf;\n      int ioctl_ok = 0 <= ioctl (fd, PIOCPSINFO, &buf);\n      close (fd);\n      if (ioctl_ok)\n        {\n          char *name = buf.pr_fname;\n          char *namesize = sizeof buf.pr_fname;\n          char *namenul = memchr (name, '\\0', namesize);\n          size_t namelen = namenul ? namenul - name : namesize;\n          char *namecopy = malloc (namelen + 1);\n          if (namecopy)\n            {\n              namecopy[namelen] = 0;\n              return memcpy (namecopy, name, namelen);\n            }\n        }\n    }\n  return NULL;\n# else\n#  error \"getprogname module not ported to this OS\"\n# endif\n}",
      "lines": 127,
      "depth": 26,
      "decorators": [
        "char",
        "const",
        "const",
        "*\ngetprogname (void)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/getprogname.h": {},
  "grep/grep-3.1/lib/gettext.h": {
    "pgettext_aux": {
      "start_point": [
        147,
        0
      ],
      "end_point": [
        157,
        1
      ],
      "content": "static const char *\npgettext_aux (const char *domain,\n              const char *msg_ctxt_id, const char *msgid,\n              int category)\n{\n  const char *translation = dcgettext (domain, msg_ctxt_id, category);\n  if (translation == msg_ctxt_id)\n    return msgid;\n  else\n    return translation;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\npgettext_aux (const char *domain,\n              const char *msg_ctxt_id, const char *msgid,\n              int category)",
        "*"
      ]
    },
    "npgettext_aux": {
      "start_point": [
        166,
        0
      ],
      "end_point": [
        178,
        1
      ],
      "content": "static const char *\nnpgettext_aux (const char *domain,\n               const char *msg_ctxt_id, const char *msgid,\n               const char *msgid_plural, unsigned long int n,\n               int category)\n{\n  const char *translation =\n    dcngettext (domain, msg_ctxt_id, msgid_plural, n, category);\n  if (translation == msg_ctxt_id || translation == msgid_plural)\n    return (n == 1 ? msgid : msgid_plural);\n  else\n    return translation;\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\nnpgettext_aux (const char *domain,\n               const char *msg_ctxt_id, const char *msgid,\n               const char *msgid_plural, unsigned long int n,\n               int category)",
        "*"
      ]
    },
    "dcpgettext_expr": {
      "start_point": [
        210,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "content": "static const char *\ndcpgettext_expr (const char *domain,\n                 const char *msgctxt, const char *msgid,\n                 int category)\n{\n  size_t msgctxt_len = strlen (msgctxt) + 1;\n  size_t msgid_len = strlen (msgid) + 1;\n  const char *translation;\n#if _LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS\n  char msg_ctxt_id[msgctxt_len + msgid_len];\n#else\n  char buf[1024];\n  char *msg_ctxt_id =\n    (msgctxt_len + msgid_len <= sizeof (buf)\n     ? buf\n     : (char *) malloc (msgctxt_len + msgid_len));\n  if (msg_ctxt_id != NULL)\n#endif\n    {\n      int found_translation;\n      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);\n      msg_ctxt_id[msgctxt_len - 1] = '\\004';\n      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);\n      translation = dcgettext (domain, msg_ctxt_id, category);\n      found_translation = (translation != msg_ctxt_id);\n#if !_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS\n      if (msg_ctxt_id != buf)\n        free (msg_ctxt_id);\n#endif\n      if (found_translation)\n        return translation;\n    }\n  return msgid;\n}",
      "lines": 34,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\ndcpgettext_expr (const char *domain,\n                 const char *msgctxt, const char *msgid,\n                 int category)",
        "*"
      ]
    },
    "dcnpgettext_expr": {
      "start_point": [
        257,
        0
      ],
      "end_point": [
        291,
        1
      ],
      "content": "static const char *\ndcnpgettext_expr (const char *domain,\n                  const char *msgctxt, const char *msgid,\n                  const char *msgid_plural, unsigned long int n,\n                  int category)\n{\n  size_t msgctxt_len = strlen (msgctxt) + 1;\n  size_t msgid_len = strlen (msgid) + 1;\n  const char *translation;\n#if _LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS\n  char msg_ctxt_id[msgctxt_len + msgid_len];\n#else\n  char buf[1024];\n  char *msg_ctxt_id =\n    (msgctxt_len + msgid_len <= sizeof (buf)\n     ? buf\n     : (char *) malloc (msgctxt_len + msgid_len));\n  if (msg_ctxt_id != NULL)\n#endif\n    {\n      int found_translation;\n      memcpy (msg_ctxt_id, msgctxt, msgctxt_len - 1);\n      msg_ctxt_id[msgctxt_len - 1] = '\\004';\n      memcpy (msg_ctxt_id + msgctxt_len, msgid, msgid_len);\n      translation = dcngettext (domain, msg_ctxt_id, msgid_plural, n, category);\n      found_translation = !(translation == msg_ctxt_id || translation == msgid_plural);\n#if !_LIBGETTEXT_HAVE_VARIABLE_SIZE_ARRAYS\n      if (msg_ctxt_id != buf)\n        free (msg_ctxt_id);\n#endif\n      if (found_translation)\n        return translation;\n    }\n  return (n == 1 ? msgid : msgid_plural);\n}",
      "lines": 35,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\ndcnpgettext_expr (const char *domain,\n                  const char *msgctxt, const char *msgid,\n                  const char *msgid_plural, unsigned long int n,\n                  int category)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/hard-locale.c": {
    "hard_locale": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "bool\nhard_locale (int category)\n{\n  bool hard = true;\n  char const *p = setlocale (category, NULL);\n\n  if (p)\n    {\n      if (2 <= GLIBC_VERSION)\n        {\n          if (strcmp (p, \"C\") == 0 || strcmp (p, \"POSIX\") == 0)\n            hard = false;\n        }\n      else\n        {\n          char *locale = strdup (p);\n          if (locale)\n            {\n              /* Temporarily set the locale to the \"C\" and \"POSIX\" locales\n                 to find their names, so that we can determine whether one\n                 or the other is the caller's locale.  */\n              if (((p = setlocale (category, \"C\"))\n                   && strcmp (p, locale) == 0)\n                  || ((p = setlocale (category, \"POSIX\"))\n                      && strcmp (p, locale) == 0))\n                hard = false;\n\n              /* Restore the caller's locale.  */\n              setlocale (category, locale);\n              free (locale);\n            }\n        }\n    }\n\n  return hard;\n}",
      "lines": 36,
      "depth": 19,
      "decorators": [
        "bool"
      ]
    }
  },
  "grep/grep-3.1/lib/hard-locale.h": {},
  "grep/grep-3.1/lib/hash.c": {
    "hash_get_n_buckets": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        152,
        1
      ],
      "content": "size_t\nhash_get_n_buckets (const Hash_table *table)\n{\n  return table->n_buckets;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "size_t"
      ]
    },
    "hash_get_n_buckets_used": {
      "start_point": [
        156,
        0
      ],
      "end_point": [
        160,
        1
      ],
      "content": "size_t\nhash_get_n_buckets_used (const Hash_table *table)\n{\n  return table->n_buckets_used;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "size_t"
      ]
    },
    "hash_get_n_entries": {
      "start_point": [
        164,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "content": "size_t\nhash_get_n_entries (const Hash_table *table)\n{\n  return table->n_entries;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "size_t"
      ]
    },
    "hash_get_max_bucket_length": {
      "start_point": [
        172,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "size_t\nhash_get_max_bucket_length (const Hash_table *table)\n{\n  struct hash_entry const *bucket;\n  size_t max_bucket_length = 0;\n\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      if (bucket->data)\n        {\n          struct hash_entry const *cursor = bucket;\n          size_t bucket_length = 1;\n\n          while (cursor = cursor->next, cursor)\n            bucket_length++;\n\n          if (bucket_length > max_bucket_length)\n            max_bucket_length = bucket_length;\n        }\n    }\n\n  return max_bucket_length;\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "size_t"
      ]
    },
    "hash_table_ok": {
      "start_point": [
        199,
        0
      ],
      "end_point": [
        226,
        1
      ],
      "content": "bool\nhash_table_ok (const Hash_table *table)\n{\n  struct hash_entry const *bucket;\n  size_t n_buckets_used = 0;\n  size_t n_entries = 0;\n\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      if (bucket->data)\n        {\n          struct hash_entry const *cursor = bucket;\n\n          /* Count bucket head.  */\n          n_buckets_used++;\n          n_entries++;\n\n          /* Count bucket overflow.  */\n          while (cursor = cursor->next, cursor)\n            n_entries++;\n        }\n    }\n\n  if (n_buckets_used == table->n_buckets_used && n_entries == table->n_entries)\n    return true;\n\n  return false;\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "bool"
      ]
    },
    "hash_print_statistics": {
      "start_point": [
        228,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "content": "void\nhash_print_statistics (const Hash_table *table, FILE *stream)\n{\n  size_t n_entries = hash_get_n_entries (table);\n  size_t n_buckets = hash_get_n_buckets (table);\n  size_t n_buckets_used = hash_get_n_buckets_used (table);\n  size_t max_bucket_length = hash_get_max_bucket_length (table);\n\n  fprintf (stream, \"# entries:         %lu\\n\", (unsigned long int) n_entries);\n  fprintf (stream, \"# buckets:         %lu\\n\", (unsigned long int) n_buckets);\n  fprintf (stream, \"# buckets used:    %lu (%.2f%%)\\n\",\n           (unsigned long int) n_buckets_used,\n           (100.0 * n_buckets_used) / n_buckets);\n  fprintf (stream, \"max bucket length: %lu\\n\",\n           (unsigned long int) max_bucket_length);\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "safe_hasher": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        254,
        1
      ],
      "content": "static struct hash_entry *\nsafe_hasher (const Hash_table *table, const void *key)\n{\n  size_t n = table->hasher (key, table->n_buckets);\n  if (! (n < table->n_buckets))\n    abort ();\n  return table->bucket + n;\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "struct hash_entry",
        "struct",
        "hash_entry",
        "*\nsafe_hasher (const Hash_table *table, const void *key)",
        "*"
      ]
    },
    "hash_lookup": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        273,
        1
      ],
      "content": "void *\nhash_lookup (const Hash_table *table, const void *entry)\n{\n  struct hash_entry const *bucket = safe_hasher (table, entry);\n  struct hash_entry const *cursor;\n\n  if (bucket->data == NULL)\n    return NULL;\n\n  for (cursor = bucket; cursor; cursor = cursor->next)\n    if (entry == cursor->data || table->comparator (entry, cursor->data))\n      return cursor->data;\n\n  return NULL;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "void",
        "*\nhash_lookup (const Hash_table *table, const void *entry)",
        "*"
      ]
    },
    "hash_get_first": {
      "start_point": [
        286,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "void *\nhash_get_first (const Hash_table *table)\n{\n  struct hash_entry const *bucket;\n\n  if (table->n_entries == 0)\n    return NULL;\n\n  for (bucket = table->bucket; ; bucket++)\n    if (! (bucket < table->bucket_limit))\n      abort ();\n    else if (bucket->data)\n      return bucket->data;\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "void",
        "*\nhash_get_first (const Hash_table *table)",
        "*"
      ]
    },
    "hash_get_next": {
      "start_point": [
        305,
        0
      ],
      "end_point": [
        328,
        1
      ],
      "content": "void *\nhash_get_next (const Hash_table *table, const void *entry)\n{\n  struct hash_entry const *bucket = safe_hasher (table, entry);\n  struct hash_entry const *cursor;\n\n  /* Find next entry in the same bucket.  */\n  cursor = bucket;\n  do\n    {\n      if (cursor->data == entry && cursor->next)\n        return cursor->next->data;\n      cursor = cursor->next;\n    }\n  while (cursor != NULL);\n\n  /* Find first entry in any subsequent bucket.  */\n  while (++bucket < table->bucket_limit)\n    if (bucket->data)\n      return bucket->data;\n\n  /* None found.  */\n  return NULL;\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "void",
        "*\nhash_get_next (const Hash_table *table, const void *entry)",
        "*"
      ]
    },
    "hash_get_entries": {
      "start_point": [
        334,
        0
      ],
      "end_point": [
        356,
        1
      ],
      "content": "size_t\nhash_get_entries (const Hash_table *table, void **buffer,\n                  size_t buffer_size)\n{\n  size_t counter = 0;\n  struct hash_entry const *bucket;\n  struct hash_entry const *cursor;\n\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      if (bucket->data)\n        {\n          for (cursor = bucket; cursor; cursor = cursor->next)\n            {\n              if (counter >= buffer_size)\n                return counter;\n              buffer[counter++] = cursor->data;\n            }\n        }\n    }\n\n  return counter;\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "size_t"
      ]
    },
    "hash_do_for_each": {
      "start_point": [
        366,
        0
      ],
      "end_point": [
        388,
        1
      ],
      "content": "size_t\nhash_do_for_each (const Hash_table *table, Hash_processor processor,\n                  void *processor_data)\n{\n  size_t counter = 0;\n  struct hash_entry const *bucket;\n  struct hash_entry const *cursor;\n\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      if (bucket->data)\n        {\n          for (cursor = bucket; cursor; cursor = cursor->next)\n            {\n              if (! processor (cursor->data, processor_data))\n                return counter;\n              counter++;\n            }\n        }\n    }\n\n  return counter;\n}",
      "lines": 23,
      "depth": 15,
      "decorators": [
        "size_t"
      ]
    },
    "hash_string": [
      {
        "start_point": [
          403,
          0
        ],
        "end_point": [
          417,
          1
        ],
        "content": "size_t\nhash_string (const char *string, size_t n_buckets)\n{\n# define HASH_ONE_CHAR(Value, Byte) \\\n  ((Byte) + rotl_sz (Value, 7))\n\n  size_t value = 0;\n  unsigned char ch;\n\n  for (; (ch = *string); string++)\n    value = HASH_ONE_CHAR (value, ch);\n  return value % n_buckets;\n\n# undef HASH_ONE_CHAR\n}",
        "lines": 15,
        "depth": 8,
        "decorators": [
          "size_t"
        ]
      },
      {
        "start_point": [
          426,
          0
        ],
        "end_point": [
          435,
          1
        ],
        "content": "size_t\nhash_string (const char *string, size_t n_buckets)\n{\n  size_t value = 0;\n  unsigned char ch;\n\n  for (; (ch = *string); string++)\n    value = (value * 31 + ch) % n_buckets;\n  return value;\n}",
        "lines": 10,
        "depth": 10,
        "decorators": [
          "size_t"
        ]
      }
    ],
    "_GL_ATTRIBUTE_CONST": [
      {
        "start_point": [
          442,
          0
        ],
        "end_point": [
          456,
          1
        ],
        "content": "static bool _GL_ATTRIBUTE_CONST\nis_prime (size_t candidate)\n{\n  size_t divisor = 3;\n  size_t square = divisor * divisor;\n\n  while (square < candidate && (candidate % divisor))\n    {\n      divisor++;\n      square += 4 * divisor;\n      divisor++;\n    }\n\n  return (candidate % divisor ? true : false);\n}",
        "lines": 15,
        "depth": 8,
        "decorators": [
          "static",
          "static",
          "bool"
        ]
      },
      {
        "start_point": [
          461,
          0
        ],
        "end_point": [
          475,
          1
        ],
        "content": "static size_t _GL_ATTRIBUTE_CONST\nnext_prime (size_t candidate)\n{\n  /* Skip small primes.  */\n  if (candidate < 10)\n    candidate = 10;\n\n  /* Make it definitely odd.  */\n  candidate |= 1;\n\n  while (SIZE_MAX != candidate && !is_prime (candidate))\n    candidate += 2;\n\n  return candidate;\n}",
        "lines": 15,
        "depth": 9,
        "decorators": [
          "static",
          "static",
          "size_t"
        ]
      }
    ],
    "hash_reset_tuning": {
      "start_point": [
        477,
        0
      ],
      "end_point": [
        481,
        1
      ],
      "content": "void\nhash_reset_tuning (Hash_tuning *tuning)\n{\n  *tuning = default_tuning;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "raw_hasher": {
      "start_point": [
        484,
        0
      ],
      "end_point": [
        494,
        1
      ],
      "content": "static size_t\nraw_hasher (const void *data, size_t n)\n{\n  /* When hashing unique pointers, it is often the case that they were\n     generated by malloc and thus have the property that the low-order\n     bits are 0.  As this tends to give poorer performance with small\n     tables, we rotate the pointer value before performing division,\n     in an attempt to improve hash quality.  */\n  size_t val = rotr_sz ((size_t) data, 3);\n  return val % n;\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "raw_comparator": {
      "start_point": [
        497,
        0
      ],
      "end_point": [
        501,
        1
      ],
      "content": "static bool\nraw_comparator (const void *a, const void *b)\n{\n  return a == b;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "check_tuning": {
      "start_point": [
        510,
        0
      ],
      "end_point": [
        536,
        1
      ],
      "content": "static bool\ncheck_tuning (Hash_table *table)\n{\n  const Hash_tuning *tuning = table->tuning;\n  float epsilon;\n  if (tuning == &default_tuning)\n    return true;\n\n  /* Be a bit stricter than mathematics would require, so that\n     rounding errors in size calculations do not cause allocations to\n     fail to grow or shrink as they should.  The smallest allocation\n     is 11 (due to next_prime's algorithm), so an epsilon of 0.1\n     should be good enough.  */\n  epsilon = 0.1f;\n\n  if (epsilon < tuning->growth_threshold\n      && tuning->growth_threshold < 1 - epsilon\n      && 1 + epsilon < tuning->growth_factor\n      && 0 <= tuning->shrink_threshold\n      && tuning->shrink_threshold + epsilon < tuning->shrink_factor\n      && tuning->shrink_factor <= 1\n      && tuning->shrink_threshold + epsilon < tuning->growth_threshold)\n    return true;\n\n  table->tuning = &default_tuning;\n  return false;\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "compute_bucket_size": {
      "start_point": [
        542,
        0
      ],
      "end_point": [
        556,
        1
      ],
      "content": "static size_t _GL_ATTRIBUTE_PURE\ncompute_bucket_size (size_t candidate, const Hash_tuning *tuning)\n{\n  if (!tuning->is_n_buckets)\n    {\n      float new_candidate = candidate / tuning->growth_threshold;\n      if (SIZE_MAX <= new_candidate)\n        return 0;\n      candidate = new_candidate;\n    }\n  candidate = next_prime (candidate);\n  if (xalloc_oversized (candidate, sizeof (struct hash_entry *)))\n    return 0;\n  return candidate;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "size_t",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "hash_initialize": {
      "start_point": [
        592,
        0
      ],
      "end_point": [
        645,
        1
      ],
      "content": "Hash_table *\nhash_initialize (size_t candidate, const Hash_tuning *tuning,\n                 Hash_hasher hasher, Hash_comparator comparator,\n                 Hash_data_freer data_freer)\n{\n  Hash_table *table;\n\n  if (hasher == NULL)\n    hasher = raw_hasher;\n  if (comparator == NULL)\n    comparator = raw_comparator;\n\n  table = malloc (sizeof *table);\n  if (table == NULL)\n    return NULL;\n\n  if (!tuning)\n    tuning = &default_tuning;\n  table->tuning = tuning;\n  if (!check_tuning (table))\n    {\n      /* Fail if the tuning options are invalid.  This is the only occasion\n         when the user gets some feedback about it.  Once the table is created,\n         if the user provides invalid tuning options, we silently revert to\n         using the defaults, and ignore further request to change the tuning\n         options.  */\n      goto fail;\n    }\n\n  table->n_buckets = compute_bucket_size (candidate, tuning);\n  if (!table->n_buckets)\n    goto fail;\n\n  table->bucket = calloc (table->n_buckets, sizeof *table->bucket);\n  if (table->bucket == NULL)\n    goto fail;\n  table->bucket_limit = table->bucket + table->n_buckets;\n  table->n_buckets_used = 0;\n  table->n_entries = 0;\n\n  table->hasher = hasher;\n  table->comparator = comparator;\n  table->data_freer = data_freer;\n\n  table->free_entry_list = NULL;\n#if USE_OBSTACK\n  obstack_init (&table->entry_stack);\n#endif\n  return table;\n\n fail:\n  free (table);\n  return NULL;\n}",
      "lines": 54,
      "depth": 10,
      "decorators": [
        "Hash_table",
        "*\nhash_initialize (size_t candidate, const Hash_tuning *tuning,\n                 Hash_hasher hasher, Hash_comparator comparator,\n                 Hash_data_freer data_freer)",
        "*"
      ]
    },
    "hash_clear": {
      "start_point": [
        651,
        0
      ],
      "end_point": [
        687,
        1
      ],
      "content": "void\nhash_clear (Hash_table *table)\n{\n  struct hash_entry *bucket;\n\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      if (bucket->data)\n        {\n          struct hash_entry *cursor;\n          struct hash_entry *next;\n\n          /* Free the bucket overflow.  */\n          for (cursor = bucket->next; cursor; cursor = next)\n            {\n              if (table->data_freer)\n                table->data_freer (cursor->data);\n              cursor->data = NULL;\n\n              next = cursor->next;\n              /* Relinking is done one entry at a time, as it is to be expected\n                 that overflows are either rare or short.  */\n              cursor->next = table->free_entry_list;\n              table->free_entry_list = cursor;\n            }\n\n          /* Free the bucket head.  */\n          if (table->data_freer)\n            table->data_freer (bucket->data);\n          bucket->data = NULL;\n          bucket->next = NULL;\n        }\n    }\n\n  table->n_buckets_used = 0;\n  table->n_entries = 0;\n}",
      "lines": 37,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "hash_free": {
      "start_point": [
        694,
        0
      ],
      "end_point": [
        742,
        1
      ],
      "content": "void\nhash_free (Hash_table *table)\n{\n  struct hash_entry *bucket;\n  struct hash_entry *cursor;\n  struct hash_entry *next;\n\n  /* Call the user data_freer function.  */\n  if (table->data_freer && table->n_entries)\n    {\n      for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n        {\n          if (bucket->data)\n            {\n              for (cursor = bucket; cursor; cursor = cursor->next)\n                table->data_freer (cursor->data);\n            }\n        }\n    }\n\n#if USE_OBSTACK\n\n  obstack_free (&table->entry_stack, NULL);\n\n#else\n\n  /* Free all bucket overflowed entries.  */\n  for (bucket = table->bucket; bucket < table->bucket_limit; bucket++)\n    {\n      for (cursor = bucket->next; cursor; cursor = next)\n        {\n          next = cursor->next;\n          free (cursor);\n        }\n    }\n\n  /* Also reclaim the internal list of previously freed entries.  */\n  for (cursor = table->free_entry_list; cursor; cursor = next)\n    {\n      next = cursor->next;\n      free (cursor);\n    }\n\n#endif\n\n  /* Free the remainder of the hash table structure.  */\n  free (table->bucket);\n  free (table);\n}",
      "lines": 49,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "allocate_entry": {
      "start_point": [
        749,
        0
      ],
      "end_point": [
        769,
        1
      ],
      "content": "static struct hash_entry *\nallocate_entry (Hash_table *table)\n{\n  struct hash_entry *new;\n\n  if (table->free_entry_list)\n    {\n      new = table->free_entry_list;\n      table->free_entry_list = new->next;\n    }\n  else\n    {\n#if USE_OBSTACK\n      new = obstack_alloc (&table->entry_stack, sizeof *new);\n#else\n      new = malloc (sizeof *new);\n#endif\n    }\n\n  return new;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "struct hash_entry",
        "struct",
        "hash_entry",
        "*\nallocate_entry (Hash_table *table)",
        "*"
      ]
    },
    "free_entry": {
      "start_point": [
        774,
        0
      ],
      "end_point": [
        780,
        1
      ],
      "content": "static void\nfree_entry (Hash_table *table, struct hash_entry *entry)\n{\n  entry->data = NULL;\n  entry->next = table->free_entry_list;\n  table->free_entry_list = entry;\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "hash_find_entry": {
      "start_point": [
        788,
        0
      ],
      "end_point": [
        850,
        1
      ],
      "content": "static void *\nhash_find_entry (Hash_table *table, const void *entry,\n                 struct hash_entry **bucket_head, bool delete)\n{\n  struct hash_entry *bucket = safe_hasher (table, entry);\n  struct hash_entry *cursor;\n\n  *bucket_head = bucket;\n\n  /* Test for empty bucket.  */\n  if (bucket->data == NULL)\n    return NULL;\n\n  /* See if the entry is the first in the bucket.  */\n  if (entry == bucket->data || table->comparator (entry, bucket->data))\n    {\n      void *data = bucket->data;\n\n      if (delete)\n        {\n          if (bucket->next)\n            {\n              struct hash_entry *next = bucket->next;\n\n              /* Bump the first overflow entry into the bucket head, then save\n                 the previous first overflow entry for later recycling.  */\n              *bucket = *next;\n              free_entry (table, next);\n            }\n          else\n            {\n              bucket->data = NULL;\n            }\n        }\n\n      return data;\n    }\n\n  /* Scan the bucket overflow.  */\n  for (cursor = bucket; cursor->next; cursor = cursor->next)\n    {\n      if (entry == cursor->next->data\n          || table->comparator (entry, cursor->next->data))\n        {\n          void *data = cursor->next->data;\n\n          if (delete)\n            {\n              struct hash_entry *next = cursor->next;\n\n              /* Unlink the entry to delete, then save the freed entry for later\n                 recycling.  */\n              cursor->next = next->next;\n              free_entry (table, next);\n            }\n\n          return data;\n        }\n    }\n\n  /* No entry found.  */\n  return NULL;\n}",
      "lines": 63,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nhash_find_entry (Hash_table *table, const void *entry,\n                 struct hash_entry **bucket_head, bool delete)",
        "*"
      ]
    },
    "transfer_entries": {
      "start_point": [
        858,
        0
      ],
      "end_point": [
        931,
        1
      ],
      "content": "static bool\ntransfer_entries (Hash_table *dst, Hash_table *src, bool safe)\n{\n  struct hash_entry *bucket;\n  struct hash_entry *cursor;\n  struct hash_entry *next;\n  for (bucket = src->bucket; bucket < src->bucket_limit; bucket++)\n    if (bucket->data)\n      {\n        void *data;\n        struct hash_entry *new_bucket;\n\n        /* Within each bucket, transfer overflow entries first and\n           then the bucket head, to minimize memory pressure.  After\n           all, the only time we might allocate is when moving the\n           bucket head, but moving overflow entries first may create\n           free entries that can be recycled by the time we finally\n           get to the bucket head.  */\n        for (cursor = bucket->next; cursor; cursor = next)\n          {\n            data = cursor->data;\n            new_bucket = safe_hasher (dst, data);\n\n            next = cursor->next;\n\n            if (new_bucket->data)\n              {\n                /* Merely relink an existing entry, when moving from a\n                   bucket overflow into a bucket overflow.  */\n                cursor->next = new_bucket->next;\n                new_bucket->next = cursor;\n              }\n            else\n              {\n                /* Free an existing entry, when moving from a bucket\n                   overflow into a bucket header.  */\n                new_bucket->data = data;\n                dst->n_buckets_used++;\n                free_entry (dst, cursor);\n              }\n          }\n        /* Now move the bucket head.  Be sure that if we fail due to\n           allocation failure that the src table is in a consistent\n           state.  */\n        data = bucket->data;\n        bucket->next = NULL;\n        if (safe)\n          continue;\n        new_bucket = safe_hasher (dst, data);\n\n        if (new_bucket->data)\n          {\n            /* Allocate or recycle an entry, when moving from a bucket\n               header into a bucket overflow.  */\n            struct hash_entry *new_entry = allocate_entry (dst);\n\n            if (new_entry == NULL)\n              return false;\n\n            new_entry->data = data;\n            new_entry->next = new_bucket->next;\n            new_bucket->next = new_entry;\n          }\n        else\n          {\n            /* Move from one bucket header to another.  */\n            new_bucket->data = data;\n            dst->n_buckets_used++;\n          }\n        bucket->data = NULL;\n        src->n_buckets_used--;\n      }\n  return true;\n}",
      "lines": 74,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "hash_rehash": {
      "start_point": [
        941,
        0
      ],
      "end_point": [
        1018,
        1
      ],
      "content": "bool\nhash_rehash (Hash_table *table, size_t candidate)\n{\n  Hash_table storage;\n  Hash_table *new_table;\n  size_t new_size = compute_bucket_size (candidate, table->tuning);\n\n  if (!new_size)\n    return false;\n  if (new_size == table->n_buckets)\n    return true;\n  new_table = &storage;\n  new_table->bucket = calloc (new_size, sizeof *new_table->bucket);\n  if (new_table->bucket == NULL)\n    return false;\n  new_table->n_buckets = new_size;\n  new_table->bucket_limit = new_table->bucket + new_size;\n  new_table->n_buckets_used = 0;\n  new_table->n_entries = 0;\n  new_table->tuning = table->tuning;\n  new_table->hasher = table->hasher;\n  new_table->comparator = table->comparator;\n  new_table->data_freer = table->data_freer;\n\n  /* In order for the transfer to successfully complete, we need\n     additional overflow entries when distinct buckets in the old\n     table collide into a common bucket in the new table.  The worst\n     case possible is a hasher that gives a good spread with the old\n     size, but returns a constant with the new size; if we were to\n     guarantee table->n_buckets_used-1 free entries in advance, then\n     the transfer would be guaranteed to not allocate memory.\n     However, for large tables, a guarantee of no further allocation\n     introduces a lot of extra memory pressure, all for an unlikely\n     corner case (most rehashes reduce, rather than increase, the\n     number of overflow entries needed).  So, we instead ensure that\n     the transfer process can be reversed if we hit a memory\n     allocation failure mid-transfer.  */\n\n  /* Merely reuse the extra old space into the new table.  */\n#if USE_OBSTACK\n  new_table->entry_stack = table->entry_stack;\n#endif\n  new_table->free_entry_list = table->free_entry_list;\n\n  if (transfer_entries (new_table, table, false))\n    {\n      /* Entries transferred successfully; tie up the loose ends.  */\n      free (table->bucket);\n      table->bucket = new_table->bucket;\n      table->bucket_limit = new_table->bucket_limit;\n      table->n_buckets = new_table->n_buckets;\n      table->n_buckets_used = new_table->n_buckets_used;\n      table->free_entry_list = new_table->free_entry_list;\n      /* table->n_entries and table->entry_stack already hold their value.  */\n      return true;\n    }\n\n  /* We've allocated new_table->bucket (and possibly some entries),\n     exhausted the free list, and moved some but not all entries into\n     new_table.  We must undo the partial move before returning\n     failure.  The only way to get into this situation is if new_table\n     uses fewer buckets than the old table, so we will reclaim some\n     free entries as overflows in the new table are put back into\n     distinct buckets in the old table.\n\n     There are some pathological cases where a single pass through the\n     table requires more intermediate overflow entries than using two\n     passes.  Two passes give worse cache performance and takes\n     longer, but at this point, we're already out of memory, so slow\n     and safe is better than failure.  */\n  table->free_entry_list = new_table->free_entry_list;\n  if (! (transfer_entries (table, new_table, true)\n         && transfer_entries (table, new_table, false)))\n    abort ();\n  /* table->n_entries already holds its value.  */\n  free (new_table->bucket);\n  return false;\n}",
      "lines": 78,
      "depth": 10,
      "decorators": [
        "bool"
      ]
    },
    "hash_insert_if_absent": {
      "start_point": [
        1036,
        0
      ],
      "end_point": [
        1116,
        1
      ],
      "content": "int\nhash_insert_if_absent (Hash_table *table, void const *entry,\n                       void const **matched_ent)\n{\n  void *data;\n  struct hash_entry *bucket;\n\n  /* The caller cannot insert a NULL entry, since hash_lookup returns NULL\n     to indicate \"not found\", and hash_find_entry uses \"bucket->data == NULL\"\n     to indicate an empty bucket.  */\n  if (! entry)\n    abort ();\n\n  /* If there's a matching entry already in the table, return that.  */\n  if ((data = hash_find_entry (table, entry, &bucket, false)) != NULL)\n    {\n      if (matched_ent)\n        *matched_ent = data;\n      return 0;\n    }\n\n  /* If the growth threshold of the buckets in use has been reached, increase\n     the table size and rehash.  There's no point in checking the number of\n     entries:  if the hashing function is ill-conditioned, rehashing is not\n     likely to improve it.  */\n\n  if (table->n_buckets_used\n      > table->tuning->growth_threshold * table->n_buckets)\n    {\n      /* Check more fully, before starting real work.  If tuning arguments\n         became invalid, the second check will rely on proper defaults.  */\n      check_tuning (table);\n      if (table->n_buckets_used\n          > table->tuning->growth_threshold * table->n_buckets)\n        {\n          const Hash_tuning *tuning = table->tuning;\n          float candidate =\n            (tuning->is_n_buckets\n             ? (table->n_buckets * tuning->growth_factor)\n             : (table->n_buckets * tuning->growth_factor\n                * tuning->growth_threshold));\n\n          if (SIZE_MAX <= candidate)\n            return -1;\n\n          /* If the rehash fails, arrange to return NULL.  */\n          if (!hash_rehash (table, candidate))\n            return -1;\n\n          /* Update the bucket we are interested in.  */\n          if (hash_find_entry (table, entry, &bucket, false) != NULL)\n            abort ();\n        }\n    }\n\n  /* ENTRY is not matched, it should be inserted.  */\n\n  if (bucket->data)\n    {\n      struct hash_entry *new_entry = allocate_entry (table);\n\n      if (new_entry == NULL)\n        return -1;\n\n      /* Add ENTRY in the overflow of the bucket.  */\n\n      new_entry->data = (void *) entry;\n      new_entry->next = bucket->next;\n      bucket->next = new_entry;\n      table->n_entries++;\n      return 1;\n    }\n\n  /* Add ENTRY right in the bucket head.  */\n\n  bucket->data = (void *) entry;\n  table->n_entries++;\n  table->n_buckets_used++;\n\n  return 1;\n}",
      "lines": 81,
      "depth": 15,
      "decorators": [
        "int"
      ]
    },
    "hash_insert": {
      "start_point": [
        1124,
        0
      ],
      "end_point": [
        1132,
        1
      ],
      "content": "void *\nhash_insert (Hash_table *table, void const *entry)\n{\n  void const *matched_ent;\n  int err = hash_insert_if_absent (table, entry, &matched_ent);\n  return (err == -1\n          ? NULL\n          : (void *) (err == 0 ? matched_ent : entry));\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "void",
        "*\nhash_insert (Hash_table *table, void const *entry)",
        "*"
      ]
    },
    "hash_delete": {
      "start_point": [
        1138,
        0
      ],
      "end_point": [
        1196,
        1
      ],
      "content": "void *\nhash_delete (Hash_table *table, const void *entry)\n{\n  void *data;\n  struct hash_entry *bucket;\n\n  data = hash_find_entry (table, entry, &bucket, true);\n  if (!data)\n    return NULL;\n\n  table->n_entries--;\n  if (!bucket->data)\n    {\n      table->n_buckets_used--;\n\n      /* If the shrink threshold of the buckets in use has been reached,\n         rehash into a smaller table.  */\n\n      if (table->n_buckets_used\n          < table->tuning->shrink_threshold * table->n_buckets)\n        {\n          /* Check more fully, before starting real work.  If tuning arguments\n             became invalid, the second check will rely on proper defaults.  */\n          check_tuning (table);\n          if (table->n_buckets_used\n              < table->tuning->shrink_threshold * table->n_buckets)\n            {\n              const Hash_tuning *tuning = table->tuning;\n              size_t candidate =\n                (tuning->is_n_buckets\n                 ? table->n_buckets * tuning->shrink_factor\n                 : (table->n_buckets * tuning->shrink_factor\n                    * tuning->growth_threshold));\n\n              if (!hash_rehash (table, candidate))\n                {\n                  /* Failure to allocate memory in an attempt to\n                     shrink the table is not fatal.  But since memory\n                     is low, we can at least be kind and free any\n                     spare entries, rather than keeping them tied up\n                     in the free entry list.  */\n#if ! USE_OBSTACK\n                  struct hash_entry *cursor = table->free_entry_list;\n                  struct hash_entry *next;\n                  while (cursor)\n                    {\n                      next = cursor->next;\n                      free (cursor);\n                      cursor = next;\n                    }\n                  table->free_entry_list = NULL;\n#endif\n                }\n            }\n        }\n    }\n\n  return data;\n}",
      "lines": 59,
      "depth": 17,
      "decorators": [
        "void",
        "*\nhash_delete (Hash_table *table, const void *entry)",
        "*"
      ]
    },
    "hash_print": {
      "start_point": [
        1202,
        0
      ],
      "end_point": [
        1222,
        1
      ],
      "content": "void\nhash_print (const Hash_table *table)\n{\n  struct hash_entry *bucket = (struct hash_entry *) table->bucket;\n\n  for ( ; bucket < table->bucket_limit; bucket++)\n    {\n      struct hash_entry *cursor;\n\n      if (bucket)\n        printf (\"%lu:\\n\", (unsigned long int) (bucket - table->bucket));\n\n      for (cursor = bucket; cursor; cursor = cursor->next)\n        {\n          char const *s = cursor->data;\n          /* FIXME */\n          if (s)\n            printf (\"  %s\\n\", s);\n        }\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/hash.h": {},
  "grep/grep-3.1/lib/i-ring.c": {
    "i_ring_init": {
      "start_point": [
        23,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "void\ni_ring_init (I_ring *ir, int default_val)\n{\n  int i;\n  ir->ir_empty = true;\n  ir->ir_front = 0;\n  ir->ir_back = 0;\n  for (i = 0; i < I_RING_SIZE; i++)\n    ir->ir_data[i] = default_val;\n  ir->ir_default_val = default_val;\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "i_ring_empty": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "bool\ni_ring_empty (I_ring const *ir)\n{\n  return ir->ir_empty;\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "bool"
      ]
    },
    "i_ring_push": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "int\ni_ring_push (I_ring *ir, int val)\n{\n  unsigned int dest_idx = (ir->ir_front + !ir->ir_empty) % I_RING_SIZE;\n  int old_val = ir->ir_data[dest_idx];\n  ir->ir_data[dest_idx] = val;\n  ir->ir_front = dest_idx;\n  if (dest_idx == ir->ir_back)\n    ir->ir_back = (ir->ir_back + !ir->ir_empty) % I_RING_SIZE;\n  ir->ir_empty = false;\n  return old_val;\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "i_ring_pop": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "content": "int\ni_ring_pop (I_ring *ir)\n{\n  int top_val;\n  if (i_ring_empty (ir))\n    abort ();\n  top_val = ir->ir_data[ir->ir_front];\n  ir->ir_data[ir->ir_front] = ir->ir_default_val;\n  if (ir->ir_front == ir->ir_back)\n    ir->ir_empty = true;\n  else\n    ir->ir_front = ((ir->ir_front + I_RING_SIZE - 1) % I_RING_SIZE);\n  return top_val;\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/i-ring.h": {},
  "grep/grep-3.1/lib/iconv.c": {
    "utf16be_mbtowc": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "static int\nutf16be_mbtowc (ucs4_t *pwc, const unsigned char *s, size_t n)\n{\n  if (n >= 2)\n    {\n      ucs4_t wc = (s[0] << 8) + s[1];\n      if (wc >= 0xd800 && wc < 0xdc00)\n        {\n          if (n >= 4)\n            {\n              ucs4_t wc2 = (s[2] << 8) + s[3];\n              if (!(wc2 >= 0xdc00 && wc2 < 0xe000))\n                return RET_ILSEQ;\n              *pwc = 0x10000 + ((wc - 0xd800) << 10) + (wc2 - 0xdc00);\n              return 4;\n            }\n        }\n      else if (wc >= 0xdc00 && wc < 0xe000)\n        {\n          return RET_ILSEQ;\n        }\n      else\n        {\n          *pwc = wc;\n          return 2;\n        }\n    }\n  return RET_TOOFEW;\n}",
      "lines": 29,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf16be_wctomb": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "content": "static int\nutf16be_wctomb (unsigned char *r, ucs4_t wc, size_t n)\n{\n  if (!(wc >= 0xd800 && wc < 0xe000))\n    {\n      if (wc < 0x10000)\n        {\n          if (n >= 2)\n            {\n              r[0] = (unsigned char) (wc >> 8);\n              r[1] = (unsigned char) wc;\n              return 2;\n            }\n          else\n            return RET_TOOSMALL;\n        }\n      else if (wc < 0x110000)\n        {\n          if (n >= 4)\n            {\n              ucs4_t wc1 = 0xd800 + ((wc - 0x10000) >> 10);\n              ucs4_t wc2 = 0xdc00 + ((wc - 0x10000) & 0x3ff);\n              r[0] = (unsigned char) (wc1 >> 8);\n              r[1] = (unsigned char) wc1;\n              r[2] = (unsigned char) (wc2 >> 8);\n              r[3] = (unsigned char) wc2;\n              return 4;\n            }\n          else\n            return RET_TOOSMALL;\n        }\n    }\n  return RET_ILUNI;\n}",
      "lines": 34,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf16le_mbtowc": {
      "start_point": [
        124,
        0
      ],
      "end_point": [
        152,
        1
      ],
      "content": "static int\nutf16le_mbtowc (ucs4_t *pwc, const unsigned char *s, size_t n)\n{\n  if (n >= 2)\n    {\n      ucs4_t wc = s[0] + (s[1] << 8);\n      if (wc >= 0xd800 && wc < 0xdc00)\n        {\n          if (n >= 4)\n            {\n              ucs4_t wc2 = s[2] + (s[3] << 8);\n              if (!(wc2 >= 0xdc00 && wc2 < 0xe000))\n                return RET_ILSEQ;\n              *pwc = 0x10000 + ((wc - 0xd800) << 10) + (wc2 - 0xdc00);\n              return 4;\n            }\n        }\n      else if (wc >= 0xdc00 && wc < 0xe000)\n        {\n          return RET_ILSEQ;\n        }\n      else\n        {\n          *pwc = wc;\n          return 2;\n        }\n    }\n  return RET_TOOFEW;\n}",
      "lines": 29,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf16le_wctomb": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        187,
        1
      ],
      "content": "static int\nutf16le_wctomb (unsigned char *r, ucs4_t wc, size_t n)\n{\n  if (!(wc >= 0xd800 && wc < 0xe000))\n    {\n      if (wc < 0x10000)\n        {\n          if (n >= 2)\n            {\n              r[0] = (unsigned char) wc;\n              r[1] = (unsigned char) (wc >> 8);\n              return 2;\n            }\n          else\n            return RET_TOOSMALL;\n        }\n      else if (wc < 0x110000)\n        {\n          if (n >= 4)\n            {\n              ucs4_t wc1 = 0xd800 + ((wc - 0x10000) >> 10);\n              ucs4_t wc2 = 0xdc00 + ((wc - 0x10000) & 0x3ff);\n              r[0] = (unsigned char) wc1;\n              r[1] = (unsigned char) (wc1 >> 8);\n              r[2] = (unsigned char) wc2;\n              r[3] = (unsigned char) (wc2 >> 8);\n              return 4;\n            }\n          else\n            return RET_TOOSMALL;\n        }\n    }\n  return RET_ILUNI;\n}",
      "lines": 34,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf32be_mbtowc": {
      "start_point": [
        195,
        0
      ],
      "end_point": [
        210,
        1
      ],
      "content": "static int\nutf32be_mbtowc (ucs4_t *pwc, const unsigned char *s, size_t n)\n{\n  if (n >= 4)\n    {\n      ucs4_t wc = (s[0] << 24) + (s[1] << 16) + (s[2] << 8) + s[3];\n      if (wc < 0x110000 && !(wc >= 0xd800 && wc < 0xe000))\n        {\n          *pwc = wc;\n          return 4;\n        }\n      else\n        return RET_ILSEQ;\n    }\n  return RET_TOOFEW;\n}",
      "lines": 16,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf32be_wctomb": {
      "start_point": [
        212,
        0
      ],
      "end_point": [
        229,
        1
      ],
      "content": "static int\nutf32be_wctomb (unsigned char *r, ucs4_t wc, size_t n)\n{\n  if (wc < 0x110000 && !(wc >= 0xd800 && wc < 0xe000))\n    {\n      if (n >= 4)\n        {\n          r[0] = 0;\n          r[1] = (unsigned char) (wc >> 16);\n          r[2] = (unsigned char) (wc >> 8);\n          r[3] = (unsigned char) wc;\n          return 4;\n        }\n      else\n        return RET_TOOSMALL;\n    }\n  return RET_ILUNI;\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf32le_mbtowc": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "content": "static int\nutf32le_mbtowc (ucs4_t *pwc, const unsigned char *s, size_t n)\n{\n  if (n >= 4)\n    {\n      ucs4_t wc = s[0] + (s[1] << 8) + (s[2] << 16) + (s[3] << 24);\n      if (wc < 0x110000 && !(wc >= 0xd800 && wc < 0xe000))\n        {\n          *pwc = wc;\n          return 4;\n        }\n      else\n        return RET_ILSEQ;\n    }\n  return RET_TOOFEW;\n}",
      "lines": 16,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "utf32le_wctomb": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "content": "static int\nutf32le_wctomb (unsigned char *r, ucs4_t wc, size_t n)\n{\n  if (wc < 0x110000 && !(wc >= 0xd800 && wc < 0xe000))\n    {\n      if (n >= 4)\n        {\n          r[0] = (unsigned char) wc;\n          r[1] = (unsigned char) (wc >> 8);\n          r[2] = (unsigned char) (wc >> 16);\n          r[3] = 0;\n          return 4;\n        }\n      else\n        return RET_TOOSMALL;\n    }\n  return RET_ILUNI;\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv.in.h": {},
  "grep/grep-3.1/lib/iconv_close.c": {},
  "grep/grep-3.1/lib/iconv_open-aix.h": {
    "mapping_hash": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "static unsigned int\nmapping_hash (register const char *str, register size_t len)\n{\n  static const unsigned char asso_values[] =\n    {\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45,  0,  4, 25,\n       0, 11, 24,  9, 17,  3, 14, 21, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n       3, 45,  1, 45, 45, 45, 45,  0, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45, 45, 45,\n      45, 45, 45, 45, 45, 45, 45, 45\n    };\n  return len + asso_values[(unsigned char)str[3]+2] + asso_values[(unsigned char)str[len - 1]];\n}",
      "lines": 34,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "mapping_lookup": {
      "start_point": [
        229,
        0
      ],
      "end_point": [
        249,
        1
      ],
      "content": "const struct mapping *\nmapping_lookup (register const char *str, register size_t len)\n{\n  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n    {\n      register unsigned int key = mapping_hash (str, len);\n\n      if (key <= MAX_HASH_VALUE)\n        {\n          register int o = mappings[key].standard_name;\n          if (o >= 0)\n            {\n              register const char *s = o + stringpool;\n\n              if (*str == *s && !strcmp (str + 1, s + 1))\n                return &mappings[key];\n            }\n        }\n    }\n  return 0;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "const",
        "const",
        "struct mapping",
        "struct",
        "mapping",
        "*\nmapping_lookup (register const char *str, register size_t len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv_open-hpux.h": {
    "mapping_hash": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "static unsigned int\nmapping_hash (register const char *str, register size_t len)\n{\n  static const unsigned char asso_values[] =\n    {\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50,  1,  2,\n      24, 43,  5, 10,  0, 13, 32,  3, 19, 18,\n      50, 50, 50, 50, 50, 50, 50, 50, 50,  5,\n      50, 50, 50, 50, 14,  5,  0, 50, 50,  0,\n      27, 50, 12, 14, 50, 50,  0,  5,  2, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50,\n      50, 50, 50, 50, 50, 50, 50, 50, 50, 50\n    };\n  return len + asso_values[(unsigned char)str[3]+4] + asso_values[(unsigned char)str[len - 1]];\n}",
      "lines": 34,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "mapping_lookup": {
      "start_point": [
        272,
        0
      ],
      "end_point": [
        292,
        1
      ],
      "content": "const struct mapping *\nmapping_lookup (register const char *str, register size_t len)\n{\n  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n    {\n      register unsigned int key = mapping_hash (str, len);\n\n      if (key <= MAX_HASH_VALUE)\n        {\n          register int o = mappings[key].standard_name;\n          if (o >= 0)\n            {\n              register const char *s = o + stringpool;\n\n              if (*str == *s && !strcmp (str + 1, s + 1))\n                return &mappings[key];\n            }\n        }\n    }\n  return 0;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "const",
        "const",
        "struct mapping",
        "struct",
        "mapping",
        "*\nmapping_lookup (register const char *str, register size_t len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv_open-irix.h": {
    "mapping_hash": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "static unsigned int\nmapping_hash (register const char *str, register size_t len)\n{\n  static const unsigned char asso_values[] =\n    {\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24,  8,  2,\n       5, 12, 11,  0, 10,  9,  8,  7, 24, 24,\n      24, 24, 24, 24, 24, 24, 24,  0, 24,  0,\n      24,  5, 24,  0, 24,  7, 24, 24, 24, 24,\n       7, 24,  1,  0,  8, 24, 24,  0, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n      24, 24, 24, 24, 24, 24\n    };\n  return len + asso_values[(unsigned char)str[len - 1]] + asso_values[(unsigned char)str[0]];\n}",
      "lines": 34,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "mapping_lookup": {
      "start_point": [
        172,
        0
      ],
      "end_point": [
        192,
        1
      ],
      "content": "const struct mapping *\nmapping_lookup (register const char *str, register size_t len)\n{\n  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n    {\n      register unsigned int key = mapping_hash (str, len);\n\n      if (key <= MAX_HASH_VALUE)\n        {\n          register int o = mappings[key].standard_name;\n          if (o >= 0)\n            {\n              register const char *s = o + stringpool;\n\n              if (*str == *s && !strcmp (str + 1, s + 1))\n                return &mappings[key];\n            }\n        }\n    }\n  return 0;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "const",
        "const",
        "struct mapping",
        "struct",
        "mapping",
        "*\nmapping_lookup (register const char *str, register size_t len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv_open-osf.h": {
    "mapping_hash": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "static unsigned int\nmapping_hash (register const char *str, register size_t len)\n{\n  static const unsigned char asso_values[] =\n    {\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48,  2, 29,\n      24, 34, 31,  0, 15, 14, 10, 13,  2, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48,  7, 48, 48, 48, 48, 48, 48,\n      11, 48,  2,  7, 48, 48, 48,  1, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48, 48,\n      48, 48, 48, 48, 48, 48, 48, 48, 48\n    };\n  return len + asso_values[(unsigned char)str[3]+3] + asso_values[(unsigned char)str[len - 1]];\n}",
      "lines": 34,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "mapping_lookup": {
      "start_point": [
        251,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "content": "const struct mapping *\nmapping_lookup (register const char *str, register size_t len)\n{\n  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n    {\n      register unsigned int key = mapping_hash (str, len);\n\n      if (key <= MAX_HASH_VALUE)\n        {\n          register int o = mappings[key].standard_name;\n          if (o >= 0)\n            {\n              register const char *s = o + stringpool;\n\n              if (*str == *s && !strcmp (str + 1, s + 1))\n                return &mappings[key];\n            }\n        }\n    }\n  return 0;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "const",
        "const",
        "struct mapping",
        "struct",
        "mapping",
        "*\nmapping_lookup (register const char *str, register size_t len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv_open-solaris.h": {
    "mapping_hash": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "static unsigned int\nmapping_hash (register const char *str, register size_t len)\n{\n  static const unsigned char asso_values[] =\n    {\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20,  0,\n       9,  8,  7,  6,  5,  4,  3,  2, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n      20, 20, 20, 20, 20, 20\n    };\n  register unsigned int hval = len;\n\n  switch (hval)\n    {\n      default:\n        hval += asso_values[(unsigned char)str[9]];\n      /*FALLTHROUGH*/\n      case 9:\n      case 8:\n      case 7:\n      case 6:\n      case 5:\n        break;\n    }\n  return hval;\n}",
      "lines": 48,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "mapping_lookup": {
      "start_point": [
        163,
        0
      ],
      "end_point": [
        183,
        1
      ],
      "content": "const struct mapping *\nmapping_lookup (register const char *str, register size_t len)\n{\n  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n    {\n      register unsigned int key = mapping_hash (str, len);\n\n      if (key <= MAX_HASH_VALUE)\n        {\n          register int o = mappings[key].standard_name;\n          if (o >= 0)\n            {\n              register const char *s = o + stringpool;\n\n              if (*str == *s && !strcmp (str + 1, s + 1))\n                return &mappings[key];\n            }\n        }\n    }\n  return 0;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "const",
        "const",
        "struct mapping",
        "struct",
        "mapping",
        "*\nmapping_lookup (register const char *str, register size_t len)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/iconv_open.c": {},
  "grep/grep-3.1/lib/ignore-value.h": {},
  "grep/grep-3.1/lib/intprops.h": {},
  "grep/grep-3.1/lib/inttypes.in.h": {},
  "grep/grep-3.1/lib/isatty.c": {
    "IsConsoleHandle": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static BOOL IsConsoleHandle (HANDLE h)\n{\n  DWORD mode;\n  return GetConsoleMode (h, &mode) != 0;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "BOOL"
      ]
    },
    "_isatty_nothrow": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        55,
        5
      ],
      "content": "static int\n_isatty_nothrow (int fd)\n{\n  int result;\n\n  TRY_MSVC_INVAL\n    {\n      result = _isatty (fd);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "isatty": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "content": "int\nisatty (int fd)\n{\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  if (h == INVALID_HANDLE_VALUE)\n    {\n      errno = EBADF;\n      return 0;\n    }\n  /* _isatty (fd) tests whether GetFileType of the handle is FILE_TYPE_CHAR.\n     But it does not set errno when it returns 0.  */\n  if (_isatty_nothrow (fd))\n    {\n      if (IsConsoleHandle (h))\n        return 1;\n    }\n  errno = ENOTTY;\n  return 0;\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/isblank.c": {
    "isblank": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        32,
        1
      ],
      "content": "int\nisblank (int c)\n{\n  /* On all known platforms, in all predefined locales, isblank(c) is likely\n     equivalent with  (c == ' ' || c == '\\t').  Look at the glibc definition\n     (in glibc/localedata/locales/i18n): The \"blank\" characters are '\\t', ' ',\n     U+1680, U+180E, U+2000..U+2006, U+2008..U+200A, U+205F, U+3000, and none\n     except the first two is present in a common 8-bit encoding.  Therefore\n     the substitute for other platforms is not more complicated than this.  */\n  return (c == ' ' || c == '\\t');\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/iswblank.c": {
    "iswblank": {
      "start_point": [
        21,
        0
      ],
      "end_point": [
        25,
        1
      ],
      "content": "int\niswblank (wint_t wc)\n{\n  return wc == ' ' || wc == '\\t';\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/iswctype-impl.h": {
    "iswctype": {
      "start_point": [
        17,
        0
      ],
      "end_point": [
        21,
        1
      ],
      "content": "int\niswctype (wint_t wc, wctype_t desc)\n{\n  return ((int (*) (wint_t)) desc) (wc);\n}",
      "lines": 5,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/iswctype.c": {},
  "grep/grep-3.1/lib/langinfo.in.h": {},
  "grep/grep-3.1/lib/limits.in.h": {},
  "grep/grep-3.1/lib/localcharset.c": {
    "get_charset_aliases": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        384,
        1
      ],
      "content": "static const char *\nget_charset_aliases (void)\n{\n  const char *cp;\n\n  cp = charset_aliases;\n  if (cp == NULL)\n    {\n#if !(defined DARWIN7 || defined VMS || defined WINDOWS_NATIVE || defined __CYGWIN__ || defined OS2)\n      char *malloc_dir = NULL;\n      const char *dir;\n      const char *base = \"charset.alias\";\n      char *file_name;\n\n      /* Make it possible to override the charset.alias location.  This is\n         necessary for running the testsuite before \"make install\".  */\n      dir = getenv (\"CHARSETALIASDIR\");\n      if (dir == NULL || dir[0] == '\\0')\n        dir = relocate2 (LIBDIR, &malloc_dir);\n\n      /* Concatenate dir and base into freshly allocated file_name.  */\n      {\n        size_t dir_len = strlen (dir);\n        size_t base_len = strlen (base);\n        int add_slash = (dir_len > 0 && !ISSLASH (dir[dir_len - 1]));\n        file_name = (char *) malloc (dir_len + add_slash + base_len + 1);\n        if (file_name != NULL)\n          {\n            memcpy (file_name, dir, dir_len);\n            if (add_slash)\n              file_name[dir_len] = DIRECTORY_SEPARATOR;\n            memcpy (file_name + dir_len + add_slash, base, base_len + 1);\n          }\n      }\n\n      free (malloc_dir);\n\n      if (file_name == NULL)\n        /* Out of memory.  Treat the file as empty.  */\n        cp = \"\";\n      else\n        {\n          int fd;\n\n          /* Open the file.  Reject symbolic links on platforms that support\n             O_NOFOLLOW.  This is a security feature.  Without it, an attacker\n             could retrieve parts of the contents (namely, the tail of the\n             first line that starts with \"* \") of an arbitrary file by placing\n             a symbolic link to that file under the name \"charset.alias\" in\n             some writable directory and defining the environment variable\n             CHARSETALIASDIR to point to that directory.  */\n          fd = open (file_name,\n                     O_RDONLY | (HAVE_WORKING_O_NOFOLLOW ? O_NOFOLLOW : 0));\n          if (fd < 0)\n            /* File not found.  Treat it as empty.  */\n            cp = \"\";\n          else\n            {\n              FILE *fp;\n\n              fp = fdopen (fd, \"r\");\n              if (fp == NULL)\n                {\n                  /* Out of memory.  Treat the file as empty.  */\n                  close (fd);\n                  cp = \"\";\n                }\n              else\n                {\n                  /* Parse the file's contents.  */\n                  char *res_ptr = NULL;\n                  size_t res_size = 0;\n\n                  for (;;)\n                    {\n                      int c;\n                      char buf1[50+1];\n                      char buf2[50+1];\n                      size_t l1, l2;\n                      char *old_res_ptr;\n\n                      c = getc (fp);\n                      if (c == EOF)\n                        break;\n                      if (c == '\\n' || c == ' ' || c == '\\t')\n                        continue;\n                      if (c == '#')\n                        {\n                          /* Skip comment, to end of line.  */\n                          do\n                            c = getc (fp);\n                          while (!(c == EOF || c == '\\n'));\n                          if (c == EOF)\n                            break;\n                          continue;\n                        }\n                      ungetc (c, fp);\n                      if (fscanf (fp, \"%50s %50s\", buf1, buf2) < 2)\n                        break;\n                      l1 = strlen (buf1);\n                      l2 = strlen (buf2);\n                      old_res_ptr = res_ptr;\n                      if (res_size == 0)\n                        {\n                          res_size = l1 + 1 + l2 + 1;\n                          res_ptr = (char *) malloc (res_size + 1);\n                        }\n                      else\n                        {\n                          res_size += l1 + 1 + l2 + 1;\n                          res_ptr = (char *) realloc (res_ptr, res_size + 1);\n                        }\n                      if (res_ptr == NULL)\n                        {\n                          /* Out of memory. */\n                          res_size = 0;\n                          free (old_res_ptr);\n                          break;\n                        }\n                      strcpy (res_ptr + res_size - (l2 + 1) - (l1 + 1), buf1);\n                      strcpy (res_ptr + res_size - (l2 + 1), buf2);\n                    }\n                  fclose (fp);\n                  if (res_size == 0)\n                    cp = \"\";\n                  else\n                    {\n                      *(res_ptr + res_size) = '\\0';\n                      cp = res_ptr;\n                    }\n                }\n            }\n\n          free (file_name);\n        }\n\n#else\n\n# if defined DARWIN7\n      /* To avoid the trouble of installing a file that is shared by many\n         GNU packages -- many packaging systems have problems with this --,\n         simply inline the aliases here.  */\n      cp = \"ISO8859-1\" \"\\0\" \"ISO-8859-1\" \"\\0\"\n           \"ISO8859-2\" \"\\0\" \"ISO-8859-2\" \"\\0\"\n           \"ISO8859-4\" \"\\0\" \"ISO-8859-4\" \"\\0\"\n           \"ISO8859-5\" \"\\0\" \"ISO-8859-5\" \"\\0\"\n           \"ISO8859-7\" \"\\0\" \"ISO-8859-7\" \"\\0\"\n           \"ISO8859-9\" \"\\0\" \"ISO-8859-9\" \"\\0\"\n           \"ISO8859-13\" \"\\0\" \"ISO-8859-13\" \"\\0\"\n           \"ISO8859-15\" \"\\0\" \"ISO-8859-15\" \"\\0\"\n           \"KOI8-R\" \"\\0\" \"KOI8-R\" \"\\0\"\n           \"KOI8-U\" \"\\0\" \"KOI8-U\" \"\\0\"\n           \"CP866\" \"\\0\" \"CP866\" \"\\0\"\n           \"CP949\" \"\\0\" \"CP949\" \"\\0\"\n           \"CP1131\" \"\\0\" \"CP1131\" \"\\0\"\n           \"CP1251\" \"\\0\" \"CP1251\" \"\\0\"\n           \"eucCN\" \"\\0\" \"GB2312\" \"\\0\"\n           \"GB2312\" \"\\0\" \"GB2312\" \"\\0\"\n           \"eucJP\" \"\\0\" \"EUC-JP\" \"\\0\"\n           \"eucKR\" \"\\0\" \"EUC-KR\" \"\\0\"\n           \"Big5\" \"\\0\" \"BIG5\" \"\\0\"\n           \"Big5HKSCS\" \"\\0\" \"BIG5-HKSCS\" \"\\0\"\n           \"GBK\" \"\\0\" \"GBK\" \"\\0\"\n           \"GB18030\" \"\\0\" \"GB18030\" \"\\0\"\n           \"SJIS\" \"\\0\" \"SHIFT_JIS\" \"\\0\"\n           \"ARMSCII-8\" \"\\0\" \"ARMSCII-8\" \"\\0\"\n           \"PT154\" \"\\0\" \"PT154\" \"\\0\"\n         /*\"ISCII-DEV\" \"\\0\" \"?\" \"\\0\"*/\n           \"*\" \"\\0\" \"UTF-8\" \"\\0\";\n# endif\n\n# if defined VMS\n      /* To avoid the troubles of an extra file charset.alias_vms in the\n         sources of many GNU packages, simply inline the aliases here.  */\n      /* The list of encodings is taken from the OpenVMS 7.3-1 documentation\n         \"Compaq C Run-Time Library Reference Manual for OpenVMS systems\"\n         section 10.7 \"Handling Different Character Sets\".  */\n      cp = \"ISO8859-1\" \"\\0\" \"ISO-8859-1\" \"\\0\"\n           \"ISO8859-2\" \"\\0\" \"ISO-8859-2\" \"\\0\"\n           \"ISO8859-5\" \"\\0\" \"ISO-8859-5\" \"\\0\"\n           \"ISO8859-7\" \"\\0\" \"ISO-8859-7\" \"\\0\"\n           \"ISO8859-8\" \"\\0\" \"ISO-8859-8\" \"\\0\"\n           \"ISO8859-9\" \"\\0\" \"ISO-8859-9\" \"\\0\"\n           /* Japanese */\n           \"eucJP\" \"\\0\" \"EUC-JP\" \"\\0\"\n           \"SJIS\" \"\\0\" \"SHIFT_JIS\" \"\\0\"\n           \"DECKANJI\" \"\\0\" \"DEC-KANJI\" \"\\0\"\n           \"SDECKANJI\" \"\\0\" \"EUC-JP\" \"\\0\"\n           /* Chinese */\n           \"eucTW\" \"\\0\" \"EUC-TW\" \"\\0\"\n           \"DECHANYU\" \"\\0\" \"DEC-HANYU\" \"\\0\"\n           \"DECHANZI\" \"\\0\" \"GB2312\" \"\\0\"\n           /* Korean */\n           \"DECKOREAN\" \"\\0\" \"EUC-KR\" \"\\0\";\n# endif\n\n# if defined WINDOWS_NATIVE || defined __CYGWIN__\n      /* To avoid the troubles of installing a separate file in the same\n         directory as the DLL and of retrieving the DLL's directory at\n         runtime, simply inline the aliases here.  */\n\n      cp = \"CP936\" \"\\0\" \"GBK\" \"\\0\"\n           \"CP1361\" \"\\0\" \"JOHAB\" \"\\0\"\n           \"CP20127\" \"\\0\" \"ASCII\" \"\\0\"\n           \"CP20866\" \"\\0\" \"KOI8-R\" \"\\0\"\n           \"CP20936\" \"\\0\" \"GB2312\" \"\\0\"\n           \"CP21866\" \"\\0\" \"KOI8-RU\" \"\\0\"\n           \"CP28591\" \"\\0\" \"ISO-8859-1\" \"\\0\"\n           \"CP28592\" \"\\0\" \"ISO-8859-2\" \"\\0\"\n           \"CP28593\" \"\\0\" \"ISO-8859-3\" \"\\0\"\n           \"CP28594\" \"\\0\" \"ISO-8859-4\" \"\\0\"\n           \"CP28595\" \"\\0\" \"ISO-8859-5\" \"\\0\"\n           \"CP28596\" \"\\0\" \"ISO-8859-6\" \"\\0\"\n           \"CP28597\" \"\\0\" \"ISO-8859-7\" \"\\0\"\n           \"CP28598\" \"\\0\" \"ISO-8859-8\" \"\\0\"\n           \"CP28599\" \"\\0\" \"ISO-8859-9\" \"\\0\"\n           \"CP28605\" \"\\0\" \"ISO-8859-15\" \"\\0\"\n           \"CP38598\" \"\\0\" \"ISO-8859-8\" \"\\0\"\n           \"CP51932\" \"\\0\" \"EUC-JP\" \"\\0\"\n           \"CP51936\" \"\\0\" \"GB2312\" \"\\0\"\n           \"CP51949\" \"\\0\" \"EUC-KR\" \"\\0\"\n           \"CP51950\" \"\\0\" \"EUC-TW\" \"\\0\"\n           \"CP54936\" \"\\0\" \"GB18030\" \"\\0\"\n           \"CP65001\" \"\\0\" \"UTF-8\" \"\\0\";\n# endif\n# if defined OS2\n      /* To avoid the troubles of installing a separate file in the same\n         directory as the DLL and of retrieving the DLL's directory at\n         runtime, simply inline the aliases here.  */\n\n      /* The list of encodings is taken from \"List of OS/2 Codepages\"\n         by Alex Taylor:\n         <http://altsan.org/os2/toolkits/uls/index.html#codepages>.\n         See also \"IBM Globalization - Code page identifiers\":\n         <http://www-01.ibm.com/software/globalization/cp/cp_cpgid.html>.  */\n      cp = \"CP813\" \"\\0\" \"ISO-8859-7\" \"\\0\"\n           \"CP878\" \"\\0\" \"KOI8-R\" \"\\0\"\n           \"CP819\" \"\\0\" \"ISO-8859-1\" \"\\0\"\n           \"CP912\" \"\\0\" \"ISO-8859-2\" \"\\0\"\n           \"CP913\" \"\\0\" \"ISO-8859-3\" \"\\0\"\n           \"CP914\" \"\\0\" \"ISO-8859-4\" \"\\0\"\n           \"CP915\" \"\\0\" \"ISO-8859-5\" \"\\0\"\n           \"CP916\" \"\\0\" \"ISO-8859-8\" \"\\0\"\n           \"CP920\" \"\\0\" \"ISO-8859-9\" \"\\0\"\n           \"CP921\" \"\\0\" \"ISO-8859-13\" \"\\0\"\n           \"CP923\" \"\\0\" \"ISO-8859-15\" \"\\0\"\n           \"CP954\" \"\\0\" \"EUC-JP\" \"\\0\"\n           \"CP964\" \"\\0\" \"EUC-TW\" \"\\0\"\n           \"CP970\" \"\\0\" \"EUC-KR\" \"\\0\"\n           \"CP1089\" \"\\0\" \"ISO-8859-6\" \"\\0\"\n           \"CP1208\" \"\\0\" \"UTF-8\" \"\\0\"\n           \"CP1381\" \"\\0\" \"GB2312\" \"\\0\"\n           \"CP1386\" \"\\0\" \"GBK\" \"\\0\"\n           \"CP3372\" \"\\0\" \"EUC-JP\" \"\\0\";\n# endif\n#endif\n\n      charset_aliases = cp;\n    }\n\n  return cp;\n}",
      "lines": 262,
      "depth": 23,
      "decorators": [
        "static",
        "static",
        "const",
        "const",
        "char",
        "*\nget_charset_aliases (void)",
        "*"
      ]
    },
    "locale_charset": {
      "start_point": [
        395,
        0
      ],
      "end_point": [
        616,
        1
      ],
      "content": "const char *\nlocale_charset (void)\n{\n  const char *codeset;\n  const char *aliases;\n\n#if !(defined WINDOWS_NATIVE || defined OS2)\n\n# if HAVE_LANGINFO_CODESET\n\n  /* Most systems support nl_langinfo (CODESET) nowadays.  */\n  codeset = nl_langinfo (CODESET);\n\n#  ifdef __CYGWIN__\n  /* Cygwin < 1.7 does not have locales.  nl_langinfo (CODESET) always\n     returns \"US-ASCII\".  Return the suffix of the locale name from the\n     environment variables (if present) or the codepage as a number.  */\n  if (codeset != NULL && strcmp (codeset, \"US-ASCII\") == 0)\n    {\n      const char *locale;\n      static char buf[2 + 10 + 1];\n\n      locale = getenv (\"LC_ALL\");\n      if (locale == NULL || locale[0] == '\\0')\n        {\n          locale = getenv (\"LC_CTYPE\");\n          if (locale == NULL || locale[0] == '\\0')\n            locale = getenv (\"LANG\");\n        }\n      if (locale != NULL && locale[0] != '\\0')\n        {\n          /* If the locale name contains an encoding after the dot, return\n             it.  */\n          const char *dot = strchr (locale, '.');\n\n          if (dot != NULL)\n            {\n              const char *modifier;\n\n              dot++;\n              /* Look for the possible @... trailer and remove it, if any.  */\n              modifier = strchr (dot, '@');\n              if (modifier == NULL)\n                return dot;\n              if (modifier - dot < sizeof (buf))\n                {\n                  memcpy (buf, dot, modifier - dot);\n                  buf [modifier - dot] = '\\0';\n                  return buf;\n                }\n            }\n        }\n\n      /* The Windows API has a function returning the locale's codepage as a\n         number: GetACP().  This encoding is used by Cygwin, unless the user\n         has set the environment variable CYGWIN=codepage:oem (which very few\n         people do).\n         Output directed to console windows needs to be converted (to\n         GetOEMCP() if the console is using a raster font, or to\n         GetConsoleOutputCP() if it is using a TrueType font).  Cygwin does\n         this conversion transparently (see winsup/cygwin/fhandler_console.cc),\n         converting to GetConsoleOutputCP().  This leads to correct results,\n         except when SetConsoleOutputCP has been called and a raster font is\n         in use.  */\n      sprintf (buf, \"CP%u\", GetACP ());\n      codeset = buf;\n    }\n#  endif\n\n# else\n\n  /* On old systems which lack it, use setlocale or getenv.  */\n  const char *locale = NULL;\n\n  /* But most old systems don't have a complete set of locales.  Some\n     (like SunOS 4 or DJGPP) have only the C locale.  Therefore we don't\n     use setlocale here; it would return \"C\" when it doesn't support the\n     locale name the user has set.  */\n#  if 0\n  locale = setlocale (LC_CTYPE, NULL);\n#  endif\n  if (locale == NULL || locale[0] == '\\0')\n    {\n      locale = getenv (\"LC_ALL\");\n      if (locale == NULL || locale[0] == '\\0')\n        {\n          locale = getenv (\"LC_CTYPE\");\n          if (locale == NULL || locale[0] == '\\0')\n            locale = getenv (\"LANG\");\n        }\n    }\n\n  /* On some old systems, one used to set locale = \"iso8859_1\". On others,\n     you set it to \"language_COUNTRY.charset\". In any case, we resolve it\n     through the charset.alias file.  */\n  codeset = locale;\n\n# endif\n\n#elif defined WINDOWS_NATIVE\n\n  static char buf[2 + 10 + 1];\n\n  /* The Windows API has a function returning the locale's codepage as\n     a number, but the value doesn't change according to what the\n     'setlocale' call specified.  So we use it as a last resort, in\n     case the string returned by 'setlocale' doesn't specify the\n     codepage.  */\n  char *current_locale = setlocale (LC_ALL, NULL);\n  char *pdot;\n\n  /* If they set different locales for different categories,\n     'setlocale' will return a semi-colon separated list of locale\n     values.  To make sure we use the correct one, we choose LC_CTYPE.  */\n  if (strchr (current_locale, ';'))\n    current_locale = setlocale (LC_CTYPE, NULL);\n\n  pdot = strrchr (current_locale, '.');\n  if (pdot && 2 + strlen (pdot + 1) + 1 <= sizeof (buf))\n    sprintf (buf, \"CP%s\", pdot + 1);\n  else\n    {\n      /* The Windows API has a function returning the locale's codepage as a\n        number: GetACP().\n        When the output goes to a console window, it needs to be provided in\n        GetOEMCP() encoding if the console is using a raster font, or in\n        GetConsoleOutputCP() encoding if it is using a TrueType font.\n        But in GUI programs and for output sent to files and pipes, GetACP()\n        encoding is the best bet.  */\n      sprintf (buf, \"CP%u\", GetACP ());\n    }\n  codeset = buf;\n\n#elif defined OS2\n\n  const char *locale;\n  static char buf[2 + 10 + 1];\n  ULONG cp[3];\n  ULONG cplen;\n\n  codeset = NULL;\n\n  /* Allow user to override the codeset, as set in the operating system,\n     with standard language environment variables.  */\n  locale = getenv (\"LC_ALL\");\n  if (locale == NULL || locale[0] == '\\0')\n    {\n      locale = getenv (\"LC_CTYPE\");\n      if (locale == NULL || locale[0] == '\\0')\n        locale = getenv (\"LANG\");\n    }\n  if (locale != NULL && locale[0] != '\\0')\n    {\n      /* If the locale name contains an encoding after the dot, return it.  */\n      const char *dot = strchr (locale, '.');\n\n      if (dot != NULL)\n        {\n          const char *modifier;\n\n          dot++;\n          /* Look for the possible @... trailer and remove it, if any.  */\n          modifier = strchr (dot, '@');\n          if (modifier == NULL)\n            return dot;\n          if (modifier - dot < sizeof (buf))\n            {\n              memcpy (buf, dot, modifier - dot);\n              buf [modifier - dot] = '\\0';\n              return buf;\n            }\n        }\n\n      /* For the POSIX locale, don't use the system's codepage.  */\n      if (strcmp (locale, \"C\") == 0 || strcmp (locale, \"POSIX\") == 0)\n        codeset = \"\";\n    }\n\n  if (codeset == NULL)\n    {\n      /* OS/2 has a function returning the locale's codepage as a number.  */\n      if (DosQueryCp (sizeof (cp), cp, &cplen))\n        codeset = \"\";\n      else\n        {\n          sprintf (buf, \"CP%u\", cp[0]);\n          codeset = buf;\n        }\n    }\n\n#endif\n\n  if (codeset == NULL)\n    /* The canonical name cannot be determined.  */\n    codeset = \"\";\n\n  /* Resolve alias. */\n  for (aliases = get_charset_aliases ();\n       *aliases != '\\0';\n       aliases += strlen (aliases) + 1, aliases += strlen (aliases) + 1)\n    if (strcmp (codeset, aliases) == 0\n        || (aliases[0] == '*' && aliases[1] == '\\0'))\n      {\n        codeset = aliases + strlen (aliases) + 1;\n        break;\n      }\n\n  /* Don't return an empty string.  GNU libc and GNU libiconv interpret\n     the empty string as denoting \"the locale's character encoding\",\n     thus GNU libiconv would call this function a second time.  */\n  if (codeset[0] == '\\0')\n    codeset = \"ASCII\";\n\n#ifdef DARWIN7\n  /* Mac OS X sets MB_CUR_MAX to 1 when LC_ALL=C, and \"UTF-8\"\n     (the default codeset) does not work when MB_CUR_MAX is 1.  */\n  if (strcmp (codeset, \"UTF-8\") == 0 && MB_CUR_MAX_L (uselocale (NULL)) <= 1)\n    codeset = \"ASCII\";\n#endif\n\n  return codeset;\n}",
      "lines": 222,
      "depth": 18,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nlocale_charset (void)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/localcharset.h": {},
  "grep/grep-3.1/lib/locale.in.h": {},
  "grep/grep-3.1/lib/localeconv.c": {
    "localeconv": [
      {
        "start_point": [
          26,
          0
        ],
        "end_point": [
          60,
          1
        ],
        "content": "struct lconv *\nlocaleconv (void)\n{\n  static struct lconv result;\n# undef lconv\n# undef localeconv\n  struct lconv *sys_result = localeconv ();\n\n  result.decimal_point = sys_result->decimal_point;\n  result.thousands_sep = sys_result->thousands_sep;\n  result.grouping = sys_result->grouping;\n  result.mon_decimal_point = sys_result->mon_decimal_point;\n  result.mon_thousands_sep = sys_result->mon_thousands_sep;\n  result.mon_grouping = sys_result->mon_grouping;\n  result.positive_sign = sys_result->positive_sign;\n  result.negative_sign = sys_result->negative_sign;\n  result.currency_symbol = sys_result->currency_symbol;\n  result.frac_digits = sys_result->frac_digits;\n  result.p_cs_precedes = sys_result->p_cs_precedes;\n  result.p_sign_posn = sys_result->p_sign_posn;\n  result.p_sep_by_space = sys_result->p_sep_by_space;\n  result.n_cs_precedes = sys_result->n_cs_precedes;\n  result.n_sign_posn = sys_result->n_sign_posn;\n  result.n_sep_by_space = sys_result->n_sep_by_space;\n  result.int_curr_symbol = sys_result->int_curr_symbol;\n  result.int_frac_digits = sys_result->int_frac_digits;\n  result.int_p_cs_precedes = sys_result->p_cs_precedes;\n  result.int_p_sign_posn = sys_result->p_sign_posn;\n  result.int_p_sep_by_space = sys_result->p_sep_by_space;\n  result.int_n_cs_precedes = sys_result->n_cs_precedes;\n  result.int_n_sign_posn = sys_result->n_sign_posn;\n  result.int_n_sep_by_space = sys_result->n_sep_by_space;\n\n  return &result;\n}",
        "lines": 35,
        "depth": 7,
        "decorators": [
          "struct lconv",
          "struct",
          "lconv",
          "*\nlocaleconv (void)",
          "*"
        ]
      },
      {
        "start_point": [
          68,
          0
        ],
        "end_point": [
          100,
          1
        ],
        "content": "struct lconv *\nlocaleconv (void)\n{\n  static /*const*/ struct lconv result =\n    {\n      /* decimal_point */ \".\",\n      /* thousands_sep */ \"\",\n      /* grouping */ \"\",\n      /* mon_decimal_point */ \"\",\n      /* mon_thousands_sep */ \"\",\n      /* mon_grouping */ \"\",\n      /* positive_sign */ \"\",\n      /* negative_sign */ \"\",\n      /* currency_symbol */ \"\",\n      /* frac_digits */ CHAR_MAX,\n      /* p_cs_precedes */ CHAR_MAX,\n      /* p_sign_posn */ CHAR_MAX,\n      /* p_sep_by_space */ CHAR_MAX,\n      /* n_cs_precedes */ CHAR_MAX,\n      /* n_sign_posn */ CHAR_MAX,\n      /* n_sep_by_space */ CHAR_MAX,\n      /* int_curr_symbol */ \"\",\n      /* int_frac_digits */ CHAR_MAX,\n      /* int_p_cs_precedes */ CHAR_MAX,\n      /* int_p_sign_posn */ CHAR_MAX,\n      /* int_p_sep_by_space */ CHAR_MAX,\n      /* int_n_cs_precedes */ CHAR_MAX,\n      /* int_n_sign_posn */ CHAR_MAX,\n      /* int_n_sep_by_space */ CHAR_MAX\n    };\n\n  return &result;\n}",
        "lines": 33,
        "depth": 7,
        "decorators": [
          "struct lconv",
          "struct",
          "lconv",
          "*\nlocaleconv (void)",
          "*"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/localeinfo.c": {
    "is_using_utf8": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "static bool\nis_using_utf8 (void)\n{\n  wchar_t wc;\n  mbstate_t mbs = {0};\n  return mbrtowc (&wc, \"\\xc4\\x80\", 2, &mbs) == 2 && wc == 0x100;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "init_localeinfo": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "content": "void\ninit_localeinfo (struct localeinfo *localeinfo)\n{\n  int i;\n\n  localeinfo->multibyte = MB_CUR_MAX > 1;\n  localeinfo->using_utf8 = is_using_utf8 ();\n\n  for (i = CHAR_MIN; i <= CHAR_MAX; i++)\n    {\n      char c = i;\n      unsigned char uc = i;\n      mbstate_t s = {0};\n      wchar_t wc;\n      size_t len = mbrtowc (&wc, &c, 1, &s);\n      localeinfo->sbclen[uc] = len <= 1 ? 1 : - (int) - len;\n      localeinfo->sbctowc[uc] = len <= 1 ? wc : WEOF;\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "case_folded_counterparts": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        112,
        1
      ],
      "content": "int\ncase_folded_counterparts (wint_t c, wchar_t folded[CASE_FOLDED_BUFSIZE])\n{\n  int i;\n  int n = 0;\n  wint_t uc = towupper (c);\n  wint_t lc = towlower (uc);\n  if (uc != c)\n    folded[n++] = uc;\n  if (lc != uc && lc != c && towupper (lc) == uc)\n    folded[n++] = lc;\n  for (i = 0; i < sizeof lonesome_lower / sizeof *lonesome_lower; i++)\n    {\n      wint_t li = lonesome_lower[i];\n      if (li != lc && li != uc && li != c && towupper (li) == uc)\n        folded[n++] = li;\n    }\n  return n;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/localeinfo.h": {},
  "grep/grep-3.1/lib/lseek.c": {
    "rpl_lseek": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "off_t\nrpl_lseek (int fd, off_t offset, int whence)\n{\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* mingw lseek mistakenly succeeds on pipes, sockets, and terminals.  */\n  HANDLE h = (HANDLE) _get_osfhandle (fd);\n  if (h == INVALID_HANDLE_VALUE)\n    {\n      errno = EBADF;\n      return -1;\n    }\n  if (GetFileType (h) != FILE_TYPE_DISK)\n    {\n      errno = ESPIPE;\n      return -1;\n    }\n#else\n  /* BeOS lseek mistakenly succeeds on pipes...  */\n  struct stat statbuf;\n  if (fstat (fd, &statbuf) < 0)\n    return -1;\n  if (!S_ISREG (statbuf.st_mode))\n    {\n      errno = ESPIPE;\n      return -1;\n    }\n#endif\n#if _GL_WINDOWS_64_BIT_OFF_T\n  return _lseeki64 (fd, offset, whence);\n#else\n  return lseek (fd, offset, whence);\n#endif\n}",
      "lines": 33,
      "depth": 11,
      "decorators": [
        "off_t"
      ]
    }
  },
  "grep/grep-3.1/lib/lstat.c": {
    "orig_lstat": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        41,
        1
      ],
      "content": "static int\norig_lstat (const char *filename, struct stat *buf)\n{\n  return lstat (filename, buf);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_lstat": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "content": "int\nrpl_lstat (const char *file, struct stat *sbuf)\n{\n  size_t len;\n  int lstat_result = orig_lstat (file, sbuf);\n\n  if (lstat_result != 0)\n    return lstat_result;\n\n  /* This replacement file can blindly check against '/' rather than\n     using the ISSLASH macro, because all platforms with '\\\\' either\n     lack symlinks (mingw) or have working lstat (cygwin) and thus do\n     not compile this file.  0 len should have already been filtered\n     out above, with a failure return of ENOENT.  */\n  len = strlen (file);\n  if (file[len - 1] != '/' || S_ISDIR (sbuf->st_mode))\n    return 0;\n\n  /* At this point, a trailing slash is only permitted on\n     symlink-to-dir; but it should have found information on the\n     directory, not the symlink.  Call stat() to get info about the\n     link's referent.  Our replacement stat guarantees valid results,\n     even if the symlink is not pointing to a directory.  */\n  if (!S_ISLNK (sbuf->st_mode))\n    {\n      errno = ENOTDIR;\n      return -1;\n    }\n  return stat (file, sbuf);\n}",
      "lines": 30,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/malloc.c": {
    "rpl_malloc": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "void *\nrpl_malloc (size_t n)\n{\n  void *result;\n\n#if NEED_MALLOC_GNU\n  if (n == 0)\n    n = 1;\n#endif\n\n  result = malloc (n);\n\n#if !HAVE_MALLOC_POSIX\n  if (result == NULL)\n    errno = ENOMEM;\n#endif\n\n  return result;\n}",
      "lines": 19,
      "depth": 7,
      "decorators": [
        "void",
        "*\nrpl_malloc (size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/malloca.c": {
    "mmalloca": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        111,
        1
      ],
      "content": "void *\nmmalloca (size_t n)\n{\n#if HAVE_ALLOCA\n  /* Allocate one more word, that serves as an indicator for malloc()ed\n     memory, so that freea() of an alloca() result is fast.  */\n  size_t nplus = n + HEADER_SIZE;\n\n  if (nplus >= n)\n    {\n      void *p = malloc (nplus);\n\n      if (p != NULL)\n        {\n          size_t slot;\n          union header *h = p;\n\n          p = h + 1;\n\n          /* Put a magic number into the indicator word.  */\n          h->magic.word = MAGIC_NUMBER;\n\n          /* Enter p into the hash table.  */\n          slot = (uintptr_t) p % HASH_TABLE_SIZE;\n          h->next = mmalloca_results[slot];\n          mmalloca_results[slot] = p;\n\n          return p;\n        }\n    }\n  /* Out of memory.  */\n  return NULL;\n#else\n# if !MALLOC_0_IS_NONNULL\n  if (n == 0)\n    n = 1;\n# endif\n  return malloc (n);\n#endif\n}",
      "lines": 40,
      "depth": 13,
      "decorators": [
        "void",
        "*\nmmalloca (size_t n)",
        "*"
      ]
    },
    "freea": {
      "start_point": [
        114,
        0
      ],
      "end_point": [
        147,
        1
      ],
      "content": "void\nfreea (void *p)\n{\n  /* mmalloca() may have returned NULL.  */\n  if (p != NULL)\n    {\n      /* Attempt to quickly distinguish the mmalloca() result - which has\n         a magic indicator word - and the alloca() result - which has an\n         uninitialized indicator word.  It is for this test that sa_increment\n         additional bytes are allocated in the alloca() case.  */\n      if (((int *) p)[-1] == MAGIC_NUMBER)\n        {\n          /* Looks like a mmalloca() result.  To see whether it really is one,\n             perform a lookup in the hash table.  */\n          size_t slot = (uintptr_t) p % HASH_TABLE_SIZE;\n          void **chain = &mmalloca_results[slot];\n          for (; *chain != NULL;)\n            {\n              union header *h = p;\n              if (*chain == p)\n                {\n                  /* Found it.  Remove it from the hash table and free it.  */\n                  union header *p_begin = h - 1;\n                  *chain = p_begin->next;\n                  free (p_begin);\n                  return;\n                }\n              h = *chain;\n              chain = &h[-1].next;\n            }\n        }\n      /* At this point, we know it was not a mmalloca() result.  */\n    }\n}",
      "lines": 34,
      "depth": 14,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/malloca.h": {},
  "grep/grep-3.1/lib/mbchar.c": {},
  "grep/grep-3.1/lib/mbchar.h": {
    "mb_width_aux": {
      "start_point": [
        245,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "content": "MBCHAR_INLINE int\nmb_width_aux (wint_t wc)\n{\n  int w = wcwidth (wc);\n  /* For unprintable characters, arbitrarily return 0 for control characters\n     and MB_UNPRINTABLE_WIDTH otherwise.  */\n  return (w >= 0 ? w : iswcntrl (wc) ? 0 : MB_UNPRINTABLE_WIDTH);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "MBCHAR_INLINE",
        "int",
        "int"
      ]
    },
    "mb_copy": {
      "start_point": [
        266,
        0
      ],
      "end_point": [
        279,
        1
      ],
      "content": "MBCHAR_INLINE void\nmb_copy (mbchar_t *new_mbc, const mbchar_t *old_mbc)\n{\n  if (old_mbc->ptr == &old_mbc->buf[0])\n    {\n      memcpy (&new_mbc->buf[0], &old_mbc->buf[0], old_mbc->bytes);\n      new_mbc->ptr = &new_mbc->buf[0];\n    }\n  else\n    new_mbc->ptr = old_mbc->ptr;\n  new_mbc->bytes = old_mbc->bytes;\n  if ((new_mbc->wc_valid = old_mbc->wc_valid))\n    new_mbc->wc = old_mbc->wc;\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "MBCHAR_INLINE",
        "void",
        "void"
      ]
    },
    "is_basic": [
      {
        "start_point": [
          314,
          0
        ],
        "end_point": [
          319,
          1
        ],
        "content": "MBCHAR_INLINE bool\nis_basic (char c)\n{\n  return (is_basic_table [(unsigned char) c >> 5] >> ((unsigned char) c & 31))\n         & 1;\n}",
        "lines": 6,
        "depth": 12,
        "decorators": [
          "MBCHAR_INLINE",
          "bool",
          "bool"
        ]
      },
      {
        "start_point": [
          323,
          0
        ],
        "end_point": [
          353,
          1
        ],
        "content": "MBCHAR_INLINE bool\nis_basic (char c)\n{\n  switch (c)\n    {\n    case '\\t': case '\\v': case '\\f':\n    case ' ': case '!': case '\"': case '#': case '%':\n    case '&': case '\\'': case '(': case ')': case '*':\n    case '+': case ',': case '-': case '.': case '/':\n    case '0': case '1': case '2': case '3': case '4':\n    case '5': case '6': case '7': case '8': case '9':\n    case ':': case ';': case '<': case '=': case '>':\n    case '?':\n    case 'A': case 'B': case 'C': case 'D': case 'E':\n    case 'F': case 'G': case 'H': case 'I': case 'J':\n    case 'K': case 'L': case 'M': case 'N': case 'O':\n    case 'P': case 'Q': case 'R': case 'S': case 'T':\n    case 'U': case 'V': case 'W': case 'X': case 'Y':\n    case 'Z':\n    case '[': case '\\\\': case ']': case '^': case '_':\n    case 'a': case 'b': case 'c': case 'd': case 'e':\n    case 'f': case 'g': case 'h': case 'i': case 'j':\n    case 'k': case 'l': case 'm': case 'n': case 'o':\n    case 'p': case 'q': case 'r': case 's': case 't':\n    case 'u': case 'v': case 'w': case 'x': case 'y':\n    case 'z': case '{': case '|': case '}': case '~':\n      return 1;\n    default:\n      return 0;\n    }\n}",
        "lines": 31,
        "depth": 7,
        "decorators": [
          "MBCHAR_INLINE",
          "bool",
          "bool"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/mbiter.c": {},
  "grep/grep-3.1/lib/mbiter.h": {
    "mbiter_multi_next": {
      "start_point": [
        122,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "content": "MBITER_INLINE void\nmbiter_multi_next (struct mbiter_multi *iter)\n{\n  if (iter->next_done)\n    return;\n  if (iter->in_shift)\n    goto with_shift;\n  /* Handle most ASCII characters quickly, without calling mbrtowc().  */\n  if (is_basic (*iter->cur.ptr))\n    {\n      /* These characters are part of the basic character set.  ISO C 99\n         guarantees that their wide character code is identical to their\n         char code.  */\n      iter->cur.bytes = 1;\n      iter->cur.wc = *iter->cur.ptr;\n      iter->cur.wc_valid = true;\n    }\n  else\n    {\n      assert (mbsinit (&iter->state));\n      iter->in_shift = true;\n    with_shift:\n      iter->cur.bytes = mbrtowc (&iter->cur.wc, iter->cur.ptr,\n                                 iter->limit - iter->cur.ptr, &iter->state);\n      if (iter->cur.bytes == (size_t) -1)\n        {\n          /* An invalid multibyte sequence was encountered.  */\n          iter->cur.bytes = 1;\n          iter->cur.wc_valid = false;\n          /* Whether to set iter->in_shift = false and reset iter->state\n             or not is not very important; the string is bogus anyway.  */\n        }\n      else if (iter->cur.bytes == (size_t) -2)\n        {\n          /* An incomplete multibyte character at the end.  */\n          iter->cur.bytes = iter->limit - iter->cur.ptr;\n          iter->cur.wc_valid = false;\n          /* Whether to set iter->in_shift = false and reset iter->state\n             or not is not important; the string end is reached anyway.  */\n        }\n      else\n        {\n          if (iter->cur.bytes == 0)\n            {\n              /* A null wide character was encountered.  */\n              iter->cur.bytes = 1;\n              assert (*iter->cur.ptr == '\\0');\n              assert (iter->cur.wc == 0);\n            }\n          iter->cur.wc_valid = true;\n\n          /* When in the initial state, we can go back treating ASCII\n             characters more quickly.  */\n          if (mbsinit (&iter->state))\n            iter->in_shift = false;\n        }\n    }\n  iter->next_done = true;\n}",
      "lines": 59,
      "depth": 17,
      "decorators": [
        "MBITER_INLINE",
        "void",
        "void"
      ]
    },
    "mbiter_multi_reloc": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        187,
        1
      ],
      "content": "MBITER_INLINE void\nmbiter_multi_reloc (struct mbiter_multi *iter, ptrdiff_t ptrdiff)\n{\n  iter->cur.ptr += ptrdiff;\n  iter->limit += ptrdiff;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "MBITER_INLINE",
        "void",
        "void"
      ]
    },
    "mbiter_multi_copy": {
      "start_point": [
        189,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "content": "MBITER_INLINE void\nmbiter_multi_copy (struct mbiter_multi *new_iter, const struct mbiter_multi *old_iter)\n{\n  new_iter->limit = old_iter->limit;\n  if ((new_iter->in_shift = old_iter->in_shift))\n    memcpy (&new_iter->state, &old_iter->state, sizeof (mbstate_t));\n  else\n    memset (&new_iter->state, 0, sizeof (mbstate_t));\n  new_iter->next_done = old_iter->next_done;\n  mb_copy (&new_iter->cur, &old_iter->cur);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "MBITER_INLINE",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/mbrlen.c": {
    "mbrlen": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        31,
        1
      ],
      "content": "size_t\nmbrlen (const char *s, size_t n, mbstate_t *ps)\n{\n  if (ps == NULL)\n    ps = &internal_state;\n  return mbrtowc (NULL, s, n, ps);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/mbrtowc.c": {
    "mbrtowc": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        332,
        1
      ],
      "content": "size_t\nmbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)\n{\n  char *pstate = (char *)ps;\n\n  if (s == NULL)\n    {\n      pwc = NULL;\n      s = \"\";\n      n = 1;\n    }\n\n  if (n == 0)\n    return (size_t)(-2);\n\n  /* Here n > 0.  */\n\n  if (pstate == NULL)\n    pstate = internal_state;\n\n  {\n    size_t nstate = pstate[0];\n    char buf[4];\n    const char *p;\n    size_t m;\n\n    switch (nstate)\n      {\n      case 0:\n        p = s;\n        m = n;\n        break;\n      case 3:\n        buf[2] = pstate[3];\n        FALLTHROUGH;\n      case 2:\n        buf[1] = pstate[2];\n        FALLTHROUGH;\n      case 1:\n        buf[0] = pstate[1];\n        p = buf;\n        m = nstate;\n        buf[m++] = s[0];\n        if (n >= 2 && m < 4)\n          {\n            buf[m++] = s[1];\n            if (n >= 3 && m < 4)\n              buf[m++] = s[2];\n          }\n        break;\n      default:\n        errno = EINVAL;\n        return (size_t)(-1);\n      }\n\n    /* Here m > 0.  */\n\n# if __GLIBC__ || defined __UCLIBC__\n    /* Work around bug <http://sourceware.org/bugzilla/show_bug.cgi?id=9674> */\n    mbtowc (NULL, NULL, 0);\n# endif\n    {\n      int res = mbtowc (pwc, p, m);\n\n      if (res >= 0)\n        {\n          if (pwc != NULL && ((*pwc == 0) != (res == 0)))\n            abort ();\n          if (nstate >= (res > 0 ? res : 1))\n            abort ();\n          res -= nstate;\n          pstate[0] = 0;\n          return res;\n        }\n\n      /* mbtowc does not distinguish between invalid and incomplete multibyte\n         sequences.  But mbrtowc needs to make this distinction.\n         There are two possible approaches:\n           - Use iconv() and its return value.\n           - Use built-in knowledge about the possible encodings.\n         Given the low quality of implementation of iconv() on the systems that\n         lack mbrtowc(), we use the second approach.\n         The possible encodings are:\n           - 8-bit encodings,\n           - EUC-JP, EUC-KR, GB2312, EUC-TW, BIG5, GB18030, SJIS,\n           - UTF-8.\n         Use specialized code for each.  */\n      if (m >= 4 || m >= MB_CUR_MAX)\n        goto invalid;\n      /* Here MB_CUR_MAX > 1 and 0 < m < 4.  */\n      {\n        const char *encoding = locale_charset ();\n\n        if (STREQ_OPT (encoding, \"UTF-8\", 'U', 'T', 'F', '-', '8', 0, 0, 0, 0))\n          {\n            /* Cf. unistr/u8-mblen.c.  */\n            unsigned char c = (unsigned char) p[0];\n\n            if (c >= 0xc2)\n              {\n                if (c < 0xe0)\n                  {\n                    if (m == 1)\n                      goto incomplete;\n                  }\n                else if (c < 0xf0)\n                  {\n                    if (m == 1)\n                      goto incomplete;\n                    if (m == 2)\n                      {\n                        unsigned char c2 = (unsigned char) p[1];\n\n                        if ((c2 ^ 0x80) < 0x40\n                            && (c >= 0xe1 || c2 >= 0xa0)\n                            && (c != 0xed || c2 < 0xa0))\n                          goto incomplete;\n                      }\n                  }\n                else if (c <= 0xf4)\n                  {\n                    if (m == 1)\n                      goto incomplete;\n                    else /* m == 2 || m == 3 */\n                      {\n                        unsigned char c2 = (unsigned char) p[1];\n\n                        if ((c2 ^ 0x80) < 0x40\n                            && (c >= 0xf1 || c2 >= 0x90)\n                            && (c < 0xf4 || (c == 0xf4 && c2 < 0x90)))\n                          {\n                            if (m == 2)\n                              goto incomplete;\n                            else /* m == 3 */\n                              {\n                                unsigned char c3 = (unsigned char) p[2];\n\n                                if ((c3 ^ 0x80) < 0x40)\n                                  goto incomplete;\n                              }\n                          }\n                      }\n                  }\n              }\n            goto invalid;\n          }\n\n        /* As a reference for this code, you can use the GNU libiconv\n           implementation.  Look for uses of the RET_TOOFEW macro.  */\n\n        if (STREQ_OPT (encoding,\n                       \"EUC-JP\", 'E', 'U', 'C', '-', 'J', 'P', 0, 0, 0))\n          {\n            if (m == 1)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if ((c >= 0xa1 && c < 0xff) || c == 0x8e || c == 0x8f)\n                  goto incomplete;\n              }\n            if (m == 2)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if (c == 0x8f)\n                  {\n                    unsigned char c2 = (unsigned char) p[1];\n\n                    if (c2 >= 0xa1 && c2 < 0xff)\n                      goto incomplete;\n                  }\n              }\n            goto invalid;\n          }\n        if (STREQ_OPT (encoding,\n                       \"EUC-KR\", 'E', 'U', 'C', '-', 'K', 'R', 0, 0, 0)\n            || STREQ_OPT (encoding,\n                          \"GB2312\", 'G', 'B', '2', '3', '1', '2', 0, 0, 0)\n            || STREQ_OPT (encoding,\n                          \"BIG5\", 'B', 'I', 'G', '5', 0, 0, 0, 0, 0))\n          {\n            if (m == 1)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if (c >= 0xa1 && c < 0xff)\n                  goto incomplete;\n              }\n            goto invalid;\n          }\n        if (STREQ_OPT (encoding,\n                       \"EUC-TW\", 'E', 'U', 'C', '-', 'T', 'W', 0, 0, 0))\n          {\n            if (m == 1)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if ((c >= 0xa1 && c < 0xff) || c == 0x8e)\n                  goto incomplete;\n              }\n            else /* m == 2 || m == 3 */\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if (c == 0x8e)\n                  goto incomplete;\n              }\n            goto invalid;\n          }\n        if (STREQ_OPT (encoding,\n                       \"GB18030\", 'G', 'B', '1', '8', '0', '3', '0', 0, 0))\n          {\n            if (m == 1)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if ((c >= 0x90 && c <= 0xe3) || (c >= 0xf8 && c <= 0xfe))\n                  goto incomplete;\n              }\n            else /* m == 2 || m == 3 */\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if (c >= 0x90 && c <= 0xe3)\n                  {\n                    unsigned char c2 = (unsigned char) p[1];\n\n                    if (c2 >= 0x30 && c2 <= 0x39)\n                      {\n                        if (m == 2)\n                          goto incomplete;\n                        else /* m == 3 */\n                          {\n                            unsigned char c3 = (unsigned char) p[2];\n\n                            if (c3 >= 0x81 && c3 <= 0xfe)\n                              goto incomplete;\n                          }\n                      }\n                  }\n              }\n            goto invalid;\n          }\n        if (STREQ_OPT (encoding, \"SJIS\", 'S', 'J', 'I', 'S', 0, 0, 0, 0, 0))\n          {\n            if (m == 1)\n              {\n                unsigned char c = (unsigned char) p[0];\n\n                if ((c >= 0x81 && c <= 0x9f) || (c >= 0xe0 && c <= 0xea)\n                    || (c >= 0xf0 && c <= 0xf9))\n                  goto incomplete;\n              }\n            goto invalid;\n          }\n\n        /* An unknown multibyte encoding.  */\n        goto incomplete;\n      }\n\n     incomplete:\n      {\n        size_t k = nstate;\n        /* Here 0 <= k < m < 4.  */\n        pstate[++k] = s[0];\n        if (k < m)\n          {\n            pstate[++k] = s[1];\n            if (k < m)\n              pstate[++k] = s[2];\n          }\n        if (k != m)\n          abort ();\n      }\n      pstate[0] = m;\n      return (size_t)(-2);\n\n     invalid:\n      errno = EILSEQ;\n      /* The conversion state is undefined, says POSIX.  */\n      return (size_t)(-1);\n    }\n  }\n}",
      "lines": 284,
      "depth": 25,
      "decorators": [
        "size_t"
      ]
    },
    "rpl_mbrtowc": {
      "start_point": [
        339,
        0
      ],
      "end_point": [
        411,
        1
      ],
      "content": "size_t\nrpl_mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)\n{\n  size_t ret;\n  wchar_t wc;\n\n# if MBRTOWC_NULL_ARG2_BUG || MBRTOWC_RETVAL_BUG || MBRTOWC_EMPTY_INPUT_BUG\n  if (s == NULL)\n    {\n      pwc = NULL;\n      s = \"\";\n      n = 1;\n    }\n# endif\n\n# if MBRTOWC_EMPTY_INPUT_BUG\n  if (n == 0)\n    return (size_t) -2;\n# endif\n\n  if (! pwc)\n    pwc = &wc;\n\n# if MBRTOWC_RETVAL_BUG\n  {\n    static mbstate_t internal_state;\n\n    /* Override mbrtowc's internal state.  We cannot call mbsinit() on the\n       hidden internal state, but we can call it on our variable.  */\n    if (ps == NULL)\n      ps = &internal_state;\n\n    if (!mbsinit (ps))\n      {\n        /* Parse the rest of the multibyte character byte for byte.  */\n        size_t count = 0;\n        for (; n > 0; s++, n--)\n          {\n            ret = mbrtowc (&wc, s, 1, ps);\n\n            if (ret == (size_t)(-1))\n              return (size_t)(-1);\n            count++;\n            if (ret != (size_t)(-2))\n              {\n                /* The multibyte character has been completed.  */\n                *pwc = wc;\n                return (wc == 0 ? 0 : count);\n              }\n          }\n        return (size_t)(-2);\n      }\n  }\n# endif\n\n  ret = mbrtowc (pwc, s, n, ps);\n\n# if MBRTOWC_NUL_RETVAL_BUG\n  if (ret < (size_t) -2 && !*pwc)\n    return 0;\n# endif\n\n# if C_LOCALE_MAYBE_EILSEQ\n  if ((size_t) -2 <= ret && n != 0 && ! hard_locale (LC_CTYPE))\n    {\n      unsigned char uc = *s;\n      *pwc = uc;\n      return 1;\n    }\n# endif\n\n  return ret;\n}",
      "lines": 73,
      "depth": 15,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/mbscasecmp.c": {
    "mbscasecmp": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "int\nmbscasecmp (const char *s1, const char *s2)\n{\n  if (s1 == s2)\n    return 0;\n\n  /* Be careful not to look at the entire extent of s1 or s2 until needed.\n     This is useful because when two strings differ, the difference is\n     most often already in the very few first characters.  */\n  if (MB_CUR_MAX > 1)\n    {\n      mbui_iterator_t iter1;\n      mbui_iterator_t iter2;\n\n      mbui_init (iter1, s1);\n      mbui_init (iter2, s2);\n\n      while (mbui_avail (iter1) && mbui_avail (iter2))\n        {\n          int cmp = mb_casecmp (mbui_cur (iter1), mbui_cur (iter2));\n\n          if (cmp != 0)\n            return cmp;\n\n          mbui_advance (iter1);\n          mbui_advance (iter2);\n        }\n      if (mbui_avail (iter1))\n        /* s2 terminated before s1.  */\n        return 1;\n      if (mbui_avail (iter2))\n        /* s1 terminated before s2.  */\n        return -1;\n      return 0;\n    }\n  else\n    {\n      const unsigned char *p1 = (const unsigned char *) s1;\n      const unsigned char *p2 = (const unsigned char *) s2;\n      unsigned char c1, c2;\n\n      do\n        {\n          c1 = TOLOWER (*p1);\n          c2 = TOLOWER (*p2);\n\n          if (c1 == '\\0')\n            break;\n\n          ++p1;\n          ++p2;\n        }\n      while (c1 == c2);\n\n      if (UCHAR_MAX <= INT_MAX)\n        return c1 - c2;\n      else\n        /* On machines where 'char' and 'int' are types of the same size, the\n           difference of two 'unsigned char' values - including the sign bit -\n           doesn't fit in an 'int'.  */\n        return (c1 > c2 ? 1 : c1 < c2 ? -1 : 0);\n    }\n}",
      "lines": 63,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/mbsinit.c": {
    "mbsinit": [
      {
        "start_point": [
          43,
          0
        ],
        "end_point": [
          49,
          1
        ],
        "content": "int\nmbsinit (const mbstate_t *ps)\n{\n  const char *pstate = (const char *)ps;\n\n  return pstate == NULL || pstate[0] == 0;\n}",
        "lines": 7,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          53,
          0
        ],
        "end_point": [
          70,
          1
        ],
        "content": "int\nmbsinit (const mbstate_t *ps)\n{\n# if (defined _WIN32 || defined __WIN32__) && !defined __CYGWIN__\n  /* Native Windows.  */\n#  ifdef __MINGW32__\n  /* On mingw, 'mbstate_t' is defined as 'int'.  */\n  return ps == NULL || *ps == 0;\n#  else\n  /* MSVC defines 'mbstate_t' as an 8-byte struct; the first 4-bytes matter.  */\n  return ps == NULL || *(const unsigned int *)ps == 0;\n#  endif\n# else\n  /* Minix, HP-UX 11.00, Solaris 2.6, Interix, ...  */\n  /* Maybe this definition works, maybe not...  */\n  return ps == NULL || *(const char *)ps == 0;\n# endif\n}",
        "lines": 18,
        "depth": 13,
        "decorators": [
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/mbslen.c": {
    "mbslen": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "size_t\nmbslen (const char *string)\n{\n  if (MB_CUR_MAX > 1)\n    {\n      size_t count;\n      mbui_iterator_t iter;\n\n      count = 0;\n      for (mbui_init (iter, string); mbui_avail (iter); mbui_advance (iter))\n        count++;\n\n      return count;\n    }\n  else\n    return strlen (string);\n}",
      "lines": 17,
      "depth": 8,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/mbsrtowcs-impl.h": {
    "mbsrtowcs": {
      "start_point": [
        17,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "content": "size_t\nmbsrtowcs (wchar_t *dest, const char **srcp, size_t len, mbstate_t *ps)\n{\n  if (ps == NULL)\n    ps = &_gl_mbsrtowcs_state;\n  {\n    const char *src = *srcp;\n\n    if (dest != NULL)\n      {\n        wchar_t *destptr = dest;\n\n        for (; len > 0; destptr++, len--)\n          {\n            size_t src_avail;\n            size_t ret;\n\n            /* An optimized variant of\n               src_avail = strnlen1 (src, MB_LEN_MAX);  */\n            if (src[0] == '\\0')\n              src_avail = 1;\n            else if (src[1] == '\\0')\n              src_avail = 2;\n            else if (src[2] == '\\0')\n              src_avail = 3;\n            else if (MB_LEN_MAX <= 4 || src[3] == '\\0')\n              src_avail = 4;\n            else\n              src_avail = 4 + strnlen1 (src + 4, MB_LEN_MAX - 4);\n\n            /* Parse the next multibyte character.  */\n            ret = mbrtowc (destptr, src, src_avail, ps);\n\n            if (ret == (size_t)(-2))\n              /* Encountered a multibyte character that extends past a '\\0' byte\n                 or that is longer than MB_LEN_MAX bytes.  Cannot happen.  */\n              abort ();\n\n            if (ret == (size_t)(-1))\n              goto bad_input;\n            if (ret == 0)\n              {\n                src = NULL;\n                /* Here mbsinit (ps).  */\n                break;\n              }\n            src += ret;\n          }\n\n        *srcp = src;\n        return destptr - dest;\n      }\n    else\n      {\n        /* Ignore dest and len, don't store *srcp at the end, and\n           don't clobber *ps.  */\n        mbstate_t state = *ps;\n        size_t totalcount = 0;\n\n        for (;; totalcount++)\n          {\n            size_t src_avail;\n            size_t ret;\n\n            /* An optimized variant of\n               src_avail = strnlen1 (src, MB_LEN_MAX);  */\n            if (src[0] == '\\0')\n              src_avail = 1;\n            else if (src[1] == '\\0')\n              src_avail = 2;\n            else if (src[2] == '\\0')\n              src_avail = 3;\n            else if (MB_LEN_MAX <= 4 || src[3] == '\\0')\n              src_avail = 4;\n            else\n              src_avail = 4 + strnlen1 (src + 4, MB_LEN_MAX - 4);\n\n            /* Parse the next multibyte character.  */\n            ret = mbrtowc (NULL, src, src_avail, &state);\n\n            if (ret == (size_t)(-2))\n              /* Encountered a multibyte character that extends past a '\\0' byte\n                 or that is longer than MB_LEN_MAX bytes.  Cannot happen.  */\n              abort ();\n\n            if (ret == (size_t)(-1))\n              goto bad_input2;\n            if (ret == 0)\n              {\n                /* Here mbsinit (&state).  */\n                break;\n              }\n            src += ret;\n          }\n\n        return totalcount;\n      }\n\n   bad_input:\n    *srcp = src;\n   bad_input2:\n    errno = EILSEQ;\n    return (size_t)(-1);\n  }\n}",
      "lines": 105,
      "depth": 18,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/mbsrtowcs-state.c": {},
  "grep/grep-3.1/lib/mbsrtowcs.c": {},
  "grep/grep-3.1/lib/mbsstr.c": {
    "knuth_morris_pratt_multibyte": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "static bool\nknuth_morris_pratt_multibyte (const char *haystack, const char *needle,\n                              const char **resultp)\n{\n  size_t m = mbslen (needle);\n  mbchar_t *needle_mbchars;\n  size_t *table;\n\n  /* Allocate room for needle_mbchars and the table.  */\n  void *memory = nmalloca (m, sizeof (mbchar_t) + sizeof (size_t));\n  void *table_memory;\n  if (memory == NULL)\n    return false;\n  needle_mbchars = memory;\n  table_memory = needle_mbchars + m;\n  table = table_memory;\n\n  /* Fill needle_mbchars.  */\n  {\n    mbui_iterator_t iter;\n    size_t j;\n\n    j = 0;\n    for (mbui_init (iter, needle); mbui_avail (iter); mbui_advance (iter), j++)\n      mb_copy (&needle_mbchars[j], &mbui_cur (iter));\n  }\n\n  /* Fill the table.\n     For 0 < i < m:\n       0 < table[i] <= i is defined such that\n       forall 0 < x < table[i]: needle[x..i-1] != needle[0..i-1-x],\n       and table[i] is as large as possible with this property.\n     This implies:\n     1) For 0 < i < m:\n          If table[i] < i,\n          needle[table[i]..i-1] = needle[0..i-1-table[i]].\n     2) For 0 < i < m:\n          rhaystack[0..i-1] == needle[0..i-1]\n          and exists h, i <= h < m: rhaystack[h] != needle[h]\n          implies\n          forall 0 <= x < table[i]: rhaystack[x..x+m-1] != needle[0..m-1].\n     table[0] remains uninitialized.  */\n  {\n    size_t i, j;\n\n    /* i = 1: Nothing to verify for x = 0.  */\n    table[1] = 1;\n    j = 0;\n\n    for (i = 2; i < m; i++)\n      {\n        /* Here: j = i-1 - table[i-1].\n           The inequality needle[x..i-1] != needle[0..i-1-x] is known to hold\n           for x < table[i-1], by induction.\n           Furthermore, if j>0: needle[i-1-j..i-2] = needle[0..j-1].  */\n        mbchar_t *b = &needle_mbchars[i - 1];\n\n        for (;;)\n          {\n            /* Invariants: The inequality needle[x..i-1] != needle[0..i-1-x]\n               is known to hold for x < i-1-j.\n               Furthermore, if j>0: needle[i-1-j..i-2] = needle[0..j-1].  */\n            if (mb_equal (*b, needle_mbchars[j]))\n              {\n                /* Set table[i] := i-1-j.  */\n                table[i] = i - ++j;\n                break;\n              }\n            /* The inequality needle[x..i-1] != needle[0..i-1-x] also holds\n               for x = i-1-j, because\n                 needle[i-1] != needle[j] = needle[i-1-x].  */\n            if (j == 0)\n              {\n                /* The inequality holds for all possible x.  */\n                table[i] = i;\n                break;\n              }\n            /* The inequality needle[x..i-1] != needle[0..i-1-x] also holds\n               for i-1-j < x < i-1-j+table[j], because for these x:\n                 needle[x..i-2]\n                 = needle[x-(i-1-j)..j-1]\n                 != needle[0..j-1-(x-(i-1-j))]  (by definition of table[j])\n                    = needle[0..i-2-x],\n               hence needle[x..i-1] != needle[0..i-1-x].\n               Furthermore\n                 needle[i-1-j+table[j]..i-2]\n                 = needle[table[j]..j-1]\n                 = needle[0..j-1-table[j]]  (by definition of table[j]).  */\n            j = j - table[j];\n          }\n        /* Here: j = i - table[i].  */\n      }\n  }\n\n  /* Search, using the table to accelerate the processing.  */\n  {\n    size_t j;\n    mbui_iterator_t rhaystack;\n    mbui_iterator_t phaystack;\n\n    *resultp = NULL;\n    j = 0;\n    mbui_init (rhaystack, haystack);\n    mbui_init (phaystack, haystack);\n    /* Invariant: phaystack = rhaystack + j.  */\n    while (mbui_avail (phaystack))\n      if (mb_equal (needle_mbchars[j], mbui_cur (phaystack)))\n        {\n          j++;\n          mbui_advance (phaystack);\n          if (j == m)\n            {\n              /* The entire needle has been found.  */\n              *resultp = mbui_cur_ptr (rhaystack);\n              break;\n            }\n        }\n      else if (j > 0)\n        {\n          /* Found a match of needle[0..j-1], mismatch at needle[j].  */\n          size_t count = table[j];\n          j -= count;\n          for (; count > 0; count--)\n            {\n              if (!mbui_avail (rhaystack))\n                abort ();\n              mbui_advance (rhaystack);\n            }\n        }\n      else\n        {\n          /* Found a mismatch at needle[0] already.  */\n          if (!mbui_avail (rhaystack))\n            abort ();\n          mbui_advance (rhaystack);\n          mbui_advance (phaystack);\n        }\n  }\n\n  freea (memory);\n  return true;\n}",
      "lines": 142,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "mbsstr": {
      "start_point": [
        183,
        0
      ],
      "end_point": [
        383,
        1
      ],
      "content": "char *\nmbsstr (const char *haystack, const char *needle)\n{\n  /* Be careful not to look at the entire extent of haystack or needle\n     until needed.  This is useful because of these two cases:\n       - haystack may be very long, and a match of needle found early,\n       - needle may be very long, and not even a short initial segment of\n         needle may be found in haystack.  */\n  if (MB_CUR_MAX > 1)\n    {\n      mbui_iterator_t iter_needle;\n\n      mbui_init (iter_needle, needle);\n      if (mbui_avail (iter_needle))\n        {\n          /* Minimizing the worst-case complexity:\n             Let n = mbslen(haystack), m = mbslen(needle).\n             The na\u00c3\u00afve algorithm is O(n*m) worst-case.\n             The Knuth-Morris-Pratt algorithm is O(n) worst-case but it needs a\n             memory allocation.\n             To achieve linear complexity and yet amortize the cost of the\n             memory allocation, we activate the Knuth-Morris-Pratt algorithm\n             only once the na\u00c3\u00afve algorithm has already run for some time; more\n             precisely, when\n               - the outer loop count is >= 10,\n               - the average number of comparisons per outer loop is >= 5,\n               - the total number of comparisons is >= m.\n             But we try it only once.  If the memory allocation attempt failed,\n             we don't retry it.  */\n          bool try_kmp = true;\n          size_t outer_loop_count = 0;\n          size_t comparison_count = 0;\n          size_t last_ccount = 0;                  /* last comparison count */\n          mbui_iterator_t iter_needle_last_ccount; /* = needle + last_ccount */\n\n          mbui_iterator_t iter_haystack;\n\n          mbui_init (iter_needle_last_ccount, needle);\n          mbui_init (iter_haystack, haystack);\n          for (;; mbui_advance (iter_haystack))\n            {\n              if (!mbui_avail (iter_haystack))\n                /* No match.  */\n                return NULL;\n\n              /* See whether it's advisable to use an asymptotically faster\n                 algorithm.  */\n              if (try_kmp\n                  && outer_loop_count >= 10\n                  && comparison_count >= 5 * outer_loop_count)\n                {\n                  /* See if needle + comparison_count now reaches the end of\n                     needle.  */\n                  size_t count = comparison_count - last_ccount;\n                  for (;\n                       count > 0 && mbui_avail (iter_needle_last_ccount);\n                       count--)\n                    mbui_advance (iter_needle_last_ccount);\n                  last_ccount = comparison_count;\n                  if (!mbui_avail (iter_needle_last_ccount))\n                    {\n                      /* Try the Knuth-Morris-Pratt algorithm.  */\n                      const char *result;\n                      bool success =\n                        knuth_morris_pratt_multibyte (haystack, needle,\n                                                      &result);\n                      if (success)\n                        return (char *) result;\n                      try_kmp = false;\n                    }\n                }\n\n              outer_loop_count++;\n              comparison_count++;\n              if (mb_equal (mbui_cur (iter_haystack), mbui_cur (iter_needle)))\n                /* The first character matches.  */\n                {\n                  mbui_iterator_t rhaystack;\n                  mbui_iterator_t rneedle;\n\n                  memcpy (&rhaystack, &iter_haystack, sizeof (mbui_iterator_t));\n                  mbui_advance (rhaystack);\n\n                  mbui_init (rneedle, needle);\n                  if (!mbui_avail (rneedle))\n                    abort ();\n                  mbui_advance (rneedle);\n\n                  for (;; mbui_advance (rhaystack), mbui_advance (rneedle))\n                    {\n                      if (!mbui_avail (rneedle))\n                        /* Found a match.  */\n                        return (char *) mbui_cur_ptr (iter_haystack);\n                      if (!mbui_avail (rhaystack))\n                        /* No match.  */\n                        return NULL;\n                      comparison_count++;\n                      if (!mb_equal (mbui_cur (rhaystack), mbui_cur (rneedle)))\n                        /* Nothing in this round.  */\n                        break;\n                    }\n                }\n            }\n        }\n      else\n        return (char *) haystack;\n    }\n  else\n    {\n      if (*needle != '\\0')\n        {\n          /* Minimizing the worst-case complexity:\n             Let n = strlen(haystack), m = strlen(needle).\n             The na\u00c3\u00afve algorithm is O(n*m) worst-case.\n             The Knuth-Morris-Pratt algorithm is O(n) worst-case but it needs a\n             memory allocation.\n             To achieve linear complexity and yet amortize the cost of the\n             memory allocation, we activate the Knuth-Morris-Pratt algorithm\n             only once the na\u00c3\u00afve algorithm has already run for some time; more\n             precisely, when\n               - the outer loop count is >= 10,\n               - the average number of comparisons per outer loop is >= 5,\n               - the total number of comparisons is >= m.\n             But we try it only once.  If the memory allocation attempt failed,\n             we don't retry it.  */\n          bool try_kmp = true;\n          size_t outer_loop_count = 0;\n          size_t comparison_count = 0;\n          size_t last_ccount = 0;                  /* last comparison count */\n          const char *needle_last_ccount = needle; /* = needle + last_ccount */\n\n          /* Speed up the following searches of needle by caching its first\n             character.  */\n          char b = *needle++;\n\n          for (;; haystack++)\n            {\n              if (*haystack == '\\0')\n                /* No match.  */\n                return NULL;\n\n              /* See whether it's advisable to use an asymptotically faster\n                 algorithm.  */\n              if (try_kmp\n                  && outer_loop_count >= 10\n                  && comparison_count >= 5 * outer_loop_count)\n                {\n                  /* See if needle + comparison_count now reaches the end of\n                     needle.  */\n                  if (needle_last_ccount != NULL)\n                    {\n                      needle_last_ccount +=\n                        strnlen (needle_last_ccount,\n                                 comparison_count - last_ccount);\n                      if (*needle_last_ccount == '\\0')\n                        needle_last_ccount = NULL;\n                      last_ccount = comparison_count;\n                    }\n                  if (needle_last_ccount == NULL)\n                    {\n                      /* Try the Knuth-Morris-Pratt algorithm.  */\n                      const unsigned char *result;\n                      bool success =\n                        knuth_morris_pratt ((const unsigned char *) haystack,\n                                            (const unsigned char *) (needle - 1),\n                                            strlen (needle - 1),\n                                            &result);\n                      if (success)\n                        return (char *) result;\n                      try_kmp = false;\n                    }\n                }\n\n              outer_loop_count++;\n              comparison_count++;\n              if (*haystack == b)\n                /* The first character matches.  */\n                {\n                  const char *rhaystack = haystack + 1;\n                  const char *rneedle = needle;\n\n                  for (;; rhaystack++, rneedle++)\n                    {\n                      if (*rneedle == '\\0')\n                        /* Found a match.  */\n                        return (char *) haystack;\n                      if (*rhaystack == '\\0')\n                        /* No match.  */\n                        return NULL;\n                      comparison_count++;\n                      if (*rhaystack != *rneedle)\n                        /* Nothing in this round.  */\n                        break;\n                    }\n                }\n            }\n        }\n      else\n        return (char *) haystack;\n    }\n}",
      "lines": 201,
      "depth": 20,
      "decorators": [
        "char",
        "*\nmbsstr (const char *haystack, const char *needle)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/mbtowc-impl.h": {
    "mbtowc": {
      "start_point": [
        21,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "int\nmbtowc (wchar_t *pwc, const char *s, size_t n)\n{\n  if (s == NULL)\n    return 0;\n  else\n    {\n      mbstate_t state;\n      wchar_t wc;\n      size_t result;\n\n      memset (&state, 0, sizeof (mbstate_t));\n      result = mbrtowc (&wc, s, n, &state);\n      if (result == (size_t)-1 || result == (size_t)-2)\n        {\n          errno = EILSEQ;\n          return -1;\n        }\n      if (pwc != NULL)\n        *pwc = wc;\n      return (wc == 0 ? 0 : result);\n    }\n}",
      "lines": 23,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/mbtowc.c": {},
  "grep/grep-3.1/lib/mbuiter.c": {},
  "grep/grep-3.1/lib/mbuiter.h": {
    "mbuiter_multi_next": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        189,
        1
      ],
      "content": "MBUITER_INLINE void\nmbuiter_multi_next (struct mbuiter_multi *iter)\n{\n  if (iter->next_done)\n    return;\n  if (iter->in_shift)\n    goto with_shift;\n  /* Handle most ASCII characters quickly, without calling mbrtowc().  */\n  if (is_basic (*iter->cur.ptr))\n    {\n      /* These characters are part of the basic character set.  ISO C 99\n         guarantees that their wide character code is identical to their\n         char code.  */\n      iter->cur.bytes = 1;\n      iter->cur.wc = *iter->cur.ptr;\n      iter->cur.wc_valid = true;\n    }\n  else\n    {\n      assert (mbsinit (&iter->state));\n      iter->in_shift = true;\n    with_shift:\n      iter->cur.bytes = mbrtowc (&iter->cur.wc, iter->cur.ptr,\n                                 strnlen1 (iter->cur.ptr, MB_CUR_MAX),\n                                 &iter->state);\n      if (iter->cur.bytes == (size_t) -1)\n        {\n          /* An invalid multibyte sequence was encountered.  */\n          iter->cur.bytes = 1;\n          iter->cur.wc_valid = false;\n          /* Whether to set iter->in_shift = false and reset iter->state\n             or not is not very important; the string is bogus anyway.  */\n        }\n      else if (iter->cur.bytes == (size_t) -2)\n        {\n          /* An incomplete multibyte character at the end.  */\n          iter->cur.bytes = strlen (iter->cur.ptr);\n          iter->cur.wc_valid = false;\n          /* Whether to set iter->in_shift = false and reset iter->state\n             or not is not important; the string end is reached anyway.  */\n        }\n      else\n        {\n          if (iter->cur.bytes == 0)\n            {\n              /* A null wide character was encountered.  */\n              iter->cur.bytes = 1;\n              assert (*iter->cur.ptr == '\\0');\n              assert (iter->cur.wc == 0);\n            }\n          iter->cur.wc_valid = true;\n\n          /* When in the initial state, we can go back treating ASCII\n             characters more quickly.  */\n          if (mbsinit (&iter->state))\n            iter->in_shift = false;\n        }\n    }\n  iter->next_done = true;\n}",
      "lines": 60,
      "depth": 17,
      "decorators": [
        "MBUITER_INLINE",
        "void",
        "void"
      ]
    },
    "mbuiter_multi_reloc": {
      "start_point": [
        191,
        0
      ],
      "end_point": [
        195,
        1
      ],
      "content": "MBUITER_INLINE void\nmbuiter_multi_reloc (struct mbuiter_multi *iter, ptrdiff_t ptrdiff)\n{\n  iter->cur.ptr += ptrdiff;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "MBUITER_INLINE",
        "void",
        "void"
      ]
    },
    "mbuiter_multi_copy": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        206,
        1
      ],
      "content": "MBUITER_INLINE void\nmbuiter_multi_copy (struct mbuiter_multi *new_iter, const struct mbuiter_multi *old_iter)\n{\n  if ((new_iter->in_shift = old_iter->in_shift))\n    memcpy (&new_iter->state, &old_iter->state, sizeof (mbstate_t));\n  else\n    memset (&new_iter->state, 0, sizeof (mbstate_t));\n  new_iter->next_done = old_iter->next_done;\n  mb_copy (&new_iter->cur, &old_iter->cur);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "MBUITER_INLINE",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/memchr.c": {
    "__memchr": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "content": "void *\n__memchr (void const *s, int c_in, size_t n)\n{\n  /* On 32-bit hardware, choosing longword to be a 32-bit unsigned\n     long instead of a 64-bit uintmax_t tends to give better\n     performance.  On 64-bit hardware, unsigned long is generally 64\n     bits already.  Change this typedef to experiment with\n     performance.  */\n  typedef unsigned long int longword;\n\n  const unsigned char *char_ptr;\n  const longword *longword_ptr;\n  longword repeated_one;\n  longword repeated_c;\n  unsigned reg_char c;\n\n  c = (unsigned char) c_in;\n\n  /* Handle the first few bytes by reading one byte at a time.\n     Do this until CHAR_PTR is aligned on a longword boundary.  */\n  for (char_ptr = (const unsigned char *) s;\n       n > 0 && (size_t) char_ptr % sizeof (longword) != 0;\n       --n, ++char_ptr)\n    if (*char_ptr == c)\n      return (void *) char_ptr;\n\n  longword_ptr = (const longword *) char_ptr;\n\n  /* All these elucidatory comments refer to 4-byte longwords,\n     but the theory applies equally well to any size longwords.  */\n\n  /* Compute auxiliary longword values:\n     repeated_one is a value which has a 1 in every byte.\n     repeated_c has c in every byte.  */\n  repeated_one = 0x01010101;\n  repeated_c = c | (c << 8);\n  repeated_c |= repeated_c << 16;\n  if (0xffffffffU < (longword) -1)\n    {\n      repeated_one |= repeated_one << 31 << 1;\n      repeated_c |= repeated_c << 31 << 1;\n      if (8 < sizeof (longword))\n        {\n          size_t i;\n\n          for (i = 64; i < sizeof (longword) * 8; i *= 2)\n            {\n              repeated_one |= repeated_one << i;\n              repeated_c |= repeated_c << i;\n            }\n        }\n    }\n\n  /* Instead of the traditional loop which tests each byte, we will test a\n     longword at a time.  The tricky part is testing if *any of the four*\n     bytes in the longword in question are equal to c.  We first use an xor\n     with repeated_c.  This reduces the task to testing whether *any of the\n     four* bytes in longword1 is zero.\n\n     We compute tmp =\n       ((longword1 - repeated_one) & ~longword1) & (repeated_one << 7).\n     That is, we perform the following operations:\n       1. Subtract repeated_one.\n       2. & ~longword1.\n       3. & a mask consisting of 0x80 in every byte.\n     Consider what happens in each byte:\n       - If a byte of longword1 is zero, step 1 and 2 transform it into 0xff,\n         and step 3 transforms it into 0x80.  A carry can also be propagated\n         to more significant bytes.\n       - If a byte of longword1 is nonzero, let its lowest 1 bit be at\n         position k (0 <= k <= 7); so the lowest k bits are 0.  After step 1,\n         the byte ends in a single bit of value 0 and k bits of value 1.\n         After step 2, the result is just k bits of value 1: 2^k - 1.  After\n         step 3, the result is 0.  And no carry is produced.\n     So, if longword1 has only non-zero bytes, tmp is zero.\n     Whereas if longword1 has a zero byte, call j the position of the least\n     significant zero byte.  Then the result has a zero at positions 0, ...,\n     j-1 and a 0x80 at position j.  We cannot predict the result at the more\n     significant bytes (positions j+1..3), but it does not matter since we\n     already have a non-zero bit at position 8*j+7.\n\n     So, the test whether any byte in longword1 is zero is equivalent to\n     testing whether tmp is nonzero.  */\n\n  while (n >= sizeof (longword))\n    {\n      longword longword1 = *longword_ptr ^ repeated_c;\n\n      if ((((longword1 - repeated_one) & ~longword1)\n           & (repeated_one << 7)) != 0)\n        break;\n      longword_ptr++;\n      n -= sizeof (longword);\n    }\n\n  char_ptr = (const unsigned char *) longword_ptr;\n\n  /* At this point, we know that either n < sizeof (longword), or one of the\n     sizeof (longword) bytes starting at char_ptr is == c.  On little-endian\n     machines, we could determine the first such byte without any further\n     memory accesses, just by looking at the tmp result from the last loop\n     iteration.  But this does not work on big-endian machines.  Choose code\n     that works in both cases.  */\n\n  for (; n > 0; --n, ++char_ptr)\n    {\n      if (*char_ptr == c)\n        return (void *) char_ptr;\n    }\n\n  return NULL;\n}",
      "lines": 112,
      "depth": 14,
      "decorators": [
        "void",
        "*\n__memchr (void const *s, int c_in, size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/memchr2.c": {
    "memchr2": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "content": "void *\nmemchr2 (void const *s, int c1_in, int c2_in, size_t n)\n{\n  /* On 32-bit hardware, choosing longword to be a 32-bit unsigned\n     long instead of a 64-bit uintmax_t tends to give better\n     performance.  On 64-bit hardware, unsigned long is generally 64\n     bits already.  Change this typedef to experiment with\n     performance.  */\n  typedef unsigned long int longword;\n\n  const unsigned char *char_ptr;\n  void const *void_ptr;\n  const longword *longword_ptr;\n  longword repeated_one;\n  longword repeated_c1;\n  longword repeated_c2;\n  unsigned char c1;\n  unsigned char c2;\n\n  c1 = (unsigned char) c1_in;\n  c2 = (unsigned char) c2_in;\n\n  if (c1 == c2)\n    return memchr (s, c1, n);\n\n  /* Handle the first few bytes by reading one byte at a time.\n     Do this until VOID_PTR is aligned on a longword boundary.  */\n  for (void_ptr = s;\n       n > 0 && (uintptr_t) void_ptr % sizeof (longword) != 0;\n       --n)\n    {\n      char_ptr = void_ptr;\n      if (*char_ptr == c1 || *char_ptr == c2)\n        return (void *) void_ptr;\n      void_ptr = char_ptr + 1;\n    }\n\n  longword_ptr = void_ptr;\n\n  /* All these elucidatory comments refer to 4-byte longwords,\n     but the theory applies equally well to any size longwords.  */\n\n  /* Compute auxiliary longword values:\n     repeated_one is a value which has a 1 in every byte.\n     repeated_c1 has c1 in every byte.\n     repeated_c2 has c2 in every byte.  */\n  repeated_one = 0x01010101;\n  repeated_c1 = c1 | (c1 << 8);\n  repeated_c2 = c2 | (c2 << 8);\n  repeated_c1 |= repeated_c1 << 16;\n  repeated_c2 |= repeated_c2 << 16;\n  if (0xffffffffU < (longword) -1)\n    {\n      repeated_one |= repeated_one << 31 << 1;\n      repeated_c1 |= repeated_c1 << 31 << 1;\n      repeated_c2 |= repeated_c2 << 31 << 1;\n      if (8 < sizeof (longword))\n        {\n          size_t i;\n\n          for (i = 64; i < sizeof (longword) * 8; i *= 2)\n            {\n              repeated_one |= repeated_one << i;\n              repeated_c1 |= repeated_c1 << i;\n              repeated_c2 |= repeated_c2 << i;\n            }\n        }\n    }\n\n  /* Instead of the traditional loop which tests each byte, we will test a\n     longword at a time.  The tricky part is testing if *any of the four*\n     bytes in the longword in question are equal to c1 or c2.  We first use\n     an xor with repeated_c1 and repeated_c2, respectively.  This reduces\n     the task to testing whether *any of the four* bytes in longword1 or\n     longword2 is zero.\n\n     Let's consider longword1.  We compute tmp1 =\n       ((longword1 - repeated_one) & ~longword1) & (repeated_one << 7).\n     That is, we perform the following operations:\n       1. Subtract repeated_one.\n       2. & ~longword1.\n       3. & a mask consisting of 0x80 in every byte.\n     Consider what happens in each byte:\n       - If a byte of longword1 is zero, step 1 and 2 transform it into 0xff,\n         and step 3 transforms it into 0x80.  A carry can also be propagated\n         to more significant bytes.\n       - If a byte of longword1 is nonzero, let its lowest 1 bit be at\n         position k (0 <= k <= 7); so the lowest k bits are 0.  After step 1,\n         the byte ends in a single bit of value 0 and k bits of value 1.\n         After step 2, the result is just k bits of value 1: 2^k - 1.  After\n         step 3, the result is 0.  And no carry is produced.\n     So, if longword1 has only non-zero bytes, tmp1 is zero.\n     Whereas if longword1 has a zero byte, call j the position of the least\n     significant zero byte.  Then the result has a zero at positions 0, ...,\n     j-1 and a 0x80 at position j.  We cannot predict the result at the more\n     significant bytes (positions j+1..3), but it does not matter since we\n     already have a non-zero bit at position 8*j+7.\n\n     Similarly, we compute tmp2 =\n       ((longword2 - repeated_one) & ~longword2) & (repeated_one << 7).\n\n     The test whether any byte in longword1 or longword2 is zero is equivalent\n     to testing whether tmp1 is nonzero or tmp2 is nonzero.  We can combine\n     this into a single test, whether (tmp1 | tmp2) is nonzero.  */\n\n  while (n >= sizeof (longword))\n    {\n      longword longword1 = *longword_ptr ^ repeated_c1;\n      longword longword2 = *longword_ptr ^ repeated_c2;\n\n      if (((((longword1 - repeated_one) & ~longword1)\n            | ((longword2 - repeated_one) & ~longword2))\n           & (repeated_one << 7)) != 0)\n        break;\n      longword_ptr++;\n      n -= sizeof (longword);\n    }\n\n  char_ptr = (const unsigned char *) longword_ptr;\n\n  /* At this point, we know that either n < sizeof (longword), or one of the\n     sizeof (longword) bytes starting at char_ptr is == c1 or == c2.  On\n     little-endian machines, we could determine the first such byte without\n     any further memory accesses, just by looking at the (tmp1 | tmp2) result\n     from the last loop iteration.  But this does not work on big-endian\n     machines.  Choose code that works in both cases.  */\n\n  for (; n > 0; --n, ++char_ptr)\n    {\n      if (*char_ptr == c1 || *char_ptr == c2)\n        return (void *) char_ptr;\n    }\n\n  return NULL;\n}",
      "lines": 135,
      "depth": 16,
      "decorators": [
        "void",
        "*\nmemchr2 (void const *s, int c1_in, int c2_in, size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/memchr2.h": {},
  "grep/grep-3.1/lib/mempcpy.c": {
    "mempcpy": {
      "start_point": [
        23,
        0
      ],
      "end_point": [
        27,
        1
      ],
      "content": "void *\nmempcpy (void *dest, const void *src, size_t n)\n{\n  return (char *) memcpy (dest, src, n) + n;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void",
        "*\nmempcpy (void *dest, const void *src, size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/memrchr.c": {
    "__memrchr": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        157,
        1
      ],
      "content": "void *\n__memrchr (void const *s, int c_in, size_t n)\n{\n  /* On 32-bit hardware, choosing longword to be a 32-bit unsigned\n     long instead of a 64-bit uintmax_t tends to give better\n     performance.  On 64-bit hardware, unsigned long is generally 64\n     bits already.  Change this typedef to experiment with\n     performance.  */\n  typedef unsigned long int longword;\n\n  const unsigned char *char_ptr;\n  const longword *longword_ptr;\n  longword repeated_one;\n  longword repeated_c;\n  unsigned reg_char c;\n\n  c = (unsigned char) c_in;\n\n  /* Handle the last few bytes by reading one byte at a time.\n     Do this until CHAR_PTR is aligned on a longword boundary.  */\n  for (char_ptr = (const unsigned char *) s + n;\n       n > 0 && (size_t) char_ptr % sizeof (longword) != 0;\n       --n)\n    if (*--char_ptr == c)\n      return (void *) char_ptr;\n\n  longword_ptr = (const longword *) char_ptr;\n\n  /* All these elucidatory comments refer to 4-byte longwords,\n     but the theory applies equally well to any size longwords.  */\n\n  /* Compute auxiliary longword values:\n     repeated_one is a value which has a 1 in every byte.\n     repeated_c has c in every byte.  */\n  repeated_one = 0x01010101;\n  repeated_c = c | (c << 8);\n  repeated_c |= repeated_c << 16;\n  if (0xffffffffU < (longword) -1)\n    {\n      repeated_one |= repeated_one << 31 << 1;\n      repeated_c |= repeated_c << 31 << 1;\n      if (8 < sizeof (longword))\n        {\n          size_t i;\n\n          for (i = 64; i < sizeof (longword) * 8; i *= 2)\n            {\n              repeated_one |= repeated_one << i;\n              repeated_c |= repeated_c << i;\n            }\n        }\n    }\n\n  /* Instead of the traditional loop which tests each byte, we will test a\n     longword at a time.  The tricky part is testing if *any of the four*\n     bytes in the longword in question are equal to c.  We first use an xor\n     with repeated_c.  This reduces the task to testing whether *any of the\n     four* bytes in longword1 is zero.\n\n     We compute tmp =\n       ((longword1 - repeated_one) & ~longword1) & (repeated_one << 7).\n     That is, we perform the following operations:\n       1. Subtract repeated_one.\n       2. & ~longword1.\n       3. & a mask consisting of 0x80 in every byte.\n     Consider what happens in each byte:\n       - If a byte of longword1 is zero, step 1 and 2 transform it into 0xff,\n         and step 3 transforms it into 0x80.  A carry can also be propagated\n         to more significant bytes.\n       - If a byte of longword1 is nonzero, let its lowest 1 bit be at\n         position k (0 <= k <= 7); so the lowest k bits are 0.  After step 1,\n         the byte ends in a single bit of value 0 and k bits of value 1.\n         After step 2, the result is just k bits of value 1: 2^k - 1.  After\n         step 3, the result is 0.  And no carry is produced.\n     So, if longword1 has only non-zero bytes, tmp is zero.\n     Whereas if longword1 has a zero byte, call j the position of the least\n     significant zero byte.  Then the result has a zero at positions 0, ...,\n     j-1 and a 0x80 at position j.  We cannot predict the result at the more\n     significant bytes (positions j+1..3), but it does not matter since we\n     already have a non-zero bit at position 8*j+7.\n\n     So, the test whether any byte in longword1 is zero is equivalent to\n     testing whether tmp is nonzero.  */\n\n  while (n >= sizeof (longword))\n    {\n      longword longword1 = *--longword_ptr ^ repeated_c;\n\n      if ((((longword1 - repeated_one) & ~longword1)\n           & (repeated_one << 7)) != 0)\n        {\n          longword_ptr++;\n          break;\n        }\n      n -= sizeof (longword);\n    }\n\n  char_ptr = (const unsigned char *) longword_ptr;\n\n  /* At this point, we know that either n < sizeof (longword), or one of the\n     sizeof (longword) bytes starting at char_ptr is == c.  On little-endian\n     machines, we could determine the first such byte without any further\n     memory accesses, just by looking at the tmp result from the last loop\n     iteration.  But this does not work on big-endian machines.  Choose code\n     that works in both cases.  */\n\n  while (n-- > 0)\n    {\n      if (*--char_ptr == c)\n        return (void *) char_ptr;\n    }\n\n  return NULL;\n}",
      "lines": 114,
      "depth": 14,
      "decorators": [
        "void",
        "*\n__memrchr (void const *s, int c_in, size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/minmax.h": {},
  "grep/grep-3.1/lib/msvc-inval.c": {
    "gl_msvc_invalid_parameter_handler": [
      {
        "start_point": [
          30,
          0
        ],
        "end_point": [
          37,
          1
        ],
        "content": "static void __cdecl\ngl_msvc_invalid_parameter_handler (const wchar_t *expression,\n                                   const wchar_t *function,\n                                   const wchar_t *file,\n                                   unsigned int line,\n                                   uintptr_t dummy)\n{\n}",
        "lines": 8,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "void",
          "__cdecl",
          "__cdecl"
        ]
      },
      {
        "start_point": [
          47,
          0
        ],
        "end_point": [
          55,
          1
        ],
        "content": "static void __cdecl\ngl_msvc_invalid_parameter_handler (const wchar_t *expression,\n                                   const wchar_t *function,\n                                   const wchar_t *file,\n                                   unsigned int line,\n                                   uintptr_t dummy)\n{\n  RaiseException (STATUS_GNULIB_INVALID_PARAMETER, 0, 0, NULL);\n}",
        "lines": 9,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "void",
          "__cdecl",
          "__cdecl"
        ]
      },
      {
        "start_point": [
          96,
          0
        ],
        "end_point": [
          110,
          1
        ],
        "content": "static void __cdecl\ngl_msvc_invalid_parameter_handler (const wchar_t *expression,\n                                   const wchar_t *function,\n                                   const wchar_t *file,\n                                   unsigned int line,\n                                   uintptr_t dummy)\n{\n  struct gl_msvc_inval_per_thread *current = gl_msvc_inval_current ();\n  if (current->restart_valid)\n    longjmp (current->restart, 1);\n  else\n    /* An invalid parameter notification from outside the gnulib code.\n       Give the caller a chance to intervene.  */\n    RaiseException (STATUS_GNULIB_INVALID_PARAMETER, 0, 0, NULL);\n}",
        "lines": 15,
        "depth": 8,
        "decorators": [
          "static",
          "static",
          "void",
          "__cdecl",
          "__cdecl"
        ]
      }
    ],
    "gl_msvc_inval_current": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "content": "struct gl_msvc_inval_per_thread *\ngl_msvc_inval_current (void)\n{\n  if (!tls_initialized)\n    {\n      tls_index = TlsAlloc ();\n      tls_initialized = 1;\n    }\n  if (tls_index == TLS_OUT_OF_INDEXES)\n    /* TlsAlloc had failed.  */\n    return &not_per_thread;\n  else\n    {\n      struct gl_msvc_inval_per_thread *pointer =\n        (struct gl_msvc_inval_per_thread *) TlsGetValue (tls_index);\n      if (pointer == NULL)\n        {\n          /* First call.  Allocate a new 'struct gl_msvc_inval_per_thread'.  */\n          pointer =\n            (struct gl_msvc_inval_per_thread *)\n            malloc (sizeof (struct gl_msvc_inval_per_thread));\n          if (pointer == NULL)\n            /* Could not allocate memory.  Use the global storage.  */\n            pointer = &not_per_thread;\n          TlsSetValue (tls_index, pointer);\n        }\n      return pointer;\n    }\n}",
      "lines": 29,
      "depth": 15,
      "decorators": [
        "struct gl_msvc_inval_per_thread",
        "struct",
        "gl_msvc_inval_per_thread",
        "*\ngl_msvc_inval_current (void)",
        "*"
      ]
    },
    "gl_msvc_inval_ensure_handler": {
      "start_point": [
        118,
        0
      ],
      "end_point": [
        126,
        1
      ],
      "content": "void\ngl_msvc_inval_ensure_handler (void)\n{\n  if (gl_msvc_inval_initialized == 0)\n    {\n      _set_invalid_parameter_handler (gl_msvc_invalid_parameter_handler);\n      gl_msvc_inval_initialized = 1;\n    }\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/msvc-inval.h": {},
  "grep/grep-3.1/lib/msvc-nothrow.c": {
    "_gl_nothrow_get_osfhandle": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        41,
        5
      ],
      "content": "intptr_t\n_gl_nothrow_get_osfhandle (int fd)\n{\n  intptr_t result;\n\n  TRY_MSVC_INVAL\n    {\n      result = _get_osfhandle (fd);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "intptr_t"
      ]
    }
  },
  "grep/grep-3.1/lib/msvc-nothrow.h": {},
  "grep/grep-3.1/lib/nl_langinfo.c": {
    "ctype_codeset": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "content": "static char *\nctype_codeset (void)\n{\n  static char buf[2 + 10 + 1];\n  char const *locale = setlocale (LC_CTYPE, NULL);\n  char *codeset = buf;\n  size_t codesetlen;\n  codeset[0] = '\\0';\n\n  if (locale && locale[0])\n    {\n      /* If the locale name contains an encoding after the dot, return it.  */\n      char *dot = strchr (locale, '.');\n\n      if (dot)\n        {\n          /* Look for the possible @... trailer and remove it, if any.  */\n          char *codeset_start = dot + 1;\n          char const *modifier = strchr (codeset_start, '@');\n\n          if (! modifier)\n            codeset = codeset_start;\n          else\n            {\n              codesetlen = modifier - codeset_start;\n              if (codesetlen < sizeof buf)\n                {\n                  codeset = memcpy (buf, codeset_start, codesetlen);\n                  codeset[codesetlen] = '\\0';\n                }\n            }\n        }\n    }\n\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  /* If setlocale is successful, it returns the number of the\n     codepage, as a string.  Otherwise, fall back on Windows API\n     GetACP, which returns the locale's codepage as a number (although\n     this doesn't change according to what the 'setlocale' call specified).\n     Either way, prepend \"CP\" to make it a valid codeset name.  */\n  codesetlen = strlen (codeset);\n  if (0 < codesetlen && codesetlen < sizeof buf - 2)\n    memmove (buf + 2, codeset, codesetlen + 1);\n  else\n    sprintf (buf + 2, \"%u\", GetACP ());\n  codeset = memcpy (buf, \"CP\", 2);\n#endif\n  return codeset;\n}",
      "lines": 49,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nctype_codeset (void)",
        "*"
      ]
    },
    "rpl_nl_langinfo": {
      "start_point": [
        89,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "content": "char *\nrpl_nl_langinfo (nl_item item)\n{\n  switch (item)\n    {\n# if GNULIB_defined_CODESET\n    case CODESET:\n      return ctype_codeset ();\n# endif\n# if GNULIB_defined_T_FMT_AMPM\n    case T_FMT_AMPM:\n      return (char *) \"%I:%M:%S %p\";\n# endif\n# if GNULIB_defined_ERA\n    case ERA:\n      /* The format is not standardized.  In glibc it is a sequence of strings\n         of the form \"direction:offset:start_date:end_date:era_name:era_format\"\n         with an empty string at the end.  */\n      return (char *) \"\";\n    case ERA_D_FMT:\n      /* The %Ex conversion in strftime behaves like %x if the locale does not\n         have an alternative time format.  */\n      item = D_FMT;\n      break;\n    case ERA_D_T_FMT:\n      /* The %Ec conversion in strftime behaves like %c if the locale does not\n         have an alternative time format.  */\n      item = D_T_FMT;\n      break;\n    case ERA_T_FMT:\n      /* The %EX conversion in strftime behaves like %X if the locale does not\n         have an alternative time format.  */\n      item = T_FMT;\n      break;\n    case ALT_DIGITS:\n      /* The format is not standardized.  In glibc it is a sequence of 10\n         strings, appended in memory.  */\n      return (char *) \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n# endif\n# if GNULIB_defined_YESEXPR || !FUNC_NL_LANGINFO_YESEXPR_WORKS\n    case YESEXPR:\n      return (char *) \"^[yY]\";\n    case NOEXPR:\n      return (char *) \"^[nN]\";\n# endif\n    default:\n      break;\n    }\n  return nl_langinfo (item);\n}",
      "lines": 50,
      "depth": 11,
      "decorators": [
        "char",
        "*\nrpl_nl_langinfo (nl_item item)",
        "*"
      ]
    },
    "nl_langinfo": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        318,
        1
      ],
      "content": "char *\nnl_langinfo (nl_item item)\n{\n  static char nlbuf[100];\n  struct tm tmm = { 0 };\n\n  switch (item)\n    {\n    /* nl_langinfo items of the LC_CTYPE category */\n    case CODESET:\n      {\n        char *codeset = ctype_codeset ();\n        if (*codeset)\n          return codeset;\n      }\n# ifdef __BEOS__\n      return (char *) \"UTF-8\";\n# else\n      return (char *) \"ISO-8859-1\";\n# endif\n    /* nl_langinfo items of the LC_NUMERIC category */\n    case RADIXCHAR:\n      return localeconv () ->decimal_point;\n    case THOUSEP:\n      return localeconv () ->thousands_sep;\n    case GROUPING:\n      return localeconv () ->grouping;\n    /* nl_langinfo items of the LC_TIME category.\n       TODO: Really use the locale.  */\n    case D_T_FMT:\n    case ERA_D_T_FMT:\n      return (char *) \"%a %b %e %H:%M:%S %Y\";\n    case D_FMT:\n    case ERA_D_FMT:\n      return (char *) \"%m/%d/%y\";\n    case T_FMT:\n    case ERA_T_FMT:\n      return (char *) \"%H:%M:%S\";\n    case T_FMT_AMPM:\n      return (char *) \"%I:%M:%S %p\";\n    case AM_STR:\n      if (!strftime (nlbuf, sizeof nlbuf, \"%p\", &tmm))\n        return (char *) \"AM\";\n      return nlbuf;\n    case PM_STR:\n      tmm.tm_hour = 12;\n      if (!strftime (nlbuf, sizeof nlbuf, \"%p\", &tmm))\n        return (char *) \"PM\";\n      return nlbuf;\n    case DAY_1:\n    case DAY_2:\n    case DAY_3:\n    case DAY_4:\n    case DAY_5:\n    case DAY_6:\n    case DAY_7:\n      {\n        static char const days[][sizeof \"Wednesday\"] = {\n          \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n          \"Friday\", \"Saturday\"\n        };\n        tmm.tm_wday = item - DAY_1;\n        if (!strftime (nlbuf, sizeof nlbuf, \"%A\", &tmm))\n          return (char *) days[item - DAY_1];\n        return nlbuf;\n      }\n    case ABDAY_1:\n    case ABDAY_2:\n    case ABDAY_3:\n    case ABDAY_4:\n    case ABDAY_5:\n    case ABDAY_6:\n    case ABDAY_7:\n      {\n        static char const abdays[][sizeof \"Sun\"] = {\n          \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n        };\n        tmm.tm_wday = item - ABDAY_1;\n        if (!strftime (nlbuf, sizeof nlbuf, \"%a\", &tmm))\n          return (char *) abdays[item - ABDAY_1];\n        return nlbuf;\n      }\n    case MON_1:\n    case MON_2:\n    case MON_3:\n    case MON_4:\n    case MON_5:\n    case MON_6:\n    case MON_7:\n    case MON_8:\n    case MON_9:\n    case MON_10:\n    case MON_11:\n    case MON_12:\n      {\n        static char const months[][sizeof \"September\"] = {\n          \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n          \"September\", \"October\", \"November\", \"December\"\n        };\n        tmm.tm_mon = item - MON_1;\n        if (!strftime (nlbuf, sizeof nlbuf, \"%B\", &tmm))\n          return (char *) months[item - MON_1];\n        return nlbuf;\n      }\n    case ABMON_1:\n    case ABMON_2:\n    case ABMON_3:\n    case ABMON_4:\n    case ABMON_5:\n    case ABMON_6:\n    case ABMON_7:\n    case ABMON_8:\n    case ABMON_9:\n    case ABMON_10:\n    case ABMON_11:\n    case ABMON_12:\n      {\n        static char const abmonths[][sizeof \"Jan\"] = {\n          \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\n          \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n        };\n        tmm.tm_mon = item - ABMON_1;\n        if (!strftime (nlbuf, sizeof nlbuf, \"%b\", &tmm))\n          return (char *) abmonths[item - ABMON_1];\n        return nlbuf;\n      }\n    case ERA:\n      return (char *) \"\";\n    case ALT_DIGITS:\n      return (char *) \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n    /* nl_langinfo items of the LC_MONETARY category.  */\n    case CRNCYSTR:\n      return localeconv () ->currency_symbol;\n    case INT_CURR_SYMBOL:\n      return localeconv () ->int_curr_symbol;\n    case MON_DECIMAL_POINT:\n      return localeconv () ->mon_decimal_point;\n    case MON_THOUSANDS_SEP:\n      return localeconv () ->mon_thousands_sep;\n    case MON_GROUPING:\n      return localeconv () ->mon_grouping;\n    case POSITIVE_SIGN:\n      return localeconv () ->positive_sign;\n    case NEGATIVE_SIGN:\n      return localeconv () ->negative_sign;\n    case FRAC_DIGITS:\n      return & localeconv () ->frac_digits;\n    case INT_FRAC_DIGITS:\n      return & localeconv () ->int_frac_digits;\n    case P_CS_PRECEDES:\n      return & localeconv () ->p_cs_precedes;\n    case N_CS_PRECEDES:\n      return & localeconv () ->n_cs_precedes;\n    case P_SEP_BY_SPACE:\n      return & localeconv () ->p_sep_by_space;\n    case N_SEP_BY_SPACE:\n      return & localeconv () ->n_sep_by_space;\n    case P_SIGN_POSN:\n      return & localeconv () ->p_sign_posn;\n    case N_SIGN_POSN:\n      return & localeconv () ->n_sign_posn;\n    /* nl_langinfo items of the LC_MESSAGES category\n       TODO: Really use the locale. */\n    case YESEXPR:\n      return (char *) \"^[yY]\";\n    case NOEXPR:\n      return (char *) \"^[nN]\";\n    default:\n      return (char *) \"\";\n    }\n}",
      "lines": 171,
      "depth": 13,
      "decorators": [
        "char",
        "*\nnl_langinfo (nl_item item)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/obstack.c": {
    "call_chunkfun": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "content": "static void *\ncall_chunkfun (struct obstack *h, size_t size)\n{\n  if (h->use_extra_arg)\n    return h->chunkfun.extra (h->extra_arg, size);\n  else\n    return h->chunkfun.plain (size);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ncall_chunkfun (struct obstack *h, size_t size)",
        "*"
      ]
    },
    "call_freefun": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "static void\ncall_freefun (struct obstack *h, void *old_chunk)\n{\n  if (h->use_extra_arg)\n    h->freefun.extra (h->extra_arg, old_chunk);\n  else\n    h->freefun.plain (old_chunk);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_obstack_begin_worker": {
      "start_point": [
        107,
        0
      ],
      "end_point": [
        146,
        1
      ],
      "content": "static int\n_obstack_begin_worker (struct obstack *h,\n                       _OBSTACK_SIZE_T size, _OBSTACK_SIZE_T alignment)\n{\n  struct _obstack_chunk *chunk; /* points to new chunk */\n\n  if (alignment == 0)\n    alignment = DEFAULT_ALIGNMENT;\n  if (size == 0)\n    /* Default size is what GNU malloc can fit in a 4096-byte block.  */\n    {\n      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.\n         Use the values for range checking, because if range checking is off,\n         the extra bytes won't be missed terribly, but if range checking is on\n         and we used a larger request, a whole extra 4096 bytes would be\n         allocated.\n\n         These number are irrelevant to the new GNU malloc.  I suspect it is\n         less sensitive to the size of the request.  */\n      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))\n                    + 4 + DEFAULT_ROUNDING - 1)\n                   & ~(DEFAULT_ROUNDING - 1));\n      size = 4096 - extra;\n    }\n\n  h->chunk_size = size;\n  h->alignment_mask = alignment - 1;\n\n  chunk = h->chunk = call_chunkfun (h, h->chunk_size);\n  if (!chunk)\n    (*obstack_alloc_failed_handler) ();\n  h->next_free = h->object_base = __PTR_ALIGN ((char *) chunk, chunk->contents,\n                                               alignment - 1);\n  h->chunk_limit = chunk->limit = (char *) chunk + h->chunk_size;\n  chunk->prev = 0;\n  /* The initial chunk now contains no empty object.  */\n  h->maybe_empty_object = 0;\n  h->alloc_failed = 0;\n  return 1;\n}",
      "lines": 40,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_obstack_begin": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        158,
        1
      ],
      "content": "int\n_obstack_begin (struct obstack *h,\n                _OBSTACK_SIZE_T size, _OBSTACK_SIZE_T alignment,\n                void *(*chunkfun) (size_t),\n                void (*freefun) (void *))\n{\n  h->chunkfun.plain = chunkfun;\n  h->freefun.plain = freefun;\n  h->use_extra_arg = 0;\n  return _obstack_begin_worker (h, size, alignment);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "_obstack_begin_1": {
      "start_point": [
        160,
        0
      ],
      "end_point": [
        172,
        1
      ],
      "content": "int\n_obstack_begin_1 (struct obstack *h,\n                  _OBSTACK_SIZE_T size, _OBSTACK_SIZE_T alignment,\n                  void *(*chunkfun) (void *, size_t),\n                  void (*freefun) (void *, void *),\n                  void *arg)\n{\n  h->chunkfun.extra = chunkfun;\n  h->freefun.extra = freefun;\n  h->extra_arg = arg;\n  h->use_extra_arg = 1;\n  return _obstack_begin_worker (h, size, alignment);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "_obstack_newchunk": {
      "start_point": [
        180,
        0
      ],
      "end_point": [
        229,
        1
      ],
      "content": "void\n_obstack_newchunk (struct obstack *h, _OBSTACK_SIZE_T length)\n{\n  struct _obstack_chunk *old_chunk = h->chunk;\n  struct _obstack_chunk *new_chunk = 0;\n  size_t obj_size = h->next_free - h->object_base;\n  char *object_base;\n\n  /* Compute size for new chunk.  */\n  size_t sum1 = obj_size + length;\n  size_t sum2 = sum1 + h->alignment_mask;\n  size_t new_size = sum2 + (obj_size >> 3) + 100;\n  if (new_size < sum2)\n    new_size = sum2;\n  if (new_size < h->chunk_size)\n    new_size = h->chunk_size;\n\n  /* Allocate and initialize the new chunk.  */\n  if (obj_size <= sum1 && sum1 <= sum2)\n    new_chunk = call_chunkfun (h, new_size);\n  if (!new_chunk)\n    (*obstack_alloc_failed_handler)();\n  h->chunk = new_chunk;\n  new_chunk->prev = old_chunk;\n  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;\n\n  /* Compute an aligned object_base in the new chunk */\n  object_base =\n    __PTR_ALIGN ((char *) new_chunk, new_chunk->contents, h->alignment_mask);\n\n  /* Move the existing object to the new chunk.  */\n  memcpy (object_base, h->object_base, obj_size);\n\n  /* If the object just copied was the only data in OLD_CHUNK,\n     free that chunk and remove it from the chain.\n     But not if that chunk might contain an empty object.  */\n  if (!h->maybe_empty_object\n      && (h->object_base\n          == __PTR_ALIGN ((char *) old_chunk, old_chunk->contents,\n                          h->alignment_mask)))\n    {\n      new_chunk->prev = old_chunk->prev;\n      call_freefun (h, old_chunk);\n    }\n\n  h->object_base = object_base;\n  h->next_free = h->object_base + obj_size;\n  /* The new chunk certainly contains no empty object yet.  */\n  h->maybe_empty_object = 0;\n}",
      "lines": 50,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_obstack_allocated_p": {
      "start_point": [
        239,
        0
      ],
      "end_point": [
        255,
        1
      ],
      "content": "int\n_obstack_allocated_p (struct obstack *h, void *obj)\n{\n  struct _obstack_chunk *lp;    /* below addr of any objects in this chunk */\n  struct _obstack_chunk *plp;   /* point to previous chunk if any */\n\n  lp = (h)->chunk;\n  /* We use >= rather than > since the object cannot be exactly at\n     the beginning of the chunk but might be an empty object exactly\n     at the end of an adjacent chunk.  */\n  while (lp != 0 && ((void *) lp >= obj || (void *) (lp)->limit < obj))\n    {\n      plp = lp->prev;\n      lp = plp;\n    }\n  return lp != 0;\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "int"
      ]
    },
    "_obstack_free": {
      "start_point": [
        260,
        0
      ],
      "end_point": [
        288,
        1
      ],
      "content": "void\n_obstack_free (struct obstack *h, void *obj)\n{\n  struct _obstack_chunk *lp;    /* below addr of any objects in this chunk */\n  struct _obstack_chunk *plp;   /* point to previous chunk if any */\n\n  lp = h->chunk;\n  /* We use >= because there cannot be an object at the beginning of a chunk.\n     But there can be an empty object at that address\n     at the end of another chunk.  */\n  while (lp != 0 && ((void *) lp >= obj || (void *) (lp)->limit < obj))\n    {\n      plp = lp->prev;\n      call_freefun (h, lp);\n      lp = plp;\n      /* If we switch chunks, we can't tell whether the new current\n         chunk contains an empty object, so assume that it may.  */\n      h->maybe_empty_object = 1;\n    }\n  if (lp)\n    {\n      h->object_base = h->next_free = (char *) (obj);\n      h->chunk_limit = lp->limit;\n      h->chunk = lp;\n    }\n  else if (obj != 0)\n    /* obj is not in any of the chunks! */\n    abort ();\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_obstack_memory_used": {
      "start_point": [
        290,
        0
      ],
      "end_point": [
        301,
        1
      ],
      "content": "_OBSTACK_SIZE_T\n_obstack_memory_used (struct obstack *h)\n{\n  struct _obstack_chunk *lp;\n  _OBSTACK_SIZE_T nbytes = 0;\n\n  for (lp = h->chunk; lp != 0; lp = lp->prev)\n    {\n      nbytes += lp->limit - (char *) lp;\n    }\n  return nbytes;\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "_OBSTACK_SIZE_T"
      ]
    },
    "print_and_abort": {
      "start_point": [
        328,
        0
      ],
      "end_point": [
        342,
        1
      ],
      "content": "static _Noreturn void\nprint_and_abort (void)\n{\n  /* Don't change any of these strings.  Yes, it would be possible to add\n     the newline to the string and use fputs or so.  But this must not\n     happen because the \"memory exhausted\" message appears in other places\n     like this and the translation should be reused instead of creating\n     a very similar string which requires a separate translation.  */\n#  ifdef _LIBC\n  (void) __fxprintf (NULL, \"%s\\n\", _(\"memory exhausted\"));\n#  else\n  fprintf (stderr, \"%s\\n\", _(\"memory exhausted\"));\n#  endif\n  exit (obstack_exit_failure);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "_Noreturn",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/obstack.h": {},
  "grep/grep-3.1/lib/open-safer.c": {
    "open_safer": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        45,
        1
      ],
      "content": "int\nopen_safer (char const *file, int flags, ...)\n{\n  mode_t mode = 0;\n\n  if (flags & O_CREAT)\n    {\n      va_list ap;\n      va_start (ap, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (ap, PROMOTED_MODE_T);\n\n      va_end (ap);\n    }\n\n  return fd_safer (open (file, flags, mode));\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/open.c": {
    "orig_open": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "static int\norig_open (const char *filename, int flags, mode_t mode)\n{\n  return open (filename, flags, mode);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "open": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "content": "int\nopen (const char *filename, int flags, ...)\n{\n  mode_t mode;\n  int fd;\n\n  mode = 0;\n  if (flags & O_CREAT)\n    {\n      va_list arg;\n      va_start (arg, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (arg, PROMOTED_MODE_T);\n\n      va_end (arg);\n    }\n\n#if GNULIB_defined_O_NONBLOCK\n  /* The only known platform that lacks O_NONBLOCK is mingw, but it\n     also lacks named pipes and Unix sockets, which are the only two\n     file types that require non-blocking handling in open().\n     Therefore, it is safe to ignore O_NONBLOCK here.  It is handy\n     that mingw also lacks openat(), so that is also covered here.  */\n  flags &= ~O_NONBLOCK;\n#endif\n\n#if (defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__\n  if (strcmp (filename, \"/dev/null\") == 0)\n    filename = \"NUL\";\n#endif\n\n#if OPEN_TRAILING_SLASH_BUG\n  /* If the filename ends in a slash and one of O_CREAT, O_WRONLY, O_RDWR\n     is specified, then fail.\n     Rationale: POSIX <http://www.opengroup.org/susv3/basedefs/xbd_chap04.html>\n     says that\n       \"A pathname that contains at least one non-slash character and that\n        ends with one or more trailing slashes shall be resolved as if a\n        single dot character ( '.' ) were appended to the pathname.\"\n     and\n       \"The special filename dot shall refer to the directory specified by\n        its predecessor.\"\n     If the named file already exists as a directory, then\n       - if O_CREAT is specified, open() must fail because of the semantics\n         of O_CREAT,\n       - if O_WRONLY or O_RDWR is specified, open() must fail because POSIX\n         <http://www.opengroup.org/susv3/functions/open.html> says that it\n         fails with errno = EISDIR in this case.\n     If the named file does not exist or does not name a directory, then\n       - if O_CREAT is specified, open() must fail since open() cannot create\n         directories,\n       - if O_WRONLY or O_RDWR is specified, open() must fail because the\n         file does not contain a '.' directory.  */\n  if (flags & (O_CREAT | O_WRONLY | O_RDWR))\n    {\n      size_t len = strlen (filename);\n      if (len > 0 && filename[len - 1] == '/')\n        {\n          errno = EISDIR;\n          return -1;\n        }\n    }\n#endif\n\n  fd = orig_open (filename, flags, mode);\n\n#if REPLACE_FCHDIR\n  /* Implementing fchdir and fdopendir requires the ability to open a\n     directory file descriptor.  If open doesn't support that (as on\n     mingw), we use a dummy file that behaves the same as directories\n     on Linux (ie. always reports EOF on attempts to read()), and\n     override fstat() in fchdir.c to hide the fact that we have a\n     dummy.  */\n  if (REPLACE_OPEN_DIRECTORY && fd < 0 && errno == EACCES\n      && ((flags & O_ACCMODE) == O_RDONLY\n          || (O_SEARCH != O_RDONLY && (flags & O_ACCMODE) == O_SEARCH)))\n    {\n      struct stat statbuf;\n      if (stat (filename, &statbuf) == 0 && S_ISDIR (statbuf.st_mode))\n        {\n          /* Maximum recursion depth of 1.  */\n          fd = open (\"/dev/null\", flags, mode);\n          if (0 <= fd)\n            fd = _gl_register_fd (fd, filename);\n        }\n      else\n        errno = EACCES;\n    }\n#endif\n\n#if OPEN_TRAILING_SLASH_BUG\n  /* If the filename ends in a slash and fd does not refer to a directory,\n     then fail.\n     Rationale: POSIX <http://www.opengroup.org/susv3/basedefs/xbd_chap04.html>\n     says that\n       \"A pathname that contains at least one non-slash character and that\n        ends with one or more trailing slashes shall be resolved as if a\n        single dot character ( '.' ) were appended to the pathname.\"\n     and\n       \"The special filename dot shall refer to the directory specified by\n        its predecessor.\"\n     If the named file without the slash is not a directory, open() must fail\n     with ENOTDIR.  */\n  if (fd >= 0)\n    {\n      /* We know len is positive, since open did not fail with ENOENT.  */\n      size_t len = strlen (filename);\n      if (filename[len - 1] == '/')\n        {\n          struct stat statbuf;\n\n          if (fstat (fd, &statbuf) >= 0 && !S_ISDIR (statbuf.st_mode))\n            {\n              close (fd);\n              errno = ENOTDIR;\n              return -1;\n            }\n        }\n    }\n#endif\n\n#if REPLACE_FCHDIR\n  if (!REPLACE_OPEN_DIRECTORY && 0 <= fd)\n    fd = _gl_register_fd (fd, filename);\n#endif\n\n  return fd;\n}",
      "lines": 130,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/openat-die.c": {
    "openat_save_fail": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "_Noreturn void\nopenat_save_fail (int errnum)\n{\n#ifndef GNULIB_LIBPOSIX\n  error (exit_failure, errnum,\n         _(\"unable to record current working directory\"));\n#endif\n  /* _Noreturn cannot be applied to error, since it returns\n     when its first argument is 0.  To help compilers understand that this\n     function does not return, call abort.  Also, the abort is a\n     safety feature if exit_failure is 0 (which shouldn't happen).  */\n  abort ();\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "_Noreturn",
        "void",
        "void"
      ]
    },
    "openat_restore_fail": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "_Noreturn void\nopenat_restore_fail (int errnum)\n{\n#ifndef GNULIB_LIBPOSIX\n  error (exit_failure, errnum,\n         _(\"failed to return to initial working directory\"));\n#endif\n\n  /* As above.  */\n  abort ();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "_Noreturn",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/openat-priv.h": {},
  "grep/grep-3.1/lib/openat-proc.c": {
    "openat_proc_name": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        133,
        1
      ],
      "content": "char *\nopenat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file)\n{\n  char *result = buf;\n  int dirlen;\n\n  /* Make sure the caller gets ENOENT when appropriate.  */\n  if (!*file)\n    {\n      buf[0] = '\\0';\n      return buf;\n    }\n\n#ifndef __KLIBC__\n# define PROC_SELF_FD_FORMAT \"/proc/self/fd/%d/\"\n  {\n    enum {\n      PROC_SELF_FD_DIR_SIZE_BOUND\n        = (sizeof PROC_SELF_FD_FORMAT - (sizeof \"%d\" - 1)\n           + INT_STRLEN_BOUND (int))\n    };\n\n    static int proc_status = 0;\n    if (! proc_status)\n      {\n        /* Set PROC_STATUS to a positive value if /proc/self/fd is\n           reliable, and a negative value otherwise.  Solaris 10\n           /proc/self/fd mishandles \"..\", and any file name might expand\n           to \"..\" after symbolic link expansion, so avoid /proc/self/fd\n           if it mishandles \"..\".  Solaris 10 has openat, but this\n           problem is exhibited on code that built on Solaris 8 and\n           running on Solaris 10.  */\n\n        int proc_self_fd = open (\"/proc/self/fd\",\n                                 O_SEARCH | O_DIRECTORY | O_NOCTTY | O_NONBLOCK);\n        if (proc_self_fd < 0)\n          proc_status = -1;\n        else\n          {\n            /* Detect whether /proc/self/fd/%i/../fd exists, where %i is the\n               number of a file descriptor open on /proc/self/fd.  On Linux,\n               that name resolves to /proc/self/fd, which was opened above.\n               However, on Solaris, it may resolve to /proc/self/fd/fd, which\n               cannot exist, since all names in /proc/self/fd are numeric.  */\n            char dotdot_buf[PROC_SELF_FD_DIR_SIZE_BOUND + sizeof \"../fd\" - 1];\n            sprintf (dotdot_buf, PROC_SELF_FD_FORMAT \"../fd\", proc_self_fd);\n            proc_status = access (dotdot_buf, F_OK) ? -1 : 1;\n            close (proc_self_fd);\n          }\n      }\n\n    if (proc_status < 0)\n      return NULL;\n    else\n      {\n        size_t bufsize = PROC_SELF_FD_DIR_SIZE_BOUND + strlen (file);\n        if (OPENAT_BUFFER_SIZE < bufsize)\n          {\n            result = malloc (bufsize);\n            if (! result)\n              return NULL;\n          }\n\n        dirlen = sprintf (result, PROC_SELF_FD_FORMAT, fd);\n      }\n  }\n#else\n  /* OS/2 kLIBC provides a function to retrieve a path from a fd.  */\n  {\n    char dir[_MAX_PATH];\n    size_t bufsize;\n\n    if (__libc_Back_ioFHToPath (fd, dir, sizeof dir))\n      return NULL;\n\n    dirlen = strlen (dir);\n    bufsize = dirlen + 1 + strlen (file) + 1; /* 1 for '/', 1 for null */\n    if (OPENAT_BUFFER_SIZE < bufsize)\n      {\n        result = malloc (bufsize);\n        if (! result)\n          return NULL;\n      }\n\n    strcpy (result, dir);\n    result[dirlen++] = '/';\n  }\n#endif\n\n  strcpy (result + dirlen, file);\n  return result;\n}",
      "lines": 92,
      "depth": 16,
      "decorators": [
        "char",
        "*\nopenat_proc_name (char buf[OPENAT_BUFFER_SIZE], int fd, char const *file)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/openat-safer.c": {
    "openat_safer": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        45,
        1
      ],
      "content": "int\nopenat_safer (int fd, char const *file, int flags, ...)\n{\n  mode_t mode = 0;\n\n  if (flags & O_CREAT)\n    {\n      va_list ap;\n      va_start (ap, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (ap, PROMOTED_MODE_T);\n\n      va_end (ap);\n    }\n\n  return fd_safer (openat (fd, file, flags, mode));\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/openat.c": {
    "orig_openat": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        34,
        1
      ],
      "content": "static int\norig_openat (int fd, char const *filename, int flags, mode_t mode)\n{\n  return openat (fd, filename, flags, mode);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "rpl_openat": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        139,
        1
      ],
      "content": "int\nrpl_openat (int dfd, char const *filename, int flags, ...)\n{\n  mode_t mode;\n  int fd;\n\n  mode = 0;\n  if (flags & O_CREAT)\n    {\n      va_list arg;\n      va_start (arg, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (arg, PROMOTED_MODE_T);\n\n      va_end (arg);\n    }\n\n# if OPEN_TRAILING_SLASH_BUG\n  /* If the filename ends in a slash and one of O_CREAT, O_WRONLY, O_RDWR\n     is specified, then fail.\n     Rationale: POSIX <http://www.opengroup.org/susv3/basedefs/xbd_chap04.html>\n     says that\n       \"A pathname that contains at least one non-slash character and that\n        ends with one or more trailing slashes shall be resolved as if a\n        single dot character ( '.' ) were appended to the pathname.\"\n     and\n       \"The special filename dot shall refer to the directory specified by\n        its predecessor.\"\n     If the named file already exists as a directory, then\n       - if O_CREAT is specified, open() must fail because of the semantics\n         of O_CREAT,\n       - if O_WRONLY or O_RDWR is specified, open() must fail because POSIX\n         <http://www.opengroup.org/susv3/functions/open.html> says that it\n         fails with errno = EISDIR in this case.\n     If the named file does not exist or does not name a directory, then\n       - if O_CREAT is specified, open() must fail since open() cannot create\n         directories,\n       - if O_WRONLY or O_RDWR is specified, open() must fail because the\n         file does not contain a '.' directory.  */\n  if (flags & (O_CREAT | O_WRONLY | O_RDWR))\n    {\n      size_t len = strlen (filename);\n      if (len > 0 && filename[len - 1] == '/')\n        {\n          errno = EISDIR;\n          return -1;\n        }\n    }\n# endif\n\n  fd = orig_openat (dfd, filename, flags, mode);\n\n# if OPEN_TRAILING_SLASH_BUG\n  /* If the filename ends in a slash and fd does not refer to a directory,\n     then fail.\n     Rationale: POSIX <http://www.opengroup.org/susv3/basedefs/xbd_chap04.html>\n     says that\n       \"A pathname that contains at least one non-slash character and that\n        ends with one or more trailing slashes shall be resolved as if a\n        single dot character ( '.' ) were appended to the pathname.\"\n     and\n       \"The special filename dot shall refer to the directory specified by\n        its predecessor.\"\n     If the named file without the slash is not a directory, open() must fail\n     with ENOTDIR.  */\n  if (fd >= 0)\n    {\n      /* We know len is positive, since open did not fail with ENOENT.  */\n      size_t len = strlen (filename);\n      if (filename[len - 1] == '/')\n        {\n          struct stat statbuf;\n\n          if (fstat (fd, &statbuf) >= 0 && !S_ISDIR (statbuf.st_mode))\n            {\n              close (fd);\n              errno = ENOTDIR;\n              return -1;\n            }\n        }\n    }\n# endif\n\n  return fd;\n}",
      "lines": 87,
      "depth": 15,
      "decorators": [
        "int"
      ]
    },
    "openat": {
      "start_point": [
        155,
        0
      ],
      "end_point": [
        173,
        1
      ],
      "content": "int\nopenat (int fd, char const *file, int flags, ...)\n{\n  mode_t mode = 0;\n\n  if (flags & O_CREAT)\n    {\n      va_list arg;\n      va_start (arg, flags);\n\n      /* We have to use PROMOTED_MODE_T instead of mode_t, otherwise GCC 4\n         creates crashing code when 'mode_t' is smaller than 'int'.  */\n      mode = va_arg (arg, PROMOTED_MODE_T);\n\n      va_end (arg);\n    }\n\n  return openat_permissive (fd, file, flags, mode, NULL);\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "openat_permissive": {
      "start_point": [
        186,
        0
      ],
      "end_point": [
        259,
        1
      ],
      "content": "int\nopenat_permissive (int fd, char const *file, int flags, mode_t mode,\n                   int *cwd_errno)\n{\n  struct saved_cwd saved_cwd;\n  int saved_errno;\n  int err;\n  bool save_ok;\n\n  if (fd == AT_FDCWD || IS_ABSOLUTE_FILE_NAME (file))\n    return open (file, flags, mode);\n\n  {\n    char buf[OPENAT_BUFFER_SIZE];\n    char *proc_file = openat_proc_name (buf, fd, file);\n    if (proc_file)\n      {\n        int open_result = open (proc_file, flags, mode);\n        int open_errno = errno;\n        if (proc_file != buf)\n          free (proc_file);\n        /* If the syscall succeeds, or if it fails with an unexpected\n           errno value, then return right away.  Otherwise, fall through\n           and resort to using save_cwd/restore_cwd.  */\n        if (0 <= open_result || ! EXPECTED_ERRNO (open_errno))\n          {\n            errno = open_errno;\n            return open_result;\n          }\n      }\n  }\n\n  save_ok = (save_cwd (&saved_cwd) == 0);\n  if (! save_ok)\n    {\n      if (! cwd_errno)\n        openat_save_fail (errno);\n      *cwd_errno = errno;\n    }\n  if (0 <= fd && fd == saved_cwd.desc)\n    {\n      /* If saving the working directory collides with the user's\n         requested fd, then the user's fd must have been closed to\n         begin with.  */\n      free_cwd (&saved_cwd);\n      errno = EBADF;\n      return -1;\n    }\n\n  err = fchdir (fd);\n  saved_errno = errno;\n\n  if (! err)\n    {\n      err = open (file, flags, mode);\n      saved_errno = errno;\n      if (save_ok && restore_cwd (&saved_cwd) != 0)\n        {\n          if (! cwd_errno)\n            {\n              /* Don't write a message to just-created fd 2.  */\n              saved_errno = errno;\n              if (err == STDERR_FILENO)\n                close (err);\n              openat_restore_fail (saved_errno);\n            }\n          *cwd_errno = errno;\n        }\n    }\n\n  free_cwd (&saved_cwd);\n  errno = saved_errno;\n  return err;\n}",
      "lines": 74,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "openat_needs_fchdir": {
      "start_point": [
        263,
        0
      ],
      "end_point": [
        283,
        1
      ],
      "content": "bool\nopenat_needs_fchdir (void)\n{\n  bool needs_fchdir = true;\n  int fd = open (\"/\", O_SEARCH);\n\n  if (0 <= fd)\n    {\n      char buf[OPENAT_BUFFER_SIZE];\n      char *proc_file = openat_proc_name (buf, fd, \".\");\n      if (proc_file)\n        {\n          needs_fchdir = false;\n          if (proc_file != buf)\n            free (proc_file);\n        }\n      close (fd);\n    }\n\n  return needs_fchdir;\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "bool"
      ]
    }
  },
  "grep/grep-3.1/lib/openat.h": {
    "chownat": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "content": "FCHOWNAT_INLINE int\nchownat (int fd, char const *file, uid_t owner, gid_t group)\n{\n  return fchownat (fd, file, owner, group, 0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "FCHOWNAT_INLINE",
        "int",
        "int"
      ]
    },
    "lchownat": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "FCHOWNAT_INLINE int\nlchownat (int fd, char const *file, uid_t owner, gid_t group)\n{\n  return fchownat (fd, file, owner, group, AT_SYMLINK_NOFOLLOW);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "FCHOWNAT_INLINE",
        "int",
        "int"
      ]
    },
    "chmodat": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        84,
        1
      ],
      "content": "FCHMODAT_INLINE int\nchmodat (int fd, char const *file, mode_t mode)\n{\n  return fchmodat (fd, file, mode, 0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "FCHMODAT_INLINE",
        "int",
        "int"
      ]
    },
    "lchmodat": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "FCHMODAT_INLINE int\nlchmodat (int fd, char const *file, mode_t mode)\n{\n  return fchmodat (fd, file, mode, AT_SYMLINK_NOFOLLOW);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "FCHMODAT_INLINE",
        "int",
        "int"
      ]
    },
    "statat": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        104,
        1
      ],
      "content": "STATAT_INLINE int\nstatat (int fd, char const *name, struct stat *st)\n{\n  return fstatat (fd, name, st, 0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "STATAT_INLINE",
        "int",
        "int"
      ]
    },
    "lstatat": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        110,
        1
      ],
      "content": "STATAT_INLINE int\nlstatat (int fd, char const *name, struct stat *st)\n{\n  return fstatat (fd, name, st, AT_SYMLINK_NOFOLLOW);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "STATAT_INLINE",
        "int",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/opendir-safer.c": {
    "opendir_safer": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        75,
        1
      ],
      "content": "DIR *\nopendir_safer (char const *name)\n{\n  DIR *dp = opendir (name);\n\n  if (dp)\n    {\n      int fd = dirfd (dp);\n\n      if (0 <= fd && fd <= STDERR_FILENO)\n        {\n          /* If fdopendir is native (as on Linux), then it is safe to\n             assume dirfd(fdopendir(n))==n.  If we are using the\n             gnulib module fdopendir, then this guarantee is not met,\n             but fdopendir recursively calls opendir_safer up to 3\n             times to at least get a safe fd.  If fdopendir is not\n             present but dirfd is accurate (as on cygwin 1.5.x), then\n             we recurse up to 3 times ourselves.  Finally, if dirfd\n             always fails (as on mingw), then we are already safe.  */\n          DIR *newdp;\n          int e;\n#if HAVE_FDOPENDIR || GNULIB_FDOPENDIR\n          int f = dup_safer (fd);\n          if (f < 0)\n            {\n              e = errno;\n              newdp = NULL;\n            }\n          else\n            {\n              newdp = fdopendir (f);\n              e = errno;\n              if (! newdp)\n                close (f);\n            }\n#else /* !FDOPENDIR */\n          newdp = opendir_safer (name);\n          e = errno;\n#endif\n          closedir (dp);\n          errno = e;\n          dp = newdp;\n        }\n    }\n\n  return dp;\n}",
      "lines": 47,
      "depth": 14,
      "decorators": [
        "DIR",
        "*\nopendir_safer (char const *name)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/opendir.c": {
    "opendir": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "content": "DIR *\nopendir (const char *dir_name)\n{\n#if HAVE_OPENDIR\n# undef opendir\n  DIR *dirp;\n\n  dirp = opendir (dir_name);\n  if (dirp == NULL)\n    return NULL;\n\n# ifdef __KLIBC__\n  {\n    int fd = open (dir_name, O_RDONLY);\n    if (fd == -1 || _gl_register_dirp_fd (fd, dirp))\n      {\n        int saved_errno = errno;\n\n        close (fd);\n        closedir (dirp);\n\n        errno = saved_errno;\n\n        return NULL;\n      }\n  }\n# endif\n#else\n\n  char dir_name_mask[MAX_PATH + 1 + 1 + 1];\n  int status;\n  HANDLE current;\n  WIN32_FIND_DATA entry;\n  struct gl_directory *dirp;\n\n  if (dir_name[0] == '\\0')\n    {\n      errno = ENOENT;\n      return NULL;\n    }\n\n  /* Make the dir_name absolute, so that we continue reading the same\n     directory if the current directory changed between this opendir()\n     call and a subsequent rewinddir() call.  */\n  if (!GetFullPathName (dir_name, MAX_PATH, dir_name_mask, NULL))\n    {\n      errno = EINVAL;\n      return NULL;\n    }\n\n  /* Append the mask.\n     \"*\" and \"*.*\" appear to be equivalent.  */\n  {\n    char *p;\n\n    p = dir_name_mask + strlen (dir_name_mask);\n    if (p > dir_name_mask && !ISSLASH (p[-1]))\n      *p++ = '\\\\';\n    *p++ = '*';\n    *p = '\\0';\n  }\n\n  /* Start searching the directory.  */\n  status = -1;\n  current = FindFirstFile (dir_name_mask, &entry);\n  if (current == INVALID_HANDLE_VALUE)\n    {\n      switch (GetLastError ())\n        {\n        case ERROR_FILE_NOT_FOUND:\n          status = -2;\n          break;\n        case ERROR_PATH_NOT_FOUND:\n          errno = ENOENT;\n          return NULL;\n        case ERROR_DIRECTORY:\n          errno = ENOTDIR;\n          return NULL;\n        case ERROR_ACCESS_DENIED:\n          errno = EACCES;\n          return NULL;\n        default:\n          errno = EIO;\n          return NULL;\n        }\n    }\n\n  /* Allocate the result.  */\n  dirp =\n    (struct gl_directory *)\n    malloc (offsetof (struct gl_directory, dir_name_mask[0])\n            + strlen (dir_name_mask) + 1);\n  if (dirp == NULL)\n    {\n      if (current != INVALID_HANDLE_VALUE)\n        FindClose (current);\n      errno = ENOMEM;\n      return NULL;\n    }\n  dirp->status = status;\n  dirp->current = current;\n  if (status == -1)\n    memcpy (&dirp->entry, &entry, sizeof (WIN32_FIND_DATA));\n  strcpy (dirp->dir_name_mask, dir_name_mask);\n\n#endif\n\n#if REPLACE_FCHDIR\n  {\n    int fd = dirfd (dirp);\n    if (0 <= fd && _gl_register_fd (fd, dir_name) != fd)\n      {\n        int saved_errno = errno;\n        closedir (dirp);\n        errno = saved_errno;\n        return NULL;\n      }\n  }\n#endif\n\n  return dirp;\n}",
      "lines": 122,
      "depth": 15,
      "decorators": [
        "DIR",
        "*\nopendir (const char *dir_name)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/pathmax.h": {},
  "grep/grep-3.1/lib/pipe-safer.c": {
    "pipe_safer": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "content": "int\npipe_safer (int fd[2])\n{\n#if HAVE_PIPE\n  if (pipe (fd) == 0)\n    {\n      int i;\n      for (i = 0; i < 2; i++)\n        {\n          fd[i] = fd_safer (fd[i]);\n          if (fd[i] < 0)\n            {\n              int e = errno;\n              close (fd[1 - i]);\n              errno = e;\n              return -1;\n            }\n        }\n\n      return 0;\n    }\n#else\n  errno = ENOSYS;\n#endif\n\n  return -1;\n}",
      "lines": 27,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/propername.c": {
    "mbsstr_trimmed_wordbounded": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        152,
        1
      ],
      "content": "static bool\nmbsstr_trimmed_wordbounded (const char *string, const char *sub)\n{\n  char *tsub = trim (sub);\n  bool found = false;\n\n  for (; *string != '\\0';)\n    {\n      const char *tsub_in_string = mbsstr (string, tsub);\n      if (tsub_in_string == NULL)\n        break;\n      else\n        {\n          if (MB_CUR_MAX > 1)\n            {\n              mbui_iterator_t string_iter;\n              bool word_boundary_before;\n              bool word_boundary_after;\n\n              mbui_init (string_iter, string);\n              word_boundary_before = true;\n              if (mbui_cur_ptr (string_iter) < tsub_in_string)\n                {\n                  mbchar_t last_char_before_tsub;\n                  do\n                    {\n                      if (!mbui_avail (string_iter))\n                        abort ();\n                      last_char_before_tsub = mbui_cur (string_iter);\n                      mbui_advance (string_iter);\n                    }\n                  while (mbui_cur_ptr (string_iter) < tsub_in_string);\n                  if (mb_isalnum (last_char_before_tsub))\n                    word_boundary_before = false;\n                }\n\n              mbui_init (string_iter, tsub_in_string);\n              {\n                mbui_iterator_t tsub_iter;\n\n                for (mbui_init (tsub_iter, tsub);\n                     mbui_avail (tsub_iter);\n                     mbui_advance (tsub_iter))\n                  {\n                    if (!mbui_avail (string_iter))\n                      abort ();\n                    mbui_advance (string_iter);\n                  }\n              }\n              word_boundary_after = true;\n              if (mbui_avail (string_iter))\n                {\n                  mbchar_t first_char_after_tsub = mbui_cur (string_iter);\n                  if (mb_isalnum (first_char_after_tsub))\n                    word_boundary_after = false;\n                }\n\n              if (word_boundary_before && word_boundary_after)\n                {\n                  found = true;\n                  break;\n                }\n\n              mbui_init (string_iter, tsub_in_string);\n              if (!mbui_avail (string_iter))\n                break;\n              string = tsub_in_string + mb_len (mbui_cur (string_iter));\n            }\n          else\n            {\n              bool word_boundary_before;\n              const char *p;\n              bool word_boundary_after;\n\n              word_boundary_before = true;\n              if (string < tsub_in_string)\n                if (isalnum ((unsigned char) tsub_in_string[-1]))\n                  word_boundary_before = false;\n\n              p = tsub_in_string + strlen (tsub);\n              word_boundary_after = true;\n              if (*p != '\\0')\n                if (isalnum ((unsigned char) *p))\n                  word_boundary_after = false;\n\n              if (word_boundary_before && word_boundary_after)\n                {\n                  found = true;\n                  break;\n                }\n\n              if (*tsub_in_string == '\\0')\n                break;\n              string = tsub_in_string + 1;\n            }\n        }\n    }\n  free (tsub);\n  return found;\n}",
      "lines": 100,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "proper_name": {
      "start_point": [
        156,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "const char *\nproper_name (const char *name)\n{\n  /* See whether there is a translation.   */\n  const char *translation = gettext (name);\n\n  if (translation != name)\n    {\n      /* See whether the translation contains the original name.  */\n      if (mbsstr_trimmed_wordbounded (translation, name))\n        return translation;\n      else\n        {\n          /* Return \"TRANSLATION (NAME)\".  */\n          char *result =\n            XNMALLOC (strlen (translation) + 2 + strlen (name) + 1 + 1, char);\n\n          sprintf (result, \"%s (%s)\", translation, name);\n          return result;\n        }\n    }\n  else\n    return name;\n}",
      "lines": 24,
      "depth": 17,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nproper_name (const char *name)",
        "*"
      ]
    },
    "proper_name_utf8": {
      "start_point": [
        186,
        0
      ],
      "end_point": [
        293,
        1
      ],
      "content": "const char *\nproper_name_utf8 (const char *name_ascii, const char *name_utf8)\n{\n  /* See whether there is a translation.   */\n  const char *translation = gettext (name_ascii);\n\n  /* Try to convert NAME_UTF8 to the locale encoding.  */\n  const char *locale_code = locale_charset ();\n  char *alloc_name_converted = NULL;\n  char *alloc_name_converted_translit = NULL;\n  const char *name_converted = NULL;\n  const char *name_converted_translit = NULL;\n  const char *name;\n\n  if (c_strcasecmp (locale_code, \"UTF-8\") != 0)\n    {\n#if HAVE_ICONV\n      name_converted = alloc_name_converted =\n        xstr_iconv (name_utf8, \"UTF-8\", locale_code);\n\n# if (((__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) || __GLIBC__ > 2) \\\n      && !defined __UCLIBC__) \\\n     || _LIBICONV_VERSION >= 0x0105\n      {\n        char *converted_translit;\n\n        size_t len = strlen (locale_code);\n        char *locale_code_translit = XNMALLOC (len + 10 + 1, char);\n        memcpy (locale_code_translit, locale_code, len);\n        memcpy (locale_code_translit + len, \"//TRANSLIT\", 10 + 1);\n\n        converted_translit =\n          xstr_iconv (name_utf8, \"UTF-8\", locale_code_translit);\n\n        free (locale_code_translit);\n\n        if (converted_translit != NULL)\n          {\n#  if !_LIBICONV_VERSION\n            /* Don't use the transliteration if it added question marks.\n               glibc's transliteration falls back to question marks; libiconv's\n               transliteration does not.\n               mbschr is equivalent to strchr in this case.  */\n            if (strchr (converted_translit, '?') != NULL)\n              free (converted_translit);\n            else\n#  endif\n              name_converted_translit = alloc_name_converted_translit =\n                converted_translit;\n          }\n      }\n# endif\n#endif\n    }\n  else\n    {\n      name_converted = name_utf8;\n      name_converted_translit = name_utf8;\n    }\n\n  /* The name in locale encoding.  */\n  name = (name_converted != NULL ? name_converted :\n          name_converted_translit != NULL ? name_converted_translit :\n          name_ascii);\n\n  /* See whether we have a translation.  Some translators have not understood\n     that they should use the UTF-8 form of the name, if possible.  So if the\n     translator provided a no-op translation, we ignore it.  */\n  if (strcmp (translation, name_ascii) != 0)\n    {\n      /* See whether the translation contains the original name.  */\n      if (mbsstr_trimmed_wordbounded (translation, name_ascii)\n          || (name_converted != NULL\n              && mbsstr_trimmed_wordbounded (translation, name_converted))\n          || (name_converted_translit != NULL\n              && mbsstr_trimmed_wordbounded (translation, name_converted_translit)))\n        {\n          if (alloc_name_converted != NULL)\n            free (alloc_name_converted);\n          if (alloc_name_converted_translit != NULL)\n            free (alloc_name_converted_translit);\n          return translation;\n        }\n      else\n        {\n          /* Return \"TRANSLATION (NAME)\".  */\n          char *result =\n            XNMALLOC (strlen (translation) + 2 + strlen (name) + 1 + 1, char);\n\n          sprintf (result, \"%s (%s)\", translation, name);\n\n          if (alloc_name_converted != NULL)\n            free (alloc_name_converted);\n          if (alloc_name_converted_translit != NULL)\n            free (alloc_name_converted_translit);\n          return result;\n        }\n    }\n  else\n    {\n      if (alloc_name_converted != NULL && alloc_name_converted != name)\n        free (alloc_name_converted);\n      if (alloc_name_converted_translit != NULL\n          && alloc_name_converted_translit != name)\n        free (alloc_name_converted_translit);\n      return name;\n    }\n}",
      "lines": 108,
      "depth": 17,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nproper_name_utf8 (const char *name_ascii, const char *name_utf8)",
        "*"
      ]
    },
    "main": [
      {
        "start_point": [
          297,
          0
        ],
        "end_point": [
          304,
          1
        ],
        "content": "int\nmain (int argc, char *argv[])\n{\n  setlocale (LC_ALL, \"\");\n  if (mbsstr_trimmed_wordbounded (argv[1], argv[2]))\n    printf(\"found\\n\");\n  return 0;\n}",
        "lines": 8,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          310,
          0
        ],
        "end_point": [
          316,
          1
        ],
        "content": "int\nmain (int argc, char *argv[])\n{\n  setlocale (LC_ALL, \"\");\n  printf (\"%s\\n\", proper_name_utf8 (\"Franc,ois Pinard\", \"Fran\\303\\247ois Pinard\"));\n  return 0;\n}",
        "lines": 7,
        "depth": 9,
        "decorators": [
          "int"
        ]
      }
    ]
  },
  "grep/grep-3.1/lib/propername.h": {},
  "grep/grep-3.1/lib/quote.h": {},
  "grep/grep-3.1/lib/quotearg.c": {
    "clone_quoting_options": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "content": "struct quoting_options *\nclone_quoting_options (struct quoting_options *o)\n{\n  int e = errno;\n  struct quoting_options *p = xmemdup (o ? o : &default_quoting_options,\n                                       sizeof *o);\n  errno = e;\n  return p;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "struct quoting_options",
        "struct",
        "quoting_options",
        "*\nclone_quoting_options (struct quoting_options *o)",
        "*"
      ]
    },
    "get_quoting_style": {
      "start_point": [
        131,
        0
      ],
      "end_point": [
        135,
        1
      ],
      "content": "enum quoting_style\nget_quoting_style (struct quoting_options const *o)\n{\n  return (o ? o : &default_quoting_options)->style;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "enum quoting_style",
        "enum",
        "quoting_style"
      ]
    },
    "set_quoting_style": {
      "start_point": [
        139,
        0
      ],
      "end_point": [
        143,
        1
      ],
      "content": "void\nset_quoting_style (struct quoting_options *o, enum quoting_style s)\n{\n  (o ? o : &default_quoting_options)->style = s;\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "set_char_quoting": {
      "start_point": [
        150,
        0
      ],
      "end_point": [
        160,
        1
      ],
      "content": "int\nset_char_quoting (struct quoting_options *o, char c, int i)\n{\n  unsigned char uc = c;\n  unsigned int *p =\n    (o ? o : &default_quoting_options)->quote_these_too + uc / INT_BITS;\n  int shift = uc % INT_BITS;\n  int r = (*p >> shift) & 1;\n  *p ^= ((i & 1) ^ r) << shift;\n  return r;\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "set_quoting_flags": {
      "start_point": [
        166,
        0
      ],
      "end_point": [
        175,
        1
      ],
      "content": "int\nset_quoting_flags (struct quoting_options *o, int i)\n{\n  int r;\n  if (!o)\n    o = &default_quoting_options;\n  r = o->flags;\n  o->flags = i;\n  return r;\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "set_custom_quoting": {
      "start_point": [
        177,
        0
      ],
      "end_point": [
        188,
        1
      ],
      "content": "void\nset_custom_quoting (struct quoting_options *o,\n                    char const *left_quote, char const *right_quote)\n{\n  if (!o)\n    o = &default_quoting_options;\n  o->style = custom_quoting_style;\n  if (!left_quote || !right_quote)\n    abort ();\n  o->left_quote = left_quote;\n  o->right_quote = right_quote;\n}",
      "lines": 12,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "quoting_options_from_style": {
      "start_point": [
        191,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "content": "static struct quoting_options /* NOT PURE!! */\nquoting_options_from_style (enum quoting_style style)\n{\n  struct quoting_options o = { literal_quoting_style, 0, { 0 }, NULL, NULL };\n  if (style == custom_quoting_style)\n    abort ();\n  o.style = style;\n  return o;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "struct quoting_options",
        "struct",
        "quoting_options",
        "/* NOT PURE!! */"
      ]
    },
    "gettext_quote": {
      "start_point": [
        205,
        0
      ],
      "end_point": [
        239,
        1
      ],
      "content": "static char const *\ngettext_quote (char const *msgid, enum quoting_style s)\n{\n  char const *translation = _(msgid);\n  char const *locale_code;\n\n  if (translation != msgid)\n    return translation;\n\n  /* For UTF-8 and GB-18030, use single quotes U+2018 and U+2019.\n     Here is a list of other locales that include U+2018 and U+2019:\n\n        ISO-8859-7   0xA1                 KOI8-T       0x91\n        CP869        0x8B                 CP874        0x91\n        CP932        0x81 0x65            CP936        0xA1 0xAE\n        CP949        0xA1 0xAE            CP950        0xA1 0xA5\n        CP1250       0x91                 CP1251       0x91\n        CP1252       0x91                 CP1253       0x91\n        CP1254       0x91                 CP1255       0x91\n        CP1256       0x91                 CP1257       0x91\n        EUC-JP       0xA1 0xC6            EUC-KR       0xA1 0xAE\n        EUC-TW       0xA1 0xE4            BIG5         0xA1 0xA5\n        BIG5-HKSCS   0xA1 0xA5            EUC-CN       0xA1 0xAE\n        GBK          0xA1 0xAE            Georgian-PS  0x91\n        PT154        0x91\n\n     None of these is still in wide use; using iconv is overkill.  */\n  locale_code = locale_charset ();\n  if (STRCASEEQ (locale_code, \"UTF-8\", 'U','T','F','-','8',0,0,0,0))\n    return msgid[0] == '`' ? \"\\xe2\\x80\\x98\": \"\\xe2\\x80\\x99\";\n  if (STRCASEEQ (locale_code, \"GB18030\", 'G','B','1','8','0','3','0',0,0))\n    return msgid[0] == '`' ? \"\\xa1\\ae\": \"\\xa1\\xaf\";\n\n  return (s == clocale_quoting_style ? \"\\\"\" : \"'\");\n}",
      "lines": 35,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "char",
        "const",
        "const",
        "*\ngettext_quote (char const *msgid, enum quoting_style s)",
        "*"
      ]
    },
    "quotearg_buffer_restyled": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        771,
        1
      ],
      "content": "static size_t\nquotearg_buffer_restyled (char *buffer, size_t buffersize,\n                          char const *arg, size_t argsize,\n                          enum quoting_style quoting_style, int flags,\n                          unsigned int const *quote_these_too,\n                          char const *left_quote,\n                          char const *right_quote)\n{\n  size_t i;\n  size_t len = 0;\n  size_t orig_buffersize = 0;\n  char const *quote_string = 0;\n  size_t quote_string_len = 0;\n  bool backslash_escapes = false;\n  bool unibyte_locale = MB_CUR_MAX == 1;\n  bool elide_outer_quotes = (flags & QA_ELIDE_OUTER_QUOTES) != 0;\n  bool pending_shell_escape_end = false;\n  bool encountered_single_quote = false;\n  bool all_c_and_shell_quote_compat = true;\n\n#define STORE(c) \\\n    do \\\n      { \\\n        if (len < buffersize) \\\n          buffer[len] = (c); \\\n        len++; \\\n      } \\\n    while (0)\n\n#define START_ESC() \\\n    do \\\n      { \\\n        if (elide_outer_quotes) \\\n          goto force_outer_quoting_style; \\\n        escaping = true; \\\n        if (quoting_style == shell_always_quoting_style \\\n            && ! pending_shell_escape_end) \\\n          { \\\n            STORE ('\\''); \\\n            STORE ('$'); \\\n            STORE ('\\''); \\\n            pending_shell_escape_end = true; \\\n          } \\\n        STORE ('\\\\'); \\\n      } \\\n    while (0)\n\n#define END_ESC() \\\n    do \\\n      { \\\n        if (pending_shell_escape_end && ! escaping) \\\n          { \\\n            STORE ('\\''); \\\n            STORE ('\\''); \\\n            pending_shell_escape_end = false; \\\n          } \\\n      } \\\n    while (0)\n\n process_input:\n\n  switch (quoting_style)\n    {\n    case c_maybe_quoting_style:\n      quoting_style = c_quoting_style;\n      elide_outer_quotes = true;\n      FALLTHROUGH;\n    case c_quoting_style:\n      if (!elide_outer_quotes)\n        STORE ('\"');\n      backslash_escapes = true;\n      quote_string = \"\\\"\";\n      quote_string_len = 1;\n      break;\n\n    case escape_quoting_style:\n      backslash_escapes = true;\n      elide_outer_quotes = false;\n      break;\n\n    case locale_quoting_style:\n    case clocale_quoting_style:\n    case custom_quoting_style:\n      {\n        if (quoting_style != custom_quoting_style)\n          {\n            /* TRANSLATORS:\n               Get translations for open and closing quotation marks.\n               The message catalog should translate \"`\" to a left\n               quotation mark suitable for the locale, and similarly for\n               \"'\".  For example, a French Unicode local should translate\n               these to U+00AB (LEFT-POINTING DOUBLE ANGLE\n               QUOTATION MARK), and U+00BB (RIGHT-POINTING DOUBLE ANGLE\n               QUOTATION MARK), respectively.\n\n               If the catalog has no translation, we will try to\n               use Unicode U+2018 (LEFT SINGLE QUOTATION MARK) and\n               Unicode U+2019 (RIGHT SINGLE QUOTATION MARK).  If the\n               current locale is not Unicode, locale_quoting_style\n               will quote 'like this', and clocale_quoting_style will\n               quote \"like this\".  You should always include translations\n               for \"`\" and \"'\" even if U+2018 and U+2019 are appropriate\n               for your locale.\n\n               If you don't know what to put here, please see\n               <http://en.wikipedia.org/wiki/Quotation_marks_in_other_languages>\n               and use glyphs suitable for your language.  */\n            left_quote = gettext_quote (N_(\"`\"), quoting_style);\n            right_quote = gettext_quote (N_(\"'\"), quoting_style);\n          }\n        if (!elide_outer_quotes)\n          for (quote_string = left_quote; *quote_string; quote_string++)\n            STORE (*quote_string);\n        backslash_escapes = true;\n        quote_string = right_quote;\n        quote_string_len = strlen (quote_string);\n      }\n      break;\n\n    case shell_escape_quoting_style:\n      backslash_escapes = true;\n      FALLTHROUGH;\n    case shell_quoting_style:\n      elide_outer_quotes = true;\n      FALLTHROUGH;\n    case shell_escape_always_quoting_style:\n      if (!elide_outer_quotes)\n        backslash_escapes = true;\n      FALLTHROUGH;\n    case shell_always_quoting_style:\n      quoting_style = shell_always_quoting_style;\n      if (!elide_outer_quotes)\n        STORE ('\\'');\n      quote_string = \"'\";\n      quote_string_len = 1;\n      break;\n\n    case literal_quoting_style:\n      elide_outer_quotes = false;\n      break;\n\n    default:\n      abort ();\n    }\n\n  for (i = 0;  ! (argsize == SIZE_MAX ? arg[i] == '\\0' : i == argsize);  i++)\n    {\n      unsigned char c;\n      unsigned char esc;\n      bool is_right_quote = false;\n      bool escaping = false;\n      bool c_and_shell_quote_compat = false;\n\n      if (backslash_escapes\n          && quoting_style != shell_always_quoting_style\n          && quote_string_len\n          && (i + quote_string_len\n              <= (argsize == SIZE_MAX && 1 < quote_string_len\n                  /* Use strlen only if we must: when argsize is SIZE_MAX,\n                     and when the quote string is more than 1 byte long.\n                     If we do call strlen, save the result.  */\n                  ? (argsize = strlen (arg)) : argsize))\n          && memcmp (arg + i, quote_string, quote_string_len) == 0)\n        {\n          if (elide_outer_quotes)\n            goto force_outer_quoting_style;\n          is_right_quote = true;\n        }\n\n      c = arg[i];\n      switch (c)\n        {\n        case '\\0':\n          if (backslash_escapes)\n            {\n              START_ESC ();\n              /* If quote_string were to begin with digits, we'd need to\n                 test for the end of the arg as well.  However, it's\n                 hard to imagine any locale that would use digits in\n                 quotes, and set_custom_quoting is documented not to\n                 accept them.  Use only a single \\0 with shell-escape\n                 as currently digits are not printed within $'...'  */\n              if (quoting_style != shell_always_quoting_style\n                  && i + 1 < argsize && '0' <= arg[i + 1] && arg[i + 1] <= '9')\n                {\n                  STORE ('0');\n                  STORE ('0');\n                }\n              c = '0';\n              /* We don't have to worry that this last '0' will be\n                 backslash-escaped because, again, quote_string should\n                 not start with it and because quote_these_too is\n                 documented as not accepting it.  */\n            }\n          else if (flags & QA_ELIDE_NULL_BYTES)\n            continue;\n          break;\n\n        case '?':\n          switch (quoting_style)\n            {\n            case shell_always_quoting_style:\n              if (elide_outer_quotes)\n                goto force_outer_quoting_style;\n              break;\n\n            case c_quoting_style:\n              if ((flags & QA_SPLIT_TRIGRAPHS)\n                  && i + 2 < argsize && arg[i + 1] == '?')\n                switch (arg[i + 2])\n                  {\n                  case '!': case '\\'':\n                  case '(': case ')': case '-': case '/':\n                  case '<': case '=': case '>':\n                    /* Escape the second '?' in what would otherwise be\n                       a trigraph.  */\n                    if (elide_outer_quotes)\n                      goto force_outer_quoting_style;\n                    c = arg[i + 2];\n                    i += 2;\n                    STORE ('?');\n                    STORE ('\"');\n                    STORE ('\"');\n                    STORE ('?');\n                    break;\n\n                  default:\n                    break;\n                  }\n              break;\n\n            default:\n              break;\n            }\n          break;\n\n        case '\\a': esc = 'a'; goto c_escape;\n        case '\\b': esc = 'b'; goto c_escape;\n        case '\\f': esc = 'f'; goto c_escape;\n        case '\\n': esc = 'n'; goto c_and_shell_escape;\n        case '\\r': esc = 'r'; goto c_and_shell_escape;\n        case '\\t': esc = 't'; goto c_and_shell_escape;\n        case '\\v': esc = 'v'; goto c_escape;\n        case '\\\\': esc = c;\n          /* Never need to escape '\\' in shell case.  */\n          if (quoting_style == shell_always_quoting_style)\n            {\n              if (elide_outer_quotes)\n                goto force_outer_quoting_style;\n              goto store_c;\n            }\n\n          /* No need to escape the escape if we are trying to elide\n             outer quotes and nothing else is problematic.  */\n          if (backslash_escapes && elide_outer_quotes && quote_string_len)\n            goto store_c;\n\n        c_and_shell_escape:\n          if (quoting_style == shell_always_quoting_style\n              && elide_outer_quotes)\n            goto force_outer_quoting_style;\n          /* fall through */\n        c_escape:\n          if (backslash_escapes)\n            {\n              c = esc;\n              goto store_escape;\n            }\n          break;\n\n        case '{': case '}': /* sometimes special if isolated */\n          if (! (argsize == SIZE_MAX ? arg[1] == '\\0' : argsize == 1))\n            break;\n          FALLTHROUGH;\n        case '#': case '~':\n          if (i != 0)\n            break;\n          FALLTHROUGH;\n        case ' ':\n          c_and_shell_quote_compat = true;\n          FALLTHROUGH;\n        case '!': /* special in bash */\n        case '\"': case '$': case '&':\n        case '(': case ')': case '*': case ';':\n        case '<':\n        case '=': /* sometimes special in 0th or (with \"set -k\") later args */\n        case '>': case '[':\n        case '^': /* special in old /bin/sh, e.g. SunOS 4.1.4 */\n        case '`': case '|':\n          /* A shell special character.  In theory, '$' and '`' could\n             be the first bytes of multibyte characters, which means\n             we should check them with mbrtowc, but in practice this\n             doesn't happen so it's not worth worrying about.  */\n          if (quoting_style == shell_always_quoting_style\n              && elide_outer_quotes)\n            goto force_outer_quoting_style;\n          break;\n\n        case '\\'':\n          encountered_single_quote = true;\n          c_and_shell_quote_compat = true;\n          if (quoting_style == shell_always_quoting_style)\n            {\n              if (elide_outer_quotes)\n                goto force_outer_quoting_style;\n\n              if (buffersize && ! orig_buffersize)\n                {\n                  /* Just scan string to see if supports a more concise\n                     representation, rather than writing a longer string\n                     but returning the length of the more concise form.  */\n                  orig_buffersize = buffersize;\n                  buffersize = 0;\n                }\n\n              STORE ('\\'');\n              STORE ('\\\\');\n              STORE ('\\'');\n              pending_shell_escape_end = false;\n            }\n          break;\n\n        case '%': case '+': case ',': case '-': case '.': case '/':\n        case '0': case '1': case '2': case '3': case '4': case '5':\n        case '6': case '7': case '8': case '9': case ':':\n        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':\n        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n        case 'Y': case 'Z': case ']': case '_': case 'a': case 'b':\n        case 'c': case 'd': case 'e': case 'f': case 'g': case 'h':\n        case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':\n        case 'o': case 'p': case 'q': case 'r': case 's': case 't':\n        case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':\n          /* These characters don't cause problems, no matter what the\n             quoting style is.  They cannot start multibyte sequences.\n             A digit or a special letter would cause trouble if it\n             appeared at the beginning of quote_string because we'd then\n             escape by prepending a backslash.  However, it's hard to\n             imagine any locale that would use digits or letters as\n             quotes, and set_custom_quoting is documented not to accept\n             them.  Also, a digit or a special letter would cause\n             trouble if it appeared in quote_these_too, but that's also\n             documented as not accepting them.  */\n          c_and_shell_quote_compat = true;\n          break;\n\n        default:\n          /* If we have a multibyte sequence, copy it until we reach\n             its end, find an error, or come back to the initial shift\n             state.  For C-like styles, if the sequence has\n             unprintable characters, escape the whole sequence, since\n             we can't easily escape single characters within it.  */\n          {\n            /* Length of multibyte sequence found so far.  */\n            size_t m;\n\n            bool printable;\n\n            if (unibyte_locale)\n              {\n                m = 1;\n                printable = isprint (c) != 0;\n              }\n            else\n              {\n                mbstate_t mbstate;\n                memset (&mbstate, 0, sizeof mbstate);\n\n                m = 0;\n                printable = true;\n                if (argsize == SIZE_MAX)\n                  argsize = strlen (arg);\n\n                do\n                  {\n                    wchar_t w;\n                    size_t bytes = mbrtowc (&w, &arg[i + m],\n                                            argsize - (i + m), &mbstate);\n                    if (bytes == 0)\n                      break;\n                    else if (bytes == (size_t) -1)\n                      {\n                        printable = false;\n                        break;\n                      }\n                    else if (bytes == (size_t) -2)\n                      {\n                        printable = false;\n                        while (i + m < argsize && arg[i + m])\n                          m++;\n                        break;\n                      }\n                    else\n                      {\n                        /* Work around a bug with older shells that \"see\" a '\\'\n                           that is really the 2nd byte of a multibyte character.\n                           In practice the problem is limited to ASCII\n                           chars >= '@' that are shell special chars.  */\n                        if ('[' == 0x5b && elide_outer_quotes\n                            && quoting_style == shell_always_quoting_style)\n                          {\n                            size_t j;\n                            for (j = 1; j < bytes; j++)\n                              switch (arg[i + m + j])\n                                {\n                                case '[': case '\\\\': case '^':\n                                case '`': case '|':\n                                  goto force_outer_quoting_style;\n\n                                default:\n                                  break;\n                                }\n                          }\n\n                        if (! iswprint (w))\n                          printable = false;\n                        m += bytes;\n                      }\n                  }\n                while (! mbsinit (&mbstate));\n              }\n\n            c_and_shell_quote_compat = printable;\n\n            if (1 < m || (backslash_escapes && ! printable))\n              {\n                /* Output a multibyte sequence, or an escaped\n                   unprintable unibyte character.  */\n                size_t ilim = i + m;\n\n                for (;;)\n                  {\n                    if (backslash_escapes && ! printable)\n                      {\n                        START_ESC ();\n                        STORE ('0' + (c >> 6));\n                        STORE ('0' + ((c >> 3) & 7));\n                        c = '0' + (c & 7);\n                      }\n                    else if (is_right_quote)\n                      {\n                        STORE ('\\\\');\n                        is_right_quote = false;\n                      }\n                    if (ilim <= i + 1)\n                      break;\n                    END_ESC ();\n                    STORE (c);\n                    c = arg[++i];\n                  }\n\n                goto store_c;\n              }\n          }\n        }\n\n      if (! (((backslash_escapes && quoting_style != shell_always_quoting_style)\n              || elide_outer_quotes)\n             && quote_these_too\n             && quote_these_too[c / INT_BITS] >> (c % INT_BITS) & 1)\n          && !is_right_quote)\n        goto store_c;\n\n    store_escape:\n      START_ESC ();\n\n    store_c:\n      END_ESC ();\n      STORE (c);\n\n      if (! c_and_shell_quote_compat)\n        all_c_and_shell_quote_compat = false;\n    }\n\n  if (len == 0 && quoting_style == shell_always_quoting_style\n      && elide_outer_quotes)\n    goto force_outer_quoting_style;\n\n  /* Single shell quotes (') are commonly enough used as an apostrophe,\n     that we attempt to minimize the quoting in this case.  Note it\u00ca\u00bcs\n     better to use the apostrophe modifier \"\\u02BC\" if possible, as that\n     renders better and works with the word match regex \\W+ etc.  */\n  if (quoting_style == shell_always_quoting_style && ! elide_outer_quotes\n      && encountered_single_quote)\n    {\n      if (all_c_and_shell_quote_compat)\n        return quotearg_buffer_restyled (buffer, orig_buffersize, arg, argsize,\n                                         c_quoting_style,\n                                         flags, quote_these_too,\n                                         left_quote, right_quote);\n      else if (! buffersize && orig_buffersize)\n        {\n          /* Disable read-only scan, and reprocess to write quoted string.  */\n          buffersize = orig_buffersize;\n          len = 0;\n          goto process_input;\n        }\n    }\n\n  if (quote_string && !elide_outer_quotes)\n    for (; *quote_string; quote_string++)\n      STORE (*quote_string);\n\n  if (len < buffersize)\n    buffer[len] = '\\0';\n  return len;\n\n force_outer_quoting_style:\n  /* Don't reuse quote_these_too, since the addition of outer quotes\n     sufficiently quotes the specified characters.  */\n  if (quoting_style == shell_always_quoting_style && backslash_escapes)\n    quoting_style = shell_escape_always_quoting_style;\n  return quotearg_buffer_restyled (buffer, buffersize, arg, argsize,\n                                   quoting_style,\n                                   flags & ~QA_ELIDE_OUTER_QUOTES, NULL,\n                                   left_quote, right_quote);\n}",
      "lines": 518,
      "depth": 25,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "quotearg_buffer": {
      "start_point": [
        782,
        0
      ],
      "end_point": [
        794,
        1
      ],
      "content": "size_t\nquotearg_buffer (char *buffer, size_t buffersize,\n                 char const *arg, size_t argsize,\n                 struct quoting_options const *o)\n{\n  struct quoting_options const *p = o ? o : &default_quoting_options;\n  int e = errno;\n  size_t r = quotearg_buffer_restyled (buffer, buffersize, arg, argsize,\n                                       p->style, p->flags, p->quote_these_too,\n                                       p->left_quote, p->right_quote);\n  errno = e;\n  return r;\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "size_t"
      ]
    },
    "quotearg_alloc": {
      "start_point": [
        797,
        0
      ],
      "end_point": [
        802,
        1
      ],
      "content": "char *\nquotearg_alloc (char const *arg, size_t argsize,\n                struct quoting_options const *o)\n{\n  return quotearg_alloc_mem (arg, argsize, NULL, o);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_alloc (char const *arg, size_t argsize,\n                struct quoting_options const *o)",
        "*"
      ]
    },
    "quotearg_alloc_mem": {
      "start_point": [
        810,
        0
      ],
      "end_point": [
        830,
        1
      ],
      "content": "char *\nquotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,\n                    struct quoting_options const *o)\n{\n  struct quoting_options const *p = o ? o : &default_quoting_options;\n  int e = errno;\n  /* Elide embedded null bytes if we can't return a size.  */\n  int flags = p->flags | (size ? 0 : QA_ELIDE_NULL_BYTES);\n  size_t bufsize = quotearg_buffer_restyled (0, 0, arg, argsize, p->style,\n                                             flags, p->quote_these_too,\n                                             p->left_quote,\n                                             p->right_quote) + 1;\n  char *buf = xcharalloc (bufsize);\n  quotearg_buffer_restyled (buf, bufsize, arg, argsize, p->style, flags,\n                            p->quote_these_too,\n                            p->left_quote, p->right_quote);\n  errno = e;\n  if (size)\n    *size = bufsize - 1;\n  return buf;\n}",
      "lines": 21,
      "depth": 9,
      "decorators": [
        "char",
        "*\nquotearg_alloc_mem (char const *arg, size_t argsize, size_t *size,\n                    struct quoting_options const *o)",
        "*"
      ]
    },
    "quotearg_free": {
      "start_point": [
        846,
        0
      ],
      "end_point": [
        865,
        1
      ],
      "content": "void\nquotearg_free (void)\n{\n  struct slotvec *sv = slotvec;\n  int i;\n  for (i = 1; i < nslots; i++)\n    free (sv[i].val);\n  if (sv[0].val != slot0)\n    {\n      free (sv[0].val);\n      slotvec0.size = sizeof slot0;\n      slotvec0.val = slot0;\n    }\n  if (sv != &slotvec0)\n    {\n      free (sv);\n      slotvec = &slotvec0;\n    }\n  nslots = 1;\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "quotearg_n_options": {
      "start_point": [
        875,
        0
      ],
      "end_point": [
        926,
        1
      ],
      "content": "static char *\nquotearg_n_options (int n, char const *arg, size_t argsize,\n                    struct quoting_options const *options)\n{\n  int e = errno;\n\n  struct slotvec *sv = slotvec;\n\n  if (n < 0)\n    abort ();\n\n  if (nslots <= n)\n    {\n      bool preallocated = (sv == &slotvec0);\n\n      if (MIN (INT_MAX, MIN (PTRDIFF_MAX, SIZE_MAX) / sizeof *sv) <= n)\n        xalloc_die ();\n\n      slotvec = sv = xrealloc (preallocated ? NULL : sv, (n + 1) * sizeof *sv);\n      if (preallocated)\n        *sv = slotvec0;\n      memset (sv + nslots, 0, (n + 1 - nslots) * sizeof *sv);\n      nslots = n + 1;\n    }\n\n  {\n    size_t size = sv[n].size;\n    char *val = sv[n].val;\n    /* Elide embedded null bytes since we don't return a size.  */\n    int flags = options->flags | QA_ELIDE_NULL_BYTES;\n    size_t qsize = quotearg_buffer_restyled (val, size, arg, argsize,\n                                             options->style, flags,\n                                             options->quote_these_too,\n                                             options->left_quote,\n                                             options->right_quote);\n\n    if (size <= qsize)\n      {\n        sv[n].size = size = qsize + 1;\n        if (val != slot0)\n          free (val);\n        sv[n].val = val = xcharalloc (size);\n        quotearg_buffer_restyled (val, size, arg, argsize, options->style,\n                                  flags, options->quote_these_too,\n                                  options->left_quote,\n                                  options->right_quote);\n      }\n\n    errno = e;\n    return val;\n  }\n}",
      "lines": 52,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nquotearg_n_options (int n, char const *arg, size_t argsize,\n                    struct quoting_options const *options)",
        "*"
      ]
    },
    "quotearg_n": {
      "start_point": [
        928,
        0
      ],
      "end_point": [
        932,
        1
      ],
      "content": "char *\nquotearg_n (int n, char const *arg)\n{\n  return quotearg_n_options (n, arg, SIZE_MAX, &default_quoting_options);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n (int n, char const *arg)",
        "*"
      ]
    },
    "quotearg_n_mem": {
      "start_point": [
        934,
        0
      ],
      "end_point": [
        938,
        1
      ],
      "content": "char *\nquotearg_n_mem (int n, char const *arg, size_t argsize)\n{\n  return quotearg_n_options (n, arg, argsize, &default_quoting_options);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_mem (int n, char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg": {
      "start_point": [
        940,
        0
      ],
      "end_point": [
        944,
        1
      ],
      "content": "char *\nquotearg (char const *arg)\n{\n  return quotearg_n (0, arg);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg (char const *arg)",
        "*"
      ]
    },
    "quotearg_mem": {
      "start_point": [
        946,
        0
      ],
      "end_point": [
        950,
        1
      ],
      "content": "char *\nquotearg_mem (char const *arg, size_t argsize)\n{\n  return quotearg_n_mem (0, arg, argsize);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_mem (char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg_n_style": {
      "start_point": [
        952,
        0
      ],
      "end_point": [
        957,
        1
      ],
      "content": "char *\nquotearg_n_style (int n, enum quoting_style s, char const *arg)\n{\n  struct quoting_options const o = quoting_options_from_style (s);\n  return quotearg_n_options (n, arg, SIZE_MAX, &o);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_style (int n, enum quoting_style s, char const *arg)",
        "*"
      ]
    },
    "quotearg_n_style_mem": {
      "start_point": [
        959,
        0
      ],
      "end_point": [
        965,
        1
      ],
      "content": "char *\nquotearg_n_style_mem (int n, enum quoting_style s,\n                      char const *arg, size_t argsize)\n{\n  struct quoting_options const o = quoting_options_from_style (s);\n  return quotearg_n_options (n, arg, argsize, &o);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_style_mem (int n, enum quoting_style s,\n                      char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg_style": {
      "start_point": [
        967,
        0
      ],
      "end_point": [
        971,
        1
      ],
      "content": "char *\nquotearg_style (enum quoting_style s, char const *arg)\n{\n  return quotearg_n_style (0, s, arg);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_style (enum quoting_style s, char const *arg)",
        "*"
      ]
    },
    "quotearg_style_mem": {
      "start_point": [
        973,
        0
      ],
      "end_point": [
        977,
        1
      ],
      "content": "char *\nquotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)\n{\n  return quotearg_n_style_mem (0, s, arg, argsize);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_style_mem (enum quoting_style s, char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg_char_mem": {
      "start_point": [
        979,
        0
      ],
      "end_point": [
        986,
        1
      ],
      "content": "char *\nquotearg_char_mem (char const *arg, size_t argsize, char ch)\n{\n  struct quoting_options options;\n  options = default_quoting_options;\n  set_char_quoting (&options, ch, 1);\n  return quotearg_n_options (0, arg, argsize, &options);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_char_mem (char const *arg, size_t argsize, char ch)",
        "*"
      ]
    },
    "quotearg_char": {
      "start_point": [
        988,
        0
      ],
      "end_point": [
        992,
        1
      ],
      "content": "char *\nquotearg_char (char const *arg, char ch)\n{\n  return quotearg_char_mem (arg, SIZE_MAX, ch);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_char (char const *arg, char ch)",
        "*"
      ]
    },
    "quotearg_colon": {
      "start_point": [
        994,
        0
      ],
      "end_point": [
        998,
        1
      ],
      "content": "char *\nquotearg_colon (char const *arg)\n{\n  return quotearg_char (arg, ':');\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_colon (char const *arg)",
        "*"
      ]
    },
    "quotearg_colon_mem": {
      "start_point": [
        1000,
        0
      ],
      "end_point": [
        1004,
        1
      ],
      "content": "char *\nquotearg_colon_mem (char const *arg, size_t argsize)\n{\n  return quotearg_char_mem (arg, argsize, ':');\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_colon_mem (char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg_n_style_colon": {
      "start_point": [
        1006,
        0
      ],
      "end_point": [
        1013,
        1
      ],
      "content": "char *\nquotearg_n_style_colon (int n, enum quoting_style s, char const *arg)\n{\n  struct quoting_options options;\n  options = quoting_options_from_style (s);\n  set_char_quoting (&options, ':', 1);\n  return quotearg_n_options (n, arg, SIZE_MAX, &options);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_style_colon (int n, enum quoting_style s, char const *arg)",
        "*"
      ]
    },
    "quotearg_n_custom": {
      "start_point": [
        1015,
        0
      ],
      "end_point": [
        1021,
        1
      ],
      "content": "char *\nquotearg_n_custom (int n, char const *left_quote,\n                   char const *right_quote, char const *arg)\n{\n  return quotearg_n_custom_mem (n, left_quote, right_quote, arg,\n                                SIZE_MAX);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_custom (int n, char const *left_quote,\n                   char const *right_quote, char const *arg)",
        "*"
      ]
    },
    "quotearg_n_custom_mem": {
      "start_point": [
        1023,
        0
      ],
      "end_point": [
        1031,
        1
      ],
      "content": "char *\nquotearg_n_custom_mem (int n, char const *left_quote,\n                       char const *right_quote,\n                       char const *arg, size_t argsize)\n{\n  struct quoting_options o = default_quoting_options;\n  set_custom_quoting (&o, left_quote, right_quote);\n  return quotearg_n_options (n, arg, argsize, &o);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_n_custom_mem (int n, char const *left_quote,\n                       char const *right_quote,\n                       char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quotearg_custom": {
      "start_point": [
        1033,
        0
      ],
      "end_point": [
        1038,
        1
      ],
      "content": "char *\nquotearg_custom (char const *left_quote, char const *right_quote,\n                 char const *arg)\n{\n  return quotearg_n_custom (0, left_quote, right_quote, arg);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_custom (char const *left_quote, char const *right_quote,\n                 char const *arg)",
        "*"
      ]
    },
    "quotearg_custom_mem": {
      "start_point": [
        1040,
        0
      ],
      "end_point": [
        1046,
        1
      ],
      "content": "char *\nquotearg_custom_mem (char const *left_quote, char const *right_quote,\n                     char const *arg, size_t argsize)\n{\n  return quotearg_n_custom_mem (0, left_quote, right_quote, arg,\n                                argsize);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "char",
        "*\nquotearg_custom_mem (char const *left_quote, char const *right_quote,\n                     char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quote_n_mem": {
      "start_point": [
        1058,
        0
      ],
      "end_point": [
        1062,
        1
      ],
      "content": "char const *\nquote_n_mem (int n, char const *arg, size_t argsize)\n{\n  return quotearg_n_options (n, arg, argsize, &quote_quoting_options);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "const",
        "const",
        "*\nquote_n_mem (int n, char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quote_mem": {
      "start_point": [
        1064,
        0
      ],
      "end_point": [
        1068,
        1
      ],
      "content": "char const *\nquote_mem (char const *arg, size_t argsize)\n{\n  return quote_n_mem (0, arg, argsize);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "const",
        "const",
        "*\nquote_mem (char const *arg, size_t argsize)",
        "*"
      ]
    },
    "quote_n": {
      "start_point": [
        1070,
        0
      ],
      "end_point": [
        1074,
        1
      ],
      "content": "char const *\nquote_n (int n, char const *arg)\n{\n  return quote_n_mem (n, arg, SIZE_MAX);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "const",
        "const",
        "*\nquote_n (int n, char const *arg)",
        "*"
      ]
    },
    "quote": {
      "start_point": [
        1076,
        0
      ],
      "end_point": [
        1080,
        1
      ],
      "content": "char const *\nquote (char const *arg)\n{\n  return quote_n (0, arg);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "char",
        "const",
        "const",
        "*\nquote (char const *arg)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/quotearg.h": {},
  "grep/grep-3.1/lib/read.c": {
    "read_nothrow": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        50,
        5
      ],
      "content": "static ssize_t\nread_nothrow (int fd, void *buf, size_t count)\n{\n  ssize_t result;\n\n  TRY_MSVC_INVAL\n    {\n      result = read (fd, buf, count);\n    }",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "ssize_t"
      ]
    },
    "rpl_read": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "content": "ssize_t\nrpl_read (int fd, void *buf, size_t count)\n{\n  ssize_t ret = read_nothrow (fd, buf, count);\n\n# if GNULIB_NONBLOCKING\n  if (ret < 0\n      && GetLastError () == ERROR_NO_DATA)\n    {\n      HANDLE h = (HANDLE) _get_osfhandle (fd);\n      if (GetFileType (h) == FILE_TYPE_PIPE)\n        {\n          /* h is a pipe or socket.  */\n          DWORD state;\n          if (GetNamedPipeHandleState (h, &state, NULL, NULL, NULL, NULL, 0)\n              && (state & PIPE_NOWAIT) != 0)\n            /* h is a pipe in non-blocking mode.\n               Change errno from EINVAL to EAGAIN.  */\n            errno = EAGAIN;\n        }\n    }\n# endif\n\n  return ret;\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "ssize_t"
      ]
    }
  },
  "grep/grep-3.1/lib/readdir.c": {
    "readdir": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "struct dirent *\nreaddir (DIR *dirp)\n{\n  char type;\n  struct dirent *result;\n\n  /* There is no need to add code to produce entries for \".\" and \"..\".\n     According to the POSIX:2008 section \"4.12 Pathname Resolution\"\n     <http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html>\n     \".\" and \"..\" are syntactic entities.\n     POSIX also says:\n       \"If entries for dot or dot-dot exist, one entry shall be returned\n        for dot and one entry shall be returned for dot-dot; otherwise,\n        they shall not be returned.\"  */\n\n  switch (dirp->status)\n    {\n    case -2:\n      /* End of directory already reached.  */\n      return NULL;\n    case -1:\n      break;\n    case 0:\n      if (!FindNextFile (dirp->current, &dirp->entry))\n        {\n          switch (GetLastError ())\n            {\n            case ERROR_NO_MORE_FILES:\n              dirp->status = -2;\n              return NULL;\n            default:\n              errno = EIO;\n              return NULL;\n            }\n        }\n      break;\n    default:\n      errno = dirp->status;\n      return NULL;\n    }\n\n  dirp->status = 0;\n\n  if (dirp->entry.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)\n    type = DT_DIR;\n  else if (dirp->entry.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)\n    type = DT_LNK;\n  else if ((dirp->entry.dwFileAttributes\n            & ~(FILE_ATTRIBUTE_READONLY\n                | FILE_ATTRIBUTE_HIDDEN\n                | FILE_ATTRIBUTE_SYSTEM\n                | FILE_ATTRIBUTE_ARCHIVE\n                | FILE_ATTRIBUTE_NORMAL\n                | FILE_ATTRIBUTE_TEMPORARY\n                | FILE_ATTRIBUTE_SPARSE_FILE\n                | FILE_ATTRIBUTE_COMPRESSED\n                | FILE_ATTRIBUTE_NOT_CONTENT_INDEXED\n                | FILE_ATTRIBUTE_ENCRYPTED)) == 0)\n    /* Devices like COM1, LPT1, NUL would also have the attributes 0x20 but\n       they cannot occur here.  */\n    type = DT_REG;\n  else\n    type = DT_UNKNOWN;\n\n  /* Reuse the memory of dirp->entry for the result.  */\n  result =\n    (struct dirent *)\n    ((char *) dirp->entry.cFileName - offsetof (struct dirent, d_name[0]));\n  result->d_type = type;\n\n  return result;\n}",
      "lines": 72,
      "depth": 21,
      "decorators": [
        "struct dirent",
        "struct",
        "dirent",
        "*\nreaddir (DIR *dirp)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/realloc.c": {
    "rpl_realloc": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "content": "void *\nrpl_realloc (void *p, size_t n)\n{\n  void *result;\n\n#if NEED_REALLOC_GNU\n  if (n == 0)\n    {\n      n = 1;\n\n      /* In theory realloc might fail, so don't rely on it to free.  */\n      free (p);\n      p = NULL;\n    }\n#endif\n\n  if (p == NULL)\n    {\n#if GNULIB_REALLOC_GNU && !NEED_REALLOC_GNU && !SYSTEM_MALLOC_GLIBC_COMPATIBLE\n      if (n == 0)\n        n = 1;\n#endif\n      result = malloc (n);\n    }\n  else\n    result = realloc (p, n);\n\n#if !HAVE_REALLOC_POSIX\n  if (result == NULL)\n    errno = ENOMEM;\n#endif\n\n  return result;\n}",
      "lines": 34,
      "depth": 9,
      "decorators": [
        "void",
        "*\nrpl_realloc (void *p, size_t n)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/regcomp.c": {
    "re_compile_pattern": {
      "start_point": [
        215,
        0
      ],
      "end_point": [
        234,
        1
      ],
      "content": "const char *\nre_compile_pattern (const char *pattern, size_t length,\n\t\t    struct re_pattern_buffer *bufp)\n{\n  reg_errcode_t ret;\n\n  /* And GNU code determines whether or not to get register information\n     by passing null for the REGS argument to re_match, etc., not by\n     setting no_sub, unless RE_NO_SUB is set.  */\n  bufp->no_sub = !!(re_syntax_options & RE_NO_SUB);\n\n  /* Match anchors at newline.  */\n  bufp->newline_anchor = 1;\n\n  ret = re_compile_internal (bufp, pattern, length, re_syntax_options);\n\n  if (!ret)\n    return NULL;\n  return gettext (__re_error_msgid + __re_error_msgid_idx[(int) ret]);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nre_compile_pattern (const char *pattern, size_t length,\n\t\t    struct re_pattern_buffer *bufp)",
        "*"
      ]
    },
    "re_set_syntax": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        261,
        1
      ],
      "content": "reg_syntax_t\nre_set_syntax (reg_syntax_t syntax)\n{\n  reg_syntax_t ret = re_syntax_options;\n\n  re_syntax_options = syntax;\n  return ret;\n}",
      "lines": 8,
      "depth": 5,
      "decorators": [
        "reg_syntax_t"
      ]
    },
    "re_compile_fastmap": {
      "start_point": [
        266,
        0
      ],
      "end_point": [
        282,
        1
      ],
      "content": "int\nre_compile_fastmap (struct re_pattern_buffer *bufp)\n{\n  re_dfa_t *dfa = bufp->buffer;\n  char *fastmap = bufp->fastmap;\n\n  memset (fastmap, '\\0', sizeof (char) * SBC_MAX);\n  re_compile_fastmap_iter (bufp, dfa->init_state, fastmap);\n  if (dfa->init_state != dfa->init_state_word)\n    re_compile_fastmap_iter (bufp, dfa->init_state_word, fastmap);\n  if (dfa->init_state != dfa->init_state_nl)\n    re_compile_fastmap_iter (bufp, dfa->init_state_nl, fastmap);\n  if (dfa->init_state != dfa->init_state_begbuf)\n    re_compile_fastmap_iter (bufp, dfa->init_state_begbuf, fastmap);\n  bufp->fastmap_accurate = 1;\n  return 0;\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "re_set_fastmap": {
      "start_point": [
        287,
        0
      ],
      "end_point": [
        294,
        1
      ],
      "content": "static inline void\n__attribute__ ((always_inline))\nre_set_fastmap (char *fastmap, bool icase, int ch)\n{\n  fastmap[ch] = 1;\n  if (icase)\n    fastmap[tolower (ch)] = 1;\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "void",
        "__attribute__ ((always_inline))",
        "__attribute__",
        "(",
        "(always_inline)",
        "(",
        "always_inline",
        ")",
        ")"
      ]
    },
    "re_compile_fastmap_iter": {
      "start_point": [
        299,
        0
      ],
      "end_point": [
        427,
        1
      ],
      "content": "static void\nre_compile_fastmap_iter (regex_t *bufp, const re_dfastate_t *init_state,\n\t\t\t char *fastmap)\n{\n  re_dfa_t *dfa = bufp->buffer;\n  Idx node_cnt;\n  bool icase = (dfa->mb_cur_max == 1 && (bufp->syntax & RE_ICASE));\n  for (node_cnt = 0; node_cnt < init_state->nodes.nelem; ++node_cnt)\n    {\n      Idx node = init_state->nodes.elems[node_cnt];\n      re_token_type_t type = dfa->nodes[node].type;\n\n      if (type == CHARACTER)\n\t{\n\t  re_set_fastmap (fastmap, icase, dfa->nodes[node].opr.c);\n#ifdef RE_ENABLE_I18N\n\t  if ((bufp->syntax & RE_ICASE) && dfa->mb_cur_max > 1)\n\t    {\n\t      unsigned char buf[MB_LEN_MAX];\n\t      unsigned char *p;\n\t      wchar_t wc;\n\t      mbstate_t state;\n\n\t      p = buf;\n\t      *p++ = dfa->nodes[node].opr.c;\n\t      while (++node < dfa->nodes_len\n\t\t     &&\tdfa->nodes[node].type == CHARACTER\n\t\t     && dfa->nodes[node].mb_partial)\n\t\t*p++ = dfa->nodes[node].opr.c;\n\t      memset (&state, '\\0', sizeof (state));\n\t      if (__mbrtowc (&wc, (const char *) buf, p - buf,\n\t\t\t     &state) == p - buf\n\t\t  && (__wcrtomb ((char *) buf, __towlower (wc), &state)\n\t\t      != (size_t) -1))\n\t\tre_set_fastmap (fastmap, false, buf[0]);\n\t    }\n#endif\n\t}\n      else if (type == SIMPLE_BRACKET)\n\t{\n\t  int i, ch;\n\t  for (i = 0, ch = 0; i < BITSET_WORDS; ++i)\n\t    {\n\t      int j;\n\t      bitset_word_t w = dfa->nodes[node].opr.sbcset[i];\n\t      for (j = 0; j < BITSET_WORD_BITS; ++j, ++ch)\n\t\tif (w & ((bitset_word_t) 1 << j))\n\t\t  re_set_fastmap (fastmap, icase, ch);\n\t    }\n\t}\n#ifdef RE_ENABLE_I18N\n      else if (type == COMPLEX_BRACKET)\n\t{\n\t  re_charset_t *cset = dfa->nodes[node].opr.mbcset;\n\t  Idx i;\n\n# ifdef _LIBC\n\t  /* See if we have to try all bytes which start multiple collation\n\t     elements.\n\t     e.g. In da_DK, we want to catch 'a' since \"aa\" is a valid\n\t\t  collation element, and don't catch 'b' since 'b' is\n\t\t  the only collation element which starts from 'b' (and\n\t\t  it is caught by SIMPLE_BRACKET).  */\n\t      if (_NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES) != 0\n\t\t  && (cset->ncoll_syms || cset->nranges))\n\t\t{\n\t\t  const int32_t *table = (const int32_t *)\n\t\t    _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);\n\t\t  for (i = 0; i < SBC_MAX; ++i)\n\t\t    if (table[i] < 0)\n\t\t      re_set_fastmap (fastmap, icase, i);\n\t\t}\n# endif /* _LIBC */\n\n\t  /* See if we have to start the match at all multibyte characters,\n\t     i.e. where we would not find an invalid sequence.  This only\n\t     applies to multibyte character sets; for single byte character\n\t     sets, the SIMPLE_BRACKET again suffices.  */\n\t  if (dfa->mb_cur_max > 1\n\t      && (cset->nchar_classes || cset->non_match || cset->nranges\n# ifdef _LIBC\n\t\t  || cset->nequiv_classes\n# endif /* _LIBC */\n\t\t ))\n\t    {\n\t      unsigned char c = 0;\n\t      do\n\t\t{\n\t\t  mbstate_t mbs;\n\t\t  memset (&mbs, 0, sizeof (mbs));\n\t\t  if (__mbrtowc (NULL, (char *) &c, 1, &mbs) == (size_t) -2)\n\t\t    re_set_fastmap (fastmap, false, (int) c);\n\t\t}\n\t      while (++c != 0);\n\t    }\n\n\t  else\n\t    {\n\t      /* ... Else catch all bytes which can start the mbchars.  */\n\t      for (i = 0; i < cset->nmbchars; ++i)\n\t\t{\n\t\t  char buf[256];\n\t\t  mbstate_t state;\n\t\t  memset (&state, '\\0', sizeof (state));\n\t\t  if (__wcrtomb (buf, cset->mbchars[i], &state) != (size_t) -1)\n\t\t    re_set_fastmap (fastmap, icase, *(unsigned char *) buf);\n\t\t  if ((bufp->syntax & RE_ICASE) && dfa->mb_cur_max > 1)\n\t\t    {\n\t\t      if (__wcrtomb (buf, __towlower (cset->mbchars[i]), &state)\n\t\t\t  != (size_t) -1)\n\t\t\tre_set_fastmap (fastmap, false, *(unsigned char *) buf);\n\t\t    }\n\t\t}\n\t    }\n\t}\n#endif /* RE_ENABLE_I18N */\n      else if (type == OP_PERIOD\n#ifdef RE_ENABLE_I18N\n\t       || type == OP_UTF8_PERIOD\n#endif /* RE_ENABLE_I18N */\n\t       || type == END_OF_RE)\n\t{\n\t  memset (fastmap, '\\1', sizeof (char) * SBC_MAX);\n\t  if (type == END_OF_RE)\n\t    bufp->can_be_null = 1;\n\t  return;\n\t}\n    }\n}",
      "lines": 129,
      "depth": 23,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "regcomp": {
      "start_point": [
        465,
        0
      ],
      "end_point": [
        516,
        1
      ],
      "content": "int\nregcomp (regex_t *_Restrict_ preg, const char *_Restrict_ pattern, int cflags)\n{\n  reg_errcode_t ret;\n  reg_syntax_t syntax = ((cflags & REG_EXTENDED) ? RE_SYNTAX_POSIX_EXTENDED\n\t\t\t : RE_SYNTAX_POSIX_BASIC);\n\n  preg->buffer = NULL;\n  preg->allocated = 0;\n  preg->used = 0;\n\n  /* Try to allocate space for the fastmap.  */\n  preg->fastmap = re_malloc (char, SBC_MAX);\n  if (BE (preg->fastmap == NULL, 0))\n    return REG_ESPACE;\n\n  syntax |= (cflags & REG_ICASE) ? RE_ICASE : 0;\n\n  /* If REG_NEWLINE is set, newlines are treated differently.  */\n  if (cflags & REG_NEWLINE)\n    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */\n      syntax &= ~RE_DOT_NEWLINE;\n      syntax |= RE_HAT_LISTS_NOT_NEWLINE;\n      /* It also changes the matching behavior.  */\n      preg->newline_anchor = 1;\n    }\n  else\n    preg->newline_anchor = 0;\n  preg->no_sub = !!(cflags & REG_NOSUB);\n  preg->translate = NULL;\n\n  ret = re_compile_internal (preg, pattern, strlen (pattern), syntax);\n\n  /* POSIX doesn't distinguish between an unmatched open-group and an\n     unmatched close-group: both are REG_EPAREN.  */\n  if (ret == REG_ERPAREN)\n    ret = REG_EPAREN;\n\n  /* We have already checked preg->fastmap != NULL.  */\n  if (BE (ret == REG_NOERROR, 1))\n    /* Compute the fastmap now, since regexec cannot modify the pattern\n       buffer.  This function never fails in this implementation.  */\n    (void) re_compile_fastmap (preg);\n  else\n    {\n      /* Some error occurred while compiling the expression.  */\n      re_free (preg->fastmap);\n      preg->fastmap = NULL;\n    }\n\n  return (int) ret;\n}",
      "lines": 52,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "regerror": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        556,
        1
      ],
      "content": "size_t\nregerror (int errcode, const regex_t *_Restrict_ preg, char *_Restrict_ errbuf,\n\t  size_t errbuf_size)\n{\n  const char *msg;\n  size_t msg_size;\n\n  if (BE (errcode < 0\n\t  || errcode >= (int) (sizeof (__re_error_msgid_idx)\n\t\t\t       / sizeof (__re_error_msgid_idx[0])), 0))\n    /* Only error codes returned by the rest of the code should be passed\n       to this routine.  If we are given anything else, or if other regex\n       code generates an invalid error code, then the program has a bug.\n       Dump core so we can fix it.  */\n    abort ();\n\n  msg = gettext (__re_error_msgid + __re_error_msgid_idx[errcode]);\n\n  msg_size = strlen (msg) + 1; /* Includes the null.  */\n\n  if (BE (errbuf_size != 0, 1))\n    {\n      size_t cpy_size = msg_size;\n      if (BE (msg_size > errbuf_size, 0))\n\t{\n\t  cpy_size = errbuf_size - 1;\n\t  errbuf[cpy_size] = '\\0';\n\t}\n      memcpy (errbuf, msg, cpy_size);\n    }\n\n  return msg_size;\n}",
      "lines": 33,
      "depth": 15,
      "decorators": [
        "size_t"
      ]
    },
    "free_dfa_content": {
      "start_point": [
        591,
        0
      ],
      "end_point": [
        636,
        1
      ],
      "content": "static void\nfree_dfa_content (re_dfa_t *dfa)\n{\n  Idx i, j;\n\n  if (dfa->nodes)\n    for (i = 0; i < dfa->nodes_len; ++i)\n      free_token (dfa->nodes + i);\n  re_free (dfa->nexts);\n  for (i = 0; i < dfa->nodes_len; ++i)\n    {\n      if (dfa->eclosures != NULL)\n\tre_node_set_free (dfa->eclosures + i);\n      if (dfa->inveclosures != NULL)\n\tre_node_set_free (dfa->inveclosures + i);\n      if (dfa->edests != NULL)\n\tre_node_set_free (dfa->edests + i);\n    }\n  re_free (dfa->edests);\n  re_free (dfa->eclosures);\n  re_free (dfa->inveclosures);\n  re_free (dfa->nodes);\n\n  if (dfa->state_table)\n    for (i = 0; i <= dfa->state_hash_mask; ++i)\n      {\n\tstruct re_state_table_entry *entry = dfa->state_table + i;\n\tfor (j = 0; j < entry->num; ++j)\n\t  {\n\t    re_dfastate_t *state = entry->array[j];\n\t    free_state (state);\n\t  }\n\tre_free (entry->array);\n      }\n  re_free (dfa->state_table);\n#ifdef RE_ENABLE_I18N\n  if (dfa->sb_char != utf8_sb_map)\n    re_free (dfa->sb_char);\n#endif\n  re_free (dfa->subexp_map);\n#ifdef DEBUG\n  re_free (dfa->re_str);\n#endif\n\n  re_free (dfa);\n}",
      "lines": 46,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "regfree": {
      "start_point": [
        641,
        0
      ],
      "end_point": [
        658,
        1
      ],
      "content": "void\nregfree (regex_t *preg)\n{\n  re_dfa_t *dfa = preg->buffer;\n  if (BE (dfa != NULL, 1))\n    {\n      lock_fini (dfa->lock);\n      free_dfa_content (dfa);\n    }\n  preg->buffer = NULL;\n  preg->allocated = 0;\n\n  re_free (preg->fastmap);\n  preg->fastmap = NULL;\n\n  re_free (preg->translate);\n  preg->translate = NULL;\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "re_comp": {
      "start_point": [
        676,
        0
      ],
      "end_point": [
        720,
        1
      ],
      "content": "weak_function\n# endif\nre_comp (const char *s)\n{\n  reg_errcode_t ret;\n  char *fastmap;\n\n  if (!s)\n    {\n      if (!re_comp_buf.buffer)\n\treturn gettext (\"No previous regular expression\");\n      return 0;\n    }\n\n  if (re_comp_buf.buffer)\n    {\n      fastmap = re_comp_buf.fastmap;\n      re_comp_buf.fastmap = NULL;\n      __regfree (&re_comp_buf);\n      memset (&re_comp_buf, '\\0', sizeof (re_comp_buf));\n      re_comp_buf.fastmap = fastmap;\n    }\n\n  if (re_comp_buf.fastmap == NULL)\n    {\n      re_comp_buf.fastmap = (char *) malloc (SBC_MAX);\n      if (re_comp_buf.fastmap == NULL)\n\treturn (char *) gettext (__re_error_msgid\n\t\t\t\t + __re_error_msgid_idx[(int) REG_ESPACE]);\n    }\n\n  /* Since 're_exec' always passes NULL for the 'regs' argument, we\n     don't need to initialize the pattern buffer fields which affect it.  */\n\n  /* Match anchors at newlines.  */\n  re_comp_buf.newline_anchor = 1;\n\n  ret = re_compile_internal (&re_comp_buf, s, strlen (s), re_syntax_options);\n\n  if (!ret)\n    return NULL;\n\n  /* Yes, we're discarding 'const' here if !HAVE_LIBINTL.  */\n  return (char *) gettext (__re_error_msgid + __re_error_msgid_idx[(int) ret]);\n}",
      "lines": 45,
      "depth": 14,
      "decorators": [
        "weak_function",
        "# endif",
        "# endif"
      ]
    },
    "free_mem": {
      "start_point": [
        723,
        0
      ],
      "end_point": [
        726,
        1
      ],
      "content": "libc_freeres_fn (free_mem)\n{\n  __regfree (&re_comp_buf);\n}",
      "lines": 4,
      "depth": 7,
      "decorators": null
    },
    "re_compile_internal": {
      "start_point": [
        735,
        0
      ],
      "end_point": [
        831,
        1
      ],
      "content": "static reg_errcode_t\nre_compile_internal (regex_t *preg, const char * pattern, size_t length,\n\t\t     reg_syntax_t syntax)\n{\n  reg_errcode_t err = REG_NOERROR;\n  re_dfa_t *dfa;\n  re_string_t regexp;\n\n  /* Initialize the pattern buffer.  */\n  preg->fastmap_accurate = 0;\n  preg->syntax = syntax;\n  preg->not_bol = preg->not_eol = 0;\n  preg->used = 0;\n  preg->re_nsub = 0;\n  preg->can_be_null = 0;\n  preg->regs_allocated = REGS_UNALLOCATED;\n\n  /* Initialize the dfa.  */\n  dfa = preg->buffer;\n  if (BE (preg->allocated < sizeof (re_dfa_t), 0))\n    {\n      /* If zero allocated, but buffer is non-null, try to realloc\n\t enough space.  This loses if buffer's address is bogus, but\n\t that is the user's responsibility.  If ->buffer is NULL this\n\t is a simple allocation.  */\n      dfa = re_realloc (preg->buffer, re_dfa_t, 1);\n      if (dfa == NULL)\n\treturn REG_ESPACE;\n      preg->allocated = sizeof (re_dfa_t);\n      preg->buffer = dfa;\n    }\n  preg->used = sizeof (re_dfa_t);\n\n  err = init_dfa (dfa, length);\n  if (BE (err == REG_NOERROR && lock_init (dfa->lock) != 0, 0))\n    err = REG_ESPACE;\n  if (BE (err != REG_NOERROR, 0))\n    {\n      free_dfa_content (dfa);\n      preg->buffer = NULL;\n      preg->allocated = 0;\n      return err;\n    }\n#ifdef DEBUG\n  /* Note: length+1 will not overflow since it is checked in init_dfa.  */\n  dfa->re_str = re_malloc (char, length + 1);\n  strncpy (dfa->re_str, pattern, length + 1);\n#endif\n\n  err = re_string_construct (&regexp, pattern, length, preg->translate,\n\t\t\t     (syntax & RE_ICASE) != 0, dfa);\n  if (BE (err != REG_NOERROR, 0))\n    {\n    re_compile_internal_free_return:\n      free_workarea_compile (preg);\n      re_string_destruct (&regexp);\n      lock_fini (dfa->lock);\n      free_dfa_content (dfa);\n      preg->buffer = NULL;\n      preg->allocated = 0;\n      return err;\n    }\n\n  /* Parse the regular expression, and build a structure tree.  */\n  preg->re_nsub = 0;\n  dfa->str_tree = parse (&regexp, preg, syntax, &err);\n  if (BE (dfa->str_tree == NULL, 0))\n    goto re_compile_internal_free_return;\n\n  /* Analyze the tree and create the nfa.  */\n  err = analyze (preg);\n  if (BE (err != REG_NOERROR, 0))\n    goto re_compile_internal_free_return;\n\n#ifdef RE_ENABLE_I18N\n  /* If possible, do searching in single byte encoding to speed things up.  */\n  if (dfa->is_utf8 && !(syntax & RE_ICASE) && preg->translate == NULL)\n    optimize_utf8 (dfa);\n#endif\n\n  /* Then create the initial state of the dfa.  */\n  err = create_initial_state (dfa);\n\n  /* Release work areas.  */\n  free_workarea_compile (preg);\n  re_string_destruct (&regexp);\n\n  if (BE (err != REG_NOERROR, 0))\n    {\n      lock_fini (dfa->lock);\n      free_dfa_content (dfa);\n      preg->buffer = NULL;\n      preg->allocated = 0;\n    }\n\n  return err;\n}",
      "lines": 97,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "init_dfa": {
      "start_point": [
        836,
        0
      ],
      "end_point": [
        930,
        1
      ],
      "content": "static reg_errcode_t\ninit_dfa (re_dfa_t *dfa, size_t pat_len)\n{\n  __re_size_t table_size;\n#ifndef _LIBC\n  const char *codeset_name;\n#endif\n#ifdef RE_ENABLE_I18N\n  size_t max_i18n_object_size = MAX (sizeof (wchar_t), sizeof (wctype_t));\n#else\n  size_t max_i18n_object_size = 0;\n#endif\n  size_t max_object_size =\n    MAX (sizeof (struct re_state_table_entry),\n\t MAX (sizeof (re_token_t),\n\t      MAX (sizeof (re_node_set),\n\t\t   MAX (sizeof (regmatch_t),\n\t\t\tmax_i18n_object_size))));\n\n  memset (dfa, '\\0', sizeof (re_dfa_t));\n\n  /* Force allocation of str_tree_storage the first time.  */\n  dfa->str_tree_storage_idx = BIN_TREE_STORAGE_SIZE;\n\n  /* Avoid overflows.  The extra \"/ 2\" is for the table_size doubling\n     calculation below, and for similar doubling calculations\n     elsewhere.  And it's <= rather than <, because some of the\n     doubling calculations add 1 afterwards.  */\n  if (BE (MIN (IDX_MAX, SIZE_MAX / max_object_size) / 2 <= pat_len, 0))\n    return REG_ESPACE;\n\n  dfa->nodes_alloc = pat_len + 1;\n  dfa->nodes = re_malloc (re_token_t, dfa->nodes_alloc);\n\n  /*  table_size = 2 ^ ceil(log pat_len) */\n  for (table_size = 1; ; table_size <<= 1)\n    if (table_size > pat_len)\n      break;\n\n  dfa->state_table = calloc (sizeof (struct re_state_table_entry), table_size);\n  dfa->state_hash_mask = table_size - 1;\n\n  dfa->mb_cur_max = MB_CUR_MAX;\n#ifdef _LIBC\n  if (dfa->mb_cur_max == 6\n      && strcmp (_NL_CURRENT (LC_CTYPE, _NL_CTYPE_CODESET_NAME), \"UTF-8\") == 0)\n    dfa->is_utf8 = 1;\n  dfa->map_notascii = (_NL_CURRENT_WORD (LC_CTYPE, _NL_CTYPE_MAP_TO_NONASCII)\n\t\t       != 0);\n#else\n  codeset_name = nl_langinfo (CODESET);\n  if ((codeset_name[0] == 'U' || codeset_name[0] == 'u')\n      && (codeset_name[1] == 'T' || codeset_name[1] == 't')\n      && (codeset_name[2] == 'F' || codeset_name[2] == 'f')\n      && strcmp (codeset_name + 3 + (codeset_name[3] == '-'), \"8\") == 0)\n    dfa->is_utf8 = 1;\n\n  /* We check exhaustively in the loop below if this charset is a\n     superset of ASCII.  */\n  dfa->map_notascii = 0;\n#endif\n\n#ifdef RE_ENABLE_I18N\n  if (dfa->mb_cur_max > 1)\n    {\n      if (dfa->is_utf8)\n\tdfa->sb_char = (re_bitset_ptr_t) utf8_sb_map;\n      else\n\t{\n\t  int i, j, ch;\n\n\t  dfa->sb_char = (re_bitset_ptr_t) calloc (sizeof (bitset_t), 1);\n\t  if (BE (dfa->sb_char == NULL, 0))\n\t    return REG_ESPACE;\n\n\t  /* Set the bits corresponding to single byte chars.  */\n\t  for (i = 0, ch = 0; i < BITSET_WORDS; ++i)\n\t    for (j = 0; j < BITSET_WORD_BITS; ++j, ++ch)\n\t      {\n\t\twint_t wch = __btowc (ch);\n\t\tif (wch != WEOF)\n\t\t  dfa->sb_char[i] |= (bitset_word_t) 1 << j;\n# ifndef _LIBC\n\t\tif (isascii (ch) && wch != ch)\n\t\t  dfa->map_notascii = 1;\n# endif\n\t      }\n\t}\n    }\n#endif\n\n  if (BE (dfa->nodes == NULL || dfa->state_table == NULL, 0))\n    return REG_ESPACE;\n  return REG_NOERROR;\n}",
      "lines": 95,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "init_word_char": {
      "start_point": [
        936,
        0
      ],
      "end_point": [
        980,
        1
      ],
      "content": "static void\ninternal_function\ninit_word_char (re_dfa_t *dfa)\n{\n  int i = 0;\n  int j;\n  int ch = 0;\n  dfa->word_ops_used = 1;\n  if (BE (dfa->map_notascii == 0, 1))\n    {\n      bitset_word_t bits0 = 0x00000000;\n      bitset_word_t bits1 = 0x03ff0000;\n      bitset_word_t bits2 = 0x87fffffe;\n      bitset_word_t bits3 = 0x07fffffe;\n      if (BITSET_WORD_BITS == 64)\n\t{\n\t  dfa->word_char[0] = bits1 << 31 << 1 | bits0;\n\t  dfa->word_char[1] = bits3 << 31 << 1 | bits2;\n\t  i = 2;\n\t}\n      else if (BITSET_WORD_BITS == 32)\n\t{\n\t  dfa->word_char[0] = bits0;\n\t  dfa->word_char[1] = bits1;\n\t  dfa->word_char[2] = bits2;\n\t  dfa->word_char[3] = bits3;\n\t  i = 4;\n\t}\n      else\n        goto general_case;\n      ch = 128;\n\n      if (BE (dfa->is_utf8, 1))\n\t{\n\t  memset (&dfa->word_char[i], '\\0', (SBC_MAX - ch) / 8);\n\t  return;\n\t}\n    }\n\n general_case:\n  for (; i < BITSET_WORDS; ++i)\n    for (j = 0; j < BITSET_WORD_BITS; ++j, ++ch)\n      if (isalnum (ch) || ch == '_')\n\tdfa->word_char[i] |= (bitset_word_t) 1 << j;\n}",
      "lines": 45,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "free_workarea_compile": {
      "start_point": [
        984,
        0
      ],
      "end_point": [
        999,
        1
      ],
      "content": "static void\nfree_workarea_compile (regex_t *preg)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_storage_t *storage, *next;\n  for (storage = dfa->str_tree_storage; storage; storage = next)\n    {\n      next = storage->next;\n      re_free (storage);\n    }\n  dfa->str_tree_storage = NULL;\n  dfa->str_tree_storage_idx = BIN_TREE_STORAGE_SIZE;\n  dfa->str_tree = NULL;\n  re_free (dfa->org_indices);\n  dfa->org_indices = NULL;\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "create_initial_state": {
      "start_point": [
        1003,
        0
      ],
      "end_point": [
        1081,
        1
      ],
      "content": "static reg_errcode_t\ncreate_initial_state (re_dfa_t *dfa)\n{\n  Idx first, i;\n  reg_errcode_t err;\n  re_node_set init_nodes;\n\n  /* Initial states have the epsilon closure of the node which is\n     the first node of the regular expression.  */\n  first = dfa->str_tree->first->node_idx;\n  dfa->init_node = first;\n  err = re_node_set_init_copy (&init_nodes, dfa->eclosures + first);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n\n  /* The back-references which are in initial states can epsilon transit,\n     since in this case all of the subexpressions can be null.\n     Then we add epsilon closures of the nodes which are the next nodes of\n     the back-references.  */\n  if (dfa->nbackref > 0)\n    for (i = 0; i < init_nodes.nelem; ++i)\n      {\n\tIdx node_idx = init_nodes.elems[i];\n\tre_token_type_t type = dfa->nodes[node_idx].type;\n\n\tIdx clexp_idx;\n\tif (type != OP_BACK_REF)\n\t  continue;\n\tfor (clexp_idx = 0; clexp_idx < init_nodes.nelem; ++clexp_idx)\n\t  {\n\t    re_token_t *clexp_node;\n\t    clexp_node = dfa->nodes + init_nodes.elems[clexp_idx];\n\t    if (clexp_node->type == OP_CLOSE_SUBEXP\n\t\t&& clexp_node->opr.idx == dfa->nodes[node_idx].opr.idx)\n\t      break;\n\t  }\n\tif (clexp_idx == init_nodes.nelem)\n\t  continue;\n\n\tif (type == OP_BACK_REF)\n\t  {\n\t    Idx dest_idx = dfa->edests[node_idx].elems[0];\n\t    if (!re_node_set_contains (&init_nodes, dest_idx))\n\t      {\n\t\treg_errcode_t merge_err\n                  = re_node_set_merge (&init_nodes, dfa->eclosures + dest_idx);\n\t\tif (merge_err != REG_NOERROR)\n\t\t  return merge_err;\n\t\ti = 0;\n\t      }\n\t  }\n      }\n\n  /* It must be the first time to invoke acquire_state.  */\n  dfa->init_state = re_acquire_state_context (&err, dfa, &init_nodes, 0);\n  /* We don't check ERR here, since the initial state must not be NULL.  */\n  if (BE (dfa->init_state == NULL, 0))\n    return err;\n  if (dfa->init_state->has_constraint)\n    {\n      dfa->init_state_word = re_acquire_state_context (&err, dfa, &init_nodes,\n\t\t\t\t\t\t       CONTEXT_WORD);\n      dfa->init_state_nl = re_acquire_state_context (&err, dfa, &init_nodes,\n\t\t\t\t\t\t     CONTEXT_NEWLINE);\n      dfa->init_state_begbuf = re_acquire_state_context (&err, dfa,\n\t\t\t\t\t\t\t &init_nodes,\n\t\t\t\t\t\t\t CONTEXT_NEWLINE\n\t\t\t\t\t\t\t | CONTEXT_BEGBUF);\n      if (BE (dfa->init_state_word == NULL || dfa->init_state_nl == NULL\n\t      || dfa->init_state_begbuf == NULL, 0))\n\treturn err;\n    }\n  else\n    dfa->init_state_word = dfa->init_state_nl\n      = dfa->init_state_begbuf = dfa->init_state;\n\n  re_node_set_free (&init_nodes);\n  return REG_NOERROR;\n}",
      "lines": 79,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "optimize_utf8": {
      "start_point": [
        1088,
        0
      ],
      "end_point": [
        1162,
        1
      ],
      "content": "static void\noptimize_utf8 (re_dfa_t *dfa)\n{\n  Idx node;\n  int i;\n  bool mb_chars = false;\n  bool has_period = false;\n\n  for (node = 0; node < dfa->nodes_len; ++node)\n    switch (dfa->nodes[node].type)\n      {\n      case CHARACTER:\n\tif (dfa->nodes[node].opr.c >= ASCII_CHARS)\n\t  mb_chars = true;\n\tbreak;\n      case ANCHOR:\n\tswitch (dfa->nodes[node].opr.ctx_type)\n\t  {\n\t  case LINE_FIRST:\n\t  case LINE_LAST:\n\t  case BUF_FIRST:\n\t  case BUF_LAST:\n\t    break;\n\t  default:\n\t    /* Word anchors etc. cannot be handled.  It's okay to test\n\t       opr.ctx_type since constraints (for all DFA nodes) are\n\t       created by ORing one or more opr.ctx_type values.  */\n\t    return;\n\t  }\n\tbreak;\n      case OP_PERIOD:\n\thas_period = true;\n\tbreak;\n      case OP_BACK_REF:\n      case OP_ALT:\n      case END_OF_RE:\n      case OP_DUP_ASTERISK:\n      case OP_OPEN_SUBEXP:\n      case OP_CLOSE_SUBEXP:\n\tbreak;\n      case COMPLEX_BRACKET:\n\treturn;\n      case SIMPLE_BRACKET:\n\t/* Just double check.  */\n\t{\n\t  int rshift = (ASCII_CHARS % BITSET_WORD_BITS == 0\n\t\t\t? 0\n\t\t\t: BITSET_WORD_BITS - ASCII_CHARS % BITSET_WORD_BITS);\n\t  for (i = ASCII_CHARS / BITSET_WORD_BITS; i < BITSET_WORDS; ++i)\n\t    {\n\t      if (dfa->nodes[node].opr.sbcset[i] >> rshift != 0)\n\t\treturn;\n\t      rshift = 0;\n\t    }\n\t}\n\tbreak;\n      default:\n\tabort ();\n      }\n\n  if (mb_chars || has_period)\n    for (node = 0; node < dfa->nodes_len; ++node)\n      {\n\tif (dfa->nodes[node].type == CHARACTER\n\t    && dfa->nodes[node].opr.c >= ASCII_CHARS)\n\t  dfa->nodes[node].mb_partial = 0;\n\telse if (dfa->nodes[node].type == OP_PERIOD)\n\t  dfa->nodes[node].type = OP_UTF8_PERIOD;\n      }\n\n  /* The search can be in single byte locale.  */\n  dfa->mb_cur_max = 1;\n  dfa->is_utf8 = 0;\n  dfa->has_mb_node = dfa->nbackref > 0 || has_period;\n}",
      "lines": 75,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "analyze": {
      "start_point": [
        1168,
        0
      ],
      "end_point": [
        1226,
        1
      ],
      "content": "static reg_errcode_t\nanalyze (regex_t *preg)\n{\n  re_dfa_t *dfa = preg->buffer;\n  reg_errcode_t ret;\n\n  /* Allocate arrays.  */\n  dfa->nexts = re_malloc (Idx, dfa->nodes_alloc);\n  dfa->org_indices = re_malloc (Idx, dfa->nodes_alloc);\n  dfa->edests = re_malloc (re_node_set, dfa->nodes_alloc);\n  dfa->eclosures = re_malloc (re_node_set, dfa->nodes_alloc);\n  if (BE (dfa->nexts == NULL || dfa->org_indices == NULL || dfa->edests == NULL\n\t  || dfa->eclosures == NULL, 0))\n    return REG_ESPACE;\n\n  dfa->subexp_map = re_malloc (Idx, preg->re_nsub);\n  if (dfa->subexp_map != NULL)\n    {\n      Idx i;\n      for (i = 0; i < preg->re_nsub; i++)\n\tdfa->subexp_map[i] = i;\n      preorder (dfa->str_tree, optimize_subexps, dfa);\n      for (i = 0; i < preg->re_nsub; i++)\n\tif (dfa->subexp_map[i] != i)\n\t  break;\n      if (i == preg->re_nsub)\n\t{\n\t  free (dfa->subexp_map);\n\t  dfa->subexp_map = NULL;\n\t}\n    }\n\n  ret = postorder (dfa->str_tree, lower_subexps, preg);\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n  ret = postorder (dfa->str_tree, calc_first, dfa);\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n  preorder (dfa->str_tree, calc_next, dfa);\n  ret = preorder (dfa->str_tree, link_nfa_nodes, dfa);\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n  ret = calc_eclosure (dfa);\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n\n  /* We only need this during the prune_impossible_nodes pass in regexec.c;\n     skip it if p_i_n will not run, as calc_inveclosure can be quadratic.  */\n  if ((!preg->no_sub && preg->re_nsub > 0 && dfa->has_plural_match)\n      || dfa->nbackref)\n    {\n      dfa->inveclosures = re_malloc (re_node_set, dfa->nodes_len);\n      if (BE (dfa->inveclosures == NULL, 0))\n\treturn REG_ESPACE;\n      ret = calc_inveclosure (dfa);\n    }\n\n  return ret;\n}",
      "lines": 59,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "postorder": {
      "start_point": [
        1231,
        0
      ],
      "end_point": [
        1261,
        1
      ],
      "content": "static reg_errcode_t\npostorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),\n\t   void *extra)\n{\n  bin_tree_t *node, *prev;\n\n  for (node = root; ; )\n    {\n      /* Descend down the tree, preferably to the left (or to the right\n\t if that's the only child).  */\n      while (node->left || node->right)\n\tif (node->left)\n\t  node = node->left;\n\telse\n\t  node = node->right;\n\n      do\n\t{\n\t  reg_errcode_t err = fn (extra, node);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t  if (node->parent == NULL)\n\t    return REG_NOERROR;\n\t  prev = node;\n\t  node = node->parent;\n\t}\n      /* Go up while we have a node that is reached from the right.  */\n      while (node->right == prev || node->right == NULL);\n      node = node->right;\n    }\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "preorder": {
      "start_point": [
        1263,
        0
      ],
      "end_point": [
        1291,
        1
      ],
      "content": "static reg_errcode_t\npreorder (bin_tree_t *root, reg_errcode_t (fn (void *, bin_tree_t *)),\n\t  void *extra)\n{\n  bin_tree_t *node;\n\n  for (node = root; ; )\n    {\n      reg_errcode_t err = fn (extra, node);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n\n      /* Go to the left node, or up and to the right.  */\n      if (node->left)\n\tnode = node->left;\n      else\n\t{\n\t  bin_tree_t *prev = NULL;\n\t  while (node->right == prev || node->right == NULL)\n\t    {\n\t      prev = node;\n\t      node = node->parent;\n\t      if (!node)\n\t\treturn REG_NOERROR;\n\t    }\n\t  node = node->right;\n\t}\n    }\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "optimize_subexps": {
      "start_point": [
        1296,
        0
      ],
      "end_point": [
        1323,
        1
      ],
      "content": "static reg_errcode_t\noptimize_subexps (void *extra, bin_tree_t *node)\n{\n  re_dfa_t *dfa = (re_dfa_t *) extra;\n\n  if (node->token.type == OP_BACK_REF && dfa->subexp_map)\n    {\n      int idx = node->token.opr.idx;\n      node->token.opr.idx = dfa->subexp_map[idx];\n      dfa->used_bkref_map |= 1 << node->token.opr.idx;\n    }\n\n  else if (node->token.type == SUBEXP\n\t   && node->left && node->left->token.type == SUBEXP)\n    {\n      Idx other_idx = node->left->token.opr.idx;\n\n      node->left = node->left->left;\n      if (node->left)\n\tnode->left->parent = node;\n\n      dfa->subexp_map[other_idx] = dfa->subexp_map[node->token.opr.idx];\n      if (other_idx < BITSET_WORD_BITS)\n\tdfa->used_bkref_map &= ~((bitset_word_t) 1 << other_idx);\n    }\n\n  return REG_NOERROR;\n}",
      "lines": 28,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "lower_subexps": {
      "start_point": [
        1327,
        0
      ],
      "end_point": [
        1347,
        1
      ],
      "content": "static reg_errcode_t\nlower_subexps (void *extra, bin_tree_t *node)\n{\n  regex_t *preg = (regex_t *) extra;\n  reg_errcode_t err = REG_NOERROR;\n\n  if (node->left && node->left->token.type == SUBEXP)\n    {\n      node->left = lower_subexp (&err, preg, node->left);\n      if (node->left)\n\tnode->left->parent = node;\n    }\n  if (node->right && node->right->token.type == SUBEXP)\n    {\n      node->right = lower_subexp (&err, preg, node->right);\n      if (node->right)\n\tnode->right->parent = node;\n    }\n\n  return err;\n}",
      "lines": 21,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "lower_subexp": {
      "start_point": [
        1349,
        0
      ],
      "end_point": [
        1382,
        1
      ],
      "content": "static bin_tree_t *\nlower_subexp (reg_errcode_t *err, regex_t *preg, bin_tree_t *node)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *body = node->left;\n  bin_tree_t *op, *cls, *tree1, *tree;\n\n  if (preg->no_sub\n      /* We do not optimize empty subexpressions, because otherwise we may\n\t have bad CONCAT nodes with NULL children.  This is obviously not\n\t very common, so we do not lose much.  An example that triggers\n\t this case is the sed \"script\" /\\(\\)/x.  */\n      && node->left != NULL\n      && (node->token.opr.idx >= BITSET_WORD_BITS\n\t  || !(dfa->used_bkref_map\n\t       & ((bitset_word_t) 1 << node->token.opr.idx))))\n    return node->left;\n\n  /* Convert the SUBEXP node to the concatenation of an\n     OP_OPEN_SUBEXP, the contents, and an OP_CLOSE_SUBEXP.  */\n  op = create_tree (dfa, NULL, NULL, OP_OPEN_SUBEXP);\n  cls = create_tree (dfa, NULL, NULL, OP_CLOSE_SUBEXP);\n  tree1 = body ? create_tree (dfa, body, cls, CONCAT) : cls;\n  tree = create_tree (dfa, op, tree1, CONCAT);\n  if (BE (tree == NULL || tree1 == NULL || op == NULL || cls == NULL, 0))\n    {\n      *err = REG_ESPACE;\n      return NULL;\n    }\n\n  op->token.opr.idx = cls->token.opr.idx = node->token.opr.idx;\n  op->token.opt_subexp = cls->token.opt_subexp = node->token.opt_subexp;\n  return tree;\n}",
      "lines": 34,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nlower_subexp (reg_errcode_t *err, regex_t *preg, bin_tree_t *node)",
        "*"
      ]
    },
    "calc_first": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1405,
        1
      ],
      "content": "static reg_errcode_t\ncalc_first (void *extra, bin_tree_t *node)\n{\n  re_dfa_t *dfa = (re_dfa_t *) extra;\n  if (node->token.type == CONCAT)\n    {\n      node->first = node->left->first;\n      node->node_idx = node->left->node_idx;\n    }\n  else\n    {\n      node->first = node;\n      node->node_idx = re_dfa_add_node (dfa, node->token);\n      if (BE (node->node_idx == -1, 0))\n\treturn REG_ESPACE;\n      if (node->token.type == ANCHOR)\n\tdfa->nodes[node->node_idx].constraint = node->token.opr.ctx_type;\n    }\n  return REG_NOERROR;\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "calc_next": {
      "start_point": [
        1408,
        0
      ],
      "end_point": [
        1428,
        1
      ],
      "content": "static reg_errcode_t\ncalc_next (void *extra, bin_tree_t *node)\n{\n  switch (node->token.type)\n    {\n    case OP_DUP_ASTERISK:\n      node->left->next = node;\n      break;\n    case CONCAT:\n      node->left->next = node->right->first;\n      node->right->next = node->next;\n      break;\n    default:\n      if (node->left)\n\tnode->left->next = node->next;\n      if (node->right)\n\tnode->right->next = node->next;\n      break;\n    }\n  return REG_NOERROR;\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "link_nfa_nodes": {
      "start_point": [
        1431,
        0
      ],
      "end_point": [
        1485,
        1
      ],
      "content": "static reg_errcode_t\nlink_nfa_nodes (void *extra, bin_tree_t *node)\n{\n  re_dfa_t *dfa = (re_dfa_t *) extra;\n  Idx idx = node->node_idx;\n  reg_errcode_t err = REG_NOERROR;\n\n  switch (node->token.type)\n    {\n    case CONCAT:\n      break;\n\n    case END_OF_RE:\n      assert (node->next == NULL);\n      break;\n\n    case OP_DUP_ASTERISK:\n    case OP_ALT:\n      {\n\tIdx left, right;\n\tdfa->has_plural_match = 1;\n\tif (node->left != NULL)\n\t  left = node->left->first->node_idx;\n\telse\n\t  left = node->next->node_idx;\n\tif (node->right != NULL)\n\t  right = node->right->first->node_idx;\n\telse\n\t  right = node->next->node_idx;\n\tassert (left > -1);\n\tassert (right > -1);\n\terr = re_node_set_init_2 (dfa->edests + idx, left, right);\n      }\n      break;\n\n    case ANCHOR:\n    case OP_OPEN_SUBEXP:\n    case OP_CLOSE_SUBEXP:\n      err = re_node_set_init_1 (dfa->edests + idx, node->next->node_idx);\n      break;\n\n    case OP_BACK_REF:\n      dfa->nexts[idx] = node->next->node_idx;\n      if (node->token.type == OP_BACK_REF)\n\terr = re_node_set_init_1 (dfa->edests + idx, dfa->nexts[idx]);\n      break;\n\n    default:\n      assert (!IS_EPSILON_NODE (node->token.type));\n      dfa->nexts[idx] = node->next->node_idx;\n      break;\n    }\n\n  return err;\n}",
      "lines": 55,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "duplicate_node_closure": {
      "start_point": [
        1491,
        0
      ],
      "end_point": [
        1594,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nduplicate_node_closure (re_dfa_t *dfa, Idx top_org_node, Idx top_clone_node,\n\t\t\tIdx root_node, unsigned int init_constraint)\n{\n  Idx org_node, clone_node;\n  bool ok;\n  unsigned int constraint = init_constraint;\n  for (org_node = top_org_node, clone_node = top_clone_node;;)\n    {\n      Idx org_dest, clone_dest;\n      if (dfa->nodes[org_node].type == OP_BACK_REF)\n\t{\n\t  /* If the back reference epsilon-transit, its destination must\n\t     also have the constraint.  Then duplicate the epsilon closure\n\t     of the destination of the back reference, and store it in\n\t     edests of the back reference.  */\n\t  org_dest = dfa->nexts[org_node];\n\t  re_node_set_empty (dfa->edests + clone_node);\n\t  clone_dest = duplicate_node (dfa, org_dest, constraint);\n\t  if (BE (clone_dest == -1, 0))\n\t    return REG_ESPACE;\n\t  dfa->nexts[clone_node] = dfa->nexts[org_node];\n\t  ok = re_node_set_insert (dfa->edests + clone_node, clone_dest);\n\t  if (BE (! ok, 0))\n\t    return REG_ESPACE;\n\t}\n      else if (dfa->edests[org_node].nelem == 0)\n\t{\n\t  /* In case of the node can't epsilon-transit, don't duplicate the\n\t     destination and store the original destination as the\n\t     destination of the node.  */\n\t  dfa->nexts[clone_node] = dfa->nexts[org_node];\n\t  break;\n\t}\n      else if (dfa->edests[org_node].nelem == 1)\n\t{\n\t  /* In case of the node can epsilon-transit, and it has only one\n\t     destination.  */\n\t  org_dest = dfa->edests[org_node].elems[0];\n\t  re_node_set_empty (dfa->edests + clone_node);\n\t  /* If the node is root_node itself, it means the epsilon closure\n\t     has a loop.  Then tie it to the destination of the root_node.  */\n\t  if (org_node == root_node && clone_node != org_node)\n\t    {\n\t      ok = re_node_set_insert (dfa->edests + clone_node, org_dest);\n\t      if (BE (! ok, 0))\n\t        return REG_ESPACE;\n\t      break;\n\t    }\n\t  /* In case the node has another constraint, append it.  */\n\t  constraint |= dfa->nodes[org_node].constraint;\n\t  clone_dest = duplicate_node (dfa, org_dest, constraint);\n\t  if (BE (clone_dest == -1, 0))\n\t    return REG_ESPACE;\n\t  ok = re_node_set_insert (dfa->edests + clone_node, clone_dest);\n\t  if (BE (! ok, 0))\n\t    return REG_ESPACE;\n\t}\n      else /* dfa->edests[org_node].nelem == 2 */\n\t{\n\t  /* In case of the node can epsilon-transit, and it has two\n\t     destinations. In the bin_tree_t and DFA, that's '|' and '*'.   */\n\t  org_dest = dfa->edests[org_node].elems[0];\n\t  re_node_set_empty (dfa->edests + clone_node);\n\t  /* Search for a duplicated node which satisfies the constraint.  */\n\t  clone_dest = search_duplicated_node (dfa, org_dest, constraint);\n\t  if (clone_dest == -1)\n\t    {\n\t      /* There is no such duplicated node, create a new one.  */\n\t      reg_errcode_t err;\n\t      clone_dest = duplicate_node (dfa, org_dest, constraint);\n\t      if (BE (clone_dest == -1, 0))\n\t\treturn REG_ESPACE;\n\t      ok = re_node_set_insert (dfa->edests + clone_node, clone_dest);\n\t      if (BE (! ok, 0))\n\t\treturn REG_ESPACE;\n\t      err = duplicate_node_closure (dfa, org_dest, clone_dest,\n\t\t\t\t\t    root_node, constraint);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\treturn err;\n\t    }\n\t  else\n\t    {\n\t      /* There is a duplicated node which satisfies the constraint,\n\t\t use it to avoid infinite loop.  */\n\t      ok = re_node_set_insert (dfa->edests + clone_node, clone_dest);\n\t      if (BE (! ok, 0))\n\t\treturn REG_ESPACE;\n\t    }\n\n\t  org_dest = dfa->edests[org_node].elems[1];\n\t  clone_dest = duplicate_node (dfa, org_dest, constraint);\n\t  if (BE (clone_dest == -1, 0))\n\t    return REG_ESPACE;\n\t  ok = re_node_set_insert (dfa->edests + clone_node, clone_dest);\n\t  if (BE (! ok, 0))\n\t    return REG_ESPACE;\n\t}\n      org_node = org_dest;\n      clone_node = clone_dest;\n    }\n  return REG_NOERROR;\n}",
      "lines": 104,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "search_duplicated_node": {
      "start_point": [
        1599,
        0
      ],
      "end_point": [
        1611,
        1
      ],
      "content": "static Idx\nsearch_duplicated_node (const re_dfa_t *dfa, Idx org_node,\n\t\t\tunsigned int constraint)\n{\n  Idx idx;\n  for (idx = dfa->nodes_len - 1; dfa->nodes[idx].duplicated && idx > 0; --idx)\n    {\n      if (org_node == dfa->org_indices[idx]\n\t  && constraint == dfa->nodes[idx].constraint)\n\treturn idx; /* Found.  */\n    }\n  return -1; /* Not found.  */\n}",
      "lines": 13,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "Idx"
      ]
    },
    "duplicate_node": {
      "start_point": [
        1617,
        0
      ],
      "end_point": [
        1631,
        1
      ],
      "content": "static Idx\nduplicate_node (re_dfa_t *dfa, Idx org_idx, unsigned int constraint)\n{\n  Idx dup_idx = re_dfa_add_node (dfa, dfa->nodes[org_idx]);\n  if (BE (dup_idx != -1, 1))\n    {\n      dfa->nodes[dup_idx].constraint = constraint;\n      dfa->nodes[dup_idx].constraint |= dfa->nodes[org_idx].constraint;\n      dfa->nodes[dup_idx].duplicated = 1;\n\n      /* Store the index of the original node.  */\n      dfa->org_indices[dup_idx] = org_idx;\n    }\n  return dup_idx;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "Idx"
      ]
    },
    "calc_inveclosure": {
      "start_point": [
        1633,
        0
      ],
      "end_point": [
        1653,
        1
      ],
      "content": "static reg_errcode_t\ncalc_inveclosure (re_dfa_t *dfa)\n{\n  Idx src, idx;\n  bool ok;\n  for (idx = 0; idx < dfa->nodes_len; ++idx)\n    re_node_set_init_empty (dfa->inveclosures + idx);\n\n  for (src = 0; src < dfa->nodes_len; ++src)\n    {\n      Idx *elems = dfa->eclosures[src].elems;\n      for (idx = 0; idx < dfa->eclosures[src].nelem; ++idx)\n\t{\n\t  ok = re_node_set_insert_last (dfa->inveclosures + elems[idx], src);\n\t  if (BE (! ok, 0))\n\t    return REG_ESPACE;\n\t}\n    }\n\n  return REG_NOERROR;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "calc_eclosure": {
      "start_point": [
        1657,
        0
      ],
      "end_point": [
        1698,
        1
      ],
      "content": "static reg_errcode_t\ncalc_eclosure (re_dfa_t *dfa)\n{\n  Idx node_idx;\n  bool incomplete;\n#ifdef DEBUG\n  assert (dfa->nodes_len > 0);\n#endif\n  incomplete = false;\n  /* For each nodes, calculate epsilon closure.  */\n  for (node_idx = 0; ; ++node_idx)\n    {\n      reg_errcode_t err;\n      re_node_set eclosure_elem;\n      if (node_idx == dfa->nodes_len)\n\t{\n\t  if (!incomplete)\n\t    break;\n\t  incomplete = false;\n\t  node_idx = 0;\n\t}\n\n#ifdef DEBUG\n      assert (dfa->eclosures[node_idx].nelem != -1);\n#endif\n\n      /* If we have already calculated, skip it.  */\n      if (dfa->eclosures[node_idx].nelem != 0)\n\tcontinue;\n      /* Calculate epsilon closure of 'node_idx'.  */\n      err = calc_eclosure_iter (&eclosure_elem, dfa, node_idx, true);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n\n      if (dfa->eclosures[node_idx].nelem == 0)\n\t{\n\t  incomplete = true;\n\t  re_node_set_free (&eclosure_elem);\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 42,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "calc_eclosure_iter": {
      "start_point": [
        1702,
        0
      ],
      "end_point": [
        1776,
        1
      ],
      "content": "static reg_errcode_t\ncalc_eclosure_iter (re_node_set *new_set, re_dfa_t *dfa, Idx node, bool root)\n{\n  reg_errcode_t err;\n  Idx i;\n  re_node_set eclosure;\n  bool ok;\n  bool incomplete = false;\n  err = re_node_set_alloc (&eclosure, dfa->edests[node].nelem + 1);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n\n  /* This indicates that we are calculating this node now.\n     We reference this value to avoid infinite loop.  */\n  dfa->eclosures[node].nelem = -1;\n\n  /* If the current node has constraints, duplicate all nodes\n     since they must inherit the constraints.  */\n  if (dfa->nodes[node].constraint\n      && dfa->edests[node].nelem\n      && !dfa->nodes[dfa->edests[node].elems[0]].duplicated)\n    {\n      err = duplicate_node_closure (dfa, node, node, node,\n\t\t\t\t    dfa->nodes[node].constraint);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n    }\n\n  /* Expand each epsilon destination nodes.  */\n  if (IS_EPSILON_NODE(dfa->nodes[node].type))\n    for (i = 0; i < dfa->edests[node].nelem; ++i)\n      {\n\tre_node_set eclosure_elem;\n\tIdx edest = dfa->edests[node].elems[i];\n\t/* If calculating the epsilon closure of 'edest' is in progress,\n\t   return intermediate result.  */\n\tif (dfa->eclosures[edest].nelem == -1)\n\t  {\n\t    incomplete = true;\n\t    continue;\n\t  }\n\t/* If we haven't calculated the epsilon closure of 'edest' yet,\n\t   calculate now. Otherwise use calculated epsilon closure.  */\n\tif (dfa->eclosures[edest].nelem == 0)\n\t  {\n\t    err = calc_eclosure_iter (&eclosure_elem, dfa, edest, false);\n\t    if (BE (err != REG_NOERROR, 0))\n\t      return err;\n\t  }\n\telse\n\t  eclosure_elem = dfa->eclosures[edest];\n\t/* Merge the epsilon closure of 'edest'.  */\n\terr = re_node_set_merge (&eclosure, &eclosure_elem);\n\tif (BE (err != REG_NOERROR, 0))\n\t  return err;\n\t/* If the epsilon closure of 'edest' is incomplete,\n\t   the epsilon closure of this node is also incomplete.  */\n\tif (dfa->eclosures[edest].nelem == 0)\n\t  {\n\t    incomplete = true;\n\t    re_node_set_free (&eclosure_elem);\n\t  }\n      }\n\n  /* An epsilon closure includes itself.  */\n  ok = re_node_set_insert (&eclosure, node);\n  if (BE (! ok, 0))\n    return REG_ESPACE;\n  if (incomplete && !root)\n    dfa->eclosures[node].nelem = 0;\n  else\n    dfa->eclosures[node] = eclosure;\n  *new_set = eclosure;\n  return REG_NOERROR;\n}",
      "lines": 75,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "fetch_token": {
      "start_point": [
        1783,
        0
      ],
      "end_point": [
        1788,
        1
      ],
      "content": "static void\ninternal_function\nfetch_token (re_token_t *result, re_string_t *input, reg_syntax_t syntax)\n{\n  re_string_skip_bytes (input, peek_token (result, input, syntax));\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "internal_function": {
      "start_point": [
        1793,
        0
      ],
      "end_point": [
        2027,
        1
      ],
      "content": "static int\ninternal_function\npeek_token (re_token_t *token, re_string_t *input, reg_syntax_t syntax)\n{\n  unsigned char c;\n\n  if (re_string_eoi (input))\n    {\n      token->type = END_OF_RE;\n      return 0;\n    }\n\n  c = re_string_peek_byte (input, 0);\n  token->opr.c = c;\n\n  token->word_char = 0;\n#ifdef RE_ENABLE_I18N\n  token->mb_partial = 0;\n  if (input->mb_cur_max > 1 &&\n      !re_string_first_byte (input, re_string_cur_idx (input)))\n    {\n      token->type = CHARACTER;\n      token->mb_partial = 1;\n      return 1;\n    }\n#endif\n  if (c == '\\\\')\n    {\n      unsigned char c2;\n      if (re_string_cur_idx (input) + 1 >= re_string_length (input))\n\t{\n\t  token->type = BACK_SLASH;\n\t  return 1;\n\t}\n\n      c2 = re_string_peek_byte_case (input, 1);\n      token->opr.c = c2;\n      token->type = CHARACTER;\n#ifdef RE_ENABLE_I18N\n      if (input->mb_cur_max > 1)\n\t{\n\t  wint_t wc = re_string_wchar_at (input,\n\t\t\t\t\t  re_string_cur_idx (input) + 1);\n\t  token->word_char = IS_WIDE_WORD_CHAR (wc) != 0;\n\t}\n      else\n#endif\n\ttoken->word_char = IS_WORD_CHAR (c2) != 0;\n\n      switch (c2)\n\t{\n\tcase '|':\n\t  if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_NO_BK_VBAR))\n\t    token->type = OP_ALT;\n\t  break;\n\tcase '1': case '2': case '3': case '4': case '5':\n\tcase '6': case '7': case '8': case '9':\n\t  if (!(syntax & RE_NO_BK_REFS))\n\t    {\n\t      token->type = OP_BACK_REF;\n\t      token->opr.idx = c2 - '1';\n\t    }\n\t  break;\n\tcase '<':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = WORD_FIRST;\n\t    }\n\t  break;\n\tcase '>':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = WORD_LAST;\n\t    }\n\t  break;\n\tcase 'b':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = WORD_DELIM;\n\t    }\n\t  break;\n\tcase 'B':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = NOT_WORD_DELIM;\n\t    }\n\t  break;\n\tcase 'w':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    token->type = OP_WORD;\n\t  break;\n\tcase 'W':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    token->type = OP_NOTWORD;\n\t  break;\n\tcase 's':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    token->type = OP_SPACE;\n\t  break;\n\tcase 'S':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    token->type = OP_NOTSPACE;\n\t  break;\n\tcase '`':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = BUF_FIRST;\n\t    }\n\t  break;\n\tcase '\\'':\n\t  if (!(syntax & RE_NO_GNU_OPS))\n\t    {\n\t      token->type = ANCHOR;\n\t      token->opr.ctx_type = BUF_LAST;\n\t    }\n\t  break;\n\tcase '(':\n\t  if (!(syntax & RE_NO_BK_PARENS))\n\t    token->type = OP_OPEN_SUBEXP;\n\t  break;\n\tcase ')':\n\t  if (!(syntax & RE_NO_BK_PARENS))\n\t    token->type = OP_CLOSE_SUBEXP;\n\t  break;\n\tcase '+':\n\t  if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_BK_PLUS_QM))\n\t    token->type = OP_DUP_PLUS;\n\t  break;\n\tcase '?':\n\t  if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_BK_PLUS_QM))\n\t    token->type = OP_DUP_QUESTION;\n\t  break;\n\tcase '{':\n\t  if ((syntax & RE_INTERVALS) && (!(syntax & RE_NO_BK_BRACES)))\n\t    token->type = OP_OPEN_DUP_NUM;\n\t  break;\n\tcase '}':\n\t  if ((syntax & RE_INTERVALS) && (!(syntax & RE_NO_BK_BRACES)))\n\t    token->type = OP_CLOSE_DUP_NUM;\n\t  break;\n\tdefault:\n\t  break;\n\t}\n      return 2;\n    }\n\n  token->type = CHARACTER;\n#ifdef RE_ENABLE_I18N\n  if (input->mb_cur_max > 1)\n    {\n      wint_t wc = re_string_wchar_at (input, re_string_cur_idx (input));\n      token->word_char = IS_WIDE_WORD_CHAR (wc) != 0;\n    }\n  else\n#endif\n    token->word_char = IS_WORD_CHAR (token->opr.c);\n\n  switch (c)\n    {\n    case '\\n':\n      if (syntax & RE_NEWLINE_ALT)\n\ttoken->type = OP_ALT;\n      break;\n    case '|':\n      if (!(syntax & RE_LIMITED_OPS) && (syntax & RE_NO_BK_VBAR))\n\ttoken->type = OP_ALT;\n      break;\n    case '*':\n      token->type = OP_DUP_ASTERISK;\n      break;\n    case '+':\n      if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_BK_PLUS_QM))\n\ttoken->type = OP_DUP_PLUS;\n      break;\n    case '?':\n      if (!(syntax & RE_LIMITED_OPS) && !(syntax & RE_BK_PLUS_QM))\n\ttoken->type = OP_DUP_QUESTION;\n      break;\n    case '{':\n      if ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))\n\ttoken->type = OP_OPEN_DUP_NUM;\n      break;\n    case '}':\n      if ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))\n\ttoken->type = OP_CLOSE_DUP_NUM;\n      break;\n    case '(':\n      if (syntax & RE_NO_BK_PARENS)\n\ttoken->type = OP_OPEN_SUBEXP;\n      break;\n    case ')':\n      if (syntax & RE_NO_BK_PARENS)\n\ttoken->type = OP_CLOSE_SUBEXP;\n      break;\n    case '[':\n      token->type = OP_OPEN_BRACKET;\n      break;\n    case '.':\n      token->type = OP_PERIOD;\n      break;\n    case '^':\n      if (!(syntax & (RE_CONTEXT_INDEP_ANCHORS | RE_CARET_ANCHORS_HERE)) &&\n\t  re_string_cur_idx (input) != 0)\n\t{\n\t  char prev = re_string_peek_byte (input, -1);\n\t  if (!(syntax & RE_NEWLINE_ALT) || prev != '\\n')\n\t    break;\n\t}\n      token->type = ANCHOR;\n      token->opr.ctx_type = LINE_FIRST;\n      break;\n    case '$':\n      if (!(syntax & RE_CONTEXT_INDEP_ANCHORS) &&\n\t  re_string_cur_idx (input) + 1 != re_string_length (input))\n\t{\n\t  re_token_t next;\n\t  re_string_skip_bytes (input, 1);\n\t  peek_token (&next, input, syntax);\n\t  re_string_skip_bytes (input, -1);\n\t  if (next.type != OP_ALT && next.type != OP_CLOSE_SUBEXP)\n\t    break;\n\t}\n      token->type = ANCHOR;\n      token->opr.ctx_type = LINE_LAST;\n      break;\n    default:\n      break;\n    }\n  return 1;\n}",
      "lines": 235,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "peek_token_bracket": {
      "start_point": [
        2032,
        0
      ],
      "end_point": [
        2113,
        1
      ],
      "content": "static int\ninternal_function\npeek_token_bracket (re_token_t *token, re_string_t *input, reg_syntax_t syntax)\n{\n  unsigned char c;\n  if (re_string_eoi (input))\n    {\n      token->type = END_OF_RE;\n      return 0;\n    }\n  c = re_string_peek_byte (input, 0);\n  token->opr.c = c;\n\n#ifdef RE_ENABLE_I18N\n  if (input->mb_cur_max > 1 &&\n      !re_string_first_byte (input, re_string_cur_idx (input)))\n    {\n      token->type = CHARACTER;\n      return 1;\n    }\n#endif /* RE_ENABLE_I18N */\n\n  if (c == '\\\\' && (syntax & RE_BACKSLASH_ESCAPE_IN_LISTS)\n      && re_string_cur_idx (input) + 1 < re_string_length (input))\n    {\n      /* In this case, '\\' escape a character.  */\n      unsigned char c2;\n      re_string_skip_bytes (input, 1);\n      c2 = re_string_peek_byte (input, 0);\n      token->opr.c = c2;\n      token->type = CHARACTER;\n      return 1;\n    }\n  if (c == '[') /* '[' is a special char in a bracket exps.  */\n    {\n      unsigned char c2;\n      int token_len;\n      if (re_string_cur_idx (input) + 1 < re_string_length (input))\n\tc2 = re_string_peek_byte (input, 1);\n      else\n\tc2 = 0;\n      token->opr.c = c2;\n      token_len = 2;\n      switch (c2)\n\t{\n\tcase '.':\n\t  token->type = OP_OPEN_COLL_ELEM;\n\t  break;\n\tcase '=':\n\t  token->type = OP_OPEN_EQUIV_CLASS;\n\t  break;\n\tcase ':':\n\t  if (syntax & RE_CHAR_CLASSES)\n\t    {\n\t      token->type = OP_OPEN_CHAR_CLASS;\n\t      break;\n\t    }\n\t  /* else fall through.  */\n\tdefault:\n\t  token->type = CHARACTER;\n\t  token->opr.c = c;\n\t  token_len = 1;\n\t  break;\n\t}\n      return token_len;\n    }\n  switch (c)\n    {\n    case '-':\n      token->type = OP_CHARSET_RANGE;\n      break;\n    case ']':\n      token->type = OP_CLOSE_BRACKET;\n      break;\n    case '^':\n      token->type = OP_NON_MATCH_LIST;\n      break;\n    default:\n      token->type = CHARACTER;\n    }\n  return 1;\n}",
      "lines": 82,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "parse": {
      "start_point": [
        2129,
        0
      ],
      "end_point": [
        2152,
        1
      ],
      "content": "static bin_tree_t *\nparse (re_string_t *regexp, regex_t *preg, reg_syntax_t syntax,\n       reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree, *eor, *root;\n  re_token_t current_token;\n  dfa->syntax = syntax;\n  fetch_token (&current_token, regexp, syntax | RE_CARET_ANCHORS_HERE);\n  tree = parse_reg_exp (regexp, preg, &current_token, syntax, 0, err);\n  if (BE (*err != REG_NOERROR && tree == NULL, 0))\n    return NULL;\n  eor = create_tree (dfa, NULL, NULL, END_OF_RE);\n  if (tree != NULL)\n    root = create_tree (dfa, tree, eor, CONCAT);\n  else\n    root = eor;\n  if (BE (eor == NULL || root == NULL, 0))\n    {\n      *err = REG_ESPACE;\n      return NULL;\n    }\n  return root;\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse (re_string_t *regexp, regex_t *preg, reg_syntax_t syntax,\n       reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_reg_exp": {
      "start_point": [
        2163,
        0
      ],
      "end_point": [
        2201,
        1
      ],
      "content": "static bin_tree_t *\nparse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree, *branch = NULL;\n  bitset_word_t initial_bkref_map = dfa->completed_bkref_map;\n  tree = parse_branch (regexp, preg, token, syntax, nest, err);\n  if (BE (*err != REG_NOERROR && tree == NULL, 0))\n    return NULL;\n\n  while (token->type == OP_ALT)\n    {\n      fetch_token (token, regexp, syntax | RE_CARET_ANCHORS_HERE);\n      if (token->type != OP_ALT && token->type != END_OF_RE\n\t  && (nest == 0 || token->type != OP_CLOSE_SUBEXP))\n\t{\n\t  bitset_word_t accumulated_bkref_map = dfa->completed_bkref_map;\n\t  dfa->completed_bkref_map = initial_bkref_map;\n\t  branch = parse_branch (regexp, preg, token, syntax, nest, err);\n\t  if (BE (*err != REG_NOERROR && branch == NULL, 0))\n\t    {\n\t      if (tree != NULL)\n\t\tpostorder (tree, free_tree, NULL);\n\t      return NULL;\n\t    }\n\t  dfa->completed_bkref_map |= accumulated_bkref_map;\n\t}\n      else\n\tbranch = NULL;\n      tree = create_tree (dfa, tree, branch, OP_ALT);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n    }\n  return tree;\n}",
      "lines": 39,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_reg_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_branch": {
      "start_point": [
        2212,
        0
      ],
      "end_point": [
        2249,
        1
      ],
      "content": "static bin_tree_t *\nparse_branch (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t      reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  bin_tree_t *tree, *expr;\n  re_dfa_t *dfa = preg->buffer;\n  tree = parse_expression (regexp, preg, token, syntax, nest, err);\n  if (BE (*err != REG_NOERROR && tree == NULL, 0))\n    return NULL;\n\n  while (token->type != OP_ALT && token->type != END_OF_RE\n\t && (nest == 0 || token->type != OP_CLOSE_SUBEXP))\n    {\n      expr = parse_expression (regexp, preg, token, syntax, nest, err);\n      if (BE (*err != REG_NOERROR && expr == NULL, 0))\n\t{\n\t  if (tree != NULL)\n\t    postorder (tree, free_tree, NULL);\n\t  return NULL;\n\t}\n      if (tree != NULL && expr != NULL)\n\t{\n\t  bin_tree_t *newtree = create_tree (dfa, tree, expr, CONCAT);\n\t  if (newtree == NULL)\n\t    {\n\t      postorder (expr, free_tree, NULL);\n\t      postorder (tree, free_tree, NULL);\n\t      *err = REG_ESPACE;\n\t      return NULL;\n\t    }\n\t  tree = newtree;\n\t}\n      else if (tree == NULL)\n\ttree = expr;\n      /* Otherwise expr == NULL, we don't need to create new tree.  */\n    }\n  return tree;\n}",
      "lines": 38,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_branch (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t      reg_syntax_t syntax, Idx nest, reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_expression": {
      "start_point": [
        2257,
        0
      ],
      "end_point": [
        2472,
        1
      ],
      "content": "static bin_tree_t *\nparse_expression (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t\t  reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree;\n  switch (token->type)\n    {\n    case CHARACTER:\n      tree = create_token_tree (dfa, NULL, NULL, token);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n#ifdef RE_ENABLE_I18N\n      if (dfa->mb_cur_max > 1)\n\t{\n\t  while (!re_string_eoi (regexp)\n\t\t && !re_string_first_byte (regexp, re_string_cur_idx (regexp)))\n\t    {\n\t      bin_tree_t *mbc_remain;\n\t      fetch_token (token, regexp, syntax);\n\t      mbc_remain = create_token_tree (dfa, NULL, NULL, token);\n\t      tree = create_tree (dfa, tree, mbc_remain, CONCAT);\n\t      if (BE (mbc_remain == NULL || tree == NULL, 0))\n\t\t{\n\t\t  *err = REG_ESPACE;\n\t\t  return NULL;\n\t\t}\n\t    }\n\t}\n#endif\n      break;\n    case OP_OPEN_SUBEXP:\n      tree = parse_sub_exp (regexp, preg, token, syntax, nest + 1, err);\n      if (BE (*err != REG_NOERROR && tree == NULL, 0))\n\treturn NULL;\n      break;\n    case OP_OPEN_BRACKET:\n      tree = parse_bracket_exp (regexp, dfa, token, syntax, err);\n      if (BE (*err != REG_NOERROR && tree == NULL, 0))\n\treturn NULL;\n      break;\n    case OP_BACK_REF:\n      if (!BE (dfa->completed_bkref_map & (1 << token->opr.idx), 1))\n\t{\n\t  *err = REG_ESUBREG;\n\t  return NULL;\n\t}\n      dfa->used_bkref_map |= 1 << token->opr.idx;\n      tree = create_token_tree (dfa, NULL, NULL, token);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n      ++dfa->nbackref;\n      dfa->has_mb_node = 1;\n      break;\n    case OP_OPEN_DUP_NUM:\n      if (syntax & RE_CONTEXT_INVALID_DUP)\n\t{\n\t  *err = REG_BADRPT;\n\t  return NULL;\n\t}\n      /* FALLTHROUGH */\n    case OP_DUP_ASTERISK:\n    case OP_DUP_PLUS:\n    case OP_DUP_QUESTION:\n      if (syntax & RE_CONTEXT_INVALID_OPS)\n\t{\n\t  *err = REG_BADRPT;\n\t  return NULL;\n\t}\n      else if (syntax & RE_CONTEXT_INDEP_OPS)\n\t{\n\t  fetch_token (token, regexp, syntax);\n\t  return parse_expression (regexp, preg, token, syntax, nest, err);\n\t}\n      /* else fall through  */\n    case OP_CLOSE_SUBEXP:\n      if ((token->type == OP_CLOSE_SUBEXP) &&\n\t  !(syntax & RE_UNMATCHED_RIGHT_PAREN_ORD))\n\t{\n\t  *err = REG_ERPAREN;\n\t  return NULL;\n\t}\n      /* else fall through  */\n    case OP_CLOSE_DUP_NUM:\n      /* We treat it as a normal character.  */\n\n      /* Then we can these characters as normal characters.  */\n      token->type = CHARACTER;\n      /* mb_partial and word_char bits should be initialized already\n\t by peek_token.  */\n      tree = create_token_tree (dfa, NULL, NULL, token);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n      break;\n    case ANCHOR:\n      if ((token->opr.ctx_type\n\t   & (WORD_DELIM | NOT_WORD_DELIM | WORD_FIRST | WORD_LAST))\n\t  && dfa->word_ops_used == 0)\n\tinit_word_char (dfa);\n      if (token->opr.ctx_type == WORD_DELIM\n\t  || token->opr.ctx_type == NOT_WORD_DELIM)\n\t{\n\t  bin_tree_t *tree_first, *tree_last;\n\t  if (token->opr.ctx_type == WORD_DELIM)\n\t    {\n\t      token->opr.ctx_type = WORD_FIRST;\n\t      tree_first = create_token_tree (dfa, NULL, NULL, token);\n\t      token->opr.ctx_type = WORD_LAST;\n\t    }\n\t  else\n\t    {\n\t      token->opr.ctx_type = INSIDE_WORD;\n\t      tree_first = create_token_tree (dfa, NULL, NULL, token);\n\t      token->opr.ctx_type = INSIDE_NOTWORD;\n\t    }\n\t  tree_last = create_token_tree (dfa, NULL, NULL, token);\n\t  tree = create_tree (dfa, tree_first, tree_last, OP_ALT);\n\t  if (BE (tree_first == NULL || tree_last == NULL || tree == NULL, 0))\n\t    {\n\t      *err = REG_ESPACE;\n\t      return NULL;\n\t    }\n\t}\n      else\n\t{\n\t  tree = create_token_tree (dfa, NULL, NULL, token);\n\t  if (BE (tree == NULL, 0))\n\t    {\n\t      *err = REG_ESPACE;\n\t      return NULL;\n\t    }\n\t}\n      /* We must return here, since ANCHORs can't be followed\n\t by repetition operators.\n\t eg. RE\"^*\" is invalid or \"<ANCHOR(^)><CHAR(*)>\",\n\t     it must not be \"<ANCHOR(^)><REPEAT(*)>\".  */\n      fetch_token (token, regexp, syntax);\n      return tree;\n    case OP_PERIOD:\n      tree = create_token_tree (dfa, NULL, NULL, token);\n      if (BE (tree == NULL, 0))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n      if (dfa->mb_cur_max > 1)\n\tdfa->has_mb_node = 1;\n      break;\n    case OP_WORD:\n    case OP_NOTWORD:\n      tree = build_charclass_op (dfa, regexp->trans,\n\t\t\t\t \"alnum\",\n\t\t\t\t \"_\",\n\t\t\t\t token->type == OP_NOTWORD, err);\n      if (BE (*err != REG_NOERROR && tree == NULL, 0))\n\treturn NULL;\n      break;\n    case OP_SPACE:\n    case OP_NOTSPACE:\n      tree = build_charclass_op (dfa, regexp->trans,\n\t\t\t\t \"space\",\n\t\t\t\t \"\",\n\t\t\t\t token->type == OP_NOTSPACE, err);\n      if (BE (*err != REG_NOERROR && tree == NULL, 0))\n\treturn NULL;\n      break;\n    case OP_ALT:\n    case END_OF_RE:\n      return NULL;\n    case BACK_SLASH:\n      *err = REG_EESCAPE;\n      return NULL;\n    default:\n      /* Must not happen?  */\n#ifdef DEBUG\n      assert (0);\n#endif\n      return NULL;\n    }\n  fetch_token (token, regexp, syntax);\n\n  while (token->type == OP_DUP_ASTERISK || token->type == OP_DUP_PLUS\n\t || token->type == OP_DUP_QUESTION || token->type == OP_OPEN_DUP_NUM)\n    {\n      bin_tree_t *dup_tree = parse_dup_op (tree, regexp, dfa, token,\n\t\t\t\t\t   syntax, err);\n      if (BE (*err != REG_NOERROR && dup_tree == NULL, 0))\n\t{\n\t  if (tree != NULL)\n\t    postorder (tree, free_tree, NULL);\n\t  return NULL;\n\t}\n      tree = dup_tree;\n      /* In BRE consecutive duplications are not allowed.  */\n      if ((syntax & RE_CONTEXT_INVALID_DUP)\n\t  && (token->type == OP_DUP_ASTERISK\n\t      || token->type == OP_OPEN_DUP_NUM))\n\t{\n\t  if (tree != NULL)\n\t    postorder (tree, free_tree, NULL);\n\t  *err = REG_BADRPT;\n\t  return NULL;\n\t}\n    }\n\n  return tree;\n}",
      "lines": 216,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_expression (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t\t  reg_syntax_t syntax, Idx nest, reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_sub_exp": {
      "start_point": [
        2481,
        0
      ],
      "end_point": [
        2519,
        1
      ],
      "content": "static bin_tree_t *\nparse_sub_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)\n{\n  re_dfa_t *dfa = preg->buffer;\n  bin_tree_t *tree;\n  size_t cur_nsub;\n  cur_nsub = preg->re_nsub++;\n\n  fetch_token (token, regexp, syntax | RE_CARET_ANCHORS_HERE);\n\n  /* The subexpression may be a null string.  */\n  if (token->type == OP_CLOSE_SUBEXP)\n    tree = NULL;\n  else\n    {\n      tree = parse_reg_exp (regexp, preg, token, syntax, nest, err);\n      if (BE (*err == REG_NOERROR && token->type != OP_CLOSE_SUBEXP, 0))\n\t{\n\t  if (tree != NULL)\n\t    postorder (tree, free_tree, NULL);\n\t  *err = REG_EPAREN;\n\t}\n      if (BE (*err != REG_NOERROR, 0))\n\treturn NULL;\n    }\n\n  if (cur_nsub <= '9' - '1')\n    dfa->completed_bkref_map |= 1 << cur_nsub;\n\n  tree = create_tree (dfa, tree, NULL, SUBEXP);\n  if (BE (tree == NULL, 0))\n    {\n      *err = REG_ESPACE;\n      return NULL;\n    }\n  tree->token.opr.idx = cur_nsub;\n  return tree;\n}",
      "lines": 39,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_sub_exp (re_string_t *regexp, regex_t *preg, re_token_t *token,\n\t       reg_syntax_t syntax, Idx nest, reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_dup_op": {
      "start_point": [
        2523,
        0
      ],
      "end_point": [
        2667,
        1
      ],
      "content": "static bin_tree_t *\nparse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,\n\t      re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)\n{\n  bin_tree_t *tree = NULL, *old_tree = NULL;\n  Idx i, start, end, start_idx = re_string_cur_idx (regexp);\n  re_token_t start_token = *token;\n\n  if (token->type == OP_OPEN_DUP_NUM)\n    {\n      end = 0;\n      start = fetch_number (regexp, token, syntax);\n      if (start == -1)\n\t{\n\t  if (token->type == CHARACTER && token->opr.c == ',')\n\t    start = 0; /* We treat \"{,m}\" as \"{0,m}\".  */\n\t  else\n\t    {\n\t      *err = REG_BADBR; /* <re>{} is invalid.  */\n\t      return NULL;\n\t    }\n\t}\n      if (BE (start != -2, 1))\n\t{\n\t  /* We treat \"{n}\" as \"{n,n}\".  */\n\t  end = ((token->type == OP_CLOSE_DUP_NUM) ? start\n\t\t : ((token->type == CHARACTER && token->opr.c == ',')\n\t\t    ? fetch_number (regexp, token, syntax) : -2));\n\t}\n      if (BE (start == -2 || end == -2, 0))\n\t{\n\t  /* Invalid sequence.  */\n\t  if (BE (!(syntax & RE_INVALID_INTERVAL_ORD), 0))\n\t    {\n\t      if (token->type == END_OF_RE)\n\t\t*err = REG_EBRACE;\n\t      else\n\t\t*err = REG_BADBR;\n\n\t      return NULL;\n\t    }\n\n\t  /* If the syntax bit is set, rollback.  */\n\t  re_string_set_index (regexp, start_idx);\n\t  *token = start_token;\n\t  token->type = CHARACTER;\n\t  /* mb_partial and word_char bits should be already initialized by\n\t     peek_token.  */\n\t  return elem;\n\t}\n\n      if (BE ((end != -1 && start > end)\n\t      || token->type != OP_CLOSE_DUP_NUM, 0))\n\t{\n\t  /* First number greater than second.  */\n\t  *err = REG_BADBR;\n\t  return NULL;\n\t}\n\n      if (BE (RE_DUP_MAX < (end == -1 ? start : end), 0))\n\t{\n\t  *err = REG_ESIZE;\n\t  return NULL;\n\t}\n    }\n  else\n    {\n      start = (token->type == OP_DUP_PLUS) ? 1 : 0;\n      end = (token->type == OP_DUP_QUESTION) ? 1 : -1;\n    }\n\n  fetch_token (token, regexp, syntax);\n\n  if (BE (elem == NULL, 0))\n    return NULL;\n  if (BE (start == 0 && end == 0, 0))\n    {\n      postorder (elem, free_tree, NULL);\n      return NULL;\n    }\n\n  /* Extract \"<re>{n,m}\" to \"<re><re>...<re><re>{0,<m-n>}\".  */\n  if (BE (start > 0, 0))\n    {\n      tree = elem;\n      for (i = 2; i <= start; ++i)\n\t{\n\t  elem = duplicate_tree (elem, dfa);\n\t  tree = create_tree (dfa, tree, elem, CONCAT);\n\t  if (BE (elem == NULL || tree == NULL, 0))\n\t    goto parse_dup_op_espace;\n\t}\n\n      if (start == end)\n\treturn tree;\n\n      /* Duplicate ELEM before it is marked optional.  */\n      elem = duplicate_tree (elem, dfa);\n      if (BE (elem == NULL, 0))\n        goto parse_dup_op_espace;\n      old_tree = tree;\n    }\n  else\n    old_tree = NULL;\n\n  if (elem->token.type == SUBEXP)\n    {\n      uintptr_t subidx = elem->token.opr.idx;\n      postorder (elem, mark_opt_subexp, (void *) subidx);\n    }\n\n  tree = create_tree (dfa, elem, NULL,\n\t\t      (end == -1 ? OP_DUP_ASTERISK : OP_ALT));\n  if (BE (tree == NULL, 0))\n    goto parse_dup_op_espace;\n\n/* From gnulib's \"intprops.h\":\n   True if the arithmetic type T is signed.  */\n#define TYPE_SIGNED(t) (! ((t) 0 < (t) -1))\n\n  /* This loop is actually executed only when end != -1,\n     to rewrite <re>{0,n} as (<re>(<re>...<re>?)?)?...  We have\n     already created the start+1-th copy.  */\n  if (TYPE_SIGNED (Idx) || end != -1)\n    for (i = start + 2; i <= end; ++i)\n      {\n\telem = duplicate_tree (elem, dfa);\n\ttree = create_tree (dfa, tree, elem, CONCAT);\n\tif (BE (elem == NULL || tree == NULL, 0))\n\t  goto parse_dup_op_espace;\n\n\ttree = create_tree (dfa, tree, NULL, OP_ALT);\n\tif (BE (tree == NULL, 0))\n\t  goto parse_dup_op_espace;\n      }\n\n  if (old_tree)\n    tree = create_tree (dfa, old_tree, tree, CONCAT);\n\n  return tree;\n\n parse_dup_op_espace:\n  *err = REG_ESPACE;\n  return NULL;\n}",
      "lines": 145,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,\n\t      re_token_t *token, reg_syntax_t syntax, reg_errcode_t *err)",
        "*"
      ]
    },
    "parse_byte": {
      "start_point": [
        2679,
        0
      ],
      "end_point": [
        2684,
        1
      ],
      "content": "static wint_t\nparse_byte (unsigned char b, re_charset_t *mbcset)\n{\n  wint_t wc = __btowc (b);\n  return wc == WEOF && !mbcset ? b : wc;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "wint_t"
      ]
    },
    "start_elem": {
      "start_point": [
        2707,
        23
      ],
      "end_point": [
        2810,
        1
      ],
      "content": "bracket_elem_t *end_elem)\n# endif /* not RE_ENABLE_I18N */\n{\n  unsigned int start_ch, end_ch;\n  /* Equivalence Classes and Character Classes can't be a range start/end.  */\n  if (BE (start_elem->type == EQUIV_CLASS || start_elem->type == CHAR_CLASS\n\t  || end_elem->type == EQUIV_CLASS || end_elem->type == CHAR_CLASS,\n\t  0))\n    return REG_ERANGE;\n\n  /* We can handle no multi character collating elements without libc\n     support.  */\n  if (BE ((start_elem->type == COLL_SYM\n\t   && strlen ((char *) start_elem->opr.name) > 1)\n\t  || (end_elem->type == COLL_SYM\n\t      && strlen ((char *) end_elem->opr.name) > 1), 0))\n    return REG_ECOLLATE;\n\n# ifdef RE_ENABLE_I18N\n  {\n    wchar_t wc;\n    wint_t start_wc;\n    wint_t end_wc;\n\n    start_ch = ((start_elem->type == SB_CHAR) ? start_elem->opr.ch\n\t\t: ((start_elem->type == COLL_SYM) ? start_elem->opr.name[0]\n\t\t   : 0));\n    end_ch = ((end_elem->type == SB_CHAR) ? end_elem->opr.ch\n\t      : ((end_elem->type == COLL_SYM) ? end_elem->opr.name[0]\n\t\t : 0));\n    start_wc = ((start_elem->type == SB_CHAR || start_elem->type == COLL_SYM)\n\t\t? parse_byte (start_ch, mbcset) : start_elem->opr.wch);\n    end_wc = ((end_elem->type == SB_CHAR || end_elem->type == COLL_SYM)\n\t      ? parse_byte (end_ch, mbcset) : end_elem->opr.wch);\n    if (start_wc == WEOF || end_wc == WEOF)\n      return REG_ECOLLATE;\n    else if (BE ((syntax & RE_NO_EMPTY_RANGES) && start_wc > end_wc, 0))\n      return REG_ERANGE;\n\n    /* Got valid collation sequence values, add them as a new entry.\n       However, for !_LIBC we have no collation elements: if the\n       character set is single byte, the single byte character set\n       that we build below suffices.  parse_bracket_exp passes\n       no MBCSET if dfa->mb_cur_max == 1.  */\n    if (mbcset)\n      {\n\t/* Check the space of the arrays.  */\n\tif (BE (*range_alloc == mbcset->nranges, 0))\n\t  {\n\t    /* There is not enough space, need realloc.  */\n\t    wchar_t *new_array_start, *new_array_end;\n\t    Idx new_nranges;\n\n\t    /* +1 in case of mbcset->nranges is 0.  */\n\t    new_nranges = 2 * mbcset->nranges + 1;\n\t    /* Use realloc since mbcset->range_starts and mbcset->range_ends\n\t       are NULL if *range_alloc == 0.  */\n\t    new_array_start = re_realloc (mbcset->range_starts, wchar_t,\n\t\t\t\t\t  new_nranges);\n\t    new_array_end = re_realloc (mbcset->range_ends, wchar_t,\n\t\t\t\t\tnew_nranges);\n\n\t    if (BE (new_array_start == NULL || new_array_end == NULL, 0))\n\t      {\n\t\tre_free (new_array_start);\n\t\tre_free (new_array_end);\n\t\treturn REG_ESPACE;\n\t      }\n\n\t    mbcset->range_starts = new_array_start;\n\t    mbcset->range_ends = new_array_end;\n\t    *range_alloc = new_nranges;\n\t  }\n\n\tmbcset->range_starts[mbcset->nranges] = start_wc;\n\tmbcset->range_ends[mbcset->nranges++] = end_wc;\n      }\n\n    /* Build the table for single byte characters.  */\n    for (wc = 0; wc < SBC_MAX; ++wc)\n      {\n\tif (start_wc <= wc && wc <= end_wc)\n\t  bitset_set (sbcset, wc);\n      }\n  }\n# else /* not RE_ENABLE_I18N */\n  {\n    unsigned int ch;\n    start_ch = ((start_elem->type == SB_CHAR ) ? start_elem->opr.ch\n\t\t: ((start_elem->type == COLL_SYM) ? start_elem->opr.name[0]\n\t\t   : 0));\n    end_ch = ((end_elem->type == SB_CHAR ) ? end_elem->opr.ch\n\t      : ((end_elem->type == COLL_SYM) ? end_elem->opr.name[0]\n\t\t : 0));\n    if (start_ch > end_ch)\n      return REG_ERANGE;\n    /* Build the table for single byte characters.  */\n    for (ch = 0; ch < SBC_MAX; ++ch)\n      if (start_ch <= ch  && ch <= end_ch)\n\tbitset_set (sbcset, ch);\n  }\n# endif /* not RE_ENABLE_I18N */\n  return REG_NOERROR;\n}",
      "lines": 104,
      "depth": 16,
      "decorators": null
    },
    "parse_bracket_exp": {
      "start_point": [
        2843,
        0
      ],
      "end_point": [
        3388,
        1
      ],
      "content": "static bin_tree_t *\nparse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa, re_token_t *token,\n\t\t   reg_syntax_t syntax, reg_errcode_t *err)\n{\n#ifdef _LIBC\n  const unsigned char *collseqmb;\n  const char *collseqwc;\n  uint32_t nrules;\n  int32_t table_size;\n  const int32_t *symb_table;\n  const unsigned char *extra;\n\n  /* Local function for parse_bracket_exp used in _LIBC environment.\n     Seek the collating symbol entry corresponding to NAME.\n     Return the index of the symbol in the SYMB_TABLE,\n     or -1 if not found.  */\n\n  auto inline int32_t\n  __attribute__ ((always_inline))\n  seek_collating_symbol_entry (const unsigned char *name, size_t name_len)\n    {\n      int32_t elem;\n\n      for (elem = 0; elem < table_size; elem++)\n\tif (symb_table[2 * elem] != 0)\n\t  {\n\t    int32_t idx = symb_table[2 * elem + 1];\n\t    /* Skip the name of collating element name.  */\n\t    idx += 1 + extra[idx];\n\t    if (/* Compare the length of the name.  */\n\t\tname_len == extra[idx]\n\t\t/* Compare the name.  */\n\t\t&& memcmp (name, &extra[idx + 1], name_len) == 0)\n\t      /* Yep, this is the entry.  */\n\t      return elem;\n\t  }\n      return -1;\n    }\n\n  /* Local function for parse_bracket_exp used in _LIBC environment.\n     Look up the collation sequence value of BR_ELEM.\n     Return the value if succeeded, UINT_MAX otherwise.  */\n\n  auto inline unsigned int\n  __attribute__ ((always_inline))\n  lookup_collation_sequence_value (bracket_elem_t *br_elem)\n    {\n      if (br_elem->type == SB_CHAR)\n\t{\n\t  /*\n\t  if (MB_CUR_MAX == 1)\n\t  */\n\t  if (nrules == 0)\n\t    return collseqmb[br_elem->opr.ch];\n\t  else\n\t    {\n\t      wint_t wc = __btowc (br_elem->opr.ch);\n\t      return __collseq_table_lookup (collseqwc, wc);\n\t    }\n\t}\n      else if (br_elem->type == MB_CHAR)\n\t{\n\t  if (nrules != 0)\n\t    return __collseq_table_lookup (collseqwc, br_elem->opr.wch);\n\t}\n      else if (br_elem->type == COLL_SYM)\n\t{\n\t  size_t sym_name_len = strlen ((char *) br_elem->opr.name);\n\t  if (nrules != 0)\n\t    {\n\t      int32_t elem, idx;\n\t      elem = seek_collating_symbol_entry (br_elem->opr.name,\n\t\t\t\t\t\t  sym_name_len);\n\t      if (elem != -1)\n\t\t{\n\t\t  /* We found the entry.  */\n\t\t  idx = symb_table[2 * elem + 1];\n\t\t  /* Skip the name of collating element name.  */\n\t\t  idx += 1 + extra[idx];\n\t\t  /* Skip the byte sequence of the collating element.  */\n\t\t  idx += 1 + extra[idx];\n\t\t  /* Adjust for the alignment.  */\n\t\t  idx = (idx + 3) & ~3;\n\t\t  /* Skip the multibyte collation sequence value.  */\n\t\t  idx += sizeof (unsigned int);\n\t\t  /* Skip the wide char sequence of the collating element.  */\n\t\t  idx += sizeof (unsigned int) *\n\t\t    (1 + *(unsigned int *) (extra + idx));\n\t\t  /* Return the collation sequence value.  */\n\t\t  return *(unsigned int *) (extra + idx);\n\t\t}\n\t      else if (sym_name_len == 1)\n\t\t{\n\t\t  /* No valid character.  Match it as a single byte\n\t\t     character.  */\n\t\t  return collseqmb[br_elem->opr.name[0]];\n\t\t}\n\t    }\n\t  else if (sym_name_len == 1)\n\t    return collseqmb[br_elem->opr.name[0]];\n\t}\n      return UINT_MAX;\n    }\n\n  /* Local function for parse_bracket_exp used in _LIBC environment.\n     Build the range expression which starts from START_ELEM, and ends\n     at END_ELEM.  The result are written to MBCSET and SBCSET.\n     RANGE_ALLOC is the allocated size of mbcset->range_starts, and\n     mbcset->range_ends, is a pointer argument since we may\n     update it.  */\n\n  auto inline reg_errcode_t\n  __attribute__ ((always_inline))\n  build_range_exp (bitset_t sbcset, re_charset_t *mbcset, int *range_alloc,\n\t\t   bracket_elem_t *start_elem, bracket_elem_t *end_elem)\n    {\n      unsigned int ch;\n      uint32_t start_collseq;\n      uint32_t end_collseq;\n\n      /* Equivalence Classes and Character Classes can't be a range\n\t start/end.  */\n      if (BE (start_elem->type == EQUIV_CLASS || start_elem->type == CHAR_CLASS\n\t      || end_elem->type == EQUIV_CLASS || end_elem->type == CHAR_CLASS,\n\t      0))\n\treturn REG_ERANGE;\n\n      /* FIXME: Implement rational ranges here, too.  */\n      start_collseq = lookup_collation_sequence_value (start_elem);\n      end_collseq = lookup_collation_sequence_value (end_elem);\n      /* Check start/end collation sequence values.  */\n      if (BE (start_collseq == UINT_MAX || end_collseq == UINT_MAX, 0))\n\treturn REG_ECOLLATE;\n      if (BE ((syntax & RE_NO_EMPTY_RANGES) && start_collseq > end_collseq, 0))\n\treturn REG_ERANGE;\n\n      /* Got valid collation sequence values, add them as a new entry.\n\t However, if we have no collation elements, and the character set\n\t is single byte, the single byte character set that we\n\t build below suffices. */\n      if (nrules > 0 || dfa->mb_cur_max > 1)\n\t{\n\t  /* Check the space of the arrays.  */\n\t  if (BE (*range_alloc == mbcset->nranges, 0))\n\t    {\n\t      /* There is not enough space, need realloc.  */\n\t      uint32_t *new_array_start;\n\t      uint32_t *new_array_end;\n\t      Idx new_nranges;\n\n\t      /* +1 in case of mbcset->nranges is 0.  */\n\t      new_nranges = 2 * mbcset->nranges + 1;\n\t      new_array_start = re_realloc (mbcset->range_starts, uint32_t,\n\t\t\t\t\t    new_nranges);\n\t      new_array_end = re_realloc (mbcset->range_ends, uint32_t,\n\t\t\t\t\t  new_nranges);\n\n\t      if (BE (new_array_start == NULL || new_array_end == NULL, 0))\n\t\treturn REG_ESPACE;\n\n\t      mbcset->range_starts = new_array_start;\n\t      mbcset->range_ends = new_array_end;\n\t      *range_alloc = new_nranges;\n\t    }\n\n\t  mbcset->range_starts[mbcset->nranges] = start_collseq;\n\t  mbcset->range_ends[mbcset->nranges++] = end_collseq;\n\t}\n\n      /* Build the table for single byte characters.  */\n      for (ch = 0; ch < SBC_MAX; ch++)\n\t{\n\t  uint32_t ch_collseq;\n\t  /*\n\t  if (MB_CUR_MAX == 1)\n\t  */\n\t  if (nrules == 0)\n\t    ch_collseq = collseqmb[ch];\n\t  else\n\t    ch_collseq = __collseq_table_lookup (collseqwc, __btowc (ch));\n\t  if (start_collseq <= ch_collseq && ch_collseq <= end_collseq)\n\t    bitset_set (sbcset, ch);\n\t}\n      return REG_NOERROR;\n    }\n\n  /* Local function for parse_bracket_exp used in _LIBC environment.\n     Build the collating element which is represented by NAME.\n     The result are written to MBCSET and SBCSET.\n     COLL_SYM_ALLOC is the allocated size of mbcset->coll_sym, is a\n     pointer argument since we may update it.  */\n\n  auto inline reg_errcode_t\n  __attribute__ ((always_inline))\n  build_collating_symbol (bitset_t sbcset, re_charset_t *mbcset,\n\t\t\t  Idx *coll_sym_alloc, const unsigned char *name)\n    {\n      int32_t elem, idx;\n      size_t name_len = strlen ((const char *) name);\n      if (nrules != 0)\n\t{\n\t  elem = seek_collating_symbol_entry (name, name_len);\n\t  if (elem != -1)\n\t    {\n\t      /* We found the entry.  */\n\t      idx = symb_table[2 * elem + 1];\n\t      /* Skip the name of collating element name.  */\n\t      idx += 1 + extra[idx];\n\t    }\n\t  else if (name_len == 1)\n\t    {\n\t      /* No valid character, treat it as a normal\n\t\t character.  */\n\t      bitset_set (sbcset, name[0]);\n\t      return REG_NOERROR;\n\t    }\n\t  else\n\t    return REG_ECOLLATE;\n\n\t  /* Got valid collation sequence, add it as a new entry.  */\n\t  /* Check the space of the arrays.  */\n\t  if (BE (*coll_sym_alloc == mbcset->ncoll_syms, 0))\n\t    {\n\t      /* Not enough, realloc it.  */\n\t      /* +1 in case of mbcset->ncoll_syms is 0.  */\n\t      Idx new_coll_sym_alloc = 2 * mbcset->ncoll_syms + 1;\n\t      /* Use realloc since mbcset->coll_syms is NULL\n\t\t if *alloc == 0.  */\n\t      int32_t *new_coll_syms = re_realloc (mbcset->coll_syms, int32_t,\n\t\t\t\t\t\t   new_coll_sym_alloc);\n\t      if (BE (new_coll_syms == NULL, 0))\n\t\treturn REG_ESPACE;\n\t      mbcset->coll_syms = new_coll_syms;\n\t      *coll_sym_alloc = new_coll_sym_alloc;\n\t    }\n\t  mbcset->coll_syms[mbcset->ncoll_syms++] = idx;\n\t  return REG_NOERROR;\n\t}\n      else\n\t{\n\t  if (BE (name_len != 1, 0))\n\t    return REG_ECOLLATE;\n\t  else\n\t    {\n\t      bitset_set (sbcset, name[0]);\n\t      return REG_NOERROR;\n\t    }\n\t}\n    }\n#endif\n\n  re_token_t br_token;\n  re_bitset_ptr_t sbcset;\n#ifdef RE_ENABLE_I18N\n  re_charset_t *mbcset;\n  Idx coll_sym_alloc = 0, range_alloc = 0, mbchar_alloc = 0;\n  Idx equiv_class_alloc = 0, char_class_alloc = 0;\n#endif /* not RE_ENABLE_I18N */\n  bool non_match = false;\n  bin_tree_t *work_tree;\n  int token_len;\n  bool first_round = true;\n#ifdef _LIBC\n  collseqmb = (const unsigned char *)\n    _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQMB);\n  nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n  if (nrules)\n    {\n      /*\n      if (MB_CUR_MAX > 1)\n      */\n      collseqwc = _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQWC);\n      table_size = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_SYMB_HASH_SIZEMB);\n      symb_table = (const int32_t *) _NL_CURRENT (LC_COLLATE,\n\t\t\t\t\t\t  _NL_COLLATE_SYMB_TABLEMB);\n      extra = (const unsigned char *) _NL_CURRENT (LC_COLLATE,\n\t\t\t\t\t\t   _NL_COLLATE_SYMB_EXTRAMB);\n    }\n#endif\n  sbcset = (re_bitset_ptr_t) calloc (sizeof (bitset_t), 1);\n#ifdef RE_ENABLE_I18N\n  mbcset = (re_charset_t *) calloc (sizeof (re_charset_t), 1);\n#endif /* RE_ENABLE_I18N */\n#ifdef RE_ENABLE_I18N\n  if (BE (sbcset == NULL || mbcset == NULL, 0))\n#else\n  if (BE (sbcset == NULL, 0))\n#endif /* RE_ENABLE_I18N */\n    {\n      re_free (sbcset);\n#ifdef RE_ENABLE_I18N\n      re_free (mbcset);\n#endif\n      *err = REG_ESPACE;\n      return NULL;\n    }\n\n  token_len = peek_token_bracket (token, regexp, syntax);\n  if (BE (token->type == END_OF_RE, 0))\n    {\n      *err = REG_BADPAT;\n      goto parse_bracket_exp_free_return;\n    }\n  if (token->type == OP_NON_MATCH_LIST)\n    {\n#ifdef RE_ENABLE_I18N\n      mbcset->non_match = 1;\n#endif /* not RE_ENABLE_I18N */\n      non_match = true;\n      if (syntax & RE_HAT_LISTS_NOT_NEWLINE)\n\tbitset_set (sbcset, '\\n');\n      re_string_skip_bytes (regexp, token_len); /* Skip a token.  */\n      token_len = peek_token_bracket (token, regexp, syntax);\n      if (BE (token->type == END_OF_RE, 0))\n\t{\n\t  *err = REG_BADPAT;\n\t  goto parse_bracket_exp_free_return;\n\t}\n    }\n\n  /* We treat the first ']' as a normal character.  */\n  if (token->type == OP_CLOSE_BRACKET)\n    token->type = CHARACTER;\n\n  while (1)\n    {\n      bracket_elem_t start_elem, end_elem;\n      unsigned char start_name_buf[BRACKET_NAME_BUF_SIZE];\n      unsigned char end_name_buf[BRACKET_NAME_BUF_SIZE];\n      reg_errcode_t ret;\n      int token_len2 = 0;\n      bool is_range_exp = false;\n      re_token_t token2;\n\n      start_elem.opr.name = start_name_buf;\n      start_elem.type = COLL_SYM;\n      ret = parse_bracket_element (&start_elem, regexp, token, token_len, dfa,\n\t\t\t\t   syntax, first_round);\n      if (BE (ret != REG_NOERROR, 0))\n\t{\n\t  *err = ret;\n\t  goto parse_bracket_exp_free_return;\n\t}\n      first_round = false;\n\n      /* Get information about the next token.  We need it in any case.  */\n      token_len = peek_token_bracket (token, regexp, syntax);\n\n      /* Do not check for ranges if we know they are not allowed.  */\n      if (start_elem.type != CHAR_CLASS && start_elem.type != EQUIV_CLASS)\n\t{\n\t  if (BE (token->type == END_OF_RE, 0))\n\t    {\n\t      *err = REG_EBRACK;\n\t      goto parse_bracket_exp_free_return;\n\t    }\n\t  if (token->type == OP_CHARSET_RANGE)\n\t    {\n\t      re_string_skip_bytes (regexp, token_len); /* Skip '-'.  */\n\t      token_len2 = peek_token_bracket (&token2, regexp, syntax);\n\t      if (BE (token2.type == END_OF_RE, 0))\n\t\t{\n\t\t  *err = REG_EBRACK;\n\t\t  goto parse_bracket_exp_free_return;\n\t\t}\n\t      if (token2.type == OP_CLOSE_BRACKET)\n\t\t{\n\t\t  /* We treat the last '-' as a normal character.  */\n\t\t  re_string_skip_bytes (regexp, -token_len);\n\t\t  token->type = CHARACTER;\n\t\t}\n\t      else\n\t\tis_range_exp = true;\n\t    }\n\t}\n\n      if (is_range_exp == true)\n\t{\n\t  end_elem.opr.name = end_name_buf;\n\t  end_elem.type = COLL_SYM;\n\t  ret = parse_bracket_element (&end_elem, regexp, &token2, token_len2,\n\t\t\t\t       dfa, syntax, true);\n\t  if (BE (ret != REG_NOERROR, 0))\n\t    {\n\t      *err = ret;\n\t      goto parse_bracket_exp_free_return;\n\t    }\n\n\t  token_len = peek_token_bracket (token, regexp, syntax);\n\n#ifdef _LIBC\n\t  *err = build_range_exp (sbcset, mbcset, &range_alloc,\n\t\t\t\t  &start_elem, &end_elem);\n#else\n# ifdef RE_ENABLE_I18N\n\t  *err = build_range_exp (syntax, sbcset,\n\t\t\t\t  dfa->mb_cur_max > 1 ? mbcset : NULL,\n\t\t\t\t  &range_alloc, &start_elem, &end_elem);\n# else\n\t  *err = build_range_exp (syntax, sbcset, &start_elem, &end_elem);\n# endif\n#endif /* RE_ENABLE_I18N */\n\t  if (BE (*err != REG_NOERROR, 0))\n\t    goto parse_bracket_exp_free_return;\n\t}\n      else\n\t{\n\t  switch (start_elem.type)\n\t    {\n\t    case SB_CHAR:\n\t      bitset_set (sbcset, start_elem.opr.ch);\n\t      break;\n#ifdef RE_ENABLE_I18N\n\t    case MB_CHAR:\n\t      /* Check whether the array has enough space.  */\n\t      if (BE (mbchar_alloc == mbcset->nmbchars, 0))\n\t\t{\n\t\t  wchar_t *new_mbchars;\n\t\t  /* Not enough, realloc it.  */\n\t\t  /* +1 in case of mbcset->nmbchars is 0.  */\n\t\t  mbchar_alloc = 2 * mbcset->nmbchars + 1;\n\t\t  /* Use realloc since array is NULL if *alloc == 0.  */\n\t\t  new_mbchars = re_realloc (mbcset->mbchars, wchar_t,\n\t\t\t\t\t    mbchar_alloc);\n\t\t  if (BE (new_mbchars == NULL, 0))\n\t\t    goto parse_bracket_exp_espace;\n\t\t  mbcset->mbchars = new_mbchars;\n\t\t}\n\t      mbcset->mbchars[mbcset->nmbchars++] = start_elem.opr.wch;\n\t      break;\n#endif /* RE_ENABLE_I18N */\n\t    case EQUIV_CLASS:\n\t      *err = build_equiv_class (sbcset,\n#ifdef RE_ENABLE_I18N\n\t\t\t\t\tmbcset, &equiv_class_alloc,\n#endif /* RE_ENABLE_I18N */\n\t\t\t\t\tstart_elem.opr.name);\n\t      if (BE (*err != REG_NOERROR, 0))\n\t\tgoto parse_bracket_exp_free_return;\n\t      break;\n\t    case COLL_SYM:\n\t      *err = build_collating_symbol (sbcset,\n#ifdef RE_ENABLE_I18N\n\t\t\t\t\t     mbcset, &coll_sym_alloc,\n#endif /* RE_ENABLE_I18N */\n\t\t\t\t\t     start_elem.opr.name);\n\t      if (BE (*err != REG_NOERROR, 0))\n\t\tgoto parse_bracket_exp_free_return;\n\t      break;\n\t    case CHAR_CLASS:\n\t      *err = build_charclass (regexp->trans, sbcset,\n#ifdef RE_ENABLE_I18N\n\t\t\t\t      mbcset, &char_class_alloc,\n#endif /* RE_ENABLE_I18N */\n\t\t\t\t      (const char *) start_elem.opr.name,\n\t\t\t\t      syntax);\n\t      if (BE (*err != REG_NOERROR, 0))\n\t       goto parse_bracket_exp_free_return;\n\t      break;\n\t    default:\n\t      assert (0);\n\t      break;\n\t    }\n\t}\n      if (BE (token->type == END_OF_RE, 0))\n\t{\n\t  *err = REG_EBRACK;\n\t  goto parse_bracket_exp_free_return;\n\t}\n      if (token->type == OP_CLOSE_BRACKET)\n\tbreak;\n    }\n\n  re_string_skip_bytes (regexp, token_len); /* Skip a token.  */\n\n  /* If it is non-matching list.  */\n  if (non_match)\n    bitset_not (sbcset);\n\n#ifdef RE_ENABLE_I18N\n  /* Ensure only single byte characters are set.  */\n  if (dfa->mb_cur_max > 1)\n    bitset_mask (sbcset, dfa->sb_char);\n\n  if (mbcset->nmbchars || mbcset->ncoll_syms || mbcset->nequiv_classes\n      || mbcset->nranges || (dfa->mb_cur_max > 1 && (mbcset->nchar_classes\n\t\t\t\t\t\t     || mbcset->non_match)))\n    {\n      bin_tree_t *mbc_tree;\n      int sbc_idx;\n      /* Build a tree for complex bracket.  */\n      dfa->has_mb_node = 1;\n      br_token.type = COMPLEX_BRACKET;\n      br_token.opr.mbcset = mbcset;\n      mbc_tree = create_token_tree (dfa, NULL, NULL, &br_token);\n      if (BE (mbc_tree == NULL, 0))\n\tgoto parse_bracket_exp_espace;\n      for (sbc_idx = 0; sbc_idx < BITSET_WORDS; ++sbc_idx)\n\tif (sbcset[sbc_idx])\n\t  break;\n      /* If there are no bits set in sbcset, there is no point\n\t of having both SIMPLE_BRACKET and COMPLEX_BRACKET.  */\n      if (sbc_idx < BITSET_WORDS)\n\t{\n\t  /* Build a tree for simple bracket.  */\n\t  br_token.type = SIMPLE_BRACKET;\n\t  br_token.opr.sbcset = sbcset;\n\t  work_tree = create_token_tree (dfa, NULL, NULL, &br_token);\n\t  if (BE (work_tree == NULL, 0))\n\t    goto parse_bracket_exp_espace;\n\n\t  /* Then join them by ALT node.  */\n\t  work_tree = create_tree (dfa, work_tree, mbc_tree, OP_ALT);\n\t  if (BE (work_tree == NULL, 0))\n\t    goto parse_bracket_exp_espace;\n\t}\n      else\n\t{\n\t  re_free (sbcset);\n\t  work_tree = mbc_tree;\n\t}\n    }\n  else\n#endif /* not RE_ENABLE_I18N */\n    {\n#ifdef RE_ENABLE_I18N\n      free_charset (mbcset);\n#endif\n      /* Build a tree for simple bracket.  */\n      br_token.type = SIMPLE_BRACKET;\n      br_token.opr.sbcset = sbcset;\n      work_tree = create_token_tree (dfa, NULL, NULL, &br_token);\n      if (BE (work_tree == NULL, 0))\n\tgoto parse_bracket_exp_espace;\n    }\n  return work_tree;\n\n parse_bracket_exp_espace:\n  *err = REG_ESPACE;\n parse_bracket_exp_free_return:\n  re_free (sbcset);\n#ifdef RE_ENABLE_I18N\n  free_charset (mbcset);\n#endif /* RE_ENABLE_I18N */\n  return NULL;\n}",
      "lines": 546,
      "depth": 25,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nparse_bracket_exp (re_string_t *regexp, re_dfa_t *dfa, re_token_t *token,\n\t\t   reg_syntax_t syntax, reg_errcode_t *err)",
        "*"
      ]
    },
    "seek_collating_symbol_entry": {
      "start_point": [
        2860,
        2
      ],
      "end_point": [
        2880,
        5
      ],
      "content": "auto inline int32_t\n  __attribute__ ((always_inline))\n  seek_collating_symbol_entry (const unsigned char *name, size_t name_len)\n    {\n      int32_t elem;\n\n      for (elem = 0; elem < table_size; elem++)\n\tif (symb_table[2 * elem] != 0)\n\t  {\n\t    int32_t idx = symb_table[2 * elem + 1];\n\t    /* Skip the name of collating element name.  */\n\t    idx += 1 + extra[idx];\n\t    if (/* Compare the length of the name.  */\n\t\tname_len == extra[idx]\n\t\t/* Compare the name.  */\n\t\t&& memcmp (name, &extra[idx + 1], name_len) == 0)\n\t      /* Yep, this is the entry.  */\n\t      return elem;\n\t  }\n      return -1;\n    }",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "auto",
        "auto",
        "inline",
        "inline",
        "int32_t",
        "__attribute__ ((always_inline))",
        "__attribute__",
        "(",
        "(always_inline)",
        "(",
        "always_inline",
        ")",
        ")"
      ]
    },
    "lookup_collation_sequence_value": {
      "start_point": [
        2886,
        2
      ],
      "end_point": [
        2945,
        5
      ],
      "content": "auto inline unsigned int\n  __attribute__ ((always_inline))\n  lookup_collation_sequence_value (bracket_elem_t *br_elem)\n    {\n      if (br_elem->type == SB_CHAR)\n\t{\n\t  /*\n\t  if (MB_CUR_MAX == 1)\n\t  */\n\t  if (nrules == 0)\n\t    return collseqmb[br_elem->opr.ch];\n\t  else\n\t    {\n\t      wint_t wc = __btowc (br_elem->opr.ch);\n\t      return __collseq_table_lookup (collseqwc, wc);\n\t    }\n\t}\n      else if (br_elem->type == MB_CHAR)\n\t{\n\t  if (nrules != 0)\n\t    return __collseq_table_lookup (collseqwc, br_elem->opr.wch);\n\t}\n      else if (br_elem->type == COLL_SYM)\n\t{\n\t  size_t sym_name_len = strlen ((char *) br_elem->opr.name);\n\t  if (nrules != 0)\n\t    {\n\t      int32_t elem, idx;\n\t      elem = seek_collating_symbol_entry (br_elem->opr.name,\n\t\t\t\t\t\t  sym_name_len);\n\t      if (elem != -1)\n\t\t{\n\t\t  /* We found the entry.  */\n\t\t  idx = symb_table[2 * elem + 1];\n\t\t  /* Skip the name of collating element name.  */\n\t\t  idx += 1 + extra[idx];\n\t\t  /* Skip the byte sequence of the collating element.  */\n\t\t  idx += 1 + extra[idx];\n\t\t  /* Adjust for the alignment.  */\n\t\t  idx = (idx + 3) & ~3;\n\t\t  /* Skip the multibyte collation sequence value.  */\n\t\t  idx += sizeof (unsigned int);\n\t\t  /* Skip the wide char sequence of the collating element.  */\n\t\t  idx += sizeof (unsigned int) *\n\t\t    (1 + *(unsigned int *) (extra + idx));\n\t\t  /* Return the collation sequence value.  */\n\t\t  return *(unsigned int *) (extra + idx);\n\t\t}\n\t      else if (sym_name_len == 1)\n\t\t{\n\t\t  /* No valid character.  Match it as a single byte\n\t\t     character.  */\n\t\t  return collseqmb[br_elem->opr.name[0]];\n\t\t}\n\t    }\n\t  else if (sym_name_len == 1)\n\t    return collseqmb[br_elem->opr.name[0]];\n\t}\n      return UINT_MAX;\n    }",
      "lines": 60,
      "depth": 22,
      "decorators": [
        "auto",
        "auto",
        "inline",
        "inline",
        "unsigned int",
        "unsigned",
        "int",
        "__attribute__ ((always_inline))",
        "__attribute__",
        "(",
        "(always_inline)",
        "(",
        "always_inline",
        ")",
        ")"
      ]
    },
    "build_range_exp": {
      "start_point": [
        2954,
        2
      ],
      "end_point": [
        3027,
        5
      ],
      "content": "auto inline reg_errcode_t\n  __attribute__ ((always_inline))\n  build_range_exp (bitset_t sbcset, re_charset_t *mbcset, int *range_alloc,\n\t\t   bracket_elem_t *start_elem, bracket_elem_t *end_elem)\n    {\n      unsigned int ch;\n      uint32_t start_collseq;\n      uint32_t end_collseq;\n\n      /* Equivalence Classes and Character Classes can't be a range\n\t start/end.  */\n      if (BE (start_elem->type == EQUIV_CLASS || start_elem->type == CHAR_CLASS\n\t      || end_elem->type == EQUIV_CLASS || end_elem->type == CHAR_CLASS,\n\t      0))\n\treturn REG_ERANGE;\n\n      /* FIXME: Implement rational ranges here, too.  */\n      start_collseq = lookup_collation_sequence_value (start_elem);\n      end_collseq = lookup_collation_sequence_value (end_elem);\n      /* Check start/end collation sequence values.  */\n      if (BE (start_collseq == UINT_MAX || end_collseq == UINT_MAX, 0))\n\treturn REG_ECOLLATE;\n      if (BE ((syntax & RE_NO_EMPTY_RANGES) && start_collseq > end_collseq, 0))\n\treturn REG_ERANGE;\n\n      /* Got valid collation sequence values, add them as a new entry.\n\t However, if we have no collation elements, and the character set\n\t is single byte, the single byte character set that we\n\t build below suffices. */\n      if (nrules > 0 || dfa->mb_cur_max > 1)\n\t{\n\t  /* Check the space of the arrays.  */\n\t  if (BE (*range_alloc == mbcset->nranges, 0))\n\t    {\n\t      /* There is not enough space, need realloc.  */\n\t      uint32_t *new_array_start;\n\t      uint32_t *new_array_end;\n\t      Idx new_nranges;\n\n\t      /* +1 in case of mbcset->nranges is 0.  */\n\t      new_nranges = 2 * mbcset->nranges + 1;\n\t      new_array_start = re_realloc (mbcset->range_starts, uint32_t,\n\t\t\t\t\t    new_nranges);\n\t      new_array_end = re_realloc (mbcset->range_ends, uint32_t,\n\t\t\t\t\t  new_nranges);\n\n\t      if (BE (new_array_start == NULL || new_array_end == NULL, 0))\n\t\treturn REG_ESPACE;\n\n\t      mbcset->range_starts = new_array_start;\n\t      mbcset->range_ends = new_array_end;\n\t      *range_alloc = new_nranges;\n\t    }\n\n\t  mbcset->range_starts[mbcset->nranges] = start_collseq;\n\t  mbcset->range_ends[mbcset->nranges++] = end_collseq;\n\t}\n\n      /* Build the table for single byte characters.  */\n      for (ch = 0; ch < SBC_MAX; ch++)\n\t{\n\t  uint32_t ch_collseq;\n\t  /*\n\t  if (MB_CUR_MAX == 1)\n\t  */\n\t  if (nrules == 0)\n\t    ch_collseq = collseqmb[ch];\n\t  else\n\t    ch_collseq = __collseq_table_lookup (collseqwc, __btowc (ch));\n\t  if (start_collseq <= ch_collseq && ch_collseq <= end_collseq)\n\t    bitset_set (sbcset, ch);\n\t}\n      return REG_NOERROR;\n    }",
      "lines": 74,
      "depth": 13,
      "decorators": [
        "auto",
        "auto",
        "inline",
        "inline",
        "reg_errcode_t",
        "__attribute__ ((always_inline))",
        "__attribute__",
        "(",
        "(always_inline)",
        "(",
        "always_inline",
        ")",
        ")"
      ]
    },
    "build_collating_symbol": {
      "start_point": [
        3035,
        2
      ],
      "end_point": [
        3091,
        5
      ],
      "content": "auto inline reg_errcode_t\n  __attribute__ ((always_inline))\n  build_collating_symbol (bitset_t sbcset, re_charset_t *mbcset,\n\t\t\t  Idx *coll_sym_alloc, const unsigned char *name)\n    {\n      int32_t elem, idx;\n      size_t name_len = strlen ((const char *) name);\n      if (nrules != 0)\n\t{\n\t  elem = seek_collating_symbol_entry (name, name_len);\n\t  if (elem != -1)\n\t    {\n\t      /* We found the entry.  */\n\t      idx = symb_table[2 * elem + 1];\n\t      /* Skip the name of collating element name.  */\n\t      idx += 1 + extra[idx];\n\t    }\n\t  else if (name_len == 1)\n\t    {\n\t      /* No valid character, treat it as a normal\n\t\t character.  */\n\t      bitset_set (sbcset, name[0]);\n\t      return REG_NOERROR;\n\t    }\n\t  else\n\t    return REG_ECOLLATE;\n\n\t  /* Got valid collation sequence, add it as a new entry.  */\n\t  /* Check the space of the arrays.  */\n\t  if (BE (*coll_sym_alloc == mbcset->ncoll_syms, 0))\n\t    {\n\t      /* Not enough, realloc it.  */\n\t      /* +1 in case of mbcset->ncoll_syms is 0.  */\n\t      Idx new_coll_sym_alloc = 2 * mbcset->ncoll_syms + 1;\n\t      /* Use realloc since mbcset->coll_syms is NULL\n\t\t if *alloc == 0.  */\n\t      int32_t *new_coll_syms = re_realloc (mbcset->coll_syms, int32_t,\n\t\t\t\t\t\t   new_coll_sym_alloc);\n\t      if (BE (new_coll_syms == NULL, 0))\n\t\treturn REG_ESPACE;\n\t      mbcset->coll_syms = new_coll_syms;\n\t      *coll_sym_alloc = new_coll_sym_alloc;\n\t    }\n\t  mbcset->coll_syms[mbcset->ncoll_syms++] = idx;\n\t  return REG_NOERROR;\n\t}\n      else\n\t{\n\t  if (BE (name_len != 1, 0))\n\t    return REG_ECOLLATE;\n\t  else\n\t    {\n\t      bitset_set (sbcset, name[0]);\n\t      return REG_NOERROR;\n\t    }\n\t}\n    }",
      "lines": 57,
      "depth": 12,
      "decorators": [
        "auto",
        "auto",
        "inline",
        "inline",
        "reg_errcode_t",
        "__attribute__ ((always_inline))",
        "__attribute__",
        "(",
        "(always_inline)",
        "(",
        "always_inline",
        ")",
        ")"
      ]
    },
    "parse_bracket_element": {
      "start_point": [
        3392,
        0
      ],
      "end_point": [
        3426,
        1
      ],
      "content": "static reg_errcode_t\nparse_bracket_element (bracket_elem_t *elem, re_string_t *regexp,\n\t\t       re_token_t *token, int token_len, re_dfa_t *dfa,\n\t\t       reg_syntax_t syntax, bool accept_hyphen)\n{\n#ifdef RE_ENABLE_I18N\n  int cur_char_size;\n  cur_char_size = re_string_char_size_at (regexp, re_string_cur_idx (regexp));\n  if (cur_char_size > 1)\n    {\n      elem->type = MB_CHAR;\n      elem->opr.wch = re_string_wchar_at (regexp, re_string_cur_idx (regexp));\n      re_string_skip_bytes (regexp, cur_char_size);\n      return REG_NOERROR;\n    }\n#endif /* RE_ENABLE_I18N */\n  re_string_skip_bytes (regexp, token_len); /* Skip a token.  */\n  if (token->type == OP_OPEN_COLL_ELEM || token->type == OP_OPEN_CHAR_CLASS\n      || token->type == OP_OPEN_EQUIV_CLASS)\n    return parse_bracket_symbol (elem, regexp, token);\n  if (BE (token->type == OP_CHARSET_RANGE, 0) && !accept_hyphen)\n    {\n      /* A '-' must only appear as anything but a range indicator before\n\t the closing bracket.  Everything else is an error.  */\n      re_token_t token2;\n      (void) peek_token_bracket (&token2, regexp, syntax);\n      if (token2.type != OP_CLOSE_BRACKET)\n\t/* The actual error value is not standardized since this whole\n\t   case is undefined.  But ERANGE makes good sense.  */\n\treturn REG_ERANGE;\n    }\n  elem->type = SB_CHAR;\n  elem->opr.ch = token->opr.c;\n  return REG_NOERROR;\n}",
      "lines": 35,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "parse_bracket_symbol": {
      "start_point": [
        3432,
        0
      ],
      "end_point": [
        3471,
        1
      ],
      "content": "static reg_errcode_t\nparse_bracket_symbol (bracket_elem_t *elem, re_string_t *regexp,\n\t\t      re_token_t *token)\n{\n  unsigned char ch, delim = token->opr.c;\n  int i = 0;\n  if (re_string_eoi(regexp))\n    return REG_EBRACK;\n  for (;; ++i)\n    {\n      if (i >= BRACKET_NAME_BUF_SIZE)\n\treturn REG_EBRACK;\n      if (token->type == OP_OPEN_CHAR_CLASS)\n\tch = re_string_fetch_byte_case (regexp);\n      else\n\tch = re_string_fetch_byte (regexp);\n      if (re_string_eoi(regexp))\n\treturn REG_EBRACK;\n      if (ch == delim && re_string_peek_byte (regexp, 0) == ']')\n\tbreak;\n      elem->opr.name[i] = ch;\n    }\n  re_string_skip_bytes (regexp, 1);\n  elem->opr.name[i] = '\\0';\n  switch (token->type)\n    {\n    case OP_OPEN_COLL_ELEM:\n      elem->type = COLL_SYM;\n      break;\n    case OP_OPEN_EQUIV_CLASS:\n      elem->type = EQUIV_CLASS;\n      break;\n    case OP_OPEN_CHAR_CLASS:\n      elem->type = CHAR_CLASS;\n      break;\n    default:\n      break;\n    }\n  return REG_NOERROR;\n}",
      "lines": 40,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "build_charclass": {
      "start_point": [
        3579,
        9
      ],
      "end_point": [
        3653,
        1
      ],
      "content": "char *class_name, reg_syntax_t syntax)\n#endif /* not RE_ENABLE_I18N */\n{\n  int i;\n  const char *name = class_name;\n\n  /* In case of REG_ICASE \"upper\" and \"lower\" match the both of\n     upper and lower cases.  */\n  if ((syntax & RE_ICASE)\n      && (strcmp (name, \"upper\") == 0 || strcmp (name, \"lower\") == 0))\n    name = \"alpha\";\n\n#ifdef RE_ENABLE_I18N\n  /* Check the space of the arrays.  */\n  if (BE (*char_class_alloc == mbcset->nchar_classes, 0))\n    {\n      /* Not enough, realloc it.  */\n      /* +1 in case of mbcset->nchar_classes is 0.  */\n      Idx new_char_class_alloc = 2 * mbcset->nchar_classes + 1;\n      /* Use realloc since array is NULL if *alloc == 0.  */\n      wctype_t *new_char_classes = re_realloc (mbcset->char_classes, wctype_t,\n\t\t\t\t\t       new_char_class_alloc);\n      if (BE (new_char_classes == NULL, 0))\n\treturn REG_ESPACE;\n      mbcset->char_classes = new_char_classes;\n      *char_class_alloc = new_char_class_alloc;\n    }\n  mbcset->char_classes[mbcset->nchar_classes++] = __wctype (name);\n#endif /* RE_ENABLE_I18N */\n\n#define BUILD_CHARCLASS_LOOP(ctype_func)\t\\\n  do {\t\t\t\t\t\t\\\n    if (BE (trans != NULL, 0))\t\t\t\\\n      {\t\t\t\t\t\t\\\n\tfor (i = 0; i < SBC_MAX; ++i)\t\t\\\n\t  if (ctype_func (i))\t\t\t\\\n\t    bitset_set (sbcset, trans[i]);\t\\\n      }\t\t\t\t\t\t\\\n    else\t\t\t\t\t\\\n      {\t\t\t\t\t\t\\\n\tfor (i = 0; i < SBC_MAX; ++i)\t\t\\\n\t  if (ctype_func (i))\t\t\t\\\n\t    bitset_set (sbcset, i);\t\t\\\n      }\t\t\t\t\t\t\\\n  } while (0)\n\n  if (strcmp (name, \"alnum\") == 0)\n    BUILD_CHARCLASS_LOOP (isalnum);\n  else if (strcmp (name, \"cntrl\") == 0)\n    BUILD_CHARCLASS_LOOP (iscntrl);\n  else if (strcmp (name, \"lower\") == 0)\n    BUILD_CHARCLASS_LOOP (islower);\n  else if (strcmp (name, \"space\") == 0)\n    BUILD_CHARCLASS_LOOP (isspace);\n  else if (strcmp (name, \"alpha\") == 0)\n    BUILD_CHARCLASS_LOOP (isalpha);\n  else if (strcmp (name, \"digit\") == 0)\n    BUILD_CHARCLASS_LOOP (isdigit);\n  else if (strcmp (name, \"print\") == 0)\n    BUILD_CHARCLASS_LOOP (isprint);\n  else if (strcmp (name, \"upper\") == 0)\n    BUILD_CHARCLASS_LOOP (isupper);\n  else if (strcmp (name, \"blank\") == 0)\n    BUILD_CHARCLASS_LOOP (isblank);\n  else if (strcmp (name, \"graph\") == 0)\n    BUILD_CHARCLASS_LOOP (isgraph);\n  else if (strcmp (name, \"punct\") == 0)\n    BUILD_CHARCLASS_LOOP (ispunct);\n  else if (strcmp (name, \"xdigit\") == 0)\n    BUILD_CHARCLASS_LOOP (isxdigit);\n  else\n    return REG_ECTYPE;\n\n  return REG_NOERROR;\n}",
      "lines": 75,
      "depth": 20,
      "decorators": null
    },
    "build_charclass_op": {
      "start_point": [
        3655,
        0
      ],
      "end_point": [
        3759,
        1
      ],
      "content": "static bin_tree_t *\nbuild_charclass_op (re_dfa_t *dfa, RE_TRANSLATE_TYPE trans,\n\t\t    const char *class_name,\n\t\t    const char *extra, bool non_match,\n\t\t    reg_errcode_t *err)\n{\n  re_bitset_ptr_t sbcset;\n#ifdef RE_ENABLE_I18N\n  re_charset_t *mbcset;\n  Idx alloc = 0;\n#endif /* not RE_ENABLE_I18N */\n  reg_errcode_t ret;\n  re_token_t br_token;\n  bin_tree_t *tree;\n\n  sbcset = (re_bitset_ptr_t) calloc (sizeof (bitset_t), 1);\n  if (BE (sbcset == NULL, 0))\n    {\n      *err = REG_ESPACE;\n      return NULL;\n    }\n#ifdef RE_ENABLE_I18N\n  mbcset = (re_charset_t *) calloc (sizeof (re_charset_t), 1);\n  if (BE (mbcset == NULL, 0))\n    {\n      re_free (sbcset);\n      *err = REG_ESPACE;\n      return NULL;\n    }\n  mbcset->non_match = non_match;\n#endif /* RE_ENABLE_I18N */\n\n  /* We don't care the syntax in this case.  */\n  ret = build_charclass (trans, sbcset,\n#ifdef RE_ENABLE_I18N\n\t\t\t mbcset, &alloc,\n#endif /* RE_ENABLE_I18N */\n\t\t\t class_name, 0);\n\n  if (BE (ret != REG_NOERROR, 0))\n    {\n      re_free (sbcset);\n#ifdef RE_ENABLE_I18N\n      free_charset (mbcset);\n#endif /* RE_ENABLE_I18N */\n      *err = ret;\n      return NULL;\n    }\n  /* \\w match '_' also.  */\n  for (; *extra; extra++)\n    bitset_set (sbcset, *extra);\n\n  /* If it is non-matching list.  */\n  if (non_match)\n    bitset_not (sbcset);\n\n#ifdef RE_ENABLE_I18N\n  /* Ensure only single byte characters are set.  */\n  if (dfa->mb_cur_max > 1)\n    bitset_mask (sbcset, dfa->sb_char);\n#endif\n\n  /* Build a tree for simple bracket.  */\n#if defined GCC_LINT || defined lint\n  memset (&br_token, 0, sizeof br_token);\n#endif\n  br_token.type = SIMPLE_BRACKET;\n  br_token.opr.sbcset = sbcset;\n  tree = create_token_tree (dfa, NULL, NULL, &br_token);\n  if (BE (tree == NULL, 0))\n    goto build_word_op_espace;\n\n#ifdef RE_ENABLE_I18N\n  if (dfa->mb_cur_max > 1)\n    {\n      bin_tree_t *mbc_tree;\n      /* Build a tree for complex bracket.  */\n      br_token.type = COMPLEX_BRACKET;\n      br_token.opr.mbcset = mbcset;\n      dfa->has_mb_node = 1;\n      mbc_tree = create_token_tree (dfa, NULL, NULL, &br_token);\n      if (BE (mbc_tree == NULL, 0))\n\tgoto build_word_op_espace;\n      /* Then join them by ALT node.  */\n      tree = create_tree (dfa, tree, mbc_tree, OP_ALT);\n      if (BE (mbc_tree != NULL, 1))\n\treturn tree;\n    }\n  else\n    {\n      free_charset (mbcset);\n      return tree;\n    }\n#else /* not RE_ENABLE_I18N */\n  return tree;\n#endif /* not RE_ENABLE_I18N */\n\n build_word_op_espace:\n  re_free (sbcset);\n#ifdef RE_ENABLE_I18N\n  free_charset (mbcset);\n#endif /* RE_ENABLE_I18N */\n  *err = REG_ESPACE;\n  return NULL;\n}",
      "lines": 105,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nbuild_charclass_op (re_dfa_t *dfa, RE_TRANSLATE_TYPE trans,\n\t\t    const char *class_name,\n\t\t    const char *extra, bool non_match,\n\t\t    reg_errcode_t *err)",
        "*"
      ]
    },
    "fetch_number": {
      "start_point": [
        3767,
        0
      ],
      "end_point": [
        3787,
        1
      ],
      "content": "static Idx\nfetch_number (re_string_t *input, re_token_t *token, reg_syntax_t syntax)\n{\n  Idx num = -1;\n  unsigned char c;\n  while (1)\n    {\n      fetch_token (token, input, syntax);\n      c = token->opr.c;\n      if (BE (token->type == END_OF_RE, 0))\n\treturn -2;\n      if (token->type == OP_CLOSE_DUP_NUM || c == ',')\n\tbreak;\n      num = ((token->type != CHARACTER || c < '0' || '9' < c || num == -2)\n\t     ? -2\n\t     : num == -1\n\t     ? c - '0'\n\t     : MIN (RE_DUP_MAX + 1, num * 10 + c - '0'));\n    }\n  return num;\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "Idx"
      ]
    },
    "free_charset": {
      "start_point": [
        3790,
        0
      ],
      "end_point": [
        3802,
        1
      ],
      "content": "static void\nfree_charset (re_charset_t *cset)\n{\n  re_free (cset->mbchars);\n# ifdef _LIBC\n  re_free (cset->coll_syms);\n  re_free (cset->equiv_classes);\n  re_free (cset->range_starts);\n  re_free (cset->range_ends);\n# endif\n  re_free (cset->char_classes);\n  re_free (cset);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "create_tree": {
      "start_point": [
        3809,
        0
      ],
      "end_point": [
        3819,
        1
      ],
      "content": "static bin_tree_t *\ncreate_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,\n\t     re_token_type_t type)\n{\n  re_token_t t;\n#if defined GCC_LINT || defined lint\n  memset (&t, 0, sizeof t);\n#endif\n  t.type = type;\n  return create_token_tree (dfa, left, right, &t);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\ncreate_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,\n\t     re_token_type_t type)",
        "*"
      ]
    },
    "create_token_tree": {
      "start_point": [
        3821,
        0
      ],
      "end_point": [
        3853,
        1
      ],
      "content": "static bin_tree_t *\ncreate_token_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,\n\t\t   const re_token_t *token)\n{\n  bin_tree_t *tree;\n  if (BE (dfa->str_tree_storage_idx == BIN_TREE_STORAGE_SIZE, 0))\n    {\n      bin_tree_storage_t *storage = re_malloc (bin_tree_storage_t, 1);\n\n      if (storage == NULL)\n\treturn NULL;\n      storage->next = dfa->str_tree_storage;\n      dfa->str_tree_storage = storage;\n      dfa->str_tree_storage_idx = 0;\n    }\n  tree = &dfa->str_tree_storage->data[dfa->str_tree_storage_idx++];\n\n  tree->parent = NULL;\n  tree->left = left;\n  tree->right = right;\n  tree->token = *token;\n  tree->token.duplicated = 0;\n  tree->token.opt_subexp = 0;\n  tree->first = NULL;\n  tree->next = NULL;\n  tree->node_idx = -1;\n\n  if (left != NULL)\n    left->parent = tree;\n  if (right != NULL)\n    right->parent = tree;\n  return tree;\n}",
      "lines": 33,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\ncreate_token_tree (re_dfa_t *dfa, bin_tree_t *left, bin_tree_t *right,\n\t\t   const re_token_t *token)",
        "*"
      ]
    },
    "mark_opt_subexp": {
      "start_point": [
        3858,
        0
      ],
      "end_point": [
        3866,
        1
      ],
      "content": "static reg_errcode_t\nmark_opt_subexp (void *extra, bin_tree_t *node)\n{\n  Idx idx = (uintptr_t) extra;\n  if (node->token.type == SUBEXP && node->token.opr.idx == idx)\n    node->token.opt_subexp = 1;\n\n  return REG_NOERROR;\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "free_token": {
      "start_point": [
        3870,
        0
      ],
      "end_point": [
        3880,
        1
      ],
      "content": "static void\nfree_token (re_token_t *node)\n{\n#ifdef RE_ENABLE_I18N\n  if (node->type == COMPLEX_BRACKET && node->duplicated == 0)\n    free_charset (node->opr.mbcset);\n  else\n#endif /* RE_ENABLE_I18N */\n    if (node->type == SIMPLE_BRACKET && node->duplicated == 0)\n      re_free (node->opr.sbcset);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "free_tree": {
      "start_point": [
        3885,
        0
      ],
      "end_point": [
        3890,
        1
      ],
      "content": "static reg_errcode_t\nfree_tree (void *extra, bin_tree_t *node)\n{\n  free_token (&node->token);\n  return REG_NOERROR;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t"
      ]
    },
    "duplicate_tree": {
      "start_point": [
        3898,
        0
      ],
      "end_point": [
        3936,
        1
      ],
      "content": "static bin_tree_t *\nduplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)\n{\n  const bin_tree_t *node;\n  bin_tree_t *dup_root;\n  bin_tree_t **p_new = &dup_root, *dup_node = root->parent;\n\n  for (node = root; ; )\n    {\n      /* Create a new tree and link it back to the current parent.  */\n      *p_new = create_token_tree (dfa, NULL, NULL, &node->token);\n      if (*p_new == NULL)\n\treturn NULL;\n      (*p_new)->parent = dup_node;\n      (*p_new)->token.duplicated = 1;\n      dup_node = *p_new;\n\n      /* Go to the left node, or up and to the right.  */\n      if (node->left)\n\t{\n\t  node = node->left;\n\t  p_new = &dup_node->left;\n\t}\n      else\n\t{\n\t  const bin_tree_t *prev = NULL;\n\t  while (node->right == prev || node->right == NULL)\n\t    {\n\t      prev = node;\n\t      node = node->parent;\n\t      dup_node = dup_node->parent;\n\t      if (!node)\n\t\treturn dup_root;\n\t    }\n\t  node = node->right;\n\t  p_new = &dup_node->right;\n\t}\n    }\n}",
      "lines": 39,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "bin_tree_t",
        "*\nduplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/regex.c": {},
  "grep/grep-3.1/lib/regex.h": {},
  "grep/grep-3.1/lib/regexec.c": {
    "regexec": {
      "start_point": [
        220,
        0
      ],
      "end_point": [
        251,
        1
      ],
      "content": "int\nregexec (const regex_t *_Restrict_ preg, const char *_Restrict_ string,\n\t size_t nmatch, regmatch_t pmatch[], int eflags)\n{\n  reg_errcode_t err;\n  Idx start, length;\n  re_dfa_t *dfa = preg->buffer;\n\n  if (eflags & ~(REG_NOTBOL | REG_NOTEOL | REG_STARTEND))\n    return REG_BADPAT;\n\n  if (eflags & REG_STARTEND)\n    {\n      start = pmatch[0].rm_so;\n      length = pmatch[0].rm_eo;\n    }\n  else\n    {\n      start = 0;\n      length = strlen (string);\n    }\n\n  lock_lock (dfa->lock);\n  if (preg->no_sub)\n    err = re_search_internal (preg, string, length, start, length,\n\t\t\t      length, 0, NULL, eflags);\n  else\n    err = re_search_internal (preg, string, length, start, length,\n\t\t\t      length, nmatch, pmatch, eflags);\n  lock_unlock (dfa->lock);\n  return err != REG_NOERROR;\n}",
      "lines": 32,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "__compat_regexec": {
      "start_point": [
        260,
        0
      ],
      "end_point": [
        268,
        1
      ],
      "content": "int\nattribute_compat_text_section\n__compat_regexec (const regex_t *_Restrict_ preg,\n\t\t  const char *_Restrict_ string, size_t nmatch,\n\t\t  regmatch_t pmatch[], int eflags)\n{\n  return regexec (preg, string, nmatch, pmatch,\n\t\t  eflags & (REG_NOTBOL | REG_NOTEOL));\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "int",
        "attribute_compat_text_section",
        "attribute_compat_text_section"
      ]
    },
    "re_match": {
      "start_point": [
        302,
        0
      ],
      "end_point": [
        307,
        1
      ],
      "content": "regoff_t\nre_match (struct re_pattern_buffer *bufp, const char *string, Idx length,\n\t  Idx start, struct re_registers *regs)\n{\n  return re_search_stub (bufp, string, length, start, 0, length, regs, true);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "regoff_t"
      ]
    },
    "re_search": {
      "start_point": [
        312,
        0
      ],
      "end_point": [
        318,
        1
      ],
      "content": "regoff_t\nre_search (struct re_pattern_buffer *bufp, const char *string, Idx length,\n\t   Idx start, regoff_t range, struct re_registers *regs)\n{\n  return re_search_stub (bufp, string, length, start, range, length, regs,\n\t\t\t false);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "regoff_t"
      ]
    },
    "re_match_2": {
      "start_point": [
        323,
        0
      ],
      "end_point": [
        330,
        1
      ],
      "content": "regoff_t\nre_match_2 (struct re_pattern_buffer *bufp, const char *string1, Idx length1,\n\t    const char *string2, Idx length2, Idx start,\n\t    struct re_registers *regs, Idx stop)\n{\n  return re_search_2_stub (bufp, string1, length1, string2, length2,\n\t\t\t   start, 0, regs, stop, true);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "regoff_t"
      ]
    },
    "re_search_2": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        342,
        1
      ],
      "content": "regoff_t\nre_search_2 (struct re_pattern_buffer *bufp, const char *string1, Idx length1,\n\t     const char *string2, Idx length2, Idx start, regoff_t range,\n\t     struct re_registers *regs, Idx stop)\n{\n  return re_search_2_stub (bufp, string1, length1, string2, length2,\n\t\t\t   start, range, regs, stop, false);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "regoff_t"
      ]
    },
    "re_search_2_stub": {
      "start_point": [
        347,
        0
      ],
      "end_point": [
        389,
        1
      ],
      "content": "static regoff_t\ninternal_function\nre_search_2_stub (struct re_pattern_buffer *bufp, const char *string1,\n\t\t  Idx length1, const char *string2, Idx length2, Idx start,\n\t\t  regoff_t range, struct re_registers *regs,\n\t\t  Idx stop, bool ret_len)\n{\n  const char *str;\n  regoff_t rval;\n  Idx len;\n  char *s = NULL;\n\n  if (BE ((length1 < 0 || length2 < 0 || stop < 0\n           || INT_ADD_WRAPV (length1, length2, &len)),\n          0))\n    return -2;\n\n  /* Concatenate the strings.  */\n  if (length2 > 0)\n    if (length1 > 0)\n      {\n\ts = re_malloc (char, len);\n\n\tif (BE (s == NULL, 0))\n\t  return -2;\n#ifdef _LIBC\n\tmemcpy (__mempcpy (s, string1, length1), string2, length2);\n#else\n\tmemcpy (s, string1, length1);\n\tmemcpy (s + length1, string2, length2);\n#endif\n\tstr = s;\n      }\n    else\n      str = string2;\n  else\n    str = string1;\n\n  rval = re_search_stub (bufp, str, len, start, range, stop, regs,\n\t\t\t ret_len);\n  re_free (s);\n  return rval;\n}",
      "lines": 43,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "regoff_t",
        "internal_function",
        "internal_function"
      ]
    },
    "re_search_stub": {
      "start_point": [
        396,
        0
      ],
      "end_point": [
        484,
        1
      ],
      "content": "static regoff_t\ninternal_function\nre_search_stub (struct re_pattern_buffer *bufp, const char *string, Idx length,\n\t\tIdx start, regoff_t range, Idx stop, struct re_registers *regs,\n\t\tbool ret_len)\n{\n  reg_errcode_t result;\n  regmatch_t *pmatch;\n  Idx nregs;\n  regoff_t rval;\n  int eflags = 0;\n  re_dfa_t *dfa = bufp->buffer;\n  Idx last_start = start + range;\n\n  /* Check for out-of-range.  */\n  if (BE (start < 0 || start > length, 0))\n    return -1;\n  if (BE (length < last_start || (0 <= range && last_start < start), 0))\n    last_start = length;\n  else if (BE (last_start < 0 || (range < 0 && start <= last_start), 0))\n    last_start = 0;\n\n  lock_lock (dfa->lock);\n\n  eflags |= (bufp->not_bol) ? REG_NOTBOL : 0;\n  eflags |= (bufp->not_eol) ? REG_NOTEOL : 0;\n\n  /* Compile fastmap if we haven't yet.  */\n  if (start < last_start && bufp->fastmap != NULL && !bufp->fastmap_accurate)\n    re_compile_fastmap (bufp);\n\n  if (BE (bufp->no_sub, 0))\n    regs = NULL;\n\n  /* We need at least 1 register.  */\n  if (regs == NULL)\n    nregs = 1;\n  else if (BE (bufp->regs_allocated == REGS_FIXED\n\t       && regs->num_regs <= bufp->re_nsub, 0))\n    {\n      nregs = regs->num_regs;\n      if (BE (nregs < 1, 0))\n\t{\n\t  /* Nothing can be copied to regs.  */\n\t  regs = NULL;\n\t  nregs = 1;\n\t}\n    }\n  else\n    nregs = bufp->re_nsub + 1;\n  pmatch = re_malloc (regmatch_t, nregs);\n  if (BE (pmatch == NULL, 0))\n    {\n      rval = -2;\n      goto out;\n    }\n\n  result = re_search_internal (bufp, string, length, start, last_start, stop,\n\t\t\t       nregs, pmatch, eflags);\n\n  rval = 0;\n\n  /* I hope we needn't fill their regs with -1's when no match was found.  */\n  if (result != REG_NOERROR)\n    rval = result == REG_NOMATCH ? -1 : -2;\n  else if (regs != NULL)\n    {\n      /* If caller wants register contents data back, copy them.  */\n      bufp->regs_allocated = re_copy_regs (regs, pmatch, nregs,\n\t\t\t\t\t   bufp->regs_allocated);\n      if (BE (bufp->regs_allocated == REGS_UNALLOCATED, 0))\n\trval = -2;\n    }\n\n  if (BE (rval == 0, 1))\n    {\n      if (ret_len)\n\t{\n\t  assert (pmatch[0].rm_so == start);\n\t  rval = pmatch[0].rm_eo - start;\n\t}\n      else\n\trval = pmatch[0].rm_so;\n    }\n  re_free (pmatch);\n out:\n  lock_unlock (dfa->lock);\n  return rval;\n}",
      "lines": 89,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "regoff_t",
        "internal_function",
        "internal_function"
      ]
    },
    "re_copy_regs": {
      "start_point": [
        486,
        0
      ],
      "end_point": [
        550,
        1
      ],
      "content": "static unsigned\ninternal_function\nre_copy_regs (struct re_registers *regs, regmatch_t *pmatch, Idx nregs,\n\t      int regs_allocated)\n{\n  int rval = REGS_REALLOCATE;\n  Idx i;\n  Idx need_regs = nregs + 1;\n  /* We need one extra element beyond 'num_regs' for the '-1' marker GNU code\n     uses.  */\n\n  /* Have the register data arrays been allocated?  */\n  if (regs_allocated == REGS_UNALLOCATED)\n    { /* No.  So allocate them with malloc.  */\n      regs->start = re_malloc (regoff_t, need_regs);\n      if (BE (regs->start == NULL, 0))\n\treturn REGS_UNALLOCATED;\n      regs->end = re_malloc (regoff_t, need_regs);\n      if (BE (regs->end == NULL, 0))\n\t{\n\t  re_free (regs->start);\n\t  return REGS_UNALLOCATED;\n\t}\n      regs->num_regs = need_regs;\n    }\n  else if (regs_allocated == REGS_REALLOCATE)\n    { /* Yes.  If we need more elements than were already\n\t allocated, reallocate them.  If we need fewer, just\n\t leave it alone.  */\n      if (BE (need_regs > regs->num_regs, 0))\n\t{\n\t  regoff_t *new_start = re_realloc (regs->start, regoff_t, need_regs);\n\t  regoff_t *new_end;\n\t  if (BE (new_start == NULL, 0))\n\t    return REGS_UNALLOCATED;\n\t  new_end = re_realloc (regs->end, regoff_t, need_regs);\n\t  if (BE (new_end == NULL, 0))\n\t    {\n\t      re_free (new_start);\n\t      return REGS_UNALLOCATED;\n\t    }\n\t  regs->start = new_start;\n\t  regs->end = new_end;\n\t  regs->num_regs = need_regs;\n\t}\n    }\n  else\n    {\n      assert (regs_allocated == REGS_FIXED);\n      /* This function may not be called with REGS_FIXED and nregs too big.  */\n      assert (regs->num_regs >= nregs);\n      rval = REGS_FIXED;\n    }\n\n  /* Copy the regs.  */\n  for (i = 0; i < nregs; ++i)\n    {\n      regs->start[i] = pmatch[i].rm_so;\n      regs->end[i] = pmatch[i].rm_eo;\n    }\n  for ( ; i < regs->num_regs; ++i)\n    regs->start[i] = regs->end[i] = -1;\n\n  return rval;\n}",
      "lines": 65,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "unsigned\ninternal_function",
        "unsigned",
        "internal_function"
      ]
    },
    "re_set_registers": {
      "start_point": [
        565,
        0
      ],
      "end_point": [
        582,
        1
      ],
      "content": "void\nre_set_registers (struct re_pattern_buffer *bufp, struct re_registers *regs,\n\t\t  __re_size_t num_regs, regoff_t *starts, regoff_t *ends)\n{\n  if (num_regs)\n    {\n      bufp->regs_allocated = REGS_REALLOCATE;\n      regs->num_regs = num_regs;\n      regs->start = starts;\n      regs->end = ends;\n    }\n  else\n    {\n      bufp->regs_allocated = REGS_UNALLOCATED;\n      regs->num_regs = 0;\n      regs->start = regs->end = NULL;\n    }\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "re_exec": {
      "start_point": [
        593,
        0
      ],
      "end_point": [
        598,
        1
      ],
      "content": "weak_function\n# endif\nre_exec (const char *s)\n{\n  return 0 == regexec (&re_comp_buf, s, 0, NULL, 0);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "weak_function",
        "# endif",
        "# endif"
      ]
    },
    "re_search_internal": {
      "start_point": [
        613,
        33
      ],
      "end_point": [
        944,
        1
      ],
      "content": "internal_function\nre_search_internal (const regex_t *preg, const char *string, Idx length,\n\t\t    Idx start, Idx last_start, Idx stop, size_t nmatch,\n\t\t    regmatch_t pmatch[], int eflags)\n{\n  reg_errcode_t err;\n  const re_dfa_t *dfa = preg->buffer;\n  Idx left_lim, right_lim;\n  int incr;\n  bool fl_longest_match;\n  int match_kind;\n  Idx match_first;\n  Idx match_last = -1;\n  Idx extra_nmatch;\n  bool sb;\n  int ch;\n#if defined _LIBC || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L)\n  re_match_context_t mctx = { .dfa = dfa };\n#else\n  re_match_context_t mctx;\n#endif\n  char *fastmap = ((preg->fastmap != NULL && preg->fastmap_accurate\n\t\t    && start != last_start && !preg->can_be_null)\n\t\t   ? preg->fastmap : NULL);\n  RE_TRANSLATE_TYPE t = preg->translate;\n\n#if !(defined _LIBC || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L))\n  memset (&mctx, '\\0', sizeof (re_match_context_t));\n  mctx.dfa = dfa;\n#endif\n\n  extra_nmatch = (nmatch > preg->re_nsub) ? nmatch - (preg->re_nsub + 1) : 0;\n  nmatch -= extra_nmatch;\n\n  /* Check if the DFA haven't been compiled.  */\n  if (BE (preg->used == 0 || dfa->init_state == NULL\n\t  || dfa->init_state_word == NULL || dfa->init_state_nl == NULL\n\t  || dfa->init_state_begbuf == NULL, 0))\n    return REG_NOMATCH;\n\n#ifdef DEBUG\n  /* We assume front-end functions already check them.  */\n  assert (0 <= last_start && last_start <= length);\n#endif\n\n  /* If initial states with non-begbuf contexts have no elements,\n     the regex must be anchored.  If preg->newline_anchor is set,\n     we'll never use init_state_nl, so do not check it.  */\n  if (dfa->init_state->nodes.nelem == 0\n      && dfa->init_state_word->nodes.nelem == 0\n      && (dfa->init_state_nl->nodes.nelem == 0\n\t  || !preg->newline_anchor))\n    {\n      if (start != 0 && last_start != 0)\n        return REG_NOMATCH;\n      start = last_start = 0;\n    }\n\n  /* We must check the longest matching, if nmatch > 0.  */\n  fl_longest_match = (nmatch != 0 || dfa->nbackref);\n\n  err = re_string_allocate (&mctx.input, string, length, dfa->nodes_len + 1,\n\t\t\t    preg->translate, (preg->syntax & RE_ICASE) != 0,\n\t\t\t    dfa);\n  if (BE (err != REG_NOERROR, 0))\n    goto free_return;\n  mctx.input.stop = stop;\n  mctx.input.raw_stop = stop;\n  mctx.input.newline_anchor = preg->newline_anchor;\n\n  err = match_ctx_init (&mctx, eflags, dfa->nbackref * 2);\n  if (BE (err != REG_NOERROR, 0))\n    goto free_return;\n\n  /* We will log all the DFA states through which the dfa pass,\n     if nmatch > 1, or this dfa has \"multibyte node\", which is a\n     back-reference or a node which can accept multibyte character or\n     multi character collating element.  */\n  if (nmatch > 1 || dfa->has_mb_node)\n    {\n      /* Avoid overflow.  */\n      if (BE ((MIN (IDX_MAX, SIZE_MAX / sizeof (re_dfastate_t *))\n               <= mctx.input.bufs_len), 0))\n\t{\n\t  err = REG_ESPACE;\n\t  goto free_return;\n\t}\n\n      mctx.state_log = re_malloc (re_dfastate_t *, mctx.input.bufs_len + 1);\n      if (BE (mctx.state_log == NULL, 0))\n\t{\n\t  err = REG_ESPACE;\n\t  goto free_return;\n\t}\n    }\n  else\n    mctx.state_log = NULL;\n\n  match_first = start;\n  mctx.input.tip_context = (eflags & REG_NOTBOL) ? CONTEXT_BEGBUF\n\t\t\t   : CONTEXT_NEWLINE | CONTEXT_BEGBUF;\n\n  /* Check incrementally whether the input string matches.  */\n  incr = (last_start < start) ? -1 : 1;\n  left_lim = (last_start < start) ? last_start : start;\n  right_lim = (last_start < start) ? start : last_start;\n  sb = dfa->mb_cur_max == 1;\n  match_kind =\n    (fastmap\n     ? ((sb || !(preg->syntax & RE_ICASE || t) ? 4 : 0)\n\t| (start <= last_start ? 2 : 0)\n\t| (t != NULL ? 1 : 0))\n     : 8);\n\n  for (;; match_first += incr)\n    {\n      err = REG_NOMATCH;\n      if (match_first < left_lim || right_lim < match_first)\n\tgoto free_return;\n\n      /* Advance as rapidly as possible through the string, until we\n\t find a plausible place to start matching.  This may be done\n\t with varying efficiency, so there are various possibilities:\n\t only the most common of them are specialized, in order to\n\t save on code size.  We use a switch statement for speed.  */\n      switch (match_kind)\n\t{\n\tcase 8:\n\t  /* No fastmap.  */\n\t  break;\n\n\tcase 7:\n\t  /* Fastmap with single-byte translation, match forward.  */\n\t  while (BE (match_first < right_lim, 1)\n\t\t && !fastmap[t[(unsigned char) string[match_first]]])\n\t    ++match_first;\n\t  goto forward_match_found_start_or_reached_end;\n\n\tcase 6:\n\t  /* Fastmap without translation, match forward.  */\n\t  while (BE (match_first < right_lim, 1)\n\t\t && !fastmap[(unsigned char) string[match_first]])\n\t    ++match_first;\n\n\tforward_match_found_start_or_reached_end:\n\t  if (BE (match_first == right_lim, 0))\n\t    {\n\t      ch = match_first >= length\n\t\t       ? 0 : (unsigned char) string[match_first];\n\t      if (!fastmap[t ? t[ch] : ch])\n\t\tgoto free_return;\n\t    }\n\t  break;\n\n\tcase 4:\n\tcase 5:\n\t  /* Fastmap without multi-byte translation, match backwards.  */\n\t  while (match_first >= left_lim)\n\t    {\n\t      ch = match_first >= length\n\t\t       ? 0 : (unsigned char) string[match_first];\n\t      if (fastmap[t ? t[ch] : ch])\n\t\tbreak;\n\t      --match_first;\n\t    }\n\t  if (match_first < left_lim)\n\t    goto free_return;\n\t  break;\n\n\tdefault:\n\t  /* In this case, we can't determine easily the current byte,\n\t     since it might be a component byte of a multibyte\n\t     character.  Then we use the constructed buffer instead.  */\n\t  for (;;)\n\t    {\n\t      /* If MATCH_FIRST is out of the valid range, reconstruct the\n\t\t buffers.  */\n\t      __re_size_t offset = match_first - mctx.input.raw_mbs_idx;\n\t      if (BE (offset >= (__re_size_t) mctx.input.valid_raw_len, 0))\n\t\t{\n\t\t  err = re_string_reconstruct (&mctx.input, match_first,\n\t\t\t\t\t       eflags);\n\t\t  if (BE (err != REG_NOERROR, 0))\n\t\t    goto free_return;\n\n\t\t  offset = match_first - mctx.input.raw_mbs_idx;\n\t\t}\n\t      /* If MATCH_FIRST is out of the buffer, leave it as '\\0'.\n\t\t Note that MATCH_FIRST must not be smaller than 0.  */\n\t      ch = (match_first >= length\n\t\t    ? 0 : re_string_byte_at (&mctx.input, offset));\n\t      if (fastmap[ch])\n\t\tbreak;\n\t      match_first += incr;\n\t      if (match_first < left_lim || match_first > right_lim)\n\t\t{\n\t\t  err = REG_NOMATCH;\n\t\t  goto free_return;\n\t\t}\n\t    }\n\t  break;\n\t}\n\n      /* Reconstruct the buffers so that the matcher can assume that\n\t the matching starts from the beginning of the buffer.  */\n      err = re_string_reconstruct (&mctx.input, match_first, eflags);\n      if (BE (err != REG_NOERROR, 0))\n\tgoto free_return;\n\n#ifdef RE_ENABLE_I18N\n     /* Don't consider this char as a possible match start if it part,\n\tyet isn't the head, of a multibyte character.  */\n      if (!sb && !re_string_first_byte (&mctx.input, 0))\n\tcontinue;\n#endif\n\n      /* It seems to be appropriate one, then use the matcher.  */\n      /* We assume that the matching starts from 0.  */\n      mctx.state_log_top = mctx.nbkref_ents = mctx.max_mb_elem_len = 0;\n      match_last = check_matching (&mctx, fl_longest_match,\n\t\t\t\t   start <= last_start ? &match_first : NULL);\n      if (match_last != -1)\n\t{\n\t  if (BE (match_last == -2, 0))\n\t    {\n\t      err = REG_ESPACE;\n\t      goto free_return;\n\t    }\n\t  else\n\t    {\n\t      mctx.match_last = match_last;\n\t      if ((!preg->no_sub && nmatch > 1) || dfa->nbackref)\n\t\t{\n\t\t  re_dfastate_t *pstate = mctx.state_log[match_last];\n\t\t  mctx.last_node = check_halt_state_context (&mctx, pstate,\n\t\t\t\t\t\t\t     match_last);\n\t\t}\n\t      if ((!preg->no_sub && nmatch > 1 && dfa->has_plural_match)\n\t\t  || dfa->nbackref)\n\t\t{\n\t\t  err = prune_impossible_nodes (&mctx);\n\t\t  if (err == REG_NOERROR)\n\t\t    break;\n\t\t  if (BE (err != REG_NOMATCH, 0))\n\t\t    goto free_return;\n\t\t  match_last = -1;\n\t\t}\n\t      else\n\t\tbreak; /* We found a match.  */\n\t    }\n\t}\n\n      match_ctx_clean (&mctx);\n    }\n\n#ifdef DEBUG\n  assert (match_last != -1);\n  assert (err == REG_NOERROR);\n#endif\n\n  /* Set pmatch[] if we need.  */\n  if (nmatch > 0)\n    {\n      Idx reg_idx;\n\n      /* Initialize registers.  */\n      for (reg_idx = 1; reg_idx < nmatch; ++reg_idx)\n\tpmatch[reg_idx].rm_so = pmatch[reg_idx].rm_eo = -1;\n\n      /* Set the points where matching start/end.  */\n      pmatch[0].rm_so = 0;\n      pmatch[0].rm_eo = mctx.match_last;\n      /* FIXME: This function should fail if mctx.match_last exceeds\n\t the maximum possible regoff_t value.  We need a new error\n\t code REG_OVERFLOW.  */\n\n      if (!preg->no_sub && nmatch > 1)\n\t{\n\t  err = set_regs (preg, &mctx, nmatch, pmatch,\n\t\t\t  dfa->has_plural_match && dfa->nbackref > 0);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    goto free_return;\n\t}\n\n      /* At last, add the offset to each register, since we slid\n\t the buffers so that we could assume that the matching starts\n\t from 0.  */\n      for (reg_idx = 0; reg_idx < nmatch; ++reg_idx)\n\tif (pmatch[reg_idx].rm_so != -1)\n\t  {\n#ifdef RE_ENABLE_I18N\n\t    if (BE (mctx.input.offsets_needed != 0, 0))\n\t      {\n\t\tpmatch[reg_idx].rm_so =\n\t\t  (pmatch[reg_idx].rm_so == mctx.input.valid_len\n\t\t   ? mctx.input.valid_raw_len\n\t\t   : mctx.input.offsets[pmatch[reg_idx].rm_so]);\n\t\tpmatch[reg_idx].rm_eo =\n\t\t  (pmatch[reg_idx].rm_eo == mctx.input.valid_len\n\t\t   ? mctx.input.valid_raw_len\n\t\t   : mctx.input.offsets[pmatch[reg_idx].rm_eo]);\n\t      }\n#else\n\t    assert (mctx.input.offsets_needed == 0);\n#endif\n\t    pmatch[reg_idx].rm_so += match_first;\n\t    pmatch[reg_idx].rm_eo += match_first;\n\t  }\n      for (reg_idx = 0; reg_idx < extra_nmatch; ++reg_idx)\n\t{\n\t  pmatch[nmatch + reg_idx].rm_so = -1;\n\t  pmatch[nmatch + reg_idx].rm_eo = -1;\n\t}\n\n      if (dfa->subexp_map)\n\tfor (reg_idx = 0; reg_idx + 1 < nmatch; reg_idx++)\n\t  if (dfa->subexp_map[reg_idx] != reg_idx)\n\t    {\n\t      pmatch[reg_idx + 1].rm_so\n\t\t= pmatch[dfa->subexp_map[reg_idx] + 1].rm_so;\n\t      pmatch[reg_idx + 1].rm_eo\n\t\t= pmatch[dfa->subexp_map[reg_idx] + 1].rm_eo;\n\t    }\n    }\n\n free_return:\n  re_free (mctx.state_log);\n  if (dfa->nbackref)\n    match_ctx_free (&mctx);\n  re_string_destruct (&mctx.input);\n  return err;\n}",
      "lines": 332,
      "depth": 18,
      "decorators": [
        "internal_function"
      ]
    },
    "prune_impossible_nodes": {
      "start_point": [
        947,
        18
      ],
      "end_point": [
        1036,
        1
      ],
      "content": "__attribute_warn_unused_result__\nprune_impossible_nodes (re_match_context_t *mctx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx halt_node, match_last;\n  reg_errcode_t ret;\n  re_dfastate_t **sifted_states;\n  re_dfastate_t **lim_states = NULL;\n  re_sift_context_t sctx;\n#ifdef DEBUG\n  assert (mctx->state_log != NULL);\n#endif\n  match_last = mctx->match_last;\n  halt_node = mctx->last_node;\n\n  /* Avoid overflow.  */\n  if (BE (MIN (IDX_MAX, SIZE_MAX / sizeof (re_dfastate_t *)) <= match_last, 0))\n    return REG_ESPACE;\n\n  sifted_states = re_malloc (re_dfastate_t *, match_last + 1);\n  if (BE (sifted_states == NULL, 0))\n    {\n      ret = REG_ESPACE;\n      goto free_return;\n    }\n  if (dfa->nbackref)\n    {\n      lim_states = re_malloc (re_dfastate_t *, match_last + 1);\n      if (BE (lim_states == NULL, 0))\n\t{\n\t  ret = REG_ESPACE;\n\t  goto free_return;\n\t}\n      while (1)\n\t{\n\t  memset (lim_states, '\\0',\n\t\t  sizeof (re_dfastate_t *) * (match_last + 1));\n\t  sift_ctx_init (&sctx, sifted_states, lim_states, halt_node,\n\t\t\t match_last);\n\t  ret = sift_states_backward (mctx, &sctx);\n\t  re_node_set_free (&sctx.limits);\n\t  if (BE (ret != REG_NOERROR, 0))\n\t      goto free_return;\n\t  if (sifted_states[0] != NULL || lim_states[0] != NULL)\n\t    break;\n\t  do\n\t    {\n\t      --match_last;\n\t      if (match_last < 0)\n\t\t{\n\t\t  ret = REG_NOMATCH;\n\t\t  goto free_return;\n\t\t}\n\t    } while (mctx->state_log[match_last] == NULL\n\t\t     || !mctx->state_log[match_last]->halt);\n\t  halt_node = check_halt_state_context (mctx,\n\t\t\t\t\t\tmctx->state_log[match_last],\n\t\t\t\t\t\tmatch_last);\n\t}\n      ret = merge_state_array (dfa, sifted_states, lim_states,\n\t\t\t       match_last + 1);\n      re_free (lim_states);\n      lim_states = NULL;\n      if (BE (ret != REG_NOERROR, 0))\n\tgoto free_return;\n    }\n  else\n    {\n      sift_ctx_init (&sctx, sifted_states, lim_states, halt_node, match_last);\n      ret = sift_states_backward (mctx, &sctx);\n      re_node_set_free (&sctx.limits);\n      if (BE (ret != REG_NOERROR, 0))\n\tgoto free_return;\n      if (sifted_states[0] == NULL)\n\t{\n\t  ret = REG_NOMATCH;\n\t  goto free_return;\n\t}\n    }\n  re_free (mctx->state_log);\n  mctx->state_log = sifted_states;\n  sifted_states = NULL;\n  mctx->last_node = halt_node;\n  mctx->match_last = match_last;\n  ret = REG_NOERROR;\n free_return:\n  re_free (sifted_states);\n  re_free (lim_states);\n  return ret;\n}",
      "lines": 90,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "acquire_init_state_context": {
      "start_point": [
        1043,
        32
      ],
      "end_point": [
        1073,
        1
      ],
      "content": "internal_function\nacquire_init_state_context (reg_errcode_t *err, const re_match_context_t *mctx,\n\t\t\t    Idx idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  if (dfa->init_state->has_constraint)\n    {\n      unsigned int context;\n      context = re_string_context_at (&mctx->input, idx - 1, mctx->eflags);\n      if (IS_WORD_CONTEXT (context))\n\treturn dfa->init_state_word;\n      else if (IS_ORDINARY_CONTEXT (context))\n\treturn dfa->init_state;\n      else if (IS_BEGBUF_CONTEXT (context) && IS_NEWLINE_CONTEXT (context))\n\treturn dfa->init_state_begbuf;\n      else if (IS_NEWLINE_CONTEXT (context))\n\treturn dfa->init_state_nl;\n      else if (IS_BEGBUF_CONTEXT (context))\n\t{\n\t  /* It is relatively rare case, then calculate on demand.  */\n\t  return re_acquire_state_context (err, dfa,\n\t\t\t\t\t   dfa->init_state->entrance_nodes,\n\t\t\t\t\t   context);\n\t}\n      else\n\t/* Must not happen?  */\n\treturn dfa->init_state;\n    }\n  else\n    return dfa->init_state;\n}",
      "lines": 31,
      "depth": 16,
      "decorators": [
        "internal_function"
      ]
    },
    "check_matching": {
      "start_point": [
        1085,
        18
      ],
      "end_point": [
        1213,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncheck_matching (re_match_context_t *mctx, bool fl_longest_match,\n\t\tIdx *p_match_first)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err;\n  Idx match = 0;\n  Idx match_last = -1;\n  Idx cur_str_idx = re_string_cur_idx (&mctx->input);\n  re_dfastate_t *cur_state;\n  bool at_init_state = p_match_first != NULL;\n  Idx next_start_idx = cur_str_idx;\n\n  err = REG_NOERROR;\n  cur_state = acquire_init_state_context (&err, mctx, cur_str_idx);\n  /* An initial state must not be NULL (invalid).  */\n  if (BE (cur_state == NULL, 0))\n    {\n      assert (err == REG_ESPACE);\n      return -2;\n    }\n\n  if (mctx->state_log != NULL)\n    {\n      mctx->state_log[cur_str_idx] = cur_state;\n\n      /* Check OP_OPEN_SUBEXP in the initial state in case that we use them\n\t later.  E.g. Processing back references.  */\n      if (BE (dfa->nbackref, 0))\n\t{\n\t  at_init_state = false;\n\t  err = check_subexp_matching_top (mctx, &cur_state->nodes, 0);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\n\t  if (cur_state->has_backref)\n\t    {\n\t      err = transit_state_bkref (mctx, &cur_state->nodes);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\treturn err;\n\t    }\n\t}\n    }\n\n  /* If the RE accepts NULL string.  */\n  if (BE (cur_state->halt, 0))\n    {\n      if (!cur_state->has_constraint\n\t  || check_halt_state_context (mctx, cur_state, cur_str_idx))\n\t{\n\t  if (!fl_longest_match)\n\t    return cur_str_idx;\n\t  else\n\t    {\n\t      match_last = cur_str_idx;\n\t      match = 1;\n\t    }\n\t}\n    }\n\n  while (!re_string_eoi (&mctx->input))\n    {\n      re_dfastate_t *old_state = cur_state;\n      Idx next_char_idx = re_string_cur_idx (&mctx->input) + 1;\n\n      if ((BE (next_char_idx >= mctx->input.bufs_len, 0)\n\t   && mctx->input.bufs_len < mctx->input.len)\n\t  || (BE (next_char_idx >= mctx->input.valid_len, 0)\n\t      && mctx->input.valid_len < mctx->input.len))\n\t{\n\t  err = extend_buffers (mctx, next_char_idx + 1);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      assert (err == REG_ESPACE);\n\t      return -2;\n\t    }\n\t}\n\n      cur_state = transit_state (&err, mctx, cur_state);\n      if (mctx->state_log != NULL)\n\tcur_state = merge_state_with_log (&err, mctx, cur_state);\n\n      if (cur_state == NULL)\n\t{\n\t  /* Reached the invalid state or an error.  Try to recover a valid\n\t     state using the state log, if available and if we have not\n\t     already found a valid (even if not the longest) match.  */\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return -2;\n\n\t  if (mctx->state_log == NULL\n\t      || (match && !fl_longest_match)\n\t      || (cur_state = find_recover_state (&err, mctx)) == NULL)\n\t    break;\n\t}\n\n      if (BE (at_init_state, 0))\n\t{\n\t  if (old_state == cur_state)\n\t    next_start_idx = next_char_idx;\n\t  else\n\t    at_init_state = false;\n\t}\n\n      if (cur_state->halt)\n\t{\n\t  /* Reached a halt state.\n\t     Check the halt state can satisfy the current context.  */\n\t  if (!cur_state->has_constraint\n\t      || check_halt_state_context (mctx, cur_state,\n\t\t\t\t\t   re_string_cur_idx (&mctx->input)))\n\t    {\n\t      /* We found an appropriate halt state.  */\n\t      match_last = re_string_cur_idx (&mctx->input);\n\t      match = 1;\n\n\t      /* We found a match, do not modify match_first below.  */\n\t      p_match_first = NULL;\n\t      if (!fl_longest_match)\n\t\tbreak;\n\t    }\n\t}\n    }\n\n  if (p_match_first)\n    *p_match_first += next_start_idx;\n\n  return match_last;\n}",
      "lines": 129,
      "depth": 16,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "check_halt_node_context": {
      "start_point": [
        1217,
        0
      ],
      "end_point": [
        1230,
        1
      ],
      "content": "static bool\ninternal_function\ncheck_halt_node_context (const re_dfa_t *dfa, Idx node, unsigned int context)\n{\n  re_token_type_t type = dfa->nodes[node].type;\n  unsigned int constraint = dfa->nodes[node].constraint;\n  if (type != END_OF_RE)\n    return false;\n  if (!constraint)\n    return true;\n  if (NOT_SATISFY_NEXT_CONSTRAINT (constraint, context))\n    return false;\n  return true;\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bool",
        "internal_function",
        "internal_function"
      ]
    },
    "check_halt_state_context": {
      "start_point": [
        1236,
        0
      ],
      "end_point": [
        1251,
        1
      ],
      "content": "static Idx\ninternal_function\ncheck_halt_state_context (const re_match_context_t *mctx,\n\t\t\t  const re_dfastate_t *state, Idx idx)\n{\n  Idx i;\n  unsigned int context;\n#ifdef DEBUG\n  assert (state->halt);\n#endif\n  context = re_string_context_at (&mctx->input, idx, mctx->eflags);\n  for (i = 0; i < state->nodes.nelem; ++i)\n    if (check_halt_node_context (mctx->dfa, state->nodes.elems[i], context))\n      return state->nodes.elems[i];\n  return 0;\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "proceed_next_node": {
      "start_point": [
        1258,
        0
      ],
      "end_point": [
        1358,
        1
      ],
      "content": "static Idx\ninternal_function\nproceed_next_node (const re_match_context_t *mctx, Idx nregs, regmatch_t *regs,\n\t\t   Idx *pidx, Idx node, re_node_set *eps_via_nodes,\n\t\t   struct re_fail_stack_t *fs)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx i;\n  bool ok;\n  if (IS_EPSILON_NODE (dfa->nodes[node].type))\n    {\n      re_node_set *cur_nodes = &mctx->state_log[*pidx]->nodes;\n      re_node_set *edests = &dfa->edests[node];\n      Idx dest_node;\n      ok = re_node_set_insert (eps_via_nodes, node);\n      if (BE (! ok, 0))\n\treturn -2;\n      /* Pick up a valid destination, or return -1 if none\n\t is found.  */\n      for (dest_node = -1, i = 0; i < edests->nelem; ++i)\n\t{\n\t  Idx candidate = edests->elems[i];\n\t  if (!re_node_set_contains (cur_nodes, candidate))\n\t    continue;\n          if (dest_node == -1)\n\t    dest_node = candidate;\n\n\t  else\n\t    {\n\t      /* In order to avoid infinite loop like \"(a*)*\", return the second\n\t\t epsilon-transition if the first was already considered.  */\n\t      if (re_node_set_contains (eps_via_nodes, dest_node))\n\t\treturn candidate;\n\n\t      /* Otherwise, push the second epsilon-transition on the fail stack.  */\n\t      else if (fs != NULL\n\t\t       && push_fail_stack (fs, *pidx, candidate, nregs, regs,\n\t\t\t\t\t   eps_via_nodes))\n\t\treturn -2;\n\n\t      /* We know we are going to exit.  */\n\t      break;\n\t    }\n\t}\n      return dest_node;\n    }\n  else\n    {\n      Idx naccepted = 0;\n      re_token_type_t type = dfa->nodes[node].type;\n\n#ifdef RE_ENABLE_I18N\n      if (dfa->nodes[node].accept_mb)\n\tnaccepted = check_node_accept_bytes (dfa, node, &mctx->input, *pidx);\n      else\n#endif /* RE_ENABLE_I18N */\n      if (type == OP_BACK_REF)\n\t{\n\t  Idx subexp_idx = dfa->nodes[node].opr.idx + 1;\n\t  naccepted = regs[subexp_idx].rm_eo - regs[subexp_idx].rm_so;\n\t  if (fs != NULL)\n\t    {\n\t      if (regs[subexp_idx].rm_so == -1 || regs[subexp_idx].rm_eo == -1)\n\t\treturn -1;\n\t      else if (naccepted)\n\t\t{\n\t\t  char *buf = (char *) re_string_get_buffer (&mctx->input);\n\t\t  if (memcmp (buf + regs[subexp_idx].rm_so, buf + *pidx,\n\t\t\t      naccepted) != 0)\n\t\t    return -1;\n\t\t}\n\t    }\n\n\t  if (naccepted == 0)\n\t    {\n\t      Idx dest_node;\n\t      ok = re_node_set_insert (eps_via_nodes, node);\n\t      if (BE (! ok, 0))\n\t\treturn -2;\n\t      dest_node = dfa->edests[node].elems[0];\n\t      if (re_node_set_contains (&mctx->state_log[*pidx]->nodes,\n\t\t\t\t\tdest_node))\n\t\treturn dest_node;\n\t    }\n\t}\n\n      if (naccepted != 0\n\t  || check_node_accept (mctx, dfa->nodes + node, *pidx))\n\t{\n\t  Idx dest_node = dfa->nexts[node];\n\t  *pidx = (naccepted == 0) ? *pidx + 1 : *pidx + naccepted;\n\t  if (fs && (*pidx > mctx->match_last || mctx->state_log[*pidx] == NULL\n\t\t     || !re_node_set_contains (&mctx->state_log[*pidx]->nodes,\n\t\t\t\t\t       dest_node)))\n\t    return -1;\n\t  re_node_set_empty (eps_via_nodes);\n\t  return dest_node;\n\t}\n    }\n  return -1;\n}",
      "lines": 101,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "push_fail_stack": {
      "start_point": [
        1361,
        18
      ],
      "end_point": [
        1385,
        1
      ],
      "content": "__attribute_warn_unused_result__\npush_fail_stack (struct re_fail_stack_t *fs, Idx str_idx, Idx dest_node,\n\t\t Idx nregs, regmatch_t *regs, re_node_set *eps_via_nodes)\n{\n  reg_errcode_t err;\n  Idx num = fs->num++;\n  if (fs->num == fs->alloc)\n    {\n      struct re_fail_stack_ent_t *new_array;\n      new_array = realloc (fs->stack, (sizeof (struct re_fail_stack_ent_t)\n\t\t\t\t       * fs->alloc * 2));\n      if (new_array == NULL)\n\treturn REG_ESPACE;\n      fs->alloc *= 2;\n      fs->stack = new_array;\n    }\n  fs->stack[num].idx = str_idx;\n  fs->stack[num].node = dest_node;\n  fs->stack[num].regs = re_malloc (regmatch_t, nregs);\n  if (fs->stack[num].regs == NULL)\n    return REG_ESPACE;\n  memcpy (fs->stack[num].regs, regs, sizeof (regmatch_t) * nregs);\n  err = re_node_set_init_copy (&fs->stack[num].eps_via_nodes, eps_via_nodes);\n  return err;\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "pop_fail_stack": {
      "start_point": [
        1387,
        0
      ],
      "end_point": [
        1400,
        1
      ],
      "content": "static Idx\ninternal_function\npop_fail_stack (struct re_fail_stack_t *fs, Idx *pidx, Idx nregs,\n\t\tregmatch_t *regs, re_node_set *eps_via_nodes)\n{\n  Idx num = --fs->num;\n  assert (num >= 0);\n  *pidx = fs->stack[num].idx;\n  memcpy (regs, fs->stack[num].regs, sizeof (regmatch_t) * nregs);\n  re_node_set_free (eps_via_nodes);\n  re_free (fs->stack[num].regs);\n  *eps_via_nodes = fs->stack[num].eps_via_nodes;\n  return fs->stack[num].node;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "set_regs": {
      "start_point": [
        1408,
        18
      ],
      "end_point": [
        1512,
        1
      ],
      "content": "__attribute_warn_unused_result__\nset_regs (const regex_t *preg, const re_match_context_t *mctx, size_t nmatch,\n\t  regmatch_t *pmatch, bool fl_backtrack)\n{\n  const re_dfa_t *dfa = preg->buffer;\n  Idx idx, cur_node;\n  re_node_set eps_via_nodes;\n  struct re_fail_stack_t *fs;\n  struct re_fail_stack_t fs_body = { 0, 2, NULL };\n  regmatch_t *prev_idx_match;\n  bool prev_idx_match_malloced = false;\n\n#ifdef DEBUG\n  assert (nmatch > 1);\n  assert (mctx->state_log != NULL);\n#endif\n  if (fl_backtrack)\n    {\n      fs = &fs_body;\n      fs->stack = re_malloc (struct re_fail_stack_ent_t, fs->alloc);\n      if (fs->stack == NULL)\n\treturn REG_ESPACE;\n    }\n  else\n    fs = NULL;\n\n  cur_node = dfa->init_node;\n  re_node_set_init_empty (&eps_via_nodes);\n\n  if (__libc_use_alloca (nmatch * sizeof (regmatch_t)))\n    prev_idx_match = (regmatch_t *) alloca (nmatch * sizeof (regmatch_t));\n  else\n    {\n      prev_idx_match = re_malloc (regmatch_t, nmatch);\n      if (prev_idx_match == NULL)\n\t{\n\t  free_fail_stack_return (fs);\n\t  return REG_ESPACE;\n\t}\n      prev_idx_match_malloced = true;\n    }\n  memcpy (prev_idx_match, pmatch, sizeof (regmatch_t) * nmatch);\n\n  for (idx = pmatch[0].rm_so; idx <= pmatch[0].rm_eo ;)\n    {\n      update_regs (dfa, pmatch, prev_idx_match, cur_node, idx, nmatch);\n\n      if (idx == pmatch[0].rm_eo && cur_node == mctx->last_node)\n\t{\n\t  Idx reg_idx;\n\t  if (fs)\n\t    {\n\t      for (reg_idx = 0; reg_idx < nmatch; ++reg_idx)\n\t\tif (pmatch[reg_idx].rm_so > -1 && pmatch[reg_idx].rm_eo == -1)\n\t\t  break;\n\t      if (reg_idx == nmatch)\n\t\t{\n\t\t  re_node_set_free (&eps_via_nodes);\n\t\t  if (prev_idx_match_malloced)\n\t\t    re_free (prev_idx_match);\n\t\t  return free_fail_stack_return (fs);\n\t\t}\n\t      cur_node = pop_fail_stack (fs, &idx, nmatch, pmatch,\n\t\t\t\t\t &eps_via_nodes);\n\t    }\n\t  else\n\t    {\n\t      re_node_set_free (&eps_via_nodes);\n\t      if (prev_idx_match_malloced)\n\t\tre_free (prev_idx_match);\n\t      return REG_NOERROR;\n\t    }\n\t}\n\n      /* Proceed to next node.  */\n      cur_node = proceed_next_node (mctx, nmatch, pmatch, &idx, cur_node,\n\t\t\t\t    &eps_via_nodes, fs);\n\n      if (BE (cur_node < 0, 0))\n\t{\n\t  if (BE (cur_node == -2, 0))\n\t    {\n\t      re_node_set_free (&eps_via_nodes);\n\t      if (prev_idx_match_malloced)\n\t\tre_free (prev_idx_match);\n\t      free_fail_stack_return (fs);\n\t      return REG_ESPACE;\n\t    }\n\t  if (fs)\n\t    cur_node = pop_fail_stack (fs, &idx, nmatch, pmatch,\n\t\t\t\t       &eps_via_nodes);\n\t  else\n\t    {\n\t      re_node_set_free (&eps_via_nodes);\n\t      if (prev_idx_match_malloced)\n\t\tre_free (prev_idx_match);\n\t      return REG_NOMATCH;\n\t    }\n\t}\n    }\n  re_node_set_free (&eps_via_nodes);\n  if (prev_idx_match_malloced)\n    re_free (prev_idx_match);\n  return free_fail_stack_return (fs);\n}",
      "lines": 105,
      "depth": 16,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "free_fail_stack_return": {
      "start_point": [
        1514,
        0
      ],
      "end_point": [
        1529,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nfree_fail_stack_return (struct re_fail_stack_t *fs)\n{\n  if (fs)\n    {\n      Idx fs_idx;\n      for (fs_idx = 0; fs_idx < fs->num; ++fs_idx)\n\t{\n\t  re_node_set_free (&fs->stack[fs_idx].eps_via_nodes);\n\t  re_free (fs->stack[fs_idx].regs);\n\t}\n      re_free (fs->stack);\n    }\n  return REG_NOERROR;\n}",
      "lines": 16,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "update_regs": {
      "start_point": [
        1531,
        0
      ],
      "end_point": [
        1578,
        1
      ],
      "content": "static void\ninternal_function\nupdate_regs (const re_dfa_t *dfa, regmatch_t *pmatch,\n\t     regmatch_t *prev_idx_match, Idx cur_node, Idx cur_idx, Idx nmatch)\n{\n  int type = dfa->nodes[cur_node].type;\n  if (type == OP_OPEN_SUBEXP)\n    {\n      Idx reg_num = dfa->nodes[cur_node].opr.idx + 1;\n\n      /* We are at the first node of this sub expression.  */\n      if (reg_num < nmatch)\n\t{\n\t  pmatch[reg_num].rm_so = cur_idx;\n\t  pmatch[reg_num].rm_eo = -1;\n\t}\n    }\n  else if (type == OP_CLOSE_SUBEXP)\n    {\n      Idx reg_num = dfa->nodes[cur_node].opr.idx + 1;\n      if (reg_num < nmatch)\n\t{\n\t  /* We are at the last node of this sub expression.  */\n\t  if (pmatch[reg_num].rm_so < cur_idx)\n\t    {\n\t      pmatch[reg_num].rm_eo = cur_idx;\n\t      /* This is a non-empty match or we are not inside an optional\n\t\t subexpression.  Accept this right away.  */\n\t      memcpy (prev_idx_match, pmatch, sizeof (regmatch_t) * nmatch);\n\t    }\n\t  else\n\t    {\n\t      if (dfa->nodes[cur_node].opt_subexp\n\t\t  && prev_idx_match[reg_num].rm_so != -1)\n\t\t/* We transited through an empty match for an optional\n\t\t   subexpression, like (a?)*, and this is not the subexp's\n\t\t   first match.  Copy back the old content of the registers\n\t\t   so that matches of an inner subexpression are undone as\n\t\t   well, like in ((a?))*.  */\n\t\tmemcpy (pmatch, prev_idx_match, sizeof (regmatch_t) * nmatch);\n\t      else\n\t\t/* We completed a subexpression, but it may be part of\n\t\t   an optional one, so do not update PREV_IDX_MATCH.  */\n\t\tpmatch[reg_num].rm_eo = cur_idx;\n\t    }\n\t}\n    }\n}",
      "lines": 48,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "sift_states_backward": {
      "start_point": [
        1603,
        0
      ],
      "end_point": [
        1659,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nsift_states_backward (const re_match_context_t *mctx, re_sift_context_t *sctx)\n{\n  reg_errcode_t err;\n  int null_cnt = 0;\n  Idx str_idx = sctx->last_str_idx;\n  re_node_set cur_dest;\n\n#ifdef DEBUG\n  assert (mctx->state_log != NULL && mctx->state_log[str_idx] != NULL);\n#endif\n\n  /* Build sifted state_log[str_idx].  It has the nodes which can epsilon\n     transit to the last_node and the last_node itself.  */\n  err = re_node_set_init_1 (&cur_dest, sctx->last_node);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n  err = update_cur_sifted_state (mctx, sctx, str_idx, &cur_dest);\n  if (BE (err != REG_NOERROR, 0))\n    goto free_return;\n\n  /* Then check each states in the state_log.  */\n  while (str_idx > 0)\n    {\n      /* Update counters.  */\n      null_cnt = (sctx->sifted_states[str_idx] == NULL) ? null_cnt + 1 : 0;\n      if (null_cnt > mctx->max_mb_elem_len)\n\t{\n\t  memset (sctx->sifted_states, '\\0',\n\t\t  sizeof (re_dfastate_t *) * str_idx);\n\t  re_node_set_free (&cur_dest);\n\t  return REG_NOERROR;\n\t}\n      re_node_set_empty (&cur_dest);\n      --str_idx;\n\n      if (mctx->state_log[str_idx])\n\t{\n\t  err = build_sifted_states (mctx, sctx, str_idx, &cur_dest);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    goto free_return;\n\t}\n\n      /* Add all the nodes which satisfy the following conditions:\n\t - It can epsilon transit to a node in CUR_DEST.\n\t - It is in CUR_SRC.\n\t And update state_log.  */\n      err = update_cur_sifted_state (mctx, sctx, str_idx, &cur_dest);\n      if (BE (err != REG_NOERROR, 0))\n\tgoto free_return;\n    }\n  err = REG_NOERROR;\n free_return:\n  re_node_set_free (&cur_dest);\n  return err;\n}",
      "lines": 57,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "build_sifted_states": {
      "start_point": [
        1662,
        18
      ],
      "end_point": [
        1719,
        1
      ],
      "content": "__attribute_warn_unused_result__\nbuild_sifted_states (const re_match_context_t *mctx, re_sift_context_t *sctx,\n\t\t     Idx str_idx, re_node_set *cur_dest)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  const re_node_set *cur_src = &mctx->state_log[str_idx]->non_eps_nodes;\n  Idx i;\n\n  /* Then build the next sifted state.\n     We build the next sifted state on 'cur_dest', and update\n     'sifted_states[str_idx]' with 'cur_dest'.\n     Note:\n     'cur_dest' is the sifted state from 'state_log[str_idx + 1]'.\n     'cur_src' points the node_set of the old 'state_log[str_idx]'\n     (with the epsilon nodes pre-filtered out).  */\n  for (i = 0; i < cur_src->nelem; i++)\n    {\n      Idx prev_node = cur_src->elems[i];\n      int naccepted = 0;\n      bool ok;\n\n#ifdef DEBUG\n      re_token_type_t type = dfa->nodes[prev_node].type;\n      assert (!IS_EPSILON_NODE (type));\n#endif\n#ifdef RE_ENABLE_I18N\n      /* If the node may accept \"multi byte\".  */\n      if (dfa->nodes[prev_node].accept_mb)\n\tnaccepted = sift_states_iter_mb (mctx, sctx, prev_node,\n\t\t\t\t\t str_idx, sctx->last_str_idx);\n#endif /* RE_ENABLE_I18N */\n\n      /* We don't check backreferences here.\n\t See update_cur_sifted_state().  */\n      if (!naccepted\n\t  && check_node_accept (mctx, dfa->nodes + prev_node, str_idx)\n\t  && STATE_NODE_CONTAINS (sctx->sifted_states[str_idx + 1],\n\t\t\t\t  dfa->nexts[prev_node]))\n\tnaccepted = 1;\n\n      if (naccepted == 0)\n\tcontinue;\n\n      if (sctx->limits.nelem)\n\t{\n\t  Idx to_idx = str_idx + naccepted;\n\t  if (check_dst_limits (mctx, &sctx->limits,\n\t\t\t\tdfa->nexts[prev_node], to_idx,\n\t\t\t\tprev_node, str_idx))\n\t    continue;\n\t}\n      ok = re_node_set_insert (cur_dest, prev_node);\n      if (BE (! ok, 0))\n\treturn REG_ESPACE;\n    }\n\n  return REG_NOERROR;\n}",
      "lines": 58,
      "depth": 13,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "clean_state_log_if_needed": {
      "start_point": [
        1723,
        0
      ],
      "end_point": [
        1747,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nclean_state_log_if_needed (re_match_context_t *mctx, Idx next_state_log_idx)\n{\n  Idx top = mctx->state_log_top;\n\n  if ((next_state_log_idx >= mctx->input.bufs_len\n       && mctx->input.bufs_len < mctx->input.len)\n      || (next_state_log_idx >= mctx->input.valid_len\n\t  && mctx->input.valid_len < mctx->input.len))\n    {\n      reg_errcode_t err;\n      err = extend_buffers (mctx, next_state_log_idx + 1);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n    }\n\n  if (top < next_state_log_idx)\n    {\n      memset (mctx->state_log + top + 1, '\\0',\n\t      sizeof (re_dfastate_t *) * (next_state_log_idx - top));\n      mctx->state_log_top = next_state_log_idx;\n    }\n  return REG_NOERROR;\n}",
      "lines": 25,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "merge_state_array": {
      "start_point": [
        1749,
        0
      ],
      "end_point": [
        1774,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nmerge_state_array (const re_dfa_t *dfa, re_dfastate_t **dst,\n\t\t   re_dfastate_t **src, Idx num)\n{\n  Idx st_idx;\n  reg_errcode_t err;\n  for (st_idx = 0; st_idx < num; ++st_idx)\n    {\n      if (dst[st_idx] == NULL)\n\tdst[st_idx] = src[st_idx];\n      else if (src[st_idx] != NULL)\n\t{\n\t  re_node_set merged_set;\n\t  err = re_node_set_init_union (&merged_set, &dst[st_idx]->nodes,\n\t\t\t\t\t&src[st_idx]->nodes);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t  dst[st_idx] = re_acquire_state (&err, dfa, &merged_set);\n\t  re_node_set_free (&merged_set);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 26,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "update_cur_sifted_state": {
      "start_point": [
        1776,
        0
      ],
      "end_point": [
        1822,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nupdate_cur_sifted_state (const re_match_context_t *mctx,\n\t\t\t re_sift_context_t *sctx, Idx str_idx,\n\t\t\t re_node_set *dest_nodes)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err = REG_NOERROR;\n  const re_node_set *candidates;\n  candidates = ((mctx->state_log[str_idx] == NULL) ? NULL\n\t\t: &mctx->state_log[str_idx]->nodes);\n\n  if (dest_nodes->nelem == 0)\n    sctx->sifted_states[str_idx] = NULL;\n  else\n    {\n      if (candidates)\n\t{\n\t  /* At first, add the nodes which can epsilon transit to a node in\n\t     DEST_NODE.  */\n\t  err = add_epsilon_src_nodes (dfa, dest_nodes, candidates);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\n\t  /* Then, check the limitations in the current sift_context.  */\n\t  if (sctx->limits.nelem)\n\t    {\n\t      err = check_subexp_limits (dfa, dest_nodes, candidates, &sctx->limits,\n\t\t\t\t\t mctx->bkref_ents, str_idx);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\treturn err;\n\t    }\n\t}\n\n      sctx->sifted_states[str_idx] = re_acquire_state (&err, dfa, dest_nodes);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n    }\n\n  if (candidates && mctx->state_log[str_idx]->has_backref)\n    {\n      err = sift_states_bkref (mctx, sctx, str_idx, candidates);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n    }\n  return REG_NOERROR;\n}",
      "lines": 47,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "add_epsilon_src_nodes": {
      "start_point": [
        1825,
        18
      ],
      "end_point": [
        1851,
        1
      ],
      "content": "__attribute_warn_unused_result__\nadd_epsilon_src_nodes (const re_dfa_t *dfa, re_node_set *dest_nodes,\n\t\t       const re_node_set *candidates)\n{\n  reg_errcode_t err = REG_NOERROR;\n  Idx i;\n\n  re_dfastate_t *state = re_acquire_state (&err, dfa, dest_nodes);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n\n  if (!state->inveclosure.alloc)\n    {\n      err = re_node_set_alloc (&state->inveclosure, dest_nodes->nelem);\n      if (BE (err != REG_NOERROR, 0))\n\treturn REG_ESPACE;\n      for (i = 0; i < dest_nodes->nelem; i++)\n\t{\n\t  err = re_node_set_merge (&state->inveclosure,\n\t\t\t\t   dfa->inveclosures + dest_nodes->elems[i]);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return REG_ESPACE;\n\t}\n    }\n  return re_node_set_add_intersect (dest_nodes, candidates,\n\t\t\t\t    &state->inveclosure);\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "sub_epsilon_src_nodes": {
      "start_point": [
        1853,
        0
      ],
      "end_point": [
        1900,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nsub_epsilon_src_nodes (const re_dfa_t *dfa, Idx node, re_node_set *dest_nodes,\n\t\t       const re_node_set *candidates)\n{\n    Idx ecl_idx;\n    reg_errcode_t err;\n    re_node_set *inv_eclosure = dfa->inveclosures + node;\n    re_node_set except_nodes;\n    re_node_set_init_empty (&except_nodes);\n    for (ecl_idx = 0; ecl_idx < inv_eclosure->nelem; ++ecl_idx)\n      {\n\tIdx cur_node = inv_eclosure->elems[ecl_idx];\n\tif (cur_node == node)\n\t  continue;\n\tif (IS_EPSILON_NODE (dfa->nodes[cur_node].type))\n\t  {\n\t    Idx edst1 = dfa->edests[cur_node].elems[0];\n\t    Idx edst2 = ((dfa->edests[cur_node].nelem > 1)\n\t\t\t ? dfa->edests[cur_node].elems[1] : -1);\n\t    if ((!re_node_set_contains (inv_eclosure, edst1)\n\t\t && re_node_set_contains (dest_nodes, edst1))\n\t\t|| (edst2 > 0\n\t\t    && !re_node_set_contains (inv_eclosure, edst2)\n\t\t    && re_node_set_contains (dest_nodes, edst2)))\n\t      {\n\t\terr = re_node_set_add_intersect (&except_nodes, candidates,\n\t\t\t\t\t\t dfa->inveclosures + cur_node);\n\t\tif (BE (err != REG_NOERROR, 0))\n\t\t  {\n\t\t    re_node_set_free (&except_nodes);\n\t\t    return err;\n\t\t  }\n\t      }\n\t  }\n      }\n    for (ecl_idx = 0; ecl_idx < inv_eclosure->nelem; ++ecl_idx)\n      {\n\tIdx cur_node = inv_eclosure->elems[ecl_idx];\n\tif (!re_node_set_contains (&except_nodes, cur_node))\n\t  {\n\t    Idx idx = re_node_set_contains (dest_nodes, cur_node) - 1;\n\t    re_node_set_remove_at (dest_nodes, idx);\n\t  }\n      }\n    re_node_set_free (&except_nodes);\n    return REG_NOERROR;\n}",
      "lines": 48,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "check_dst_limits": {
      "start_point": [
        1902,
        0
      ],
      "end_point": [
        1936,
        1
      ],
      "content": "static bool\ninternal_function\ncheck_dst_limits (const re_match_context_t *mctx, const re_node_set *limits,\n\t\t  Idx dst_node, Idx dst_idx, Idx src_node, Idx src_idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx lim_idx, src_pos, dst_pos;\n\n  Idx dst_bkref_idx = search_cur_bkref_entry (mctx, dst_idx);\n  Idx src_bkref_idx = search_cur_bkref_entry (mctx, src_idx);\n  for (lim_idx = 0; lim_idx < limits->nelem; ++lim_idx)\n    {\n      Idx subexp_idx;\n      struct re_backref_cache_entry *ent;\n      ent = mctx->bkref_ents + limits->elems[lim_idx];\n      subexp_idx = dfa->nodes[ent->node].opr.idx;\n\n      dst_pos = check_dst_limits_calc_pos (mctx, limits->elems[lim_idx],\n\t\t\t\t\t   subexp_idx, dst_node, dst_idx,\n\t\t\t\t\t   dst_bkref_idx);\n      src_pos = check_dst_limits_calc_pos (mctx, limits->elems[lim_idx],\n\t\t\t\t\t   subexp_idx, src_node, src_idx,\n\t\t\t\t\t   src_bkref_idx);\n\n      /* In case of:\n\t <src> <dst> ( <subexp> )\n\t ( <subexp> ) <src> <dst>\n\t ( <subexp1> <src> <subexp2> <dst> <subexp3> )  */\n      if (src_pos == dst_pos)\n\tcontinue; /* This is unrelated limitation.  */\n      else\n\treturn true;\n    }\n  return false;\n}",
      "lines": 35,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool",
        "internal_function",
        "internal_function"
      ]
    },
    "check_dst_limits_calc_pos_1": {
      "start_point": [
        1938,
        0
      ],
      "end_point": [
        2018,
        1
      ],
      "content": "static int\ninternal_function\ncheck_dst_limits_calc_pos_1 (const re_match_context_t *mctx, int boundaries,\n\t\t\t     Idx subexp_idx, Idx from_node, Idx bkref_idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  const re_node_set *eclosures = dfa->eclosures + from_node;\n  Idx node_idx;\n\n  /* Else, we are on the boundary: examine the nodes on the epsilon\n     closure.  */\n  for (node_idx = 0; node_idx < eclosures->nelem; ++node_idx)\n    {\n      Idx node = eclosures->elems[node_idx];\n      switch (dfa->nodes[node].type)\n\t{\n\tcase OP_BACK_REF:\n\t  if (bkref_idx != -1)\n\t    {\n\t      struct re_backref_cache_entry *ent = mctx->bkref_ents + bkref_idx;\n\t      do\n\t\t{\n\t\t  Idx dst;\n\t\t  int cpos;\n\n\t\t  if (ent->node != node)\n\t\t    continue;\n\n\t\t  if (subexp_idx < BITSET_WORD_BITS\n\t\t      && !(ent->eps_reachable_subexps_map\n\t\t\t   & ((bitset_word_t) 1 << subexp_idx)))\n\t\t    continue;\n\n\t\t  /* Recurse trying to reach the OP_OPEN_SUBEXP and\n\t\t     OP_CLOSE_SUBEXP cases below.  But, if the\n\t\t     destination node is the same node as the source\n\t\t     node, don't recurse because it would cause an\n\t\t     infinite loop: a regex that exhibits this behavior\n\t\t     is ()\\1*\\1*  */\n\t\t  dst = dfa->edests[node].elems[0];\n\t\t  if (dst == from_node)\n\t\t    {\n\t\t      if (boundaries & 1)\n\t\t\treturn -1;\n\t\t      else /* if (boundaries & 2) */\n\t\t\treturn 0;\n\t\t    }\n\n\t\t  cpos =\n\t\t    check_dst_limits_calc_pos_1 (mctx, boundaries, subexp_idx,\n\t\t\t\t\t\t dst, bkref_idx);\n\t\t  if (cpos == -1 /* && (boundaries & 1) */)\n\t\t    return -1;\n\t\t  if (cpos == 0 && (boundaries & 2))\n\t\t    return 0;\n\n\t\t  if (subexp_idx < BITSET_WORD_BITS)\n\t\t    ent->eps_reachable_subexps_map\n\t\t      &= ~((bitset_word_t) 1 << subexp_idx);\n\t\t}\n\t      while (ent++->more);\n\t    }\n\t  break;\n\n\tcase OP_OPEN_SUBEXP:\n\t  if ((boundaries & 1) && subexp_idx == dfa->nodes[node].opr.idx)\n\t    return -1;\n\t  break;\n\n\tcase OP_CLOSE_SUBEXP:\n\t  if ((boundaries & 2) && subexp_idx == dfa->nodes[node].opr.idx)\n\t    return 0;\n\t  break;\n\n\tdefault:\n\t    break;\n\t}\n    }\n\n  return (boundaries & 2) ? 1 : 0;\n}",
      "lines": 81,
      "depth": 22,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "check_dst_limits_calc_pos": {
      "start_point": [
        2020,
        0
      ],
      "end_point": [
        2045,
        1
      ],
      "content": "static int\ninternal_function\ncheck_dst_limits_calc_pos (const re_match_context_t *mctx, Idx limit,\n\t\t\t   Idx subexp_idx, Idx from_node, Idx str_idx,\n\t\t\t   Idx bkref_idx)\n{\n  struct re_backref_cache_entry *lim = mctx->bkref_ents + limit;\n  int boundaries;\n\n  /* If we are outside the range of the subexpression, return -1 or 1.  */\n  if (str_idx < lim->subexp_from)\n    return -1;\n\n  if (lim->subexp_to < str_idx)\n    return 1;\n\n  /* If we are within the subexpression, return 0.  */\n  boundaries = (str_idx == lim->subexp_from);\n  boundaries |= (str_idx == lim->subexp_to) << 1;\n  if (boundaries == 0)\n    return 0;\n\n  /* Else, examine epsilon closure.  */\n  return check_dst_limits_calc_pos_1 (mctx, boundaries, subexp_idx,\n\t\t\t\t      from_node, bkref_idx);\n}",
      "lines": 26,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "check_subexp_limits": {
      "start_point": [
        2050,
        0
      ],
      "end_point": [
        2136,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\ncheck_subexp_limits (const re_dfa_t *dfa, re_node_set *dest_nodes,\n\t\t     const re_node_set *candidates, re_node_set *limits,\n\t\t     struct re_backref_cache_entry *bkref_ents, Idx str_idx)\n{\n  reg_errcode_t err;\n  Idx node_idx, lim_idx;\n\n  for (lim_idx = 0; lim_idx < limits->nelem; ++lim_idx)\n    {\n      Idx subexp_idx;\n      struct re_backref_cache_entry *ent;\n      ent = bkref_ents + limits->elems[lim_idx];\n\n      if (str_idx <= ent->subexp_from || ent->str_idx < str_idx)\n\tcontinue; /* This is unrelated limitation.  */\n\n      subexp_idx = dfa->nodes[ent->node].opr.idx;\n      if (ent->subexp_to == str_idx)\n\t{\n\t  Idx ops_node = -1;\n\t  Idx cls_node = -1;\n\t  for (node_idx = 0; node_idx < dest_nodes->nelem; ++node_idx)\n\t    {\n\t      Idx node = dest_nodes->elems[node_idx];\n\t      re_token_type_t type = dfa->nodes[node].type;\n\t      if (type == OP_OPEN_SUBEXP\n\t\t  && subexp_idx == dfa->nodes[node].opr.idx)\n\t\tops_node = node;\n\t      else if (type == OP_CLOSE_SUBEXP\n\t\t       && subexp_idx == dfa->nodes[node].opr.idx)\n\t\tcls_node = node;\n\t    }\n\n\t  /* Check the limitation of the open subexpression.  */\n\t  /* Note that (ent->subexp_to = str_idx != ent->subexp_from).  */\n\t  if (ops_node >= 0)\n\t    {\n\t      err = sub_epsilon_src_nodes (dfa, ops_node, dest_nodes,\n\t\t\t\t\t   candidates);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\treturn err;\n\t    }\n\n\t  /* Check the limitation of the close subexpression.  */\n\t  if (cls_node >= 0)\n\t    for (node_idx = 0; node_idx < dest_nodes->nelem; ++node_idx)\n\t      {\n\t\tIdx node = dest_nodes->elems[node_idx];\n\t\tif (!re_node_set_contains (dfa->inveclosures + node,\n\t\t\t\t\t   cls_node)\n\t\t    && !re_node_set_contains (dfa->eclosures + node,\n\t\t\t\t\t      cls_node))\n\t\t  {\n\t\t    /* It is against this limitation.\n\t\t       Remove it form the current sifted state.  */\n\t\t    err = sub_epsilon_src_nodes (dfa, node, dest_nodes,\n\t\t\t\t\t\t candidates);\n\t\t    if (BE (err != REG_NOERROR, 0))\n\t\t      return err;\n\t\t    --node_idx;\n\t\t  }\n\t      }\n\t}\n      else /* (ent->subexp_to != str_idx)  */\n\t{\n\t  for (node_idx = 0; node_idx < dest_nodes->nelem; ++node_idx)\n\t    {\n\t      Idx node = dest_nodes->elems[node_idx];\n\t      re_token_type_t type = dfa->nodes[node].type;\n\t      if (type == OP_CLOSE_SUBEXP || type == OP_OPEN_SUBEXP)\n\t\t{\n\t\t  if (subexp_idx != dfa->nodes[node].opr.idx)\n\t\t    continue;\n\t\t  /* It is against this limitation.\n\t\t     Remove it form the current sifted state.  */\n\t\t  err = sub_epsilon_src_nodes (dfa, node, dest_nodes,\n\t\t\t\t\t       candidates);\n\t\t  if (BE (err != REG_NOERROR, 0))\n\t\t    return err;\n\t\t}\n\t    }\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 87,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "sift_states_bkref": {
      "start_point": [
        2139,
        18
      ],
      "end_point": [
        2234,
        1
      ],
      "content": "__attribute_warn_unused_result__\nsift_states_bkref (const re_match_context_t *mctx, re_sift_context_t *sctx,\n\t\t   Idx str_idx, const re_node_set *candidates)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err;\n  Idx node_idx, node;\n  re_sift_context_t local_sctx;\n  Idx first_idx = search_cur_bkref_entry (mctx, str_idx);\n\n  if (first_idx == -1)\n    return REG_NOERROR;\n\n  local_sctx.sifted_states = NULL; /* Mark that it hasn't been initialized.  */\n\n  for (node_idx = 0; node_idx < candidates->nelem; ++node_idx)\n    {\n      Idx enabled_idx;\n      re_token_type_t type;\n      struct re_backref_cache_entry *entry;\n      node = candidates->elems[node_idx];\n      type = dfa->nodes[node].type;\n      /* Avoid infinite loop for the REs like \"()\\1+\".  */\n      if (node == sctx->last_node && str_idx == sctx->last_str_idx)\n\tcontinue;\n      if (type != OP_BACK_REF)\n\tcontinue;\n\n      entry = mctx->bkref_ents + first_idx;\n      enabled_idx = first_idx;\n      do\n\t{\n\t  Idx subexp_len;\n\t  Idx to_idx;\n\t  Idx dst_node;\n\t  bool ok;\n\t  re_dfastate_t *cur_state;\n\n\t  if (entry->node != node)\n\t    continue;\n\t  subexp_len = entry->subexp_to - entry->subexp_from;\n\t  to_idx = str_idx + subexp_len;\n\t  dst_node = (subexp_len ? dfa->nexts[node]\n\t\t      : dfa->edests[node].elems[0]);\n\n\t  if (to_idx > sctx->last_str_idx\n\t      || sctx->sifted_states[to_idx] == NULL\n\t      || !STATE_NODE_CONTAINS (sctx->sifted_states[to_idx], dst_node)\n\t      || check_dst_limits (mctx, &sctx->limits, node,\n\t\t\t\t   str_idx, dst_node, to_idx))\n\t    continue;\n\n\t  if (local_sctx.sifted_states == NULL)\n\t    {\n\t      local_sctx = *sctx;\n\t      err = re_node_set_init_copy (&local_sctx.limits, &sctx->limits);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t    }\n\t  local_sctx.last_node = node;\n\t  local_sctx.last_str_idx = str_idx;\n\t  ok = re_node_set_insert (&local_sctx.limits, enabled_idx);\n\t  if (BE (! ok, 0))\n\t    {\n\t      err = REG_ESPACE;\n\t      goto free_return;\n\t    }\n\t  cur_state = local_sctx.sifted_states[str_idx];\n\t  err = sift_states_backward (mctx, &local_sctx);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    goto free_return;\n\t  if (sctx->limited_states != NULL)\n\t    {\n\t      err = merge_state_array (dfa, sctx->limited_states,\n\t\t\t\t       local_sctx.sifted_states,\n\t\t\t\t       str_idx + 1);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t    }\n\t  local_sctx.sifted_states[str_idx] = cur_state;\n\t  re_node_set_remove (&local_sctx.limits, enabled_idx);\n\n\t  /* mctx->bkref_ents may have changed, reload the pointer.  */\n\t  entry = mctx->bkref_ents + enabled_idx;\n\t}\n      while (enabled_idx++, entry++->more);\n    }\n  err = REG_NOERROR;\n free_return:\n  if (local_sctx.sifted_states != NULL)\n    {\n      re_node_set_free (&local_sctx.limits);\n    }\n\n  return err;\n}",
      "lines": 96,
      "depth": 16,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "sift_states_iter_mb": {
      "start_point": [
        2238,
        0
      ],
      "end_point": [
        2257,
        1
      ],
      "content": "static int\ninternal_function\nsift_states_iter_mb (const re_match_context_t *mctx, re_sift_context_t *sctx,\n\t\t     Idx node_idx, Idx str_idx, Idx max_str_idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  int naccepted;\n  /* Check the node can accept \"multi byte\".  */\n  naccepted = check_node_accept_bytes (dfa, node_idx, &mctx->input, str_idx);\n  if (naccepted > 0 && str_idx + naccepted <= max_str_idx &&\n      !STATE_NODE_CONTAINS (sctx->sifted_states[str_idx + naccepted],\n\t\t\t    dfa->nexts[node_idx]))\n    /* The node can't accept the \"multi byte\", or the\n       destination was already thrown away, then the node\n       could't accept the current input \"multi byte\".   */\n    naccepted = 0;\n  /* Otherwise, it is sure that the node could accept\n     'naccepted' bytes input.  */\n  return naccepted;\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "transit_state": {
      "start_point": [
        2269,
        18
      ],
      "end_point": [
        2323,
        1
      ],
      "content": "__attribute_warn_unused_result__\ntransit_state (reg_errcode_t *err, re_match_context_t *mctx,\n\t       re_dfastate_t *state)\n{\n  re_dfastate_t **trtable;\n  unsigned char ch;\n\n#ifdef RE_ENABLE_I18N\n  /* If the current state can accept multibyte.  */\n  if (BE (state->accept_mb, 0))\n    {\n      *err = transit_state_mb (mctx, state);\n      if (BE (*err != REG_NOERROR, 0))\n\treturn NULL;\n    }\n#endif /* RE_ENABLE_I18N */\n\n  /* Then decide the next state with the single byte.  */\n#if 0\n  if (0)\n    /* don't use transition table  */\n    return transit_state_sb (err, mctx, state);\n#endif\n\n  /* Use transition table  */\n  ch = re_string_fetch_byte (&mctx->input);\n  for (;;)\n    {\n      trtable = state->trtable;\n      if (BE (trtable != NULL, 1))\n\treturn trtable[ch];\n\n      trtable = state->word_trtable;\n      if (BE (trtable != NULL, 1))\n\t{\n\t  unsigned int context;\n\t  context\n\t    = re_string_context_at (&mctx->input,\n\t\t\t\t    re_string_cur_idx (&mctx->input) - 1,\n\t\t\t\t    mctx->eflags);\n\t  if (IS_WORD_CONTEXT (context))\n\t    return trtable[ch + SBC_MAX];\n\t  else\n\t    return trtable[ch];\n\t}\n\n      if (!build_trtable (mctx->dfa, state))\n\t{\n\t  *err = REG_ESPACE;\n\t  return NULL;\n\t}\n\n      /* Retry, we now have a transition table.  */\n    }\n}",
      "lines": 55,
      "depth": 16,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "merge_state_with_log": {
      "start_point": [
        2326,
        0
      ],
      "end_point": [
        2400,
        1
      ],
      "content": "static re_dfastate_t *\ninternal_function\nmerge_state_with_log (reg_errcode_t *err, re_match_context_t *mctx,\n\t\t      re_dfastate_t *next_state)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx cur_idx = re_string_cur_idx (&mctx->input);\n\n  if (cur_idx > mctx->state_log_top)\n    {\n      mctx->state_log[cur_idx] = next_state;\n      mctx->state_log_top = cur_idx;\n    }\n  else if (mctx->state_log[cur_idx] == 0)\n    {\n      mctx->state_log[cur_idx] = next_state;\n    }\n  else\n    {\n      re_dfastate_t *pstate;\n      unsigned int context;\n      re_node_set next_nodes, *log_nodes, *table_nodes = NULL;\n      /* If (state_log[cur_idx] != 0), it implies that cur_idx is\n\t the destination of a multibyte char/collating element/\n\t back reference.  Then the next state is the union set of\n\t these destinations and the results of the transition table.  */\n      pstate = mctx->state_log[cur_idx];\n      log_nodes = pstate->entrance_nodes;\n      if (next_state != NULL)\n\t{\n\t  table_nodes = next_state->entrance_nodes;\n\t  *err = re_node_set_init_union (&next_nodes, table_nodes,\n\t\t\t\t\t     log_nodes);\n\t  if (BE (*err != REG_NOERROR, 0))\n\t    return NULL;\n\t}\n      else\n\tnext_nodes = *log_nodes;\n      /* Note: We already add the nodes of the initial state,\n\t then we don't need to add them here.  */\n\n      context = re_string_context_at (&mctx->input,\n\t\t\t\t      re_string_cur_idx (&mctx->input) - 1,\n\t\t\t\t      mctx->eflags);\n      next_state = mctx->state_log[cur_idx]\n\t= re_acquire_state_context (err, dfa, &next_nodes, context);\n      /* We don't need to check errors here, since the return value of\n\t this function is next_state and ERR is already set.  */\n\n      if (table_nodes != NULL)\n\tre_node_set_free (&next_nodes);\n    }\n\n  if (BE (dfa->nbackref, 0) && next_state != NULL)\n    {\n      /* Check OP_OPEN_SUBEXP in the current state in case that we use them\n\t later.  We must check them here, since the back references in the\n\t next state might use them.  */\n      *err = check_subexp_matching_top (mctx, &next_state->nodes,\n\t\t\t\t\tcur_idx);\n      if (BE (*err != REG_NOERROR, 0))\n\treturn NULL;\n\n      /* If the next state has back references.  */\n      if (next_state->has_backref)\n\t{\n\t  *err = transit_state_bkref (mctx, &next_state->nodes);\n\t  if (BE (*err != REG_NOERROR, 0))\n\t    return NULL;\n\t  next_state = mctx->state_log[cur_idx];\n\t}\n    }\n\n  return next_state;\n}",
      "lines": 75,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "re_dfastate_t",
        "*\ninternal_function\nmerge_state_with_log (reg_errcode_t *err, re_match_context_t *mctx,\n\t\t      re_dfastate_t *next_state)",
        "*",
        "internal_function",
        "internal_function"
      ]
    },
    "find_recover_state": {
      "start_point": [
        2405,
        0
      ],
      "end_point": [
        2427,
        1
      ],
      "content": "static re_dfastate_t *\ninternal_function\nfind_recover_state (reg_errcode_t *err, re_match_context_t *mctx)\n{\n  re_dfastate_t *cur_state;\n  do\n    {\n      Idx max = mctx->state_log_top;\n      Idx cur_str_idx = re_string_cur_idx (&mctx->input);\n\n      do\n\t{\n\t  if (++cur_str_idx > max)\n\t    return NULL;\n\t  re_string_skip_bytes (&mctx->input, 1);\n\t}\n      while (mctx->state_log[cur_str_idx] == NULL);\n\n      cur_state = merge_state_with_log (err, mctx, NULL);\n    }\n  while (*err == REG_NOERROR && cur_state == NULL);\n  return cur_state;\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "re_dfastate_t",
        "*\ninternal_function\nfind_recover_state (reg_errcode_t *err, re_match_context_t *mctx)",
        "*",
        "internal_function",
        "internal_function"
      ]
    },
    "check_subexp_matching_top": {
      "start_point": [
        2436,
        0
      ],
      "end_point": [
        2464,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\ncheck_subexp_matching_top (re_match_context_t *mctx, re_node_set *cur_nodes,\n\t\t\t   Idx str_idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx node_idx;\n  reg_errcode_t err;\n\n  /* TODO: This isn't efficient.\n\t   Because there might be more than one nodes whose types are\n\t   OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all\n\t   nodes.\n\t   E.g. RE: (a){2}  */\n  for (node_idx = 0; node_idx < cur_nodes->nelem; ++node_idx)\n    {\n      Idx node = cur_nodes->elems[node_idx];\n      if (dfa->nodes[node].type == OP_OPEN_SUBEXP\n\t  && dfa->nodes[node].opr.idx < BITSET_WORD_BITS\n\t  && (dfa->used_bkref_map\n\t      & ((bitset_word_t) 1 << dfa->nodes[node].opr.idx)))\n\t{\n\t  err = match_ctx_add_subtop (mctx, node, str_idx);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 29,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "transit_state_sb": {
      "start_point": [
        2470,
        0
      ],
      "end_point": [
        2505,
        1
      ],
      "content": "static re_dfastate_t *\ntransit_state_sb (reg_errcode_t *err, re_match_context_t *mctx,\n\t\t  re_dfastate_t *state)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  re_node_set next_nodes;\n  re_dfastate_t *next_state;\n  Idx node_cnt, cur_str_idx = re_string_cur_idx (&mctx->input);\n  unsigned int context;\n\n  *err = re_node_set_alloc (&next_nodes, state->nodes.nelem + 1);\n  if (BE (*err != REG_NOERROR, 0))\n    return NULL;\n  for (node_cnt = 0; node_cnt < state->nodes.nelem; ++node_cnt)\n    {\n      Idx cur_node = state->nodes.elems[node_cnt];\n      if (check_node_accept (mctx, dfa->nodes + cur_node, cur_str_idx))\n\t{\n\t  *err = re_node_set_merge (&next_nodes,\n\t\t\t\t    dfa->eclosures + dfa->nexts[cur_node]);\n\t  if (BE (*err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return NULL;\n\t    }\n\t}\n    }\n  context = re_string_context_at (&mctx->input, cur_str_idx, mctx->eflags);\n  next_state = re_acquire_state_context (err, dfa, &next_nodes, context);\n  /* We don't need to check errors here, since the return value of\n     this function is next_state and ERR is already set.  */\n\n  re_node_set_free (&next_nodes);\n  re_string_skip_bytes (&mctx->input, 1);\n  return next_state;\n}",
      "lines": 36,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "re_dfastate_t",
        "*\ntransit_state_sb (reg_errcode_t *err, re_match_context_t *mctx,\n\t\t  re_dfastate_t *state)",
        "*"
      ]
    },
    "transit_state_mb": {
      "start_point": [
        2509,
        0
      ],
      "end_point": [
        2577,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\ntransit_state_mb (re_match_context_t *mctx, re_dfastate_t *pstate)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err;\n  Idx i;\n\n  for (i = 0; i < pstate->nodes.nelem; ++i)\n    {\n      re_node_set dest_nodes, *new_nodes;\n      Idx cur_node_idx = pstate->nodes.elems[i];\n      int naccepted;\n      Idx dest_idx;\n      unsigned int context;\n      re_dfastate_t *dest_state;\n\n      if (!dfa->nodes[cur_node_idx].accept_mb)\n\tcontinue;\n\n      if (dfa->nodes[cur_node_idx].constraint)\n\t{\n\t  context = re_string_context_at (&mctx->input,\n\t\t\t\t\t  re_string_cur_idx (&mctx->input),\n\t\t\t\t\t  mctx->eflags);\n\t  if (NOT_SATISFY_NEXT_CONSTRAINT (dfa->nodes[cur_node_idx].constraint,\n\t\t\t\t\t   context))\n\t    continue;\n\t}\n\n      /* How many bytes the node can accept?  */\n      naccepted = check_node_accept_bytes (dfa, cur_node_idx, &mctx->input,\n\t\t\t\t\t   re_string_cur_idx (&mctx->input));\n      if (naccepted == 0)\n\tcontinue;\n\n      /* The node can accepts 'naccepted' bytes.  */\n      dest_idx = re_string_cur_idx (&mctx->input) + naccepted;\n      mctx->max_mb_elem_len = ((mctx->max_mb_elem_len < naccepted) ? naccepted\n\t\t\t       : mctx->max_mb_elem_len);\n      err = clean_state_log_if_needed (mctx, dest_idx);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n#ifdef DEBUG\n      assert (dfa->nexts[cur_node_idx] != -1);\n#endif\n      new_nodes = dfa->eclosures + dfa->nexts[cur_node_idx];\n\n      dest_state = mctx->state_log[dest_idx];\n      if (dest_state == NULL)\n\tdest_nodes = *new_nodes;\n      else\n\t{\n\t  err = re_node_set_init_union (&dest_nodes,\n\t\t\t\t\tdest_state->entrance_nodes, new_nodes);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n      context = re_string_context_at (&mctx->input, dest_idx - 1,\n\t\t\t\t      mctx->eflags);\n      mctx->state_log[dest_idx]\n\t= re_acquire_state_context (&err, dfa, &dest_nodes, context);\n      if (dest_state != NULL)\n\tre_node_set_free (&dest_nodes);\n      if (BE (mctx->state_log[dest_idx] == NULL && err != REG_NOERROR, 0))\n\treturn err;\n    }\n  return REG_NOERROR;\n}",
      "lines": 69,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "transit_state_bkref": {
      "start_point": [
        2580,
        0
      ],
      "end_point": [
        2686,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\ntransit_state_bkref (re_match_context_t *mctx, const re_node_set *nodes)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err;\n  Idx i;\n  Idx cur_str_idx = re_string_cur_idx (&mctx->input);\n\n  for (i = 0; i < nodes->nelem; ++i)\n    {\n      Idx dest_str_idx, prev_nelem, bkc_idx;\n      Idx node_idx = nodes->elems[i];\n      unsigned int context;\n      const re_token_t *node = dfa->nodes + node_idx;\n      re_node_set *new_dest_nodes;\n\n      /* Check whether 'node' is a backreference or not.  */\n      if (node->type != OP_BACK_REF)\n\tcontinue;\n\n      if (node->constraint)\n\t{\n\t  context = re_string_context_at (&mctx->input, cur_str_idx,\n\t\t\t\t\t  mctx->eflags);\n\t  if (NOT_SATISFY_NEXT_CONSTRAINT (node->constraint, context))\n\t    continue;\n\t}\n\n      /* 'node' is a backreference.\n\t Check the substring which the substring matched.  */\n      bkc_idx = mctx->nbkref_ents;\n      err = get_subexp (mctx, node_idx, cur_str_idx);\n      if (BE (err != REG_NOERROR, 0))\n\tgoto free_return;\n\n      /* And add the epsilon closures (which is 'new_dest_nodes') of\n\t the backreference to appropriate state_log.  */\n#ifdef DEBUG\n      assert (dfa->nexts[node_idx] != -1);\n#endif\n      for (; bkc_idx < mctx->nbkref_ents; ++bkc_idx)\n\t{\n\t  Idx subexp_len;\n\t  re_dfastate_t *dest_state;\n\t  struct re_backref_cache_entry *bkref_ent;\n\t  bkref_ent = mctx->bkref_ents + bkc_idx;\n\t  if (bkref_ent->node != node_idx || bkref_ent->str_idx != cur_str_idx)\n\t    continue;\n\t  subexp_len = bkref_ent->subexp_to - bkref_ent->subexp_from;\n\t  new_dest_nodes = (subexp_len == 0\n\t\t\t    ? dfa->eclosures + dfa->edests[node_idx].elems[0]\n\t\t\t    : dfa->eclosures + dfa->nexts[node_idx]);\n\t  dest_str_idx = (cur_str_idx + bkref_ent->subexp_to\n\t\t\t  - bkref_ent->subexp_from);\n\t  context = re_string_context_at (&mctx->input, dest_str_idx - 1,\n\t\t\t\t\t  mctx->eflags);\n\t  dest_state = mctx->state_log[dest_str_idx];\n\t  prev_nelem = ((mctx->state_log[cur_str_idx] == NULL) ? 0\n\t\t\t: mctx->state_log[cur_str_idx]->nodes.nelem);\n\t  /* Add 'new_dest_node' to state_log.  */\n\t  if (dest_state == NULL)\n\t    {\n\t      mctx->state_log[dest_str_idx]\n\t\t= re_acquire_state_context (&err, dfa, new_dest_nodes,\n\t\t\t\t\t    context);\n\t      if (BE (mctx->state_log[dest_str_idx] == NULL\n\t\t      && err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t    }\n\t  else\n\t    {\n\t      re_node_set dest_nodes;\n\t      err = re_node_set_init_union (&dest_nodes,\n\t\t\t\t\t    dest_state->entrance_nodes,\n\t\t\t\t\t    new_dest_nodes);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\t{\n\t\t  re_node_set_free (&dest_nodes);\n\t\t  goto free_return;\n\t\t}\n\t      mctx->state_log[dest_str_idx]\n\t\t= re_acquire_state_context (&err, dfa, &dest_nodes, context);\n\t      re_node_set_free (&dest_nodes);\n\t      if (BE (mctx->state_log[dest_str_idx] == NULL\n\t\t      && err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t    }\n\t  /* We need to check recursively if the backreference can epsilon\n\t     transit.  */\n\t  if (subexp_len == 0\n\t      && mctx->state_log[cur_str_idx]->nodes.nelem > prev_nelem)\n\t    {\n\t      err = check_subexp_matching_top (mctx, new_dest_nodes,\n\t\t\t\t\t       cur_str_idx);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t      err = transit_state_bkref (mctx, new_dest_nodes);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto free_return;\n\t    }\n\t}\n    }\n  err = REG_NOERROR;\n free_return:\n  return err;\n}",
      "lines": 107,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "get_subexp": {
      "start_point": [
        2695,
        18
      ],
      "end_point": [
        2836,
        1
      ],
      "content": "__attribute_warn_unused_result__\nget_subexp (re_match_context_t *mctx, Idx bkref_node, Idx bkref_str_idx)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  Idx subexp_num, sub_top_idx;\n  const char *buf = (const char *) re_string_get_buffer (&mctx->input);\n  /* Return if we have already checked BKREF_NODE at BKREF_STR_IDX.  */\n  Idx cache_idx = search_cur_bkref_entry (mctx, bkref_str_idx);\n  if (cache_idx != -1)\n    {\n      const struct re_backref_cache_entry *entry\n\t= mctx->bkref_ents + cache_idx;\n      do\n\tif (entry->node == bkref_node)\n\t  return REG_NOERROR; /* We already checked it.  */\n      while (entry++->more);\n    }\n\n  subexp_num = dfa->nodes[bkref_node].opr.idx;\n\n  /* For each sub expression  */\n  for (sub_top_idx = 0; sub_top_idx < mctx->nsub_tops; ++sub_top_idx)\n    {\n      reg_errcode_t err;\n      re_sub_match_top_t *sub_top = mctx->sub_tops[sub_top_idx];\n      re_sub_match_last_t *sub_last;\n      Idx sub_last_idx, sl_str, bkref_str_off;\n\n      if (dfa->nodes[sub_top->node].opr.idx != subexp_num)\n\tcontinue; /* It isn't related.  */\n\n      sl_str = sub_top->str_idx;\n      bkref_str_off = bkref_str_idx;\n      /* At first, check the last node of sub expressions we already\n\t evaluated.  */\n      for (sub_last_idx = 0; sub_last_idx < sub_top->nlasts; ++sub_last_idx)\n\t{\n\t  regoff_t sl_str_diff;\n\t  sub_last = sub_top->lasts[sub_last_idx];\n\t  sl_str_diff = sub_last->str_idx - sl_str;\n\t  /* The matched string by the sub expression match with the substring\n\t     at the back reference?  */\n\t  if (sl_str_diff > 0)\n\t    {\n\t      if (BE (bkref_str_off + sl_str_diff > mctx->input.valid_len, 0))\n\t\t{\n\t\t  /* Not enough chars for a successful match.  */\n\t\t  if (bkref_str_off + sl_str_diff > mctx->input.len)\n\t\t    break;\n\n\t\t  err = clean_state_log_if_needed (mctx,\n\t\t\t\t\t\t   bkref_str_off\n\t\t\t\t\t\t   + sl_str_diff);\n\t\t  if (BE (err != REG_NOERROR, 0))\n\t\t    return err;\n\t\t  buf = (const char *) re_string_get_buffer (&mctx->input);\n\t\t}\n\t      if (memcmp (buf + bkref_str_off, buf + sl_str, sl_str_diff) != 0)\n\t\t/* We don't need to search this sub expression any more.  */\n\t\tbreak;\n\t    }\n\t  bkref_str_off += sl_str_diff;\n\t  sl_str += sl_str_diff;\n\t  err = get_subexp_sub (mctx, sub_top, sub_last, bkref_node,\n\t\t\t\tbkref_str_idx);\n\n\t  /* Reload buf, since the preceding call might have reallocated\n\t     the buffer.  */\n\t  buf = (const char *) re_string_get_buffer (&mctx->input);\n\n\t  if (err == REG_NOMATCH)\n\t    continue;\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n\n      if (sub_last_idx < sub_top->nlasts)\n\tcontinue;\n      if (sub_last_idx > 0)\n\t++sl_str;\n      /* Then, search for the other last nodes of the sub expression.  */\n      for (; sl_str <= bkref_str_idx; ++sl_str)\n\t{\n\t  Idx cls_node;\n\t  regoff_t sl_str_off;\n\t  const re_node_set *nodes;\n\t  sl_str_off = sl_str - sub_top->str_idx;\n\t  /* The matched string by the sub expression match with the substring\n\t     at the back reference?  */\n\t  if (sl_str_off > 0)\n\t    {\n\t      if (BE (bkref_str_off >= mctx->input.valid_len, 0))\n\t\t{\n\t\t  /* If we are at the end of the input, we cannot match.  */\n\t\t  if (bkref_str_off >= mctx->input.len)\n\t\t    break;\n\n\t\t  err = extend_buffers (mctx, bkref_str_off + 1);\n\t\t  if (BE (err != REG_NOERROR, 0))\n\t\t    return err;\n\n\t\t  buf = (const char *) re_string_get_buffer (&mctx->input);\n\t\t}\n\t      if (buf [bkref_str_off++] != buf[sl_str - 1])\n\t\tbreak; /* We don't need to search this sub expression\n\t\t\t  any more.  */\n\t    }\n\t  if (mctx->state_log[sl_str] == NULL)\n\t    continue;\n\t  /* Does this state have a ')' of the sub expression?  */\n\t  nodes = &mctx->state_log[sl_str]->nodes;\n\t  cls_node = find_subexp_node (dfa, nodes, subexp_num,\n\t\t\t\t       OP_CLOSE_SUBEXP);\n\t  if (cls_node == -1)\n\t    continue; /* No.  */\n\t  if (sub_top->path == NULL)\n\t    {\n\t      sub_top->path = calloc (sizeof (state_array_t),\n\t\t\t\t      sl_str - sub_top->str_idx + 1);\n\t      if (sub_top->path == NULL)\n\t\treturn REG_ESPACE;\n\t    }\n\t  /* Can the OP_OPEN_SUBEXP node arrive the OP_CLOSE_SUBEXP node\n\t     in the current context?  */\n\t  err = check_arrival (mctx, sub_top->path, sub_top->node,\n\t\t\t       sub_top->str_idx, cls_node, sl_str,\n\t\t\t       OP_CLOSE_SUBEXP);\n\t  if (err == REG_NOMATCH)\n\t      continue;\n\t  if (BE (err != REG_NOERROR, 0))\n\t      return err;\n\t  sub_last = match_ctx_add_sublast (sub_top, cls_node, sl_str);\n\t  if (BE (sub_last == NULL, 0))\n\t    return REG_ESPACE;\n\t  err = get_subexp_sub (mctx, sub_top, sub_last, bkref_node,\n\t\t\t\tbkref_str_idx);\n\t  if (err == REG_NOMATCH)\n\t    continue;\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 142,
      "depth": 18,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "get_subexp_sub": {
      "start_point": [
        2844,
        0
      ],
      "end_point": [
        2863,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\nget_subexp_sub (re_match_context_t *mctx, const re_sub_match_top_t *sub_top,\n\t\tre_sub_match_last_t *sub_last, Idx bkref_node, Idx bkref_str)\n{\n  reg_errcode_t err;\n  Idx to_idx;\n  /* Can the subexpression arrive the back reference?  */\n  err = check_arrival (mctx, &sub_last->path, sub_last->node,\n\t\t       sub_last->str_idx, bkref_node, bkref_str,\n\t\t       OP_OPEN_SUBEXP);\n  if (err != REG_NOERROR)\n    return err;\n  err = match_ctx_add_entry (mctx, bkref_node, bkref_str, sub_top->str_idx,\n\t\t\t     sub_last->str_idx);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n  to_idx = bkref_str + sub_last->str_idx - sub_top->str_idx;\n  return clean_state_log_if_needed (mctx, to_idx);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "find_subexp_node": {
      "start_point": [
        2873,
        0
      ],
      "end_point": [
        2888,
        1
      ],
      "content": "static Idx\ninternal_function\nfind_subexp_node (const re_dfa_t *dfa, const re_node_set *nodes,\n\t\t  Idx subexp_idx, int type)\n{\n  Idx cls_idx;\n  for (cls_idx = 0; cls_idx < nodes->nelem; ++cls_idx)\n    {\n      Idx cls_node = nodes->elems[cls_idx];\n      const re_token_t *node = dfa->nodes + cls_node;\n      if (node->type == type\n\t  && node->opr.idx == subexp_idx)\n\treturn cls_node;\n    }\n  return -1;\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "check_arrival": {
      "start_point": [
        2896,
        18
      ],
      "end_point": [
        3050,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncheck_arrival (re_match_context_t *mctx, state_array_t *path, Idx top_node,\n\t       Idx top_str, Idx last_node, Idx last_str, int type)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err = REG_NOERROR;\n  Idx subexp_num, backup_cur_idx, str_idx, null_cnt;\n  re_dfastate_t *cur_state = NULL;\n  re_node_set *cur_nodes, next_nodes;\n  re_dfastate_t **backup_state_log;\n  unsigned int context;\n\n  subexp_num = dfa->nodes[top_node].opr.idx;\n  /* Extend the buffer if we need.  */\n  if (BE (path->alloc < last_str + mctx->max_mb_elem_len + 1, 0))\n    {\n      re_dfastate_t **new_array;\n      Idx old_alloc = path->alloc;\n      Idx incr_alloc = last_str + mctx->max_mb_elem_len + 1;\n      Idx new_alloc;\n      if (BE (IDX_MAX - old_alloc < incr_alloc, 0))\n\treturn REG_ESPACE;\n      new_alloc = old_alloc + incr_alloc;\n      if (BE (SIZE_MAX / sizeof (re_dfastate_t *) < new_alloc, 0))\n\treturn REG_ESPACE;\n      new_array = re_realloc (path->array, re_dfastate_t *, new_alloc);\n      if (BE (new_array == NULL, 0))\n\treturn REG_ESPACE;\n      path->array = new_array;\n      path->alloc = new_alloc;\n      memset (new_array + old_alloc, '\\0',\n\t      sizeof (re_dfastate_t *) * (path->alloc - old_alloc));\n    }\n\n  str_idx = path->next_idx ? path->next_idx : top_str;\n\n  /* Temporary modify MCTX.  */\n  backup_state_log = mctx->state_log;\n  backup_cur_idx = mctx->input.cur_idx;\n  mctx->state_log = path->array;\n  mctx->input.cur_idx = str_idx;\n\n  /* Setup initial node set.  */\n  context = re_string_context_at (&mctx->input, str_idx - 1, mctx->eflags);\n  if (str_idx == top_str)\n    {\n      err = re_node_set_init_1 (&next_nodes, top_node);\n      if (BE (err != REG_NOERROR, 0))\n\treturn err;\n      err = check_arrival_expand_ecl (dfa, &next_nodes, subexp_num, type);\n      if (BE (err != REG_NOERROR, 0))\n\t{\n\t  re_node_set_free (&next_nodes);\n\t  return err;\n\t}\n    }\n  else\n    {\n      cur_state = mctx->state_log[str_idx];\n      if (cur_state && cur_state->has_backref)\n\t{\n\t  err = re_node_set_init_copy (&next_nodes, &cur_state->nodes);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n      else\n\tre_node_set_init_empty (&next_nodes);\n    }\n  if (str_idx == top_str || (cur_state && cur_state->has_backref))\n    {\n      if (next_nodes.nelem)\n\t{\n\t  err = expand_bkref_cache (mctx, &next_nodes, str_idx,\n\t\t\t\t    subexp_num, type);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return err;\n\t    }\n\t}\n      cur_state = re_acquire_state_context (&err, dfa, &next_nodes, context);\n      if (BE (cur_state == NULL && err != REG_NOERROR, 0))\n\t{\n\t  re_node_set_free (&next_nodes);\n\t  return err;\n\t}\n      mctx->state_log[str_idx] = cur_state;\n    }\n\n  for (null_cnt = 0; str_idx < last_str && null_cnt <= mctx->max_mb_elem_len;)\n    {\n      re_node_set_empty (&next_nodes);\n      if (mctx->state_log[str_idx + 1])\n\t{\n\t  err = re_node_set_merge (&next_nodes,\n\t\t\t\t   &mctx->state_log[str_idx + 1]->nodes);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return err;\n\t    }\n\t}\n      if (cur_state)\n\t{\n\t  err = check_arrival_add_next_nodes (mctx, str_idx,\n\t\t\t\t\t      &cur_state->non_eps_nodes,\n\t\t\t\t\t      &next_nodes);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return err;\n\t    }\n\t}\n      ++str_idx;\n      if (next_nodes.nelem)\n\t{\n\t  err = check_arrival_expand_ecl (dfa, &next_nodes, subexp_num, type);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return err;\n\t    }\n\t  err = expand_bkref_cache (mctx, &next_nodes, str_idx,\n\t\t\t\t    subexp_num, type);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&next_nodes);\n\t      return err;\n\t    }\n\t}\n      context = re_string_context_at (&mctx->input, str_idx - 1, mctx->eflags);\n      cur_state = re_acquire_state_context (&err, dfa, &next_nodes, context);\n      if (BE (cur_state == NULL && err != REG_NOERROR, 0))\n\t{\n\t  re_node_set_free (&next_nodes);\n\t  return err;\n\t}\n      mctx->state_log[str_idx] = cur_state;\n      null_cnt = cur_state == NULL ? null_cnt + 1 : 0;\n    }\n  re_node_set_free (&next_nodes);\n  cur_nodes = (mctx->state_log[last_str] == NULL ? NULL\n\t       : &mctx->state_log[last_str]->nodes);\n  path->next_idx = str_idx;\n\n  /* Fix MCTX.  */\n  mctx->state_log = backup_state_log;\n  mctx->input.cur_idx = backup_cur_idx;\n\n  /* Then check the current node set has the node LAST_NODE.  */\n  if (cur_nodes != NULL && re_node_set_contains (cur_nodes, last_node))\n    return REG_NOERROR;\n\n  return REG_NOMATCH;\n}",
      "lines": 155,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "check_arrival_add_next_nodes": {
      "start_point": [
        3061,
        18
      ],
      "end_point": [
        3133,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncheck_arrival_add_next_nodes (re_match_context_t *mctx, Idx str_idx,\n\t\t\t      re_node_set *cur_nodes, re_node_set *next_nodes)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  bool ok;\n  Idx cur_idx;\n#ifdef RE_ENABLE_I18N\n  reg_errcode_t err = REG_NOERROR;\n#endif\n  re_node_set union_set;\n  re_node_set_init_empty (&union_set);\n  for (cur_idx = 0; cur_idx < cur_nodes->nelem; ++cur_idx)\n    {\n      int naccepted = 0;\n      Idx cur_node = cur_nodes->elems[cur_idx];\n#ifdef DEBUG\n      re_token_type_t type = dfa->nodes[cur_node].type;\n      assert (!IS_EPSILON_NODE (type));\n#endif\n#ifdef RE_ENABLE_I18N\n      /* If the node may accept \"multi byte\".  */\n      if (dfa->nodes[cur_node].accept_mb)\n\t{\n\t  naccepted = check_node_accept_bytes (dfa, cur_node, &mctx->input,\n\t\t\t\t\t       str_idx);\n\t  if (naccepted > 1)\n\t    {\n\t      re_dfastate_t *dest_state;\n\t      Idx next_node = dfa->nexts[cur_node];\n\t      Idx next_idx = str_idx + naccepted;\n\t      dest_state = mctx->state_log[next_idx];\n\t      re_node_set_empty (&union_set);\n\t      if (dest_state)\n\t\t{\n\t\t  err = re_node_set_merge (&union_set, &dest_state->nodes);\n\t\t  if (BE (err != REG_NOERROR, 0))\n\t\t    {\n\t\t      re_node_set_free (&union_set);\n\t\t      return err;\n\t\t    }\n\t\t}\n\t      ok = re_node_set_insert (&union_set, next_node);\n\t      if (BE (! ok, 0))\n\t\t{\n\t\t  re_node_set_free (&union_set);\n\t\t  return REG_ESPACE;\n\t\t}\n\t      mctx->state_log[next_idx] = re_acquire_state (&err, dfa,\n\t\t\t\t\t\t\t    &union_set);\n\t      if (BE (mctx->state_log[next_idx] == NULL\n\t\t      && err != REG_NOERROR, 0))\n\t\t{\n\t\t  re_node_set_free (&union_set);\n\t\t  return err;\n\t\t}\n\t    }\n\t}\n#endif /* RE_ENABLE_I18N */\n      if (naccepted\n\t  || check_node_accept (mctx, dfa->nodes + cur_node, str_idx))\n\t{\n\t  ok = re_node_set_insert (next_nodes, dfa->nexts[cur_node]);\n\t  if (BE (! ok, 0))\n\t    {\n\t      re_node_set_free (&union_set);\n\t      return REG_ESPACE;\n\t    }\n\t}\n    }\n  re_node_set_free (&union_set);\n  return REG_NOERROR;\n}",
      "lines": 73,
      "depth": 18,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "check_arrival_expand_ecl": {
      "start_point": [
        3141,
        0
      ],
      "end_point": [
        3188,
        1
      ],
      "content": "static reg_errcode_t\ninternal_function\ncheck_arrival_expand_ecl (const re_dfa_t *dfa, re_node_set *cur_nodes,\n\t\t\t  Idx ex_subexp, int type)\n{\n  reg_errcode_t err;\n  Idx idx, outside_node;\n  re_node_set new_nodes;\n#ifdef DEBUG\n  assert (cur_nodes->nelem);\n#endif\n  err = re_node_set_alloc (&new_nodes, cur_nodes->nelem);\n  if (BE (err != REG_NOERROR, 0))\n    return err;\n  /* Create a new node set NEW_NODES with the nodes which are epsilon\n     closures of the node in CUR_NODES.  */\n\n  for (idx = 0; idx < cur_nodes->nelem; ++idx)\n    {\n      Idx cur_node = cur_nodes->elems[idx];\n      const re_node_set *eclosure = dfa->eclosures + cur_node;\n      outside_node = find_subexp_node (dfa, eclosure, ex_subexp, type);\n      if (outside_node == -1)\n\t{\n\t  /* There are no problematic nodes, just merge them.  */\n\t  err = re_node_set_merge (&new_nodes, eclosure);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&new_nodes);\n\t      return err;\n\t    }\n\t}\n      else\n\t{\n\t  /* There are problematic nodes, re-calculate incrementally.  */\n\t  err = check_arrival_expand_ecl_sub (dfa, &new_nodes, cur_node,\n\t\t\t\t\t      ex_subexp, type);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    {\n\t      re_node_set_free (&new_nodes);\n\t      return err;\n\t    }\n\t}\n    }\n  re_node_set_free (cur_nodes);\n  *cur_nodes = new_nodes;\n  return REG_NOERROR;\n}",
      "lines": 48,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "internal_function",
        "internal_function"
      ]
    },
    "check_arrival_expand_ecl_sub": {
      "start_point": [
        3195,
        18
      ],
      "end_point": [
        3232,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncheck_arrival_expand_ecl_sub (const re_dfa_t *dfa, re_node_set *dst_nodes,\n\t\t\t      Idx target, Idx ex_subexp, int type)\n{\n  Idx cur_node;\n  for (cur_node = target; !re_node_set_contains (dst_nodes, cur_node);)\n    {\n      bool ok;\n\n      if (dfa->nodes[cur_node].type == type\n\t  && dfa->nodes[cur_node].opr.idx == ex_subexp)\n\t{\n\t  if (type == OP_CLOSE_SUBEXP)\n\t    {\n\t      ok = re_node_set_insert (dst_nodes, cur_node);\n\t      if (BE (! ok, 0))\n\t\treturn REG_ESPACE;\n\t    }\n\t  break;\n\t}\n      ok = re_node_set_insert (dst_nodes, cur_node);\n      if (BE (! ok, 0))\n\treturn REG_ESPACE;\n      if (dfa->edests[cur_node].nelem == 0)\n\tbreak;\n      if (dfa->edests[cur_node].nelem == 2)\n\t{\n\t  reg_errcode_t err;\n\t  err = check_arrival_expand_ecl_sub (dfa, dst_nodes,\n\t\t\t\t\t      dfa->edests[cur_node].elems[1],\n\t\t\t\t\t      ex_subexp, type);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    return err;\n\t}\n      cur_node = dfa->edests[cur_node].elems[0];\n    }\n  return REG_NOERROR;\n}",
      "lines": 38,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "expand_bkref_cache": {
      "start_point": [
        3240,
        18
      ],
      "end_point": [
        3323,
        1
      ],
      "content": "__attribute_warn_unused_result__\nexpand_bkref_cache (re_match_context_t *mctx, re_node_set *cur_nodes,\n\t\t    Idx cur_str, Idx subexp_num, int type)\n{\n  const re_dfa_t *const dfa = mctx->dfa;\n  reg_errcode_t err;\n  Idx cache_idx_start = search_cur_bkref_entry (mctx, cur_str);\n  struct re_backref_cache_entry *ent;\n\n  if (cache_idx_start == -1)\n    return REG_NOERROR;\n\n restart:\n  ent = mctx->bkref_ents + cache_idx_start;\n  do\n    {\n      Idx to_idx, next_node;\n\n      /* Is this entry ENT is appropriate?  */\n      if (!re_node_set_contains (cur_nodes, ent->node))\n\tcontinue; /* No.  */\n\n      to_idx = cur_str + ent->subexp_to - ent->subexp_from;\n      /* Calculate the destination of the back reference, and append it\n\t to MCTX->STATE_LOG.  */\n      if (to_idx == cur_str)\n\t{\n\t  /* The backreference did epsilon transit, we must re-check all the\n\t     node in the current state.  */\n\t  re_node_set new_dests;\n\t  reg_errcode_t err2, err3;\n\t  next_node = dfa->edests[ent->node].elems[0];\n\t  if (re_node_set_contains (cur_nodes, next_node))\n\t    continue;\n\t  err = re_node_set_init_1 (&new_dests, next_node);\n\t  err2 = check_arrival_expand_ecl (dfa, &new_dests, subexp_num, type);\n\t  err3 = re_node_set_merge (cur_nodes, &new_dests);\n\t  re_node_set_free (&new_dests);\n\t  if (BE (err != REG_NOERROR || err2 != REG_NOERROR\n\t\t  || err3 != REG_NOERROR, 0))\n\t    {\n\t      err = (err != REG_NOERROR ? err\n\t\t     : (err2 != REG_NOERROR ? err2 : err3));\n\t      return err;\n\t    }\n\t  /* TODO: It is still inefficient...  */\n\t  goto restart;\n\t}\n      else\n\t{\n\t  re_node_set union_set;\n\t  next_node = dfa->nexts[ent->node];\n\t  if (mctx->state_log[to_idx])\n\t    {\n\t      bool ok;\n\t      if (re_node_set_contains (&mctx->state_log[to_idx]->nodes,\n\t\t\t\t\tnext_node))\n\t\tcontinue;\n\t      err = re_node_set_init_copy (&union_set,\n\t\t\t\t\t   &mctx->state_log[to_idx]->nodes);\n\t      ok = re_node_set_insert (&union_set, next_node);\n\t      if (BE (err != REG_NOERROR || ! ok, 0))\n\t\t{\n\t\t  re_node_set_free (&union_set);\n\t\t  err = err != REG_NOERROR ? err : REG_ESPACE;\n\t\t  return err;\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      err = re_node_set_init_1 (&union_set, next_node);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\treturn err;\n\t    }\n\t  mctx->state_log[to_idx] = re_acquire_state (&err, dfa, &union_set);\n\t  re_node_set_free (&union_set);\n\t  if (BE (mctx->state_log[to_idx] == NULL\n\t\t  && err != REG_NOERROR, 0))\n\t    return err;\n\t}\n    }\n  while (ent++->more);\n  return REG_NOERROR;\n}",
      "lines": 84,
      "depth": 17,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "build_trtable": {
      "start_point": [
        3328,
        0
      ],
      "end_point": [
        3559,
        1
      ],
      "content": "static bool\ninternal_function\nbuild_trtable (const re_dfa_t *dfa, re_dfastate_t *state)\n{\n  reg_errcode_t err;\n  Idx i, j;\n  int ch;\n  bool need_word_trtable = false;\n  bitset_word_t elem, mask;\n  bool dests_node_malloced = false;\n  bool dest_states_malloced = false;\n  Idx ndests; /* Number of the destination states from 'state'.  */\n  re_dfastate_t **trtable;\n  re_dfastate_t **dest_states = NULL, **dest_states_word, **dest_states_nl;\n  re_node_set follows, *dests_node;\n  bitset_t *dests_ch;\n  bitset_t acceptable;\n\n  struct dests_alloc\n  {\n    re_node_set dests_node[SBC_MAX];\n    bitset_t dests_ch[SBC_MAX];\n  } *dests_alloc;\n\n  /* We build DFA states which corresponds to the destination nodes\n     from 'state'.  'dests_node[i]' represents the nodes which i-th\n     destination state contains, and 'dests_ch[i]' represents the\n     characters which i-th destination state accepts.  */\n  if (__libc_use_alloca (sizeof (struct dests_alloc)))\n    dests_alloc = (struct dests_alloc *) alloca (sizeof (struct dests_alloc));\n  else\n    {\n      dests_alloc = re_malloc (struct dests_alloc, 1);\n      if (BE (dests_alloc == NULL, 0))\n\treturn false;\n      dests_node_malloced = true;\n    }\n  dests_node = dests_alloc->dests_node;\n  dests_ch = dests_alloc->dests_ch;\n\n  /* Initialize transition table.  */\n  state->word_trtable = state->trtable = NULL;\n\n  /* At first, group all nodes belonging to 'state' into several\n     destinations.  */\n  ndests = group_nodes_into_DFAstates (dfa, state, dests_node, dests_ch);\n  if (BE (ndests <= 0, 0))\n    {\n      if (dests_node_malloced)\n\tfree (dests_alloc);\n      /* Return false in case of an error, true otherwise.  */\n      if (ndests == 0)\n\t{\n\t  state->trtable = (re_dfastate_t **)\n\t    calloc (sizeof (re_dfastate_t *), SBC_MAX);\n          if (BE (state->trtable == NULL, 0))\n            return false;\n\t  return true;\n\t}\n      return false;\n    }\n\n  err = re_node_set_alloc (&follows, ndests + 1);\n  if (BE (err != REG_NOERROR, 0))\n    goto out_free;\n\n  /* Avoid arithmetic overflow in size calculation.  */\n  if (BE ((((SIZE_MAX - (sizeof (re_node_set) + sizeof (bitset_t)) * SBC_MAX)\n\t    / (3 * sizeof (re_dfastate_t *)))\n\t   < ndests),\n\t  0))\n    goto out_free;\n\n  if (__libc_use_alloca ((sizeof (re_node_set) + sizeof (bitset_t)) * SBC_MAX\n\t\t\t + ndests * 3 * sizeof (re_dfastate_t *)))\n    dest_states = (re_dfastate_t **)\n      alloca (ndests * 3 * sizeof (re_dfastate_t *));\n  else\n    {\n      dest_states = (re_dfastate_t **)\n\tmalloc (ndests * 3 * sizeof (re_dfastate_t *));\n      if (BE (dest_states == NULL, 0))\n\t{\nout_free:\n\t  if (dest_states_malloced)\n\t    free (dest_states);\n\t  re_node_set_free (&follows);\n\t  for (i = 0; i < ndests; ++i)\n\t    re_node_set_free (dests_node + i);\n\t  if (dests_node_malloced)\n\t    free (dests_alloc);\n\t  return false;\n\t}\n      dest_states_malloced = true;\n    }\n  dest_states_word = dest_states + ndests;\n  dest_states_nl = dest_states_word + ndests;\n  bitset_empty (acceptable);\n\n  /* Then build the states for all destinations.  */\n  for (i = 0; i < ndests; ++i)\n    {\n      Idx next_node;\n      re_node_set_empty (&follows);\n      /* Merge the follows of this destination states.  */\n      for (j = 0; j < dests_node[i].nelem; ++j)\n\t{\n\t  next_node = dfa->nexts[dests_node[i].elems[j]];\n\t  if (next_node != -1)\n\t    {\n\t      err = re_node_set_merge (&follows, dfa->eclosures + next_node);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto out_free;\n\t    }\n\t}\n      dest_states[i] = re_acquire_state_context (&err, dfa, &follows, 0);\n      if (BE (dest_states[i] == NULL && err != REG_NOERROR, 0))\n\tgoto out_free;\n      /* If the new state has context constraint,\n\t build appropriate states for these contexts.  */\n      if (dest_states[i]->has_constraint)\n\t{\n\t  dest_states_word[i] = re_acquire_state_context (&err, dfa, &follows,\n\t\t\t\t\t\t\t  CONTEXT_WORD);\n\t  if (BE (dest_states_word[i] == NULL && err != REG_NOERROR, 0))\n\t    goto out_free;\n\n\t  if (dest_states[i] != dest_states_word[i] && dfa->mb_cur_max > 1)\n\t    need_word_trtable = true;\n\n\t  dest_states_nl[i] = re_acquire_state_context (&err, dfa, &follows,\n\t\t\t\t\t\t\tCONTEXT_NEWLINE);\n\t  if (BE (dest_states_nl[i] == NULL && err != REG_NOERROR, 0))\n\t    goto out_free;\n\t}\n      else\n\t{\n\t  dest_states_word[i] = dest_states[i];\n\t  dest_states_nl[i] = dest_states[i];\n\t}\n      bitset_merge (acceptable, dests_ch[i]);\n    }\n\n  if (!BE (need_word_trtable, 0))\n    {\n      /* We don't care about whether the following character is a word\n\t character, or we are in a single-byte character set so we can\n\t discern by looking at the character code: allocate a\n\t 256-entry transition table.  */\n      trtable = state->trtable =\n\t(re_dfastate_t **) calloc (sizeof (re_dfastate_t *), SBC_MAX);\n      if (BE (trtable == NULL, 0))\n\tgoto out_free;\n\n      /* For all characters ch...:  */\n      for (i = 0; i < BITSET_WORDS; ++i)\n\tfor (ch = i * BITSET_WORD_BITS, elem = acceptable[i], mask = 1;\n\t     elem;\n\t     mask <<= 1, elem >>= 1, ++ch)\n\t  if (BE (elem & 1, 0))\n\t    {\n\t      /* There must be exactly one destination which accepts\n\t\t character ch.  See group_nodes_into_DFAstates.  */\n\t      for (j = 0; (dests_ch[j][i] & mask) == 0; ++j)\n\t\t;\n\n\t      /* j-th destination accepts the word character ch.  */\n\t      if (dfa->word_char[i] & mask)\n\t\ttrtable[ch] = dest_states_word[j];\n\t      else\n\t\ttrtable[ch] = dest_states[j];\n\t    }\n    }\n  else\n    {\n      /* We care about whether the following character is a word\n\t character, and we are in a multi-byte character set: discern\n\t by looking at the character code: build two 256-entry\n\t transition tables, one starting at trtable[0] and one\n\t starting at trtable[SBC_MAX].  */\n      trtable = state->word_trtable =\n\t(re_dfastate_t **) calloc (sizeof (re_dfastate_t *), 2 * SBC_MAX);\n      if (BE (trtable == NULL, 0))\n\tgoto out_free;\n\n      /* For all characters ch...:  */\n      for (i = 0; i < BITSET_WORDS; ++i)\n\tfor (ch = i * BITSET_WORD_BITS, elem = acceptable[i], mask = 1;\n\t     elem;\n\t     mask <<= 1, elem >>= 1, ++ch)\n\t  if (BE (elem & 1, 0))\n\t    {\n\t      /* There must be exactly one destination which accepts\n\t\t character ch.  See group_nodes_into_DFAstates.  */\n\t      for (j = 0; (dests_ch[j][i] & mask) == 0; ++j)\n\t\t;\n\n\t      /* j-th destination accepts the word character ch.  */\n\t      trtable[ch] = dest_states[j];\n\t      trtable[ch + SBC_MAX] = dest_states_word[j];\n\t    }\n    }\n\n  /* new line */\n  if (bitset_contain (acceptable, NEWLINE_CHAR))\n    {\n      /* The current state accepts newline character.  */\n      for (j = 0; j < ndests; ++j)\n\tif (bitset_contain (dests_ch[j], NEWLINE_CHAR))\n\t  {\n\t    /* k-th destination accepts newline character.  */\n\t    trtable[NEWLINE_CHAR] = dest_states_nl[j];\n\t    if (need_word_trtable)\n\t      trtable[NEWLINE_CHAR + SBC_MAX] = dest_states_nl[j];\n\t    /* There must be only one destination which accepts\n\t       newline.  See group_nodes_into_DFAstates.  */\n\t    break;\n\t  }\n    }\n\n  if (dest_states_malloced)\n    free (dest_states);\n\n  re_node_set_free (&follows);\n  for (i = 0; i < ndests; ++i)\n    re_node_set_free (dests_node + i);\n\n  if (dests_node_malloced)\n    free (dests_alloc);\n\n  return true;\n}",
      "lines": 232,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "bool",
        "internal_function",
        "internal_function"
      ]
    },
    "group_nodes_into_DFAstates": {
      "start_point": [
        3566,
        0
      ],
      "end_point": [
        3748,
        1
      ],
      "content": "static Idx\ninternal_function\ngroup_nodes_into_DFAstates (const re_dfa_t *dfa, const re_dfastate_t *state,\n\t\t\t    re_node_set *dests_node, bitset_t *dests_ch)\n{\n  reg_errcode_t err;\n  bool ok;\n  Idx i, j, k;\n  Idx ndests; /* Number of the destinations from 'state'.  */\n  bitset_t accepts; /* Characters a node can accept.  */\n  const re_node_set *cur_nodes = &state->nodes;\n  bitset_empty (accepts);\n  ndests = 0;\n\n  /* For all the nodes belonging to 'state',  */\n  for (i = 0; i < cur_nodes->nelem; ++i)\n    {\n      re_token_t *node = &dfa->nodes[cur_nodes->elems[i]];\n      re_token_type_t type = node->type;\n      unsigned int constraint = node->constraint;\n\n      /* Enumerate all single byte character this node can accept.  */\n      if (type == CHARACTER)\n\tbitset_set (accepts, node->opr.c);\n      else if (type == SIMPLE_BRACKET)\n\t{\n\t  bitset_merge (accepts, node->opr.sbcset);\n\t}\n      else if (type == OP_PERIOD)\n\t{\n#ifdef RE_ENABLE_I18N\n\t  if (dfa->mb_cur_max > 1)\n\t    bitset_merge (accepts, dfa->sb_char);\n\t  else\n#endif\n\t    bitset_set_all (accepts);\n\t  if (!(dfa->syntax & RE_DOT_NEWLINE))\n\t    bitset_clear (accepts, '\\n');\n\t  if (dfa->syntax & RE_DOT_NOT_NULL)\n\t    bitset_clear (accepts, '\\0');\n\t}\n#ifdef RE_ENABLE_I18N\n      else if (type == OP_UTF8_PERIOD)\n\t{\n\t  if (ASCII_CHARS % BITSET_WORD_BITS == 0)\n\t    memset (accepts, -1, ASCII_CHARS / CHAR_BIT);\n\t  else\n\t    bitset_merge (accepts, utf8_sb_map);\n\t  if (!(dfa->syntax & RE_DOT_NEWLINE))\n\t    bitset_clear (accepts, '\\n');\n\t  if (dfa->syntax & RE_DOT_NOT_NULL)\n\t    bitset_clear (accepts, '\\0');\n\t}\n#endif\n      else\n\tcontinue;\n\n      /* Check the 'accepts' and sift the characters which are not\n\t match it the context.  */\n      if (constraint)\n\t{\n\t  if (constraint & NEXT_NEWLINE_CONSTRAINT)\n\t    {\n\t      bool accepts_newline = bitset_contain (accepts, NEWLINE_CHAR);\n\t      bitset_empty (accepts);\n\t      if (accepts_newline)\n\t\tbitset_set (accepts, NEWLINE_CHAR);\n\t      else\n\t\tcontinue;\n\t    }\n\t  if (constraint & NEXT_ENDBUF_CONSTRAINT)\n\t    {\n\t      bitset_empty (accepts);\n\t      continue;\n\t    }\n\n\t  if (constraint & NEXT_WORD_CONSTRAINT)\n\t    {\n\t      bitset_word_t any_set = 0;\n\t      if (type == CHARACTER && !node->word_char)\n\t\t{\n\t\t  bitset_empty (accepts);\n\t\t  continue;\n\t\t}\n#ifdef RE_ENABLE_I18N\n\t      if (dfa->mb_cur_max > 1)\n\t\tfor (j = 0; j < BITSET_WORDS; ++j)\n\t\t  any_set |= (accepts[j] &= (dfa->word_char[j] | ~dfa->sb_char[j]));\n\t      else\n#endif\n\t\tfor (j = 0; j < BITSET_WORDS; ++j)\n\t\t  any_set |= (accepts[j] &= dfa->word_char[j]);\n\t      if (!any_set)\n\t\tcontinue;\n\t    }\n\t  if (constraint & NEXT_NOTWORD_CONSTRAINT)\n\t    {\n\t      bitset_word_t any_set = 0;\n\t      if (type == CHARACTER && node->word_char)\n\t\t{\n\t\t  bitset_empty (accepts);\n\t\t  continue;\n\t\t}\n#ifdef RE_ENABLE_I18N\n\t      if (dfa->mb_cur_max > 1)\n\t\tfor (j = 0; j < BITSET_WORDS; ++j)\n\t\t  any_set |= (accepts[j] &= ~(dfa->word_char[j] & dfa->sb_char[j]));\n\t      else\n#endif\n\t\tfor (j = 0; j < BITSET_WORDS; ++j)\n\t\t  any_set |= (accepts[j] &= ~dfa->word_char[j]);\n\t      if (!any_set)\n\t\tcontinue;\n\t    }\n\t}\n\n      /* Then divide 'accepts' into DFA states, or create a new\n\t state.  Above, we make sure that accepts is not empty.  */\n      for (j = 0; j < ndests; ++j)\n\t{\n\t  bitset_t intersec; /* Intersection sets, see below.  */\n\t  bitset_t remains;\n\t  /* Flags, see below.  */\n\t  bitset_word_t has_intersec, not_subset, not_consumed;\n\n\t  /* Optimization, skip if this state doesn't accept the character.  */\n\t  if (type == CHARACTER && !bitset_contain (dests_ch[j], node->opr.c))\n\t    continue;\n\n\t  /* Enumerate the intersection set of this state and 'accepts'.  */\n\t  has_intersec = 0;\n\t  for (k = 0; k < BITSET_WORDS; ++k)\n\t    has_intersec |= intersec[k] = accepts[k] & dests_ch[j][k];\n\t  /* And skip if the intersection set is empty.  */\n\t  if (!has_intersec)\n\t    continue;\n\n\t  /* Then check if this state is a subset of 'accepts'.  */\n\t  not_subset = not_consumed = 0;\n\t  for (k = 0; k < BITSET_WORDS; ++k)\n\t    {\n\t      not_subset |= remains[k] = ~accepts[k] & dests_ch[j][k];\n\t      not_consumed |= accepts[k] = accepts[k] & ~dests_ch[j][k];\n\t    }\n\n\t  /* If this state isn't a subset of 'accepts', create a\n\t     new group state, which has the 'remains'. */\n\t  if (not_subset)\n\t    {\n\t      bitset_copy (dests_ch[ndests], remains);\n\t      bitset_copy (dests_ch[j], intersec);\n\t      err = re_node_set_init_copy (dests_node + ndests, &dests_node[j]);\n\t      if (BE (err != REG_NOERROR, 0))\n\t\tgoto error_return;\n\t      ++ndests;\n\t    }\n\n\t  /* Put the position in the current group. */\n\t  ok = re_node_set_insert (&dests_node[j], cur_nodes->elems[i]);\n\t  if (BE (! ok, 0))\n\t    goto error_return;\n\n\t  /* If all characters are consumed, go to next node. */\n\t  if (!not_consumed)\n\t    break;\n\t}\n      /* Some characters remain, create a new group. */\n      if (j == ndests)\n\t{\n\t  bitset_copy (dests_ch[ndests], accepts);\n\t  err = re_node_set_init_1 (dests_node + ndests, cur_nodes->elems[i]);\n\t  if (BE (err != REG_NOERROR, 0))\n\t    goto error_return;\n\t  ++ndests;\n\t  bitset_empty (accepts);\n\t}\n    }\n  return ndests;\n error_return:\n  for (j = 0; j < ndests; ++j)\n    re_node_set_free (dests_node + j);\n  return -1;\n}",
      "lines": 183,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "check_node_accept_bytes": {
      "start_point": [
        3763,
        0
      ],
      "end_point": [
        3990,
        1
      ],
      "content": "static int\ninternal_function\ncheck_node_accept_bytes (const re_dfa_t *dfa, Idx node_idx,\n\t\t\t const re_string_t *input, Idx str_idx)\n{\n  const re_token_t *node = dfa->nodes + node_idx;\n  int char_len, elem_len;\n  Idx i;\n\n  if (BE (node->type == OP_UTF8_PERIOD, 0))\n    {\n      unsigned char c = re_string_byte_at (input, str_idx), d;\n      if (BE (c < 0xc2, 1))\n\treturn 0;\n\n      if (str_idx + 2 > input->len)\n\treturn 0;\n\n      d = re_string_byte_at (input, str_idx + 1);\n      if (c < 0xe0)\n\treturn (d < 0x80 || d > 0xbf) ? 0 : 2;\n      else if (c < 0xf0)\n\t{\n\t  char_len = 3;\n\t  if (c == 0xe0 && d < 0xa0)\n\t    return 0;\n\t}\n      else if (c < 0xf8)\n\t{\n\t  char_len = 4;\n\t  if (c == 0xf0 && d < 0x90)\n\t    return 0;\n\t}\n      else if (c < 0xfc)\n\t{\n\t  char_len = 5;\n\t  if (c == 0xf8 && d < 0x88)\n\t    return 0;\n\t}\n      else if (c < 0xfe)\n\t{\n\t  char_len = 6;\n\t  if (c == 0xfc && d < 0x84)\n\t    return 0;\n\t}\n      else\n\treturn 0;\n\n      if (str_idx + char_len > input->len)\n\treturn 0;\n\n      for (i = 1; i < char_len; ++i)\n\t{\n\t  d = re_string_byte_at (input, str_idx + i);\n\t  if (d < 0x80 || d > 0xbf)\n\t    return 0;\n\t}\n      return char_len;\n    }\n\n  char_len = re_string_char_size_at (input, str_idx);\n  if (node->type == OP_PERIOD)\n    {\n      if (char_len <= 1)\n\treturn 0;\n      /* FIXME: I don't think this if is needed, as both '\\n'\n\t and '\\0' are char_len == 1.  */\n      /* '.' accepts any one character except the following two cases.  */\n      if ((!(dfa->syntax & RE_DOT_NEWLINE) &&\n\t   re_string_byte_at (input, str_idx) == '\\n') ||\n\t  ((dfa->syntax & RE_DOT_NOT_NULL) &&\n\t   re_string_byte_at (input, str_idx) == '\\0'))\n\treturn 0;\n      return char_len;\n    }\n\n  elem_len = re_string_elem_size_at (input, str_idx);\n  if ((elem_len <= 1 && char_len <= 1) || char_len == 0)\n    return 0;\n\n  if (node->type == COMPLEX_BRACKET)\n    {\n      const re_charset_t *cset = node->opr.mbcset;\n# ifdef _LIBC\n      const unsigned char *pin\n\t= ((const unsigned char *) re_string_get_buffer (input) + str_idx);\n      Idx j;\n      uint32_t nrules;\n# endif /* _LIBC */\n      int match_len = 0;\n      wchar_t wc = ((cset->nranges || cset->nchar_classes || cset->nmbchars)\n\t\t    ? re_string_wchar_at (input, str_idx) : 0);\n\n      /* match with multibyte character?  */\n      for (i = 0; i < cset->nmbchars; ++i)\n\tif (wc == cset->mbchars[i])\n\t  {\n\t    match_len = char_len;\n\t    goto check_node_accept_bytes_match;\n\t  }\n      /* match with character_class?  */\n      for (i = 0; i < cset->nchar_classes; ++i)\n\t{\n\t  wctype_t wt = cset->char_classes[i];\n\t  if (__iswctype (wc, wt))\n\t    {\n\t      match_len = char_len;\n\t      goto check_node_accept_bytes_match;\n\t    }\n\t}\n\n# ifdef _LIBC\n      nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n      if (nrules != 0)\n\t{\n\t  unsigned int in_collseq = 0;\n\t  const int32_t *table, *indirect;\n\t  const unsigned char *weights, *extra;\n\t  const char *collseqwc;\n\n\t  /* match with collating_symbol?  */\n\t  if (cset->ncoll_syms)\n\t    extra = (const unsigned char *)\n\t      _NL_CURRENT (LC_COLLATE, _NL_COLLATE_SYMB_EXTRAMB);\n\t  for (i = 0; i < cset->ncoll_syms; ++i)\n\t    {\n\t      const unsigned char *coll_sym = extra + cset->coll_syms[i];\n\t      /* Compare the length of input collating element and\n\t\t the length of current collating element.  */\n\t      if (*coll_sym != elem_len)\n\t\tcontinue;\n\t      /* Compare each bytes.  */\n\t      for (j = 0; j < *coll_sym; j++)\n\t\tif (pin[j] != coll_sym[1 + j])\n\t\t  break;\n\t      if (j == *coll_sym)\n\t\t{\n\t\t  /* Match if every bytes is equal.  */\n\t\t  match_len = j;\n\t\t  goto check_node_accept_bytes_match;\n\t\t}\n\t    }\n\n\t  if (cset->nranges)\n\t    {\n\t      if (elem_len <= char_len)\n\t\t{\n\t\t  collseqwc = _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQWC);\n\t\t  in_collseq = __collseq_table_lookup (collseqwc, wc);\n\t\t}\n\t      else\n\t\tin_collseq = find_collation_sequence_value (pin, elem_len);\n\t    }\n\t  /* match with range expression?  */\n\t  /* FIXME: Implement rational ranges here, too.  */\n\t  for (i = 0; i < cset->nranges; ++i)\n\t    if (cset->range_starts[i] <= in_collseq\n\t\t&& in_collseq <= cset->range_ends[i])\n\t      {\n\t\tmatch_len = elem_len;\n\t\tgoto check_node_accept_bytes_match;\n\t      }\n\n\t  /* match with equivalence_class?  */\n\t  if (cset->nequiv_classes)\n\t    {\n\t      const unsigned char *cp = pin;\n\t      table = (const int32_t *)\n\t\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);\n\t      weights = (const unsigned char *)\n\t\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_WEIGHTMB);\n\t      extra = (const unsigned char *)\n\t\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_EXTRAMB);\n\t      indirect = (const int32_t *)\n\t\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_INDIRECTMB);\n\t      int32_t idx = findidx (table, indirect, extra, &cp, elem_len);\n\t      if (idx > 0)\n\t\tfor (i = 0; i < cset->nequiv_classes; ++i)\n\t\t  {\n\t\t    int32_t equiv_class_idx = cset->equiv_classes[i];\n\t\t    size_t weight_len = weights[idx & 0xffffff];\n\t\t    if (weight_len == weights[equiv_class_idx & 0xffffff]\n\t\t\t&& (idx >> 24) == (equiv_class_idx >> 24))\n\t\t      {\n\t\t\tIdx cnt = 0;\n\n\t\t\tidx &= 0xffffff;\n\t\t\tequiv_class_idx &= 0xffffff;\n\n\t\t\twhile (cnt <= weight_len\n\t\t\t       && (weights[equiv_class_idx + 1 + cnt]\n\t\t\t\t   == weights[idx + 1 + cnt]))\n\t\t\t  ++cnt;\n\t\t\tif (cnt > weight_len)\n\t\t\t  {\n\t\t\t    match_len = elem_len;\n\t\t\t    goto check_node_accept_bytes_match;\n\t\t\t  }\n\t\t      }\n\t\t  }\n\t    }\n\t}\n      else\n# endif /* _LIBC */\n\t{\n\t  /* match with range expression?  */\n\t  for (i = 0; i < cset->nranges; ++i)\n\t    {\n\t      if (cset->range_starts[i] <= wc && wc <= cset->range_ends[i])\n\t\t{\n\t\t  match_len = char_len;\n\t\t  goto check_node_accept_bytes_match;\n\t\t}\n\t    }\n\t}\n    check_node_accept_bytes_match:\n      if (!cset->non_match)\n\treturn match_len;\n      else\n\t{\n\t  if (match_len > 0)\n\t    return 0;\n\t  else\n\t    return (elem_len > char_len) ? elem_len : char_len;\n\t}\n    }\n  return 0;\n}",
      "lines": 228,
      "depth": 23,
      "decorators": [
        "static",
        "static",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "find_collation_sequence_value": {
      "start_point": [
        3993,
        0
      ],
      "end_point": [
        4050,
        1
      ],
      "content": "static unsigned int\ninternal_function\nfind_collation_sequence_value (const unsigned char *mbs, size_t mbs_len)\n{\n  uint32_t nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n  if (nrules == 0)\n    {\n      if (mbs_len == 1)\n\t{\n\t  /* No valid character.  Match it as a single byte character.  */\n\t  const unsigned char *collseq = (const unsigned char *)\n\t    _NL_CURRENT (LC_COLLATE, _NL_COLLATE_COLLSEQMB);\n\t  return collseq[mbs[0]];\n\t}\n      return UINT_MAX;\n    }\n  else\n    {\n      int32_t idx;\n      const unsigned char *extra = (const unsigned char *)\n\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_SYMB_EXTRAMB);\n      int32_t extrasize = (const unsigned char *)\n\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_SYMB_EXTRAMB + 1) - extra;\n\n      for (idx = 0; idx < extrasize;)\n\t{\n\t  int mbs_cnt;\n\t  bool found = false;\n\t  int32_t elem_mbs_len;\n\t  /* Skip the name of collating element name.  */\n\t  idx = idx + extra[idx] + 1;\n\t  elem_mbs_len = extra[idx++];\n\t  if (mbs_len == elem_mbs_len)\n\t    {\n\t      for (mbs_cnt = 0; mbs_cnt < elem_mbs_len; ++mbs_cnt)\n\t\tif (extra[idx + mbs_cnt] != mbs[mbs_cnt])\n\t\t  break;\n\t      if (mbs_cnt == elem_mbs_len)\n\t\t/* Found the entry.  */\n\t\tfound = true;\n\t    }\n\t  /* Skip the byte sequence of the collating element.  */\n\t  idx += elem_mbs_len;\n\t  /* Adjust for the alignment.  */\n\t  idx = (idx + 3) & ~3;\n\t  /* Skip the collation sequence value.  */\n\t  idx += sizeof (uint32_t);\n\t  /* Skip the wide char sequence of the collating element.  */\n\t  idx = idx + sizeof (uint32_t) * (*(int32_t *) (extra + idx) + 1);\n\t  /* If we found the entry, return the sequence value.  */\n\t  if (found)\n\t    return *(uint32_t *) (extra + idx);\n\t  /* Skip the collation sequence value.  */\n\t  idx += sizeof (uint32_t);\n\t}\n      return UINT_MAX;\n    }\n}",
      "lines": 58,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "check_node_accept": {
      "start_point": [
        4057,
        0
      ],
      "end_point": [
        4103,
        1
      ],
      "content": "static bool\ninternal_function\ncheck_node_accept (const re_match_context_t *mctx, const re_token_t *node,\n\t\t   Idx idx)\n{\n  unsigned char ch;\n  ch = re_string_byte_at (&mctx->input, idx);\n  switch (node->type)\n    {\n    case CHARACTER:\n      if (node->opr.c != ch)\n        return false;\n      break;\n\n    case SIMPLE_BRACKET:\n      if (!bitset_contain (node->opr.sbcset, ch))\n        return false;\n      break;\n\n#ifdef RE_ENABLE_I18N\n    case OP_UTF8_PERIOD:\n      if (ch >= ASCII_CHARS)\n        return false;\n      /* FALLTHROUGH */\n#endif\n    case OP_PERIOD:\n      if ((ch == '\\n' && !(mctx->dfa->syntax & RE_DOT_NEWLINE))\n\t  || (ch == '\\0' && (mctx->dfa->syntax & RE_DOT_NOT_NULL)))\n\treturn false;\n      break;\n\n    default:\n      return false;\n    }\n\n  if (node->constraint)\n    {\n      /* The node has constraints.  Check whether the current context\n\t satisfies the constraints.  */\n      unsigned int context = re_string_context_at (&mctx->input, idx,\n\t\t\t\t\t\t   mctx->eflags);\n      if (NOT_SATISFY_NEXT_CONSTRAINT (node->constraint, context))\n\treturn false;\n    }\n\n  return true;\n}",
      "lines": 47,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "bool",
        "internal_function",
        "internal_function"
      ]
    },
    "extend_buffers": {
      "start_point": [
        4108,
        18
      ],
      "end_point": [
        4166,
        1
      ],
      "content": "__attribute_warn_unused_result__\nextend_buffers (re_match_context_t *mctx, int min_len)\n{\n  reg_errcode_t ret;\n  re_string_t *pstr = &mctx->input;\n\n  /* Avoid overflow.  */\n  if (BE (MIN (IDX_MAX, SIZE_MAX / sizeof (re_dfastate_t *)) / 2\n          <= pstr->bufs_len, 0))\n    return REG_ESPACE;\n\n  /* Double the lengths of the buffers, but allocate at least MIN_LEN.  */\n  ret = re_string_realloc_buffers (pstr,\n\t\t\t\t   MAX (min_len,\n\t\t\t\t\tMIN (pstr->len, pstr->bufs_len * 2)));\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n\n  if (mctx->state_log != NULL)\n    {\n      /* And double the length of state_log.  */\n      /* XXX We have no indication of the size of this buffer.  If this\n\t allocation fail we have no indication that the state_log array\n\t does not have the right size.  */\n      re_dfastate_t **new_array = re_realloc (mctx->state_log, re_dfastate_t *,\n\t\t\t\t\t      pstr->bufs_len + 1);\n      if (BE (new_array == NULL, 0))\n\treturn REG_ESPACE;\n      mctx->state_log = new_array;\n    }\n\n  /* Then reconstruct the buffers.  */\n  if (pstr->icase)\n    {\n#ifdef RE_ENABLE_I18N\n      if (pstr->mb_cur_max > 1)\n\t{\n\t  ret = build_wcs_upper_buffer (pstr);\n\t  if (BE (ret != REG_NOERROR, 0))\n\t    return ret;\n\t}\n      else\n#endif /* RE_ENABLE_I18N  */\n\tbuild_upper_buffer (pstr);\n    }\n  else\n    {\n#ifdef RE_ENABLE_I18N\n      if (pstr->mb_cur_max > 1)\n\tbuild_wcs_buffer (pstr);\n      else\n#endif /* RE_ENABLE_I18N  */\n\t{\n\t  if (pstr->trans != NULL)\n\t    re_string_translate_buffer (pstr);\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 59,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "match_ctx_init": {
      "start_point": [
        4174,
        18
      ],
      "end_point": [
        4202,
        1
      ],
      "content": "__attribute_warn_unused_result__\nmatch_ctx_init (re_match_context_t *mctx, int eflags, Idx n)\n{\n  mctx->eflags = eflags;\n  mctx->match_last = -1;\n  if (n > 0)\n    {\n      /* Avoid overflow.  */\n      size_t max_object_size =\n\tMAX (sizeof (struct re_backref_cache_entry),\n\t     sizeof (re_sub_match_top_t *));\n      if (BE (MIN (IDX_MAX, SIZE_MAX / max_object_size) < n, 0))\n\treturn REG_ESPACE;\n\n      mctx->bkref_ents = re_malloc (struct re_backref_cache_entry, n);\n      mctx->sub_tops = re_malloc (re_sub_match_top_t *, n);\n      if (BE (mctx->bkref_ents == NULL || mctx->sub_tops == NULL, 0))\n\treturn REG_ESPACE;\n    }\n  /* Already zero-ed by the caller.\n     else\n       mctx->bkref_ents = NULL;\n     mctx->nbkref_ents = 0;\n     mctx->nsub_tops = 0;  */\n  mctx->abkref_ents = n;\n  mctx->max_mb_elem_len = 1;\n  mctx->asub_tops = n;\n  return REG_NOERROR;\n}",
      "lines": 29,
      "depth": 13,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "match_ctx_clean": {
      "start_point": [
        4208,
        0
      ],
      "end_point": [
        4234,
        1
      ],
      "content": "static void\ninternal_function\nmatch_ctx_clean (re_match_context_t *mctx)\n{\n  Idx st_idx;\n  for (st_idx = 0; st_idx < mctx->nsub_tops; ++st_idx)\n    {\n      Idx sl_idx;\n      re_sub_match_top_t *top = mctx->sub_tops[st_idx];\n      for (sl_idx = 0; sl_idx < top->nlasts; ++sl_idx)\n\t{\n\t  re_sub_match_last_t *last = top->lasts[sl_idx];\n\t  re_free (last->path.array);\n\t  re_free (last);\n\t}\n      re_free (top->lasts);\n      if (top->path)\n\t{\n\t  re_free (top->path->array);\n\t  re_free (top->path);\n\t}\n      free (top);\n    }\n\n  mctx->nsub_tops = 0;\n  mctx->nbkref_ents = 0;\n}",
      "lines": 27,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "match_ctx_free": {
      "start_point": [
        4238,
        0
      ],
      "end_point": [
        4246,
        1
      ],
      "content": "static void\ninternal_function\nmatch_ctx_free (re_match_context_t *mctx)\n{\n  /* First, free all the memory associated with MCTX->SUB_TOPS.  */\n  match_ctx_clean (mctx);\n  re_free (mctx->sub_tops);\n  re_free (mctx->bkref_ents);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "match_ctx_add_entry": {
      "start_point": [
        4254,
        18
      ],
      "end_point": [
        4297,
        1
      ],
      "content": "__attribute_warn_unused_result__\nmatch_ctx_add_entry (re_match_context_t *mctx, Idx node, Idx str_idx, Idx from,\n\t\t     Idx to)\n{\n  if (mctx->nbkref_ents >= mctx->abkref_ents)\n    {\n      struct re_backref_cache_entry* new_entry;\n      new_entry = re_realloc (mctx->bkref_ents, struct re_backref_cache_entry,\n\t\t\t      mctx->abkref_ents * 2);\n      if (BE (new_entry == NULL, 0))\n\t{\n\t  re_free (mctx->bkref_ents);\n\t  return REG_ESPACE;\n\t}\n      mctx->bkref_ents = new_entry;\n      memset (mctx->bkref_ents + mctx->nbkref_ents, '\\0',\n\t      sizeof (struct re_backref_cache_entry) * mctx->abkref_ents);\n      mctx->abkref_ents *= 2;\n    }\n  if (mctx->nbkref_ents > 0\n      && mctx->bkref_ents[mctx->nbkref_ents - 1].str_idx == str_idx)\n    mctx->bkref_ents[mctx->nbkref_ents - 1].more = 1;\n\n  mctx->bkref_ents[mctx->nbkref_ents].node = node;\n  mctx->bkref_ents[mctx->nbkref_ents].str_idx = str_idx;\n  mctx->bkref_ents[mctx->nbkref_ents].subexp_from = from;\n  mctx->bkref_ents[mctx->nbkref_ents].subexp_to = to;\n\n  /* This is a cache that saves negative results of check_dst_limits_calc_pos.\n     If bit N is clear, means that this entry won't epsilon-transition to\n     an OP_OPEN_SUBEXP or OP_CLOSE_SUBEXP for the N+1-th subexpression.  If\n     it is set, check_dst_limits_calc_pos_1 will recurse and try to find one\n     such node.\n\n     A backreference does not epsilon-transition unless it is empty, so set\n     to all zeros if FROM != TO.  */\n  mctx->bkref_ents[mctx->nbkref_ents].eps_reachable_subexps_map\n    = (from == to ? -1 : 0);\n\n  mctx->bkref_ents[mctx->nbkref_ents++].more = 0;\n  if (mctx->max_mb_elem_len < to - from)\n    mctx->max_mb_elem_len = to - from;\n  return REG_NOERROR;\n}",
      "lines": 44,
      "depth": 12,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "search_cur_bkref_entry": {
      "start_point": [
        4302,
        0
      ],
      "end_point": [
        4320,
        1
      ],
      "content": "static Idx\ninternal_function\nsearch_cur_bkref_entry (const re_match_context_t *mctx, Idx str_idx)\n{\n  Idx left, right, mid, last;\n  last = right = mctx->nbkref_ents;\n  for (left = 0; left < right;)\n    {\n      mid = (left + right) / 2;\n      if (mctx->bkref_ents[mid].str_idx < str_idx)\n\tleft = mid + 1;\n      else\n\tright = mid;\n    }\n  if (left < last && mctx->bkref_ents[left].str_idx == str_idx)\n    return left;\n  else\n    return -1;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "match_ctx_add_subtop": {
      "start_point": [
        4326,
        18
      ],
      "end_point": [
        4350,
        1
      ],
      "content": "__attribute_warn_unused_result__\nmatch_ctx_add_subtop (re_match_context_t *mctx, Idx node, Idx str_idx)\n{\n#ifdef DEBUG\n  assert (mctx->sub_tops != NULL);\n  assert (mctx->asub_tops > 0);\n#endif\n  if (BE (mctx->nsub_tops == mctx->asub_tops, 0))\n    {\n      Idx new_asub_tops = mctx->asub_tops * 2;\n      re_sub_match_top_t **new_array = re_realloc (mctx->sub_tops,\n\t\t\t\t\t\t   re_sub_match_top_t *,\n\t\t\t\t\t\t   new_asub_tops);\n      if (BE (new_array == NULL, 0))\n\treturn REG_ESPACE;\n      mctx->sub_tops = new_array;\n      mctx->asub_tops = new_asub_tops;\n    }\n  mctx->sub_tops[mctx->nsub_tops] = calloc (1, sizeof (re_sub_match_top_t));\n  if (BE (mctx->sub_tops[mctx->nsub_tops] == NULL, 0))\n    return REG_ESPACE;\n  mctx->sub_tops[mctx->nsub_tops]->node = node;\n  mctx->sub_tops[mctx->nsub_tops++]->str_idx = str_idx;\n  return REG_NOERROR;\n}",
      "lines": 25,
      "depth": 10,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "match_ctx_add_sublast": {
      "start_point": [
        4355,
        0
      ],
      "end_point": [
        4380,
        1
      ],
      "content": "static re_sub_match_last_t *\ninternal_function\nmatch_ctx_add_sublast (re_sub_match_top_t *subtop, Idx node, Idx str_idx)\n{\n  re_sub_match_last_t *new_entry;\n  if (BE (subtop->nlasts == subtop->alasts, 0))\n    {\n      Idx new_alasts = 2 * subtop->alasts + 1;\n      re_sub_match_last_t **new_array = re_realloc (subtop->lasts,\n\t\t\t\t\t\t    re_sub_match_last_t *,\n\t\t\t\t\t\t    new_alasts);\n      if (BE (new_array == NULL, 0))\n\treturn NULL;\n      subtop->lasts = new_array;\n      subtop->alasts = new_alasts;\n    }\n  new_entry = calloc (1, sizeof (re_sub_match_last_t));\n  if (BE (new_entry != NULL, 1))\n    {\n      subtop->lasts[subtop->nlasts] = new_entry;\n      new_entry->node = node;\n      new_entry->str_idx = str_idx;\n      ++subtop->nlasts;\n    }\n  return new_entry;\n}",
      "lines": 26,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "re_sub_match_last_t",
        "*\ninternal_function\nmatch_ctx_add_sublast (re_sub_match_top_t *subtop, Idx node, Idx str_idx)",
        "*",
        "internal_function",
        "internal_function"
      ]
    },
    "sift_ctx_init": {
      "start_point": [
        4382,
        0
      ],
      "end_point": [
        4392,
        1
      ],
      "content": "static void\ninternal_function\nsift_ctx_init (re_sift_context_t *sctx, re_dfastate_t **sifted_sts,\n\t       re_dfastate_t **limited_sts, Idx last_node, Idx last_str_idx)\n{\n  sctx->sifted_states = sifted_sts;\n  sctx->limited_states = limited_sts;\n  sctx->last_node = last_node;\n  sctx->last_str_idx = last_str_idx;\n  re_node_set_init_empty (&sctx->limits);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    }
  },
  "grep/grep-3.1/lib/regex_internal.c": {
    "re_string_allocate": {
      "start_point": [
        37,
        18
      ],
      "end_point": [
        60,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_string_allocate (re_string_t *pstr, const char *str, Idx len, Idx init_len,\n\t\t    RE_TRANSLATE_TYPE trans, bool icase, const re_dfa_t *dfa)\n{\n  reg_errcode_t ret;\n  Idx init_buf_len;\n\n  /* Ensure at least one character fits into the buffers.  */\n  if (init_len < dfa->mb_cur_max)\n    init_len = dfa->mb_cur_max;\n  init_buf_len = (len + 1 < init_len) ? len + 1: init_len;\n  re_string_construct_common (str, len, pstr, trans, icase, dfa);\n\n  ret = re_string_realloc_buffers (pstr, init_buf_len);\n  if (BE (ret != REG_NOERROR, 0))\n    return ret;\n\n  pstr->word_char = dfa->word_char;\n  pstr->word_ops_used = dfa->word_ops_used;\n  pstr->mbs = pstr->mbs_allocated ? pstr->mbs : (unsigned char *) str;\n  pstr->valid_len = (pstr->mbs_allocated || dfa->mb_cur_max > 1) ? 0 : len;\n  pstr->valid_raw_len = pstr->valid_len;\n  return REG_NOERROR;\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_string_construct": {
      "start_point": [
        65,
        18
      ],
      "end_point": [
        123,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_string_construct (re_string_t *pstr, const char *str, Idx len,\n\t\t     RE_TRANSLATE_TYPE trans, bool icase, const re_dfa_t *dfa)\n{\n  reg_errcode_t ret;\n  memset (pstr, '\\0', sizeof (re_string_t));\n  re_string_construct_common (str, len, pstr, trans, icase, dfa);\n\n  if (len > 0)\n    {\n      ret = re_string_realloc_buffers (pstr, len + 1);\n      if (BE (ret != REG_NOERROR, 0))\n\treturn ret;\n    }\n  pstr->mbs = pstr->mbs_allocated ? pstr->mbs : (unsigned char *) str;\n\n  if (icase)\n    {\n#ifdef RE_ENABLE_I18N\n      if (dfa->mb_cur_max > 1)\n\t{\n\t  while (1)\n\t    {\n\t      ret = build_wcs_upper_buffer (pstr);\n\t      if (BE (ret != REG_NOERROR, 0))\n\t\treturn ret;\n\t      if (pstr->valid_raw_len >= len)\n\t\tbreak;\n\t      if (pstr->bufs_len > pstr->valid_len + dfa->mb_cur_max)\n\t\tbreak;\n\t      ret = re_string_realloc_buffers (pstr, pstr->bufs_len * 2);\n\t      if (BE (ret != REG_NOERROR, 0))\n\t\treturn ret;\n\t    }\n\t}\n      else\n#endif /* RE_ENABLE_I18N  */\n\tbuild_upper_buffer (pstr);\n    }\n  else\n    {\n#ifdef RE_ENABLE_I18N\n      if (dfa->mb_cur_max > 1)\n\tbuild_wcs_buffer (pstr);\n      else\n#endif /* RE_ENABLE_I18N  */\n\t{\n\t  if (trans != NULL)\n\t    re_string_translate_buffer (pstr);\n\t  else\n\t    {\n\t      pstr->valid_len = pstr->bufs_len;\n\t      pstr->valid_raw_len = pstr->bufs_len;\n\t    }\n\t}\n    }\n\n  return REG_NOERROR;\n}",
      "lines": 59,
      "depth": 16,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_string_realloc_buffers": {
      "start_point": [
        128,
        18
      ],
      "end_point": [
        164,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_string_realloc_buffers (re_string_t *pstr, Idx new_buf_len)\n{\n#ifdef RE_ENABLE_I18N\n  if (pstr->mb_cur_max > 1)\n    {\n      wint_t *new_wcs;\n\n      /* Avoid overflow in realloc.  */\n      const size_t max_object_size = MAX (sizeof (wint_t), sizeof (Idx));\n      if (BE (MIN (IDX_MAX, SIZE_MAX / max_object_size) < new_buf_len, 0))\n\treturn REG_ESPACE;\n\n      new_wcs = re_realloc (pstr->wcs, wint_t, new_buf_len);\n      if (BE (new_wcs == NULL, 0))\n\treturn REG_ESPACE;\n      pstr->wcs = new_wcs;\n      if (pstr->offsets != NULL)\n\t{\n\t  Idx *new_offsets = re_realloc (pstr->offsets, Idx, new_buf_len);\n\t  if (BE (new_offsets == NULL, 0))\n\t    return REG_ESPACE;\n\t  pstr->offsets = new_offsets;\n\t}\n    }\n#endif /* RE_ENABLE_I18N  */\n  if (pstr->mbs_allocated)\n    {\n      unsigned char *new_mbs = re_realloc (pstr->mbs, unsigned char,\n\t\t\t\t\t   new_buf_len);\n      if (BE (new_mbs == NULL, 0))\n\treturn REG_ESPACE;\n      pstr->mbs = new_mbs;\n    }\n  pstr->bufs_len = new_buf_len;\n  return REG_NOERROR;\n}",
      "lines": 37,
      "depth": 14,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_string_construct_common": {
      "start_point": [
        167,
        0
      ],
      "end_point": [
        184,
        1
      ],
      "content": "static void\ninternal_function\nre_string_construct_common (const char *str, Idx len, re_string_t *pstr,\n\t\t\t    RE_TRANSLATE_TYPE trans, bool icase,\n\t\t\t    const re_dfa_t *dfa)\n{\n  pstr->raw_mbs = (const unsigned char *) str;\n  pstr->len = len;\n  pstr->raw_len = len;\n  pstr->trans = trans;\n  pstr->icase = icase;\n  pstr->mbs_allocated = (trans != NULL || icase);\n  pstr->mb_cur_max = dfa->mb_cur_max;\n  pstr->is_utf8 = dfa->is_utf8;\n  pstr->map_notascii = dfa->map_notascii;\n  pstr->stop = pstr->len;\n  pstr->raw_stop = pstr->stop;\n}",
      "lines": 18,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "build_wcs_buffer": {
      "start_point": [
        199,
        0
      ],
      "end_point": [
        263,
        1
      ],
      "content": "static void\ninternal_function\nbuild_wcs_buffer (re_string_t *pstr)\n{\n#ifdef _LIBC\n  unsigned char buf[MB_LEN_MAX];\n  assert (MB_LEN_MAX >= pstr->mb_cur_max);\n#else\n  unsigned char buf[64];\n#endif\n  mbstate_t prev_st;\n  Idx byte_idx, end_idx, remain_len;\n  size_t mbclen;\n\n  /* Build the buffers from pstr->valid_len to either pstr->len or\n     pstr->bufs_len.  */\n  end_idx = (pstr->bufs_len > pstr->len) ? pstr->len : pstr->bufs_len;\n  for (byte_idx = pstr->valid_len; byte_idx < end_idx;)\n    {\n      wchar_t wc;\n      const char *p;\n\n      remain_len = end_idx - byte_idx;\n      prev_st = pstr->cur_state;\n      /* Apply the translation if we need.  */\n      if (BE (pstr->trans != NULL, 0))\n\t{\n\t  int i, ch;\n\n\t  for (i = 0; i < pstr->mb_cur_max && i < remain_len; ++i)\n\t    {\n\t      ch = pstr->raw_mbs [pstr->raw_mbs_idx + byte_idx + i];\n\t      buf[i] = pstr->mbs[byte_idx + i] = pstr->trans[ch];\n\t    }\n\t  p = (const char *) buf;\n\t}\n      else\n\tp = (const char *) pstr->raw_mbs + pstr->raw_mbs_idx + byte_idx;\n      mbclen = __mbrtowc (&wc, p, remain_len, &pstr->cur_state);\n      if (BE (mbclen == (size_t) -1 || mbclen == 0\n\t      || (mbclen == (size_t) -2 && pstr->bufs_len >= pstr->len), 0))\n\t{\n\t  /* We treat these cases as a singlebyte character.  */\n\t  mbclen = 1;\n\t  wc = (wchar_t) pstr->raw_mbs[pstr->raw_mbs_idx + byte_idx];\n\t  if (BE (pstr->trans != NULL, 0))\n\t    wc = pstr->trans[wc];\n\t  pstr->cur_state = prev_st;\n\t}\n      else if (BE (mbclen == (size_t) -2, 0))\n\t{\n\t  /* The buffer doesn't have enough space, finish to build.  */\n\t  pstr->cur_state = prev_st;\n\t  break;\n\t}\n\n      /* Write wide character and padding.  */\n      pstr->wcs[byte_idx++] = wc;\n      /* Write paddings.  */\n      for (remain_len = byte_idx + mbclen - 1; byte_idx < remain_len ;)\n\tpstr->wcs[byte_idx++] = WEOF;\n    }\n  pstr->valid_len = byte_idx;\n  pstr->valid_raw_len = byte_idx;\n}",
      "lines": 65,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "build_wcs_upper_buffer": {
      "start_point": [
        269,
        18
      ],
      "end_point": [
        480,
        1
      ],
      "content": "__attribute_warn_unused_result__\nbuild_wcs_upper_buffer (re_string_t *pstr)\n{\n  mbstate_t prev_st;\n  Idx src_idx, byte_idx, end_idx, remain_len;\n  size_t mbclen;\n#ifdef _LIBC\n  char buf[MB_LEN_MAX];\n  assert (MB_LEN_MAX >= pstr->mb_cur_max);\n#else\n  char buf[64];\n#endif\n\n  byte_idx = pstr->valid_len;\n  end_idx = (pstr->bufs_len > pstr->len) ? pstr->len : pstr->bufs_len;\n\n  /* The following optimization assumes that ASCII characters can be\n     mapped to wide characters with a simple cast.  */\n  if (! pstr->map_notascii && pstr->trans == NULL && !pstr->offsets_needed)\n    {\n      while (byte_idx < end_idx)\n\t{\n\t  wchar_t wc;\n\n\t  if (isascii (pstr->raw_mbs[pstr->raw_mbs_idx + byte_idx])\n\t      && mbsinit (&pstr->cur_state))\n\t    {\n\t      /* In case of a singlebyte character.  */\n\t      pstr->mbs[byte_idx]\n\t\t= toupper (pstr->raw_mbs[pstr->raw_mbs_idx + byte_idx]);\n\t      /* The next step uses the assumption that wchar_t is encoded\n\t\t ASCII-safe: all ASCII values can be converted like this.  */\n\t      pstr->wcs[byte_idx] = (wchar_t) pstr->mbs[byte_idx];\n\t      ++byte_idx;\n\t      continue;\n\t    }\n\n\t  remain_len = end_idx - byte_idx;\n\t  prev_st = pstr->cur_state;\n\t  mbclen = __mbrtowc (&wc,\n\t\t\t      ((const char *) pstr->raw_mbs + pstr->raw_mbs_idx\n\t\t\t       + byte_idx), remain_len, &pstr->cur_state);\n\t  if (BE (mbclen < (size_t) -2, 1))\n\t    {\n\t      wchar_t wcu = __towupper (wc);\n\t      if (wcu != wc)\n\t\t{\n\t\t  size_t mbcdlen;\n\n\t\t  mbcdlen = __wcrtomb (buf, wcu, &prev_st);\n\t\t  if (BE (mbclen == mbcdlen, 1))\n\t\t    memcpy (pstr->mbs + byte_idx, buf, mbclen);\n\t\t  else\n\t\t    {\n\t\t      src_idx = byte_idx;\n\t\t      goto offsets_needed;\n\t\t    }\n\t\t}\n\t      else\n\t\tmemcpy (pstr->mbs + byte_idx,\n\t\t\tpstr->raw_mbs + pstr->raw_mbs_idx + byte_idx, mbclen);\n\t      pstr->wcs[byte_idx++] = wcu;\n\t      /* Write paddings.  */\n\t      for (remain_len = byte_idx + mbclen - 1; byte_idx < remain_len ;)\n\t\tpstr->wcs[byte_idx++] = WEOF;\n\t    }\n\t  else if (mbclen == (size_t) -1 || mbclen == 0\n\t\t   || (mbclen == (size_t) -2 && pstr->bufs_len >= pstr->len))\n\t    {\n\t      /* It is an invalid character, an incomplete character\n\t\t at the end of the string, or '\\0'.  Just use the byte.  */\n\t      int ch = pstr->raw_mbs[pstr->raw_mbs_idx + byte_idx];\n\t      pstr->mbs[byte_idx] = ch;\n\t      /* And also cast it to wide char.  */\n\t      pstr->wcs[byte_idx++] = (wchar_t) ch;\n\t      if (BE (mbclen == (size_t) -1, 0))\n\t\tpstr->cur_state = prev_st;\n\t    }\n\t  else\n\t    {\n\t      /* The buffer doesn't have enough space, finish to build.  */\n\t      pstr->cur_state = prev_st;\n\t      break;\n\t    }\n\t}\n      pstr->valid_len = byte_idx;\n      pstr->valid_raw_len = byte_idx;\n      return REG_NOERROR;\n    }\n  else\n    for (src_idx = pstr->valid_raw_len; byte_idx < end_idx;)\n      {\n\twchar_t wc;\n\tconst char *p;\n      offsets_needed:\n\tremain_len = end_idx - byte_idx;\n\tprev_st = pstr->cur_state;\n\tif (BE (pstr->trans != NULL, 0))\n\t  {\n\t    int i, ch;\n\n\t    for (i = 0; i < pstr->mb_cur_max && i < remain_len; ++i)\n\t      {\n\t\tch = pstr->raw_mbs [pstr->raw_mbs_idx + src_idx + i];\n\t\tbuf[i] = pstr->trans[ch];\n\t      }\n\t    p = (const char *) buf;\n\t  }\n\telse\n\t  p = (const char *) pstr->raw_mbs + pstr->raw_mbs_idx + src_idx;\n\tmbclen = __mbrtowc (&wc, p, remain_len, &pstr->cur_state);\n\tif (BE (mbclen < (size_t) -2, 1))\n\t  {\n\t    wchar_t wcu = __towupper (wc);\n\t    if (wcu != wc)\n\t      {\n\t\tsize_t mbcdlen;\n\n\t\tmbcdlen = wcrtomb ((char *) buf, wcu, &prev_st);\n\t\tif (BE (mbclen == mbcdlen, 1))\n\t\t  memcpy (pstr->mbs + byte_idx, buf, mbclen);\n\t\telse if (mbcdlen != (size_t) -1)\n\t\t  {\n\t\t    size_t i;\n\n\t\t    if (byte_idx + mbcdlen > pstr->bufs_len)\n\t\t      {\n\t\t\tpstr->cur_state = prev_st;\n\t\t\tbreak;\n\t\t      }\n\n\t\t    if (pstr->offsets == NULL)\n\t\t      {\n\t\t\tpstr->offsets = re_malloc (Idx, pstr->bufs_len);\n\n\t\t\tif (pstr->offsets == NULL)\n\t\t\t  return REG_ESPACE;\n\t\t      }\n\t\t    if (!pstr->offsets_needed)\n\t\t      {\n\t\t\tfor (i = 0; i < (size_t) byte_idx; ++i)\n\t\t\t  pstr->offsets[i] = i;\n\t\t\tpstr->offsets_needed = 1;\n\t\t      }\n\n\t\t    memcpy (pstr->mbs + byte_idx, buf, mbcdlen);\n\t\t    pstr->wcs[byte_idx] = wcu;\n\t\t    pstr->offsets[byte_idx] = src_idx;\n\t\t    for (i = 1; i < mbcdlen; ++i)\n\t\t      {\n\t\t\tpstr->offsets[byte_idx + i]\n\t\t\t  = src_idx + (i < mbclen ? i : mbclen - 1);\n\t\t\tpstr->wcs[byte_idx + i] = WEOF;\n\t\t      }\n\t\t    pstr->len += mbcdlen - mbclen;\n\t\t    if (pstr->raw_stop > src_idx)\n\t\t      pstr->stop += mbcdlen - mbclen;\n\t\t    end_idx = (pstr->bufs_len > pstr->len)\n\t\t\t      ? pstr->len : pstr->bufs_len;\n\t\t    byte_idx += mbcdlen;\n\t\t    src_idx += mbclen;\n\t\t    continue;\n\t\t  }\n\t\telse\n\t\t  memcpy (pstr->mbs + byte_idx, p, mbclen);\n\t      }\n\t    else\n\t      memcpy (pstr->mbs + byte_idx, p, mbclen);\n\n\t    if (BE (pstr->offsets_needed != 0, 0))\n\t      {\n\t\tsize_t i;\n\t\tfor (i = 0; i < mbclen; ++i)\n\t\t  pstr->offsets[byte_idx + i] = src_idx + i;\n\t      }\n\t    src_idx += mbclen;\n\n\t    pstr->wcs[byte_idx++] = wcu;\n\t    /* Write paddings.  */\n\t    for (remain_len = byte_idx + mbclen - 1; byte_idx < remain_len ;)\n\t      pstr->wcs[byte_idx++] = WEOF;\n\t  }\n\telse if (mbclen == (size_t) -1 || mbclen == 0\n\t\t || (mbclen == (size_t) -2 && pstr->bufs_len >= pstr->len))\n\t  {\n\t    /* It is an invalid character or '\\0'.  Just use the byte.  */\n\t    int ch = pstr->raw_mbs[pstr->raw_mbs_idx + src_idx];\n\n\t    if (BE (pstr->trans != NULL, 0))\n\t      ch = pstr->trans [ch];\n\t    pstr->mbs[byte_idx] = ch;\n\n\t    if (BE (pstr->offsets_needed != 0, 0))\n\t      pstr->offsets[byte_idx] = src_idx;\n\t    ++src_idx;\n\n\t    /* And also cast it to wide char.  */\n\t    pstr->wcs[byte_idx++] = (wchar_t) ch;\n\t    if (BE (mbclen == (size_t) -1, 0))\n\t      pstr->cur_state = prev_st;\n\t  }\n\telse\n\t  {\n\t    /* The buffer doesn't have enough space, finish to build.  */\n\t    pstr->cur_state = prev_st;\n\t    break;\n\t  }\n      }\n  pstr->valid_len = byte_idx;\n  pstr->valid_raw_len = src_idx;\n  return REG_NOERROR;\n}",
      "lines": 212,
      "depth": 21,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_string_skip_chars": {
      "start_point": [
        485,
        0
      ],
      "end_point": [
        520,
        1
      ],
      "content": "static Idx\ninternal_function\nre_string_skip_chars (re_string_t *pstr, Idx new_raw_idx, wint_t *last_wc)\n{\n  mbstate_t prev_st;\n  Idx rawbuf_idx;\n  size_t mbclen;\n  wint_t wc = WEOF;\n\n  /* Skip the characters which are not necessary to check.  */\n  for (rawbuf_idx = pstr->raw_mbs_idx + pstr->valid_raw_len;\n       rawbuf_idx < new_raw_idx;)\n    {\n      wchar_t wc2;\n      Idx remain_len = pstr->raw_len - rawbuf_idx;\n      prev_st = pstr->cur_state;\n      mbclen = __mbrtowc (&wc2, (const char *) pstr->raw_mbs + rawbuf_idx,\n\t\t\t  remain_len, &pstr->cur_state);\n      if (BE (mbclen == (size_t) -2 || mbclen == (size_t) -1 || mbclen == 0, 0))\n\t{\n\t  /* We treat these cases as a single byte character.  */\n\t  if (mbclen == 0 || remain_len == 0)\n\t    wc = L'\\0';\n\t  else\n\t    wc = *(unsigned char *) (pstr->raw_mbs + rawbuf_idx);\n\t  mbclen = 1;\n\t  pstr->cur_state = prev_st;\n\t}\n      else\n\twc = wc2;\n      /* Then proceed the next character.  */\n      rawbuf_idx += mbclen;\n    }\n  *last_wc = wc;\n  return rawbuf_idx;\n}",
      "lines": 36,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "build_upper_buffer": {
      "start_point": [
        526,
        0
      ],
      "end_point": [
        542,
        1
      ],
      "content": "static void\ninternal_function\nbuild_upper_buffer (re_string_t *pstr)\n{\n  Idx char_idx, end_idx;\n  end_idx = (pstr->bufs_len > pstr->len) ? pstr->len : pstr->bufs_len;\n\n  for (char_idx = pstr->valid_len; char_idx < end_idx; ++char_idx)\n    {\n      int ch = pstr->raw_mbs[pstr->raw_mbs_idx + char_idx];\n      if (BE (pstr->trans != NULL, 0))\n\tch = pstr->trans[ch];\n      pstr->mbs[char_idx] = toupper (ch);\n    }\n  pstr->valid_len = char_idx;\n  pstr->valid_raw_len = char_idx;\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "re_string_translate_buffer": {
      "start_point": [
        546,
        0
      ],
      "end_point": [
        561,
        1
      ],
      "content": "static void\ninternal_function\nre_string_translate_buffer (re_string_t *pstr)\n{\n  Idx buf_idx, end_idx;\n  end_idx = (pstr->bufs_len > pstr->len) ? pstr->len : pstr->bufs_len;\n\n  for (buf_idx = pstr->valid_len; buf_idx < end_idx; ++buf_idx)\n    {\n      int ch = pstr->raw_mbs[pstr->raw_mbs_idx + buf_idx];\n      pstr->mbs[buf_idx] = pstr->trans[ch];\n    }\n\n  pstr->valid_len = buf_idx;\n  pstr->valid_raw_len = buf_idx;\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "re_string_reconstruct": {
      "start_point": [
        568,
        18
      ],
      "end_point": [
        828,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_string_reconstruct (re_string_t *pstr, Idx idx, int eflags)\n{\n  Idx offset;\n\n  if (BE (pstr->raw_mbs_idx <= idx, 0))\n    offset = idx - pstr->raw_mbs_idx;\n  else\n    {\n      /* Reset buffer.  */\n#ifdef RE_ENABLE_I18N\n      if (pstr->mb_cur_max > 1)\n\tmemset (&pstr->cur_state, '\\0', sizeof (mbstate_t));\n#endif /* RE_ENABLE_I18N */\n      pstr->len = pstr->raw_len;\n      pstr->stop = pstr->raw_stop;\n      pstr->valid_len = 0;\n      pstr->raw_mbs_idx = 0;\n      pstr->valid_raw_len = 0;\n      pstr->offsets_needed = 0;\n      pstr->tip_context = ((eflags & REG_NOTBOL) ? CONTEXT_BEGBUF\n\t\t\t   : CONTEXT_NEWLINE | CONTEXT_BEGBUF);\n      if (!pstr->mbs_allocated)\n\tpstr->mbs = (unsigned char *) pstr->raw_mbs;\n      offset = idx;\n    }\n\n  if (BE (offset != 0, 1))\n    {\n      /* Should the already checked characters be kept?  */\n      if (BE (offset < pstr->valid_raw_len, 1))\n\t{\n\t  /* Yes, move them to the front of the buffer.  */\n#ifdef RE_ENABLE_I18N\n\t  if (BE (pstr->offsets_needed, 0))\n\t    {\n\t      Idx low = 0, high = pstr->valid_len, mid;\n\t      do\n\t\t{\n\t\t  mid = (high + low) / 2;\n\t\t  if (pstr->offsets[mid] > offset)\n\t\t    high = mid;\n\t\t  else if (pstr->offsets[mid] < offset)\n\t\t    low = mid + 1;\n\t\t  else\n\t\t    break;\n\t\t}\n\t      while (low < high);\n\t      if (pstr->offsets[mid] < offset)\n\t\t++mid;\n\t      pstr->tip_context = re_string_context_at (pstr, mid - 1,\n\t\t\t\t\t\t\teflags);\n\t      /* This can be quite complicated, so handle specially\n\t\t only the common and easy case where the character with\n\t\t different length representation of lower and upper\n\t\t case is present at or after offset.  */\n\t      if (pstr->valid_len > offset\n\t\t  && mid == offset && pstr->offsets[mid] == offset)\n\t\t{\n\t\t  memmove (pstr->wcs, pstr->wcs + offset,\n\t\t\t   (pstr->valid_len - offset) * sizeof (wint_t));\n\t\t  memmove (pstr->mbs, pstr->mbs + offset, pstr->valid_len - offset);\n\t\t  pstr->valid_len -= offset;\n\t\t  pstr->valid_raw_len -= offset;\n\t\t  for (low = 0; low < pstr->valid_len; low++)\n\t\t    pstr->offsets[low] = pstr->offsets[low + offset] - offset;\n\t\t}\n\t      else\n\t\t{\n\t\t  /* Otherwise, just find out how long the partial multibyte\n\t\t     character at offset is and fill it with WEOF/255.  */\n\t\t  pstr->len = pstr->raw_len - idx + offset;\n\t\t  pstr->stop = pstr->raw_stop - idx + offset;\n\t\t  pstr->offsets_needed = 0;\n\t\t  while (mid > 0 && pstr->offsets[mid - 1] == offset)\n\t\t    --mid;\n\t\t  while (mid < pstr->valid_len)\n\t\t    if (pstr->wcs[mid] != WEOF)\n\t\t      break;\n\t\t    else\n\t\t      ++mid;\n\t\t  if (mid == pstr->valid_len)\n\t\t    pstr->valid_len = 0;\n\t\t  else\n\t\t    {\n\t\t      pstr->valid_len = pstr->offsets[mid] - offset;\n\t\t      if (pstr->valid_len)\n\t\t\t{\n\t\t\t  for (low = 0; low < pstr->valid_len; ++low)\n\t\t\t    pstr->wcs[low] = WEOF;\n\t\t\t  memset (pstr->mbs, 255, pstr->valid_len);\n\t\t\t}\n\t\t    }\n\t\t  pstr->valid_raw_len = pstr->valid_len;\n\t\t}\n\t    }\n\t  else\n#endif\n\t    {\n\t      pstr->tip_context = re_string_context_at (pstr, offset - 1,\n\t\t\t\t\t\t\teflags);\n#ifdef RE_ENABLE_I18N\n\t      if (pstr->mb_cur_max > 1)\n\t\tmemmove (pstr->wcs, pstr->wcs + offset,\n\t\t\t (pstr->valid_len - offset) * sizeof (wint_t));\n#endif /* RE_ENABLE_I18N */\n\t      if (BE (pstr->mbs_allocated, 0))\n\t\tmemmove (pstr->mbs, pstr->mbs + offset,\n\t\t\t pstr->valid_len - offset);\n\t      pstr->valid_len -= offset;\n\t      pstr->valid_raw_len -= offset;\n#if defined DEBUG && DEBUG\n\t      assert (pstr->valid_len > 0);\n#endif\n\t    }\n\t}\n      else\n\t{\n#ifdef RE_ENABLE_I18N\n\t  /* No, skip all characters until IDX.  */\n\t  Idx prev_valid_len = pstr->valid_len;\n\n\t  if (BE (pstr->offsets_needed, 0))\n\t    {\n\t      pstr->len = pstr->raw_len - idx + offset;\n\t      pstr->stop = pstr->raw_stop - idx + offset;\n\t      pstr->offsets_needed = 0;\n\t    }\n#endif\n\t  pstr->valid_len = 0;\n#ifdef RE_ENABLE_I18N\n\t  if (pstr->mb_cur_max > 1)\n\t    {\n\t      Idx wcs_idx;\n\t      wint_t wc = WEOF;\n\n\t      if (pstr->is_utf8)\n\t\t{\n\t\t  const unsigned char *raw, *p, *end;\n\n\t\t  /* Special case UTF-8.  Multi-byte chars start with any\n\t\t     byte other than 0x80 - 0xbf.  */\n\t\t  raw = pstr->raw_mbs + pstr->raw_mbs_idx;\n\t\t  end = raw + (offset - pstr->mb_cur_max);\n\t\t  if (end < pstr->raw_mbs)\n\t\t    end = pstr->raw_mbs;\n\t\t  p = raw + offset - 1;\n#ifdef _LIBC\n\t\t  /* We know the wchar_t encoding is UCS4, so for the simple\n\t\t     case, ASCII characters, skip the conversion step.  */\n\t\t  if (isascii (*p) && BE (pstr->trans == NULL, 1))\n\t\t    {\n\t\t      memset (&pstr->cur_state, '\\0', sizeof (mbstate_t));\n\t\t      /* pstr->valid_len = 0; */\n\t\t      wc = (wchar_t) *p;\n\t\t    }\n\t\t  else\n#endif\n\t\t    for (; p >= end; --p)\n\t\t      if ((*p & 0xc0) != 0x80)\n\t\t\t{\n\t\t\t  mbstate_t cur_state;\n\t\t\t  wchar_t wc2;\n\t\t\t  Idx mlen = raw + pstr->len - p;\n\t\t\t  unsigned char buf[6];\n\t\t\t  size_t mbclen;\n\n\t\t\t  const unsigned char *pp = p;\n\t\t\t  if (BE (pstr->trans != NULL, 0))\n\t\t\t    {\n\t\t\t      int i = mlen < 6 ? mlen : 6;\n\t\t\t      while (--i >= 0)\n\t\t\t\tbuf[i] = pstr->trans[p[i]];\n\t\t\t      pp = buf;\n\t\t\t    }\n\t\t\t  /* XXX Don't use mbrtowc, we know which conversion\n\t\t\t     to use (UTF-8 -> UCS4).  */\n\t\t\t  memset (&cur_state, 0, sizeof (cur_state));\n\t\t\t  mbclen = __mbrtowc (&wc2, (const char *) pp, mlen,\n\t\t\t\t\t      &cur_state);\n\t\t\t  if (raw + offset - p <= mbclen\n\t\t\t      && mbclen < (size_t) -2)\n\t\t\t    {\n\t\t\t      memset (&pstr->cur_state, '\\0',\n\t\t\t\t      sizeof (mbstate_t));\n\t\t\t      pstr->valid_len = mbclen - (raw + offset - p);\n\t\t\t      wc = wc2;\n\t\t\t    }\n\t\t\t  break;\n\t\t\t}\n\t\t}\n\n\t      if (wc == WEOF)\n\t\tpstr->valid_len = re_string_skip_chars (pstr, idx, &wc) - idx;\n\t      if (wc == WEOF)\n\t\tpstr->tip_context\n\t\t  = re_string_context_at (pstr, prev_valid_len - 1, eflags);\n\t      else\n\t\tpstr->tip_context = ((BE (pstr->word_ops_used != 0, 0)\n\t\t\t\t      && IS_WIDE_WORD_CHAR (wc))\n\t\t\t\t     ? CONTEXT_WORD\n\t\t\t\t     : ((IS_WIDE_NEWLINE (wc)\n\t\t\t\t\t && pstr->newline_anchor)\n\t\t\t\t\t? CONTEXT_NEWLINE : 0));\n\t      if (BE (pstr->valid_len, 0))\n\t\t{\n\t\t  for (wcs_idx = 0; wcs_idx < pstr->valid_len; ++wcs_idx)\n\t\t    pstr->wcs[wcs_idx] = WEOF;\n\t\t  if (pstr->mbs_allocated)\n\t\t    memset (pstr->mbs, 255, pstr->valid_len);\n\t\t}\n\t      pstr->valid_raw_len = pstr->valid_len;\n\t    }\n\t  else\n#endif /* RE_ENABLE_I18N */\n\t    {\n\t      int c = pstr->raw_mbs[pstr->raw_mbs_idx + offset - 1];\n\t      pstr->valid_raw_len = 0;\n\t      if (pstr->trans)\n\t\tc = pstr->trans[c];\n\t      pstr->tip_context = (bitset_contain (pstr->word_char, c)\n\t\t\t\t   ? CONTEXT_WORD\n\t\t\t\t   : ((IS_NEWLINE (c) && pstr->newline_anchor)\n\t\t\t\t      ? CONTEXT_NEWLINE : 0));\n\t    }\n\t}\n      if (!BE (pstr->mbs_allocated, 0))\n\tpstr->mbs += offset;\n    }\n  pstr->raw_mbs_idx = idx;\n  pstr->len -= offset;\n  pstr->stop -= offset;\n\n  /* Then build the buffers.  */\n#ifdef RE_ENABLE_I18N\n  if (pstr->mb_cur_max > 1)\n    {\n      if (pstr->icase)\n\t{\n\t  reg_errcode_t ret = build_wcs_upper_buffer (pstr);\n\t  if (BE (ret != REG_NOERROR, 0))\n\t    return ret;\n\t}\n      else\n\tbuild_wcs_buffer (pstr);\n    }\n  else\n#endif /* RE_ENABLE_I18N */\n    if (BE (pstr->mbs_allocated, 0))\n      {\n\tif (pstr->icase)\n\t  build_upper_buffer (pstr);\n\telse if (pstr->trans != NULL)\n\t  re_string_translate_buffer (pstr);\n      }\n    else\n      pstr->valid_len = pstr->len;\n\n  pstr->cur_idx = 0;\n  return REG_NOERROR;\n}",
      "lines": 261,
      "depth": 23,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "internal_function": {
      "start_point": [
        831,
        18
      ],
      "end_point": [
        865,
        1
      ],
      "content": "__attribute__ ((pure))\nre_string_peek_byte_case (const re_string_t *pstr, Idx idx)\n{\n  int ch;\n  Idx off;\n\n  /* Handle the common (easiest) cases first.  */\n  if (BE (!pstr->mbs_allocated, 1))\n    return re_string_peek_byte (pstr, idx);\n\n#ifdef RE_ENABLE_I18N\n  if (pstr->mb_cur_max > 1\n      && ! re_string_is_single_byte_char (pstr, pstr->cur_idx + idx))\n    return re_string_peek_byte (pstr, idx);\n#endif\n\n  off = pstr->cur_idx + idx;\n#ifdef RE_ENABLE_I18N\n  if (pstr->offsets_needed)\n    off = pstr->offsets[off];\n#endif\n\n  ch = pstr->raw_mbs[pstr->raw_mbs_idx + off];\n\n#ifdef RE_ENABLE_I18N\n  /* Ensure that e.g. for tr_TR.UTF-8 BACKSLASH DOTLESS SMALL LETTER I\n     this function returns CAPITAL LETTER I instead of first byte of\n     DOTLESS SMALL LETTER I.  The latter would confuse the parser,\n     since peek_byte_case doesn't advance cur_idx in any way.  */\n  if (pstr->offsets_needed && !isascii (ch))\n    return re_string_peek_byte (pstr, idx);\n#endif\n\n  return ch;\n}",
      "lines": 35,
      "depth": 12,
      "decorators": null
    },
    "re_string_fetch_byte_case": {
      "start_point": [
        867,
        0
      ],
      "end_point": [
        903,
        1
      ],
      "content": "static unsigned char\ninternal_function\nre_string_fetch_byte_case (re_string_t *pstr)\n{\n  if (BE (!pstr->mbs_allocated, 1))\n    return re_string_fetch_byte (pstr);\n\n#ifdef RE_ENABLE_I18N\n  if (pstr->offsets_needed)\n    {\n      Idx off;\n      int ch;\n\n      /* For tr_TR.UTF-8 [[:islower:]] there is\n\t [[: CAPITAL LETTER I WITH DOT lower:]] in mbs.  Skip\n\t in that case the whole multi-byte character and return\n\t the original letter.  On the other side, with\n\t [[: DOTLESS SMALL LETTER I return [[:I, as doing\n\t anything else would complicate things too much.  */\n\n      if (!re_string_first_byte (pstr, pstr->cur_idx))\n\treturn re_string_fetch_byte (pstr);\n\n      off = pstr->offsets[pstr->cur_idx];\n      ch = pstr->raw_mbs[pstr->raw_mbs_idx + off];\n\n      if (! isascii (ch))\n\treturn re_string_fetch_byte (pstr);\n\n      re_string_skip_bytes (pstr,\n\t\t\t    re_string_char_size_at (pstr, pstr->cur_idx));\n      return ch;\n    }\n#endif\n\n  return pstr->raw_mbs[pstr->raw_mbs_idx + pstr->cur_idx++];\n}",
      "lines": 37,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "unsigned char",
        "unsigned",
        "char",
        "internal_function",
        "internal_function"
      ]
    },
    "re_string_destruct": {
      "start_point": [
        905,
        0
      ],
      "end_point": [
        915,
        1
      ],
      "content": "static void\ninternal_function\nre_string_destruct (re_string_t *pstr)\n{\n#ifdef RE_ENABLE_I18N\n  re_free (pstr->wcs);\n  re_free (pstr->offsets);\n#endif /* RE_ENABLE_I18N  */\n  if (pstr->mbs_allocated)\n    re_free (pstr->mbs);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "re_string_context_at": {
      "start_point": [
        919,
        0
      ],
      "end_point": [
        960,
        1
      ],
      "content": "static unsigned int\ninternal_function\nre_string_context_at (const re_string_t *input, Idx idx, int eflags)\n{\n  int c;\n  if (BE (idx < 0, 0))\n    /* In this case, we use the value stored in input->tip_context,\n       since we can't know the character in input->mbs[-1] here.  */\n    return input->tip_context;\n  if (BE (idx == input->len, 0))\n    return ((eflags & REG_NOTEOL) ? CONTEXT_ENDBUF\n\t    : CONTEXT_NEWLINE | CONTEXT_ENDBUF);\n#ifdef RE_ENABLE_I18N\n  if (input->mb_cur_max > 1)\n    {\n      wint_t wc;\n      Idx wc_idx = idx;\n      while(input->wcs[wc_idx] == WEOF)\n\t{\n#if defined DEBUG && DEBUG\n\t  /* It must not happen.  */\n\t  assert (wc_idx >= 0);\n#endif\n\t  --wc_idx;\n\t  if (wc_idx < 0)\n\t    return input->tip_context;\n\t}\n      wc = input->wcs[wc_idx];\n      if (BE (input->word_ops_used != 0, 0) && IS_WIDE_WORD_CHAR (wc))\n\treturn CONTEXT_WORD;\n      return (IS_WIDE_NEWLINE (wc) && input->newline_anchor\n\t      ? CONTEXT_NEWLINE : 0);\n    }\n  else\n#endif\n    {\n      c = re_string_byte_at (input, idx);\n      if (bitset_contain (input->word_char, c))\n\treturn CONTEXT_WORD;\n      return IS_NEWLINE (c) && input->newline_anchor ? CONTEXT_NEWLINE : 0;\n    }\n}",
      "lines": 42,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int",
        "internal_function",
        "internal_function"
      ]
    },
    "re_node_set_alloc": {
      "start_point": [
        965,
        18
      ],
      "end_point": [
        974,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_alloc (re_node_set *set, Idx size)\n{\n  set->alloc = size;\n  set->nelem = 0;\n  set->elems = re_malloc (Idx, size);\n  if (BE (set->elems == NULL, 0) && (MALLOC_0_IS_NONNULL || size != 0))\n    return REG_ESPACE;\n  return REG_NOERROR;\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_init_1": {
      "start_point": [
        977,
        18
      ],
      "end_point": [
        990,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_init_1 (re_node_set *set, Idx elem)\n{\n  set->alloc = 1;\n  set->nelem = 1;\n  set->elems = re_malloc (Idx, 1);\n  if (BE (set->elems == NULL, 0))\n    {\n      set->alloc = set->nelem = 0;\n      return REG_ESPACE;\n    }\n  set->elems[0] = elem;\n  return REG_NOERROR;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_init_2": {
      "start_point": [
        993,
        18
      ],
      "end_point": [
        1020,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_init_2 (re_node_set *set, Idx elem1, Idx elem2)\n{\n  set->alloc = 2;\n  set->elems = re_malloc (Idx, 2);\n  if (BE (set->elems == NULL, 0))\n    return REG_ESPACE;\n  if (elem1 == elem2)\n    {\n      set->nelem = 1;\n      set->elems[0] = elem1;\n    }\n  else\n    {\n      set->nelem = 2;\n      if (elem1 < elem2)\n\t{\n\t  set->elems[0] = elem1;\n\t  set->elems[1] = elem2;\n\t}\n      else\n\t{\n\t  set->elems[0] = elem2;\n\t  set->elems[1] = elem1;\n\t}\n    }\n  return REG_NOERROR;\n}",
      "lines": 28,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_init_copy": {
      "start_point": [
        1023,
        18
      ],
      "end_point": [
        1041,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_init_copy (re_node_set *dest, const re_node_set *src)\n{\n  dest->nelem = src->nelem;\n  if (src->nelem > 0)\n    {\n      dest->alloc = dest->nelem;\n      dest->elems = re_malloc (Idx, dest->alloc);\n      if (BE (dest->elems == NULL, 0))\n\t{\n\t  dest->alloc = dest->nelem = 0;\n\t  return REG_ESPACE;\n\t}\n      memcpy (dest->elems, src->elems, src->nelem * sizeof (Idx));\n    }\n  else\n    re_node_set_init_empty (dest);\n  return REG_NOERROR;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_add_intersect": {
      "start_point": [
        1048,
        18
      ],
      "end_point": [
        1133,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_add_intersect (re_node_set *dest, const re_node_set *src1,\n\t\t\t   const re_node_set *src2)\n{\n  Idx i1, i2, is, id, delta, sbase;\n  if (src1->nelem == 0 || src2->nelem == 0)\n    return REG_NOERROR;\n\n  /* We need dest->nelem + 2 * elems_in_intersection; this is a\n     conservative estimate.  */\n  if (src1->nelem + src2->nelem + dest->nelem > dest->alloc)\n    {\n      Idx new_alloc = src1->nelem + src2->nelem + dest->alloc;\n      Idx *new_elems = re_realloc (dest->elems, Idx, new_alloc);\n      if (BE (new_elems == NULL, 0))\n\treturn REG_ESPACE;\n      dest->elems = new_elems;\n      dest->alloc = new_alloc;\n    }\n\n  /* Find the items in the intersection of SRC1 and SRC2, and copy\n     into the top of DEST those that are not already in DEST itself.  */\n  sbase = dest->nelem + src1->nelem + src2->nelem;\n  i1 = src1->nelem - 1;\n  i2 = src2->nelem - 1;\n  id = dest->nelem - 1;\n  for (;;)\n    {\n      if (src1->elems[i1] == src2->elems[i2])\n\t{\n\t  /* Try to find the item in DEST.  Maybe we could binary search?  */\n\t  while (id >= 0 && dest->elems[id] > src1->elems[i1])\n\t    --id;\n\n\t  if (id < 0 || dest->elems[id] != src1->elems[i1])\n            dest->elems[--sbase] = src1->elems[i1];\n\n\t  if (--i1 < 0 || --i2 < 0)\n\t    break;\n\t}\n\n      /* Lower the highest of the two items.  */\n      else if (src1->elems[i1] < src2->elems[i2])\n\t{\n\t  if (--i2 < 0)\n\t    break;\n\t}\n      else\n\t{\n\t  if (--i1 < 0)\n\t    break;\n\t}\n    }\n\n  id = dest->nelem - 1;\n  is = dest->nelem + src1->nelem + src2->nelem - 1;\n  delta = is - sbase + 1;\n\n  /* Now copy.  When DELTA becomes zero, the remaining\n     DEST elements are already in place; this is more or\n     less the same loop that is in re_node_set_merge.  */\n  dest->nelem += delta;\n  if (delta > 0 && id >= 0)\n    for (;;)\n      {\n\tif (dest->elems[is] > dest->elems[id])\n\t  {\n\t    /* Copy from the top.  */\n\t    dest->elems[id + delta--] = dest->elems[is--];\n\t    if (delta == 0)\n\t      break;\n\t  }\n\telse\n\t  {\n\t    /* Slide from the bottom.  */\n\t    dest->elems[id + delta] = dest->elems[id];\n\t    if (--id < 0)\n\t      break;\n\t  }\n      }\n\n  /* Copy remaining SRC elements.  */\n  memcpy (dest->elems, dest->elems + sbase, delta * sizeof (Idx));\n\n  return REG_NOERROR;\n}",
      "lines": 86,
      "depth": 13,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_init_union": {
      "start_point": [
        1139,
        18
      ],
      "end_point": [
        1186,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_init_union (re_node_set *dest, const re_node_set *src1,\n\t\t\tconst re_node_set *src2)\n{\n  Idx i1, i2, id;\n  if (src1 != NULL && src1->nelem > 0 && src2 != NULL && src2->nelem > 0)\n    {\n      dest->alloc = src1->nelem + src2->nelem;\n      dest->elems = re_malloc (Idx, dest->alloc);\n      if (BE (dest->elems == NULL, 0))\n\treturn REG_ESPACE;\n    }\n  else\n    {\n      if (src1 != NULL && src1->nelem > 0)\n\treturn re_node_set_init_copy (dest, src1);\n      else if (src2 != NULL && src2->nelem > 0)\n\treturn re_node_set_init_copy (dest, src2);\n      else\n\tre_node_set_init_empty (dest);\n      return REG_NOERROR;\n    }\n  for (i1 = i2 = id = 0 ; i1 < src1->nelem && i2 < src2->nelem ;)\n    {\n      if (src1->elems[i1] > src2->elems[i2])\n\t{\n\t  dest->elems[id++] = src2->elems[i2++];\n\t  continue;\n\t}\n      if (src1->elems[i1] == src2->elems[i2])\n\t++i2;\n      dest->elems[id++] = src1->elems[i1++];\n    }\n  if (i1 < src1->nelem)\n    {\n      memcpy (dest->elems + id, src1->elems + i1,\n\t     (src1->nelem - i1) * sizeof (Idx));\n      id += src1->nelem - i1;\n    }\n  else if (i2 < src2->nelem)\n    {\n      memcpy (dest->elems + id, src2->elems + i2,\n\t     (src2->nelem - i2) * sizeof (Idx));\n      id += src2->nelem - i2;\n    }\n  dest->nelem = id;\n  return REG_NOERROR;\n}",
      "lines": 48,
      "depth": 13,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_merge": {
      "start_point": [
        1192,
        18
      ],
      "end_point": [
        1268,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_merge (re_node_set *dest, const re_node_set *src)\n{\n  Idx is, id, sbase, delta;\n  if (src == NULL || src->nelem == 0)\n    return REG_NOERROR;\n  if (dest->alloc < 2 * src->nelem + dest->nelem)\n    {\n      Idx new_alloc = 2 * (src->nelem + dest->alloc);\n      Idx *new_buffer = re_realloc (dest->elems, Idx, new_alloc);\n      if (BE (new_buffer == NULL, 0))\n\treturn REG_ESPACE;\n      dest->elems = new_buffer;\n      dest->alloc = new_alloc;\n    }\n\n  if (BE (dest->nelem == 0, 0))\n    {\n      dest->nelem = src->nelem;\n      memcpy (dest->elems, src->elems, src->nelem * sizeof (Idx));\n      return REG_NOERROR;\n    }\n\n  /* Copy into the top of DEST the items of SRC that are not\n     found in DEST.  Maybe we could binary search in DEST?  */\n  for (sbase = dest->nelem + 2 * src->nelem,\n       is = src->nelem - 1, id = dest->nelem - 1; is >= 0 && id >= 0; )\n    {\n      if (dest->elems[id] == src->elems[is])\n\tis--, id--;\n      else if (dest->elems[id] < src->elems[is])\n\tdest->elems[--sbase] = src->elems[is--];\n      else /* if (dest->elems[id] > src->elems[is]) */\n\t--id;\n    }\n\n  if (is >= 0)\n    {\n      /* If DEST is exhausted, the remaining items of SRC must be unique.  */\n      sbase -= is + 1;\n      memcpy (dest->elems + sbase, src->elems, (is + 1) * sizeof (Idx));\n    }\n\n  id = dest->nelem - 1;\n  is = dest->nelem + 2 * src->nelem - 1;\n  delta = is - sbase + 1;\n  if (delta == 0)\n    return REG_NOERROR;\n\n  /* Now copy.  When DELTA becomes zero, the remaining\n     DEST elements are already in place.  */\n  dest->nelem += delta;\n  for (;;)\n    {\n      if (dest->elems[is] > dest->elems[id])\n\t{\n\t  /* Copy from the top.  */\n\t  dest->elems[id + delta--] = dest->elems[is--];\n\t  if (delta == 0)\n\t    break;\n\t}\n      else\n\t{\n\t  /* Slide from the bottom.  */\n\t  dest->elems[id + delta] = dest->elems[id];\n\t  if (--id < 0)\n\t    {\n\t      /* Copy remaining SRC elements.  */\n\t      memcpy (dest->elems, dest->elems + sbase,\n\t\t      delta * sizeof (Idx));\n\t      break;\n\t    }\n\t}\n    }\n\n  return REG_NOERROR;\n}",
      "lines": 77,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_insert": {
      "start_point": [
        1275,
        18
      ],
      "end_point": [
        1320,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_insert (re_node_set *set, Idx elem)\n{\n  Idx idx;\n  /* In case the set is empty.  */\n  if (set->alloc == 0)\n    return BE (re_node_set_init_1 (set, elem) == REG_NOERROR, 1);\n\n  if (BE (set->nelem, 0) == 0)\n    {\n      /* We already guaranteed above that set->alloc != 0.  */\n      set->elems[0] = elem;\n      ++set->nelem;\n      return true;\n    }\n\n  /* Realloc if we need.  */\n  if (set->alloc == set->nelem)\n    {\n      Idx *new_elems;\n      set->alloc = set->alloc * 2;\n      new_elems = re_realloc (set->elems, Idx, set->alloc);\n      if (BE (new_elems == NULL, 0))\n\treturn false;\n      set->elems = new_elems;\n    }\n\n  /* Move the elements which follows the new element.  Test the\n     first element separately to skip a check in the inner loop.  */\n  if (elem < set->elems[0])\n    {\n      idx = 0;\n      for (idx = set->nelem; idx > 0; idx--)\n\tset->elems[idx] = set->elems[idx - 1];\n    }\n  else\n    {\n      for (idx = set->nelem; set->elems[idx - 1] > elem; idx--)\n\tset->elems[idx] = set->elems[idx - 1];\n    }\n\n  /* Insert the new element.  */\n  set->elems[idx] = elem;\n  ++set->nelem;\n  return true;\n}",
      "lines": 46,
      "depth": 10,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_node_set_insert_last": {
      "start_point": [
        1327,
        18
      ],
      "end_point": [
        1344,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_node_set_insert_last (re_node_set *set, Idx elem)\n{\n  /* Realloc if we need.  */\n  if (set->alloc == set->nelem)\n    {\n      Idx *new_elems;\n      set->alloc = (set->alloc + 1) * 2;\n      new_elems = re_realloc (set->elems, Idx, set->alloc);\n      if (BE (new_elems == NULL, 0))\n\treturn false;\n      set->elems = new_elems;\n    }\n\n  /* Insert the new element.  */\n  set->elems[set->nelem++] = elem;\n  return true;\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "pure": {
      "start_point": [
        1351,
        52
      ],
      "end_point": [
        1360,
        1
      ],
      "content": "re_node_set *set2)\n{\n  Idx i;\n  if (set1 == NULL || set2 == NULL || set1->nelem != set2->nelem)\n    return false;\n  for (i = set1->nelem ; --i >= 0 ; )\n    if (set1->elems[i] != set2->elems[i])\n      return false;\n  return true;\n}",
      "lines": 10,
      "depth": 9,
      "decorators": null
    },
    "re_node_set_remove_at": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1395,
        1
      ],
      "content": "static void\ninternal_function\nre_node_set_remove_at (re_node_set *set, Idx idx)\n{\n  if (idx < 0 || idx >= set->nelem)\n    return;\n  --set->nelem;\n  for (; idx < set->nelem; idx++)\n    set->elems[idx] = set->elems[idx + 1];\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "internal_function",
        "internal_function"
      ]
    },
    "re_dfa_add_node": {
      "start_point": [
        1401,
        0
      ],
      "end_point": [
        1453,
        1
      ],
      "content": "static Idx\ninternal_function\nre_dfa_add_node (re_dfa_t *dfa, re_token_t token)\n{\n  if (BE (dfa->nodes_len >= dfa->nodes_alloc, 0))\n    {\n      size_t new_nodes_alloc = dfa->nodes_alloc * 2;\n      Idx *new_nexts, *new_indices;\n      re_node_set *new_edests, *new_eclosures;\n      re_token_t *new_nodes;\n\n      /* Avoid overflows in realloc.  */\n      const size_t max_object_size = MAX (sizeof (re_token_t),\n\t\t\t\t\t  MAX (sizeof (re_node_set),\n\t\t\t\t\t       sizeof (Idx)));\n      if (BE (MIN (IDX_MAX, SIZE_MAX / max_object_size) < new_nodes_alloc, 0))\n\treturn -1;\n\n      new_nodes = re_realloc (dfa->nodes, re_token_t, new_nodes_alloc);\n      if (BE (new_nodes == NULL, 0))\n\treturn -1;\n      dfa->nodes = new_nodes;\n      new_nexts = re_realloc (dfa->nexts, Idx, new_nodes_alloc);\n      new_indices = re_realloc (dfa->org_indices, Idx, new_nodes_alloc);\n      new_edests = re_realloc (dfa->edests, re_node_set, new_nodes_alloc);\n      new_eclosures = re_realloc (dfa->eclosures, re_node_set, new_nodes_alloc);\n      if (BE (new_nexts == NULL || new_indices == NULL\n\t      || new_edests == NULL || new_eclosures == NULL, 0))\n\t{\n\t   re_free (new_nexts);\n\t   re_free (new_indices);\n\t   re_free (new_edests);\n\t   re_free (new_eclosures);\n\t   return -1;\n\t}\n      dfa->nexts = new_nexts;\n      dfa->org_indices = new_indices;\n      dfa->edests = new_edests;\n      dfa->eclosures = new_eclosures;\n      dfa->nodes_alloc = new_nodes_alloc;\n    }\n  dfa->nodes[dfa->nodes_len] = token;\n  dfa->nodes[dfa->nodes_len].constraint = 0;\n#ifdef RE_ENABLE_I18N\n  dfa->nodes[dfa->nodes_len].accept_mb =\n    ((token.type == OP_PERIOD && dfa->mb_cur_max > 1)\n     || token.type == COMPLEX_BRACKET);\n#endif\n  dfa->nexts[dfa->nodes_len] = -1;\n  re_node_set_init_empty (dfa->edests + dfa->nodes_len);\n  re_node_set_init_empty (dfa->eclosures + dfa->nodes_len);\n  return dfa->nodes_len++;\n}",
      "lines": 53,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "Idx",
        "internal_function",
        "internal_function"
      ]
    },
    "calc_state_hash": {
      "start_point": [
        1455,
        0
      ],
      "end_point": [
        1464,
        1
      ],
      "content": "static re_hashval_t\ninternal_function\ncalc_state_hash (const re_node_set *nodes, unsigned int context)\n{\n  re_hashval_t hash = nodes->nelem + context;\n  Idx i;\n  for (i = 0 ; i < nodes->nelem ; i++)\n    hash += nodes->elems[i];\n  return hash;\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "re_hashval_t",
        "internal_function",
        "internal_function"
      ]
    },
    "re_acquire_state": {
      "start_point": [
        1476,
        18
      ],
      "end_point": [
        1511,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_acquire_state (reg_errcode_t *err, const re_dfa_t *dfa,\n\t\t  const re_node_set *nodes)\n{\n  re_hashval_t hash;\n  re_dfastate_t *new_state;\n  struct re_state_table_entry *spot;\n  Idx i;\n#if defined GCC_LINT || defined lint\n  /* Suppress bogus uninitialized-variable warnings.  */\n  *err = REG_NOERROR;\n#endif\n  if (BE (nodes->nelem == 0, 0))\n    {\n      *err = REG_NOERROR;\n      return NULL;\n    }\n  hash = calc_state_hash (nodes, 0);\n  spot = dfa->state_table + (hash & dfa->state_hash_mask);\n\n  for (i = 0 ; i < spot->num ; i++)\n    {\n      re_dfastate_t *state = spot->array[i];\n      if (hash != state->hash)\n\tcontinue;\n      if (re_node_set_compare (&state->nodes, nodes))\n\treturn state;\n    }\n\n  /* There are no appropriate state in the dfa, create the new one.  */\n  new_state = create_ci_newstate (dfa, nodes, hash);\n  if (BE (new_state == NULL, 0))\n    *err = REG_ESPACE;\n\n  return new_state;\n}",
      "lines": 36,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "re_acquire_state_context": {
      "start_point": [
        1524,
        18
      ],
      "end_point": [
        1558,
        1
      ],
      "content": "__attribute_warn_unused_result__\nre_acquire_state_context (reg_errcode_t *err, const re_dfa_t *dfa,\n\t\t\t  const re_node_set *nodes, unsigned int context)\n{\n  re_hashval_t hash;\n  re_dfastate_t *new_state;\n  struct re_state_table_entry *spot;\n  Idx i;\n#if defined GCC_LINT || defined lint\n  /* Suppress bogus uninitialized-variable warnings.  */\n  *err = REG_NOERROR;\n#endif\n  if (nodes->nelem == 0)\n    {\n      *err = REG_NOERROR;\n      return NULL;\n    }\n  hash = calc_state_hash (nodes, context);\n  spot = dfa->state_table + (hash & dfa->state_hash_mask);\n\n  for (i = 0 ; i < spot->num ; i++)\n    {\n      re_dfastate_t *state = spot->array[i];\n      if (state->hash == hash\n\t  && state->context == context\n\t  && re_node_set_compare (state->entrance_nodes, nodes))\n\treturn state;\n    }\n  /* There are no appropriate state in 'dfa', create the new one.  */\n  new_state = create_cd_newstate (dfa, nodes, context, hash);\n  if (BE (new_state == NULL, 0))\n    *err = REG_ESPACE;\n\n  return new_state;\n}",
      "lines": 35,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "register_state": {
      "start_point": [
        1564,
        0
      ],
      "end_point": [
        1598,
        1
      ],
      "content": "static reg_errcode_t\n__attribute_warn_unused_result__\nregister_state (const re_dfa_t *dfa, re_dfastate_t *newstate,\n\t\tre_hashval_t hash)\n{\n  struct re_state_table_entry *spot;\n  reg_errcode_t err;\n  Idx i;\n\n  newstate->hash = hash;\n  err = re_node_set_alloc (&newstate->non_eps_nodes, newstate->nodes.nelem);\n  if (BE (err != REG_NOERROR, 0))\n    return REG_ESPACE;\n  for (i = 0; i < newstate->nodes.nelem; i++)\n    {\n      Idx elem = newstate->nodes.elems[i];\n      if (!IS_EPSILON_NODE (dfa->nodes[elem].type))\n\tif (! re_node_set_insert_last (&newstate->non_eps_nodes, elem))\n\t  return REG_ESPACE;\n    }\n\n  spot = dfa->state_table + (hash & dfa->state_hash_mask);\n  if (BE (spot->alloc <= spot->num, 0))\n    {\n      Idx new_alloc = 2 * spot->num + 2;\n      re_dfastate_t **new_array = re_realloc (spot->array, re_dfastate_t *,\n\t\t\t\t\t      new_alloc);\n      if (BE (new_array == NULL, 0))\n\treturn REG_ESPACE;\n      spot->array = new_array;\n      spot->alloc = new_alloc;\n    }\n  spot->array[spot->num++] = newstate;\n  return REG_NOERROR;\n}",
      "lines": 35,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "reg_errcode_t",
        "__attribute_warn_unused_result__",
        "__attribute_warn_unused_result__"
      ]
    },
    "free_state": {
      "start_point": [
        1600,
        0
      ],
      "end_point": [
        1614,
        1
      ],
      "content": "static void\nfree_state (re_dfastate_t *state)\n{\n  re_node_set_free (&state->non_eps_nodes);\n  re_node_set_free (&state->inveclosure);\n  if (state->entrance_nodes != &state->nodes)\n    {\n      re_node_set_free (state->entrance_nodes);\n      re_free (state->entrance_nodes);\n    }\n  re_node_set_free (&state->nodes);\n  re_free (state->word_trtable);\n  re_free (state->trtable);\n  re_free (state);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "create_ci_newstate": {
      "start_point": [
        1620,
        18
      ],
      "end_point": [
        1664,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncreate_ci_newstate (const re_dfa_t *dfa, const re_node_set *nodes,\n\t\t    re_hashval_t hash)\n{\n  Idx i;\n  reg_errcode_t err;\n  re_dfastate_t *newstate;\n\n  newstate = (re_dfastate_t *) calloc (sizeof (re_dfastate_t), 1);\n  if (BE (newstate == NULL, 0))\n    return NULL;\n  err = re_node_set_init_copy (&newstate->nodes, nodes);\n  if (BE (err != REG_NOERROR, 0))\n    {\n      re_free (newstate);\n      return NULL;\n    }\n\n  newstate->entrance_nodes = &newstate->nodes;\n  for (i = 0 ; i < nodes->nelem ; i++)\n    {\n      re_token_t *node = dfa->nodes + nodes->elems[i];\n      re_token_type_t type = node->type;\n      if (type == CHARACTER && !node->constraint)\n\tcontinue;\n#ifdef RE_ENABLE_I18N\n      newstate->accept_mb |= node->accept_mb;\n#endif /* RE_ENABLE_I18N */\n\n      /* If the state has the halt node, the state is a halt state.  */\n      if (type == END_OF_RE)\n\tnewstate->halt = 1;\n      else if (type == OP_BACK_REF)\n\tnewstate->has_backref = 1;\n      else if (type == ANCHOR || node->constraint)\n\tnewstate->has_constraint = 1;\n    }\n  err = register_state (dfa, newstate, hash);\n  if (BE (err != REG_NOERROR, 0))\n    {\n      free_state (newstate);\n      newstate = NULL;\n    }\n  return newstate;\n}",
      "lines": 45,
      "depth": 11,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    },
    "create_cd_newstate": {
      "start_point": [
        1670,
        18
      ],
      "end_point": [
        1740,
        1
      ],
      "content": "__attribute_warn_unused_result__\ncreate_cd_newstate (const re_dfa_t *dfa, const re_node_set *nodes,\n\t\t    unsigned int context, re_hashval_t hash)\n{\n  Idx i, nctx_nodes = 0;\n  reg_errcode_t err;\n  re_dfastate_t *newstate;\n\n  newstate = (re_dfastate_t *) calloc (sizeof (re_dfastate_t), 1);\n  if (BE (newstate == NULL, 0))\n    return NULL;\n  err = re_node_set_init_copy (&newstate->nodes, nodes);\n  if (BE (err != REG_NOERROR, 0))\n    {\n      re_free (newstate);\n      return NULL;\n    }\n\n  newstate->context = context;\n  newstate->entrance_nodes = &newstate->nodes;\n\n  for (i = 0 ; i < nodes->nelem ; i++)\n    {\n      re_token_t *node = dfa->nodes + nodes->elems[i];\n      re_token_type_t type = node->type;\n      unsigned int constraint = node->constraint;\n\n      if (type == CHARACTER && !constraint)\n\tcontinue;\n#ifdef RE_ENABLE_I18N\n      newstate->accept_mb |= node->accept_mb;\n#endif /* RE_ENABLE_I18N */\n\n      /* If the state has the halt node, the state is a halt state.  */\n      if (type == END_OF_RE)\n\tnewstate->halt = 1;\n      else if (type == OP_BACK_REF)\n\tnewstate->has_backref = 1;\n\n      if (constraint)\n\t{\n\t  if (newstate->entrance_nodes == &newstate->nodes)\n\t    {\n\t      newstate->entrance_nodes = re_malloc (re_node_set, 1);\n\t      if (BE (newstate->entrance_nodes == NULL, 0))\n\t\t{\n\t\t  free_state (newstate);\n\t\t  return NULL;\n\t\t}\n\t      if (re_node_set_init_copy (newstate->entrance_nodes, nodes)\n\t\t  != REG_NOERROR)\n\t\treturn NULL;\n\t      nctx_nodes = 0;\n\t      newstate->has_constraint = 1;\n\t    }\n\n\t  if (NOT_SATISFY_PREV_CONSTRAINT (constraint,context))\n\t    {\n\t      re_node_set_remove_at (&newstate->nodes, i - nctx_nodes);\n\t      ++nctx_nodes;\n\t    }\n\t}\n    }\n  err = register_state (dfa, newstate, hash);\n  if (BE (err != REG_NOERROR, 0))\n    {\n      free_state (newstate);\n      newstate = NULL;\n    }\n  return  newstate;\n}",
      "lines": 71,
      "depth": 15,
      "decorators": [
        "__attribute_warn_unused_result__"
      ]
    }
  },
  "grep/grep-3.1/lib/regex_internal.h": {
    "bitset_set": {
      "start_point": [
        763,
        0
      ],
      "end_point": [
        767,
        1
      ],
      "content": "static void\nbitset_set (bitset_t set, Idx i)\n{\n  set[i / BITSET_WORD_BITS] |= (bitset_word_t) 1 << i % BITSET_WORD_BITS;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "bitset_clear": {
      "start_point": [
        769,
        0
      ],
      "end_point": [
        773,
        1
      ],
      "content": "static void\nbitset_clear (bitset_t set, Idx i)\n{\n  set[i / BITSET_WORD_BITS] &= ~ ((bitset_word_t) 1 << i % BITSET_WORD_BITS);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "bitset_contain": {
      "start_point": [
        775,
        0
      ],
      "end_point": [
        779,
        1
      ],
      "content": "static bool\nbitset_contain (const bitset_t set, Idx i)\n{\n  return (set[i / BITSET_WORD_BITS] >> i % BITSET_WORD_BITS) & 1;\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "bitset_empty": {
      "start_point": [
        781,
        0
      ],
      "end_point": [
        785,
        1
      ],
      "content": "static void\nbitset_empty (bitset_t set)\n{\n  memset (set, '\\0', sizeof (bitset_t));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "bitset_set_all": {
      "start_point": [
        787,
        0
      ],
      "end_point": [
        794,
        1
      ],
      "content": "static void\nbitset_set_all (bitset_t set)\n{\n  memset (set, -1, sizeof (bitset_word_t) * (SBC_MAX / BITSET_WORD_BITS));\n  if (SBC_MAX % BITSET_WORD_BITS != 0)\n    set[BITSET_WORDS - 1] =\n      ((bitset_word_t) 1 << SBC_MAX % BITSET_WORD_BITS) - 1;\n}",
      "lines": 8,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "bitset_copy": {
      "start_point": [
        796,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "static void\nbitset_copy (bitset_t dest, const bitset_t src)\n{\n  memcpy (dest, src, sizeof (bitset_t));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "bitset_not": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        812,
        1
      ],
      "content": "static void __attribute__ ((unused))\nbitset_not (bitset_t set)\n{\n  int bitset_i;\n  for (bitset_i = 0; bitset_i < SBC_MAX / BITSET_WORD_BITS; ++bitset_i)\n    set[bitset_i] = ~set[bitset_i];\n  if (SBC_MAX % BITSET_WORD_BITS != 0)\n    set[BITSET_WORDS - 1] =\n      ((((bitset_word_t) 1 << SBC_MAX % BITSET_WORD_BITS) - 1)\n       & ~set[BITSET_WORDS - 1]);\n}",
      "lines": 11,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void",
        "__attribute__ ((unused))",
        "__attribute__",
        "(",
        "(unused)",
        "(",
        "unused",
        ")",
        ")"
      ]
    },
    "bitset_merge": {
      "start_point": [
        814,
        0
      ],
      "end_point": [
        820,
        1
      ],
      "content": "static void __attribute__ ((unused))\nbitset_merge (bitset_t dest, const bitset_t src)\n{\n  int bitset_i;\n  for (bitset_i = 0; bitset_i < BITSET_WORDS; ++bitset_i)\n    dest[bitset_i] |= src[bitset_i];\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "__attribute__ ((unused))",
        "__attribute__",
        "(",
        "(unused)",
        "(",
        "unused",
        ")",
        ")"
      ]
    },
    "bitset_mask": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        828,
        1
      ],
      "content": "static void __attribute__ ((unused))\nbitset_mask (bitset_t dest, const bitset_t src)\n{\n  int bitset_i;\n  for (bitset_i = 0; bitset_i < BITSET_WORDS; ++bitset_i)\n    dest[bitset_i] &= src[bitset_i];\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "__attribute__ ((unused))",
        "__attribute__",
        "(",
        "(unused)",
        "(",
        "unused",
        ")",
        ")"
      ]
    },
    "internal_function": [
      {
        "start_point": [
          833,
          18
        ],
        "end_point": [
          843,
          1
        ],
        "content": "__attribute__ ((pure, unused))\nre_string_char_size_at (const re_string_t *pstr, Idx idx)\n{\n  int byte_idx;\n  if (pstr->mb_cur_max == 1)\n    return 1;\n  for (byte_idx = 1; idx + byte_idx < pstr->valid_len; ++byte_idx)\n    if (pstr->wcs[idx + byte_idx] != WEOF)\n      break;\n  return byte_idx;\n}",
        "lines": 11,
        "depth": 9,
        "decorators": null
      },
      {
        "start_point": [
          846,
          18
        ],
        "end_point": [
          852,
          1
        ],
        "content": "__attribute__ ((pure, unused))\nre_string_wchar_at (const re_string_t *pstr, Idx idx)\n{\n  if (pstr->mb_cur_max == 1)\n    return (wint_t) pstr->mbs[idx];\n  return (wint_t) pstr->wcs[idx];\n}",
        "lines": 7,
        "depth": 8,
        "decorators": null
      },
      {
        "start_point": [
          859,
          18
        ],
        "end_point": [
          881,
          1
        ],
        "content": "__attribute__ ((pure, unused))\nre_string_elem_size_at (const re_string_t *pstr, Idx idx)\n{\n# ifdef _LIBC\n  const unsigned char *p, *extra;\n  const int32_t *table, *indirect;\n  uint_fast32_t nrules = _NL_CURRENT_WORD (LC_COLLATE, _NL_COLLATE_NRULES);\n\n  if (nrules != 0)\n    {\n      table = (const int32_t *) _NL_CURRENT (LC_COLLATE, _NL_COLLATE_TABLEMB);\n      extra = (const unsigned char *)\n\t_NL_CURRENT (LC_COLLATE, _NL_COLLATE_EXTRAMB);\n      indirect = (const int32_t *) _NL_CURRENT (LC_COLLATE,\n\t\t\t\t\t\t_NL_COLLATE_INDIRECTMB);\n      p = pstr->mbs + idx;\n      findidx (table, indirect, extra, &p, pstr->len - idx);\n      return p - pstr->mbs - idx;\n    }\n  else\n# endif /* _LIBC */\n    return 1;\n}",
        "lines": 23,
        "depth": 11,
        "decorators": null
      }
    ]
  },
  "grep/grep-3.1/lib/safe-read.c": {
    "safe_rw": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "content": "size_t\nsafe_rw (int fd, void const *buf, size_t count)\n{\n  /* Work around a bug in Tru64 5.1.  Attempting to read more than\n     INT_MAX bytes fails with errno == EINVAL.  See\n     <http://lists.gnu.org/archive/html/bug-gnu-utils/2002-04/msg00010.html>.\n     When decreasing COUNT, keep it block-aligned.  */\n  enum { BUGGY_READ_MAXIMUM = INT_MAX & ~8191 };\n\n  for (;;)\n    {\n      ssize_t result = rw (fd, buf, count);\n\n      if (0 <= result)\n        return result;\n      else if (IS_EINTR (errno))\n        continue;\n      else if (errno == EINVAL && BUGGY_READ_MAXIMUM < count)\n        count = BUGGY_READ_MAXIMUM;\n      else\n        return result;\n    }\n}",
      "lines": 23,
      "depth": 11,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/safe-read.h": {},
  "grep/grep-3.1/lib/same-inode.h": {},
  "grep/grep-3.1/lib/save-cwd.c": {
    "save_cwd": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        77,
        1
      ],
      "content": "int\nsave_cwd (struct saved_cwd *cwd)\n{\n  cwd->name = NULL;\n\n  cwd->desc = open (\".\", O_SEARCH);\n  if (!GNULIB_FCNTL_SAFER)\n    cwd->desc = fd_safer (cwd->desc);\n  if (cwd->desc < 0)\n    {\n      cwd->name = getcwd (NULL, 0);\n      return cwd->name ? 0 : -1;\n    }\n\n  set_cloexec_flag (cwd->desc, true);\n  return 0;\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "restore_cwd": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "content": "int\nrestore_cwd (const struct saved_cwd *cwd)\n{\n  if (0 <= cwd->desc)\n    return fchdir (cwd->desc);\n  else\n    return chdir_long (cwd->name);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "free_cwd": {
      "start_point": [
        92,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "content": "void\nfree_cwd (struct saved_cwd *cwd)\n{\n  if (cwd->desc >= 0)\n    close (cwd->desc);\n  free (cwd->name);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/save-cwd.h": {},
  "grep/grep-3.1/lib/stat-w32.c": {
    "initialize": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "static void\ninitialize (void)\n{\n  HMODULE kernel32 = LoadLibrary (\"kernel32.dll\");\n  if (kernel32 != NULL)\n    {\n#if _GL_WINDOWS_STAT_INODES == 2\n      GetFileInformationByHandleExFunc =\n        (GetFileInformationByHandleExFuncType) GetProcAddress (kernel32, \"GetFileInformationByHandleEx\");\n#endif\n      GetFinalPathNameByHandleFunc =\n        (GetFinalPathNameByHandleFuncType) GetProcAddress (kernel32, \"GetFinalPathNameByHandleA\");\n    }\n  initialized = TRUE;\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gl_convert_FILETIME_to_timespec": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "struct timespec\n_gl_convert_FILETIME_to_timespec (const FILETIME *ft)\n{\n  struct timespec result;\n  /* FILETIME: <https://msdn.microsoft.com/en-us/library/ms724284.aspx> */\n  unsigned long long since_1601 =\n    ((unsigned long long) ft->dwHighDateTime << 32)\n    | (unsigned long long) ft->dwLowDateTime;\n  if (since_1601 == 0)\n    {\n      result.tv_sec = 0;\n      result.tv_nsec = 0;\n    }\n  else\n    {\n      /* Between 1601-01-01 and 1970-01-01 there were 280 normal years and 89\n         leap years, in total 134774 days.  */\n      unsigned long long since_1970 =\n        since_1601 - (unsigned long long) 134774 * (unsigned long long) 86400 * (unsigned long long) 10000000;\n      result.tv_sec = since_1970 / (unsigned long long) 10000000;\n      result.tv_nsec = (unsigned long) (since_1970 % (unsigned long long) 10000000) * 100;\n    }\n  return result;\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "struct timespec",
        "struct",
        "timespec"
      ]
    },
    "_gl_convert_FILETIME_to_POSIX": {
      "start_point": [
        99,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "content": "time_t\n_gl_convert_FILETIME_to_POSIX (const FILETIME *ft)\n{\n  /* FILETIME: <https://msdn.microsoft.com/en-us/library/ms724284.aspx> */\n  unsigned long long since_1601 =\n    ((unsigned long long) ft->dwHighDateTime << 32)\n    | (unsigned long long) ft->dwLowDateTime;\n  if (since_1601 == 0)\n    return 0;\n  else\n    {\n      /* Between 1601-01-01 and 1970-01-01 there were 280 normal years and 89\n         leap years, in total 134774 days.  */\n      unsigned long long since_1970 =\n        since_1601 - (unsigned long long) 134774 * (unsigned long long) 86400 * (unsigned long long) 10000000;\n      return since_1970 / (unsigned long long) 10000000;\n    }\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "time_t"
      ]
    },
    "_gl_fstat_by_handle": {
      "start_point": [
        122,
        0
      ],
      "end_point": [
        412,
        1
      ],
      "content": "int\n_gl_fstat_by_handle (HANDLE h, const char *path, struct stat *buf)\n{\n  /* GetFileType\n     <https://msdn.microsoft.com/en-us/library/aa364960.aspx> */\n  DWORD type = GetFileType (h);\n  if (type == FILE_TYPE_DISK)\n    {\n      if (!initialized)\n        initialize ();\n\n      /* st_mode can be determined through\n         GetFileAttributesEx\n         <https://msdn.microsoft.com/en-us/library/aa364946.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa365739.aspx>\n         or through\n         GetFileInformationByHandle\n         <https://msdn.microsoft.com/en-us/library/aa364952.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363788.aspx>\n         or through\n         GetFileInformationByHandleEx with argument FileBasicInfo\n         <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa364217.aspx>\n         The latter requires -D_WIN32_WINNT=_WIN32_WINNT_VISTA or higher.  */\n      BY_HANDLE_FILE_INFORMATION info;\n      if (! GetFileInformationByHandle (h, &info))\n        goto failed;\n\n      /* Test for error conditions before starting to fill *buf.  */\n      if (sizeof (buf->st_size) <= 4 && info.nFileSizeHigh > 0)\n        {\n          errno = EOVERFLOW;\n          return -1;\n        }\n\n#if _GL_WINDOWS_STAT_INODES\n      /* st_ino can be determined through\n         GetFileInformationByHandle\n         <https://msdn.microsoft.com/en-us/library/aa364952.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363788.aspx>\n         as 64 bits, or through\n         GetFileInformationByHandleEx with argument FileIdInfo\n         <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n         <https://msdn.microsoft.com/en-us/library/hh802691.aspx>\n         as 128 bits.\n         The latter requires -D_WIN32_WINNT=_WIN32_WINNT_WIN8 or higher.  */\n      /* Experiments show that GetFileInformationByHandleEx does not provide\n         much more information than GetFileInformationByHandle:\n           * The dwVolumeSerialNumber from GetFileInformationByHandle is equal\n             to the low 32 bits of the 64-bit VolumeSerialNumber from\n             GetFileInformationByHandleEx, and is apparently sufficient for\n             identifying the device.\n           * The nFileIndex from GetFileInformationByHandle is equal to the low\n             64 bits of the 128-bit FileId from GetFileInformationByHandleEx,\n             and the high 64 bits of this 128-bit FileId are zero.\n           * On a FAT file system, GetFileInformationByHandleEx fails with error\n             ERROR_INVALID_PARAMETER, whereas GetFileInformationByHandle\n             succeeds.\n           * On a CIFS/SMB file system, GetFileInformationByHandleEx fails with\n             error ERROR_INVALID_LEVEL, whereas GetFileInformationByHandle\n             succeeds.  */\n# if _GL_WINDOWS_STAT_INODES == 2\n      if (GetFileInformationByHandleExFunc != NULL)\n        {\n          FILE_ID_INFO id;\n          if (GetFileInformationByHandleExFunc (h, FileIdInfo, &id, sizeof (id)))\n            {\n              buf->st_dev = id.VolumeSerialNumber;\n              verify (sizeof (ino_t) == sizeof (id.FileId));\n              memcpy (&buf->st_ino, &id.FileId, sizeof (ino_t));\n              goto ino_done;\n            }\n          else\n            {\n              switch (GetLastError ())\n                {\n                case ERROR_INVALID_PARAMETER: /* older Windows version, or FAT */\n                case ERROR_INVALID_LEVEL: /* CIFS/SMB file system */\n                  goto fallback;\n                default:\n                  goto failed;\n                }\n            }\n        }\n     fallback: ;\n      /* Fallback for older Windows versions.  */\n      buf->st_dev = info.dwVolumeSerialNumber;\n      buf->st_ino._gl_ino[0] = ((ULONGLONG) info.nFileIndexHigh << 32) | (ULONGLONG) info.nFileIndexLow;\n      buf->st_ino._gl_ino[1] = 0;\n     ino_done: ;\n# else /* _GL_WINDOWS_STAT_INODES == 1 */\n      buf->st_dev = info.dwVolumeSerialNumber;\n      buf->st_ino = ((ULONGLONG) info.nFileIndexHigh << 32) | (ULONGLONG) info.nFileIndexLow;\n# endif\n#else\n      /* st_ino is not wide enough for identifying a file on a device.\n         Without st_ino, st_dev is pointless.  */\n      buf->st_dev = 0;\n      buf->st_ino = 0;\n#endif\n\n      /* st_mode.  */\n      unsigned int mode =\n        /* XXX How to handle FILE_ATTRIBUTE_REPARSE_POINT ?  */\n        ((info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) ? _S_IFDIR | S_IEXEC_UGO : _S_IFREG)\n        | S_IREAD_UGO\n        | ((info.dwFileAttributes & FILE_ATTRIBUTE_READONLY) ? 0 : S_IWRITE_UGO);\n      if (!(info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))\n        {\n          /* Determine whether the file is executable by looking at the file\n             name suffix.\n             If the file name is already known, use it. Otherwise, for\n             non-empty files, it can be determined through\n             GetFinalPathNameByHandle\n             <https://msdn.microsoft.com/en-us/library/aa364962.aspx>\n             or through\n             GetFileInformationByHandleEx with argument FileNameInfo\n             <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n             <https://msdn.microsoft.com/en-us/library/aa364388.aspx>\n             Both require -D_WIN32_WINNT=_WIN32_WINNT_VISTA or higher.  */\n          if (info.nFileSizeHigh > 0 || info.nFileSizeLow > 0)\n            {\n              char fpath[PATH_MAX];\n              if (path != NULL\n                  || (GetFinalPathNameByHandleFunc != NULL\n                      && GetFinalPathNameByHandleFunc (h, fpath, sizeof (fpath), VOLUME_NAME_NONE)\n                         < sizeof (fpath)\n                      && (path = fpath, 1)))\n                {\n                  const char *last_dot = NULL;\n                  const char *p;\n                  for (p = path; *p != '\\0'; p++)\n                    if (*p == '.')\n                      last_dot = p;\n                  if (last_dot != NULL)\n                    {\n                      const char *suffix = last_dot + 1;\n                      if (_stricmp (suffix, \"exe\") == 0\n                          || _stricmp (suffix, \"bat\") == 0\n                          || _stricmp (suffix, \"cmd\") == 0\n                          || _stricmp (suffix, \"com\") == 0)\n                        mode |= S_IEXEC_UGO;\n                    }\n                }\n              else\n                /* Cannot determine file name.  Pretend that it is executable.  */\n                mode |= S_IEXEC_UGO;\n            }\n        }\n      buf->st_mode = mode;\n\n      /* st_nlink can be determined through\n         GetFileInformationByHandle\n         <https://msdn.microsoft.com/en-us/library/aa364952.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363788.aspx>\n         or through\n         GetFileInformationByHandleEx with argument FileStandardInfo\n         <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa364401.aspx>\n         The latter requires -D_WIN32_WINNT=_WIN32_WINNT_VISTA or higher.  */\n      buf->st_nlink = (info.nNumberOfLinks > SHRT_MAX ? SHRT_MAX : info.nNumberOfLinks);\n\n      /* There's no easy way to map the Windows SID concept to an integer.  */\n      buf->st_uid = 0;\n      buf->st_gid = 0;\n\n      /* st_rdev is irrelevant for normal files and directories.  */\n      buf->st_rdev = 0;\n\n      /* st_size can be determined through\n         GetFileSizeEx\n         <https://msdn.microsoft.com/en-us/library/aa364957.aspx>\n         or through\n         GetFileAttributesEx\n         <https://msdn.microsoft.com/en-us/library/aa364946.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa365739.aspx>\n         or through\n         GetFileInformationByHandle\n         <https://msdn.microsoft.com/en-us/library/aa364952.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363788.aspx>\n         or through\n         GetFileInformationByHandleEx with argument FileStandardInfo\n         <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa364401.aspx>\n         The latter requires -D_WIN32_WINNT=_WIN32_WINNT_VISTA or higher.  */\n      if (sizeof (buf->st_size) <= 4)\n        /* Range check already done above.  */\n        buf->st_size = info.nFileSizeLow;\n      else\n        buf->st_size = ((long long) info.nFileSizeHigh << 32) | (long long) info.nFileSizeLow;\n\n      /* st_atime, st_mtime, st_ctime can be determined through\n         GetFileTime\n         <https://msdn.microsoft.com/en-us/library/ms724320.aspx>\n         or through\n         GetFileAttributesEx\n         <https://msdn.microsoft.com/en-us/library/aa364946.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa365739.aspx>\n         or through\n         GetFileInformationByHandle\n         <https://msdn.microsoft.com/en-us/library/aa364952.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363788.aspx>\n         or through\n         GetFileInformationByHandleEx with argument FileBasicInfo\n         <https://msdn.microsoft.com/en-us/library/aa364953.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa364217.aspx>\n         The latter requires -D_WIN32_WINNT=_WIN32_WINNT_VISTA or higher.  */\n#if _GL_WINDOWS_STAT_TIMESPEC\n      buf->st_atim = _gl_convert_FILETIME_to_timespec (&info.ftLastAccessTime);\n      buf->st_mtim = _gl_convert_FILETIME_to_timespec (&info.ftLastWriteTime);\n      buf->st_ctim = _gl_convert_FILETIME_to_timespec (&info.ftCreationTime);\n#else\n      buf->st_atime = _gl_convert_FILETIME_to_POSIX (&info.ftLastAccessTime);\n      buf->st_mtime = _gl_convert_FILETIME_to_POSIX (&info.ftLastWriteTime);\n      buf->st_ctime = _gl_convert_FILETIME_to_POSIX (&info.ftCreationTime);\n#endif\n\n      return 0;\n    }\n  else if (type == FILE_TYPE_CHAR || type == FILE_TYPE_PIPE)\n    {\n      buf->st_dev = 0;\n#if _GL_WINDOWS_STAT_INODES == 2\n      buf->st_ino._gl_ino[0] = buf->st_ino._gl_ino[1] = 0;\n#else\n      buf->st_ino = 0;\n#endif\n      buf->st_mode = (type == FILE_TYPE_PIPE ? _S_IFIFO : _S_IFCHR);\n      buf->st_nlink = 1;\n      buf->st_uid = 0;\n      buf->st_gid = 0;\n      buf->st_rdev = 0;\n      if (type == FILE_TYPE_PIPE)\n        {\n          /* PeekNamedPipe\n             <https://msdn.microsoft.com/en-us/library/aa365779.aspx> */\n          DWORD bytes_available;\n          if (PeekNamedPipe (h, NULL, 0, NULL, &bytes_available, NULL))\n            buf->st_size = bytes_available;\n          else\n            buf->st_size = 0;\n        }\n      else\n        buf->st_size = 0;\n#if _GL_WINDOWS_STAT_TIMESPEC\n      buf->st_atim.tv_sec = 0; buf->st_atim.tv_nsec = 0;\n      buf->st_mtim.tv_sec = 0; buf->st_mtim.tv_nsec = 0;\n      buf->st_ctim.tv_sec = 0; buf->st_ctim.tv_nsec = 0;\n#else\n      buf->st_atime = 0;\n      buf->st_mtime = 0;\n      buf->st_ctime = 0;\n#endif\n      return 0;\n    }\n  else\n    {\n      errno = ENOENT;\n      return -1;\n    }\n\n failed:\n  {\n    DWORD error = GetLastError ();\n    #if 0\n    fprintf (stderr, \"_gl_fstat_by_handle error 0x%x\\n\", (unsigned int) error);\n    #endif\n    switch (error)\n      {\n      case ERROR_ACCESS_DENIED:\n      case ERROR_SHARING_VIOLATION:\n        errno = EACCES;\n        break;\n\n      case ERROR_OUTOFMEMORY:\n        errno = ENOMEM;\n        break;\n\n      case ERROR_WRITE_FAULT:\n      case ERROR_READ_FAULT:\n      case ERROR_GEN_FAILURE:\n        errno = EIO;\n        break;\n\n      default:\n        errno = EINVAL;\n        break;\n      }\n    return -1;\n  }\n}",
      "lines": 291,
      "depth": 22,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/stat-w32.h": {},
  "grep/grep-3.1/lib/stat.c": {
    "orig_stat": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "static int\norig_stat (const char *filename, struct stat *buf)\n{\n  return stat (filename, buf);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "is_unc_root": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "content": "static BOOL\nis_unc_root (const char *rname)\n{\n  /* Test whether it has the syntax '\\\\server\\share'.  */\n  if (ISSLASH (rname[0]) && ISSLASH (rname[1]))\n    {\n      /* It starts with two slashes.  Find the next slash.  */\n      const char *p = rname + 2;\n      const char *q = p;\n      while (*q != '\\0' && !ISSLASH (*q))\n        q++;\n      if (q > p && *q != '\\0')\n        {\n          /* Found the next slash at q.  */\n          q++;\n          const char *r = q;\n          while (*r != '\\0' && !ISSLASH (*r))\n            r++;\n          if (r > q && *r == '\\0')\n            return TRUE;\n        }\n    }\n  return FALSE;\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "BOOL"
      ]
    },
    "rpl_stat": {
      "start_point": [
        97,
        0
      ],
      "end_point": [
        422,
        1
      ],
      "content": "int\nrpl_stat (char const *name, struct stat *buf)\n{\n#ifdef WINDOWS_NATIVE\n  /* Fill the fields ourselves, because the original stat function returns\n     values for st_atime, st_mtime, st_ctime that depend on the current time\n     zone.  See\n     <https://lists.gnu.org/archive/html/bug-gnulib/2017-04/msg00134.html>  */\n  /* XXX Should we convert to wchar_t* and prepend '\\\\?\\', in order to work\n     around length limitations\n     <https://msdn.microsoft.com/en-us/library/aa365247.aspx> ?  */\n\n  /* POSIX <http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13>\n     specifies: \"More than two leading <slash> characters shall be treated as\n     a single <slash> character.\"  */\n  if (ISSLASH (name[0]) && ISSLASH (name[1]) && ISSLASH (name[2]))\n    {\n      name += 2;\n      while (ISSLASH (name[1]))\n        name++;\n    }\n\n  size_t len = strlen (name);\n  size_t drive_prefix_len = (HAS_DEVICE (name) ? 2 : 0);\n\n  /* Remove trailing slashes (except the very first one, at position\n     drive_prefix_len), but remember their presence.  */\n  size_t rlen;\n  bool check_dir = false;\n\n  rlen = len;\n  while (rlen > drive_prefix_len && ISSLASH (name[rlen-1]))\n    {\n      check_dir = true;\n      if (rlen == drive_prefix_len + 1)\n        break;\n      rlen--;\n    }\n\n  /* Handle '' and 'C:'.  */\n  if (!check_dir && rlen == drive_prefix_len)\n    {\n      errno = ENOENT;\n      return -1;\n    }\n\n  /* Handle '\\\\'.  */\n  if (rlen == 1 && ISSLASH (name[0]) && len >= 2)\n    {\n      errno = ENOENT;\n      return -1;\n    }\n\n  const char *rname;\n  char *malloca_rname;\n  if (rlen == len)\n    {\n      rname = name;\n      malloca_rname = NULL;\n    }\n  else\n    {\n      malloca_rname = malloca (rlen + 1);\n      if (malloca_rname == NULL)\n        {\n          errno = ENOMEM;\n          return -1;\n        }\n      memcpy (malloca_rname, name, rlen);\n      malloca_rname[rlen] = '\\0';\n      rname = malloca_rname;\n    }\n\n  /* There are two ways to get at the requested information:\n       - by scanning the parent directory and examining the relevant\n         directory entry,\n       - by opening the file directly.\n     The first approach fails for root directories (e.g. 'C:\\') and\n     UNC root directories (e.g. '\\\\server\\share').\n     The second approach fails for some system files (e.g. 'C:\\pagefile.sys'\n     and 'C:\\hiberfil.sys'): ERROR_SHARING_VIOLATION.\n     The second approach gives more information (in particular, correct\n     st_dev, st_ino, st_nlink fields).\n     So we use the second approach and, as a fallback except for root and\n     UNC root directories, also the first approach.  */\n  {\n    int ret;\n\n    {\n      /* Approach based on the file.  */\n\n      /* Open a handle to the file.\n         CreateFile\n         <https://msdn.microsoft.com/en-us/library/aa363858.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa363874.aspx>  */\n      HANDLE h =\n        CreateFile (rname,\n                    FILE_READ_ATTRIBUTES,\n                    FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n                    NULL,\n                    OPEN_EXISTING,\n                    /* FILE_FLAG_POSIX_SEMANTICS (treat file names that differ only\n                       in case as different) makes sense only when applied to *all*\n                       filesystem operations.  */\n                    FILE_FLAG_BACKUP_SEMANTICS /* | FILE_FLAG_POSIX_SEMANTICS */,\n                    NULL);\n      if (h != INVALID_HANDLE_VALUE)\n        {\n          ret = _gl_fstat_by_handle (h, rname, buf);\n          CloseHandle (h);\n          goto done;\n        }\n    }\n\n    /* Test for root and UNC root directories.  */\n    if ((rlen == drive_prefix_len + 1 && ISSLASH (rname[drive_prefix_len]))\n        || is_unc_root (rname))\n      goto failed;\n\n    /* Fallback.  */\n    {\n      /* Approach based on the directory entry.  */\n\n      if (strchr (rname, '?') != NULL || strchr (rname, '*') != NULL)\n        {\n          /* Other Windows API functions would fail with error\n             ERROR_INVALID_NAME.  */\n          if (malloca_rname != NULL)\n            freea (malloca_rname);\n          errno = ENOENT;\n          return -1;\n        }\n\n      /* Get the details about the directory entry.  This can be done through\n         FindFirstFile\n         <https://msdn.microsoft.com/en-us/library/aa364418.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa365740.aspx>\n         or through\n         FindFirstFileEx with argument FindExInfoBasic\n         <https://msdn.microsoft.com/en-us/library/aa364419.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa364415.aspx>\n         <https://msdn.microsoft.com/en-us/library/aa365740.aspx>  */\n      WIN32_FIND_DATA info;\n      HANDLE h = FindFirstFile (rname, &info);\n      if (h == INVALID_HANDLE_VALUE)\n        goto failed;\n\n      /* Test for error conditions before starting to fill *buf.  */\n      if (sizeof (buf->st_size) <= 4 && info.nFileSizeHigh > 0)\n        {\n          FindClose (h);\n          if (malloca_rname != NULL)\n            freea (malloca_rname);\n          errno = EOVERFLOW;\n          return -1;\n        }\n\n# if _GL_WINDOWS_STAT_INODES\n      buf->st_dev = 0;\n#  if _GL_WINDOWS_STAT_INODES == 2\n      buf->st_ino._gl_ino[0] = buf->st_ino._gl_ino[1] = 0;\n#  else /* _GL_WINDOWS_STAT_INODES == 1 */\n      buf->st_ino = 0;\n#  endif\n# else\n      /* st_ino is not wide enough for identifying a file on a device.\n         Without st_ino, st_dev is pointless.  */\n      buf->st_dev = 0;\n      buf->st_ino = 0;\n# endif\n\n      /* st_mode.  */\n      unsigned int mode =\n        /* XXX How to handle FILE_ATTRIBUTE_REPARSE_POINT ?  */\n        ((info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) ? _S_IFDIR | S_IEXEC_UGO : _S_IFREG)\n        | S_IREAD_UGO\n        | ((info.dwFileAttributes & FILE_ATTRIBUTE_READONLY) ? 0 : S_IWRITE_UGO);\n      if (!(info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY))\n        {\n          /* Determine whether the file is executable by looking at the file\n             name suffix.  */\n          if (info.nFileSizeHigh > 0 || info.nFileSizeLow > 0)\n            {\n              const char *last_dot = NULL;\n              const char *p;\n              for (p = info.cFileName; *p != '\\0'; p++)\n                if (*p == '.')\n                  last_dot = p;\n              if (last_dot != NULL)\n                {\n                  const char *suffix = last_dot + 1;\n                  if (_stricmp (suffix, \"exe\") == 0\n                      || _stricmp (suffix, \"bat\") == 0\n                      || _stricmp (suffix, \"cmd\") == 0\n                      || _stricmp (suffix, \"com\") == 0)\n                    mode |= S_IEXEC_UGO;\n                }\n            }\n        }\n      buf->st_mode = mode;\n\n      /* st_nlink.  Ignore hard links here.  */\n      buf->st_nlink = 1;\n\n      /* There's no easy way to map the Windows SID concept to an integer.  */\n      buf->st_uid = 0;\n      buf->st_gid = 0;\n\n      /* st_rdev is irrelevant for normal files and directories.  */\n      buf->st_rdev = 0;\n\n      /* st_size.  */\n      if (sizeof (buf->st_size) <= 4)\n        /* Range check already done above.  */\n        buf->st_size = info.nFileSizeLow;\n      else\n        buf->st_size = ((long long) info.nFileSizeHigh << 32) | (long long) info.nFileSizeLow;\n\n      /* st_atime, st_mtime, st_ctime.  */\n# if _GL_WINDOWS_STAT_TIMESPEC\n      buf->st_atim = _gl_convert_FILETIME_to_timespec (&info.ftLastAccessTime);\n      buf->st_mtim = _gl_convert_FILETIME_to_timespec (&info.ftLastWriteTime);\n      buf->st_ctim = _gl_convert_FILETIME_to_timespec (&info.ftCreationTime);\n# else\n      buf->st_atime = _gl_convert_FILETIME_to_POSIX (&info.ftLastAccessTime);\n      buf->st_mtime = _gl_convert_FILETIME_to_POSIX (&info.ftLastWriteTime);\n      buf->st_ctime = _gl_convert_FILETIME_to_POSIX (&info.ftCreationTime);\n# endif\n\n      FindClose (h);\n\n      ret = 0;\n    }\n\n   done:\n    if (ret >= 0 && check_dir && !S_ISDIR (buf->st_mode))\n      {\n        errno = ENOTDIR;\n        ret = -1;\n      }\n    if (malloca_rname != NULL)\n      {\n        int saved_errno = errno;\n        freea (malloca_rname);\n        errno = saved_errno;\n      }\n    return ret;\n  }\n\n failed:\n  {\n    DWORD error = GetLastError ();\n    #if 0\n    fprintf (stderr, \"rpl_stat error 0x%x\\n\", (unsigned int) error);\n    #endif\n\n    if (malloca_rname != NULL)\n      freea (malloca_rname);\n\n    switch (error)\n      {\n      /* Some of these errors probably cannot happen with the specific flags\n         that we pass to CreateFile.  But who knows...  */\n      case ERROR_FILE_NOT_FOUND: /* The last component of rname does not exist.  */\n      case ERROR_PATH_NOT_FOUND: /* Some directory component in rname does not exist.  */\n      case ERROR_BAD_PATHNAME:   /* rname is such as '\\\\server'.  */\n      case ERROR_BAD_NET_NAME:   /* rname is such as '\\\\server\\nonexistentshare'.  */\n      case ERROR_INVALID_NAME:   /* rname contains wildcards, misplaced colon, etc.  */\n      case ERROR_DIRECTORY:\n        errno = ENOENT;\n        break;\n\n      case ERROR_ACCESS_DENIED:  /* rname is such as 'C:\\System Volume Information\\foo'.  */\n      case ERROR_SHARING_VIOLATION: /* rname is such as 'C:\\pagefile.sys' (second approach only).  */\n                                    /* XXX map to EACCESS or EPERM? */\n        errno = EACCES;\n        break;\n\n      case ERROR_OUTOFMEMORY:\n        errno = ENOMEM;\n        break;\n\n      case ERROR_WRITE_PROTECT:\n        errno = EROFS;\n        break;\n\n      case ERROR_WRITE_FAULT:\n      case ERROR_READ_FAULT:\n      case ERROR_GEN_FAILURE:\n        errno = EIO;\n        break;\n\n      case ERROR_BUFFER_OVERFLOW:\n      case ERROR_FILENAME_EXCED_RANGE:\n        errno = ENAMETOOLONG;\n        break;\n\n      case ERROR_DELETE_PENDING: /* XXX map to EACCESS or EPERM? */\n        errno = EPERM;\n        break;\n\n      default:\n        errno = EINVAL;\n        break;\n      }\n\n    return -1;\n  }\n#else\n  int result = orig_stat (name, buf);\n# if REPLACE_FUNC_STAT_FILE\n  /* Solaris 9 mistakenly succeeds when given a non-directory with a\n     trailing slash.  */\n  if (result == 0 && !S_ISDIR (buf->st_mode))\n    {\n      size_t len = strlen (name);\n      if (ISSLASH (name[len - 1]))\n        {\n          errno = ENOTDIR;\n          return -1;\n        }\n    }\n# endif /* REPLACE_FUNC_STAT_FILE */\n  return result;\n#endif\n}",
      "lines": 326,
      "depth": 21,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/stdalign.in.h": {},
  "grep/grep-3.1/lib/stdarg.in.h": {},
  "grep/grep-3.1/lib/stdbool.in.h": {},
  "grep/grep-3.1/lib/stddef.in.h": {},
  "grep/grep-3.1/lib/stdint.in.h": {},
  "grep/grep-3.1/lib/stdio-impl.h": {},
  "grep/grep-3.1/lib/stdio.in.h": {},
  "grep/grep-3.1/lib/stdlib.in.h": {},
  "grep/grep-3.1/lib/stpcpy.c": {
    "__stpcpy": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        45,
        1
      ],
      "content": "char *\n__stpcpy (char *dest, const char *src)\n{\n  register char *d = dest;\n  register const char *s = src;\n\n  do\n    *d++ = *s;\n  while (*s++ != '\\0');\n\n  return d - 1;\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "char",
        "*\n__stpcpy (char *dest, const char *src)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/str-kmp.h": {
    "knuth_morris_pratt": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        150,
        1
      ],
      "content": "static bool\nknuth_morris_pratt (const UNIT *haystack,\n                    const UNIT *needle, size_t needle_len,\n                    const UNIT **resultp)\n{\n  size_t m = needle_len;\n\n  /* Allocate the table.  */\n  size_t *table = (size_t *) nmalloca (m, sizeof (size_t));\n  if (table == NULL)\n    return false;\n  /* Fill the table.\n     For 0 < i < m:\n       0 < table[i] <= i is defined such that\n       forall 0 < x < table[i]: needle[x..i-1] != needle[0..i-1-x],\n       and table[i] is as large as possible with this property.\n     This implies:\n     1) For 0 < i < m:\n          If table[i] < i,\n          needle[table[i]..i-1] = needle[0..i-1-table[i]].\n     2) For 0 < i < m:\n          rhaystack[0..i-1] == needle[0..i-1]\n          and exists h, i <= h < m: rhaystack[h] != needle[h]\n          implies\n          forall 0 <= x < table[i]: rhaystack[x..x+m-1] != needle[0..m-1].\n     table[0] remains uninitialized.  */\n  {\n    size_t i, j;\n\n    /* i = 1: Nothing to verify for x = 0.  */\n    table[1] = 1;\n    j = 0;\n\n    for (i = 2; i < m; i++)\n      {\n        /* Here: j = i-1 - table[i-1].\n           The inequality needle[x..i-1] != needle[0..i-1-x] is known to hold\n           for x < table[i-1], by induction.\n           Furthermore, if j>0: needle[i-1-j..i-2] = needle[0..j-1].  */\n        UNIT b = CANON_ELEMENT (needle[i - 1]);\n\n        for (;;)\n          {\n            /* Invariants: The inequality needle[x..i-1] != needle[0..i-1-x]\n               is known to hold for x < i-1-j.\n               Furthermore, if j>0: needle[i-1-j..i-2] = needle[0..j-1].  */\n            if (b == CANON_ELEMENT (needle[j]))\n              {\n                /* Set table[i] := i-1-j.  */\n                table[i] = i - ++j;\n                break;\n              }\n            /* The inequality needle[x..i-1] != needle[0..i-1-x] also holds\n               for x = i-1-j, because\n                 needle[i-1] != needle[j] = needle[i-1-x].  */\n            if (j == 0)\n              {\n                /* The inequality holds for all possible x.  */\n                table[i] = i;\n                break;\n              }\n            /* The inequality needle[x..i-1] != needle[0..i-1-x] also holds\n               for i-1-j < x < i-1-j+table[j], because for these x:\n                 needle[x..i-2]\n                 = needle[x-(i-1-j)..j-1]\n                 != needle[0..j-1-(x-(i-1-j))]  (by definition of table[j])\n                    = needle[0..i-2-x],\n               hence needle[x..i-1] != needle[0..i-1-x].\n               Furthermore\n                 needle[i-1-j+table[j]..i-2]\n                 = needle[table[j]..j-1]\n                 = needle[0..j-1-table[j]]  (by definition of table[j]).  */\n            j = j - table[j];\n          }\n        /* Here: j = i - table[i].  */\n      }\n  }\n\n  /* Search, using the table to accelerate the processing.  */\n  {\n    size_t j;\n    const UNIT *rhaystack;\n    const UNIT *phaystack;\n\n    *resultp = NULL;\n    j = 0;\n    rhaystack = haystack;\n    phaystack = haystack;\n    /* Invariant: phaystack = rhaystack + j.  */\n    while (*phaystack != 0)\n      if (CANON_ELEMENT (needle[j]) == CANON_ELEMENT (*phaystack))\n        {\n          j++;\n          phaystack++;\n          if (j == m)\n            {\n              /* The entire needle has been found.  */\n              *resultp = rhaystack;\n              break;\n            }\n        }\n      else if (j > 0)\n        {\n          /* Found a match of needle[0..j-1], mismatch at needle[j].  */\n          rhaystack += table[j];\n          j -= table[j];\n        }\n      else\n        {\n          /* Found a mismatch at needle[0] already.  */\n          rhaystack++;\n          phaystack++;\n        }\n  }\n\n  freea (table);\n  return true;\n}",
      "lines": 118,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    }
  },
  "grep/grep-3.1/lib/str-two-way.h": {
    "critical_factorization": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        221,
        1
      ],
      "content": "static size_t\ncritical_factorization (const unsigned char *needle, size_t needle_len,\n                        size_t *period)\n{\n  /* Index of last byte of left half, or SIZE_MAX.  */\n  size_t max_suffix, max_suffix_rev;\n  size_t j; /* Index into NEEDLE for current candidate suffix.  */\n  size_t k; /* Offset into current period.  */\n  size_t p; /* Intermediate period.  */\n  unsigned char a, b; /* Current comparison bytes.  */\n\n  /* Special case NEEDLE_LEN of 1 or 2 (all callers already filtered\n     out 0-length needles.  */\n  if (needle_len < 3)\n    {\n      *period = 1;\n      return needle_len - 1;\n    }\n\n  /* Invariants:\n     0 <= j < NEEDLE_LEN - 1\n     -1 <= max_suffix{,_rev} < j (treating SIZE_MAX as if it were signed)\n     min(max_suffix, max_suffix_rev) < global period of NEEDLE\n     1 <= p <= global period of NEEDLE\n     p == global period of the substring NEEDLE[max_suffix{,_rev}+1...j]\n     1 <= k <= p\n  */\n\n  /* Perform lexicographic search.  */\n  max_suffix = SIZE_MAX;\n  j = 0;\n  k = p = 1;\n  while (j + k < needle_len)\n    {\n      a = CANON_ELEMENT (needle[j + k]);\n      b = CANON_ELEMENT (needle[max_suffix + k]);\n      if (a < b)\n        {\n          /* Suffix is smaller, period is entire prefix so far.  */\n          j += k;\n          k = 1;\n          p = j - max_suffix;\n        }\n      else if (a == b)\n        {\n          /* Advance through repetition of the current period.  */\n          if (k != p)\n            ++k;\n          else\n            {\n              j += p;\n              k = 1;\n            }\n        }\n      else /* b < a */\n        {\n          /* Suffix is larger, start over from current location.  */\n          max_suffix = j++;\n          k = p = 1;\n        }\n    }\n  *period = p;\n\n  /* Perform reverse lexicographic search.  */\n  max_suffix_rev = SIZE_MAX;\n  j = 0;\n  k = p = 1;\n  while (j + k < needle_len)\n    {\n      a = CANON_ELEMENT (needle[j + k]);\n      b = CANON_ELEMENT (needle[max_suffix_rev + k]);\n      if (b < a)\n        {\n          /* Suffix is smaller, period is entire prefix so far.  */\n          j += k;\n          k = 1;\n          p = j - max_suffix_rev;\n        }\n      else if (a == b)\n        {\n          /* Advance through repetition of the current period.  */\n          if (k != p)\n            ++k;\n          else\n            {\n              j += p;\n              k = 1;\n            }\n        }\n      else /* a < b */\n        {\n          /* Suffix is larger, start over from current location.  */\n          max_suffix_rev = j++;\n          k = p = 1;\n        }\n    }\n\n  /* Choose the shorter suffix.  Return the index of the first byte of\n     the right half, rather than the last byte of the left half.\n\n     For some examples, 'banana' has two critical factorizations, both\n     exposed by the two lexicographic extreme suffixes of 'anana' and\n     'nana', where both suffixes have a period of 2.  On the other\n     hand, with 'aab' and 'bba', both strings have a single critical\n     factorization of the last byte, with the suffix having a period\n     of 1.  While the maximal lexicographic suffix of 'aab' is 'b',\n     the maximal lexicographic suffix of 'bba' is 'ba', which is not a\n     critical factorization.  Conversely, the maximal reverse\n     lexicographic suffix of 'a' works for 'bba', but not 'ab' for\n     'aab'.  The shorter suffix of the two will always be a critical\n     factorization.  */\n  if (max_suffix_rev + 1 < max_suffix + 1)\n    return max_suffix + 1;\n  *period = p;\n  return max_suffix_rev + 1;\n}",
      "lines": 116,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "two_way_short_needle": {
      "start_point": [
        233,
        0
      ],
      "end_point": [
        313,
        1
      ],
      "content": "static RETURN_TYPE\ntwo_way_short_needle (const unsigned char *haystack, size_t haystack_len,\n                      const unsigned char *needle, size_t needle_len)\n{\n  size_t i; /* Index into current byte of NEEDLE.  */\n  size_t j; /* Index into current window of HAYSTACK.  */\n  size_t period; /* The period of the right half of needle.  */\n  size_t suffix; /* The index of the right half of needle.  */\n\n  /* Factor the needle into two halves, such that the left half is\n     smaller than the global period, and the right half is\n     periodic (with a period as large as NEEDLE_LEN - suffix).  */\n  suffix = critical_factorization (needle, needle_len, &period);\n\n  /* Perform the search.  Each iteration compares the right half\n     first.  */\n  if (CMP_FUNC (needle, needle + period, suffix) == 0)\n    {\n      /* Entire needle is periodic; a mismatch in the left half can\n         only advance by the period, so use memory to avoid rescanning\n         known occurrences of the period in the right half.  */\n      size_t memory = 0;\n      j = 0;\n      while (AVAILABLE (haystack, haystack_len, j, needle_len))\n        {\n          /* Scan for matches in right half.  */\n          i = MAX (suffix, memory);\n          while (i < needle_len && (CANON_ELEMENT (needle[i])\n                                    == CANON_ELEMENT (haystack[i + j])))\n            ++i;\n          if (needle_len <= i)\n            {\n              /* Scan for matches in left half.  */\n              i = suffix - 1;\n              while (memory < i + 1 && (CANON_ELEMENT (needle[i])\n                                        == CANON_ELEMENT (haystack[i + j])))\n                --i;\n              if (i + 1 < memory + 1)\n                return (RETURN_TYPE) (haystack + j);\n              /* No match, so remember how many repetitions of period\n                 on the right half were scanned.  */\n              j += period;\n              memory = needle_len - period;\n            }\n          else\n            {\n              j += i - suffix + 1;\n              memory = 0;\n            }\n        }\n    }\n  else\n    {\n      /* The two halves of needle are distinct; no extra memory is\n         required, and any mismatch results in a maximal shift.  */\n      period = MAX (suffix, needle_len - suffix) + 1;\n      j = 0;\n      while (AVAILABLE (haystack, haystack_len, j, needle_len))\n        {\n          /* Scan for matches in right half.  */\n          i = suffix;\n          while (i < needle_len && (CANON_ELEMENT (needle[i])\n                                    == CANON_ELEMENT (haystack[i + j])))\n            ++i;\n          if (needle_len <= i)\n            {\n              /* Scan for matches in left half.  */\n              i = suffix - 1;\n              while (i != SIZE_MAX && (CANON_ELEMENT (needle[i])\n                                       == CANON_ELEMENT (haystack[i + j])))\n                --i;\n              if (i == SIZE_MAX)\n                return (RETURN_TYPE) (haystack + j);\n              j += period;\n            }\n          else\n            j += i - suffix + 1;\n        }\n    }\n  return NULL;\n}",
      "lines": 81,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "RETURN_TYPE"
      ]
    },
    "two_way_long_needle": {
      "start_point": [
        327,
        0
      ],
      "end_point": [
        445,
        1
      ],
      "content": "static RETURN_TYPE\ntwo_way_long_needle (const unsigned char *haystack, size_t haystack_len,\n                     const unsigned char *needle, size_t needle_len)\n{\n  size_t i; /* Index into current byte of NEEDLE.  */\n  size_t j; /* Index into current window of HAYSTACK.  */\n  size_t period; /* The period of the right half of needle.  */\n  size_t suffix; /* The index of the right half of needle.  */\n  size_t shift_table[1U << CHAR_BIT]; /* See below.  */\n\n  /* Factor the needle into two halves, such that the left half is\n     smaller than the global period, and the right half is\n     periodic (with a period as large as NEEDLE_LEN - suffix).  */\n  suffix = critical_factorization (needle, needle_len, &period);\n\n  /* Populate shift_table.  For each possible byte value c,\n     shift_table[c] is the distance from the last occurrence of c to\n     the end of NEEDLE, or NEEDLE_LEN if c is absent from the NEEDLE.\n     shift_table[NEEDLE[NEEDLE_LEN - 1]] contains the only 0.  */\n  for (i = 0; i < 1U << CHAR_BIT; i++)\n    shift_table[i] = needle_len;\n  for (i = 0; i < needle_len; i++)\n    shift_table[CANON_ELEMENT (needle[i])] = needle_len - i - 1;\n\n  /* Perform the search.  Each iteration compares the right half\n     first.  */\n  if (CMP_FUNC (needle, needle + period, suffix) == 0)\n    {\n      /* Entire needle is periodic; a mismatch in the left half can\n         only advance by the period, so use memory to avoid rescanning\n         known occurrences of the period in the right half.  */\n      size_t memory = 0;\n      size_t shift;\n      j = 0;\n      while (AVAILABLE (haystack, haystack_len, j, needle_len))\n        {\n          /* Check the last byte first; if it does not match, then\n             shift to the next possible match location.  */\n          shift = shift_table[CANON_ELEMENT (haystack[j + needle_len - 1])];\n          if (0 < shift)\n            {\n              if (memory && shift < period)\n                {\n                  /* Since needle is periodic, but the last period has\n                     a byte out of place, there can be no match until\n                     after the mismatch.  */\n                  shift = needle_len - period;\n                }\n              memory = 0;\n              j += shift;\n              continue;\n            }\n          /* Scan for matches in right half.  The last byte has\n             already been matched, by virtue of the shift table.  */\n          i = MAX (suffix, memory);\n          while (i < needle_len - 1 && (CANON_ELEMENT (needle[i])\n                                        == CANON_ELEMENT (haystack[i + j])))\n            ++i;\n          if (needle_len - 1 <= i)\n            {\n              /* Scan for matches in left half.  */\n              i = suffix - 1;\n              while (memory < i + 1 && (CANON_ELEMENT (needle[i])\n                                        == CANON_ELEMENT (haystack[i + j])))\n                --i;\n              if (i + 1 < memory + 1)\n                return (RETURN_TYPE) (haystack + j);\n              /* No match, so remember how many repetitions of period\n                 on the right half were scanned.  */\n              j += period;\n              memory = needle_len - period;\n            }\n          else\n            {\n              j += i - suffix + 1;\n              memory = 0;\n            }\n        }\n    }\n  else\n    {\n      /* The two halves of needle are distinct; no extra memory is\n         required, and any mismatch results in a maximal shift.  */\n      size_t shift;\n      period = MAX (suffix, needle_len - suffix) + 1;\n      j = 0;\n      while (AVAILABLE (haystack, haystack_len, j, needle_len))\n        {\n          /* Check the last byte first; if it does not match, then\n             shift to the next possible match location.  */\n          shift = shift_table[CANON_ELEMENT (haystack[j + needle_len - 1])];\n          if (0 < shift)\n            {\n              j += shift;\n              continue;\n            }\n          /* Scan for matches in right half.  The last byte has\n             already been matched, by virtue of the shift table.  */\n          i = suffix;\n          while (i < needle_len - 1 && (CANON_ELEMENT (needle[i])\n                                        == CANON_ELEMENT (haystack[i + j])))\n            ++i;\n          if (needle_len - 1 <= i)\n            {\n              /* Scan for matches in left half.  */\n              i = suffix - 1;\n              while (i != SIZE_MAX && (CANON_ELEMENT (needle[i])\n                                       == CANON_ELEMENT (haystack[i + j])))\n                --i;\n              if (i == SIZE_MAX)\n                return (RETURN_TYPE) (haystack + j);\n              j += period;\n            }\n          else\n            j += i - suffix + 1;\n        }\n    }\n  return NULL;\n}",
      "lines": 119,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "RETURN_TYPE"
      ]
    }
  },
  "grep/grep-3.1/lib/strdup.c": {
    "__strdup": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        47,
        1
      ],
      "content": "char *\n__strdup (const char *s)\n{\n  size_t len = strlen (s) + 1;\n  void *new = malloc (len);\n\n  if (new == NULL)\n    return NULL;\n\n  return (char *) memcpy (new, s, len);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "char",
        "*\n__strdup (const char *s)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/streq.h": {
    "streq9": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "static inline int\nstreq9 (const char *s1, const char *s2)\n{\n  return strcmp (s1 + 9, s2 + 9) == 0;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq8": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        51,
        1
      ],
      "content": "static inline int\nstreq8 (const char *s1, const char *s2, char s28)\n{\n  if (s1[8] == s28)\n    {\n      if (s28 == 0)\n        return 1;\n      else\n        return streq9 (s1, s2);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq7": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "content": "static inline int\nstreq7 (const char *s1, const char *s2, char s27, char s28)\n{\n  if (s1[7] == s27)\n    {\n      if (s27 == 0)\n        return 1;\n      else\n        return streq8 (s1, s2, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq6": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "static inline int\nstreq6 (const char *s1, const char *s2, char s26, char s27, char s28)\n{\n  if (s1[6] == s26)\n    {\n      if (s26 == 0)\n        return 1;\n      else\n        return streq7 (s1, s2, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq5": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "content": "static inline int\nstreq5 (const char *s1, const char *s2, char s25, char s26, char s27, char s28)\n{\n  if (s1[5] == s25)\n    {\n      if (s25 == 0)\n        return 1;\n      else\n        return streq6 (s1, s2, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq4": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        107,
        1
      ],
      "content": "static inline int\nstreq4 (const char *s1, const char *s2, char s24, char s25, char s26, char s27, char s28)\n{\n  if (s1[4] == s24)\n    {\n      if (s24 == 0)\n        return 1;\n      else\n        return streq5 (s1, s2, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq3": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "content": "static inline int\nstreq3 (const char *s1, const char *s2, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (s1[3] == s23)\n    {\n      if (s23 == 0)\n        return 1;\n      else\n        return streq4 (s1, s2, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq2": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        135,
        1
      ],
      "content": "static inline int\nstreq2 (const char *s1, const char *s2, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (s1[2] == s22)\n    {\n      if (s22 == 0)\n        return 1;\n      else\n        return streq3 (s1, s2, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq1": {
      "start_point": [
        137,
        0
      ],
      "end_point": [
        149,
        1
      ],
      "content": "static inline int\nstreq1 (const char *s1, const char *s2, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (s1[1] == s21)\n    {\n      if (s21 == 0)\n        return 1;\n      else\n        return streq2 (s1, s2, s22, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "streq0": {
      "start_point": [
        151,
        0
      ],
      "end_point": [
        163,
        1
      ],
      "content": "static inline int\nstreq0 (const char *s1, const char *s2, char s20, char s21, char s22, char s23, char s24, char s25, char s26, char s27, char s28)\n{\n  if (s1[0] == s20)\n    {\n      if (s20 == 0)\n        return 1;\n      else\n        return streq1 (s1, s2, s21, s22, s23, s24, s25, s26, s27, s28);\n    }\n  else\n    return 0;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/strerror-override.c": {
    "strerror_override": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        301,
        1
      ],
      "content": "const char *\nstrerror_override (int errnum)\n{\n  /* These error messages are taken from glibc/sysdeps/gnu/errlist.c.  */\n  switch (errnum)\n    {\n#if REPLACE_STRERROR_0\n    case 0:\n      return \"Success\";\n#endif\n\n#if GNULIB_defined_ESOCK /* native Windows platforms with older <errno.h> */\n    case EINPROGRESS:\n      return \"Operation now in progress\";\n    case EALREADY:\n      return \"Operation already in progress\";\n    case ENOTSOCK:\n      return \"Socket operation on non-socket\";\n    case EDESTADDRREQ:\n      return \"Destination address required\";\n    case EMSGSIZE:\n      return \"Message too long\";\n    case EPROTOTYPE:\n      return \"Protocol wrong type for socket\";\n    case ENOPROTOOPT:\n      return \"Protocol not available\";\n    case EPROTONOSUPPORT:\n      return \"Protocol not supported\";\n    case EOPNOTSUPP:\n      return \"Operation not supported\";\n    case EAFNOSUPPORT:\n      return \"Address family not supported by protocol\";\n    case EADDRINUSE:\n      return \"Address already in use\";\n    case EADDRNOTAVAIL:\n      return \"Cannot assign requested address\";\n    case ENETDOWN:\n      return \"Network is down\";\n    case ENETUNREACH:\n      return \"Network is unreachable\";\n    case ECONNRESET:\n      return \"Connection reset by peer\";\n    case ENOBUFS:\n      return \"No buffer space available\";\n    case EISCONN:\n      return \"Transport endpoint is already connected\";\n    case ENOTCONN:\n      return \"Transport endpoint is not connected\";\n    case ETIMEDOUT:\n      return \"Connection timed out\";\n    case ECONNREFUSED:\n      return \"Connection refused\";\n    case ELOOP:\n      return \"Too many levels of symbolic links\";\n    case EHOSTUNREACH:\n      return \"No route to host\";\n    case EWOULDBLOCK:\n      return \"Operation would block\";\n#endif\n#if GNULIB_defined_ESTREAMS /* native Windows platforms with older <errno.h> */\n    case ETXTBSY:\n      return \"Text file busy\";\n    case ENODATA:\n      return \"No data available\";\n    case ENOSR:\n      return \"Out of streams resources\";\n    case ENOSTR:\n      return \"Device not a stream\";\n    case ETIME:\n      return \"Timer expired\";\n    case EOTHER:\n      return \"Other error\";\n#endif\n#if GNULIB_defined_EWINSOCK /* native Windows platforms */\n    case ESOCKTNOSUPPORT:\n      return \"Socket type not supported\";\n    case EPFNOSUPPORT:\n      return \"Protocol family not supported\";\n    case ESHUTDOWN:\n      return \"Cannot send after transport endpoint shutdown\";\n    case ETOOMANYREFS:\n      return \"Too many references: cannot splice\";\n    case EHOSTDOWN:\n      return \"Host is down\";\n    case EPROCLIM:\n      return \"Too many processes\";\n    case EUSERS:\n      return \"Too many users\";\n    case EDQUOT:\n      return \"Disk quota exceeded\";\n    case ESTALE:\n      return \"Stale NFS file handle\";\n    case EREMOTE:\n      return \"Object is remote\";\n# if HAVE_WINSOCK2_H\n      /* WSA_INVALID_HANDLE maps to EBADF */\n      /* WSA_NOT_ENOUGH_MEMORY maps to ENOMEM */\n      /* WSA_INVALID_PARAMETER maps to EINVAL */\n    case WSA_OPERATION_ABORTED:\n      return \"Overlapped operation aborted\";\n    case WSA_IO_INCOMPLETE:\n      return \"Overlapped I/O event object not in signaled state\";\n    case WSA_IO_PENDING:\n      return \"Overlapped operations will complete later\";\n      /* WSAEINTR maps to EINTR */\n      /* WSAEBADF maps to EBADF */\n      /* WSAEACCES maps to EACCES */\n      /* WSAEFAULT maps to EFAULT */\n      /* WSAEINVAL maps to EINVAL */\n      /* WSAEMFILE maps to EMFILE */\n      /* WSAEWOULDBLOCK maps to EWOULDBLOCK */\n      /* WSAEINPROGRESS maps to EINPROGRESS */\n      /* WSAEALREADY maps to EALREADY */\n      /* WSAENOTSOCK maps to ENOTSOCK */\n      /* WSAEDESTADDRREQ maps to EDESTADDRREQ */\n      /* WSAEMSGSIZE maps to EMSGSIZE */\n      /* WSAEPROTOTYPE maps to EPROTOTYPE */\n      /* WSAENOPROTOOPT maps to ENOPROTOOPT */\n      /* WSAEPROTONOSUPPORT maps to EPROTONOSUPPORT */\n      /* WSAESOCKTNOSUPPORT is ESOCKTNOSUPPORT */\n      /* WSAEOPNOTSUPP maps to EOPNOTSUPP */\n      /* WSAEPFNOSUPPORT is EPFNOSUPPORT */\n      /* WSAEAFNOSUPPORT maps to EAFNOSUPPORT */\n      /* WSAEADDRINUSE maps to EADDRINUSE */\n      /* WSAEADDRNOTAVAIL maps to EADDRNOTAVAIL */\n      /* WSAENETDOWN maps to ENETDOWN */\n      /* WSAENETUNREACH maps to ENETUNREACH */\n      /* WSAENETRESET maps to ENETRESET */\n      /* WSAECONNABORTED maps to ECONNABORTED */\n      /* WSAECONNRESET maps to ECONNRESET */\n      /* WSAENOBUFS maps to ENOBUFS */\n      /* WSAEISCONN maps to EISCONN */\n      /* WSAENOTCONN maps to ENOTCONN */\n      /* WSAESHUTDOWN is ESHUTDOWN */\n      /* WSAETOOMANYREFS is ETOOMANYREFS */\n      /* WSAETIMEDOUT maps to ETIMEDOUT */\n      /* WSAECONNREFUSED maps to ECONNREFUSED */\n      /* WSAELOOP maps to ELOOP */\n      /* WSAENAMETOOLONG maps to ENAMETOOLONG */\n      /* WSAEHOSTDOWN is EHOSTDOWN */\n      /* WSAEHOSTUNREACH maps to EHOSTUNREACH */\n      /* WSAENOTEMPTY maps to ENOTEMPTY */\n      /* WSAEPROCLIM is EPROCLIM */\n      /* WSAEUSERS is EUSERS */\n      /* WSAEDQUOT is EDQUOT */\n      /* WSAESTALE is ESTALE */\n      /* WSAEREMOTE is EREMOTE */\n    case WSASYSNOTREADY:\n      return \"Network subsystem is unavailable\";\n    case WSAVERNOTSUPPORTED:\n      return \"Winsock.dll version out of range\";\n    case WSANOTINITIALISED:\n      return \"Successful WSAStartup not yet performed\";\n    case WSAEDISCON:\n      return \"Graceful shutdown in progress\";\n    case WSAENOMORE: case WSA_E_NO_MORE:\n      return \"No more results\";\n    case WSAECANCELLED: case WSA_E_CANCELLED:\n      return \"Call was canceled\";\n    case WSAEINVALIDPROCTABLE:\n      return \"Procedure call table is invalid\";\n    case WSAEINVALIDPROVIDER:\n      return \"Service provider is invalid\";\n    case WSAEPROVIDERFAILEDINIT:\n      return \"Service provider failed to initialize\";\n    case WSASYSCALLFAILURE:\n      return \"System call failure\";\n    case WSASERVICE_NOT_FOUND:\n      return \"Service not found\";\n    case WSATYPE_NOT_FOUND:\n      return \"Class type not found\";\n    case WSAEREFUSED:\n      return \"Database query was refused\";\n    case WSAHOST_NOT_FOUND:\n      return \"Host not found\";\n    case WSATRY_AGAIN:\n      return \"Nonauthoritative host not found\";\n    case WSANO_RECOVERY:\n      return \"Nonrecoverable error\";\n    case WSANO_DATA:\n      return \"Valid name, no data record of requested type\";\n      /* WSA_QOS_* omitted */\n# endif\n#endif\n\n#if GNULIB_defined_ENOMSG\n    case ENOMSG:\n      return \"No message of desired type\";\n#endif\n\n#if GNULIB_defined_EIDRM\n    case EIDRM:\n      return \"Identifier removed\";\n#endif\n\n#if GNULIB_defined_ENOLINK\n    case ENOLINK:\n      return \"Link has been severed\";\n#endif\n\n#if GNULIB_defined_EPROTO\n    case EPROTO:\n      return \"Protocol error\";\n#endif\n\n#if GNULIB_defined_EMULTIHOP\n    case EMULTIHOP:\n      return \"Multihop attempted\";\n#endif\n\n#if GNULIB_defined_EBADMSG\n    case EBADMSG:\n      return \"Bad message\";\n#endif\n\n#if GNULIB_defined_EOVERFLOW\n    case EOVERFLOW:\n      return \"Value too large for defined data type\";\n#endif\n\n#if GNULIB_defined_ENOTSUP\n    case ENOTSUP:\n      return \"Not supported\";\n#endif\n\n#if GNULIB_defined_ENETRESET\n    case ENETRESET:\n      return \"Network dropped connection on reset\";\n#endif\n\n#if GNULIB_defined_ECONNABORTED\n    case ECONNABORTED:\n      return \"Software caused connection abort\";\n#endif\n\n#if GNULIB_defined_ESTALE\n    case ESTALE:\n      return \"Stale NFS file handle\";\n#endif\n\n#if GNULIB_defined_EDQUOT\n    case EDQUOT:\n      return \"Disk quota exceeded\";\n#endif\n\n#if GNULIB_defined_ECANCELED\n    case ECANCELED:\n      return \"Operation canceled\";\n#endif\n\n#if GNULIB_defined_EOWNERDEAD\n    case EOWNERDEAD:\n      return \"Owner died\";\n#endif\n\n#if GNULIB_defined_ENOTRECOVERABLE\n    case ENOTRECOVERABLE:\n      return \"State not recoverable\";\n#endif\n\n#if GNULIB_defined_EILSEQ\n    case EILSEQ:\n      return \"Invalid or incomplete multibyte or wide character\";\n#endif\n\n    default:\n      return NULL;\n    }\n}",
      "lines": 269,
      "depth": 10,
      "decorators": [
        "const",
        "const",
        "char",
        "*\nstrerror_override (int errnum)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/strerror-override.h": {},
  "grep/grep-3.1/lib/strerror.c": {},
  "grep/grep-3.1/lib/striconv.c": {
    "mem_cd_iconv": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        203,
        1
      ],
      "content": "int\nmem_cd_iconv (const char *src, size_t srclen, iconv_t cd,\n              char **resultp, size_t *lengthp)\n{\n# define tmpbufsize 4096\n  size_t length;\n  char *result;\n\n  /* Avoid glibc-2.1 bug and Solaris 2.7-2.9 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n  /* Set to the initial state.  */\n  iconv (cd, NULL, NULL, NULL, NULL);\n# endif\n\n  /* Determine the length we need.  */\n  {\n    size_t count = 0;\n    /* The alignment is needed when converting e.g. to glibc's WCHAR_T or\n       libiconv's UCS-4-INTERNAL encoding.  */\n    union { unsigned int align; char buf[tmpbufsize]; } tmp;\n# define tmpbuf tmp.buf\n    const char *inptr = src;\n    size_t insize = srclen;\n\n    while (insize > 0)\n      {\n        char *outptr = tmpbuf;\n        size_t outsize = tmpbufsize;\n        size_t res = iconv (cd,\n                            (ICONV_CONST char **) &inptr, &insize,\n                            &outptr, &outsize);\n\n        if (res == (size_t)(-1))\n          {\n            if (errno == E2BIG)\n              ;\n            else if (errno == EINVAL)\n              break;\n            else\n              return -1;\n          }\n# if !defined _LIBICONV_VERSION && !(defined __GLIBC__ && !defined __UCLIBC__)\n        /* Irix iconv() inserts a NUL byte if it cannot convert.\n           NetBSD iconv() inserts a question mark if it cannot convert.\n           Only GNU libiconv and GNU libc are known to prefer to fail rather\n           than doing a lossy conversion.  */\n        else if (res > 0)\n          {\n            errno = EILSEQ;\n            return -1;\n          }\n# endif\n        count += outptr - tmpbuf;\n      }\n    /* Avoid glibc-2.1 bug and Solaris 2.7 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n    {\n      char *outptr = tmpbuf;\n      size_t outsize = tmpbufsize;\n      size_t res = iconv (cd, NULL, NULL, &outptr, &outsize);\n\n      if (res == (size_t)(-1))\n        return -1;\n      count += outptr - tmpbuf;\n    }\n# endif\n    length = count;\n# undef tmpbuf\n  }\n\n  if (length == 0)\n    {\n      *lengthp = 0;\n      return 0;\n    }\n  if (*resultp != NULL && *lengthp >= length)\n    result = *resultp;\n  else\n    {\n      result = (char *) malloc (length);\n      if (result == NULL)\n        {\n          errno = ENOMEM;\n          return -1;\n        }\n    }\n\n  /* Avoid glibc-2.1 bug and Solaris 2.7-2.9 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n  /* Return to the initial state.  */\n  iconv (cd, NULL, NULL, NULL, NULL);\n# endif\n\n  /* Do the conversion for real.  */\n  {\n    const char *inptr = src;\n    size_t insize = srclen;\n    char *outptr = result;\n    size_t outsize = length;\n\n    while (insize > 0)\n      {\n        size_t res = iconv (cd,\n                            (ICONV_CONST char **) &inptr, &insize,\n                            &outptr, &outsize);\n\n        if (res == (size_t)(-1))\n          {\n            if (errno == EINVAL)\n              break;\n            else\n              goto fail;\n          }\n# if !defined _LIBICONV_VERSION && !(defined __GLIBC__ && !defined __UCLIBC__)\n        /* Irix iconv() inserts a NUL byte if it cannot convert.\n           NetBSD iconv() inserts a question mark if it cannot convert.\n           Only GNU libiconv and GNU libc are known to prefer to fail rather\n           than doing a lossy conversion.  */\n        else if (res > 0)\n          {\n            errno = EILSEQ;\n            goto fail;\n          }\n# endif\n      }\n    /* Avoid glibc-2.1 bug and Solaris 2.7 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n    {\n      size_t res = iconv (cd, NULL, NULL, &outptr, &outsize);\n\n      if (res == (size_t)(-1))\n        goto fail;\n    }\n# endif\n    if (outsize != 0)\n      abort ();\n  }\n\n  *resultp = result;\n  *lengthp = length;\n\n  return 0;\n\n fail:\n  {\n    if (result != *resultp)\n      {\n        int saved_errno = errno;\n        free (result);\n        errno = saved_errno;\n      }\n    return -1;\n  }\n# undef tmpbufsize\n}",
      "lines": 163,
      "depth": 14,
      "decorators": [
        "int"
      ]
    },
    "str_cd_iconv": {
      "start_point": [
        205,
        0
      ],
      "end_point": [
        395,
        1
      ],
      "content": "char *\nstr_cd_iconv (const char *src, iconv_t cd)\n{\n  /* For most encodings, a trailing NUL byte in the input will be converted\n     to a trailing NUL byte in the output.  But not for UTF-7.  So that this\n     function is usable for UTF-7, we have to exclude the NUL byte from the\n     conversion and add it by hand afterwards.  */\n# if !defined _LIBICONV_VERSION && !(defined __GLIBC__ && !defined __UCLIBC__)\n  /* Irix iconv() inserts a NUL byte if it cannot convert.\n     NetBSD iconv() inserts a question mark if it cannot convert.\n     Only GNU libiconv and GNU libc are known to prefer to fail rather\n     than doing a lossy conversion.  For other iconv() implementations,\n     we have to look at the number of irreversible conversions returned;\n     but this information is lost when iconv() returns for an E2BIG reason.\n     Therefore we cannot use the second, faster algorithm.  */\n\n  char *result = NULL;\n  size_t length = 0;\n  int retval = mem_cd_iconv (src, strlen (src), cd, &result, &length);\n  char *final_result;\n\n  if (retval < 0)\n    {\n      if (result != NULL)\n        abort ();\n      return NULL;\n    }\n\n  /* Add the terminating NUL byte.  */\n  final_result =\n    (result != NULL ? realloc (result, length + 1) : malloc (length + 1));\n  if (final_result == NULL)\n    {\n      free (result);\n      errno = ENOMEM;\n      return NULL;\n    }\n  final_result[length] = '\\0';\n\n  return final_result;\n\n# else\n  /* This algorithm is likely faster than the one above.  But it may produce\n     iconv() returns for an E2BIG reason, when the output size guess is too\n     small.  Therefore it can only be used when we don't need the number of\n     irreversible conversions performed.  */\n  char *result;\n  size_t result_size;\n  size_t length;\n  const char *inptr = src;\n  size_t inbytes_remaining = strlen (src);\n\n  /* Make a guess for the worst-case output size, in order to avoid a\n     realloc.  It's OK if the guess is wrong as long as it is not zero and\n     doesn't lead to an integer overflow.  */\n  result_size = inbytes_remaining;\n  {\n    size_t approx_sqrt_SIZE_MAX = SIZE_MAX >> (sizeof (size_t) * CHAR_BIT / 2);\n    if (result_size <= approx_sqrt_SIZE_MAX / MB_LEN_MAX)\n      result_size *= MB_LEN_MAX;\n  }\n  result_size += 1; /* for the terminating NUL */\n\n  result = (char *) malloc (result_size);\n  if (result == NULL)\n    {\n      errno = ENOMEM;\n      return NULL;\n    }\n\n  /* Avoid glibc-2.1 bug and Solaris 2.7-2.9 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n  /* Set to the initial state.  */\n  iconv (cd, NULL, NULL, NULL, NULL);\n# endif\n\n  /* Do the conversion.  */\n  {\n    char *outptr = result;\n    size_t outbytes_remaining = result_size - 1;\n\n    for (;;)\n      {\n        /* Here inptr + inbytes_remaining = src + strlen (src),\n                outptr + outbytes_remaining = result + result_size - 1.  */\n        size_t res = iconv (cd,\n                            (ICONV_CONST char **) &inptr, &inbytes_remaining,\n                            &outptr, &outbytes_remaining);\n\n        if (res == (size_t)(-1))\n          {\n            if (errno == EINVAL)\n              break;\n            else if (errno == E2BIG)\n              {\n                size_t used = outptr - result;\n                size_t newsize = result_size * 2;\n                char *newresult;\n\n                if (!(newsize > result_size))\n                  {\n                    errno = ENOMEM;\n                    goto failed;\n                  }\n                newresult = (char *) realloc (result, newsize);\n                if (newresult == NULL)\n                  {\n                    errno = ENOMEM;\n                    goto failed;\n                  }\n                result = newresult;\n                result_size = newsize;\n                outptr = result + used;\n                outbytes_remaining = result_size - 1 - used;\n              }\n            else\n              goto failed;\n          }\n        else\n          break;\n      }\n    /* Avoid glibc-2.1 bug and Solaris 2.7 bug.  */\n# if defined _LIBICONV_VERSION \\\n     || !(((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n          || defined __sun)\n    for (;;)\n      {\n        /* Here outptr + outbytes_remaining = result + result_size - 1.  */\n        size_t res = iconv (cd, NULL, NULL, &outptr, &outbytes_remaining);\n\n        if (res == (size_t)(-1))\n          {\n            if (errno == E2BIG)\n              {\n                size_t used = outptr - result;\n                size_t newsize = result_size * 2;\n                char *newresult;\n\n                if (!(newsize > result_size))\n                  {\n                    errno = ENOMEM;\n                    goto failed;\n                  }\n                newresult = (char *) realloc (result, newsize);\n                if (newresult == NULL)\n                  {\n                    errno = ENOMEM;\n                    goto failed;\n                  }\n                result = newresult;\n                result_size = newsize;\n                outptr = result + used;\n                outbytes_remaining = result_size - 1 - used;\n              }\n            else\n              goto failed;\n          }\n        else\n          break;\n      }\n# endif\n\n    /* Add the terminating NUL byte.  */\n    *outptr++ = '\\0';\n\n    length = outptr - result;\n  }\n\n  /* Give away unused memory.  */\n  if (length < result_size)\n    {\n      char *smaller_result = (char *) realloc (result, length);\n\n      if (smaller_result != NULL)\n        result = smaller_result;\n    }\n\n  return result;\n\n failed:\n  {\n    int saved_errno = errno;\n    free (result);\n    errno = saved_errno;\n    return NULL;\n  }\n\n# endif\n}",
      "lines": 191,
      "depth": 18,
      "decorators": [
        "char",
        "*\nstr_cd_iconv (const char *src, iconv_t cd)",
        "*"
      ]
    },
    "str_iconv": {
      "start_point": [
        399,
        0
      ],
      "end_point": [
        462,
        1
      ],
      "content": "char *\nstr_iconv (const char *src, const char *from_codeset, const char *to_codeset)\n{\n  if (*src == '\\0' || c_strcasecmp (from_codeset, to_codeset) == 0)\n    {\n      char *result = strdup (src);\n\n      if (result == NULL)\n        errno = ENOMEM;\n      return result;\n    }\n  else\n    {\n#if HAVE_ICONV\n      iconv_t cd;\n      char *result;\n\n      /* Avoid glibc-2.1 bug with EUC-KR.  */\n# if ((__GLIBC__ == 2 && __GLIBC_MINOR__ <= 1) && !defined __UCLIBC__) \\\n     && !defined _LIBICONV_VERSION\n      if (c_strcasecmp (from_codeset, \"EUC-KR\") == 0\n          || c_strcasecmp (to_codeset, \"EUC-KR\") == 0)\n        {\n          errno = EINVAL;\n          return NULL;\n        }\n# endif\n      cd = iconv_open (to_codeset, from_codeset);\n      if (cd == (iconv_t) -1)\n        return NULL;\n\n      result = str_cd_iconv (src, cd);\n\n      if (result == NULL)\n        {\n          /* Close cd, but preserve the errno from str_cd_iconv.  */\n          int saved_errno = errno;\n          iconv_close (cd);\n          errno = saved_errno;\n        }\n      else\n        {\n          if (iconv_close (cd) < 0)\n            {\n              /* Return NULL, but free the allocated memory, and while doing\n                 that, preserve the errno from iconv_close.  */\n              int saved_errno = errno;\n              free (result);\n              errno = saved_errno;\n              return NULL;\n            }\n        }\n      return result;\n#else\n      /* This is a different error code than if iconv_open existed but didn't\n         support from_codeset and to_codeset, so that the caller can emit\n         an error message such as\n           \"iconv() is not supported. Installing GNU libiconv and\n            then reinstalling this package would fix this.\"  */\n      errno = ENOSYS;\n      return NULL;\n#endif\n    }\n}",
      "lines": 64,
      "depth": 14,
      "decorators": [
        "char",
        "*\nstr_iconv (const char *src, const char *from_codeset, const char *to_codeset)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/striconv.h": {},
  "grep/grep-3.1/lib/string.in.h": {},
  "grep/grep-3.1/lib/stripslash.c": {
    "strip_trailing_slashes": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "bool\nstrip_trailing_slashes (char *file)\n{\n  char *base = last_component (file);\n  char *base_lim;\n  bool had_slash;\n\n  /* last_component returns \"\" for file system roots, but we need to turn\n     \"///\" into \"/\".  */\n  if (! *base)\n    base = file;\n  base_lim = base + base_len (base);\n  had_slash = (*base_lim != '\\0');\n  *base_lim = '\\0';\n  return had_slash;\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "bool"
      ]
    }
  },
  "grep/grep-3.1/lib/strnlen.c": {
    "strnlen": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        29,
        1
      ],
      "content": "size_t\nstrnlen (const char *string, size_t maxlen)\n{\n  const char *end = memchr (string, '\\0', maxlen);\n  return end ? (size_t) (end - string) : maxlen;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/strnlen1.c": {
    "strnlen1": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        34,
        1
      ],
      "content": "size_t\nstrnlen1 (const char *string, size_t maxlen)\n{\n  const char *end = (const char *) memchr (string, '\\0', maxlen);\n  if (end != NULL)\n    return end - string + 1;\n  else\n    return maxlen;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/strnlen1.h": {},
  "grep/grep-3.1/lib/strstr.c": {
    "strstr": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        75,
        1
      ],
      "content": "char *\nstrstr (const char *haystack_start, const char *needle_start)\n{\n  const char *haystack = haystack_start;\n  const char *needle = needle_start;\n  size_t needle_len; /* Length of NEEDLE.  */\n  size_t haystack_len; /* Known minimum length of HAYSTACK.  */\n  bool ok = true; /* True if NEEDLE is prefix of HAYSTACK.  */\n\n  /* Determine length of NEEDLE, and in the process, make sure\n     HAYSTACK is at least as long (no point processing all of a long\n     NEEDLE if HAYSTACK is too short).  */\n  while (*haystack && *needle)\n    ok &= *haystack++ == *needle++;\n  if (*needle)\n    return NULL;\n  if (ok)\n    return (char *) haystack_start;\n\n  /* Reduce the size of haystack using strchr, since it has a smaller\n     linear coefficient than the Two-Way algorithm.  */\n  needle_len = needle - needle_start;\n  haystack = strchr (haystack_start + 1, *needle_start);\n  if (!haystack || __builtin_expect (needle_len == 1, 0))\n    return (char *) haystack;\n  needle -= needle_len;\n  haystack_len = (haystack > haystack_start + needle_len ? 1\n                  : needle_len + haystack_start - haystack);\n\n  /* Perform the search.  Abstract memory is considered to be an array\n     of 'unsigned char' values, not an array of 'char' values.  See\n     ISO C 99 section 6.2.6.1.  */\n  if (needle_len < LONG_NEEDLE_THRESHOLD)\n    return two_way_short_needle ((const unsigned char *) haystack,\n                                 haystack_len,\n                                 (const unsigned char *) needle, needle_len);\n  return two_way_long_needle ((const unsigned char *) haystack, haystack_len,\n                              (const unsigned char *) needle, needle_len);\n}",
      "lines": 39,
      "depth": 10,
      "decorators": [
        "char",
        "*\nstrstr (const char *haystack_start, const char *needle_start)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/strtoimax.c": {
    "Strtoimax": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "Int\nStrtoimax (char const *ptr, char **endptr, int base)\n{\n#if Have_long_long\n  verify (sizeof (Int) == sizeof (Unsigned long int)\n          || sizeof (Int) == sizeof (Unsigned long long int));\n\n  if (sizeof (Int) != sizeof (Unsigned long int))\n    return Strtoll (ptr, endptr, base);\n#else\n  verify (sizeof (Int) == sizeof (Unsigned long int));\n#endif\n\n  return Strtol (ptr, endptr, base);\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "Int"
      ]
    }
  },
  "grep/grep-3.1/lib/strtol.c": {
    "INTERNAL": {
      "start_point": [
        225,
        0
      ],
      "end_point": [
        408,
        1
      ],
      "content": "INT\nINTERNAL (strtol) (const STRING_TYPE *nptr, STRING_TYPE **endptr,\n                   int base, int group LOCALE_PARAM_PROTO)\n{\n  int negative;\n  register unsigned LONG int cutoff;\n  register unsigned int cutlim;\n  register unsigned LONG int i;\n  register const STRING_TYPE *s;\n  register UCHAR_TYPE c;\n  const STRING_TYPE *save, *end;\n  int overflow;\n\n#ifdef USE_NUMBER_GROUPING\n# ifdef USE_IN_EXTENDED_LOCALE_MODEL\n  struct locale_data *current = loc->__locales[LC_NUMERIC];\n# endif\n  /* The thousands character of the current locale.  */\n  wchar_t thousands = L'\\0';\n  /* The numeric grouping specification of the current locale,\n     in the format described in <locale.h>.  */\n  const char *grouping;\n\n  if (group)\n    {\n      grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);\n      if (*grouping <= 0 || *grouping == CHAR_MAX)\n        grouping = NULL;\n      else\n        {\n          /* Figure out the thousands separator character.  */\n# if defined _LIBC || defined _HAVE_BTOWC\n          thousands = __btowc (*_NL_CURRENT (LC_NUMERIC, THOUSANDS_SEP));\n          if (thousands == WEOF)\n            thousands = L'\\0';\n# endif\n          if (thousands == L'\\0')\n            grouping = NULL;\n        }\n    }\n  else\n    grouping = NULL;\n#endif\n\n  if (base < 0 || base == 1 || base > 36)\n    {\n      __set_errno (EINVAL);\n      return 0;\n    }\n\n  save = s = nptr;\n\n  /* Skip white space.  */\n  while (ISSPACE (*s))\n    ++s;\n  if (*s == L_('\\0'))\n    goto noconv;\n\n  /* Check for a sign.  */\n  if (*s == L_('-'))\n    {\n      negative = 1;\n      ++s;\n    }\n  else if (*s == L_('+'))\n    {\n      negative = 0;\n      ++s;\n    }\n  else\n    negative = 0;\n\n  /* Recognize number prefix and if BASE is zero, figure it out ourselves.  */\n  if (*s == L_('0'))\n    {\n      if ((base == 0 || base == 16) && TOUPPER (s[1]) == L_('X'))\n        {\n          s += 2;\n          base = 16;\n        }\n      else if (base == 0)\n        base = 8;\n    }\n  else if (base == 0)\n    base = 10;\n\n  /* Save the pointer so we can check later if anything happened.  */\n  save = s;\n\n#ifdef USE_NUMBER_GROUPING\n  if (group)\n    {\n      /* Find the end of the digit string and check its grouping.  */\n      end = s;\n      for (c = *end; c != L_('\\0'); c = *++end)\n        if ((wchar_t) c != thousands\n            && ((wchar_t) c < L_('0') || (wchar_t) c > L_('9'))\n            && (!ISALPHA (c) || (int) (TOUPPER (c) - L_('A') + 10) >= base))\n          break;\n      if (*s == thousands)\n        end = s;\n      else\n        end = correctly_grouped_prefix (s, end, thousands, grouping);\n    }\n  else\n#endif\n    end = NULL;\n\n  cutoff = STRTOL_ULONG_MAX / (unsigned LONG int) base;\n  cutlim = STRTOL_ULONG_MAX % (unsigned LONG int) base;\n\n  overflow = 0;\n  i = 0;\n  for (c = *s; c != L_('\\0'); c = *++s)\n    {\n      if (s == end)\n        break;\n      if (c >= L_('0') && c <= L_('9'))\n        c -= L_('0');\n      else if (ISALPHA (c))\n        c = TOUPPER (c) - L_('A') + 10;\n      else\n        break;\n      if ((int) c >= base)\n        break;\n      /* Check for overflow.  */\n      if (i > cutoff || (i == cutoff && c > cutlim))\n        overflow = 1;\n      else\n        {\n          i *= (unsigned LONG int) base;\n          i += c;\n        }\n    }\n\n  /* Check if anything actually happened.  */\n  if (s == save)\n    goto noconv;\n\n  /* Store in ENDPTR the address of one character\n     past the last character we converted.  */\n  if (endptr != NULL)\n    *endptr = (STRING_TYPE *) s;\n\n#if !UNSIGNED\n  /* Check for a value that is within the range of\n     'unsigned LONG int', but outside the range of 'LONG int'.  */\n  if (overflow == 0\n      && i > (negative\n              ? -((unsigned LONG int) (STRTOL_LONG_MIN + 1)) + 1\n              : (unsigned LONG int) STRTOL_LONG_MAX))\n    overflow = 1;\n#endif\n\n  if (overflow)\n    {\n      __set_errno (ERANGE);\n#if UNSIGNED\n      return STRTOL_ULONG_MAX;\n#else\n      return negative ? STRTOL_LONG_MIN : STRTOL_LONG_MAX;\n#endif\n    }\n\n  /* Return the result of the appropriate sign.  */\n  return negative ? -i : i;\n\nnoconv:\n  /* We must handle a special case here: the base is 0 or 16 and the\n     first two characters are '0' and 'x', but the rest are no\n     hexadecimal digits.  This is no error case.  We return 0 and\n     ENDPTR points to the 'x'.  */\n  if (endptr != NULL)\n    {\n      if (save - nptr >= 2 && TOUPPER (save[-1]) == L_('X')\n          && save[-2] == L_('0'))\n        *endptr = (STRING_TYPE *) &save[-1];\n      else\n        /*  There was no number to convert.  */\n        *endptr = (STRING_TYPE *) nptr;\n    }\n\n  return 0L;\n}",
      "lines": 184,
      "depth": 20,
      "decorators": [
        "INT"
      ]
    },
    "strtol": {
      "start_point": [
        415,
        0
      ],
      "end_point": [
        421,
        1
      ],
      "content": "weak_function\n#endif\nstrtol (const STRING_TYPE *nptr, STRING_TYPE **endptr,\n        int base LOCALE_PARAM_PROTO)\n{\n  return INTERNAL (strtol) (nptr, endptr, base, 0 LOCALE_PARAM);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "weak_function",
        "#endif",
        "#endif"
      ]
    }
  },
  "grep/grep-3.1/lib/strtoll.c": {},
  "grep/grep-3.1/lib/strtoul.c": {},
  "grep/grep-3.1/lib/strtoull.c": {},
  "grep/grep-3.1/lib/strtoumax.c": {},
  "grep/grep-3.1/lib/sys_stat.in.h": {
    "rpl_mkdir": {
      "start_point": [
        581,
        0
      ],
      "end_point": [
        585,
        1
      ],
      "content": "static int\nrpl_mkdir (char const *name, mode_t mode)\n{\n  return _mkdir (name);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/sys_types.in.h": {},
  "grep/grep-3.1/lib/time.in.h": {},
  "grep/grep-3.1/lib/trim.c": {
    "trim2": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "content": "char *\ntrim2 (const char *s, int how)\n{\n  char *d;\n\n  d = strdup (s);\n\n  if (!d)\n    xalloc_die ();\n\n  if (MB_CUR_MAX > 1)\n    {\n      mbi_iterator_t i;\n\n      /* Trim leading whitespaces. */\n      if (how != TRIM_TRAILING)\n        {\n          mbi_init (i, d, strlen (d));\n\n          for (; mbi_avail (i) && mb_isspace (mbi_cur (i)); mbi_advance (i))\n            ;\n\n          memmove (d, mbi_cur_ptr (i), strlen (mbi_cur_ptr (i)) + 1);\n        }\n\n      /* Trim trailing whitespaces. */\n      if (how != TRIM_LEADING)\n        {\n          unsigned int state = 0;\n          char *r IF_LINT (= NULL); /* used only while state = 2 */\n\n          mbi_init (i, d, strlen (d));\n\n          for (; mbi_avail (i); mbi_advance (i))\n            {\n              if (state == 0 && mb_isspace (mbi_cur (i)))\n                continue;\n\n              if (state == 0 && !mb_isspace (mbi_cur (i)))\n                {\n                  state = 1;\n                  continue;\n                }\n\n              if (state == 1 && !mb_isspace (mbi_cur (i)))\n                continue;\n\n              if (state == 1 && mb_isspace (mbi_cur (i)))\n                {\n                  state = 2;\n                  r = (char *) mbi_cur_ptr (i);\n                }\n              else if (state == 2 && mb_isspace (mbi_cur (i)))\n                {\n                  /* empty */\n                }\n              else\n                {\n                  state = 1;\n                }\n            }\n\n          if (state == 2)\n            *r = '\\0';\n        }\n    }\n  else\n    {\n      char *p;\n\n      /* Trim leading whitespaces. */\n      if (how != TRIM_TRAILING)\n        {\n          for (p = d; *p && isspace ((unsigned char) *p); p++)\n            ;\n\n          memmove (d, p, strlen (p) + 1);\n        }\n\n      /* Trim trailing whitespaces. */\n      if (how != TRIM_LEADING)\n        {\n          for (p = d + strlen (d) - 1;\n               p >= d && isspace ((unsigned char) *p); p--)\n            *p = '\\0';\n        }\n    }\n\n  return d;\n}",
      "lines": 90,
      "depth": 17,
      "decorators": [
        "char",
        "*\ntrim2 (const char *s, int how)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/trim.h": {},
  "grep/grep-3.1/lib/unistd--.h": {},
  "grep/grep-3.1/lib/unistd-safer.h": {},
  "grep/grep-3.1/lib/unistd.c": {},
  "grep/grep-3.1/lib/unistd.in.h": {
    "rpl_environ": {
      "start_point": [
        427,
        0
      ],
      "end_point": [
        431,
        1
      ],
      "content": "_GL_UNISTD_INLINE char ***\nrpl_environ (void)\n{\n  return &environ;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "_GL_UNISTD_INLINE",
        "char",
        "char",
        "***\nrpl_environ (void)",
        "*",
        "**\nrpl_environ (void)",
        "*",
        "*\nrpl_environ (void)",
        "*"
      ]
    },
    "getpagesize": {
      "start_point": [
        894,
        0
      ],
      "end_point": [
        898,
        1
      ],
      "content": "_GL_UNISTD_INLINE int\ngetpagesize ()\n{\n  return _gl_getpagesize ();\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "_GL_UNISTD_INLINE",
        "int",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/unistr.in.h": {
    "u8_mbtouc_unsafe": {
      "start_point": [
        149,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "content": "static inline int\nu8_mbtouc_unsafe (ucs4_t *puc, const uint8_t *s, size_t n)\n{\n  uint8_t c = *s;\n\n  if (c < 0x80)\n    {\n      *puc = c;\n      return 1;\n    }\n  else\n    return u8_mbtouc_unsafe_aux (puc, s, n);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u16_mbtouc_unsafe": {
      "start_point": [
        172,
        0
      ],
      "end_point": [
        184,
        1
      ],
      "content": "static inline int\nu16_mbtouc_unsafe (ucs4_t *puc, const uint16_t *s, size_t n)\n{\n  uint16_t c = *s;\n\n  if (c < 0xd800 || c >= 0xe000)\n    {\n      *puc = c;\n      return 1;\n    }\n  else\n    return u16_mbtouc_unsafe_aux (puc, s, n);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u32_mbtouc_unsafe": {
      "start_point": [
        193,
        0
      ],
      "end_point": [
        205,
        1
      ],
      "content": "static inline int\nu32_mbtouc_unsafe (ucs4_t *puc,\n                   const uint32_t *s, size_t n _GL_UNUSED_PARAMETER)\n{\n  uint32_t c = *s;\n\n  if (c < 0xd800 || (c >= 0xe000 && c < 0x110000))\n    *puc = c;\n  else\n    /* invalid multibyte character */\n    *puc = 0xfffd;\n  return 1;\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u8_mbtouc": {
      "start_point": [
        216,
        0
      ],
      "end_point": [
        228,
        1
      ],
      "content": "static inline int\nu8_mbtouc (ucs4_t *puc, const uint8_t *s, size_t n)\n{\n  uint8_t c = *s;\n\n  if (c < 0x80)\n    {\n      *puc = c;\n      return 1;\n    }\n  else\n    return u8_mbtouc_aux (puc, s, n);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u16_mbtouc": {
      "start_point": [
        239,
        0
      ],
      "end_point": [
        251,
        1
      ],
      "content": "static inline int\nu16_mbtouc (ucs4_t *puc, const uint16_t *s, size_t n)\n{\n  uint16_t c = *s;\n\n  if (c < 0xd800 || c >= 0xe000)\n    {\n      *puc = c;\n      return 1;\n    }\n  else\n    return u16_mbtouc_aux (puc, s, n);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u32_mbtouc": {
      "start_point": [
        260,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "content": "static inline int\nu32_mbtouc (ucs4_t *puc, const uint32_t *s, size_t n _GL_UNUSED_PARAMETER)\n{\n  uint32_t c = *s;\n\n  if (c < 0xd800 || (c >= 0xe000 && c < 0x110000))\n    *puc = c;\n  else\n    /* invalid multibyte character */\n    *puc = 0xfffd;\n  return 1;\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u8_uctomb": {
      "start_point": [
        312,
        0
      ],
      "end_point": [
        322,
        1
      ],
      "content": "static inline int\nu8_uctomb (uint8_t *s, ucs4_t uc, int n)\n{\n  if (uc < 0x80 && n > 0)\n    {\n      s[0] = uc;\n      return 1;\n    }\n  else\n    return u8_uctomb_aux (s, uc, n);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u16_uctomb": {
      "start_point": [
        334,
        0
      ],
      "end_point": [
        344,
        1
      ],
      "content": "static inline int\nu16_uctomb (uint16_t *s, ucs4_t uc, int n)\n{\n  if (uc < 0xd800 && n > 0)\n    {\n      s[0] = uc;\n      return 1;\n    }\n  else\n    return u16_uctomb_aux (s, uc, n);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "u32_uctomb": {
      "start_point": [
        353,
        0
      ],
      "end_point": [
        368,
        1
      ],
      "content": "static inline int\nu32_uctomb (uint32_t *s, ucs4_t uc, int n)\n{\n  if (uc < 0xd800 || (uc >= 0xe000 && uc < 0x110000))\n    {\n      if (n > 0)\n        {\n          *s = uc;\n          return 1;\n        }\n      else\n        return -2;\n    }\n  else\n    return -1;\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/unitypes.in.h": {},
  "grep/grep-3.1/lib/uniwidth.in.h": {},
  "grep/grep-3.1/lib/unlocked-io.h": {},
  "grep/grep-3.1/lib/unused-parameter.h": {},
  "grep/grep-3.1/lib/verify.h": {},
  "grep/grep-3.1/lib/version-etc-fsf.c": {},
  "grep/grep-3.1/lib/version-etc.c": {
    "version_etc_arn": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        172,
        1
      ],
      "content": "void\nversion_etc_arn (FILE *stream,\n                 const char *command_name, const char *package,\n                 const char *version,\n                 const char * const * authors, size_t n_authors)\n{\n  if (command_name)\n    fprintf (stream, \"%s (%s) %s\\n\", command_name, package, version);\n  else\n    fprintf (stream, \"%s %s\\n\", package, version);\n\n#ifdef PACKAGE_PACKAGER\n# ifdef PACKAGE_PACKAGER_VERSION\n  fprintf (stream, _(\"Packaged by %s (%s)\\n\"), PACKAGE_PACKAGER,\n           PACKAGE_PACKAGER_VERSION);\n# else\n  fprintf (stream, _(\"Packaged by %s\\n\"), PACKAGE_PACKAGER);\n# endif\n#endif\n\n  /* TRANSLATORS: Translate \"(C)\" to the copyright symbol\n     (C-in-a-circle), if this symbol is available in the user's\n     locale.  Otherwise, do not translate \"(C)\"; leave it as-is.  */\n  fprintf (stream, version_etc_copyright, _(\"(C)\"), COPYRIGHT_YEAR);\n\n  fputs (_(\"\\\n\\n\\\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\n\\\nThis is free software: you are free to change and redistribute it.\\n\\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\\n\\n\\\n\"),\n         stream);\n\n  switch (n_authors)\n    {\n    case 0:\n      /* The caller must provide at least one author name.  */\n      abort ();\n    case 1:\n      /* TRANSLATORS: %s denotes an author name.  */\n      fprintf (stream, _(\"Written by %s.\\n\"), authors[0]);\n      break;\n    case 2:\n      /* TRANSLATORS: Each %s denotes an author name.  */\n      fprintf (stream, _(\"Written by %s and %s.\\n\"), authors[0], authors[1]);\n      break;\n    case 3:\n      /* TRANSLATORS: Each %s denotes an author name.  */\n      fprintf (stream, _(\"Written by %s, %s, and %s.\\n\"),\n               authors[0], authors[1], authors[2]);\n      break;\n    case 4:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"Written by %s, %s, %s,\\nand %s.\\n\"),\n               authors[0], authors[1], authors[2], authors[3]);\n      break;\n    case 5:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"Written by %s, %s, %s,\\n%s, and %s.\\n\"),\n               authors[0], authors[1], authors[2], authors[3], authors[4]);\n      break;\n    case 6:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\"),\n               authors[0], authors[1], authors[2], authors[3], authors[4],\n               authors[5]);\n      break;\n    case 7:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\"),\n               authors[0], authors[1], authors[2], authors[3], authors[4],\n               authors[5], authors[6]);\n      break;\n    case 8:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"\\\nWritten by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\"),\n                authors[0], authors[1], authors[2], authors[3], authors[4],\n                authors[5], authors[6], authors[7]);\n      break;\n    case 9:\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"\\\nWritten by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\"),\n               authors[0], authors[1], authors[2], authors[3], authors[4],\n               authors[5], authors[6], authors[7], authors[8]);\n      break;\n    default:\n      /* 10 or more authors.  Use an abbreviation, since the human reader\n         will probably not want to read the entire list anyway.  */\n      /* TRANSLATORS: Each %s denotes an author name.\n         You can use line breaks, estimating that each author name occupies\n         ca. 16 screen columns and that a screen line has ca. 80 columns.  */\n      fprintf (stream, _(\"\\\nWritten by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\"),\n                authors[0], authors[1], authors[2], authors[3], authors[4],\n                authors[5], authors[6], authors[7], authors[8]);\n      break;\n    }\n}",
      "lines": 113,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "version_etc_ar": {
      "start_point": [
        178,
        0
      ],
      "end_point": [
        188,
        1
      ],
      "content": "void\nversion_etc_ar (FILE *stream,\n                const char *command_name, const char *package,\n                const char *version, const char * const * authors)\n{\n  size_t n_authors;\n\n  for (n_authors = 0; authors[n_authors]; n_authors++)\n    ;\n  version_etc_arn (stream, command_name, package, version, authors, n_authors);\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "version_etc_va": {
      "start_point": [
        194,
        0
      ],
      "end_point": [
        209,
        1
      ],
      "content": "void\nversion_etc_va (FILE *stream,\n                const char *command_name, const char *package,\n                const char *version, va_list authors)\n{\n  size_t n_authors;\n  const char *authtab[10];\n\n  for (n_authors = 0;\n       n_authors < 10\n         && (authtab[n_authors] = va_arg (authors, const char *)) != NULL;\n       n_authors++)\n    ;\n  version_etc_arn (stream, command_name, package, version,\n                   authtab, n_authors);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "version_etc": {
      "start_point": [
        225,
        0
      ],
      "end_point": [
        235,
        1
      ],
      "content": "void\nversion_etc (FILE *stream,\n             const char *command_name, const char *package,\n             const char *version, /* const char *author1, ...*/ ...)\n{\n  va_list authors;\n\n  va_start (authors, version);\n  version_etc_va (stream, command_name, package, version, authors);\n  va_end (authors);\n}",
      "lines": 11,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "emit_bug_reporting_address": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        257,
        1
      ],
      "content": "void\nemit_bug_reporting_address (void)\n{\n  /* TRANSLATORS: The placeholder indicates the bug-reporting address\n     for this package.  Please add _another line_ saying\n     \"Report translation bugs to <...>\\n\" with the address for translation\n     bugs (typically your translation team's web or email address).  */\n  printf (_(\"\\nReport bugs to: %s\\n\"), PACKAGE_BUGREPORT);\n#ifdef PACKAGE_PACKAGER_BUG_REPORTS\n  printf (_(\"Report %s bugs to: %s\\n\"), PACKAGE_PACKAGER,\n          PACKAGE_PACKAGER_BUG_REPORTS);\n#endif\n#ifdef PACKAGE_URL\n  printf (_(\"%s home page: <%s>\\n\"), PACKAGE_NAME, PACKAGE_URL);\n#else\n  printf (_(\"%s home page: <http://www.gnu.org/software/%s/>\\n\"),\n          PACKAGE_NAME, PACKAGE);\n#endif\n  fputs (_(\"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\"),\n         stdout);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/version-etc.h": {},
  "grep/grep-3.1/lib/warn-on-use.h": {},
  "grep/grep-3.1/lib/wchar.in.h": {},
  "grep/grep-3.1/lib/wcrtomb.c": {
    "wcrtomb": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "size_t\nwcrtomb (char *s, wchar_t wc, mbstate_t *ps)\n{\n  /* This implementation of wcrtomb on top of wctomb() supports only\n     stateless encodings.  ps must be in the initial state.  */\n  if (ps != NULL && !mbsinit (ps))\n    {\n      errno = EINVAL;\n      return (size_t)(-1);\n    }\n\n  if (s == NULL)\n    /* We know the NUL wide character corresponds to the NUL character.  */\n    return 1;\n  else\n    {\n      int ret = wctomb (s, wc);\n\n      if (ret >= 0)\n        return ret;\n      else\n        {\n          errno = EILSEQ;\n          return (size_t)(-1);\n        }\n    }\n}",
      "lines": 27,
      "depth": 10,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/lib/wctob.c": {
    "wctob": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "content": "int\nwctob (wint_t wc)\n{\n  char buf[64];\n\n  if (!(MB_CUR_MAX <= sizeof (buf)))\n    abort ();\n  /* Handle the case where WEOF is a value that does not fit in a wchar_t.  */\n  if (wc == (wchar_t)wc)\n    if (wctomb (buf, (wchar_t)wc) == 1)\n      return (unsigned char) buf[0];\n  return EOF;\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/wctomb-impl.h": {
    "wctomb": {
      "start_point": [
        17,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "int\nwctomb (char *s, wchar_t wc)\n{\n  if (s == NULL)\n    return 0;\n  else\n    {\n      mbstate_t state;\n      size_t result;\n\n      memset (&state, 0, sizeof (mbstate_t));\n      result = wcrtomb (s, wc, &state);\n      if (result == (size_t)-1)\n        return -1;\n      return result;\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/wctomb.c": {},
  "grep/grep-3.1/lib/wctype-h.c": {},
  "grep/grep-3.1/lib/wctype.in.h": {
    "rpl_towlower": {
      "start_point": [
        371,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "content": "_GL_WCTYPE_INLINE wint_t\nrpl_towlower (wint_t wc)\n{\n  return (wint_t) (wchar_t) towlower (wc);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "_GL_WCTYPE_INLINE",
        "wint_t",
        "wint_t"
      ]
    },
    "rpl_towupper": {
      "start_point": [
        380,
        0
      ],
      "end_point": [
        384,
        1
      ],
      "content": "_GL_WCTYPE_INLINE wint_t\nrpl_towupper (wint_t wc)\n{\n  return (wint_t) (wchar_t) towupper (wc);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "_GL_WCTYPE_INLINE",
        "wint_t",
        "wint_t"
      ]
    }
  },
  "grep/grep-3.1/lib/wcwidth.c": {},
  "grep/grep-3.1/lib/xalloc-die.c": {
    "xalloc_die": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "void\nxalloc_die (void)\n{\n  error (exit_failure, 0, \"%s\", _(\"memory exhausted\"));\n\n  /* _Noreturn cannot be given to error, since it may return if\n     its first argument is 0.  To help compilers understand the\n     xalloc_die does not return, call abort.  Also, the abort is a\n     safety feature if exit_failure is 0 (which shouldn't happen).  */\n  abort ();\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/xalloc-oversized.h": {},
  "grep/grep-3.1/lib/xalloc.h": {
    "xnmalloc": {
      "start_point": [
        103,
        0
      ],
      "end_point": [
        109,
        1
      ],
      "content": "XALLOC_INLINE void *\nxnmalloc (size_t n, size_t s)\n{\n  if (xalloc_oversized (n, s))\n    xalloc_die ();\n  return xmalloc (n * s);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "XALLOC_INLINE",
        "void",
        "void",
        "*\nxnmalloc (size_t n, size_t s)",
        "*"
      ]
    },
    "xnrealloc": [
      {
        "start_point": [
          116,
          0
        ],
        "end_point": [
          122,
          1
        ],
        "content": "XALLOC_INLINE void *\nxnrealloc (void *p, size_t n, size_t s)\n{\n  if (xalloc_oversized (n, s))\n    xalloc_die ();\n  return xrealloc (p, n * s);\n}",
        "lines": 7,
        "depth": 7,
        "decorators": [
          "XALLOC_INLINE",
          "void",
          "void",
          "*\nxnrealloc (void *p, size_t n, size_t s)",
          "*"
        ]
      },
      {
        "start_point": [
          239,
          29
        ],
        "end_point": [
          243,
          1
        ],
        "content": "T *\nxnrealloc (T *p, size_t n, size_t s)\n{\n  return (T *) xnrealloc ((void *) p, n, s);\n}",
        "lines": 5,
        "depth": 10,
        "decorators": [
          "T",
          "*\nxnrealloc (T *p, size_t n, size_t s)",
          "*"
        ]
      }
    ],
    "x2nrealloc": [
      {
        "start_point": [
          178,
          0
        ],
        "end_point": [
          213,
          1
        ],
        "content": "XALLOC_INLINE void *\nx2nrealloc (void *p, size_t *pn, size_t s)\n{\n  size_t n = *pn;\n\n  if (! p)\n    {\n      if (! n)\n        {\n          /* The approximate size to use for initial small allocation\n             requests, when the invoking code specifies an old size of\n             zero.  This is the largest \"small\" request for the GNU C\n             library malloc.  */\n          enum { DEFAULT_MXFAST = 64 * sizeof (size_t) / 4 };\n\n          n = DEFAULT_MXFAST / s;\n          n += !n;\n        }\n      if (xalloc_oversized (n, s))\n        xalloc_die ();\n    }\n  else\n    {\n      /* Set N = floor (1.5 * N) + 1 so that progress is made even if N == 0.\n         Check for overflow, so that N * S stays in both ptrdiff_t and\n         size_t range.  The check may be slightly conservative, but an\n         exact check isn't worth the trouble.  */\n      if ((PTRDIFF_MAX < SIZE_MAX ? PTRDIFF_MAX : SIZE_MAX) / 3 * 2 / s\n          <= n)\n        xalloc_die ();\n      n += n / 2 + 1;\n    }\n\n  *pn = n;\n  return xrealloc (p, n * s);\n}",
        "lines": 36,
        "depth": 14,
        "decorators": [
          "XALLOC_INLINE",
          "void",
          "void",
          "*\nx2nrealloc (void *p, size_t *pn, size_t s)",
          "*"
        ]
      },
      {
        "start_point": [
          251,
          29
        ],
        "end_point": [
          255,
          1
        ],
        "content": "T *\nx2nrealloc (T *p, size_t *pn, size_t s)\n{\n  return (T *) x2nrealloc ((void *) p, pn, s);\n}",
        "lines": 5,
        "depth": 10,
        "decorators": [
          "T",
          "*\nx2nrealloc (T *p, size_t *pn, size_t s)",
          "*"
        ]
      }
    ],
    "xcharalloc": {
      "start_point": [
        220,
        0
      ],
      "end_point": [
        224,
        1
      ],
      "content": "XALLOC_INLINE char *\nxcharalloc (size_t n)\n{\n  return XNMALLOC (n, char);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "XALLOC_INLINE",
        "char",
        "char",
        "*\nxcharalloc (size_t n)",
        "*"
      ]
    },
    "xrealloc": {
      "start_point": [
        233,
        29
      ],
      "end_point": [
        237,
        1
      ],
      "content": "T *\nxrealloc (T *p, size_t s)\n{\n  return (T *) xrealloc ((void *) p, s);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "T",
        "*\nxrealloc (T *p, size_t s)",
        "*"
      ]
    },
    "x2realloc": {
      "start_point": [
        245,
        29
      ],
      "end_point": [
        249,
        1
      ],
      "content": "T *\nx2realloc (T *p, size_t *pn)\n{\n  return (T *) x2realloc ((void *) p, pn);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "T",
        "*\nx2realloc (T *p, size_t *pn)",
        "*"
      ]
    },
    "xmemdup": {
      "start_point": [
        257,
        29
      ],
      "end_point": [
        261,
        1
      ],
      "content": "T *\nxmemdup (T const *p, size_t s)\n{\n  return (T *) xmemdup ((void const *) p, s);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "T",
        "*\nxmemdup (T const *p, size_t s)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/xbinary-io.c": {
    "xset_binary_mode_error": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        38,
        1
      ],
      "content": "_Noreturn void\nxset_binary_mode_error (void)\n{\n  error (exit_failure, errno,\n         _(\"failed to set file descriptor text/binary mode\"));\n  assume (false);\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "_Noreturn",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/xbinary-io.h": {
    "xset_binary_mode_error": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        32,
        55
      ],
      "content": "XBINARY_IO_INLINE void xset_binary_mode_error (void) {}",
      "lines": 1,
      "depth": 5,
      "decorators": [
        "XBINARY_IO_INLINE",
        "void",
        "void"
      ]
    },
    "xset_binary_mode": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "XBINARY_IO_INLINE void\nxset_binary_mode (int fd, int mode)\n{\n  if (set_binary_mode (fd, mode) < 0)\n    xset_binary_mode_error ();\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "XBINARY_IO_INLINE",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/xmalloc.c": {
    "xmalloc": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "content": "void *\nxmalloc (size_t n)\n{\n  void *p = malloc (n);\n  if (!p && n != 0)\n    xalloc_die ();\n  return p;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void",
        "*\nxmalloc (size_t n)",
        "*"
      ]
    },
    "xrealloc": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "content": "void *\nxrealloc (void *p, size_t n)\n{\n  if (!n && p)\n    {\n      /* The GNU and C99 realloc behaviors disagree here.  Act like\n         GNU, even if the underlying realloc is C99.  */\n      free (p);\n      return NULL;\n    }\n\n  p = realloc (p, n);\n  if (!p && n)\n    xalloc_die ();\n  return p;\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "void",
        "*\nxrealloc (void *p, size_t n)",
        "*"
      ]
    },
    "x2realloc": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "content": "void *\nx2realloc (void *p, size_t *pn)\n{\n  return x2nrealloc (p, pn, 1);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "void",
        "*\nx2realloc (void *p, size_t *pn)",
        "*"
      ]
    },
    "xzalloc": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "content": "void *\nxzalloc (size_t s)\n{\n  return memset (xmalloc (s), 0, s);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void",
        "*\nxzalloc (size_t s)",
        "*"
      ]
    },
    "xcalloc": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "void *\nxcalloc (size_t n, size_t s)\n{\n  void *p;\n  /* Test for overflow, since objects with size greater than\n     PTRDIFF_MAX cause pointer subtraction to go awry.  Omit size-zero\n     tests if HAVE_GNU_CALLOC, since GNU calloc never returns NULL if\n     successful.  */\n  if (xalloc_oversized (n, s)\n      || (! (p = calloc (n, s)) && (HAVE_GNU_CALLOC || n != 0)))\n    xalloc_die ();\n  return p;\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void",
        "*\nxcalloc (size_t n, size_t s)",
        "*"
      ]
    },
    "xmemdup": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        113,
        1
      ],
      "content": "void *\nxmemdup (void const *p, size_t s)\n{\n  return memcpy (xmalloc (s), p, s);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void",
        "*\nxmemdup (void const *p, size_t s)",
        "*"
      ]
    },
    "xstrdup": {
      "start_point": [
        117,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "content": "char *\nxstrdup (char const *string)\n{\n  return xmemdup (string, strlen (string) + 1);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "char",
        "*\nxstrdup (char const *string)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/xstriconv.c": {
    "xmem_cd_iconv": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "int\nxmem_cd_iconv (const char *src, size_t srclen, iconv_t cd,\n               char **resultp, size_t *lengthp)\n{\n  int retval = mem_cd_iconv (src, srclen, cd, resultp, lengthp);\n\n  if (retval < 0 && errno == ENOMEM)\n    xalloc_die ();\n  return retval;\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "int"
      ]
    },
    "xstr_cd_iconv": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        49,
        1
      ],
      "content": "char *\nxstr_cd_iconv (const char *src, iconv_t cd)\n{\n  char *result = str_cd_iconv (src, cd);\n\n  if (result == NULL && errno == ENOMEM)\n    xalloc_die ();\n  return result;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "char",
        "*\nxstr_cd_iconv (const char *src, iconv_t cd)",
        "*"
      ]
    },
    "xstr_iconv": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "content": "char *\nxstr_iconv (const char *src, const char *from_codeset, const char *to_codeset)\n{\n  char *result = str_iconv (src, from_codeset, to_codeset);\n\n  if (result == NULL && errno == ENOMEM)\n    xalloc_die ();\n  return result;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "char",
        "*\nxstr_iconv (const char *src, const char *from_codeset, const char *to_codeset)",
        "*"
      ]
    }
  },
  "grep/grep-3.1/lib/xstriconv.h": {},
  "grep/grep-3.1/lib/xstrtoimax.c": {},
  "grep/grep-3.1/lib/xstrtol-error.c": {
    "xstrtol_error": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "content": "static void\nxstrtol_error (enum strtol_error err,\n               int opt_idx, char c, struct option const *long_options,\n               char const *arg,\n               int exit_status)\n{\n  char const *hyphens = \"--\";\n  char const *msgid;\n  char const *option;\n  char option_buffer[2];\n\n  switch (err)\n    {\n    default:\n      abort ();\n\n    case LONGINT_INVALID:\n      msgid = N_(\"invalid %s%s argument '%s'\");\n      break;\n\n    case LONGINT_INVALID_SUFFIX_CHAR:\n    case LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW:\n      msgid = N_(\"invalid suffix in %s%s argument '%s'\");\n      break;\n\n    case LONGINT_OVERFLOW:\n      msgid = N_(\"%s%s argument '%s' too large\");\n      break;\n    }\n\n  if (opt_idx < 0)\n    {\n      hyphens -= opt_idx;\n      option_buffer[0] = c;\n      option_buffer[1] = '\\0';\n      option = option_buffer;\n    }\n  else\n    option = long_options[opt_idx].name;\n\n  error (exit_status, 0, gettext (msgid), hyphens, option, arg);\n}",
      "lines": 42,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "xstrtol_fatal": {
      "start_point": [
        90,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "content": "void\nxstrtol_fatal (enum strtol_error err,\n               int opt_idx, char c, struct option const *long_options,\n               char const *arg)\n{\n  xstrtol_error (err, opt_idx, c, long_options, arg, exit_failure);\n  abort ();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/xstrtol.c": {
    "bkm_scale": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "content": "static strtol_error\nbkm_scale (__strtol_t *x, int scale_factor)\n{\n  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)\n    {\n      *x = STRTOL_T_MINIMUM;\n      return LONGINT_OVERFLOW;\n    }\n  if (STRTOL_T_MAXIMUM / scale_factor < *x)\n    {\n      *x = STRTOL_T_MAXIMUM;\n      return LONGINT_OVERFLOW;\n    }\n  *x *= scale_factor;\n  return LONGINT_OK;\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "strtol_error"
      ]
    },
    "bkm_scale_by_power": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "content": "static strtol_error\nbkm_scale_by_power (__strtol_t *x, int base, int power)\n{\n  strtol_error err = LONGINT_OK;\n  while (power--)\n    err |= bkm_scale (x, base);\n  return err;\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "strtol_error"
      ]
    },
    "__xstrtol": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        248,
        1
      ],
      "content": "strtol_error\n__xstrtol (const char *s, char **ptr, int strtol_base,\n           __strtol_t *val, const char *valid_suffixes)\n{\n  char *t_ptr;\n  char **p;\n  __strtol_t tmp;\n  strtol_error err = LONGINT_OK;\n\n  assure (0 <= strtol_base && strtol_base <= 36);\n\n  p = (ptr ? ptr : &t_ptr);\n\n  errno = 0;\n\n  if (! TYPE_SIGNED (__strtol_t))\n    {\n      const char *q = s;\n      unsigned char ch = *q;\n      while (isspace (ch))\n        ch = *++q;\n      if (ch == '-')\n        return LONGINT_INVALID;\n    }\n\n  tmp = __strtol (s, p, strtol_base);\n\n  if (*p == s)\n    {\n      /* If there is no number but there is a valid suffix, assume the\n         number is 1.  The string is invalid otherwise.  */\n      if (valid_suffixes && **p && strchr (valid_suffixes, **p))\n        tmp = 1;\n      else\n        return LONGINT_INVALID;\n    }\n  else if (errno != 0)\n    {\n      if (errno != ERANGE)\n        return LONGINT_INVALID;\n      err = LONGINT_OVERFLOW;\n    }\n\n  /* Let valid_suffixes == NULL mean \"allow any suffix\".  */\n  /* FIXME: update all callers except the ones that allow suffixes\n     after the number, changing last parameter NULL to \"\".  */\n  if (!valid_suffixes)\n    {\n      *val = tmp;\n      return err;\n    }\n\n  if (**p != '\\0')\n    {\n      int base = 1024;\n      int suffixes = 1;\n      strtol_error overflow;\n\n      if (!strchr (valid_suffixes, **p))\n        {\n          *val = tmp;\n          return err | LONGINT_INVALID_SUFFIX_CHAR;\n        }\n\n      switch (**p)\n        {\n        case 'E': case 'G': case 'g': case 'k': case 'K': case 'M': case 'm':\n        case 'P': case 'T': case 't': case 'Y': case 'Z':\n\n          /* The \"valid suffix\" '0' is a special flag meaning that\n             an optional second suffix is allowed, which can change\n             the base.  A suffix \"B\" (e.g. \"100MB\") stands for a power\n             of 1000, whereas a suffix \"iB\" (e.g. \"100MiB\") stands for\n             a power of 1024.  If no suffix (e.g. \"100M\"), assume\n             power-of-1024.  */\n\n          if (strchr (valid_suffixes, '0'))\n            switch (p[0][1])\n              {\n              case 'i':\n                if (p[0][2] == 'B')\n                  suffixes += 2;\n                break;\n\n              case 'B':\n              case 'D': /* 'D' is obsolescent */\n                base = 1000;\n                suffixes++;\n                break;\n              }\n        }\n\n      switch (**p)\n        {\n        case 'b':\n          overflow = bkm_scale (&tmp, 512);\n          break;\n\n        case 'B':\n          /* This obsolescent first suffix is distinct from the 'B'\n             second suffix above.  E.g., 'tar -L 1000B' means change\n             the tape after writing 1000 KiB of data.  */\n          overflow = bkm_scale (&tmp, 1024);\n          break;\n\n        case 'c':\n          overflow = LONGINT_OK;\n          break;\n\n        case 'E': /* exa or exbi */\n          overflow = bkm_scale_by_power (&tmp, base, 6);\n          break;\n\n        case 'G': /* giga or gibi */\n        case 'g': /* 'g' is undocumented; for compatibility only */\n          overflow = bkm_scale_by_power (&tmp, base, 3);\n          break;\n\n        case 'k': /* kilo */\n        case 'K': /* kibi */\n          overflow = bkm_scale_by_power (&tmp, base, 1);\n          break;\n\n        case 'M': /* mega or mebi */\n        case 'm': /* 'm' is undocumented; for compatibility only */\n          overflow = bkm_scale_by_power (&tmp, base, 2);\n          break;\n\n        case 'P': /* peta or pebi */\n          overflow = bkm_scale_by_power (&tmp, base, 5);\n          break;\n\n        case 'T': /* tera or tebi */\n        case 't': /* 't' is undocumented; for compatibility only */\n          overflow = bkm_scale_by_power (&tmp, base, 4);\n          break;\n\n        case 'w':\n          overflow = bkm_scale (&tmp, 2);\n          break;\n\n        case 'Y': /* yotta or 2**80 */\n          overflow = bkm_scale_by_power (&tmp, base, 8);\n          break;\n\n        case 'Z': /* zetta or 2**70 */\n          overflow = bkm_scale_by_power (&tmp, base, 7);\n          break;\n\n        default:\n          *val = tmp;\n          return err | LONGINT_INVALID_SUFFIX_CHAR;\n        }\n\n      err |= overflow;\n      *p += suffixes;\n      if (**p)\n        err |= LONGINT_INVALID_SUFFIX_CHAR;\n    }\n\n  *val = tmp;\n  return err;\n}",
      "lines": 163,
      "depth": 17,
      "decorators": [
        "strtol_error"
      ]
    }
  },
  "grep/grep-3.1/lib/xstrtol.h": {},
  "grep/grep-3.1/lib/xstrtoul.c": {},
  "grep/grep-3.1/lib/_Noreturn.h": {},
  "grep/grep-3.1/lib/glthread/lock.c": {
    "glthread_rwlock_init_for_glibc": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        60,
        1
      ],
      "content": "int\nglthread_rwlock_init_for_glibc (pthread_rwlock_t *lock)\n{\n  pthread_rwlockattr_t attributes;\n  int err;\n\n  err = pthread_rwlockattr_init (&attributes);\n  if (err != 0)\n    return err;\n  /* Note: PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP is the only value that\n     causes the writer to be preferred. PTHREAD_RWLOCK_PREFER_WRITER_NP does not\n     do this; see\n     http://man7.org/linux/man-pages/man3/pthread_rwlockattr_setkind_np.3.html */\n  err = pthread_rwlockattr_setkind_np (&attributes,\n                                       PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);\n  if (err == 0)\n    err = pthread_rwlock_init(lock, &attributes);\n  /* pthread_rwlockattr_destroy always returns 0.  It cannot influence the\n     return value.  */\n  pthread_rwlockattr_destroy (&attributes);\n  return err;\n}",
      "lines": 22,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "glthread_rwlock_init_multithreaded": [
      {
        "start_point": [
          65,
          0
        ],
        "end_point": [
          75,
          1
        ],
        "content": "int\nglthread_rwlock_init_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_rwlock_init (&lock->rwlock, NULL);\n  if (err != 0)\n    return err;\n  lock->initialized = 1;\n  return 0;\n}",
        "lines": 11,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          155,
          0
        ],
        "end_point": [
          172,
          1
        ],
        "content": "int\nglthread_rwlock_init_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_init (&lock->lock, NULL);\n  if (err != 0)\n    return err;\n  err = pthread_cond_init (&lock->waiting_readers, NULL);\n  if (err != 0)\n    return err;\n  err = pthread_cond_init (&lock->waiting_writers, NULL);\n  if (err != 0)\n    return err;\n  lock->waiting_writers_count = 0;\n  lock->runcount = 0;\n  return 0;\n}",
        "lines": 18,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          512,
          0
        ],
        "end_point": [
          525,
          1
        ],
        "content": "int\nglthread_rwlock_init_multithreaded (gl_rwlock_t *lock)\n{\n  if (!pth_mutex_init (&lock->lock))\n    return errno;\n  if (!pth_cond_init (&lock->waiting_readers))\n    return errno;\n  if (!pth_cond_init (&lock->waiting_writers))\n    return errno;\n  lock->waiting_writers_count = 0;\n  lock->runcount = 0;\n  lock->initialized = 1;\n  return 0;\n}",
        "lines": 14,
        "depth": 10,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_rwlock_rdlock_multithreaded": [
      {
        "start_point": [
          77,
          0
        ],
        "end_point": [
          101,
          1
        ],
        "content": "int\nglthread_rwlock_rdlock_multithreaded (gl_rwlock_t *lock)\n{\n  if (!lock->initialized)\n    {\n      int err;\n\n      err = pthread_mutex_lock (&lock->guard);\n      if (err != 0)\n        return err;\n      if (!lock->initialized)\n        {\n          err = glthread_rwlock_init_multithreaded (lock);\n          if (err != 0)\n            {\n              pthread_mutex_unlock (&lock->guard);\n              return err;\n            }\n        }\n      err = pthread_mutex_unlock (&lock->guard);\n      if (err != 0)\n        return err;\n    }\n  return pthread_rwlock_rdlock (&lock->rwlock);\n}",
        "lines": 25,
        "depth": 14,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          174,
          0
        ],
        "end_point": [
          199,
          1
        ],
        "content": "int\nglthread_rwlock_rdlock_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_lock (&lock->lock);\n  if (err != 0)\n    return err;\n  /* Test whether only readers are currently running, and whether the runcount\n     field will not overflow, and whether no writer is waiting.  The latter\n     condition is because POSIX recommends that \"write locks shall take\n     precedence over read locks\", to avoid \"writer starvation\".  */\n  while (!(lock->runcount + 1 > 0 && lock->waiting_writers_count == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_readers.  */\n      err = pthread_cond_wait (&lock->waiting_readers, &lock->lock);\n      if (err != 0)\n        {\n          pthread_mutex_unlock (&lock->lock);\n          return err;\n        }\n    }\n  lock->runcount++;\n  return pthread_mutex_unlock (&lock->lock);\n}",
        "lines": 26,
        "depth": 12,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          527,
          0
        ],
        "end_point": [
          551,
          1
        ],
        "content": "int\nglthread_rwlock_rdlock_multithreaded (gl_rwlock_t *lock)\n{\n  if (!lock->initialized)\n    glthread_rwlock_init_multithreaded (lock);\n  if (!pth_mutex_acquire (&lock->lock, 0, NULL))\n    return errno;\n  /* Test whether only readers are currently running, and whether the runcount\n     field will not overflow, and whether no writer is waiting.  The latter\n     condition is because POSIX recommends that \"write locks shall take\n     precedence over read locks\", to avoid \"writer starvation\".  */\n  while (!(lock->runcount + 1 > 0 && lock->waiting_writers_count == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_readers.  */\n      if (!pth_cond_await (&lock->waiting_readers, &lock->lock, NULL))\n        {\n          int err = errno;\n          pth_mutex_release (&lock->lock);\n          return err;\n        }\n    }\n  lock->runcount++;\n  return (!pth_mutex_release (&lock->lock) ? errno : 0);\n}",
        "lines": 25,
        "depth": 12,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_rwlock_wrlock_multithreaded": [
      {
        "start_point": [
          103,
          0
        ],
        "end_point": [
          127,
          1
        ],
        "content": "int\nglthread_rwlock_wrlock_multithreaded (gl_rwlock_t *lock)\n{\n  if (!lock->initialized)\n    {\n      int err;\n\n      err = pthread_mutex_lock (&lock->guard);\n      if (err != 0)\n        return err;\n      if (!lock->initialized)\n        {\n          err = glthread_rwlock_init_multithreaded (lock);\n          if (err != 0)\n            {\n              pthread_mutex_unlock (&lock->guard);\n              return err;\n            }\n        }\n      err = pthread_mutex_unlock (&lock->guard);\n      if (err != 0)\n        return err;\n    }\n  return pthread_rwlock_wrlock (&lock->rwlock);\n}",
        "lines": 25,
        "depth": 14,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          201,
          0
        ],
        "end_point": [
          226,
          1
        ],
        "content": "int\nglthread_rwlock_wrlock_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_lock (&lock->lock);\n  if (err != 0)\n    return err;\n  /* Test whether no readers or writers are currently running.  */\n  while (!(lock->runcount == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_writers.  */\n      lock->waiting_writers_count++;\n      err = pthread_cond_wait (&lock->waiting_writers, &lock->lock);\n      if (err != 0)\n        {\n          lock->waiting_writers_count--;\n          pthread_mutex_unlock (&lock->lock);\n          return err;\n        }\n      lock->waiting_writers_count--;\n    }\n  lock->runcount--; /* runcount becomes -1 */\n  return pthread_mutex_unlock (&lock->lock);\n}",
        "lines": 26,
        "depth": 12,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          553,
          0
        ],
        "end_point": [
          577,
          1
        ],
        "content": "int\nglthread_rwlock_wrlock_multithreaded (gl_rwlock_t *lock)\n{\n  if (!lock->initialized)\n    glthread_rwlock_init_multithreaded (lock);\n  if (!pth_mutex_acquire (&lock->lock, 0, NULL))\n    return errno;\n  /* Test whether no readers or writers are currently running.  */\n  while (!(lock->runcount == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_writers.  */\n      lock->waiting_writers_count++;\n      if (!pth_cond_await (&lock->waiting_writers, &lock->lock, NULL))\n        {\n          int err = errno;\n          lock->waiting_writers_count--;\n          pth_mutex_release (&lock->lock);\n          return err;\n        }\n      lock->waiting_writers_count--;\n    }\n  lock->runcount--; /* runcount becomes -1 */\n  return (!pth_mutex_release (&lock->lock) ? errno : 0);\n}",
        "lines": 25,
        "depth": 12,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_rwlock_unlock_multithreaded": [
      {
        "start_point": [
          129,
          0
        ],
        "end_point": [
          135,
          1
        ],
        "content": "int\nglthread_rwlock_unlock_multithreaded (gl_rwlock_t *lock)\n{\n  if (!lock->initialized)\n    return EINVAL;\n  return pthread_rwlock_unlock (&lock->rwlock);\n}",
        "lines": 7,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          228,
          0
        ],
        "end_point": [
          282,
          1
        ],
        "content": "int\nglthread_rwlock_unlock_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_lock (&lock->lock);\n  if (err != 0)\n    return err;\n  if (lock->runcount < 0)\n    {\n      /* Drop a writer lock.  */\n      if (!(lock->runcount == -1))\n        {\n          pthread_mutex_unlock (&lock->lock);\n          return EINVAL;\n        }\n      lock->runcount = 0;\n    }\n  else\n    {\n      /* Drop a reader lock.  */\n      if (!(lock->runcount > 0))\n        {\n          pthread_mutex_unlock (&lock->lock);\n          return EINVAL;\n        }\n      lock->runcount--;\n    }\n  if (lock->runcount == 0)\n    {\n      /* POSIX recommends that \"write locks shall take precedence over read\n         locks\", to avoid \"writer starvation\".  */\n      if (lock->waiting_writers_count > 0)\n        {\n          /* Wake up one of the waiting writers.  */\n          err = pthread_cond_signal (&lock->waiting_writers);\n          if (err != 0)\n            {\n              pthread_mutex_unlock (&lock->lock);\n              return err;\n            }\n        }\n      else\n        {\n          /* Wake up all waiting readers.  */\n          err = pthread_cond_broadcast (&lock->waiting_readers);\n          if (err != 0)\n            {\n              pthread_mutex_unlock (&lock->lock);\n              return err;\n            }\n        }\n    }\n  return pthread_mutex_unlock (&lock->lock);\n}",
        "lines": 55,
        "depth": 14,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          579,
          0
        ],
        "end_point": [
          634,
          1
        ],
        "content": "int\nglthread_rwlock_unlock_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  if (!lock->initialized)\n    return EINVAL;\n  if (!pth_mutex_acquire (&lock->lock, 0, NULL))\n    return errno;\n  if (lock->runcount < 0)\n    {\n      /* Drop a writer lock.  */\n      if (!(lock->runcount == -1))\n        {\n          pth_mutex_release (&lock->lock);\n          return EINVAL;\n        }\n      lock->runcount = 0;\n    }\n  else\n    {\n      /* Drop a reader lock.  */\n      if (!(lock->runcount > 0))\n        {\n          pth_mutex_release (&lock->lock);\n          return EINVAL;\n        }\n      lock->runcount--;\n    }\n  if (lock->runcount == 0)\n    {\n      /* POSIX recommends that \"write locks shall take precedence over read\n         locks\", to avoid \"writer starvation\".  */\n      if (lock->waiting_writers_count > 0)\n        {\n          /* Wake up one of the waiting writers.  */\n          if (!pth_cond_notify (&lock->waiting_writers, FALSE))\n            {\n              int err = errno;\n              pth_mutex_release (&lock->lock);\n              return err;\n            }\n        }\n      else\n        {\n          /* Wake up all waiting readers.  */\n          if (!pth_cond_notify (&lock->waiting_readers, TRUE))\n            {\n              int err = errno;\n              pth_mutex_release (&lock->lock);\n              return err;\n            }\n        }\n    }\n  return (!pth_mutex_release (&lock->lock) ? errno : 0);\n}",
        "lines": 56,
        "depth": 14,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_rwlock_destroy_multithreaded": [
      {
        "start_point": [
          137,
          0
        ],
        "end_point": [
          149,
          1
        ],
        "content": "int\nglthread_rwlock_destroy_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  if (!lock->initialized)\n    return EINVAL;\n  err = pthread_rwlock_destroy (&lock->rwlock);\n  if (err != 0)\n    return err;\n  lock->initialized = 0;\n  return 0;\n}",
        "lines": 13,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          284,
          0
        ],
        "end_point": [
          299,
          1
        ],
        "content": "int\nglthread_rwlock_destroy_multithreaded (gl_rwlock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_destroy (&lock->lock);\n  if (err != 0)\n    return err;\n  err = pthread_cond_destroy (&lock->waiting_readers);\n  if (err != 0)\n    return err;\n  err = pthread_cond_destroy (&lock->waiting_writers);\n  if (err != 0)\n    return err;\n  return 0;\n}",
        "lines": 16,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          636,
          0
        ],
        "end_point": [
          641,
          1
        ],
        "content": "int\nglthread_rwlock_destroy_multithreaded (gl_rwlock_t *lock)\n{\n  lock->initialized = 0;\n  return 0;\n}",
        "lines": 6,
        "depth": 6,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_recursive_lock_init_multithreaded": [
      {
        "start_point": [
          309,
          0
        ],
        "end_point": [
          334,
          1
        ],
        "content": "int\nglthread_recursive_lock_init_multithreaded (gl_recursive_lock_t *lock)\n{\n  pthread_mutexattr_t attributes;\n  int err;\n\n  err = pthread_mutexattr_init (&attributes);\n  if (err != 0)\n    return err;\n  err = pthread_mutexattr_settype (&attributes, PTHREAD_MUTEX_RECURSIVE);\n  if (err != 0)\n    {\n      pthread_mutexattr_destroy (&attributes);\n      return err;\n    }\n  err = pthread_mutex_init (lock, &attributes);\n  if (err != 0)\n    {\n      pthread_mutexattr_destroy (&attributes);\n      return err;\n    }\n  err = pthread_mutexattr_destroy (&attributes);\n  if (err != 0)\n    return err;\n  return 0;\n}",
        "lines": 26,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          338,
          0
        ],
        "end_point": [
          364,
          1
        ],
        "content": "int\nglthread_recursive_lock_init_multithreaded (gl_recursive_lock_t *lock)\n{\n  pthread_mutexattr_t attributes;\n  int err;\n\n  err = pthread_mutexattr_init (&attributes);\n  if (err != 0)\n    return err;\n  err = pthread_mutexattr_settype (&attributes, PTHREAD_MUTEX_RECURSIVE);\n  if (err != 0)\n    {\n      pthread_mutexattr_destroy (&attributes);\n      return err;\n    }\n  err = pthread_mutex_init (&lock->recmutex, &attributes);\n  if (err != 0)\n    {\n      pthread_mutexattr_destroy (&attributes);\n      return err;\n    }\n  err = pthread_mutexattr_destroy (&attributes);\n  if (err != 0)\n    return err;\n  lock->initialized = 1;\n  return 0;\n}",
        "lines": 27,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          418,
          0
        ],
        "end_point": [
          429,
          1
        ],
        "content": "int\nglthread_recursive_lock_init_multithreaded (gl_recursive_lock_t *lock)\n{\n  int err;\n\n  err = pthread_mutex_init (&lock->mutex, NULL);\n  if (err != 0)\n    return err;\n  lock->owner = (pthread_t) 0;\n  lock->depth = 0;\n  return 0;\n}",
        "lines": 12,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          692,
          0
        ],
        "end_point": [
          703,
          1
        ],
        "content": "int\nglthread_recursive_lock_init_multithreaded (gl_recursive_lock_t *lock)\n{\n  int err;\n\n  err = mutex_init (&lock->mutex, USYNC_THREAD, NULL);\n  if (err != 0)\n    return err;\n  lock->owner = (thread_t) 0;\n  lock->depth = 0;\n  return 0;\n}",
        "lines": 12,
        "depth": 9,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_recursive_lock_lock_multithreaded": [
      {
        "start_point": [
          366,
          0
        ],
        "end_point": [
          390,
          1
        ],
        "content": "int\nglthread_recursive_lock_lock_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (!lock->initialized)\n    {\n      int err;\n\n      err = pthread_mutex_lock (&lock->guard);\n      if (err != 0)\n        return err;\n      if (!lock->initialized)\n        {\n          err = glthread_recursive_lock_init_multithreaded (lock);\n          if (err != 0)\n            {\n              pthread_mutex_unlock (&lock->guard);\n              return err;\n            }\n        }\n      err = pthread_mutex_unlock (&lock->guard);\n      if (err != 0)\n        return err;\n    }\n  return pthread_mutex_lock (&lock->recmutex);\n}",
        "lines": 25,
        "depth": 14,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          431,
          0
        ],
        "end_point": [
          450,
          1
        ],
        "content": "int\nglthread_recursive_lock_lock_multithreaded (gl_recursive_lock_t *lock)\n{\n  pthread_t self = pthread_self ();\n  if (lock->owner != self)\n    {\n      int err;\n\n      err = pthread_mutex_lock (&lock->mutex);\n      if (err != 0)\n        return err;\n      lock->owner = self;\n    }\n  if (++(lock->depth) == 0) /* wraparound? */\n    {\n      lock->depth--;\n      return EAGAIN;\n    }\n  return 0;\n}",
        "lines": 20,
        "depth": 11,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          705,
          0
        ],
        "end_point": [
          724,
          1
        ],
        "content": "int\nglthread_recursive_lock_lock_multithreaded (gl_recursive_lock_t *lock)\n{\n  thread_t self = thr_self ();\n  if (lock->owner != self)\n    {\n      int err;\n\n      err = mutex_lock (&lock->mutex);\n      if (err != 0)\n        return err;\n      lock->owner = self;\n    }\n  if (++(lock->depth) == 0) /* wraparound? */\n    {\n      lock->depth--;\n      return EAGAIN;\n    }\n  return 0;\n}",
        "lines": 20,
        "depth": 11,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_recursive_lock_unlock_multithreaded": [
      {
        "start_point": [
          392,
          0
        ],
        "end_point": [
          398,
          1
        ],
        "content": "int\nglthread_recursive_lock_unlock_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (!lock->initialized)\n    return EINVAL;\n  return pthread_mutex_unlock (&lock->recmutex);\n}",
        "lines": 7,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          452,
          0
        ],
        "end_point": [
          466,
          1
        ],
        "content": "int\nglthread_recursive_lock_unlock_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != pthread_self ())\n    return EPERM;\n  if (lock->depth == 0)\n    return EINVAL;\n  if (--(lock->depth) == 0)\n    {\n      lock->owner = (pthread_t) 0;\n      return pthread_mutex_unlock (&lock->mutex);\n    }\n  else\n    return 0;\n}",
        "lines": 15,
        "depth": 10,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          726,
          0
        ],
        "end_point": [
          740,
          1
        ],
        "content": "int\nglthread_recursive_lock_unlock_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != thr_self ())\n    return EPERM;\n  if (lock->depth == 0)\n    return EINVAL;\n  if (--(lock->depth) == 0)\n    {\n      lock->owner = (thread_t) 0;\n      return mutex_unlock (&lock->mutex);\n    }\n  else\n    return 0;\n}",
        "lines": 15,
        "depth": 10,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_recursive_lock_destroy_multithreaded": [
      {
        "start_point": [
          400,
          0
        ],
        "end_point": [
          412,
          1
        ],
        "content": "int\nglthread_recursive_lock_destroy_multithreaded (gl_recursive_lock_t *lock)\n{\n  int err;\n\n  if (!lock->initialized)\n    return EINVAL;\n  err = pthread_mutex_destroy (&lock->recmutex);\n  if (err != 0)\n    return err;\n  lock->initialized = 0;\n  return 0;\n}",
        "lines": 13,
        "depth": 9,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          468,
          0
        ],
        "end_point": [
          474,
          1
        ],
        "content": "int\nglthread_recursive_lock_destroy_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != (pthread_t) 0)\n    return EBUSY;\n  return pthread_mutex_destroy (&lock->mutex);\n}",
        "lines": 7,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          742,
          0
        ],
        "end_point": [
          748,
          1
        ],
        "content": "int\nglthread_recursive_lock_destroy_multithreaded (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != (thread_t) 0)\n    return EBUSY;\n  return mutex_destroy (&lock->mutex);\n}",
        "lines": 7,
        "depth": 8,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_once_singlethreaded": [
      {
        "start_point": [
          482,
          0
        ],
        "end_point": [
          496,
          1
        ],
        "content": "int\nglthread_once_singlethreaded (pthread_once_t *once_control)\n{\n  /* We don't know whether pthread_once_t is an integer type, a floating-point\n     type, a pointer type, or a structure type.  */\n  char *firstbyte = (char *)once_control;\n  if (*firstbyte == *(const char *)&fresh_once)\n    {\n      /* First time use of once_control.  Invert the first byte.  */\n      *firstbyte = ~ *(const char *)&fresh_once;\n      return 1;\n    }\n  else\n    return 0;\n}",
        "lines": 15,
        "depth": 12,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          664,
          0
        ],
        "end_point": [
          676,
          1
        ],
        "content": "int\nglthread_once_singlethreaded (pth_once_t *once_control)\n{\n  /* We know that pth_once_t is an integer type.  */\n  if (*once_control == PTH_ONCE_INIT)\n    {\n      /* First time use of once_control.  Invert the marker.  */\n      *once_control = ~ PTH_ONCE_INIT;\n      return 1;\n    }\n  else\n    return 0;\n}",
        "lines": 13,
        "depth": 8,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          775,
          0
        ],
        "end_point": [
          787,
          1
        ],
        "content": "int\nglthread_once_singlethreaded (gl_once_t *once_control)\n{\n  /* We know that gl_once_t contains an integer type.  */\n  if (!once_control->inited)\n    {\n      /* First time use of once_control.  Invert the marker.  */\n      once_control->inited = ~ 0;\n      return 1;\n    }\n  else\n    return 0;\n}",
        "lines": 13,
        "depth": 8,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_once_call": {
      "start_point": [
        649,
        0
      ],
      "end_point": [
        655,
        1
      ],
      "content": "static void\nglthread_once_call (void *arg)\n{\n  void (**gl_once_temp_addr) (void) = (void (**) (void)) arg;\n  void (*initfunction) (void) = *gl_once_temp_addr;\n  initfunction ();\n}",
      "lines": 7,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "glthread_once_multithreaded": [
      {
        "start_point": [
          657,
          0
        ],
        "end_point": [
          662,
          1
        ],
        "content": "int\nglthread_once_multithreaded (pth_once_t *once_control, void (*initfunction) (void))\n{\n  void (*temp) (void) = initfunction;\n  return (!pth_once (once_control, glthread_once_call, &temp) ? errno : 0);\n}",
        "lines": 6,
        "depth": 10,
        "decorators": [
          "int"
        ]
      },
      {
        "start_point": [
          752,
          0
        ],
        "end_point": [
          773,
          1
        ],
        "content": "int\nglthread_once_multithreaded (gl_once_t *once_control, void (*initfunction) (void))\n{\n  if (!once_control->inited)\n    {\n      int err;\n\n      /* Use the mutex to guarantee that if another thread is already calling\n         the initfunction, this thread waits until it's finished.  */\n      err = mutex_lock (&once_control->mutex);\n      if (err != 0)\n        return err;\n      if (!once_control->inited)\n        {\n          once_control->inited = 1;\n          initfunction ();\n        }\n      return mutex_unlock (&once_control->mutex);\n    }\n  else\n    return 0;\n}",
        "lines": 22,
        "depth": 11,
        "decorators": [
          "int"
        ]
      }
    ],
    "glthread_lock_init_func": {
      "start_point": [
        797,
        0
      ],
      "end_point": [
        802,
        1
      ],
      "content": "void\nglthread_lock_init_func (gl_lock_t *lock)\n{\n  InitializeCriticalSection (&lock->lock);\n  lock->guard.done = 1;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "glthread_lock_lock_func": {
      "start_point": [
        804,
        0
      ],
      "end_point": [
        820,
        1
      ],
      "content": "int\nglthread_lock_lock_func (gl_lock_t *lock)\n{\n  if (!lock->guard.done)\n    {\n      if (InterlockedIncrement (&lock->guard.started) == 0)\n        /* This thread is the first one to need this lock.  Initialize it.  */\n        glthread_lock_init (lock);\n      else\n        /* Yield the CPU while waiting for another thread to finish\n           initializing this lock.  */\n        while (!lock->guard.done)\n          Sleep (0);\n    }\n  EnterCriticalSection (&lock->lock);\n  return 0;\n}",
      "lines": 17,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "glthread_lock_unlock_func": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        829,
        1
      ],
      "content": "int\nglthread_lock_unlock_func (gl_lock_t *lock)\n{\n  if (!lock->guard.done)\n    return EINVAL;\n  LeaveCriticalSection (&lock->lock);\n  return 0;\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "glthread_lock_destroy_func": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        839,
        1
      ],
      "content": "int\nglthread_lock_destroy_func (gl_lock_t *lock)\n{\n  if (!lock->guard.done)\n    return EINVAL;\n  DeleteCriticalSection (&lock->lock);\n  lock->guard.done = 0;\n  return 0;\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "gl_waitqueue_init": {
      "start_point": [
        846,
        0
      ],
      "end_point": [
        853,
        1
      ],
      "content": "static void\ngl_waitqueue_init (gl_waitqueue_t *wq)\n{\n  wq->array = NULL;\n  wq->count = 0;\n  wq->alloc = 0;\n  wq->offset = 0;\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "gl_waitqueue_add": {
      "start_point": [
        857,
        0
      ],
      "end_point": [
        904,
        1
      ],
      "content": "static HANDLE\ngl_waitqueue_add (gl_waitqueue_t *wq)\n{\n  HANDLE event;\n  unsigned int index;\n\n  if (wq->count == wq->alloc)\n    {\n      unsigned int new_alloc = 2 * wq->alloc + 1;\n      HANDLE *new_array =\n        (HANDLE *) realloc (wq->array, new_alloc * sizeof (HANDLE));\n      if (new_array == NULL)\n        /* No more memory.  */\n        return INVALID_HANDLE_VALUE;\n      /* Now is a good opportunity to rotate the array so that its contents\n         starts at offset 0.  */\n      if (wq->offset > 0)\n        {\n          unsigned int old_count = wq->count;\n          unsigned int old_alloc = wq->alloc;\n          unsigned int old_offset = wq->offset;\n          unsigned int i;\n          if (old_offset + old_count > old_alloc)\n            {\n              unsigned int limit = old_offset + old_count - old_alloc;\n              for (i = 0; i < limit; i++)\n                new_array[old_alloc + i] = new_array[i];\n            }\n          for (i = 0; i < old_count; i++)\n            new_array[i] = new_array[old_offset + i];\n          wq->offset = 0;\n        }\n      wq->array = new_array;\n      wq->alloc = new_alloc;\n    }\n  /* Whether the created event is a manual-reset one or an auto-reset one,\n     does not matter, since we will wait on it only once.  */\n  event = CreateEvent (NULL, TRUE, FALSE, NULL);\n  if (event == INVALID_HANDLE_VALUE)\n    /* No way to allocate an event.  */\n    return INVALID_HANDLE_VALUE;\n  index = wq->offset + wq->count;\n  if (index >= wq->alloc)\n    index -= wq->alloc;\n  wq->array[index] = event;\n  wq->count++;\n  return event;\n}",
      "lines": 48,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "HANDLE"
      ]
    },
    "gl_waitqueue_notify_first": {
      "start_point": [
        907,
        0
      ],
      "end_point": [
        915,
        1
      ],
      "content": "static void\ngl_waitqueue_notify_first (gl_waitqueue_t *wq)\n{\n  SetEvent (wq->array[wq->offset + 0]);\n  wq->offset++;\n  wq->count--;\n  if (wq->count == 0 || wq->offset == wq->alloc)\n    wq->offset = 0;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "gl_waitqueue_notify_all": {
      "start_point": [
        918,
        0
      ],
      "end_point": [
        932,
        1
      ],
      "content": "static void\ngl_waitqueue_notify_all (gl_waitqueue_t *wq)\n{\n  unsigned int i;\n\n  for (i = 0; i < wq->count; i++)\n    {\n      unsigned int index = wq->offset + i;\n      if (index >= wq->alloc)\n        index -= wq->alloc;\n      SetEvent (wq->array[index]);\n    }\n  wq->count = 0;\n  wq->offset = 0;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "glthread_rwlock_init_func": {
      "start_point": [
        934,
        0
      ],
      "end_point": [
        942,
        1
      ],
      "content": "void\nglthread_rwlock_init_func (gl_rwlock_t *lock)\n{\n  InitializeCriticalSection (&lock->lock);\n  gl_waitqueue_init (&lock->waiting_readers);\n  gl_waitqueue_init (&lock->waiting_writers);\n  lock->runcount = 0;\n  lock->guard.done = 1;\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "glthread_rwlock_rdlock_func": {
      "start_point": [
        944,
        0
      ],
      "end_point": [
        998,
        1
      ],
      "content": "int\nglthread_rwlock_rdlock_func (gl_rwlock_t *lock)\n{\n  if (!lock->guard.done)\n    {\n      if (InterlockedIncrement (&lock->guard.started) == 0)\n        /* This thread is the first one to need this lock.  Initialize it.  */\n        glthread_rwlock_init (lock);\n      else\n        /* Yield the CPU while waiting for another thread to finish\n           initializing this lock.  */\n        while (!lock->guard.done)\n          Sleep (0);\n    }\n  EnterCriticalSection (&lock->lock);\n  /* Test whether only readers are currently running, and whether the runcount\n     field will not overflow, and whether no writer is waiting.  The latter\n     condition is because POSIX recommends that \"write locks shall take\n     precedence over read locks\", to avoid \"writer starvation\".  */\n  if (!(lock->runcount + 1 > 0 && lock->waiting_writers.count == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_readers.  */\n      HANDLE event = gl_waitqueue_add (&lock->waiting_readers);\n      if (event != INVALID_HANDLE_VALUE)\n        {\n          DWORD result;\n          LeaveCriticalSection (&lock->lock);\n          /* Wait until another thread signals this event.  */\n          result = WaitForSingleObject (event, INFINITE);\n          if (result == WAIT_FAILED || result == WAIT_TIMEOUT)\n            abort ();\n          CloseHandle (event);\n          /* The thread which signalled the event already did the bookkeeping:\n             removed us from the waiting_readers, incremented lock->runcount.  */\n          if (!(lock->runcount > 0))\n            abort ();\n          return 0;\n        }\n      else\n        {\n          /* Allocation failure.  Weird.  */\n          do\n            {\n              LeaveCriticalSection (&lock->lock);\n              Sleep (1);\n              EnterCriticalSection (&lock->lock);\n            }\n          while (!(lock->runcount + 1 > 0));\n        }\n    }\n  lock->runcount++;\n  LeaveCriticalSection (&lock->lock);\n  return 0;\n}",
      "lines": 55,
      "depth": 14,
      "decorators": [
        "int"
      ]
    },
    "glthread_rwlock_wrlock_func": {
      "start_point": [
        1000,
        0
      ],
      "end_point": [
        1051,
        1
      ],
      "content": "int\nglthread_rwlock_wrlock_func (gl_rwlock_t *lock)\n{\n  if (!lock->guard.done)\n    {\n      if (InterlockedIncrement (&lock->guard.started) == 0)\n        /* This thread is the first one to need this lock.  Initialize it.  */\n        glthread_rwlock_init (lock);\n      else\n        /* Yield the CPU while waiting for another thread to finish\n           initializing this lock.  */\n        while (!lock->guard.done)\n          Sleep (0);\n    }\n  EnterCriticalSection (&lock->lock);\n  /* Test whether no readers or writers are currently running.  */\n  if (!(lock->runcount == 0))\n    {\n      /* This thread has to wait for a while.  Enqueue it among the\n         waiting_writers.  */\n      HANDLE event = gl_waitqueue_add (&lock->waiting_writers);\n      if (event != INVALID_HANDLE_VALUE)\n        {\n          DWORD result;\n          LeaveCriticalSection (&lock->lock);\n          /* Wait until another thread signals this event.  */\n          result = WaitForSingleObject (event, INFINITE);\n          if (result == WAIT_FAILED || result == WAIT_TIMEOUT)\n            abort ();\n          CloseHandle (event);\n          /* The thread which signalled the event already did the bookkeeping:\n             removed us from the waiting_writers, set lock->runcount = -1.  */\n          if (!(lock->runcount == -1))\n            abort ();\n          return 0;\n        }\n      else\n        {\n          /* Allocation failure.  Weird.  */\n          do\n            {\n              LeaveCriticalSection (&lock->lock);\n              Sleep (1);\n              EnterCriticalSection (&lock->lock);\n            }\n          while (!(lock->runcount == 0));\n        }\n    }\n  lock->runcount--; /* runcount becomes -1 */\n  LeaveCriticalSection (&lock->lock);\n  return 0;\n}",
      "lines": 52,
      "depth": 14,
      "decorators": [
        "int"
      ]
    },
    "glthread_rwlock_unlock_func": {
      "start_point": [
        1053,
        0
      ],
      "end_point": [
        1095,
        1
      ],
      "content": "int\nglthread_rwlock_unlock_func (gl_rwlock_t *lock)\n{\n  if (!lock->guard.done)\n    return EINVAL;\n  EnterCriticalSection (&lock->lock);\n  if (lock->runcount < 0)\n    {\n      /* Drop a writer lock.  */\n      if (!(lock->runcount == -1))\n        abort ();\n      lock->runcount = 0;\n    }\n  else\n    {\n      /* Drop a reader lock.  */\n      if (!(lock->runcount > 0))\n        {\n          LeaveCriticalSection (&lock->lock);\n          return EPERM;\n        }\n      lock->runcount--;\n    }\n  if (lock->runcount == 0)\n    {\n      /* POSIX recommends that \"write locks shall take precedence over read\n         locks\", to avoid \"writer starvation\".  */\n      if (lock->waiting_writers.count > 0)\n        {\n          /* Wake up one of the waiting writers.  */\n          lock->runcount--;\n          gl_waitqueue_notify_first (&lock->waiting_writers);\n        }\n      else\n        {\n          /* Wake up all waiting readers.  */\n          lock->runcount += lock->waiting_readers.count;\n          gl_waitqueue_notify_all (&lock->waiting_readers);\n        }\n    }\n  LeaveCriticalSection (&lock->lock);\n  return 0;\n}",
      "lines": 43,
      "depth": 12,
      "decorators": [
        "int"
      ]
    },
    "glthread_rwlock_destroy_func": {
      "start_point": [
        1097,
        0
      ],
      "end_point": [
        1111,
        1
      ],
      "content": "int\nglthread_rwlock_destroy_func (gl_rwlock_t *lock)\n{\n  if (!lock->guard.done)\n    return EINVAL;\n  if (lock->runcount != 0)\n    return EBUSY;\n  DeleteCriticalSection (&lock->lock);\n  if (lock->waiting_readers.array != NULL)\n    free (lock->waiting_readers.array);\n  if (lock->waiting_writers.array != NULL)\n    free (lock->waiting_writers.array);\n  lock->guard.done = 0;\n  return 0;\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "int"
      ]
    },
    "glthread_recursive_lock_init_func": {
      "start_point": [
        1115,
        0
      ],
      "end_point": [
        1122,
        1
      ],
      "content": "void\nglthread_recursive_lock_init_func (gl_recursive_lock_t *lock)\n{\n  lock->owner = 0;\n  lock->depth = 0;\n  InitializeCriticalSection (&lock->lock);\n  lock->guard.done = 1;\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "glthread_recursive_lock_lock_func": {
      "start_point": [
        1124,
        0
      ],
      "end_point": [
        1152,
        1
      ],
      "content": "int\nglthread_recursive_lock_lock_func (gl_recursive_lock_t *lock)\n{\n  if (!lock->guard.done)\n    {\n      if (InterlockedIncrement (&lock->guard.started) == 0)\n        /* This thread is the first one to need this lock.  Initialize it.  */\n        glthread_recursive_lock_init (lock);\n      else\n        /* Yield the CPU while waiting for another thread to finish\n           initializing this lock.  */\n        while (!lock->guard.done)\n          Sleep (0);\n    }\n  {\n    DWORD self = GetCurrentThreadId ();\n    if (lock->owner != self)\n      {\n        EnterCriticalSection (&lock->lock);\n        lock->owner = self;\n      }\n    if (++(lock->depth) == 0) /* wraparound? */\n      {\n        lock->depth--;\n        return EAGAIN;\n      }\n  }\n  return 0;\n}",
      "lines": 29,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "glthread_recursive_lock_unlock_func": {
      "start_point": [
        1154,
        0
      ],
      "end_point": [
        1167,
        1
      ],
      "content": "int\nglthread_recursive_lock_unlock_func (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != GetCurrentThreadId ())\n    return EPERM;\n  if (lock->depth == 0)\n    return EINVAL;\n  if (--(lock->depth) == 0)\n    {\n      lock->owner = 0;\n      LeaveCriticalSection (&lock->lock);\n    }\n  return 0;\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "glthread_recursive_lock_destroy_func": {
      "start_point": [
        1169,
        0
      ],
      "end_point": [
        1177,
        1
      ],
      "content": "int\nglthread_recursive_lock_destroy_func (gl_recursive_lock_t *lock)\n{\n  if (lock->owner != 0)\n    return EBUSY;\n  DeleteCriticalSection (&lock->lock);\n  lock->guard.done = 0;\n  return 0;\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "glthread_once_func": {
      "start_point": [
        1181,
        0
      ],
      "end_point": [
        1216,
        1
      ],
      "content": "void\nglthread_once_func (gl_once_t *once_control, void (*initfunction) (void))\n{\n  if (once_control->inited <= 0)\n    {\n      if (InterlockedIncrement (&once_control->started) == 0)\n        {\n          /* This thread is the first one to come to this once_control.  */\n          InitializeCriticalSection (&once_control->lock);\n          EnterCriticalSection (&once_control->lock);\n          once_control->inited = 0;\n          initfunction ();\n          once_control->inited = 1;\n          LeaveCriticalSection (&once_control->lock);\n        }\n      else\n        {\n          /* Undo last operation.  */\n          InterlockedDecrement (&once_control->started);\n          /* Some other thread has already started the initialization.\n             Yield the CPU while waiting for the other thread to finish\n             initializing and taking the lock.  */\n          while (once_control->inited < 0)\n            Sleep (0);\n          if (once_control->inited <= 0)\n            {\n              /* Take the lock.  This blocks until the other thread has\n                 finished calling the initfunction.  */\n              EnterCriticalSection (&once_control->lock);\n              LeaveCriticalSection (&once_control->lock);\n              if (!(once_control->inited > 0))\n                abort ();\n            }\n        }\n    }\n}",
      "lines": 36,
      "depth": 15,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/lib/glthread/lock.h": {},
  "grep/grep-3.1/lib/glthread/threadlib.c": {
    "dummy_thread_func": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        36,
        1
      ],
      "content": "static void *\ndummy_thread_func (void *arg)\n{\n  return arg;\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "*\ndummy_thread_func (void *arg)",
        "*"
      ]
    },
    "glthread_in_use": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "int\nglthread_in_use (void)\n{\n  static int tested;\n  static int result; /* 1: linked with -lpthread, 0: only with libc */\n\n  if (!tested)\n    {\n      pthread_t thread;\n\n      if (pthread_create (&thread, NULL, dummy_thread_func, NULL) != 0)\n        /* Thread creation failed.  */\n        result = 0;\n      else\n        {\n          /* Thread creation works.  */\n          void *retval;\n          if (pthread_join (thread, &retval) != 0)\n            abort ();\n          result = 1;\n        }\n      tested = 1;\n    }\n  return result;\n}",
      "lines": 25,
      "depth": 13,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/unistr/u8-mbtoucr.c": {
    "u8_mbtoucr": {
      "start_point": [
        22,
        0
      ],
      "end_point": [
        141,
        1
      ],
      "content": "int\nu8_mbtoucr (ucs4_t *puc, const uint8_t *s, size_t n)\n{\n  uint8_t c = *s;\n\n  if (c < 0x80)\n    {\n      *puc = c;\n      return 1;\n    }\n  else if (c >= 0xc2)\n    {\n      if (c < 0xe0)\n        {\n          if (n >= 2)\n            {\n              if ((s[1] ^ 0x80) < 0x40)\n                {\n                  *puc = ((unsigned int) (c & 0x1f) << 6)\n                         | (unsigned int) (s[1] ^ 0x80);\n                  return 2;\n                }\n              /* invalid multibyte character */\n            }\n          else\n            {\n              /* incomplete multibyte character */\n              *puc = 0xfffd;\n              return -2;\n            }\n        }\n      else if (c < 0xf0)\n        {\n          if (n >= 2)\n            {\n              if ((s[1] ^ 0x80) < 0x40\n                  && (c >= 0xe1 || s[1] >= 0xa0)\n                  && (c != 0xed || s[1] < 0xa0))\n                {\n                  if (n >= 3)\n                    {\n                      if ((s[2] ^ 0x80) < 0x40)\n                        {\n                          *puc = ((unsigned int) (c & 0x0f) << 12)\n                                 | ((unsigned int) (s[1] ^ 0x80) << 6)\n                                 | (unsigned int) (s[2] ^ 0x80);\n                          return 3;\n                        }\n                      /* invalid multibyte character */\n                    }\n                  else\n                    {\n                      /* incomplete multibyte character */\n                      *puc = 0xfffd;\n                      return -2;\n                    }\n                }\n              /* invalid multibyte character */\n            }\n          else\n            {\n              /* incomplete multibyte character */\n              *puc = 0xfffd;\n              return -2;\n            }\n        }\n      else if (c < 0xf8)\n        {\n          if (n >= 2)\n            {\n              if ((s[1] ^ 0x80) < 0x40\n                  && (c >= 0xf1 || s[1] >= 0x90)\n                  && (c < 0xf4 || (c == 0xf4 && s[1] < 0x90)))\n                {\n                  if (n >= 3)\n                    {\n                      if ((s[2] ^ 0x80) < 0x40)\n                        {\n                          if (n >= 4)\n                            {\n                              if ((s[3] ^ 0x80) < 0x40)\n                                {\n                                  *puc = ((unsigned int) (c & 0x07) << 18)\n                                         | ((unsigned int) (s[1] ^ 0x80) << 12)\n                                         | ((unsigned int) (s[2] ^ 0x80) << 6)\n                                         | (unsigned int) (s[3] ^ 0x80);\n                                  return 4;\n                                }\n                              /* invalid multibyte character */\n                            }\n                          else\n                            {\n                              /* incomplete multibyte character */\n                              *puc = 0xfffd;\n                              return -2;\n                            }\n                        }\n                      /* invalid multibyte character */\n                    }\n                  else\n                    {\n                      /* incomplete multibyte character */\n                      *puc = 0xfffd;\n                      return -2;\n                    }\n                }\n              /* invalid multibyte character */\n            }\n          else\n            {\n              /* incomplete multibyte character */\n              *puc = 0xfffd;\n              return -2;\n            }\n        }\n    }\n  /* invalid multibyte character */\n  *puc = 0xfffd;\n  return -1;\n}",
      "lines": 120,
      "depth": 33,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/unistr/u8-uctomb-aux.c": {
    "u8_uctomb_aux": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "content": "int\nu8_uctomb_aux (uint8_t *s, ucs4_t uc, int n)\n{\n  int count;\n\n  if (uc < 0x80)\n    /* The case n >= 1 is already handled by the caller.  */\n    return -2;\n  else if (uc < 0x800)\n    count = 2;\n  else if (uc < 0x10000)\n    {\n      if (uc < 0xd800 || uc >= 0xe000)\n        count = 3;\n      else\n        return -1;\n    }\n  else if (uc < 0x110000)\n    count = 4;\n  else\n    return -1;\n\n  if (n < count)\n    return -2;\n\n  switch (count) /* note: code falls through cases! */\n    {\n    case 4: s[3] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0x10000;\n      FALLTHROUGH;\n    case 3: s[2] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0x800;\n      FALLTHROUGH;\n    case 2: s[1] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0xc0;\n  /*case 1:*/ s[0] = uc;\n    }\n  return count;\n}",
      "lines": 36,
      "depth": 11,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/unistr/u8-uctomb.c": {
    "u8_uctomb": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "content": "int\nu8_uctomb (uint8_t *s, ucs4_t uc, int n)\n{\n  if (uc < 0x80)\n    {\n      if (n > 0)\n        {\n          s[0] = uc;\n          return 1;\n        }\n      /* else return -2, below.  */\n    }\n  else\n    {\n      int count;\n\n      if (uc < 0x800)\n        count = 2;\n      else if (uc < 0x10000)\n        {\n          if (uc < 0xd800 || uc >= 0xe000)\n            count = 3;\n          else\n            return -1;\n        }\n      else if (uc < 0x110000)\n        count = 4;\n      else\n        return -1;\n\n      if (n >= count)\n        {\n          switch (count) /* note: code falls through cases! */\n            {\n            case 4: s[3] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0x10000;\n            case 3: s[2] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0x800;\n            case 2: s[1] = 0x80 | (uc & 0x3f); uc = uc >> 6; uc |= 0xc0;\n          /*case 1:*/ s[0] = uc;\n            }\n          return count;\n        }\n    }\n  return -2;\n}",
      "lines": 44,
      "depth": 15,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/uniwidth/cjk.h": {
    "is_cjk_encoding": {
      "start_point": [
        19,
        0
      ],
      "end_point": [
        36,
        1
      ],
      "content": "static int\nis_cjk_encoding (const char *encoding)\n{\n  if (0\n      /* Legacy Japanese encodings */\n      || STREQ_OPT (encoding, \"EUC-JP\", 'E', 'U', 'C', '-', 'J', 'P', 0, 0, 0)\n      /* Legacy Chinese encodings */\n      || STREQ_OPT (encoding, \"GB2312\", 'G', 'B', '2', '3', '1', '2', 0, 0, 0)\n      || STREQ_OPT (encoding, \"GBK\", 'G', 'B', 'K', 0, 0, 0, 0, 0, 0)\n      || STREQ_OPT (encoding, \"EUC-TW\", 'E', 'U', 'C', '-', 'T', 'W', 0, 0, 0)\n      || STREQ_OPT (encoding, \"BIG5\", 'B', 'I', 'G', '5', 0, 0, 0, 0, 0)\n      /* Legacy Korean encodings */\n      || STREQ_OPT (encoding, \"EUC-KR\", 'E', 'U', 'C', '-', 'K', 'R', 0, 0, 0)\n      || STREQ_OPT (encoding, \"CP949\", 'C', 'P', '9', '4', '9', 0, 0, 0, 0)\n      || STREQ_OPT (encoding, \"JOHAB\", 'J', 'O', 'H', 'A', 'B', 0, 0, 0, 0))\n    return 1;\n  return 0;\n}",
      "lines": 18,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "grep/grep-3.1/lib/uniwidth/width.c": {
    "uc_width": {
      "start_point": [
        395,
        0
      ],
      "end_point": [
        449,
        1
      ],
      "content": "int\nuc_width (ucs4_t uc, const char *encoding)\n{\n  /* Test for non-spacing or control character.  */\n  if ((uc >> 9) < 248)\n    {\n      int ind = nonspacing_table_ind[uc >> 9];\n      if (ind >= 0)\n        if ((nonspacing_table_data[64*ind + ((uc >> 3) & 63)] >> (uc & 7)) & 1)\n          {\n            if (uc > 0 && uc < 0xa0)\n              return -1;\n            else\n              return 0;\n          }\n    }\n  else if ((uc >> 9) == (0xe0000 >> 9))\n    {\n      if (uc >= 0xe0100)\n        {\n          if (uc <= 0xe01ef)\n            return 0;\n        }\n      else\n        {\n          if (uc >= 0xe0020 ? uc <= 0xe007f : uc == 0xe0001)\n            return 0;\n        }\n    }\n  /* Test for double-width character.\n   * Generated from \"grep '^[^;]\\{4,5\\};[WF]' EastAsianWidth.txt\"\n   * and            \"grep '^[^;]\\{4,5\\};[^WF]' EastAsianWidth.txt\"\n   */\n  if (uc >= 0x1100\n      && ((uc < 0x1160) /* Hangul Jamo */\n          || (uc >= 0x2329 && uc < 0x232b) /* Angle Brackets */\n          || (uc >= 0x2e80 && uc < 0xa4d0  /* CJK ... Yi */\n              && !(uc == 0x303f) && !(uc >= 0x4dc0 && uc < 0x4e00))\n          || (uc >= 0xac00 && uc < 0xd7a4) /* Hangul Syllables */\n          || (uc >= 0xf900 && uc < 0xfb00) /* CJK Compatibility Ideographs */\n          || (uc >= 0xfe10 && uc < 0xfe20) /* Presentation Forms for Vertical */\n          || (uc >= 0xfe30 && uc < 0xfe70) /* CJK Compatibility Forms */\n          || (uc >= 0xff00 && uc < 0xff61) /* Fullwidth Forms */\n          || (uc >= 0xffe0 && uc < 0xffe7) /* Fullwidth Signs */\n          || (uc >= 0x20000 && uc <= 0x2ffff) /* Supplementary Ideographic Plane */\n          || (uc >= 0x30000 && uc <= 0x3ffff) /* Tertiary Ideographic Plane */\n     )   )\n    return 2;\n  /* In ancient CJK encodings, Cyrillic and most other characters are\n     double-width as well.  */\n  if (uc >= 0x00A1 && uc < 0xFF61 && uc != 0x20A9\n      && is_cjk_encoding (encoding))\n    return 2;\n  return 1;\n}",
      "lines": 55,
      "depth": 22,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/src/dfasearch.c": {
    "dfaerror": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        53,
        1
      ],
      "content": "void\ndfaerror (char const *mesg)\n{\n  die (EXIT_TROUBLE, 0, \"%s\", mesg);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "dfawarn": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        63,
        1
      ],
      "content": "void\ndfawarn (char const *mesg)\n{\n  if (!getenv (\"POSIXLY_CORRECT\"))\n    dfaerror (mesg);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "kwsmusts": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "static void\nkwsmusts (struct dfa_comp *dc)\n{\n  struct dfamust *dm = dfamust (dc->dfa);\n  if (!dm)\n    return;\n  dc->kwset = kwsinit (false);\n  if (dm->exact)\n    {\n      /* Prepare a substring whose presence implies a match.\n         The kwset matcher will return the index of the matching\n         string that it chooses. */\n      ++dc->kwset_exact_matches;\n      ptrdiff_t old_len = strlen (dm->must);\n      ptrdiff_t new_len = old_len + dm->begline + dm->endline;\n      char *must = xmalloc (new_len);\n      char *mp = must;\n      *mp = eolbyte;\n      mp += dm->begline;\n      dc->begline |= dm->begline;\n      memcpy (mp, dm->must, old_len);\n      if (dm->endline)\n        mp[old_len] = eolbyte;\n      kwsincr (dc->kwset, must, new_len);\n      free (must);\n    }\n  else\n    {\n      /* Otherwise, filtering with this substring should help reduce the\n         search space, but we'll still have to use the regexp matcher.  */\n      kwsincr (dc->kwset, dm->must, strlen (dm->must));\n    }\n  kwsprep (dc->kwset);\n  dfamustfree (dm);\n}",
      "lines": 35,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "GEAcompile": {
      "start_point": [
        105,
        0
      ],
      "end_point": [
        210,
        1
      ],
      "content": "void *\nGEAcompile (char *pattern, size_t size, reg_syntax_t syntax_bits)\n{\n  char *motif;\n  struct dfa_comp *dc = xcalloc (1, sizeof (*dc));\n\n  dc->dfa = dfaalloc ();\n\n  if (match_icase)\n    syntax_bits |= RE_ICASE;\n  re_set_syntax (syntax_bits);\n  int dfaopts = eolbyte ? 0 : DFA_EOL_NUL;\n  dfasyntax (dc->dfa, &localeinfo, syntax_bits, dfaopts);\n\n  /* For GNU regex, pass the patterns separately to detect errors like\n     \"[\\nallo\\n]\\n\", where the patterns are \"[\", \"allo\" and \"]\", and\n     this should be a syntax error.  The same for backref, where the\n     backref should be local to each pattern.  */\n  char const *p = pattern;\n  char const *patlim = pattern + size;\n  bool compilation_failed = false;\n  size_t palloc = 0;\n\n  do\n    {\n      size_t len;\n      char const *sep = memchr (p, '\\n', patlim - p);\n      if (sep)\n        {\n          len = sep - p;\n          sep++;\n        }\n      else\n        len = patlim - p;\n\n      if (palloc <= dc->pcount)\n        dc->patterns = x2nrealloc (dc->patterns, &palloc, sizeof *dc->patterns);\n      struct re_pattern_buffer *pat = &dc->patterns[dc->pcount];\n      pat->buffer = NULL;\n      pat->allocated = 0;\n\n      /* Do not use a fastmap with -i, to work around glibc Bug#20381.  */\n      pat->fastmap = match_icase ? NULL : xmalloc (UCHAR_MAX + 1);\n\n      pat->translate = NULL;\n\n      char const *err = re_compile_pattern (p, len, pat);\n      if (err)\n        {\n          /* With patterns specified only on the command line, emit the bare\n             diagnostic.  Otherwise, include a filename:lineno: prefix.  */\n          size_t lineno;\n          char const *pat_filename = pattern_file_name (dc->pcount + 1,\n                                                        &lineno);\n          if (*pat_filename == '\\0')\n            error (0, 0, \"%s\", err);\n          else\n            error (0, 0, \"%s:%zu: %s\", pat_filename, lineno, err);\n          compilation_failed = true;\n        }\n      dc->pcount++;\n      p = sep;\n    }\n  while (p);\n\n  if (compilation_failed)\n    exit (EXIT_TROUBLE);\n\n  /* In the match_words and match_lines cases, we use a different pattern\n     for the DFA matcher that will quickly throw out cases that won't work.\n     Then if DFA succeeds we do some hairy stuff using the regex matcher\n     to decide whether the match should really count. */\n  if (match_words || match_lines)\n    {\n      static char const line_beg_no_bk[] = \"^(\";\n      static char const line_end_no_bk[] = \")$\";\n      static char const word_beg_no_bk[] = \"(^|[^[:alnum:]_])(\";\n      static char const word_end_no_bk[] = \")([^[:alnum:]_]|$)\";\n      static char const line_beg_bk[] = \"^\\\\(\";\n      static char const line_end_bk[] = \"\\\\)$\";\n      static char const word_beg_bk[] = \"\\\\(^\\\\|[^[:alnum:]_]\\\\)\\\\(\";\n      static char const word_end_bk[] = \"\\\\)\\\\([^[:alnum:]_]\\\\|$\\\\)\";\n      int bk = !(syntax_bits & RE_NO_BK_PARENS);\n      char *n = xmalloc (sizeof word_beg_bk - 1 + size + sizeof word_end_bk);\n\n      strcpy (n, match_lines ? (bk ? line_beg_bk : line_beg_no_bk)\n                             : (bk ? word_beg_bk : word_beg_no_bk));\n      size_t total = strlen (n);\n      memcpy (n + total, pattern, size);\n      total += size;\n      strcpy (n + total, match_lines ? (bk ? line_end_bk : line_end_no_bk)\n                                     : (bk ? word_end_bk : word_end_no_bk));\n      total += strlen (n + total);\n      pattern = motif = n;\n      size = total;\n    }\n  else\n    motif = NULL;\n\n  dfacomp (pattern, size, dc->dfa, 1);\n  kwsmusts (dc);\n\n  free (motif);\n\n  return dc;\n}",
      "lines": 106,
      "depth": 13,
      "decorators": [
        "void",
        "*\nGEAcompile (char *pattern, size_t size, reg_syntax_t syntax_bits)",
        "*"
      ]
    },
    "EGexecute": {
      "start_point": [
        212,
        0
      ],
      "end_point": [
        457,
        1
      ],
      "content": "size_t\nEGexecute (void *vdc, char const *buf, size_t size, size_t *match_size,\n           char const *start_ptr)\n{\n  char const *buflim, *beg, *end, *ptr, *match, *best_match, *mb_start;\n  char eol = eolbyte;\n  regoff_t start;\n  size_t len, best_len;\n  struct kwsmatch kwsm;\n  size_t i;\n  struct dfa_comp *dc = vdc;\n  struct dfa *superset = dfasuperset (dc->dfa);\n  bool dfafast = dfaisfast (dc->dfa);\n\n  mb_start = buf;\n  buflim = buf + size;\n\n  for (beg = end = buf; end < buflim; beg = end)\n    {\n      end = buflim;\n\n      if (!start_ptr)\n        {\n          char const *next_beg, *dfa_beg = beg;\n          size_t count = 0;\n          bool exact_kwset_match = false;\n          bool backref = false;\n\n          /* Try matching with KWset, if it's defined.  */\n          if (dc->kwset)\n            {\n              char const *prev_beg;\n\n              /* Find a possible match using the KWset matcher.  */\n              ptrdiff_t offset = kwsexec (dc->kwset, beg - dc->begline,\n                                          buflim - beg + dc->begline,\n                                          &kwsm, true);\n              if (offset < 0)\n                goto failure;\n              match = beg + offset;\n              prev_beg = beg;\n\n              /* Narrow down to the line containing the possible match.  */\n              beg = memrchr (buf, eol, match - buf);\n              beg = beg ? beg + 1 : buf;\n              dfa_beg = beg;\n\n              /* Determine the end pointer to give the DFA next.  Typically\n                 this is after the first newline after MATCH; but if the KWset\n                 match is not exact, the DFA is fast, and the offset from\n                 PREV_BEG is less than 64 or (MATCH - PREV_BEG), this is the\n                 greater of the latter two values; this temporarily prefers\n                 the DFA to KWset.  */\n              exact_kwset_match = kwsm.index < dc->kwset_exact_matches;\n              end = ((exact_kwset_match || !dfafast\n                      || MAX (16, match - beg) < (match - prev_beg) >> 2)\n                     ? match\n                     : MAX (16, match - beg) < (buflim - prev_beg) >> 2\n                     ? prev_beg + 4 * MAX (16, match - beg)\n                     : buflim);\n              end = memchr (end, eol, buflim - end);\n              end = end ? end + 1 : buflim;\n\n              if (exact_kwset_match)\n                {\n                  if (!localeinfo.multibyte | localeinfo.using_utf8)\n                    goto success;\n                  if (mb_start < beg)\n                    mb_start = beg;\n                  if (mb_goback (&mb_start, match, buflim) == 0)\n                    goto success;\n                  /* The matched line starts in the middle of a multibyte\n                     character.  Perform the DFA search starting from the\n                     beginning of the next character.  */\n                  dfa_beg = mb_start;\n                }\n            }\n\n          /* Try matching with the superset of DFA, if it's defined.  */\n          if (superset && !exact_kwset_match)\n            {\n              /* Keep using the superset while it reports multiline\n                 potential matches; this is more likely to be fast\n                 than falling back to KWset would be.  */\n              next_beg = dfaexec (superset, dfa_beg, (char *) end, 0,\n                                  &count, NULL);\n              if (next_beg == NULL || next_beg == end)\n                continue;\n\n              /* Narrow down to the line we've found.  */\n              if (count != 0)\n                {\n                  beg = memrchr (buf, eol, next_beg - buf);\n                  beg++;\n                  dfa_beg = beg;\n                }\n              end = memchr (next_beg, eol, buflim - next_beg);\n              end = end ? end + 1 : buflim;\n\n              count = 0;\n            }\n\n          /* Try matching with DFA.  */\n          next_beg = dfaexec (dc->dfa, dfa_beg, (char *) end, 0, &count,\n                              &backref);\n\n          /* If there's no match, or if we've matched the sentinel,\n             we're done.  */\n          if (next_beg == NULL || next_beg == end)\n            continue;\n\n          /* Narrow down to the line we've found.  */\n          if (count != 0)\n            {\n              beg = memrchr (buf, eol, next_beg - buf);\n              beg++;\n            }\n          end = memchr (next_beg, eol, buflim - next_beg);\n          end = end ? end + 1 : buflim;\n\n          /* Successful, no backreferences encountered! */\n          if (!backref)\n            goto success;\n          ptr = beg;\n        }\n      else\n        {\n          /* We are looking for the leftmost (then longest) exact match.\n             We will go through the outer loop only once.  */\n          ptr = start_ptr;\n        }\n\n      /* If the \"line\" is longer than the maximum regexp offset,\n         die as if we've run out of memory.  */\n      if (TYPE_MAXIMUM (regoff_t) < end - beg - 1)\n        xalloc_die ();\n\n      /* Run the possible match through Regex.  */\n      best_match = end;\n      best_len = 0;\n      for (i = 0; i < dc->pcount; i++)\n        {\n          dc->patterns[i].not_eol = 0;\n          dc->patterns[i].newline_anchor = eolbyte == '\\n';\n          start = re_search (&dc->patterns[i], beg, end - beg - 1,\n                             ptr - beg, end - ptr - 1, &dc->regs);\n          if (start < -1)\n            xalloc_die ();\n          else if (0 <= start)\n            {\n              len = dc->regs.end[0] - start;\n              match = beg + start;\n              if (match > best_match)\n                continue;\n              if (start_ptr && !match_words)\n                goto assess_pattern_match;\n              if ((!match_lines && !match_words)\n                  || (match_lines && len == end - ptr - 1))\n                {\n                  match = ptr;\n                  len = end - ptr;\n                  goto assess_pattern_match;\n                }\n              /* If -w and not -x, check whether the match aligns with\n                 word boundaries.  Do this iteratively because:\n                 (a) the line may contain more than one occurrence of the\n                 pattern, and\n                 (b) Several alternatives in the pattern might be valid at a\n                 given point, and we may need to consider a shorter one to\n                 find a word boundary.  */\n              if (!match_lines && match_words)\n                while (match <= best_match)\n                  {\n                    regoff_t shorter_len = 0;\n                    if (! wordchar_next (match + len, end - 1)\n                        && ! wordchar_prev (beg, match, end - 1))\n                      goto assess_pattern_match;\n                    if (len > 0)\n                      {\n                        /* Try a shorter length anchored at the same place. */\n                        --len;\n                        dc->patterns[i].not_eol = 1;\n                        shorter_len = re_match (&dc->patterns[i], beg,\n                                                match + len - ptr, match - beg,\n                                                &dc->regs);\n                        if (shorter_len < -1)\n                          xalloc_die ();\n                      }\n                    if (0 < shorter_len)\n                      len = shorter_len;\n                    else\n                      {\n                        /* Try looking further on. */\n                        if (match == end - 1)\n                          break;\n                        match++;\n                        dc->patterns[i].not_eol = 0;\n                        start = re_search (&dc->patterns[i], beg, end - beg - 1,\n                                           match - beg, end - match - 1,\n                                           &dc->regs);\n                        if (start < 0)\n                          {\n                            if (start < -1)\n                              xalloc_die ();\n                            break;\n                          }\n                        len = dc->regs.end[0] - start;\n                        match = beg + start;\n                      }\n                  } /* while (match <= best_match) */\n              continue;\n            assess_pattern_match:\n              if (!start_ptr)\n                {\n                  /* Good enough for a non-exact match.\n                     No need to look at further patterns, if any.  */\n                  goto success;\n                }\n              if (match < best_match || (match == best_match && len > best_len))\n                {\n                  /* Best exact match:  leftmost, then longest.  */\n                  best_match = match;\n                  best_len = len;\n                }\n            } /* if re_search >= 0 */\n        } /* for Regex patterns.  */\n        if (best_match < end)\n          {\n            /* We have found an exact match.  We were just\n               waiting for the best one (leftmost then longest).  */\n            beg = best_match;\n            len = best_len;\n            goto success_in_len;\n          }\n    } /* for (beg = end ..) */\n\n failure:\n  return -1;\n\n success:\n  len = end - beg;\n success_in_len:;\n  size_t off = beg - buf;\n  *match_size = len;\n  return off;\n}",
      "lines": 246,
      "depth": 22,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/src/die.h": {},
  "grep/grep-3.1/src/grep.c": {
    "count_nl_bytes": {
      "start_point": [
        113,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "static size_t _GL_ATTRIBUTE_PURE\ncount_nl_bytes (char const *buf, size_t size)\n{\n  char const *p = buf;\n  char const *end_p = buf + size;\n  size_t n = 0;\n  while ((p = memchr (p, '\\n', end_p - p)))\n    p++, n++;\n  return n;\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "size_t",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "fl_add": {
      "start_point": [
        126,
        0
      ],
      "end_point": [
        136,
        1
      ],
      "content": "static void\nfl_add (char const *buf, size_t size, char const *filename)\n{\n  if (n_fl_pair_slots <= n_pattern_files)\n    fl_pair = x2nrealloc (fl_pair, &n_fl_pair_slots, sizeof *fl_pair);\n\n  fl_pair[n_pattern_files].lineno = n_patterns + 1;\n  fl_pair[n_pattern_files].filename = filename;\n  n_pattern_files++;\n  n_patterns += count_nl_bytes (buf, size);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "pattern_file_name": {
      "start_point": [
        141,
        0
      ],
      "end_point": [
        153,
        1
      ],
      "content": "char const * _GL_ATTRIBUTE_PURE\npattern_file_name (size_t lineno, size_t *new_lineno)\n{\n  size_t i;\n  for (i = 1; i < n_pattern_files; i++)\n    {\n      if (lineno < fl_pair[i].lineno)\n        break;\n    }\n\n  *new_lineno = lineno - fl_pair[i - 1].lineno + 1;\n  return fl_pair[i - 1].filename;\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "char",
        "const",
        "const",
        "* _GL_ATTRIBUTE_PURE\npattern_file_name (size_t lineno, size_t *new_lineno)",
        "*",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "clear_asan_poison": [
      {
        "start_point": [
          161,
          0
        ],
        "end_point": [
          166,
          1
        ],
        "content": "static void\nclear_asan_poison (void)\n{\n  if (poison_buf)\n    __asan_unpoison_memory_region (poison_buf, poison_len);\n}",
        "lines": 6,
        "depth": 7,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          177,
          0
        ],
        "end_point": [
          177,
          40
        ],
        "content": "static void clear_asan_poison (void) { }",
        "lines": 1,
        "depth": 5,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      }
    ],
    "asan_poison": [
      {
        "start_point": [
          168,
          0
        ],
        "end_point": [
          175,
          1
        ],
        "content": "static void\nasan_poison (void const *addr, size_t size)\n{\n  poison_buf = addr;\n  poison_len = size;\n\n  __asan_poison_memory_region (poison_buf, poison_len);\n}",
        "lines": 8,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          178,
          0
        ],
        "end_point": [
          178,
          68
        ],
        "content": "static void asan_poison (void const volatile *addr, size_t size) { }",
        "lines": 1,
        "depth": 6,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      }
    ],
    "pr_sgr_start": {
      "start_point": [
        301,
        0
      ],
      "end_point": [
        306,
        1
      ],
      "content": "static void\npr_sgr_start (char const *s)\n{\n  if (*s)\n    print_start_colorize (sgr_start, s);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "pr_sgr_end": {
      "start_point": [
        307,
        0
      ],
      "end_point": [
        312,
        1
      ],
      "content": "static void\npr_sgr_end (char const *s)\n{\n  if (*s)\n    print_end_colorize (sgr_end);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "pr_sgr_start_if": {
      "start_point": [
        313,
        0
      ],
      "end_point": [
        318,
        1
      ],
      "content": "static void\npr_sgr_start_if (char const *s)\n{\n  if (color_option)\n    pr_sgr_start (s);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "pr_sgr_end_if": {
      "start_point": [
        319,
        0
      ],
      "end_point": [
        324,
        1
      ],
      "content": "static void\npr_sgr_end_if (char const *s)\n{\n  if (color_option)\n    pr_sgr_end (s);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "color_cap_mt_fct": {
      "start_point": [
        333,
        0
      ],
      "end_point": [
        338,
        1
      ],
      "content": "static void\ncolor_cap_mt_fct (void)\n{\n  /* Our caller just set selected_match_color.  */\n  context_match_color = selected_match_color;\n}",
      "lines": 6,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "color_cap_rv_fct": {
      "start_point": [
        340,
        0
      ],
      "end_point": [
        345,
        1
      ],
      "content": "static void\ncolor_cap_rv_fct (void)\n{\n  /* By this point, it was 1 (or already -1).  */\n  color_option = -1;  /* That's still != 0.  */\n}",
      "lines": 6,
      "depth": 5,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "color_cap_ne_fct": {
      "start_point": [
        347,
        0
      ],
      "end_point": [
        352,
        1
      ],
      "content": "static void\ncolor_cap_ne_fct (void)\n{\n  sgr_start = \"\\33[%sm\";\n  sgr_end   = \"\\33[m\";\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "putchar_errno": {
      "start_point": [
        374,
        0
      ],
      "end_point": [
        379,
        1
      ],
      "content": "static void\nputchar_errno (int c)\n{\n  if (putchar (c) < 0)\n    stdout_errno = errno;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fputs_errno": {
      "start_point": [
        381,
        0
      ],
      "end_point": [
        386,
        1
      ],
      "content": "static void\nfputs_errno (char const *s)\n{\n  if (fputs (s, stdout) < 0)\n    stdout_errno = errno;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_GL_ATTRIBUTE_FORMAT_PRINTF": {
      "start_point": [
        388,
        0
      ],
      "end_point": [
        396,
        1
      ],
      "content": "static void _GL_ATTRIBUTE_FORMAT_PRINTF (1, 2)\nprintf_errno (char const *format, ...)\n{\n  va_list ap;\n  va_start (ap, format);\n  if (vfprintf (stdout, format, ap) < 0)\n    stdout_errno = errno;\n  va_end (ap);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "_GL_ATTRIBUTE_FORMAT_PRINTF (1, 2)"
      ]
    },
    "fwrite_errno": {
      "start_point": [
        398,
        0
      ],
      "end_point": [
        403,
        1
      ],
      "content": "static void\nfwrite_errno (void const *ptr, size_t size, size_t nmemb)\n{\n  if (fwrite (ptr, size, nmemb, stdout) != nmemb)\n    stdout_errno = errno;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "fflush_errno": {
      "start_point": [
        405,
        0
      ],
      "end_point": [
        410,
        1
      ],
      "content": "static void\nfflush_errno (void)\n{\n  if (fflush (stdout) != 0)\n    stdout_errno = errno;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "is_device_mode": {
      "start_point": [
        539,
        0
      ],
      "end_point": [
        543,
        1
      ],
      "content": "static bool\nis_device_mode (mode_t m)\n{\n  return S_ISCHR (m) || S_ISBLK (m) || S_ISSOCK (m) || S_ISFIFO (m);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "skip_devices": {
      "start_point": [
        545,
        0
      ],
      "end_point": [
        550,
        1
      ],
      "content": "static bool\nskip_devices (bool command_line)\n{\n  return (devices == SKIP_DEVICES\n          || ((devices == READ_COMMAND_LINE_DEVICES) & !command_line));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "usable_st_size": {
      "start_point": [
        554,
        0
      ],
      "end_point": [
        558,
        1
      ],
      "content": "static bool\nusable_st_size (struct stat const *st)\n{\n  return S_ISREG (st->st_mode) || S_TYPEISSHM (st) || S_TYPEISTMO (st);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "input_filename": {
      "start_point": [
        580,
        0
      ],
      "end_point": [
        586,
        1
      ],
      "content": "static char const *\ninput_filename (void)\n{\n  if (!filename)\n    filename = _(\"(standard input)\");\n  return filename;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "char",
        "const",
        "const",
        "*\ninput_filename (void)",
        "*"
      ]
    },
    "suppressible_error": {
      "start_point": [
        589,
        0
      ],
      "end_point": [
        595,
        1
      ],
      "content": "static void\nsuppressible_error (int errnum)\n{\n  if (! suppress_errors)\n    error (0, errnum, \"%s\", input_filename ());\n  errseen = true;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "clean_up_stdout": {
      "start_point": [
        599,
        0
      ],
      "end_point": [
        604,
        1
      ],
      "content": "static void\nclean_up_stdout (void)\n{\n  if (! stdout_errno)\n    close_stdout ();\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "initialize_unibyte_mask": {
      "start_point": [
        636,
        0
      ],
      "end_point": [
        658,
        1
      ],
      "content": "static void\ninitialize_unibyte_mask (void)\n{\n  /* For each encoding error I that MASK does not already match,\n     accumulate I's most significant 1 bit by ORing it into MASK.\n     Although any 1 bit of I could be used, in practice high-order\n     bits work better.  */\n  unsigned char mask = 0;\n  int ms1b = 1;\n  for (int i = 1; i <= UCHAR_MAX; i++)\n    if ((localeinfo.sbclen[i] != 1) & ! (mask & i))\n      {\n        while (ms1b * 2 <= i)\n          ms1b *= 2;\n        mask |= ms1b;\n      }\n\n  /* Now MASK will detect any encoding-error byte, although it may\n     cry wolf and it may not be optimal.  Build a uword-length mask by\n     repeating MASK.  */\n  uword uword_max = -1;\n  unibyte_mask = uword_max / UCHAR_MAX * mask;\n}",
      "lines": 23,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "skip_easy_bytes": {
      "start_point": [
        663,
        0
      ],
      "end_point": [
        680,
        1
      ],
      "content": "static char const * _GL_ATTRIBUTE_PURE\nskip_easy_bytes (char const *buf)\n{\n  /* Search a byte at a time until the pointer is aligned, then a\n     uword at a time until a match is found, then a byte at a time to\n     identify the exact byte.  The uword search may go slightly past\n     the buffer end, but that's benign.  */\n  char const *p;\n  uword const *s;\n  for (p = buf; (uintptr_t) p % sizeof (uword) != 0; p++)\n    if (to_uchar (*p) & unibyte_mask)\n      return p;\n  for (s = CAST_ALIGNED (uword const *, p); ! (*s & unibyte_mask); s++)\n    continue;\n  for (p = (char const *) s; ! (to_uchar (*p) & unibyte_mask); p++)\n    continue;\n  return p;\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "char",
        "const",
        "const",
        "* _GL_ATTRIBUTE_PURE\nskip_easy_bytes (char const *buf)",
        "*",
        "_GL_ATTRIBUTE_PURE",
        "_GL_ATTRIBUTE_PURE"
      ]
    },
    "buf_has_encoding_errors": {
      "start_point": [
        685,
        0
      ],
      "end_point": [
        703,
        1
      ],
      "content": "static bool\nbuf_has_encoding_errors (char *buf, size_t size)\n{\n  if (! unibyte_mask)\n    return false;\n\n  mbstate_t mbs = { 0 };\n  size_t clen;\n\n  buf[size] = -1;\n  for (char const *p = buf; (p = skip_easy_bytes (p)) < buf + size; p += clen)\n    {\n      clen = mbrlen (p, buf + size - p, &mbs);\n      if ((size_t) -2 <= clen)\n        return true;\n    }\n\n  return false;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "buf_has_nulls": {
      "start_point": [
        709,
        0
      ],
      "end_point": [
        714,
        1
      ],
      "content": "static bool\nbuf_has_nulls (char *buf, size_t size)\n{\n  buf[size] = 0;\n  return strlen (buf) != size;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "file_must_have_nulls": {
      "start_point": [
        719,
        0
      ],
      "end_point": [
        746,
        1
      ],
      "content": "static bool\nfile_must_have_nulls (size_t size, int fd, struct stat const *st)\n{\n  /* If the file has holes, it must contain a null byte somewhere.  */\n  if (SEEK_HOLE != SEEK_SET && !seek_failed\n      && usable_st_size (st) && size < st->st_size)\n    {\n      off_t cur = size;\n      if (O_BINARY || fd == STDIN_FILENO)\n        {\n          cur = lseek (fd, 0, SEEK_CUR);\n          if (cur < 0)\n            return false;\n        }\n\n      /* Look for a hole after the current location.  */\n      off_t hole_start = lseek (fd, cur, SEEK_HOLE);\n      if (0 <= hole_start)\n        {\n          if (lseek (fd, cur, SEEK_SET) < 0)\n            suppressible_error (errno);\n          if (hole_start < st->st_size)\n            return true;\n        }\n    }\n\n  return false;\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "context_length_arg": {
      "start_point": [
        752,
        0
      ],
      "end_point": [
        766,
        1
      ],
      "content": "static void\ncontext_length_arg (char const *str, intmax_t *out)\n{\n  switch (xstrtoimax (str, 0, 10, out, \"\"))\n    {\n    case LONGINT_OK:\n    case LONGINT_OVERFLOW:\n      if (0 <= *out)\n        break;\n      FALLTHROUGH;\n    default:\n      die (EXIT_TROUBLE, 0, \"%s: %s\", str,\n           _(\"invalid context length argument\"));\n    }\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "exclude_options": {
      "start_point": [
        770,
        0
      ],
      "end_point": [
        774,
        1
      ],
      "content": "static int\nexclude_options (bool command_line)\n{\n  return EXCLUDE_WILDCARDS | (command_line ? 0 : EXCLUDE_ANCHORED);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "skipped_file": {
      "start_point": [
        779,
        0
      ],
      "end_point": [
        792,
        1
      ],
      "content": "static bool\nskipped_file (char const *name, bool command_line, bool is_dir)\n{\n  struct exclude **pats;\n  if (! is_dir)\n    pats = excluded_patterns;\n  else if (directories == SKIP_DIRECTORIES)\n    return true;\n  else if (command_line && omit_dot_slash)\n    return false;\n  else\n    pats = excluded_directory_patterns;\n  return pats[command_line] && excluded_file_name (pats[command_line], name);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "add_count": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        829,
        1
      ],
      "content": "static uintmax_t\nadd_count (uintmax_t a, uintmax_t b)\n{\n  uintmax_t sum = a + b;\n  if (sum < a)\n    die (EXIT_TROUBLE, 0, _(\"input is too large to count\"));\n  return sum;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "uintmax_t"
      ]
    },
    "all_zeros": {
      "start_point": [
        832,
        0
      ],
      "end_point": [
        839,
        1
      ],
      "content": "static bool\nall_zeros (char const *buf, size_t size)\n{\n  for (char const *p = buf; p < buf + size; p++)\n    if (*p)\n      return false;\n  return true;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "reset": {
      "start_point": [
        843,
        0
      ],
      "end_point": [
        865,
        1
      ],
      "content": "static bool\nreset (int fd, struct stat const *st)\n{\n  bufbeg = buflim = ALIGN_TO (buffer + 1, pagesize);\n  bufbeg[-1] = eolbyte;\n  bufdesc = fd;\n  bufoffset = fd == STDIN_FILENO ? lseek (fd, 0, SEEK_CUR) : 0;\n  seek_failed = bufoffset < 0;\n\n  /* Assume SEEK_DATA fails if SEEK_CUR does.  */\n  seek_data_failed = seek_failed;\n\n  if (seek_failed)\n    {\n      if (errno != ESPIPE)\n        {\n          suppressible_error (errno);\n          return false;\n        }\n      bufoffset = 0;\n    }\n  return true;\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fillbuf": {
      "start_point": [
        871,
        0
      ],
      "end_point": [
        985,
        1
      ],
      "content": "static bool\nfillbuf (size_t save, struct stat const *st)\n{\n  size_t fillsize;\n  bool cc = true;\n  char *readbuf;\n  size_t readsize;\n\n  /* Offset from start of buffer to start of old stuff\n     that we want to save.  */\n  size_t saved_offset = buflim - save - buffer;\n\n  if (pagesize <= buffer + bufalloc - sizeof (uword) - buflim)\n    {\n      readbuf = buflim;\n      bufbeg = buflim - save;\n    }\n  else\n    {\n      size_t minsize = save + pagesize;\n      size_t newsize;\n      size_t newalloc;\n      char *newbuf;\n\n      /* Grow newsize until it is at least as great as minsize.  */\n      for (newsize = bufalloc - pagesize - sizeof (uword);\n           newsize < minsize;\n           newsize *= 2)\n        if ((SIZE_MAX - pagesize - sizeof (uword)) / 2 < newsize)\n          xalloc_die ();\n\n      /* Try not to allocate more memory than the file size indicates,\n         as that might cause unnecessary memory exhaustion if the file\n         is large.  However, do not use the original file size as a\n         heuristic if we've already read past the file end, as most\n         likely the file is growing.  */\n      if (usable_st_size (st))\n        {\n          off_t to_be_read = st->st_size - bufoffset;\n          off_t maxsize_off = save + to_be_read;\n          if (0 <= to_be_read && to_be_read <= maxsize_off\n              && maxsize_off == (size_t) maxsize_off\n              && minsize <= (size_t) maxsize_off\n              && (size_t) maxsize_off < newsize)\n            newsize = maxsize_off;\n        }\n\n      /* Add enough room so that the buffer is aligned and has room\n         for byte sentinels fore and aft, and so that a uword can\n         be read aft.  */\n      newalloc = newsize + pagesize + sizeof (uword);\n\n      newbuf = bufalloc < newalloc ? xmalloc (bufalloc = newalloc) : buffer;\n      readbuf = ALIGN_TO (newbuf + 1 + save, pagesize);\n      bufbeg = readbuf - save;\n      memmove (bufbeg, buffer + saved_offset, save);\n      bufbeg[-1] = eolbyte;\n      if (newbuf != buffer)\n        {\n          free (buffer);\n          buffer = newbuf;\n        }\n    }\n\n  clear_asan_poison ();\n\n  readsize = buffer + bufalloc - sizeof (uword) - readbuf;\n  readsize -= readsize % pagesize;\n\n  while (true)\n    {\n      fillsize = safe_read (bufdesc, readbuf, readsize);\n      if (fillsize == SAFE_READ_ERROR)\n        {\n          fillsize = 0;\n          cc = false;\n        }\n      bufoffset += fillsize;\n\n      if (((fillsize == 0) | !skip_nuls) || !all_zeros (readbuf, fillsize))\n        break;\n      totalnl = add_count (totalnl, fillsize);\n\n      if (SEEK_DATA != SEEK_SET && !seek_data_failed)\n        {\n          /* Solaris SEEK_DATA fails with errno == ENXIO in a hole at EOF.  */\n          off_t data_start = lseek (bufdesc, bufoffset, SEEK_DATA);\n          if (data_start < 0 && errno == ENXIO\n              && usable_st_size (st) && bufoffset < st->st_size)\n            data_start = lseek (bufdesc, 0, SEEK_END);\n\n          if (data_start < 0)\n            seek_data_failed = true;\n          else\n            {\n              totalnl = add_count (totalnl, data_start - bufoffset);\n              bufoffset = data_start;\n            }\n        }\n    }\n\n  buflim = readbuf + fillsize;\n\n  /* Initialize the following word, because skip_easy_bytes and some\n     matchers read (but do not use) those bytes.  This avoids false\n     positive reports of these bytes being used uninitialized.  */\n  memset (buflim, 0, sizeof (uword));\n\n  /* Mark the part of the buffer not filled by the read or set by\n     the above memset call as ASAN-poisoned.  */\n  asan_poison (buflim + sizeof (uword),\n               bufalloc - (buflim - buffer) - sizeof (uword));\n\n  return cc;\n}",
      "lines": 115,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "nlscan": {
      "start_point": [
        1033,
        0
      ],
      "end_point": [
        1047,
        1
      ],
      "content": "static void\nnlscan (char const *lim)\n{\n  size_t newlines = 0;\n  char const *beg;\n  for (beg = lastnl; beg < lim; beg++)\n    {\n      beg = memchr (beg, eolbyte, lim - beg);\n      if (!beg)\n        break;\n      newlines++;\n    }\n  totalnl = add_count (totalnl, newlines);\n  lastnl = lim;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_filename": {
      "start_point": [
        1050,
        0
      ],
      "end_point": [
        1056,
        1
      ],
      "content": "static void\nprint_filename (void)\n{\n  pr_sgr_start_if (filename_color);\n  fputs_errno (input_filename ());\n  pr_sgr_end_if (filename_color);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_sep": {
      "start_point": [
        1059,
        0
      ],
      "end_point": [
        1065,
        1
      ],
      "content": "static void\nprint_sep (char sep)\n{\n  pr_sgr_start_if (sep_color);\n  putchar_errno (sep);\n  pr_sgr_end_if (sep_color);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_offset": {
      "start_point": [
        1068,
        0
      ],
      "end_point": [
        1074,
        1
      ],
      "content": "static void\nprint_offset (uintmax_t pos, const char *color)\n{\n  pr_sgr_start_if (color);\n  printf_errno (\"%*\"PRIuMAX, offset_width, pos);\n  pr_sgr_end_if (color);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_line_head": {
      "start_point": [
        1085,
        0
      ],
      "end_point": [
        1132,
        1
      ],
      "content": "static bool\nprint_line_head (char *beg, size_t len, char const *lim, char sep)\n{\n  if (binary_files != TEXT_BINARY_FILES)\n    {\n      char ch = beg[len];\n      bool encoding_errors = buf_has_encoding_errors (beg, len);\n      beg[len] = ch;\n      if (encoding_errors)\n        {\n          encoding_error_output = true;\n          return false;\n        }\n    }\n\n  if (out_file)\n    {\n      print_filename ();\n      if (filename_mask)\n        print_sep (sep);\n      else\n        putchar_errno (0);\n    }\n\n  if (out_line)\n    {\n      if (lastnl < lim)\n        {\n          nlscan (beg);\n          totalnl = add_count (totalnl, 1);\n          lastnl = lim;\n        }\n      print_offset (totalnl, line_num_color);\n      print_sep (sep);\n    }\n\n  if (out_byte)\n    {\n      uintmax_t pos = add_count (totalcc, beg - bufbeg);\n      print_offset (pos, byte_num_color);\n      print_sep (sep);\n    }\n\n  if (align_tabs && (out_file | out_line | out_byte) && len != 0)\n    putchar_errno ('\\t');\n\n  return true;\n}",
      "lines": 48,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "print_line_middle": {
      "start_point": [
        1134,
        0
      ],
      "end_point": [
        1200,
        1
      ],
      "content": "static char *\nprint_line_middle (char *beg, char *lim,\n                   const char *line_color, const char *match_color)\n{\n  size_t match_size;\n  size_t match_offset;\n  char *cur;\n  char *mid = NULL;\n  char *b;\n\n  for (cur = beg;\n       (cur < lim\n        && ((match_offset = execute (compiled_pattern, beg, lim - beg,\n                                     &match_size, cur)) != (size_t) -1));\n       cur = b + match_size)\n    {\n      b = beg + match_offset;\n\n      /* Avoid matching the empty line at the end of the buffer. */\n      if (b == lim)\n        break;\n\n      /* Avoid hanging on grep --color \"\" foo */\n      if (match_size == 0)\n        {\n          /* Make minimal progress; there may be further non-empty matches.  */\n          /* XXX - Could really advance by one whole multi-octet character.  */\n          match_size = 1;\n          if (!mid)\n            mid = cur;\n        }\n      else\n        {\n          /* This function is called on a matching line only,\n             but is it selected or rejected/context?  */\n          if (only_matching)\n            {\n              char sep = out_invert ? SEP_CHAR_REJECTED : SEP_CHAR_SELECTED;\n              if (! print_line_head (b, match_size, lim, sep))\n                return NULL;\n            }\n          else\n            {\n              pr_sgr_start (line_color);\n              if (mid)\n                {\n                  cur = mid;\n                  mid = NULL;\n                }\n              fwrite_errno (cur, 1, b - cur);\n            }\n\n          pr_sgr_start_if (match_color);\n          fwrite_errno (b, 1, match_size);\n          pr_sgr_end_if (match_color);\n          if (only_matching)\n            putchar_errno (eolbyte);\n        }\n    }\n\n  if (only_matching)\n    cur = lim;\n  else if (mid)\n    cur = mid;\n\n  return cur;\n}",
      "lines": 67,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nprint_line_middle (char *beg, char *lim,\n                   const char *line_color, const char *match_color)",
        "*"
      ]
    },
    "print_line_tail": {
      "start_point": [
        1202,
        0
      ],
      "end_point": [
        1221,
        1
      ],
      "content": "static char *\nprint_line_tail (char *beg, const char *lim, const char *line_color)\n{\n  size_t eol_size;\n  size_t tail_size;\n\n  eol_size   = (lim > beg && lim[-1] == eolbyte);\n  eol_size  += (lim - eol_size > beg && lim[-(1 + eol_size)] == '\\r');\n  tail_size  =  lim - eol_size - beg;\n\n  if (tail_size > 0)\n    {\n      pr_sgr_start (line_color);\n      fwrite_errno (beg, 1, tail_size);\n      beg += tail_size;\n      pr_sgr_end (line_color);\n    }\n\n  return beg;\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "char",
        "*\nprint_line_tail (char *beg, const char *lim, const char *line_color)",
        "*"
      ]
    },
    "prline": {
      "start_point": [
        1223,
        0
      ],
      "end_point": [
        1276,
        1
      ],
      "content": "static void\nprline (char *beg, char *lim, char sep)\n{\n  bool matching;\n  const char *line_color;\n  const char *match_color;\n\n  if (!only_matching)\n    if (! print_line_head (beg, lim - beg - 1, lim, sep))\n      return;\n\n  matching = (sep == SEP_CHAR_SELECTED) ^ out_invert;\n\n  if (color_option)\n    {\n      line_color = (((sep == SEP_CHAR_SELECTED)\n                     ^ (out_invert && (color_option < 0)))\n                    ? selected_line_color  : context_line_color);\n      match_color = (sep == SEP_CHAR_SELECTED\n                     ? selected_match_color : context_match_color);\n    }\n  else\n    line_color = match_color = NULL; /* Shouldn't be used.  */\n\n  if ((only_matching && matching)\n      || (color_option && (*line_color || *match_color)))\n    {\n      /* We already know that non-matching lines have no match (to colorize). */\n      if (matching && (only_matching || *match_color))\n        {\n          beg = print_line_middle (beg, lim, line_color, match_color);\n          if (! beg)\n            return;\n        }\n\n      if (!only_matching && *line_color)\n        {\n          /* This code is exercised at least when grep is invoked like this:\n             echo k| GREP_COLORS='sl=01;32' src/grep k --color=always  */\n          beg = print_line_tail (beg, lim, line_color);\n        }\n    }\n\n  if (!only_matching && lim > beg)\n    fwrite_errno (beg, 1, lim - beg);\n\n  if (line_buffered)\n    fflush_errno ();\n\n  if (stdout_errno)\n    die (EXIT_TROUBLE, stdout_errno, _(\"write error\"));\n\n  lastout = lim;\n}",
      "lines": 54,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "prpending": {
      "start_point": [
        1279,
        0
      ],
      "end_point": [
        1289,
        1
      ],
      "content": "static void\nprpending (char const *lim)\n{\n  if (!lastout)\n    lastout = bufbeg;\n  for (; 0 < pending && lastout < lim; pending--)\n    {\n      char *nl = memchr (lastout, eolbyte, lim - lastout);\n      prline (lastout, nl + 1, SEP_CHAR_REJECTED);\n    }\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "prtext": {
      "start_point": [
        1292,
        0
      ],
      "end_point": [
        1360,
        1
      ],
      "content": "static void\nprtext (char *beg, char *lim)\n{\n  static bool used;\t/* Avoid printing SEP_STR_GROUP before any output.  */\n  char eol = eolbyte;\n\n  if (!out_quiet && pending > 0)\n    prpending (beg);\n\n  char *p = beg;\n\n  if (!out_quiet)\n    {\n      /* Deal with leading context.  */\n      char const *bp = lastout ? lastout : bufbeg;\n      intmax_t i;\n      for (i = 0; i < out_before; ++i)\n        if (p > bp)\n          do\n            --p;\n          while (p[-1] != eol);\n\n      /* Print the group separator unless the output is adjacent to\n         the previous output in the file.  */\n      if ((0 <= out_before || 0 <= out_after) && used\n          && p != lastout && group_separator)\n        {\n          pr_sgr_start_if (sep_color);\n          fputs_errno (group_separator);\n          pr_sgr_end_if (sep_color);\n          putchar_errno ('\\n');\n        }\n\n      while (p < beg)\n        {\n          char *nl = memchr (p, eol, beg - p);\n          nl++;\n          prline (p, nl, SEP_CHAR_REJECTED);\n          p = nl;\n        }\n    }\n\n  intmax_t n;\n  if (out_invert)\n    {\n      /* One or more lines are output.  */\n      for (n = 0; p < lim && n < outleft; n++)\n        {\n          char *nl = memchr (p, eol, lim - p);\n          nl++;\n          if (!out_quiet)\n            prline (p, nl, SEP_CHAR_SELECTED);\n          p = nl;\n        }\n    }\n  else\n    {\n      /* Just one line is output.  */\n      if (!out_quiet)\n        prline (beg, lim, SEP_CHAR_SELECTED);\n      n = 1;\n      p = lim;\n    }\n\n  after_last_match = bufoffset - (buflim - p);\n  pending = out_quiet ? 0 : MAX (0, out_after);\n  used = true;\n  outleft -= n;\n}",
      "lines": 69,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "zap_nuls": {
      "start_point": [
        1366,
        0
      ],
      "end_point": [
        1381,
        1
      ],
      "content": "static void\nzap_nuls (char *p, char *lim, char eol)\n{\n  if (eol)\n    while (true)\n      {\n        *lim = '\\0';\n        p += strlen (p);\n        *lim = eol;\n        if (p == lim)\n          break;\n        do\n          *p++ = eol;\n        while (!*p);\n      }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "grepbuf": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1424,
        1
      ],
      "content": "static intmax_t\ngrepbuf (char *beg, char const *lim)\n{\n  intmax_t outleft0 = outleft;\n  char *endp;\n\n  for (char *p = beg; p < lim; p = endp)\n    {\n      size_t match_size;\n      size_t match_offset = execute (compiled_pattern, p, lim - p,\n                                     &match_size, NULL);\n      if (match_offset == (size_t) -1)\n        {\n          if (!out_invert)\n            break;\n          match_offset = lim - p;\n          match_size = 0;\n        }\n      char *b = p + match_offset;\n      endp = b + match_size;\n      /* Avoid matching the empty line at the end of the buffer. */\n      if (!out_invert && b == lim)\n        break;\n      if (!out_invert || p < b)\n        {\n          char *prbeg = out_invert ? p : b;\n          char *prend = out_invert ? b : endp;\n          prtext (prbeg, prend);\n          if (!outleft || done_on_match)\n            {\n              if (exit_on_match)\n                exit (errseen ? exit_failure : EXIT_SUCCESS);\n              break;\n            }\n        }\n    }\n\n  return outleft0 - outleft;\n}",
      "lines": 39,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "intmax_t"
      ]
    },
    "grep": {
      "start_point": [
        1428,
        0
      ],
      "end_point": [
        1583,
        1
      ],
      "content": "static intmax_t\ngrep (int fd, struct stat const *st, bool *ineof)\n{\n  intmax_t nlines, i;\n  size_t residue, save;\n  char oldc;\n  char *beg;\n  char *lim;\n  char eol = eolbyte;\n  char nul_zapper = '\\0';\n  bool done_on_match_0 = done_on_match;\n  bool out_quiet_0 = out_quiet;\n\n  /* The value of NLINES when nulls were first deduced in the input;\n     this is not necessarily the same as the number of matching lines\n     before the first null.  -1 if no input nulls have been deduced.  */\n  intmax_t nlines_first_null = -1;\n\n  if (! reset (fd, st))\n    return 0;\n\n  totalcc = 0;\n  lastout = 0;\n  totalnl = 0;\n  outleft = max_count;\n  after_last_match = 0;\n  pending = 0;\n  skip_nuls = skip_empty_lines && !eol;\n  encoding_error_output = false;\n\n  nlines = 0;\n  residue = 0;\n  save = 0;\n\n  if (! fillbuf (save, st))\n    {\n      suppressible_error (errno);\n      return 0;\n    }\n\n  offset_width = 0;\n  if (align_tabs)\n    {\n      /* Width is log of maximum number.  Line numbers are origin-1.  */\n      uintmax_t num = usable_st_size (st) ? st->st_size : UINTMAX_MAX;\n      num += out_line && num < UINTMAX_MAX;\n      do\n        offset_width++;\n      while ((num /= 10) != 0);\n    }\n\n  for (bool firsttime = true; ; firsttime = false)\n    {\n      if (nlines_first_null < 0 && eol && binary_files != TEXT_BINARY_FILES\n          && (buf_has_nulls (bufbeg, buflim - bufbeg)\n              || (firsttime && file_must_have_nulls (buflim - bufbeg, fd, st))))\n        {\n          if (binary_files == WITHOUT_MATCH_BINARY_FILES)\n            return 0;\n          if (!count_matches)\n            done_on_match = out_quiet = true;\n          nlines_first_null = nlines;\n          nul_zapper = eol;\n          skip_nuls = skip_empty_lines;\n        }\n\n      lastnl = bufbeg;\n      if (lastout)\n        lastout = bufbeg;\n\n      beg = bufbeg + save;\n\n      /* no more data to scan (eof) except for maybe a residue -> break */\n      if (beg == buflim)\n        {\n          *ineof = true;\n          break;\n        }\n\n      zap_nuls (beg, buflim, nul_zapper);\n\n      /* Determine new residue (the length of an incomplete line at the end of\n         the buffer, 0 means there is no incomplete last line).  */\n      oldc = beg[-1];\n      beg[-1] = eol;\n      /* FIXME: use rawmemrchr if/when it exists, since we have ensured\n         that this use of memrchr is guaranteed never to return NULL.  */\n      lim = memrchr (beg - 1, eol, buflim - beg + 1);\n      ++lim;\n      beg[-1] = oldc;\n      if (lim == beg)\n        lim = beg - residue;\n      beg -= residue;\n      residue = buflim - lim;\n\n      if (beg < lim)\n        {\n          if (outleft)\n            nlines += grepbuf (beg, lim);\n          if (pending)\n            prpending (lim);\n          if ((!outleft && !pending)\n              || (done_on_match && MAX (0, nlines_first_null) < nlines))\n            goto finish_grep;\n        }\n\n      /* The last OUT_BEFORE lines at the end of the buffer will be needed as\n         leading context if there is a matching line at the begin of the\n         next data. Make beg point to their begin.  */\n      i = 0;\n      beg = lim;\n      while (i < out_before && beg > bufbeg && beg != lastout)\n        {\n          ++i;\n          do\n            --beg;\n          while (beg[-1] != eol);\n        }\n\n      /* Detect whether leading context is adjacent to previous output.  */\n      if (beg != lastout)\n        lastout = 0;\n\n      /* Handle some details and read more data to scan.  */\n      save = residue + lim - beg;\n      if (out_byte)\n        totalcc = add_count (totalcc, buflim - bufbeg - save);\n      if (out_line)\n        nlscan (beg);\n      if (! fillbuf (save, st))\n        {\n          suppressible_error (errno);\n          goto finish_grep;\n        }\n    }\n  if (residue)\n    {\n      *buflim++ = eol;\n      if (outleft)\n        nlines += grepbuf (bufbeg + save - residue, buflim);\n      if (pending)\n        prpending (buflim);\n    }\n\n finish_grep:\n  done_on_match = done_on_match_0;\n  out_quiet = out_quiet_0;\n  if (!out_quiet && (encoding_error_output\n                     || (0 <= nlines_first_null && nlines_first_null < nlines)))\n    {\n      printf_errno (_(\"Binary file %s matches\\n\"), input_filename ());\n      if (line_buffered)\n        fflush_errno ();\n    }\n  return nlines;\n}",
      "lines": 156,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "intmax_t"
      ]
    },
    "grepdirent": {
      "start_point": [
        1585,
        0
      ],
      "end_point": [
        1673,
        1
      ],
      "content": "static bool\ngrepdirent (FTS *fts, FTSENT *ent, bool command_line)\n{\n  bool follow;\n  command_line &= ent->fts_level == FTS_ROOTLEVEL;\n\n  if (ent->fts_info == FTS_DP)\n    {\n      if (directories == RECURSE_DIRECTORIES && command_line)\n        out_file &= ~ (2 * !no_filenames);\n      return true;\n    }\n\n  if (!command_line\n      && skipped_file (ent->fts_name, false,\n                       (ent->fts_info == FTS_D || ent->fts_info == FTS_DC\n                        || ent->fts_info == FTS_DNR)))\n    {\n      fts_set (fts, ent, FTS_SKIP);\n      return true;\n    }\n\n  filename = ent->fts_path;\n  if (omit_dot_slash && filename[1])\n    filename += 2;\n  follow = (fts->fts_options & FTS_LOGICAL\n            || (fts->fts_options & FTS_COMFOLLOW && command_line));\n\n  switch (ent->fts_info)\n    {\n    case FTS_D:\n      if (directories == RECURSE_DIRECTORIES)\n        {\n          out_file |= 2 * !no_filenames;\n          return true;\n        }\n      fts_set (fts, ent, FTS_SKIP);\n      break;\n\n    case FTS_DC:\n      if (!suppress_errors)\n        error (0, 0, _(\"warning: %s: %s\"), filename,\n               _(\"recursive directory loop\"));\n      return true;\n\n    case FTS_DNR:\n    case FTS_ERR:\n    case FTS_NS:\n      suppressible_error (ent->fts_errno);\n      return true;\n\n    case FTS_DEFAULT:\n    case FTS_NSOK:\n      if (skip_devices (command_line))\n        {\n          struct stat *st = ent->fts_statp;\n          struct stat st1;\n          if (! st->st_mode)\n            {\n              /* The file type is not already known.  Get the file status\n                 before opening, since opening might have side effects\n                 on a device.  */\n              int flag = follow ? 0 : AT_SYMLINK_NOFOLLOW;\n              if (fstatat (fts->fts_cwd_fd, ent->fts_accpath, &st1, flag) != 0)\n                {\n                  suppressible_error (errno);\n                  return true;\n                }\n              st = &st1;\n            }\n          if (is_device_mode (st->st_mode))\n            return true;\n        }\n      break;\n\n    case FTS_F:\n    case FTS_SLNONE:\n      break;\n\n    case FTS_SL:\n    case FTS_W:\n      return true;\n\n    default:\n      abort ();\n    }\n\n  return grepfile (fts->fts_cwd_fd, ent->fts_accpath, follow, command_line);\n}",
      "lines": 89,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "open_symlink_nofollow_error": {
      "start_point": [
        1677,
        0
      ],
      "end_point": [
        1687,
        1
      ],
      "content": "static bool\nopen_symlink_nofollow_error (int err)\n{\n  if (err == ELOOP || err == EMLINK)\n    return true;\n#ifdef EFTYPE\n  if (err == EFTYPE)\n    return true;\n#endif\n  return false;\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "grepfile": {
      "start_point": [
        1689,
        0
      ],
      "end_point": [
        1705,
        1
      ],
      "content": "static bool\ngrepfile (int dirdesc, char const *name, bool follow, bool command_line)\n{\n  int oflag = (O_RDONLY | O_NOCTTY\n               | (IGNORE_DUPLICATE_BRANCH_WARNING\n                  (binary ? O_BINARY : 0))\n               | (follow ? 0 : O_NOFOLLOW)\n               | (skip_devices (command_line) ? O_NONBLOCK : 0));\n  int desc = openat_safer (dirdesc, name, oflag);\n  if (desc < 0)\n    {\n      if (follow || ! open_symlink_nofollow_error (errno))\n        suppressible_error (errno);\n      return true;\n    }\n  return grepdesc (desc, command_line);\n}",
      "lines": 17,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "drain_input": {
      "start_point": [
        1709,
        0
      ],
      "end_point": [
        1732,
        1
      ],
      "content": "static bool\ndrain_input (int fd, struct stat const *st)\n{\n  ssize_t nbytes;\n  if (S_ISFIFO (st->st_mode) && dev_null_output)\n    {\n#ifdef SPLICE_F_MOVE\n      /* Should be faster, since it need not copy data to user space.  */\n      nbytes = splice (fd, NULL, STDOUT_FILENO, NULL,\n                       INITIAL_BUFSIZE, SPLICE_F_MOVE);\n      if (0 <= nbytes || errno != EINVAL)\n        {\n          while (0 < nbytes)\n            nbytes = splice (fd, NULL, STDOUT_FILENO, NULL,\n                             INITIAL_BUFSIZE, SPLICE_F_MOVE);\n          return nbytes == 0;\n        }\n#endif\n    }\n  while ((nbytes = safe_read (fd, buffer, bufalloc)))\n    if (nbytes == SAFE_READ_ERROR)\n      return false;\n  return true;\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "finalize_input": {
      "start_point": [
        1739,
        0
      ],
      "end_point": [
        1753,
        1
      ],
      "content": "static void\nfinalize_input (int fd, struct stat const *st, bool ineof)\n{\n  if (fd == STDIN_FILENO\n      && (outleft\n          ? (!ineof\n             && (seek_failed\n                 || (lseek (fd, 0, SEEK_END) < 0\n                     /* Linux proc file system has EINVAL (Bug#25180).  */\n                     && errno != EINVAL))\n             && ! drain_input (fd, st))\n          : (bufoffset != after_last_match && !seek_failed\n             && lseek (fd, after_last_match, SEEK_SET) < 0)))\n    suppressible_error (errno);\n}",
      "lines": 15,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "grepdesc": {
      "start_point": [
        1755,
        0
      ],
      "end_point": [
        1881,
        1
      ],
      "content": "static bool\ngrepdesc (int desc, bool command_line)\n{\n  intmax_t count;\n  bool status = true;\n  bool ineof = false;\n  struct stat st;\n\n  /* Get the file status, possibly for the second time.  This catches\n     a race condition if the directory entry changes after the\n     directory entry is read and before the file is opened.  For\n     example, normally DESC is a directory only at the top level, but\n     there is an exception if some other process substitutes a\n     directory for a non-directory while 'grep' is running.  */\n  if (fstat (desc, &st) != 0)\n    {\n      suppressible_error (errno);\n      goto closeout;\n    }\n\n  if (desc != STDIN_FILENO && skip_devices (command_line)\n      && is_device_mode (st.st_mode))\n    goto closeout;\n\n  if (desc != STDIN_FILENO && command_line\n      && skipped_file (filename, true, S_ISDIR (st.st_mode) != 0))\n    goto closeout;\n\n  if (desc != STDIN_FILENO\n      && directories == RECURSE_DIRECTORIES && S_ISDIR (st.st_mode))\n    {\n      /* Traverse the directory starting with its full name, because\n         unfortunately fts provides no way to traverse the directory\n         starting from its file descriptor.  */\n\n      FTS *fts;\n      FTSENT *ent;\n      int opts = fts_options & ~(command_line ? 0 : FTS_COMFOLLOW);\n      char *fts_arg[2];\n\n      /* Close DESC now, to conserve file descriptors if the race\n         condition occurs many times in a deep recursion.  */\n      if (close (desc) != 0)\n        suppressible_error (errno);\n\n      fts_arg[0] = (char *) filename;\n      fts_arg[1] = NULL;\n      fts = fts_open (fts_arg, opts, NULL);\n\n      if (!fts)\n        xalloc_die ();\n      while ((ent = fts_read (fts)))\n        status &= grepdirent (fts, ent, command_line);\n      if (errno)\n        suppressible_error (errno);\n      if (fts_close (fts) != 0)\n        suppressible_error (errno);\n      return status;\n    }\n  if (desc != STDIN_FILENO\n      && ((directories == SKIP_DIRECTORIES && S_ISDIR (st.st_mode))\n          || ((devices == SKIP_DEVICES\n               || (devices == READ_COMMAND_LINE_DEVICES && !command_line))\n              && is_device_mode (st.st_mode))))\n    goto closeout;\n\n  /* If there is a regular file on stdout and the current file refers\n     to the same i-node, we have to report the problem and skip it.\n     Otherwise when matching lines from some other input reach the\n     disk before we open this file, we can end up reading and matching\n     those lines and appending them to the file from which we're reading.\n     Then we'd have what appears to be an infinite loop that'd terminate\n     only upon filling the output file system or reaching a quota.\n     However, there is no risk of an infinite loop if grep is generating\n     no output, i.e., with --silent, --quiet, -q.\n     Similarly, with any of these:\n       --max-count=N (-m) (for N >= 2)\n       --files-with-matches (-l)\n       --files-without-match (-L)\n     there is no risk of trouble.\n     For --max-count=1, grep stops after printing the first match,\n     so there is no risk of malfunction.  But even --max-count=2, with\n     input==output, while there is no risk of infloop, there is a race\n     condition that could result in \"alternate\" output.  */\n  if (!out_quiet && list_files == LISTFILES_NONE && 1 < max_count\n      && S_ISREG (st.st_mode) && SAME_INODE (st, out_stat))\n    {\n      if (! suppress_errors)\n        error (0, 0, _(\"input file %s is also the output\"),\n               quote (input_filename ()));\n      errseen = true;\n      goto closeout;\n    }\n\n  count = grep (desc, &st, &ineof);\n  if (count_matches)\n    {\n      if (out_file)\n        {\n          print_filename ();\n          if (filename_mask)\n            print_sep (SEP_CHAR_SELECTED);\n          else\n            putchar_errno (0);\n        }\n      printf_errno (\"%\" PRIdMAX \"\\n\", count);\n      if (line_buffered)\n        fflush_errno ();\n    }\n\n  status = !count;\n\n  if (list_files == LISTFILES_NONE)\n    finalize_input (desc, &st, ineof);\n  else if (list_files == (status ? LISTFILES_NONMATCHING : LISTFILES_MATCHING))\n    {\n      print_filename ();\n      putchar_errno ('\\n' & filename_mask);\n      if (line_buffered)\n        fflush_errno ();\n    }\n\n closeout:\n  if (desc != STDIN_FILENO && close (desc) != 0)\n    suppressible_error (errno);\n  return status;\n}",
      "lines": 127,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "grep_command_line_arg": {
      "start_point": [
        1883,
        0
      ],
      "end_point": [
        1898,
        1
      ],
      "content": "static bool\ngrep_command_line_arg (char const *arg)\n{\n  if (STREQ (arg, \"-\"))\n    {\n      filename = label;\n      if (binary)\n        xset_binary_mode (STDIN_FILENO, O_BINARY);\n      return grepdesc (STDIN_FILENO, true);\n    }\n  else\n    {\n      filename = arg;\n      return grepfile (AT_FDCWD, arg, true, true);\n    }\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "usage": {
      "start_point": [
        1901,
        0
      ],
      "end_point": [
        2001,
        1
      ],
      "content": "void\nusage (int status)\n{\n  if (status != 0)\n    {\n      fprintf (stderr, _(\"Usage: %s [OPTION]... PATTERN [FILE]...\\n\"),\n               getprogname ());\n      fprintf (stderr, _(\"Try '%s --help' for more information.\\n\"),\n               getprogname ());\n    }\n  else\n    {\n      printf (_(\"Usage: %s [OPTION]... PATTERN [FILE]...\\n\"), getprogname ());\n      printf (_(\"Search for PATTERN in each FILE.\\n\"));\n      printf (_(\"\\\nExample: %s -i 'hello world' menu.h main.c\\n\\\n\\n\\\nPattern selection and interpretation:\\n\"), getprogname ());\n      printf (_(\"\\\n  -E, --extended-regexp     PATTERN is an extended regular expression\\n\\\n  -F, --fixed-strings       PATTERN is a set of newline-separated strings\\n\\\n  -G, --basic-regexp        PATTERN is a basic regular expression (default)\\n\\\n  -P, --perl-regexp         PATTERN is a Perl regular expression\\n\"));\n  /* -X is deliberately undocumented.  */\n      printf (_(\"\\\n  -e, --regexp=PATTERN      use PATTERN for matching\\n\\\n  -f, --file=FILE           obtain PATTERN from FILE\\n\\\n  -i, --ignore-case         ignore case distinctions\\n\\\n  -w, --word-regexp         force PATTERN to match only whole words\\n\\\n  -x, --line-regexp         force PATTERN to match only whole lines\\n\\\n  -z, --null-data           a data line ends in 0 byte, not newline\\n\"));\n      printf (_(\"\\\n\\n\\\nMiscellaneous:\\n\\\n  -s, --no-messages         suppress error messages\\n\\\n  -v, --invert-match        select non-matching lines\\n\\\n  -V, --version             display version information and exit\\n\\\n      --help                display this help text and exit\\n\"));\n      printf (_(\"\\\n\\n\\\nOutput control:\\n\\\n  -m, --max-count=NUM       stop after NUM selected lines\\n\\\n  -b, --byte-offset         print the byte offset with output lines\\n\\\n  -n, --line-number         print line number with output lines\\n\\\n      --line-buffered       flush output on every line\\n\\\n  -H, --with-filename       print file name with output lines\\n\\\n  -h, --no-filename         suppress the file name prefix on output\\n\\\n      --label=LABEL         use LABEL as the standard input file name prefix\\n\\\n\"));\n      printf (_(\"\\\n  -o, --only-matching       show only the part of a line matching PATTERN\\n\\\n  -q, --quiet, --silent     suppress all normal output\\n\\\n      --binary-files=TYPE   assume that binary files are TYPE;\\n\\\n                            TYPE is 'binary', 'text', or 'without-match'\\n\\\n  -a, --text                equivalent to --binary-files=text\\n\\\n\"));\n      printf (_(\"\\\n  -I                        equivalent to --binary-files=without-match\\n\\\n  -d, --directories=ACTION  how to handle directories;\\n\\\n                            ACTION is 'read', 'recurse', or 'skip'\\n\\\n  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;\\n\\\n                            ACTION is 'read' or 'skip'\\n\\\n  -r, --recursive           like --directories=recurse\\n\\\n  -R, --dereference-recursive  likewise, but follow all symlinks\\n\\\n\"));\n      printf (_(\"\\\n      --include=FILE_PATTERN  search only files that match FILE_PATTERN\\n\\\n      --exclude=FILE_PATTERN  skip files and directories matching\\\n FILE_PATTERN\\n\\\n      --exclude-from=FILE   skip files matching any file pattern from FILE\\n\\\n      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.\\n\\\n\"));\n      printf (_(\"\\\n  -L, --files-without-match  print only names of FILEs with no selected lines\\n\\\n  -l, --files-with-matches  print only names of FILEs with selected lines\\n\\\n  -c, --count               print only a count of selected lines per FILE\\n\\\n  -T, --initial-tab         make tabs line up (if needed)\\n\\\n  -Z, --null                print 0 byte after FILE name\\n\"));\n      printf (_(\"\\\n\\n\\\nContext control:\\n\\\n  -B, --before-context=NUM  print NUM lines of leading context\\n\\\n  -A, --after-context=NUM   print NUM lines of trailing context\\n\\\n  -C, --context=NUM         print NUM lines of output context\\n\\\n\"));\n      printf (_(\"\\\n  -NUM                      same as --context=NUM\\n\\\n      --color[=WHEN],\\n\\\n      --colour[=WHEN]       use markers to highlight the matching strings;\\n\\\n                            WHEN is 'always', 'never', or 'auto'\\n\\\n  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)\\n\\\n\\n\"));\n      printf (_(\"\\\nWhen FILE is '-', read standard input.  With no FILE, read '.' if\\n\\\nrecursive, '-' otherwise.  With fewer than two FILEs, assume -h.\\n\\\nExit status is 0 if any line is selected, 1 otherwise;\\n\\\nif any error occurs and -q is not given, the exit status is 2.\\n\"));\n      emit_bug_reporting_address ();\n    }\n  exit (status);\n}",
      "lines": 101,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "setmatcher": {
      "start_point": [
        2026,
        0
      ],
      "end_point": [
        2038,
        1
      ],
      "content": "static int\nsetmatcher (char const *m, int matcher)\n{\n  for (int i = 0; i < sizeof matchers / sizeof *matchers; i++)\n    if (STREQ (m, matchers[i].name))\n      {\n        if (0 <= matcher && matcher != i)\n          die (EXIT_TROUBLE, 0, _(\"conflicting matchers specified\"));\n        return i;\n      }\n\n  die (EXIT_TROUBLE, 0, _(\"invalid matcher %s\"), m);\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "prepend_args": {
      "start_point": [
        2045,
        0
      ],
      "end_point": [
        2069,
        1
      ],
      "content": "static size_t\nprepend_args (char const *options, char *buf, char **argv)\n{\n  char const *o = options;\n  char *b = buf;\n  size_t n = 0;\n\n  for (;;)\n    {\n      while (c_isspace (to_uchar (*o)))\n        o++;\n      if (!*o)\n        return n;\n      if (argv)\n        argv[n] = b;\n      n++;\n\n      do\n        if ((*b++ = *o++) == '\\\\' && *o)\n          b[-1] = *o++;\n      while (*o && ! c_isspace (to_uchar (*o)));\n\n      *b++ = '\\0';\n    }\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "prepend_default_options": {
      "start_point": [
        2074,
        0
      ],
      "end_point": [
        2098,
        1
      ],
      "content": "static int\nprepend_default_options (char const *options, int *pargc, char ***pargv)\n{\n  if (options && *options)\n    {\n      char *buf = xmalloc (strlen (options) + 1);\n      size_t prepended = prepend_args (options, buf, NULL);\n      int argc = *pargc;\n      char *const *argv = *pargv;\n      char **pp;\n      enum { MAX_ARGS = MIN (INT_MAX, SIZE_MAX / sizeof *pp - 1) };\n      if (MAX_ARGS - argc < prepended)\n        xalloc_die ();\n      pp = xmalloc ((prepended + argc + 1) * sizeof *pp);\n      *pargc = prepended + argc;\n      *pargv = pp;\n      *pp++ = *argv++;\n      pp += prepend_args (options, buf, pp);\n      while ((*pp++ = *argv++))\n        continue;\n      return prepended;\n    }\n\n  return 0;\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "get_nondigit_option": {
      "start_point": [
        2104,
        0
      ],
      "end_point": [
        2157,
        1
      ],
      "content": "static int\nget_nondigit_option (int argc, char *const *argv, intmax_t *default_context)\n{\n  static int prev_digit_optind = -1;\n  int this_digit_optind;\n  bool was_digit;\n  char buf[INT_BUFSIZE_BOUND (intmax_t) + 4];\n  char *p = buf;\n  int opt;\n\n  was_digit = false;\n  this_digit_optind = optind;\n  while (true)\n    {\n      opt = getopt_long (argc, (char **) argv, short_options,\n                         long_options, NULL);\n      if (! c_isdigit (opt))\n        break;\n\n      if (prev_digit_optind != this_digit_optind || !was_digit)\n        {\n          /* Reset to start another context length argument.  */\n          p = buf;\n        }\n      else\n        {\n          /* Suppress trivial leading zeros, to avoid incorrect\n             diagnostic on strings like 00000000000.  */\n          p -= buf[0] == '0';\n        }\n\n      if (p == buf + sizeof buf - 4)\n        {\n          /* Too many digits.  Append \"...\" to make context_length_arg\n             complain about \"X...\", where X contains the digits seen\n             so far.  */\n          strcpy (p, \"...\");\n          p += 3;\n          break;\n        }\n      *p++ = opt;\n\n      was_digit = true;\n      prev_digit_optind = this_digit_optind;\n      this_digit_optind = optind;\n    }\n  if (p != buf)\n    {\n      *p = '\\0';\n      context_length_arg (buf, default_context);\n    }\n\n  return opt;\n}",
      "lines": 54,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "parse_grep_colors": {
      "start_point": [
        2163,
        0
      ],
      "end_point": [
        2216,
        1
      ],
      "content": "static void\nparse_grep_colors (void)\n{\n  const char *p;\n  char *q;\n  char *name;\n  char *val;\n\n  p = getenv (\"GREP_COLORS\"); /* Plural! */\n  if (p == NULL || *p == '\\0')\n    return;\n\n  /* Work off a writable copy.  */\n  q = xstrdup (p);\n\n  name = q;\n  val = NULL;\n  /* From now on, be well-formed or you're gone.  */\n  for (;;)\n    if (*q == ':' || *q == '\\0')\n      {\n        char c = *q;\n        struct color_cap const *cap;\n\n        *q++ = '\\0'; /* Terminate name or val.  */\n        /* Empty name without val (empty cap)\n         * won't match and will be ignored.  */\n        for (cap = color_dict; cap->name; cap++)\n          if (STREQ (cap->name, name))\n            break;\n        /* If name unknown, go on for forward compatibility.  */\n        if (cap->var && val)\n          *(cap->var) = val;\n        if (cap->fct)\n          cap->fct ();\n        if (c == '\\0')\n          return;\n        name = q;\n        val = NULL;\n      }\n    else if (*q == '=')\n      {\n        if (q == name || val)\n          return;\n        *q++ = '\\0'; /* Terminate name.  */\n        val = q; /* Can be the empty string.  */\n      }\n    else if (val == NULL)\n      q++; /* Accumulate name.  */\n    else if (*q == ';' || c_isdigit (*q))\n      q++; /* Accumulate val.  Protect the terminal from being sent crap.  */\n    else\n      return;\n}",
      "lines": 54,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "contains_encoding_error": {
      "start_point": [
        2219,
        0
      ],
      "end_point": [
        2232,
        1
      ],
      "content": "static bool\ncontains_encoding_error (char const *pat, size_t patlen)\n{\n  mbstate_t mbs = { 0 };\n  size_t i, charlen;\n\n  for (i = 0; i < patlen; i += charlen)\n    {\n      charlen = mb_clen (pat + i, patlen - i, &mbs);\n      if ((size_t) -2 <= charlen)\n        return true;\n    }\n  return false;\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fgrep_icase_charlen": {
      "start_point": [
        2241,
        0
      ],
      "end_point": [
        2261,
        1
      ],
      "content": "static int\nfgrep_icase_charlen (char const *pat, size_t patlen, mbstate_t *mbs)\n{\n  int n = localeinfo.sbclen[to_uchar (*pat)];\n  if (n < 0)\n    {\n      wchar_t wc;\n      wchar_t folded[CASE_FOLDED_BUFSIZE];\n      size_t wn = mbrtowc (&wc, pat, patlen, mbs);\n      if (MB_LEN_MAX < wn || case_folded_counterparts (wc, folded))\n        return -1;\n      for (int i = wn; 0 < --i; )\n        {\n          unsigned char c = pat[i];\n          if (toupper (c) != c)\n            return -1;\n        }\n      n = wn;\n    }\n  return n;\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "fgrep_icase_available": {
      "start_point": [
        2267,
        0
      ],
      "end_point": [
        2281,
        1
      ],
      "content": "static bool\nfgrep_icase_available (char const *pat, size_t patlen)\n{\n  mbstate_t mbs = {0,};\n\n  for (size_t i = 0; i < patlen; )\n    {\n      int n = fgrep_icase_charlen (pat + i, patlen - i, &mbs);\n      if (n < 0)\n        return false;\n      i += n;\n    }\n\n  return true;\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "fgrep_to_grep_pattern": {
      "start_point": [
        2285,
        0
      ],
      "end_point": [
        2325,
        1
      ],
      "content": "void\nfgrep_to_grep_pattern (char **keys_p, size_t *len_p)\n{\n  size_t len = *len_p;\n  char *keys = *keys_p;\n  mbstate_t mb_state = { 0 };\n  char *new_keys = xnmalloc (len + 1, 2);\n  char *p = new_keys;\n  size_t n;\n\n  for (; len; keys += n, len -= n)\n    {\n      n = mb_clen (keys, len, &mb_state);\n      switch (n)\n        {\n        case (size_t) -2:\n          n = len;\n          FALLTHROUGH;\n        default:\n          p = mempcpy (p, keys, n);\n          break;\n\n        case (size_t) -1:\n          memset (&mb_state, 0, sizeof mb_state);\n          n = 1;\n          FALLTHROUGH;\n        case 1:\n          switch (*keys)\n            {\n            case '$': case '*': case '.': case '[': case '\\\\': case '^':\n              *p++ = '\\\\'; break;\n            }\n          *p++ = *keys;\n          break;\n        }\n    }\n\n  free (*keys_p);\n  *keys_p = new_keys;\n  *len_p = p - new_keys;\n}",
      "lines": 41,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "try_fgrep_pattern": {
      "start_point": [
        2334,
        0
      ],
      "end_point": [
        2410,
        1
      ],
      "content": "static int\ntry_fgrep_pattern (int matcher, char *keys, size_t *len_p)\n{\n  int result = matcher;\n  size_t len = *len_p;\n  char *new_keys = xmalloc (len + 1);\n  char *p = new_keys;\n  char const *q = keys;\n  mbstate_t mb_state = { 0 };\n\n  while (len != 0)\n    {\n      switch (*q)\n        {\n        case '$': case '*': case '.': case '[': case '^':\n          goto fail;\n\n        case '(': case '+': case '?': case '{': case '|':\n          if (matcher != G_MATCHER_INDEX)\n            goto fail;\n          break;\n\n        case '\\\\':\n          if (1 < len)\n            switch (q[1])\n              {\n              case '\\n':\n              case 'B': case 'S': case 'W': case'\\'': case '<':\n              case 'b': case 's': case 'w': case '`': case '>':\n              case '1': case '2': case '3': case '4':\n              case '5': case '6': case '7': case '8': case '9':\n                goto fail;\n\n              case '(': case '+': case '?': case '{': case '|':\n                if (matcher == G_MATCHER_INDEX)\n                  goto fail;\n                FALLTHROUGH;\n              default:\n                q++, len--;\n                break;\n              }\n          break;\n        }\n\n      {\n        size_t n;\n        if (match_icase)\n          {\n            int ni = fgrep_icase_charlen (q, len, &mb_state);\n            if (ni < 0)\n              goto fail;\n            n = ni;\n          }\n        else\n          {\n            n = mb_clen (q, len, &mb_state);\n            if (MB_LEN_MAX < n)\n              goto fail;\n          }\n\n        p = mempcpy (p, q, n);\n        q += n;\n        len -= n;\n      }\n    }\n\n  if (*len_p != p - new_keys)\n    {\n      *len_p = p - new_keys;\n      memcpy (keys, new_keys, p - new_keys);\n    }\n  result = F_MATCHER_INDEX;\n\n fail:\n  free (new_keys);\n  return result;\n}",
      "lines": 77,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "main": {
      "start_point": [
        2412,
        0
      ],
      "end_point": [
        2932,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  char *keys = NULL;\n  size_t keycc = 0, oldcc, keyalloc = 0;\n  int matcher = -1;\n  bool with_filenames = false;\n  size_t cc;\n  int opt, prepended;\n  int prev_optind, last_recursive;\n  int fread_errno;\n  intmax_t default_context;\n  FILE *fp;\n  exit_failure = EXIT_TROUBLE;\n  initialize_main (&argc, &argv);\n\n  eolbyte = '\\n';\n  filename_mask = ~0;\n\n  max_count = INTMAX_MAX;\n\n  /* The value -1 means to use DEFAULT_CONTEXT. */\n  out_after = out_before = -1;\n  /* Default before/after context: changed by -C/-NUM options */\n  default_context = -1;\n  /* Changed by -o option */\n  only_matching = false;\n\n  /* Internationalization. */\n#if defined HAVE_SETLOCALE\n  setlocale (LC_ALL, \"\");\n#endif\n#if defined ENABLE_NLS\n  bindtextdomain (PACKAGE, LOCALEDIR);\n  textdomain (PACKAGE);\n#endif\n\n  init_localeinfo (&localeinfo);\n\n  atexit (clean_up_stdout);\n\n  last_recursive = 0;\n\n  prepended = prepend_default_options (getenv (\"GREP_OPTIONS\"), &argc, &argv);\n  if (prepended)\n    error (0, 0, _(\"warning: GREP_OPTIONS is deprecated;\"\n                   \" please use an alias or script\"));\n\n  while (prev_optind = optind,\n         (opt = get_nondigit_option (argc, argv, &default_context)) != -1)\n    switch (opt)\n      {\n      case 'A':\n        context_length_arg (optarg, &out_after);\n        break;\n\n      case 'B':\n        context_length_arg (optarg, &out_before);\n        break;\n\n      case 'C':\n        /* Set output match context, but let any explicit leading or\n           trailing amount specified with -A or -B stand. */\n        context_length_arg (optarg, &default_context);\n        break;\n\n      case 'D':\n        if (STREQ (optarg, \"read\"))\n          devices = READ_DEVICES;\n        else if (STREQ (optarg, \"skip\"))\n          devices = SKIP_DEVICES;\n        else\n          die (EXIT_TROUBLE, 0, _(\"unknown devices method\"));\n        break;\n\n      case 'E':\n        matcher = setmatcher (\"egrep\", matcher);\n        break;\n\n      case 'F':\n        matcher = setmatcher (\"fgrep\", matcher);\n        break;\n\n      case 'P':\n        matcher = setmatcher (\"perl\", matcher);\n        break;\n\n      case 'G':\n        matcher = setmatcher (\"grep\", matcher);\n        break;\n\n      case 'X': /* undocumented on purpose */\n        matcher = setmatcher (optarg, matcher);\n        break;\n\n      case 'H':\n        with_filenames = true;\n        no_filenames = false;\n        break;\n\n      case 'I':\n        binary_files = WITHOUT_MATCH_BINARY_FILES;\n        break;\n\n      case 'T':\n        align_tabs = true;\n        break;\n\n      case 'U':\n        if (O_BINARY)\n          binary = true;\n        break;\n\n      case 'u':\n        /* Obsolete option; it has no effect.  FIXME: Diagnose use of\n           this option starting in (say) the year 2020.  */\n        break;\n\n      case 'V':\n        show_version = true;\n        break;\n\n      case 'a':\n        binary_files = TEXT_BINARY_FILES;\n        break;\n\n      case 'b':\n        out_byte = true;\n        break;\n\n      case 'c':\n        count_matches = true;\n        break;\n\n      case 'd':\n        directories = XARGMATCH (\"--directories\", optarg,\n                                 directories_args, directories_types);\n        if (directories == RECURSE_DIRECTORIES)\n          last_recursive = prev_optind;\n        break;\n\n      case 'e':\n        cc = strlen (optarg);\n        if (keyalloc < keycc + cc + 1)\n          {\n            keyalloc = keycc + cc + 1;\n            keys = x2realloc (keys, &keyalloc);\n          }\n        oldcc = keycc;\n        memcpy (keys + oldcc, optarg, cc);\n        keycc += cc;\n        keys[keycc++] = '\\n';\n        fl_add (keys + oldcc, cc + 1, \"\");\n        break;\n\n      case 'f':\n        if (STREQ (optarg, \"-\"))\n          {\n            if (binary)\n              xset_binary_mode (STDIN_FILENO, O_BINARY);\n            fp = stdin;\n          }\n        else\n          {\n            fp = fopen (optarg, binary ? \"rb\" : \"r\");\n            if (!fp)\n              die (EXIT_TROUBLE, errno, \"%s\", optarg);\n          }\n        oldcc = keycc;\n        for (;; keycc += cc)\n          {\n            if (keyalloc <= keycc + 1)\n              keys = x2realloc (keys, &keyalloc);\n            cc = fread (keys + keycc, 1, keyalloc - (keycc + 1), fp);\n            if (cc == 0)\n              break;\n          }\n        fread_errno = errno;\n        if (ferror (fp))\n          die (EXIT_TROUBLE, fread_errno, \"%s\", optarg);\n        if (fp != stdin)\n          fclose (fp);\n        /* Append final newline if file ended in non-newline. */\n        if (oldcc != keycc && keys[keycc - 1] != '\\n')\n          keys[keycc++] = '\\n';\n        fl_add (keys + oldcc, keycc - oldcc, optarg);\n        break;\n\n      case 'h':\n        with_filenames = false;\n        no_filenames = true;\n        break;\n\n      case 'i':\n      case 'y':\t\t\t/* For old-timers . . . */\n        match_icase = true;\n        break;\n\n      case 'L':\n        /* Like -l, except list files that don't contain matches.\n           Inspired by the same option in Hume's gre. */\n        list_files = LISTFILES_NONMATCHING;\n        break;\n\n      case 'l':\n        list_files = LISTFILES_MATCHING;\n        break;\n\n      case 'm':\n        switch (xstrtoimax (optarg, 0, 10, &max_count, \"\"))\n          {\n          case LONGINT_OK:\n          case LONGINT_OVERFLOW:\n            break;\n\n          default:\n            die (EXIT_TROUBLE, 0, _(\"invalid max count\"));\n          }\n        break;\n\n      case 'n':\n        out_line = true;\n        break;\n\n      case 'o':\n        only_matching = true;\n        break;\n\n      case 'q':\n        exit_on_match = true;\n        exit_failure = 0;\n        break;\n\n      case 'R':\n        fts_options = basic_fts_options | FTS_LOGICAL;\n        FALLTHROUGH;\n      case 'r':\n        directories = RECURSE_DIRECTORIES;\n        last_recursive = prev_optind;\n        break;\n\n      case 's':\n        suppress_errors = true;\n        break;\n\n      case 'v':\n        out_invert = true;\n        break;\n\n      case 'w':\n        wordinit ();\n        match_words = true;\n        break;\n\n      case 'x':\n        match_lines = true;\n        break;\n\n      case 'Z':\n        filename_mask = 0;\n        break;\n\n      case 'z':\n        eolbyte = '\\0';\n        break;\n\n      case BINARY_FILES_OPTION:\n        if (STREQ (optarg, \"binary\"))\n          binary_files = BINARY_BINARY_FILES;\n        else if (STREQ (optarg, \"text\"))\n          binary_files = TEXT_BINARY_FILES;\n        else if (STREQ (optarg, \"without-match\"))\n          binary_files = WITHOUT_MATCH_BINARY_FILES;\n        else\n          die (EXIT_TROUBLE, 0, _(\"unknown binary-files type\"));\n        break;\n\n      case COLOR_OPTION:\n        if (optarg)\n          {\n            if (!strcasecmp (optarg, \"always\") || !strcasecmp (optarg, \"yes\")\n                || !strcasecmp (optarg, \"force\"))\n              color_option = 1;\n            else if (!strcasecmp (optarg, \"never\") || !strcasecmp (optarg, \"no\")\n                     || !strcasecmp (optarg, \"none\"))\n              color_option = 0;\n            else if (!strcasecmp (optarg, \"auto\") || !strcasecmp (optarg, \"tty\")\n                     || !strcasecmp (optarg, \"if-tty\"))\n              color_option = 2;\n            else\n              show_help = 1;\n          }\n        else\n          color_option = 2;\n        break;\n\n      case EXCLUDE_OPTION:\n      case INCLUDE_OPTION:\n        for (int cmd = 0; cmd < 2; cmd++)\n          {\n            if (!excluded_patterns[cmd])\n              excluded_patterns[cmd] = new_exclude ();\n            add_exclude (excluded_patterns[cmd], optarg,\n                         ((opt == INCLUDE_OPTION ? EXCLUDE_INCLUDE : 0)\n                          | exclude_options (cmd)));\n          }\n        break;\n      case EXCLUDE_FROM_OPTION:\n        for (int cmd = 0; cmd < 2; cmd++)\n          {\n            if (!excluded_patterns[cmd])\n              excluded_patterns[cmd] = new_exclude ();\n            if (add_exclude_file (add_exclude, excluded_patterns[cmd],\n                                  optarg, exclude_options (cmd), '\\n')\n                != 0)\n              die (EXIT_TROUBLE, errno, \"%s\", optarg);\n          }\n        break;\n\n      case EXCLUDE_DIRECTORY_OPTION:\n        strip_trailing_slashes (optarg);\n        for (int cmd = 0; cmd < 2; cmd++)\n          {\n            if (!excluded_directory_patterns[cmd])\n              excluded_directory_patterns[cmd] = new_exclude ();\n            add_exclude (excluded_directory_patterns[cmd], optarg,\n                         exclude_options (cmd));\n          }\n        break;\n\n      case GROUP_SEPARATOR_OPTION:\n        group_separator = optarg;\n        break;\n\n      case LINE_BUFFERED_OPTION:\n        line_buffered = true;\n        break;\n\n      case LABEL_OPTION:\n        label = optarg;\n        break;\n\n      case 0:\n        /* long options */\n        break;\n\n      default:\n        usage (EXIT_TROUBLE);\n        break;\n\n      }\n\n  if (show_version)\n    {\n      version_etc (stdout, getprogname (), PACKAGE_NAME, VERSION, AUTHORS,\n                   (char *) NULL);\n      return EXIT_SUCCESS;\n    }\n\n  if (show_help)\n    usage (EXIT_SUCCESS);\n\n  if (keys)\n    {\n      if (keycc == 0)\n        {\n          /* No keys were specified (e.g. -f /dev/null).  Match nothing.  */\n          out_invert ^= true;\n          match_lines = match_words = false;\n        }\n      else\n        /* Strip trailing newline. */\n        --keycc;\n    }\n  else if (optind < argc)\n    {\n      /* Make a copy so that it can be reallocated or freed later.  */\n      keycc = strlen (argv[optind]);\n      keys = xmemdup (argv[optind++], keycc + 1);\n      fl_add (keys, keycc, \"\");\n      n_patterns++;\n    }\n  else\n    usage (EXIT_TROUBLE);\n\n  bool possibly_tty = false;\n  struct stat tmp_stat;\n  if (! exit_on_match && fstat (STDOUT_FILENO, &tmp_stat) == 0)\n    {\n      if (S_ISREG (tmp_stat.st_mode))\n        out_stat = tmp_stat;\n      else if (S_ISCHR (tmp_stat.st_mode))\n        {\n          struct stat null_stat;\n          if (stat (\"/dev/null\", &null_stat) == 0\n              && SAME_INODE (tmp_stat, null_stat))\n            dev_null_output = true;\n          else\n            possibly_tty = true;\n        }\n    }\n\n  /* POSIX says -c, -l and -q are mutually exclusive.  In this\n     implementation, -q overrides -l and -L, which in turn override -c.  */\n  if (exit_on_match | dev_null_output)\n    list_files = LISTFILES_NONE;\n  if ((exit_on_match | dev_null_output) || list_files != LISTFILES_NONE)\n    {\n      count_matches = false;\n      done_on_match = true;\n    }\n  out_quiet = count_matches | done_on_match;\n\n  if (out_after < 0)\n    out_after = default_context;\n  if (out_before < 0)\n    out_before = default_context;\n\n  /* If it is easy to see that matching cannot succeed (e.g., 'grep -f\n     /dev/null'), fail without reading the input.  */\n  if ((max_count == 0\n       || (keycc == 0 && out_invert && !match_lines && !match_words))\n      && list_files != LISTFILES_NONMATCHING)\n    return EXIT_FAILURE;\n\n  if (color_option == 2)\n    color_option = possibly_tty && should_colorize () && isatty (STDOUT_FILENO);\n  init_colorize ();\n\n  if (color_option)\n    {\n      /* Legacy.  */\n      char *userval = getenv (\"GREP_COLOR\");\n      if (userval != NULL && *userval != '\\0')\n        selected_match_color = context_match_color = userval;\n\n      /* New GREP_COLORS has priority.  */\n      parse_grep_colors ();\n    }\n\n  initialize_unibyte_mask ();\n\n  if (matcher < 0)\n    matcher = G_MATCHER_INDEX;\n\n  /* In a single-byte locale, switch from -F to -G if it is a single\n     pattern that matches words, where -G is typically faster.  In a\n     multi-byte locale, switch if the patterns have an encoding error\n     (where -F does not work) or if -i and the patterns will not work\n     for -iF.  */\n  if (matcher == F_MATCHER_INDEX\n      && (! localeinfo.multibyte\n          ? n_patterns == 1 && match_words\n          : (contains_encoding_error (keys, keycc)\n             || (match_icase && !fgrep_icase_available (keys, keycc)))))\n    {\n      fgrep_to_grep_pattern (&keys, &keycc);\n      matcher = G_MATCHER_INDEX;\n    }\n  /* With two or more patterns, if -F works then switch from either -E\n     or -G, as -F is probably faster then.  */\n  else if ((matcher == G_MATCHER_INDEX || matcher == E_MATCHER_INDEX)\n           && 1 < n_patterns)\n    matcher = try_fgrep_pattern (matcher, keys, &keycc);\n\n  execute = matchers[matcher].execute;\n  compiled_pattern = matchers[matcher].compile (keys, keycc,\n                                                matchers[matcher].syntax);\n  /* We need one byte prior and one after.  */\n  char eolbytes[3] = { 0, eolbyte, 0 };\n  size_t match_size;\n  skip_empty_lines = ((execute (compiled_pattern, eolbytes + 1, 1,\n                                &match_size, NULL) == 0)\n                      == out_invert);\n\n  if ((argc - optind > 1 && !no_filenames) || with_filenames)\n    out_file = 1;\n\n  if (binary)\n    xset_binary_mode (STDOUT_FILENO, O_BINARY);\n\n  /* Prefer sysconf for page size, as getpagesize typically returns int.  */\n#ifdef _SC_PAGESIZE\n  long psize = sysconf (_SC_PAGESIZE);\n#else\n  long psize = getpagesize ();\n#endif\n  if (! (0 < psize && psize <= (SIZE_MAX - sizeof (uword)) / 2))\n    abort ();\n  pagesize = psize;\n  bufalloc = ALIGN_TO (INITIAL_BUFSIZE, pagesize) + pagesize + sizeof (uword);\n  buffer = xmalloc (bufalloc);\n\n  if (fts_options & FTS_LOGICAL && devices == READ_COMMAND_LINE_DEVICES)\n    devices = READ_DEVICES;\n\n  char *const *files;\n  if (optind < argc)\n    {\n      files = argv + optind;\n    }\n  else if (directories == RECURSE_DIRECTORIES && prepended < last_recursive)\n    {\n      static char *const cwd_only[] = { (char *) \".\", NULL };\n      files = cwd_only;\n      omit_dot_slash = true;\n    }\n  else\n    {\n      static char *const stdin_only[] = { (char *) \"-\", NULL };\n      files = stdin_only;\n    }\n\n  bool status = true;\n  do\n    status &= grep_command_line_arg (*files++);\n  while (*files != NULL);\n\n  /* We register via atexit to test stdout.  */\n  return errseen ? EXIT_TROUBLE : status;\n}",
      "lines": 521,
      "depth": 19,
      "decorators": [
        "int"
      ]
    }
  },
  "grep/grep-3.1/src/grep.h": {},
  "grep/grep-3.1/src/kwsearch.c": {
    "Fcompile": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        144,
        1
      ],
      "content": "void *\nFcompile (char *pattern, size_t size, reg_syntax_t ignored)\n{\n  kwset_t kwset;\n  ptrdiff_t total = size;\n  char *buf = NULL;\n  size_t bufalloc = 0;\n\n  kwset = kwsinit (true);\n\n  char const *p = pattern;\n  do\n    {\n      ptrdiff_t len;\n      char const *sep = memchr (p, '\\n', total);\n      if (sep)\n        {\n          len = sep - p;\n          sep++;\n          total -= (len + 1);\n        }\n      else\n        {\n          len = total;\n          total = 0;\n        }\n\n      if (match_lines)\n        {\n          if (eolbyte == '\\n' && pattern < p && sep)\n            p--;\n          else\n            {\n              if (bufalloc < len + 2)\n                {\n                  free (buf);\n                  bufalloc = len + 2;\n                  buf = x2realloc (NULL, &bufalloc);\n                  buf[0] = eolbyte;\n                }\n              memcpy (buf + 1, p, len);\n              buf[len + 1] = eolbyte;\n              p = buf;\n            }\n          len += 2;\n        }\n      kwsincr (kwset, p, len);\n\n      p = sep;\n    }\n  while (p);\n\n  free (buf);\n  ptrdiff_t words = kwswords (kwset);\n\n  if (match_icase)\n    {\n      /* For each pattern character C that has a case folded\n         counterpart F that is multibyte and so cannot easily be\n         implemented via translating a single byte, append a pattern\n         containing just F.  That way, if the data contains F, the\n         matcher can fall back on DFA.  For example, if C is 'i' and\n         the locale is en_US.utf8, append a pattern containing just\n         the character U+0131 (LATIN SMALL LETTER DOTLESS I), so that\n         Fexecute will use a DFA if the data contain U+0131.  */\n      mbstate_t mbs = { 0 };\n      char checked[NCHAR] = {0,};\n      for (p = pattern; p < pattern + size; p++)\n        {\n          unsigned char c = *p;\n          if (checked[c])\n            continue;\n          checked[c] = true;\n\n          wint_t wc = localeinfo.sbctowc[c];\n          wchar_t folded[CASE_FOLDED_BUFSIZE];\n\n          for (int i = case_folded_counterparts (wc, folded); 0 <= --i; )\n            {\n              char s[MB_LEN_MAX];\n              int nbytes = wcrtomb (s, folded[i], &mbs);\n              if (1 < nbytes)\n                kwsincr (kwset, s, nbytes);\n            }\n        }\n    }\n\n  kwsprep (kwset);\n\n  struct kwsearch *kwsearch = xmalloc (sizeof *kwsearch);\n  kwsearch->kwset = kwset;\n  kwsearch->words = words;\n  kwsearch->pattern = pattern;\n  kwsearch->size = size;\n  kwsearch->re = NULL;\n  return kwsearch;\n}",
      "lines": 97,
      "depth": 16,
      "decorators": [
        "void",
        "*\nFcompile (char *pattern, size_t size, reg_syntax_t ignored)",
        "*"
      ]
    },
    "Fexecute": {
      "start_point": [
        150,
        0
      ],
      "end_point": [
        270,
        1
      ],
      "content": "size_t\nFexecute (void *vcp, char const *buf, size_t size, size_t *match_size,\n          char const *start_ptr)\n{\n  char const *beg, *end, *mb_start;\n  ptrdiff_t len;\n  char eol = eolbyte;\n  struct kwsmatch kwsmatch;\n  size_t ret_val;\n  bool mb_check;\n  bool longest;\n  struct kwsearch *kwsearch = vcp;\n  kwset_t kwset = kwsearch->kwset;\n\n  if (match_lines)\n    mb_check = longest = false;\n  else\n    {\n      mb_check = localeinfo.multibyte & !localeinfo.using_utf8;\n      longest = mb_check | !!start_ptr | match_words;\n    }\n\n  for (mb_start = beg = start_ptr ? start_ptr : buf; beg <= buf + size; beg++)\n    {\n      ptrdiff_t offset = kwsexec (kwset, beg - match_lines,\n                                  buf + size - beg + match_lines, &kwsmatch,\n                                  longest);\n      if (offset < 0)\n        break;\n      len = kwsmatch.size[0] - 2 * match_lines;\n\n      if (kwsearch->words <= kwsmatch.index)\n        {\n          /* The data contain a multibyte character that matches\n             some pattern character that is a case folded counterpart.\n             Since the kwset code cannot handle this case, fall back\n             on the DFA code, which can.  */\n          if (! kwsearch->re)\n            {\n              fgrep_to_grep_pattern (&kwsearch->pattern, &kwsearch->size);\n              kwsearch->re = GEAcompile (kwsearch->pattern, kwsearch->size,\n                                         RE_SYNTAX_GREP);\n            }\n          return EGexecute (kwsearch->re, buf, size, match_size, start_ptr);\n        }\n\n      if (mb_check && mb_goback (&mb_start, beg + offset, buf + size) != 0)\n        {\n          /* We have matched a single byte that is not at the beginning of a\n             multibyte character.  mb_goback has advanced MB_START past that\n             multibyte character.  Now, we want to position BEG so that the\n             next kwsexec search starts there.  Thus, to compensate for the\n             for-loop's BEG++, above, subtract one here.  This code is\n             unusually hard to reach, and exceptionally, let's show how to\n             trigger it here:\n\n               printf '\\203AA\\n'|LC_ALL=ja_JP.SHIFT_JIS src/grep -F A\n\n             That assumes the named locale is installed.\n             Note that your system's shift-JIS locale may have a different\n             name, possibly including \"sjis\".  */\n          beg = mb_start - 1;\n          continue;\n        }\n      beg += offset;\n      if (!!start_ptr & !match_words)\n        goto success_in_beg_and_len;\n      if (match_lines)\n        {\n          len += start_ptr == NULL;\n          goto success_in_beg_and_len;\n        }\n      if (! match_words)\n        goto success;\n\n      /* Succeed if the preceding and following characters are word\n         constituents.  If the following character is not a word\n         constituent, keep trying with shorter matches.  */\n      char const *bol = memrchr (mb_start, eol, beg - mb_start);\n      if (bol)\n        mb_start = bol + 1;\n      if (! wordchar_prev (mb_start, beg, buf + size))\n        for (;;)\n          {\n            if (! wordchar_next (beg + len, buf + size))\n              {\n                if (start_ptr)\n                  goto success_in_beg_and_len;\n                else\n                  goto success;\n              }\n            if (!len)\n              break;\n            offset = kwsexec (kwset, beg, --len, &kwsmatch, true);\n            if (offset != 0)\n              break;\n            len = kwsmatch.size[0];\n          }\n\n      /* No word match was found at BEG.  Skip past word constituents,\n         since they cannot precede the next match and not skipping\n         them could make things much slower.  */\n      beg += wordchars_size (beg, buf + size);\n      mb_start = beg;\n    } /* for (beg in buf) */\n\n  return -1;\n\n success:\n  end = memchr (beg + len, eol, (buf + size) - (beg + len));\n  end = end ? end + 1 : buf + size;\n  beg = memrchr (buf, eol, beg - buf);\n  beg = beg ? beg + 1 : buf;\n  len = end - beg;\n success_in_beg_and_len:;\n  size_t off = beg - buf;\n\n  *match_size = len;\n  ret_val = off;\n  return ret_val;\n}",
      "lines": 121,
      "depth": 14,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/src/kwset.c": {
    "U": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "content": "static unsigned char\nU (char ch)\n{\n  return to_uchar (ch);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "unsigned char",
        "unsigned",
        "char"
      ]
    },
    "tr": {
      "start_point": [
        128,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "content": "static inline char\ntr (char const *trans, char c)\n{\n  return trans ? trans[U(c)] : c;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "char"
      ]
    },
    "kwsalloc": {
      "start_point": [
        142,
        0
      ],
      "end_point": [
        164,
        1
      ],
      "content": "kwset_t\nkwsalloc (char const *trans)\n{\n  struct kwset *kwset = xmalloc (sizeof *kwset);\n\n  obstack_init (&kwset->obstack);\n  kwset->words = 0;\n  kwset->trie = obstack_alloc (&kwset->obstack, sizeof *kwset->trie);\n  kwset->trie->accepting = 0;\n  kwset->trie->links = NULL;\n  kwset->trie->parent = NULL;\n  kwset->trie->next = NULL;\n  kwset->trie->fail = NULL;\n  kwset->trie->depth = 0;\n  kwset->trie->shift = 0;\n  kwset->mind = PTRDIFF_MAX;\n  kwset->maxd = -1;\n  kwset->target = NULL;\n  kwset->trans = trans;\n  kwset->kwsexec = acexec;\n\n  return kwset;\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "kwset_t"
      ]
    },
    "kwsincr": {
      "start_point": [
        171,
        0
      ],
      "end_point": [
        319,
        1
      ],
      "content": "void\nkwsincr (kwset_t kwset, char const *text, ptrdiff_t len)\n{\n  assume (0 <= len);\n  struct trie *trie = kwset->trie;\n  char const *trans = kwset->trans;\n  bool reverse = kwset->kwsexec == bmexec;\n\n  if (reverse)\n    text += len;\n\n  /* Descend the trie (built of keywords) character-by-character,\n     installing new nodes when necessary.  */\n  while (len--)\n    {\n      unsigned char uc = reverse ? *--text : *text++;\n      unsigned char label = trans ? trans[uc] : uc;\n\n      /* Descend the tree of outgoing links for this trie node,\n         looking for the current character and keeping track\n         of the path followed.  */\n      struct tree *cur = trie->links;\n      struct tree *links[DEPTH_SIZE];\n      enum { L, R } dirs[DEPTH_SIZE];\n      links[0] = (struct tree *) &trie->links;\n      dirs[0] = L;\n      ptrdiff_t depth = 1;\n\n      while (cur && label != cur->label)\n        {\n          links[depth] = cur;\n          if (label < cur->label)\n            dirs[depth++] = L, cur = cur->llink;\n          else\n            dirs[depth++] = R, cur = cur->rlink;\n        }\n\n      /* The current character doesn't have an outgoing link at\n         this trie node, so build a new trie node and install\n         a link in the current trie node's tree.  */\n      if (!cur)\n        {\n          cur = obstack_alloc (&kwset->obstack, sizeof *cur);\n          cur->llink = NULL;\n          cur->rlink = NULL;\n          cur->trie = obstack_alloc (&kwset->obstack, sizeof *cur->trie);\n          cur->trie->accepting = 0;\n          cur->trie->links = NULL;\n          cur->trie->parent = trie;\n          cur->trie->next = NULL;\n          cur->trie->fail = NULL;\n          cur->trie->depth = trie->depth + 1;\n          cur->trie->shift = 0;\n          cur->label = label;\n          cur->balance = 0;\n\n          /* Install the new tree node in its parent.  */\n          if (dirs[--depth] == L)\n            links[depth]->llink = cur;\n          else\n            links[depth]->rlink = cur;\n\n          /* Back up the tree fixing the balance flags.  */\n          while (depth && !links[depth]->balance)\n            {\n              if (dirs[depth] == L)\n                --links[depth]->balance;\n              else\n                ++links[depth]->balance;\n              --depth;\n            }\n\n          /* Rebalance the tree by pointer rotations if necessary.  */\n          if (depth && ((dirs[depth] == L && --links[depth]->balance)\n                        || (dirs[depth] == R && ++links[depth]->balance)))\n            {\n              struct tree *t, *r, *l, *rl, *lr;\n\n              switch (links[depth]->balance)\n                {\n                case (char) -2:\n                  switch (dirs[depth + 1])\n                    {\n                    case L:\n                      r = links[depth], t = r->llink, rl = t->rlink;\n                      t->rlink = r, r->llink = rl;\n                      t->balance = r->balance = 0;\n                      break;\n                    case R:\n                      r = links[depth], l = r->llink, t = l->rlink;\n                      rl = t->rlink, lr = t->llink;\n                      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;\n                      l->balance = t->balance != 1 ? 0 : -1;\n                      r->balance = t->balance != (char) -1 ? 0 : 1;\n                      t->balance = 0;\n                      break;\n                    default:\n                      abort ();\n                    }\n                  break;\n                case 2:\n                  switch (dirs[depth + 1])\n                    {\n                    case R:\n                      l = links[depth], t = l->rlink, lr = t->llink;\n                      t->llink = l, l->rlink = lr;\n                      t->balance = l->balance = 0;\n                      break;\n                    case L:\n                      l = links[depth], r = l->rlink, t = r->llink;\n                      lr = t->llink, rl = t->rlink;\n                      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;\n                      l->balance = t->balance != 1 ? 0 : -1;\n                      r->balance = t->balance != (char) -1 ? 0 : 1;\n                      t->balance = 0;\n                      break;\n                    default:\n                      abort ();\n                    }\n                  break;\n                default:\n                  abort ();\n                }\n\n              if (dirs[depth - 1] == L)\n                links[depth - 1]->llink = t;\n              else\n                links[depth - 1]->rlink = t;\n            }\n        }\n\n      trie = cur->trie;\n    }\n\n  /* Mark the node finally reached as accepting, encoding the\n     index number of this word in the keyword set so far.  */\n  if (!trie->accepting)\n    {\n      size_t words = kwset->words;\n      trie->accepting = 2 * words + 1;\n    }\n  ++kwset->words;\n\n  /* Keep track of the longest and shortest string of the keyword set.  */\n  if (trie->depth < kwset->mind)\n    kwset->mind = trie->depth;\n  if (trie->depth > kwset->maxd)\n    kwset->maxd = trie->depth;\n}",
      "lines": 149,
      "depth": 21,
      "decorators": [
        "void"
      ]
    },
    "kwswords": {
      "start_point": [
        321,
        0
      ],
      "end_point": [
        325,
        1
      ],
      "content": "ptrdiff_t\nkwswords (kwset_t kwset)\n{\n  return kwset->words;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "ptrdiff_t"
      ]
    },
    "enqueue": {
      "start_point": [
        329,
        0
      ],
      "end_point": [
        337,
        1
      ],
      "content": "static void\nenqueue (struct tree *tree, struct trie **last)\n{\n  if (!tree)\n    return;\n  enqueue (tree->llink, last);\n  enqueue (tree->rlink, last);\n  (*last) = (*last)->next = tree->trie;\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "treefails": {
      "start_point": [
        342,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "content": "static void\ntreefails (struct tree const *tree, struct trie const *fail,\n           struct trie *recourse, bool reverse)\n{\n  struct tree *cur;\n\n  if (!tree)\n    return;\n\n  treefails (tree->llink, fail, recourse, reverse);\n  treefails (tree->rlink, fail, recourse, reverse);\n\n  /* Find, in the chain of fails going back to the root, the first\n     node that has a descendant on the current label.  */\n  while (fail)\n    {\n      cur = fail->links;\n      while (cur && tree->label != cur->label)\n        if (tree->label < cur->label)\n          cur = cur->llink;\n        else\n          cur = cur->rlink;\n      if (cur)\n        {\n          tree->trie->fail = cur->trie;\n          if (!reverse && cur->trie->accepting && !tree->trie->accepting)\n            tree->trie->accepting = SIZE_MAX;\n          return;\n        }\n      fail = fail->fail;\n    }\n\n  tree->trie->fail = recourse;\n}",
      "lines": 34,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "treedelta": {
      "start_point": [
        379,
        0
      ],
      "end_point": [
        388,
        1
      ],
      "content": "static void\ntreedelta (struct tree const *tree, ptrdiff_t depth, unsigned char delta[])\n{\n  if (!tree)\n    return;\n  treedelta (tree->llink, depth, delta);\n  treedelta (tree->rlink, depth, delta);\n  if (depth < delta[tree->label])\n    delta[tree->label] = depth;\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_GL_ATTRIBUTE_PURE": {
      "start_point": [
        391,
        0
      ],
      "end_point": [
        406,
        1
      ],
      "content": "static bool _GL_ATTRIBUTE_PURE\nhasevery (struct tree const *a, struct tree const *b)\n{\n  if (!b)\n    return true;\n  if (!hasevery (a, b->llink))\n    return false;\n  if (!hasevery (a, b->rlink))\n    return false;\n  while (a && b->label != a->label)\n    if (b->label < a->label)\n      a = a->llink;\n    else\n      a = a->rlink;\n  return !!a;\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "treenext": {
      "start_point": [
        410,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "content": "static void\ntreenext (struct tree const *tree, struct trie *next[])\n{\n  if (!tree)\n    return;\n  treenext (tree->llink, next);\n  treenext (tree->rlink, next);\n  next[tree->label] = tree->trie;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "kwsprep": {
      "start_point": [
        421,
        0
      ],
      "end_point": [
        580,
        1
      ],
      "content": "void\nkwsprep (kwset_t kwset)\n{\n  char const *trans = kwset->trans;\n  ptrdiff_t i;\n  unsigned char deltabuf[NCHAR];\n  unsigned char *delta = trans ? deltabuf : kwset->delta;\n  struct trie *curr, *last;\n\n  /* Use Boyer-Moore if just one pattern, Aho-Corasick otherwise.  */\n  bool reverse = kwset->words == 1;\n\n  if (reverse)\n    {\n      kwset_t new_kwset;\n\n      /* Enqueue the immediate descendants in the level order queue.  */\n      for (curr = last = kwset->trie; curr; curr = curr->next)\n        enqueue (curr->links, &last);\n\n      /* Looking for just one string.  Extract it from the trie.  */\n      kwset->target = obstack_alloc (&kwset->obstack, kwset->mind);\n      for (i = 0, curr = kwset->trie; i < kwset->mind; ++i)\n        {\n          kwset->target[i] = curr->links->label;\n          curr = curr->next;\n        }\n\n      new_kwset = kwsalloc (kwset->trans);\n      new_kwset->kwsexec = bmexec;\n      kwsincr (new_kwset, kwset->target, kwset->mind);\n      obstack_free (&kwset->obstack, NULL);\n      *kwset = *new_kwset;\n      free (new_kwset);\n    }\n\n  /* Initial values for the delta table; will be changed later.  The\n     delta entry for a given character is the smallest depth of any\n     node at which an outgoing edge is labeled by that character.  */\n  memset (delta, MIN (kwset->mind, UCHAR_MAX), sizeof deltabuf);\n\n  /* Traverse the nodes of the trie in level order, simultaneously\n     computing the delta table, failure function, and shift function.  */\n  for (curr = last = kwset->trie; curr; curr = curr->next)\n    {\n      /* Enqueue the immediate descendants in the level order queue.  */\n      enqueue (curr->links, &last);\n\n      /* Update the delta table for the descendants of this node.  */\n      treedelta (curr->links, curr->depth, delta);\n\n      /* Compute the failure function for the descendants of this node.  */\n      treefails (curr->links, curr->fail, kwset->trie, reverse);\n\n      if (reverse)\n        {\n          curr->shift = kwset->mind;\n          curr->maxshift = kwset->mind;\n\n          /* Update the shifts at each node in the current node's chain\n             of fails back to the root.  */\n          struct trie *fail;\n          for (fail = curr->fail; fail; fail = fail->fail)\n            {\n              /* If the current node has some outgoing edge that the fail\n                 doesn't, then the shift at the fail should be no larger\n                 than the difference of their depths.  */\n              if (!hasevery (fail->links, curr->links))\n                if (curr->depth - fail->depth < fail->shift)\n                  fail->shift = curr->depth - fail->depth;\n\n              /* If the current node is accepting then the shift at the\n                 fail and its descendants should be no larger than the\n                 difference of their depths.  */\n              if (curr->accepting && fail->maxshift > curr->depth - fail->depth)\n                fail->maxshift = curr->depth - fail->depth;\n            }\n        }\n    }\n\n  if (reverse)\n    {\n      /* Traverse the trie in level order again, fixing up all nodes whose\n         shift exceeds their inherited maxshift.  */\n      for (curr = kwset->trie->next; curr; curr = curr->next)\n        {\n          if (curr->maxshift > curr->parent->maxshift)\n            curr->maxshift = curr->parent->maxshift;\n          if (curr->shift > curr->maxshift)\n            curr->shift = curr->maxshift;\n        }\n    }\n\n  /* Create a vector, indexed by character code, of the outgoing links\n     from the root node.  Accumulate GC1 and GC1HELP.  */\n  struct trie *nextbuf[NCHAR];\n  struct trie **next = trans ? nextbuf : kwset->next;\n  memset (next, 0, sizeof nextbuf);\n  treenext (kwset->trie->links, next);\n  int gc1 = -2;\n  int gc1help = -1;\n  for (i = 0; i < NCHAR; i++)\n    {\n      int ti = i;\n      if (trans)\n        {\n          ti = U(trans[i]);\n          kwset->next[i] = next[ti];\n        }\n      if (kwset->next[i])\n        {\n          if (gc1 < -1)\n            {\n              gc1 = ti;\n              gc1help = i;\n            }\n          else if (gc1 == ti)\n            gc1help = gc1help == ti ? i : -1;\n          else if (i == ti && gc1 == gc1help)\n            gc1help = i;\n          else\n            gc1 = -1;\n        }\n    }\n  kwset->gc1 = gc1;\n  kwset->gc1help = gc1help;\n\n  if (reverse)\n    {\n      /* Looking for just one string.  Extract it from the trie.  */\n      kwset->target = obstack_alloc (&kwset->obstack, kwset->mind);\n      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)\n        {\n          kwset->target[i] = curr->links->label;\n          curr = curr->next;\n        }\n\n      if (kwset->mind > 1)\n        {\n          /* Looking for the delta2 shift that might be made after a\n             backwards match has failed.  Extract it from the trie.  */\n          kwset->shift\n            = obstack_alloc (&kwset->obstack,\n                             sizeof *kwset->shift * (kwset->mind - 1));\n          for (i = 0, curr = kwset->trie->next; i < kwset->mind - 1; ++i)\n            {\n              kwset->shift[i] = curr->shift;\n              curr = curr->next;\n            }\n\n          /* The penultimate byte.  */\n          kwset->gc2 = tr (trans, kwset->target[kwset->mind - 2]);\n        }\n    }\n\n  /* Fix things up for any translation table.  */\n  if (trans)\n    for (i = 0; i < NCHAR; ++i)\n      kwset->delta[i] = delta[U(trans[i])];\n}",
      "lines": 160,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "bm_delta2_search": {
      "start_point": [
        590,
        0
      ],
      "end_point": [
        634,
        1
      ],
      "content": "static inline bool\nbm_delta2_search (char const **tpp, char const *ep, char const *sp,\n                  ptrdiff_t len,\n                  char const *trans, char gc1, char gc2,\n                  unsigned char const *d1, kwset_t kwset)\n{\n  char const *tp = *tpp;\n  ptrdiff_t d = len, skip = 0;\n\n  while (true)\n    {\n      ptrdiff_t i = 2;\n      if (tr (trans, tp[-2]) == gc2)\n        {\n          while (++i <= d)\n            if (tr (trans, tp[-i]) != tr (trans, sp[-i]))\n              break;\n          if (i > d)\n            {\n              for (i = d + skip + 1; i <= len; ++i)\n                if (tr (trans, tp[-i]) != tr (trans, sp[-i]))\n                  break;\n              if (i > len)\n                {\n                  *tpp = tp - len;\n                  return true;\n                }\n            }\n        }\n\n      tp += d = kwset->shift[i - 2];\n      if (tp > ep)\n        break;\n      if (tr (trans, tp[-1]) != gc1)\n        {\n          if (d1)\n            tp += d1[U(tp[-1])];\n          break;\n        }\n      skip = i - 1;\n    }\n\n  *tpp = tp;\n  return false;\n}",
      "lines": 45,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "bool"
      ]
    },
    "memchr_kwset": {
      "start_point": [
        639,
        0
      ],
      "end_point": [
        663,
        1
      ],
      "content": "static char const *\nmemchr_kwset (char const *s, ptrdiff_t n, kwset_t kwset)\n{\n  char const *slim = s + n;\n  if (kwset->gc1help < 0)\n    {\n      for (; s < slim; s++)\n        if (kwset->next[U(*s)])\n          return s;\n    }\n  else\n    {\n      int small_heuristic = 2;\n      size_t small_bytes = small_heuristic * sizeof (unsigned long int);\n      while (s < slim)\n        {\n          if (kwset->next[U(*s)])\n            return s;\n          s++;\n          if ((uintptr_t) s % small_bytes == 0)\n            return memchr2 (s, kwset->gc1, kwset->gc1help, slim - s);\n        }\n    }\n  return NULL;\n}",
      "lines": 25,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "char",
        "const",
        "const",
        "*\nmemchr_kwset (char const *s, ptrdiff_t n, kwset_t kwset)",
        "*"
      ]
    },
    "bmexec_trans": {
      "start_point": [
        666,
        0
      ],
      "end_point": [
        749,
        1
      ],
      "content": "static inline ptrdiff_t\nbmexec_trans (kwset_t kwset, char const *text, ptrdiff_t size)\n{\n  assume (0 <= size);\n  unsigned char const *d1;\n  char const *ep, *sp, *tp;\n  int d;\n  ptrdiff_t len = kwset->mind;\n  char const *trans = kwset->trans;\n\n  if (len == 0)\n    return 0;\n  if (len > size)\n    return -1;\n  if (len == 1)\n    {\n      tp = memchr_kwset (text, size, kwset);\n      return tp ? tp - text : -1;\n    }\n\n  d1 = kwset->delta;\n  sp = kwset->target + len;\n  tp = text + len;\n  char gc1 = kwset->gc1;\n  char gc2 = kwset->gc2;\n\n  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2).  */\n  ptrdiff_t len12;\n  if (!INT_MULTIPLY_WRAPV (len, 12, &len12) && len12 < size)\n    /* 11 is not a bug, the initial offset happens only once.  */\n    for (ep = text + size - 11 * len; tp <= ep; )\n      {\n        char const *tp0 = tp;\n        d = d1[U(tp[-1])], tp += d;\n        d = d1[U(tp[-1])], tp += d;\n        if (d != 0)\n          {\n            d = d1[U(tp[-1])], tp += d;\n            d = d1[U(tp[-1])], tp += d;\n            d = d1[U(tp[-1])], tp += d;\n            if (d != 0)\n              {\n                d = d1[U(tp[-1])], tp += d;\n                d = d1[U(tp[-1])], tp += d;\n                d = d1[U(tp[-1])], tp += d;\n                if (d != 0)\n                  {\n                    d = d1[U(tp[-1])], tp += d;\n                    d = d1[U(tp[-1])], tp += d;\n\n                    /* As a heuristic, prefer memchr to seeking by\n                       delta1 when the latter doesn't advance much.  */\n                    int advance_heuristic = 16 * sizeof (long);\n                    if (advance_heuristic <= tp - tp0)\n                      continue;\n                    tp--;\n                    tp = memchr_kwset (tp, text + size - tp, kwset);\n                    if (! tp)\n                      return -1;\n                    tp++;\n                    if (ep <= tp)\n                      break;\n                  }\n              }\n          }\n        if (bm_delta2_search (&tp, ep, sp, len, trans, gc1, gc2, d1, kwset))\n          return tp - text;\n      }\n\n  /* Now only a few characters are left to search.  Carefully avoid\n     ever producing an out-of-bounds pointer.  */\n  ep = text + size;\n  d = d1[U(tp[-1])];\n  while (d <= ep - tp)\n    {\n      d = d1[U((tp += d)[-1])];\n      if (d != 0)\n        continue;\n      if (bm_delta2_search (&tp, ep, sp, len, trans, gc1, gc2, NULL, kwset))\n        return tp - text;\n    }\n\n  return -1;\n}",
      "lines": 84,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "ptrdiff_t"
      ]
    },
    "bmexec": {
      "start_point": [
        752,
        0
      ],
      "end_point": [
        770,
        1
      ],
      "content": "static ptrdiff_t\nbmexec (kwset_t kwset, char const *text, ptrdiff_t size,\n        struct kwsmatch *kwsmatch, bool longest)\n{\n  /* Help the compiler inline in two ways, depending on whether\n     kwset->trans is null.  */\n  ptrdiff_t ret = (IGNORE_DUPLICATE_BRANCH_WARNING\n                   (kwset->trans\n                    ? bmexec_trans (kwset, text, size)\n                    : bmexec_trans (kwset, text, size)));\n  if (0 <= ret)\n    {\n       kwsmatch->index = 0;\n       kwsmatch->offset[0] = ret;\n       kwsmatch->size[0] = kwset->mind;\n    }\n\n  return ret;\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "ptrdiff_t"
      ]
    },
    "acexec_trans": {
      "start_point": [
        774,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "static inline ptrdiff_t\nacexec_trans (kwset_t kwset, char const *text, ptrdiff_t len,\n              struct kwsmatch *kwsmatch, bool longest)\n{\n  struct trie const *trie, *accept;\n  char const *tp, *left, *lim;\n  struct tree const *tree;\n  char const *trans;\n\n  /* Initialize register copies and look for easy ways out.  */\n  if (len < kwset->mind)\n    return -1;\n  trans = kwset->trans;\n  trie = kwset->trie;\n  lim = text + len;\n  tp = text;\n\n  if (!trie->accepting)\n    {\n      unsigned char c;\n      int gc1 = kwset->gc1;\n\n      while (true)\n        {\n          if (gc1 < 0)\n            {\n              while (! (trie = kwset->next[c = tr (trans, *tp++)]))\n                if (tp >= lim)\n                  return -1;\n            }\n          else\n            {\n              tp = memchr_kwset (tp, lim - tp, kwset);\n              if (!tp)\n                return -1;\n              c = tr (trans, *tp++);\n              trie = kwset->next[c];\n            }\n\n          while (true)\n            {\n              if (trie->accepting)\n                goto match;\n              if (tp >= lim)\n                return -1;\n              c = tr (trans, *tp++);\n\n              for (tree = trie->links; c != tree->label; )\n                {\n                  tree = c < tree->label ? tree->llink : tree->rlink;\n                  if (! tree)\n                    {\n                      trie = trie->fail;\n                      if (!trie)\n                        {\n                          trie = kwset->next[c];\n                          if (trie)\n                            goto have_trie;\n                          if (tp >= lim)\n                            return -1;\n                          goto next_c;\n                        }\n                      if (trie->accepting)\n                        {\n                          --tp;\n                          goto match;\n                        }\n                      tree = trie->links;\n                    }\n                }\n              trie = tree->trie;\n            have_trie:;\n            }\n        next_c:;\n        }\n    }\n\n match:\n  accept = trie;\n  while (accept->accepting == SIZE_MAX)\n    accept = accept->fail;\n  left = tp - accept->depth;\n\n  /* Try left-most longest match.  */\n  if (longest)\n    {\n      while (tp < lim)\n        {\n          struct trie const *accept1;\n          char const *left1;\n          unsigned char c = tr (trans, *tp++);\n\n          do\n            {\n              tree = trie->links;\n              while (tree && c != tree->label)\n                tree = c < tree->label ? tree->llink : tree->rlink;\n            }\n          while (!tree && (trie = trie->fail) && accept->depth <= trie->depth);\n\n          if (!tree)\n            break;\n          trie = tree->trie;\n          if (trie->accepting)\n            {\n              accept1 = trie;\n              while (accept1->accepting == SIZE_MAX)\n                accept1 = accept1->fail;\n              left1 = tp - accept1->depth;\n              if (left1 <= left)\n                {\n                  left = left1;\n                  accept = accept1;\n                }\n            }\n        }\n    }\n\n  kwsmatch->index = accept->accepting / 2;\n  kwsmatch->offset[0] = left - text;\n  kwsmatch->size[0] = accept->depth;\n\n  return left - text;\n}",
      "lines": 124,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "ptrdiff_t"
      ]
    },
    "acexec": {
      "start_point": [
        900,
        0
      ],
      "end_point": [
        911,
        1
      ],
      "content": "static ptrdiff_t\nacexec (kwset_t kwset, char const *text, ptrdiff_t size,\n        struct kwsmatch *kwsmatch, bool longest)\n{\n  assume (0 <= size);\n  /* Help the compiler inline in two ways, depending on whether\n     kwset->trans is null.  */\n  return (IGNORE_DUPLICATE_BRANCH_WARNING\n          (kwset->trans\n           ? acexec_trans (kwset, text, size, kwsmatch, longest)\n           : acexec_trans (kwset, text, size, kwsmatch, longest)));\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "ptrdiff_t"
      ]
    },
    "kwsexec": {
      "start_point": [
        919,
        0
      ],
      "end_point": [
        924,
        1
      ],
      "content": "ptrdiff_t\nkwsexec (kwset_t kwset, char const *text, ptrdiff_t size,\n         struct kwsmatch *kwsmatch, bool longest)\n{\n  return kwset->kwsexec (kwset, text, size, kwsmatch, longest);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "ptrdiff_t"
      ]
    },
    "kwsfree": {
      "start_point": [
        927,
        0
      ],
      "end_point": [
        932,
        1
      ],
      "content": "void\nkwsfree (kwset_t kwset)\n{\n  obstack_free (&kwset->obstack, NULL);\n  free (kwset);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    }
  },
  "grep/grep-3.1/src/kwset.h": {},
  "grep/grep-3.1/src/pcresearch.c": {
    "jit_exec": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "static int\njit_exec (struct pcre_comp *pc, char const *subject, int search_bytes,\n          int search_offset, int options, int *sub)\n{\n  while (true)\n    {\n      int e = pcre_exec (pc->cre, pc->extra, subject, search_bytes,\n                         search_offset, options, sub, NSUB);\n\n# if PCRE_STUDY_JIT_COMPILE\n      if (e == PCRE_ERROR_JIT_STACKLIMIT\n          && 0 < pc->jit_stack_size && pc->jit_stack_size <= INT_MAX / 2)\n        {\n          int old_size = pc->jit_stack_size;\n          int new_size = pc->jit_stack_size = old_size * 2;\n          if (pc->jit_stack)\n            pcre_jit_stack_free (pc->jit_stack);\n          pc->jit_stack = pcre_jit_stack_alloc (old_size, new_size);\n          if (!pc->jit_stack)\n            die (EXIT_TROUBLE, 0,\n                 _(\"failed to allocate memory for the PCRE JIT stack\"));\n          pcre_assign_jit_stack (pc->extra, NULL, pc->jit_stack);\n          continue;\n        }\n# endif\n\n      return e;\n    }\n}",
      "lines": 29,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "Pcompile": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        183,
        1
      ],
      "content": "void *\nPcompile (char *pattern, size_t size, reg_syntax_t ignored)\n{\n#if !HAVE_LIBPCRE\n  die (EXIT_TROUBLE, 0,\n       _(\"support for the -P option is not compiled into \"\n         \"this --disable-perl-regexp binary\"));\n#else\n  int e;\n  char const *ep;\n  static char const wprefix[] = \"(?<!\\\\w)(?:\";\n  static char const wsuffix[] = \")(?!\\\\w)\";\n  static char const xprefix[] = \"^(?:\";\n  static char const xsuffix[] = \")$\";\n  int fix_len_max = MAX (sizeof wprefix - 1 + sizeof wsuffix - 1,\n                         sizeof xprefix - 1 + sizeof xsuffix - 1);\n  char *re = xnmalloc (4, size + (fix_len_max + 4 - 1) / 4);\n  int flags = PCRE_DOLLAR_ENDONLY | (match_icase ? PCRE_CASELESS : 0);\n  char const *patlim = pattern + size;\n  char *n = re;\n  char const *p;\n  char const *pnul;\n  struct pcre_comp *pc = xcalloc (1, sizeof (*pc));\n\n  if (localeinfo.multibyte)\n    {\n      if (! localeinfo.using_utf8)\n        die (EXIT_TROUBLE, 0, _(\"-P supports only unibyte and UTF-8 locales\"));\n      flags |= PCRE_UTF8;\n    }\n\n  /* FIXME: Remove this restriction.  */\n  if (memchr (pattern, '\\n', size))\n    die (EXIT_TROUBLE, 0, _(\"the -P option only supports a single pattern\"));\n\n  *n = '\\0';\n  if (match_words)\n    strcpy (n, wprefix);\n  if (match_lines)\n    strcpy (n, xprefix);\n  n += strlen (n);\n\n  /* The PCRE interface doesn't allow NUL bytes in the pattern, so\n     replace each NUL byte in the pattern with the four characters\n     \"\\000\", removing a preceding backslash if there are an odd\n     number of backslashes before the NUL.  */\n  for (p = pattern; (pnul = memchr (p, '\\0', patlim - p)); p = pnul + 1)\n    {\n      memcpy (n, p, pnul - p);\n      n += pnul - p;\n      for (p = pnul; pattern < p && p[-1] == '\\\\'; p--)\n        continue;\n      n -= (pnul - p) & 1;\n      strcpy (n, \"\\\\000\");\n      n += 4;\n    }\n\n  memcpy (n, p, patlim - p);\n  n += patlim - p;\n  *n = '\\0';\n  if (match_words)\n    strcpy (n, wsuffix);\n  if (match_lines)\n    strcpy (n, xsuffix);\n\n  pc->cre = pcre_compile (re, flags, &ep, &e, pcre_maketables ());\n  if (!pc->cre)\n    die (EXIT_TROUBLE, 0, \"%s\", ep);\n\n  pc->extra = pcre_study (pc->cre, PCRE_STUDY_JIT_COMPILE, &ep);\n  if (ep)\n    die (EXIT_TROUBLE, 0, \"%s\", ep);\n\n# if PCRE_STUDY_JIT_COMPILE\n  if (pcre_fullinfo (pc->cre, pc->extra, PCRE_INFO_JIT, &e))\n    die (EXIT_TROUBLE, 0, _(\"internal error (should never happen)\"));\n\n  /* The PCRE documentation says that a 32 KiB stack is the default.  */\n  if (e)\n    pc->jit_stack_size = 32 << 10;\n# endif\n\n  free (re);\n\n  int sub[NSUB];\n  pc->empty_match[false] = pcre_exec (pc->cre, pc->extra, \"\", 0, 0,\n                                      PCRE_NOTBOL, sub, NSUB);\n  pc->empty_match[true] = pcre_exec (pc->cre, pc->extra, \"\", 0, 0, 0, sub,\n                                     NSUB);\n\n  return pc;\n#endif /* HAVE_LIBPCRE */\n}",
      "lines": 93,
      "depth": 14,
      "decorators": [
        "void",
        "*\nPcompile (char *pattern, size_t size, reg_syntax_t ignored)",
        "*"
      ]
    },
    "Pexecute": {
      "start_point": [
        185,
        0
      ],
      "end_point": [
        330,
        1
      ],
      "content": "size_t\nPexecute (void *vcp, char const *buf, size_t size, size_t *match_size,\n          char const *start_ptr)\n{\n#if !HAVE_LIBPCRE\n  /* We can't get here, because Pcompile would have been called earlier.  */\n  die (EXIT_TROUBLE, 0, _(\"internal error\"));\n#else\n  int sub[NSUB];\n  char const *p = start_ptr ? start_ptr : buf;\n  bool bol = p[-1] == eolbyte;\n  char const *line_start = buf;\n  int e = PCRE_ERROR_NOMATCH;\n  char const *line_end;\n  struct pcre_comp *pc = vcp;\n\n  /* The search address to pass to pcre_exec.  This is the start of\n     the buffer, or just past the most-recently discovered encoding\n     error or line end.  */\n  char const *subject = buf;\n\n  do\n    {\n      /* Search line by line.  Although this code formerly used\n         PCRE_MULTILINE for performance, the performance wasn't always\n         better and the correctness issues were too puzzling.  See\n         Bug#22655.  */\n      line_end = memchr (p, eolbyte, buf + size - p);\n      if (INT_MAX < line_end - p)\n        die (EXIT_TROUBLE, 0, _(\"exceeded PCRE's line length limit\"));\n\n      for (;;)\n        {\n          /* Skip past bytes that are easily determined to be encoding\n             errors, treating them as data that cannot match.  This is\n             faster than having pcre_exec check them.  */\n          while (localeinfo.sbclen[to_uchar (*p)] == -1)\n            {\n              p++;\n              subject = p;\n              bol = false;\n            }\n\n          int search_offset = p - subject;\n\n          /* Check for an empty match; this is faster than letting\n             pcre_exec do it.  */\n          if (p == line_end)\n            {\n              sub[0] = sub[1] = search_offset;\n              e = pc->empty_match[bol];\n              break;\n            }\n\n          int options = 0;\n          if (!bol)\n            options |= PCRE_NOTBOL;\n\n          e = jit_exec (pc, subject, line_end - subject, search_offset,\n                        options, sub);\n          if (e != PCRE_ERROR_BADUTF8)\n            break;\n          int valid_bytes = sub[0];\n\n          if (search_offset <= valid_bytes)\n            {\n              /* Try to match the string before the encoding error.  */\n              if (valid_bytes == 0)\n                {\n                  /* Handle the empty-match case specially, for speed.\n                     This optimization is valid if VALID_BYTES is zero,\n                     which means SEARCH_OFFSET is also zero.  */\n                  sub[1] = 0;\n                  e = pc->empty_match[bol];\n                }\n              else\n                e = jit_exec (pc, subject, valid_bytes, search_offset,\n                              options | PCRE_NO_UTF8_CHECK | PCRE_NOTEOL, sub);\n\n              if (e != PCRE_ERROR_NOMATCH)\n                break;\n\n              /* Treat the encoding error as data that cannot match.  */\n              p = subject + valid_bytes + 1;\n              bol = false;\n            }\n\n          subject += valid_bytes + 1;\n        }\n\n      if (e != PCRE_ERROR_NOMATCH)\n        break;\n      bol = true;\n      p = subject = line_start = line_end + 1;\n    }\n  while (p < buf + size);\n\n  if (e <= 0)\n    {\n      switch (e)\n        {\n        case PCRE_ERROR_NOMATCH:\n          break;\n\n        case PCRE_ERROR_NOMEMORY:\n          die (EXIT_TROUBLE, 0, _(\"memory exhausted\"));\n\n# if PCRE_STUDY_JIT_COMPILE\n        case PCRE_ERROR_JIT_STACKLIMIT:\n          die (EXIT_TROUBLE, 0, _(\"exhausted PCRE JIT stack\"));\n# endif\n\n        case PCRE_ERROR_MATCHLIMIT:\n          die (EXIT_TROUBLE, 0, _(\"exceeded PCRE's backtracking limit\"));\n\n        default:\n          /* For now, we lump all remaining PCRE failures into this basket.\n             If anyone cares to provide sample grep usage that can trigger\n             particular PCRE errors, we can add to the list (above) of more\n             detailed diagnostics.  */\n          die (EXIT_TROUBLE, 0, _(\"internal PCRE error: %d\"), e);\n        }\n\n      return -1;\n    }\n  else\n    {\n      char const *matchbeg = subject + sub[0];\n      char const *matchend = subject + sub[1];\n      char const *beg;\n      char const *end;\n      if (start_ptr)\n        {\n          beg = matchbeg;\n          end = matchend;\n        }\n      else\n        {\n          beg = line_start;\n          end = line_end + 1;\n        }\n      *match_size = end - beg;\n      return beg - buf;\n    }\n#endif\n}",
      "lines": 146,
      "depth": 18,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/src/search.h": {
    "mb_clen": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "SEARCH_INLINE size_t\nmb_clen (char const *s, size_t n, mbstate_t *mbs)\n{\n  size_t len = localeinfo.sbclen[to_uchar (*s)];\n  return len == (size_t) -2 ? mbrlen (s, n, mbs) : len;\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "SEARCH_INLINE",
        "size_t",
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/src/searchutils.c": {
    "wordchar": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        33,
        1
      ],
      "content": "static bool\nwordchar (wint_t wc)\n{\n  return wc == L'_' || iswalnum (wc);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "bool"
      ]
    },
    "wordinit": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "content": "void\nwordinit (void)\n{\n  for (int i = 0; i < NCHAR; i++)\n    sbwordchar[i] = wordchar (localeinfo.sbctowc[i]);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "kwsinit": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "kwset_t\nkwsinit (bool mb_trans)\n{\n  char *trans = NULL;\n\n  if (match_icase && (MB_CUR_MAX == 1 || mb_trans))\n    {\n      trans = xmalloc (NCHAR);\n      if (MB_CUR_MAX == 1)\n        for (int i = 0; i < NCHAR; i++)\n          trans[i] = toupper (i);\n      else\n        for (int i = 0; i < NCHAR; i++)\n          {\n            wint_t wc = localeinfo.sbctowc[i];\n            wint_t uwc = towupper (wc);\n            if (uwc != wc)\n              {\n                mbstate_t mbs = { 0 };\n                size_t len = wcrtomb (&trans[i], uwc, &mbs);\n                if (len != 1)\n                  abort ();\n              }\n            else\n              trans[i] = i;\n          }\n    }\n\n  return kwsalloc (trans);\n}",
      "lines": 30,
      "depth": 16,
      "decorators": [
        "kwset_t"
      ]
    },
    "mb_goback": {
      "start_point": [
        84,
        0
      ],
      "end_point": [
        133,
        1
      ],
      "content": "ptrdiff_t\nmb_goback (char const **mb_start, char const *cur, char const *end)\n{\n  const char *p = *mb_start;\n  const char *p0 = p;\n\n  if (cur <= p)\n    return cur - p;\n\n  if (localeinfo.using_utf8)\n    {\n      p = cur;\n\n      if (cur < end && (*cur & 0xc0) == 0x80)\n        for (int i = 1; i <= 3; i++)\n          if ((cur[-i] & 0xc0) != 0x80)\n            {\n              mbstate_t mbs = { 0 };\n              size_t clen = mb_clen (cur - i, end - (cur - i), &mbs);\n              if (i < clen && clen < (size_t) -2)\n                {\n                  p0 = cur - i;\n                  p = p0 + clen;\n                }\n              break;\n            }\n    }\n  else\n    {\n      mbstate_t mbs = { 0 };\n      do\n        {\n          size_t clen = mb_clen (p, end - p, &mbs);\n\n          if ((size_t) -2 <= clen)\n            {\n              /* An invalid sequence, or a truncated multibyte character.\n                 Treat it as a single byte character.  */\n              clen = 1;\n              memset (&mbs, 0, sizeof mbs);\n            }\n          p0 = p;\n          p += clen;\n        }\n      while (p < cur);\n    }\n\n  *mb_start = p;\n  return p == cur ? 0 : cur - p0;\n}",
      "lines": 50,
      "depth": 16,
      "decorators": [
        "ptrdiff_t"
      ]
    },
    "wordchars_count": {
      "start_point": [
        138,
        0
      ],
      "end_point": [
        162,
        1
      ],
      "content": "static size_t\nwordchars_count (char const *buf, char const *end, bool countall)\n{\n  size_t n = 0;\n  mbstate_t mbs = { 0 };\n  while (n < end - buf)\n    {\n      unsigned char b = buf[n];\n      if (sbwordchar[b])\n        n++;\n      else if (localeinfo.sbclen[b] != -2)\n        break;\n      else\n        {\n          wchar_t wc = 0;\n          size_t wcbytes = mbrtowc (&wc, buf + n, end - buf - n, &mbs);\n          if (!wordchar (wc))\n            break;\n          n += wcbytes + !wcbytes;\n        }\n      if (!countall)\n        break;\n    }\n  return n;\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "size_t"
      ]
    },
    "wordchars_size": {
      "start_point": [
        167,
        0
      ],
      "end_point": [
        171,
        1
      ],
      "content": "size_t\nwordchars_size (char const *buf, char const *end)\n{\n  return wordchars_count (buf, end, true);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "size_t"
      ]
    },
    "wordchar_next": {
      "start_point": [
        175,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "content": "size_t\nwordchar_next (char const *buf, char const *end)\n{\n  return wordchars_count (buf, end, false);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "size_t"
      ]
    },
    "wordchar_prev": {
      "start_point": [
        184,
        0
      ],
      "end_point": [
        196,
        1
      ],
      "content": "size_t\nwordchar_prev (char const *buf, char const *cur, char const *end)\n{\n  if (buf == cur)\n    return 0;\n  unsigned char b = *--cur;\n  if (! localeinfo.multibyte\n      || (localeinfo.using_utf8 && localeinfo.sbclen[b] != -2))\n    return sbwordchar[b];\n  char const *p = buf;\n  cur -= mb_goback (&p, cur, end);\n  return wordchar_next (cur, end);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "size_t"
      ]
    }
  },
  "grep/grep-3.1/src/system.h": {
    "to_uchar": {
      "start_point": [
        62,
        23
      ],
      "end_point": [
        66,
        1
      ],
      "content": "char\nto_uchar (char ch)\n{\n  return ch;\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "char"
      ]
    },
    "__asan_poison_memory_region": {
      "start_point": [
        103,
        0
      ],
      "end_point": [
        104,
        72
      ],
      "content": "static _GL_UNUSED void\n__asan_poison_memory_region (void const volatile *addr, size_t size) { }",
      "lines": 2,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "_GL_UNUSED",
        "void",
        "void"
      ]
    },
    "__asan_unpoison_memory_region": {
      "start_point": [
        105,
        0
      ],
      "end_point": [
        106,
        74
      ],
      "content": "static _GL_UNUSED void\n__asan_unpoison_memory_region (void const volatile *addr, size_t size) { }",
      "lines": 2,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "_GL_UNUSED",
        "void",
        "void"
      ]
    }
  },
  "grep/grep-3.1/tests/get-mb-cur-max.c": {
    "main": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        35,
        1
      ],
      "content": "int\nmain (int argc, char **argv)\n{\n  if (1 < argc && setlocale (LC_ALL, argv[1]))\n    {\n      printf (\"%d\\n\", (int) MB_CUR_MAX);\n      exit (EXIT_SUCCESS);\n    }\n\n  exit (EXIT_FAILURE);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  }
}