{
  "lightning/lightning-2.1.2/size.c": {
    "main": {
      "start_point": [
        26,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    FILE\t\t*fp;\n    jit_word_t\t\t offset;\n    int\t\t\t code, size, max;\n\n    if ((fp = fopen(JIT_SIZE_PATH, \"r\")) == NULL)\n\texit(-1);\n    while (fscanf(fp, \"%d %d\\n\", &code, &size) == 2) {\n\tif (_szs[code] < size)\n\t    _szs[code] = size;\n    }\n    fclose(fp);\n\n    max = 0;\n    for (offset = 0; offset < jit_code_last_code; offset++)\n\tif (max < _szs[offset])\n\t    max = _szs[offset];\n\n    if ((fp = fopen(JIT_SIZE_PATH, \"w\")) == NULL)\n\texit(-1);\n\n\n#if __X64 || __X32\n#  if __X64\n    fprintf(fp, \"#if __X64\\n\");\n#    if __X64_32\n    fprintf(fp, \"#  if __X64_32\\n\");\n#    else\n    fprintf(fp, \"#  if !__X64_32\\n\");\n#    endif\n#  else\n    fprintf(fp, \"#if __X32\\n\");\n#  endif\n#else\n    fprintf(fp, \"#if __WORDSIZE == %d\\n\", __WORDSIZE);\n#endif\n#if defined(__arm__)\n#  if defined(__ARM_PCS_VFP)\n    fprintf(fp, \"#if defined(__ARM_PCS_VFP)\\n\");\n#  else\n    fprintf(fp, \"#if !defined(__ARM_PCS_VFP)\\n\");\n#  endif\n#elif defined(__mips__)\n#  if __WORDSIZE == 32\n#    if NEW_ABI\n    fprintf(fp, \"#if NEW_ABI\\n\");\n#    else\n    fprintf(fp, \"#if !NEW_ABI\\n\");\n#    endif\n#  endif\n#elif defined(__ppc__)\n    fprintf(fp, \"#if defined(__ppc__)\\n\");\n#elif defined(__powerpc__)\n    fprintf(fp, \"#if defined(__powerpc__)\\n\");\n    fprintf(fp, \"#if __BYTE_ORDER == %s\\n\",\n\t    __BYTE_ORDER == __BIG_ENDIAN ? \"__BIG_ENDIAN\" : \"__LITTLE_ENDIAN\");\n#endif\n    fprintf(fp, \"#define JIT_INSTR_MAX %d\\n\", max);\n    for (offset = 0; offset < jit_code_last_code; offset++)\n\tfprintf(fp, \"    %d,\t/* %s */\\n\", _szs[offset], code_name[offset]);\n#if defined(__arm__)\n    fprintf(fp, \"#endif /* __ARM_PCS_VFP */\\n\");\n#elif defined(__mips__)\n#  if __WORDSIZE == 32\n    fprintf(fp, \"#endif /* NEW_ABI */\\n\");\n#  endif\n#elif defined(__ppc__)\n    fprintf(fp, \"#endif /* __ppc__ */\\n\");\n#elif defined(__powerpc__)\n    fprintf(fp, \"#endif /* __BYTE_ORDER */\\n\");\n    fprintf(fp, \"#endif /* __powerpc__ */\\n\");\n#endif\n#if __X64 || __X32\n#  if __X64\n    fprintf(fp, \"#  endif /* __X64_32 */\\n\");\n    fprintf(fp, \"#endif /* __X64 */\\n\");\n#  else\n    fprintf(fp, \"#endif /* __X32 */\\n\");\n#  endif\n#else\n    fprintf(fp, \"#endif /* __WORDSIZE */\\n\");\n#endif\n\n    fclose(fp);\n\n    return (0);\n}",
      "lines": 89,
      "depth": 12,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/carg.c": {
    "cw": {
      "start_point": [
        23,
        0
      ],
      "end_point": [
        32,
        1
      ],
      "content": "void\ncw(W a1, W  a2, W  a3, W  a4, W  a5, W  a6, W  a7, W  a8,\n   W a9, W a10, W a11, W a12, W a13, W a14, W a15, W a16)\n{\n    if ( a1 !=  1 ||  a2 !=  2 ||  a3 !=  3 ||  a4 !=  4 ||\n\t a5 !=  5 ||  a6 !=  6 ||  a7 !=  7 ||  a8 !=  8 ||\n\t a9 !=  9 || a10 != 10 || a11 != 11 || a12 != 12 ||\n\ta13 != 13 || a14 != 14 || a15 != 15 || a16 != 16)\n\tabort();\n}",
      "lines": 10,
      "depth": 21,
      "decorators": [
        "void"
      ]
    },
    "cf": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "content": "void\ncf(F a1, F  a2, F  a3, F  a4, F  a5, F  a6, F  a7, F  a8,\n   F a9, F a10, F a11, F a12, F a13, F a14, F a15, F a16)\n{\n    if ( a1 !=  1 ||  a2 !=  2 ||  a3 !=  3 ||  a4 !=  4 ||\n\t a5 !=  5 ||  a6 !=  6 ||  a7 !=  7 ||  a8 !=  8 ||\n\t a9 !=  9 || a10 != 10 || a11 != 11 || a12 != 12 ||\n\ta13 != 13 || a14 != 14 || a15 != 15 || a16 != 16)\n\tabort();\n}",
      "lines": 10,
      "depth": 21,
      "decorators": [
        "void"
      ]
    },
    "cd": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "void\ncd(D a1, D  a2, D  a3, D  a4, D  a5, D  a6, D  a7, D  a8,\n   D a9, D a10, D a11, D a12, D a13, D a14, D a15, D a16)\n{\n    if ( a1 !=  1 ||  a2 !=  2 ||  a3 !=  3 ||  a4 !=  4 ||\n\t a5 !=  5 ||  a6 !=  6 ||  a7 !=  7 ||  a8 !=  8 ||\n\t a9 !=  9 || a10 != 10 || a11 != 11 || a12 != 12 ||\n\ta13 != 13 || a14 != 14 || a15 != 15 || a16 != 16)\n\tabort();\n}",
      "lines": 10,
      "depth": 21,
      "decorators": [
        "void"
      ]
    },
    "main": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        537,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    void\t\t(*code)(void);\n    jit_node_t\t\t*jmp, *pass;\n    jit_node_t\t\t *jw,  *jf,  *jd;\n    jit_int32_t\t\t  s1,   s2,   s3,   s4,   s5,   s6,   s7,   s8,\n\t\t\t  s9,  s10,  s11,  s12,  s13,  s14,  s15,  s16;\n    jit_node_t\t\t *a1,  *a2,  *a3,  *a4,  *a5,  *a6,  *a7,  *a8,\n\t\t\t *a9, *a10, *a11, *a12, *a13, *a14, *a15, *a16;\n\n    init_jit(argv[0]);\n    _jit = jit_new_state();\n\n    /* jump to \"main\" label */\n    jmp = jit_jmpi();\n\n    /* Create jit function that\n     * o Receives 16 word arguments\n     * o Save in the stack any register argument. Also force register\n     *   arguments to be clobbered to properly make the test\n     * o Calls a C function that receives 16 word arguments, with\n     *   values different from the ones received by this function\n     * o Reload from stack any register argument\n     * o Validated all arguments were not modified in the known\n     *   cases it could have been clobbered\n     */\n    jw = jit_label();\n    jit_name(\"jw\");\n    jit_note(__FILE__, __LINE__);\n    jit_prolog();\n    a1  = jit_arg();\n    a2  = jit_arg();\n    a3  = jit_arg();\n    a4  = jit_arg();\n    a5  = jit_arg();\n    a6  = jit_arg();\n    a7  = jit_arg();\n    a8  = jit_arg();\n    a9  = jit_arg();\n    a10 = jit_arg();\n    a11 = jit_arg();\n    a12 = jit_arg();\n    a13 = jit_arg();\n    a14 = jit_arg();\n    a15 = jit_arg();\n    a16 = jit_arg();\n#define SAVE_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    s##N = jit_allocai(sizeof(W));\t\t\t\t\\\n\t    jit_getarg(JIT_R0, a##N);\t\t\t\t\t\\\n\t    jit_stxi(s##N, JIT_FP, JIT_R0);\t\t\t\t\\\n\t    jit_putargi(-1, a##N);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    SAVE_ARG(1);\n    SAVE_ARG(2);\n    SAVE_ARG(3);\n    SAVE_ARG(4);\n    SAVE_ARG(5);\n    SAVE_ARG(6);\n    SAVE_ARG(7);\n    SAVE_ARG(8);\n    SAVE_ARG(9);\n    SAVE_ARG(10);\n    SAVE_ARG(11);\n    SAVE_ARG(12);\n    SAVE_ARG(13);\n    SAVE_ARG(14);\n    SAVE_ARG(15);\n    SAVE_ARG(16);\n#undef SAVE_ARG\n    jit_prepare();\n    {\n\tjit_pushargi(1);\n\tjit_pushargi(2);\n\tjit_pushargi(3);\n\tjit_pushargi(4);\n\tjit_pushargi(5);\n\tjit_pushargi(6);\n\tjit_pushargi(7);\n\tjit_pushargi(8);\n\tjit_pushargi(9);\n\tjit_pushargi(10);\n\tjit_pushargi(11);\n\tjit_pushargi(12);\n\tjit_pushargi(13);\n\tjit_pushargi(14);\n\tjit_pushargi(15);\n\tjit_pushargi(16);\n    }\n    jit_finishi(cw);\n#define LOAD_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    jit_ldxi(JIT_R0, JIT_FP, s##N);\t\t\t\t\\\n\t    jit_putargr(JIT_R0, a##N);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    LOAD_ARG(1);\n    LOAD_ARG(2);\n    LOAD_ARG(3);\n    LOAD_ARG(4);\n    LOAD_ARG(5);\n    LOAD_ARG(6);\n    LOAD_ARG(7);\n    LOAD_ARG(8);\n    LOAD_ARG(9);\n    LOAD_ARG(10);\n    LOAD_ARG(11);\n    LOAD_ARG(12);\n    LOAD_ARG(13);\n    LOAD_ARG(14);\n    LOAD_ARG(15);\n    LOAD_ARG(16);\n#undef LOAD_ARG\n    pass = jit_forward();\n#define CHECK_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tjit_getarg(JIT_R0, a##N);\t\t\t\t\t\\\n\tjit_patch_at(jit_beqi(JIT_R0, 17 - N), pass);\t\t\t\\\n    } while (0)\n    CHECK_ARG(1);\n    CHECK_ARG(2);\n    CHECK_ARG(3);\n    CHECK_ARG(4);\n    CHECK_ARG(5);\n    CHECK_ARG(6);\n    CHECK_ARG(7);\n    CHECK_ARG(8);\n    CHECK_ARG(9);\n    CHECK_ARG(10);\n    CHECK_ARG(11);\n    CHECK_ARG(12);\n    CHECK_ARG(13);\n    CHECK_ARG(14);\n    CHECK_ARG(15);\n    CHECK_ARG(16);\n#undef CHECK_ARG\n    jit_calli(abort);\n    jit_link(pass);\n    jit_ret();\n    jit_epilog();\n\n    /* Create jit function that\n     * o Receives 16 float arguments\n     * o Save in the stack any register argument. Also force register\n     *   arguments to be clobbered to properly make the test\n     * o Calls a C function that receives 16 float arguments, with\n     *   values different from the ones received by this function\n     * o Reload from stack any register argument\n     * o Validated all arguments were not modified in the known\n     *   cases it could have been clobbered\n     */\n    jf = jit_label();\n    jit_name(\"jf\");\n    jit_note(__FILE__, __LINE__);\n    jit_prolog();\n    a1  = jit_arg_f();\n    a2  = jit_arg_f();\n    a3  = jit_arg_f();\n    a4  = jit_arg_f();\n    a5  = jit_arg_f();\n    a6  = jit_arg_f();\n    a7  = jit_arg_f();\n    a8  = jit_arg_f();\n    a9  = jit_arg_f();\n    a10 = jit_arg_f();\n    a11 = jit_arg_f();\n    a12 = jit_arg_f();\n    a13 = jit_arg_f();\n    a14 = jit_arg_f();\n    a15 = jit_arg_f();\n    a16 = jit_arg_f();\n#define SAVE_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    s##N = jit_allocai(sizeof(F));\t\t\t\t\\\n\t    jit_getarg_f(JIT_F0, a##N);\t\t\t\t\t\\\n\t    jit_stxi_f(s##N, JIT_FP, JIT_F0);\t\t\t\t\\\n\t    jit_putargi_f(-1, a##N);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    SAVE_ARG(1);\n    SAVE_ARG(2);\n    SAVE_ARG(3);\n    SAVE_ARG(4);\n    SAVE_ARG(5);\n    SAVE_ARG(6);\n    SAVE_ARG(7);\n    SAVE_ARG(8);\n    SAVE_ARG(9);\n    SAVE_ARG(10);\n    SAVE_ARG(11);\n    SAVE_ARG(12);\n    SAVE_ARG(13);\n    SAVE_ARG(14);\n    SAVE_ARG(15);\n    SAVE_ARG(16);\n#undef SAVE_ARG\n    jit_prepare();\n    {\n\tjit_pushargi_f(1);\n\tjit_pushargi_f(2);\n\tjit_pushargi_f(3);\n\tjit_pushargi_f(4);\n\tjit_pushargi_f(5);\n\tjit_pushargi_f(6);\n\tjit_pushargi_f(7);\n\tjit_pushargi_f(8);\n\tjit_pushargi_f(9);\n\tjit_pushargi_f(10);\n\tjit_pushargi_f(11);\n\tjit_pushargi_f(12);\n\tjit_pushargi_f(13);\n\tjit_pushargi_f(14);\n\tjit_pushargi_f(15);\n\tjit_pushargi_f(16);\n    }\n    jit_finishi(cf);\n#define LOAD_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    jit_ldxi_f(JIT_F0, JIT_FP, s##N);\t\t\t\t\\\n\t    jit_putargr_f(JIT_F0, a##N);\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    LOAD_ARG(1);\n    LOAD_ARG(2);\n    LOAD_ARG(3);\n    LOAD_ARG(4);\n    LOAD_ARG(5);\n    LOAD_ARG(6);\n    LOAD_ARG(7);\n    LOAD_ARG(8);\n    LOAD_ARG(9);\n    LOAD_ARG(10);\n    LOAD_ARG(11);\n    LOAD_ARG(12);\n    LOAD_ARG(13);\n    LOAD_ARG(14);\n    LOAD_ARG(15);\n    LOAD_ARG(16);\n#undef LOAD_ARG\n    pass = jit_forward();\n#define CHECK_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tjit_getarg_f(JIT_F0, a##N);\t\t\t\t\t\\\n\tjit_patch_at(jit_beqi_f(JIT_F0, 17 - N), pass);\t\t\t\\\n    } while (0)\n    CHECK_ARG(1);\n    CHECK_ARG(2);\n    CHECK_ARG(3);\n    CHECK_ARG(4);\n    CHECK_ARG(5);\n    CHECK_ARG(6);\n    CHECK_ARG(7);\n    CHECK_ARG(8);\n    CHECK_ARG(9);\n    CHECK_ARG(10);\n    CHECK_ARG(11);\n    CHECK_ARG(12);\n    CHECK_ARG(13);\n    CHECK_ARG(14);\n    CHECK_ARG(15);\n    CHECK_ARG(16);\n#undef CHECK_ARG\n    jit_calli(abort);\n    jit_link(pass);\n    jit_ret();\n    jit_epilog();\n\n    /* Create jit function that\n     * o Receives 16 double arguments\n     * o Save in the stack any register argument. Also force register\n     *   arguments to be clobbered to properly make the test\n     * o Calls a C function that receives 16 double arguments, with\n     *   values different from the ones received by this function\n     * o Reload from stack any register argument\n     * o Validated all arguments were not modified in the known\n     *   cases it could have been clobbered\n     */\n    jd = jit_label();\n    jit_name(\"jd\");\n    jit_note(__FILE__, __LINE__);\n    jit_prolog();\n    a1  = jit_arg_d();\n    a2  = jit_arg_d();\n    a3  = jit_arg_d();\n    a4  = jit_arg_d();\n    a5  = jit_arg_d();\n    a6  = jit_arg_d();\n    a7  = jit_arg_d();\n    a8  = jit_arg_d();\n    a9  = jit_arg_d();\n    a10 = jit_arg_d();\n    a11 = jit_arg_d();\n    a12 = jit_arg_d();\n    a13 = jit_arg_d();\n    a14 = jit_arg_d();\n    a15 = jit_arg_d();\n    a16 = jit_arg_d();\n#define SAVE_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    s##N = jit_allocai(sizeof(D));\t\t\t\t\\\n\t    jit_getarg_d(JIT_F0, a##N);\t\t\t\t\t\\\n\t    jit_stxi_d(s##N, JIT_FP, JIT_F0);\t\t\t\t\\\n\t    jit_putargi_d(-1, a##N);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    SAVE_ARG(1);\n    SAVE_ARG(2);\n    SAVE_ARG(3);\n    SAVE_ARG(4);\n    SAVE_ARG(5);\n    SAVE_ARG(6);\n    SAVE_ARG(7);\n    SAVE_ARG(8);\n    SAVE_ARG(9);\n    SAVE_ARG(10);\n    SAVE_ARG(11);\n    SAVE_ARG(12);\n    SAVE_ARG(13);\n    SAVE_ARG(14);\n    SAVE_ARG(15);\n    SAVE_ARG(16);\n#undef SAVE_ARG\n    jit_prepare();\n    {\n\tjit_pushargi_d(1);\n\tjit_pushargi_d(2);\n\tjit_pushargi_d(3);\n\tjit_pushargi_d(4);\n\tjit_pushargi_d(5);\n\tjit_pushargi_d(6);\n\tjit_pushargi_d(7);\n\tjit_pushargi_d(8);\n\tjit_pushargi_d(9);\n\tjit_pushargi_d(10);\n\tjit_pushargi_d(11);\n\tjit_pushargi_d(12);\n\tjit_pushargi_d(13);\n\tjit_pushargi_d(14);\n\tjit_pushargi_d(15);\n\tjit_pushargi_d(16);\n    }\n    jit_finishi(cd);\n#define LOAD_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_arg_register_p(a##N)) {\t\t\t\t\t\\\n\t    jit_ldxi_d(JIT_F0, JIT_FP, s##N);\t\t\t\t\\\n\t    jit_putargr_d(JIT_F0, a##N);\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n    } while (0)\n    LOAD_ARG(1);\n    LOAD_ARG(2);\n    LOAD_ARG(3);\n    LOAD_ARG(4);\n    LOAD_ARG(5);\n    LOAD_ARG(6);\n    LOAD_ARG(7);\n    LOAD_ARG(8);\n    LOAD_ARG(9);\n    LOAD_ARG(10);\n    LOAD_ARG(11);\n    LOAD_ARG(12);\n    LOAD_ARG(13);\n    LOAD_ARG(14);\n    LOAD_ARG(15);\n    LOAD_ARG(16);\n#undef LOAD_ARG\n    pass = jit_forward();\n#define CHECK_ARG(N)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tjit_getarg_d(JIT_F0, a##N);\t\t\t\t\t\\\n\tjit_patch_at(jit_beqi_d(JIT_F0, 17 - N), pass);\t\t\t\\\n    } while (0)\n    CHECK_ARG(1);\n    CHECK_ARG(2);\n    CHECK_ARG(3);\n    CHECK_ARG(4);\n    CHECK_ARG(5);\n    CHECK_ARG(6);\n    CHECK_ARG(7);\n    CHECK_ARG(8);\n    CHECK_ARG(9);\n    CHECK_ARG(10);\n    CHECK_ARG(11);\n    CHECK_ARG(12);\n    CHECK_ARG(13);\n    CHECK_ARG(14);\n    CHECK_ARG(15);\n    CHECK_ARG(16);\n#undef CHECK_ARG\n    jit_calli(abort);\n    jit_link(pass);\n    jit_ret();\n    jit_epilog();\n\n    /* Create a jit function that calls the 3 previous ones.\n     * o First call the function that receives 16 word arguments\n     * o Then call the function that receives 16 float arguments\n     * o Finally call the function that receives 16 double arguments\n     */\n    jit_patch(jmp);\n    jit_name(\"main\");\n    jit_note(__FILE__, __LINE__);\n    jit_prolog();\n    jit_prepare();\n    {\n\tjit_pushargi(16);\n\tjit_pushargi(15);\n\tjit_pushargi(14);\n\tjit_pushargi(13);\n\tjit_pushargi(12);\n\tjit_pushargi(11);\n\tjit_pushargi(10);\n\tjit_pushargi(9);\n\tjit_pushargi(8);\n\tjit_pushargi(7);\n\tjit_pushargi(6);\n\tjit_pushargi(5);\n\tjit_pushargi(4);\n\tjit_pushargi(3);\n\tjit_pushargi(2);\n\tjit_pushargi(1);\n    }\n    jit_patch_at(jit_finishi(NULL), jw);\n    jit_prepare();\n    {\n\tjit_pushargi_f(16);\n\tjit_pushargi_f(15);\n\tjit_pushargi_f(14);\n\tjit_pushargi_f(13);\n\tjit_pushargi_f(12);\n\tjit_pushargi_f(11);\n\tjit_pushargi_f(10);\n\tjit_pushargi_f(9);\n\tjit_pushargi_f(8);\n\tjit_pushargi_f(7);\n\tjit_pushargi_f(6);\n\tjit_pushargi_f(5);\n\tjit_pushargi_f(4);\n\tjit_pushargi_f(3);\n\tjit_pushargi_f(2);\n\tjit_pushargi_f(1);\n    }\n    jit_patch_at(jit_finishi(NULL), jf);\n    jit_prepare();\n    {\n\tjit_pushargi_d(16);\n\tjit_pushargi_d(15);\n\tjit_pushargi_d(14);\n\tjit_pushargi_d(13);\n\tjit_pushargi_d(12);\n\tjit_pushargi_d(11);\n\tjit_pushargi_d(10);\n\tjit_pushargi_d(9);\n\tjit_pushargi_d(8);\n\tjit_pushargi_d(7);\n\tjit_pushargi_d(6);\n\tjit_pushargi_d(5);\n\tjit_pushargi_d(4);\n\tjit_pushargi_d(3);\n\tjit_pushargi_d(2);\n\tjit_pushargi_d(1);\n    }\n    jit_patch_at(jit_finishi(NULL), jd);\n    jit_ret();\n    jit_epilog();\n\n    code = jit_emit();\n    jit_clear_state();\n\n    (*code)();\n\n    jit_destroy_state();\n    finish_jit();\n    return (0);\n}",
      "lines": 482,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/ccall.c": {
    "main": {
      "start_point": [
        592,
        0
      ],
      "end_point": [
        902,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    jit_state_t\t\t *_jit;\n    jit_node_t\t\t *jmpi_main;\n    void\t\t(*function)(void);\n    jit_node_t\t\t *a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9;\n    jit_node_t\t\t *a10,*a11,*a12,*a13,*a14,*a15;\n    jit_node_t\t\t *jmp;\n\n    init_jit(argv[0]);\n    _jit = jit_new_state();\n\n    jmpi_main = jit_jmpi();\n\n\n#define arg0(T)\t\t\t/**/\n#define arg1(T)\t\t\t\t\t\ta1 = jit_arg##T();\n#define arg2(T)\t\t\targ1(T)\t\t\ta2 = jit_arg##T();\n#define arg3(T)\t\t\targ2(T)\t\t\ta3 = jit_arg##T();\n#define arg4(T)\t\t\targ3(T)\t\t\ta4 = jit_arg##T();\n#define arg5(T)\t\t\targ4(T)\t\t\ta5 = jit_arg##T();\n#define arg6(T)\t\t\targ5(T)\t\t\ta6 = jit_arg##T();\n#define arg7(T)\t\t\targ6(T)\t\t\ta7 = jit_arg##T();\n#define arg8(T)\t\t\targ7(T)\t\t\ta8 = jit_arg##T();\n#define arg9(T)\t\t\targ8(T)\t\t\ta9 = jit_arg##T();\n#define arg10(T)\t\targ9(T)\t\t\ta10 = jit_arg##T();\n#define arg11(T)\t\targ10(T)\t\ta11 = jit_arg##T();\n#define arg12(T)\t\targ11(T)\t\ta12 = jit_arg##T();\n#define arg13(T)\t\targ12(T)\t\ta13 = jit_arg##T();\n#define arg14(T)\t\targ13(T)\t\ta14 = jit_arg##T();\n#define arg15(T)\t\targ14(T)\t\ta15 = jit_arg##T();\n\n#define get0(B,T,R)\t\tjit_movi##B(R##0,0);\n#define get1(B,T,R)\t\tjit_getarg##B(R##0,a##1);\n#define get2(B,T,R)\t\t\t\t\t\t\t\\\n\tget1(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##2);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get3(B,T,R)\t\t\t\t\t\t\t\\\n\tget2(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##3);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get4(B,T,R)\t\t\t\t\t\t\t\\\n\tget3(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##4);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get5(B,T,R)\t\t\t\t\t\t\t\\\n\tget4(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##5);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get6(B,T,R)\t\t\t\t\t\t\t\\\n\tget5(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##6);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get7(B,T,R)\t\t\t\t\t\t\t\\\n\tget6(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##7);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get8(B,T,R)\t\t\t\t\t\t\t\\\n\tget7(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##8);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get9(B,T,R)\t\t\t\t\t\t\t\\\n\tget8(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##9);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get10(B,T,R)\t\t\t\t\t\t\t\\\n\tget9(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##10);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get11(B,T,R)\t\t\t\t\t\t\t\\\n\tget10(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##11);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get12(B,T,R)\t\t\t\t\t\t\t\\\n\tget11(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##12);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get13(B,T,R)\t\t\t\t\t\t\t\\\n\tget12(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##13);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get14(B,T,R)\t\t\t\t\t\t\t\\\n\tget13(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##14);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n#define get15(B,T,R)\t\t\t\t\t\t\t\\\n\tget14(B,T,R);\t\t\t\t\t\t\t\\\n\tjit_movr##B(R##1, R##0);\t\t\t\t\t\\\n\tjit_getarg##T(R##0, a##15);\t\t\t\t\t\\\n\tjit_subr##B(R##0, R##1, R##0);\n\n#if __WORDSIZE == 32\n#  define jit_extr_i(u, v)\t\t\t/**/\n#else\n#  define jit_extr_l(u, v)\t\t\t/**/\n#endif\n\n#define strfy(n)\t\t\t\t#n\n#define defi(T, N)\t\t\t\t\t\t\t\\\n    n##T##N = jit_name(strfy(n##T##N));\t\t\t\t\t\\\n    jit_note(\"ccall.c\", __LINE__);\t\t\t\t\t\\\n    jit_prolog();\t\t\t\t\t\t\t\\\n    arg##N();\t\t\t\t\t\t\t\t\\\n    get##N(,T,JIT_R)\t\t\t\t\t\t\t\\\n    jit_extr##T(JIT_R0, JIT_R0);\t\t\t\t\t\\\n    jit_retr(JIT_R0);\t\t\t\t\t\t\t\\\n    jit_epilog();\n#define deff(T, N)\t\t\t\t\t\t\t\\\n    n##T##N = jit_name(strfy(n##T##N));\t\t\t\t\t\\\n    jit_note(\"ccall.c\", __LINE__);\t\t\t\t\t\\\n    jit_prolog();\t\t\t\t\t\t\t\\\n    arg##N(T);\t\t\t\t\t\t\t\t\\\n    get##N(T,T,JIT_F);\t\t\t\t\t\t\t\\\n    jit_retr##T(JIT_F0);\t\t\t\t\t\t\\\n    jit_epilog();\n\n#define  def0(X, T)\t\t\t\tdef##X(T, 0)\n#define  def1(X, T)\tdef0(X, T)\t\tdef##X(T, 1)\n#define  def2(X, T)\tdef1(X, T)\t\tdef##X(T, 2)\n#define  def3(X, T)\tdef2(X, T)\t\tdef##X(T, 3)\n#define  def4(X, T)\tdef3(X, T)\t\tdef##X(T, 4)\n#define  def5(X, T)\tdef4(X, T)\t\tdef##X(T, 5)\n#define  def6(X, T)\tdef5(X, T)\t\tdef##X(T, 6)\n#define  def7(X, T)\tdef6(X, T)\t\tdef##X(T, 7)\n#define  def8(X, T)\tdef7(X, T)\t\tdef##X(T, 8)\n#define  def9(X, T)\tdef8(X, T)\t\tdef##X(T, 9)\n#define def10(X, T)\tdef9(X, T)\t\tdef##X(T, 10)\n#define def11(X, T)\tdef10(X, T)\t\tdef##X(T, 11)\n#define def12(X, T)\tdef11(X, T)\t\tdef##X(T, 12)\n#define def13(X, T)\tdef12(X, T)\t\tdef##X(T, 13)\n#define def14(X, T)\tdef13(X, T)\t\tdef##X(T, 14)\n#define def15(X, T)\tdef14(X, T)\t\tdef##X(T, 15)\n#define def(T)\t\tdef15(i, T)\n\tdef(_c)\n\tdef(_uc)\n\tdef(_s)\n\tdef(_us)\n\tdef(_i)\n#if __WORDSIZE == 64\n\tdef(_ui)\n\tdef(_l)\n#endif\n#undef def\n#define def(T)\t\tdef15(f, T)\n\tdef(_f)\n\tdef(_d)\n#undef def\n\n    jit_patch(jmpi_main);\n    jit_name(\"main\");\n    jit_note(\"ccall.c\", __LINE__);\n    jit_prolog();\n\n#define  push0(T)\t/**/\n#define  push1(T)\t\t\t\tjit_pushargi##T(1);\n#define  push2(T)\tpush1(T)\t\tjit_pushargi##T(2);\n#define  push3(T)\tpush2(T)\t\tjit_pushargi##T(3);\n#define  push4(T)\tpush3(T)\t\tjit_pushargi##T(4);\n#define  push5(T)\tpush4(T)\t\tjit_pushargi##T(5);\n#define  push6(T)\tpush5(T)\t\tjit_pushargi##T(6);\n#define  push7(T)\tpush6(T)\t\tjit_pushargi##T(7);\n#define  push8(T)\tpush7(T)\t\tjit_pushargi##T(8);\n#define  push9(T)\tpush8(T)\t\tjit_pushargi##T(9);\n#define  push10(T)\tpush9(T)\t\tjit_pushargi##T(10);\n#define  push11(T)\tpush10(T)\t\tjit_pushargi##T(11);\n#define  push12(T)\tpush11(T)\t\tjit_pushargi##T(12);\n#define  push13(T)\tpush12(T)\t\tjit_pushargi##T(13);\n#define  push14(T)\tpush13(T)\t\tjit_pushargi##T(14);\n#define  push15(T)\tpush14(T)\t\tjit_pushargi##T(15);\n\n#define calin(T,N)\t\t\t\t\t\t\t\\\n\tjit_prepare();\t\t\t\t\t\t\t\\\n\t\tpush##N()\t\t\t\t\t\t\\\n\tjit_finishi(C##T##N);\t\t\t\t\t\t\\\n\tjit_retval##T(JIT_R0);\t\t\t\t\t\t\\\n\tjmp = jit_beqi(JIT_R0, T##N);\t\t\t\t\t\\\n\tjit_calli(abort);\t\t\t\t\t\t\\\n\tjit_patch(jmp);\n#define calfn(T,N)\t\t\t\t\t\t\t\\\n\tjit_prepare();\t\t\t\t\t\t\t\\\n\t\tpush##N(T)\t\t\t\t\t\t\\\n\tjit_finishi(C##T##N);\t\t\t\t\t\t\\\n\tjit_retval##T(JIT_F0);\t\t\t\t\t\t\\\n\tjmp = jit_beqi##T(JIT_F0, _w##N);\t\t\t\t\\\n\tjit_calli(abort);\t\t\t\t\t\t\\\n\tjit_patch(jmp);\n#define  calx0(X,T)\t\t\t\tcal##X##n(T,0)\n#define  calx1(X,T)\tcalx0(X,T)\t\tcal##X##n(T,1)\n#define  calx2(X,T)\tcalx1(X,T)\t\tcal##X##n(T,2)\n#define  calx3(X,T)\tcalx2(X,T)\t\tcal##X##n(T,3)\n#define  calx4(X,T)\tcalx3(X,T)\t\tcal##X##n(T,4)\n#define  calx5(X,T)\tcalx4(X,T)\t\tcal##X##n(T,5)\n#define  calx6(X,T)\tcalx5(X,T)\t\tcal##X##n(T,6)\n#define  calx7(X,T)\tcalx6(X,T)\t\tcal##X##n(T,7)\n#define  calx8(X,T)\tcalx7(X,T)\t\tcal##X##n(T,8)\n#define  calx9(X,T)\tcalx8(X,T)\t\tcal##X##n(T,9)\n#define calx10(X,T)\tcalx9(X,T)\t\tcal##X##n(T,10)\n#define calx11(X,T)\tcalx10(X,T)\t\tcal##X##n(T,11)\n#define calx12(X,T)\tcalx11(X,T)\t\tcal##X##n(T,12)\n#define calx13(X,T)\tcalx12(X,T)\t\tcal##X##n(T,13)\n#define calx14(X,T)\tcalx13(X,T)\t\tcal##X##n(T,14)\n#define calx15(X,T)\tcalx14(X,T)\t\tcal##X##n(T,15)\n#define cali(T)\t\tcalx15(i,T)\n#define calf(T)\t\tcalx15(f,T)\n\n    cali(_c)\n    cali(_uc)\n    cali(_s)\n    cali(_us)\n    cali(_i)\n#if __WORDSIZE == 64\n    cali(_ui)\n    cali(_l)\n#endif\n    calf(_f)\n    calf(_d)\n\n#undef calin\n#undef calfn\n#define calin(T,N)\t\t\t\t\t\t\t\\\n\tjit_prepare();\t\t\t\t\t\t\t\\\n\t\tpush##N()\t\t\t\t\t\t\\\n\tjit_finishi(CJ##T##N);\t\t\t\t\t\t\\\n\tjit_retval##T(JIT_R0);\t\t\t\t\t\t\\\n\tjmp = jit_beqi(JIT_R0, T##N);\t\t\t\t\t\\\n\tjit_calli(abort);\t\t\t\t\t\t\\\n\tjit_patch(jmp);\n#define calfn(T,N)\t\t\t\t\t\t\t\\\n\tjit_prepare();\t\t\t\t\t\t\t\\\n\t\tpush##N(T)\t\t\t\t\t\t\\\n\tjit_finishi(CJ##T##N);\t\t\t\t\t\t\\\n\tjit_retval##T(JIT_F0);\t\t\t\t\t\t\\\n\tjmp = jit_beqi##T(JIT_F0, _w##N);\t\t\t\t\\\n\tjit_calli(abort);\t\t\t\t\t\t\\\n\tjit_patch(jmp);\n    cali(_c)\n    cali(_uc)\n    cali(_s)\n    cali(_us)\n    cali(_i)\n#if __WORDSIZE == 64\n    cali(_ui)\n    cali(_l)\n#endif\n    calf(_f)\n    calf(_d)\n\n    jit_ret();\n\n    function = jit_emit();\n\n#define initn(T,N)\tj##T##N = jit_address(n##T##N);\n#define init0(T)\t\t\tinitn(T,0)\n#define init1(T)\t init0(T)\tinitn(T,1)\n#define init2(T)\t init1(T)\tinitn(T,2)\n#define init3(T)\t init2(T)\tinitn(T,3)\n#define init4(T)\t init3(T)\tinitn(T,4)\n#define init5(T)\t init4(T)\tinitn(T,5)\n#define init6(T)\t init5(T)\tinitn(T,6)\n#define init7(T)\t init6(T)\tinitn(T,7)\n#define init8(T)\t init7(T)\tinitn(T,8)\n#define init9(T)\t init8(T)\tinitn(T,9)\n#define init10(T)\t init9(T)\tinitn(T,10)\n#define init11(T)\tinit10(T)\tinitn(T,11)\n#define init12(T)\tinit11(T)\tinitn(T,12)\n#define init13(T)\tinit12(T)\tinitn(T,13)\n#define init14(T)\tinit13(T)\tinitn(T,14)\n#define init15(T)\tinit14(T)\tinitn(T,15)\n#define init(T)\t\tinit15(T)\n    init(_c)\n    init(_uc)\n    init(_s)\n    init(_us)\n    init(_i)\n#if __WORDSIZE == 64\n    init(_ui)\n    init(_l)\n#endif\n    init(_f)\n    init(_d)\n\n#if 0\n    jit_print();\n    jit_disassemble();\n#endif\n\n    jit_clear_state();\n    (*function)();\n    jit_destroy_state();\n\n    finish_jit();\n\n    printf(\"ok\\n\");\n\n    return (0);\n}",
      "lines": 311,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/ctramp.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    void\t\t *address;\n    void\t\t(*call)(void*);\n    jit_state_t\t\t *frame_jit, *tramp_jit;\n    jit_node_t\t\t *arg, *done, *xfibs, *out, *ret1, *ret2;\n\n    init_jit(argv[0]);\n    _jit = frame_jit = jit_new_state();\n    jit_name(\"main\");\n    jit_prolog();\n    jit_frame(64);\n\n    arg = jit_arg();\n    jit_getarg(JIT_R1, arg);\n\n    /* Initialize language stack */\n    jit_movi(JIT_R0, (jit_word_t)stk);\n    jit_sti(&top, JIT_R0);\n\n    /* return address */\n    done = jit_movi(JIT_R0, 0);\n    /* argument */\n    jit_movi(JIT_V0, 32);\n    /* jump to code */\n    jit_jmpr(JIT_R1);\n    jit_patch(done);\n\n    jit_prepare();\n    jit_pushargi((jit_word_t)\"xfibs(%d) = %d\\n\");\n    jit_ellipsis();\n    jit_pushargi(32);\n    jit_pushargr(JIT_V0);\n    jit_finishi(printf);\n    jit_ret();\n    jit_epilog();\n    call = jit_emit();\n    jit_clear_state();\n\n#define SIZE\t\t\t\tsizeof(jit_word_t)\n    _jit = tramp_jit = jit_new_state();\n    jit_name(\"xfibs\");\n    xfibs = jit_label();\n    jit_prolog();\n    jit_tramp(64);\n    out = jit_blti(JIT_V0, 2);\n    jit_subi(JIT_V1, JIT_V0, 1);\t/* V1 = N-1 */\n    jit_subi(JIT_V2, JIT_V0, 2);\t/* V1 = N-2 */\n\n    /* save return address */\n    jit_ldi(JIT_R1, &top);\n    jit_stxi(SIZE * 0, JIT_R1, JIT_R0);\n    /* save operands */\n    jit_stxi(SIZE * 1, JIT_R1, JIT_V0);\n    jit_stxi(SIZE * 2, JIT_R1, JIT_V1);\n    jit_stxi(SIZE * 3, JIT_R1, JIT_V2);\n    /* adjust \"language\" stack */\n    jit_addi(JIT_R1, JIT_R1, SIZE * 4);\n    jit_sti(&top, JIT_R1);\n\n    /* return address */\n    ret1 = jit_movi(JIT_R0, 0);\n    /* argument */\n    jit_movr(JIT_V0, JIT_V1);\n    /* indirect goto */\n    jit_patch_at(jit_jmpi(), xfibs);\n    jit_patch(ret1);\n    jit_movr(JIT_V1, JIT_V0);\t\t/* V1 = rfibs(N-1) */\n    /* save V1 */\n    jit_ldi(JIT_R1, &top);\n    jit_stxi(-SIZE * 2, JIT_R1, JIT_V1);\n\n    /* reload V2 */\n    jit_ldxi(JIT_V2, JIT_R1, -SIZE * 1);\n\n    /* return address */\n    ret2 = jit_movi(JIT_R0, 0);\n    /* argument */\n    jit_movr(JIT_V0, JIT_V2);\n    /* indirect goto */\n    jit_patch_at(jit_jmpi(), xfibs);\n    jit_patch(ret2);\n    jit_movr(JIT_V2, JIT_V0);\t\t/* V2 = rfibs(N-2) */\n\n    /* reload return address */\n    jit_ldi(JIT_R1, &top);\n    jit_subi(JIT_R1, JIT_R1, SIZE * 4);\n    jit_ldxi(JIT_R0, JIT_R1, SIZE * 0);\n    /* reload operands */\n    jit_ldxi(JIT_V0, JIT_R1, SIZE * 1);\n    jit_ldxi(JIT_V1, JIT_R1, SIZE * 2);\n    /* V2 already loaded */\n    /* update \"language\" stack */\n    jit_sti(&top, JIT_R1);\n\n    jit_addi(JIT_V1, JIT_V1, 1);\n    jit_addr(JIT_V0, JIT_V1, JIT_V2);\n    jit_jmpr(JIT_R0);\n\n    jit_patch(out);\n    jit_movi(JIT_V0, 1);\n    jit_jmpr(JIT_R0);\n    jit_epilog();\n\n    address = jit_emit();\n    jit_clear_state();\n\n    (*call)(address);\n\n    jit_destroy_state();\n\n    _jit = frame_jit;\n    jit_destroy_state();\n    return 0;\n}",
      "lines": 116,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/cva_list.c": {
    "i_iiiiiiiii": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        63,
        1
      ],
      "content": "void i_iiiiiiiii(W a1, ...)\n{\n    W\t\ta2, a3, a4, a5, a6, a7, a8, a9, a10;\n    VASTART(a1);\n    VARG2();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ii_iiiiiiii": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "content": "void ii_iiiiiiii(W a1, W a2, ...)\n{\n    W\t\ta3, a4, a5, a6, a7, a8, a9, a10;\n    VASTART(a2);\n    VARG3();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iii_iiiiiii": {
      "start_point": [
        73,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "content": "void iii_iiiiiii(W a1, W a2, W a3, ...)\n{\n    W\t\ta4, a5, a6, a7, a8, a9, a10;\n    VASTART(a3);\n    VARG4();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiii_iiiiii": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "void iiii_iiiiii(W a1, W a2, W a3, W a4, ...)\n{\n    W\t\ta5, a6, a7, a8, a9, a10;\n    VASTART(a4);\n    VARG5();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiiii_iiiii": {
      "start_point": [
        89,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "void iiiii_iiiii(W a1, W a2, W a3, W a4, W a5, ...)\n{\n    W\t\ta6, a7, a8, a9, a10;\n    VASTART(a5);\n    VARG6();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiiiii_iiii": {
      "start_point": [
        97,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "content": "void iiiiii_iiii(W a1, W a2, W a3, W a4, W a5, W a6, ...)\n{\n    W\t\ta7, a8, a9, a10;\n    VASTART(a6);\n    VARG7();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiiiiii_iii": {
      "start_point": [
        105,
        0
      ],
      "end_point": [
        111,
        1
      ],
      "content": "void iiiiiii_iii(W a1, W a2, W a3, W a4, W a5, W a6, W a7, ...)\n{\n    W\t\ta8, a9, a10;\n    VASTART(a7);\n    VARG8();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiiiiiii_ii": {
      "start_point": [
        113,
        0
      ],
      "end_point": [
        119,
        1
      ],
      "content": "void iiiiiiii_ii(W a1, W a2, W a3, W a4, W a5, W a6, W a7, W a8, ...)\n{\n    W\t\ta9, a10;\n    VASTART(a8);\n    VARG9();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "iiiiiiiii_i": {
      "start_point": [
        121,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "content": "void iiiiiiiii_i(W a1, W a2, W a3, W a4, W a5, W a6, W a7, W a8, W a9, ...)\n{\n    W\t\ta10;\n    VASTART(a9);\n    VARG10();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "d_ddddddddd": {
      "start_point": [
        129,
        0
      ],
      "end_point": [
        135,
        1
      ],
      "content": "void d_ddddddddd(D a1, ...)\n{\n    D\t\ta2, a3, a4, a5, a6, a7, a8, a9, a10;\n    VASTART(a1);\n    VARGD2();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dd_dddddddd": {
      "start_point": [
        137,
        0
      ],
      "end_point": [
        143,
        1
      ],
      "content": "void dd_dddddddd(D a1, D a2, ...)\n{\n    D\t\ta3, a4, a5, a6, a7, a8, a9, a10;\n    VASTART(a2);\n    VARGD3();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ddd_ddddddd": {
      "start_point": [
        145,
        0
      ],
      "end_point": [
        151,
        1
      ],
      "content": "void ddd_ddddddd(D a1, D a2, D a3, ...)\n{\n    D\t\ta4, a5, a6, a7, a8, a9, a10;\n    VASTART(a3);\n    VARGD4();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dddd_dddddd": {
      "start_point": [
        153,
        0
      ],
      "end_point": [
        159,
        1
      ],
      "content": "void dddd_dddddd(D a1, D a2, D a3, D a4, ...)\n{\n    D\t\ta5, a6, a7, a8, a9, a10;\n    VASTART(a4);\n    VARGD5();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ddddd_ddddd": {
      "start_point": [
        161,
        0
      ],
      "end_point": [
        167,
        1
      ],
      "content": "void ddddd_ddddd(D a1, D a2, D a3, D a4, D a5, ...)\n{\n    D\t\ta6, a7, a8, a9, a10;\n    VASTART(a5);\n    VARGD6();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dddddd_dddd": {
      "start_point": [
        169,
        0
      ],
      "end_point": [
        175,
        1
      ],
      "content": "void dddddd_dddd(D a1, D a2, D a3, D a4, D a5, D a6, ...)\n{\n    D\t\ta7, a8, a9, a10;\n    VASTART(a6);\n    VARGD7();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ddddddd_ddd": {
      "start_point": [
        177,
        0
      ],
      "end_point": [
        183,
        1
      ],
      "content": "void ddddddd_ddd(D a1, D a2, D a3, D a4, D a5, D a6, D a7, ...)\n{\n    D\t\ta8, a9, a10;\n    VASTART(a7);\n    VARGD8();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dddddddd_dd": {
      "start_point": [
        185,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "content": "void dddddddd_dd(D a1, D a2, D a3, D a4, D a5, D a6, D a7, D a8, ...)\n{\n    D\t\ta9, a10;\n    VASTART(a8);\n    VARGD9();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ddddddddd_d": {
      "start_point": [
        193,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "content": "void ddddddddd_d(D a1, D a2, D a3, D a4, D a5, D a6, D a7, D a8, D a9, ...)\n{\n    D\t\ta10;\n    VASTART(a9);\n    VARGD10();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "i_didididid": {
      "start_point": [
        201,
        0
      ],
      "end_point": [
        208,
        1
      ],
      "content": "void i_didididid(W a1, ...)\n{\n    W\t\ta3, a5, a7, a9;\n    D\t\ta2, a4, a6, a8, a10;\n    VASTART(a1);\n    IDVARG2();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "id_idididid": {
      "start_point": [
        210,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "content": "void id_idididid(W a1, D a2, ...)\n{\n    W\t\ta3, a5, a7, a9;\n    D\t\ta4, a6, a8, a10;\n    VASTART(a2);\n    IDVARG3();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "idi_dididid": {
      "start_point": [
        219,
        0
      ],
      "end_point": [
        226,
        1
      ],
      "content": "void idi_dididid(W a1, D a2, W a3, ...)\n{\n    W\t\ta5, a7, a9;\n    D\t\ta4, a6, a8, a10;\n    VASTART(a3);\n    IDVARG4();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "idid_ididid": {
      "start_point": [
        228,
        0
      ],
      "end_point": [
        235,
        1
      ],
      "content": "void idid_ididid(W a1, D a2, W a3, D a4, ...)\n{\n    W\t\ta5, a7, a9;\n    D\t\ta6, a8, a10;\n    VASTART(a4);\n    IDVARG5();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ididi_didid": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        244,
        1
      ],
      "content": "void ididi_didid(W a1, D a2, W a3, D a4, W a5, ...)\n{\n    W\t\ta7, a9;\n    D\t\ta6, a8, a10;\n    VASTART(a5);\n    IDVARG6();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ididid_idid": {
      "start_point": [
        246,
        0
      ],
      "end_point": [
        253,
        1
      ],
      "content": "void ididid_idid(W a1, D a2, W a3, D a4, W a5, D a6, ...)\n{\n    W\t\ta7, a9;\n    D\t\ta8, a10;\n    VASTART(a6);\n    IDVARG7();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "idididi_did": {
      "start_point": [
        255,
        0
      ],
      "end_point": [
        262,
        1
      ],
      "content": "void idididi_did(W a1, D a2, W a3, D a4, W a5, D a6, W a7, ...)\n{\n    W\t\ta9;\n    D\t\ta8, a10;\n    VASTART(a7);\n    IDVARG8();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "idididid_id": {
      "start_point": [
        264,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "content": "void idididid_id(W a1, D a2, W a3, D a4, W a5, D a6, W a7, D a8, ...)\n{\n    W\t\ta9;\n    D\t\ta10;\n    VASTART(a8);\n    IDVARG9();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "ididididi_d": {
      "start_point": [
        273,
        0
      ],
      "end_point": [
        279,
        1
      ],
      "content": "void ididididi_d(W a1, D a2, W a3, D a4, W a5, D a6, W a7, D a8, W a9, ...)\n{\n    D\t\ta10;\n    VASTART(a9);\n    IDVARG10();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "d_ididididi": {
      "start_point": [
        281,
        0
      ],
      "end_point": [
        288,
        1
      ],
      "content": "void d_ididididi(D a1, ...)\n{\n    W\t\ta2, a4, a6, a8, a10;\n    D\t\ta3, a5, a7, a9;\n    VASTART(a1);\n    DIVARG2();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "di_didididi": {
      "start_point": [
        290,
        0
      ],
      "end_point": [
        297,
        1
      ],
      "content": "void di_didididi(D a1, W a2, ...)\n{\n    W\t\ta4, a6, a8, a10;\n    D\t\ta3, a5, a7, a9;\n    VASTART(a2);\n    DIVARG3();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "did_idididi": {
      "start_point": [
        299,
        0
      ],
      "end_point": [
        306,
        1
      ],
      "content": "void did_idididi(D a1, W a2, D a3, ...)\n{\n    W\t\ta4, a6, a8, a10;\n    D\t\ta5, a7, a9;\n    VASTART(a3);\n    DIVARG4();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "didi_dididi": {
      "start_point": [
        308,
        0
      ],
      "end_point": [
        315,
        1
      ],
      "content": "void didi_dididi(D a1, W a2, D a3, W a4, ...)\n{\n    W\t\ta6, a8, a10;\n    D\t\ta5, a7, a9;\n    VASTART(a4);\n    DIVARG5();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "didid_ididi": {
      "start_point": [
        317,
        0
      ],
      "end_point": [
        324,
        1
      ],
      "content": "void didid_ididi(D a1, W a2, D a3, W a4, D a5, ...)\n{\n    W\t\ta6, a8, a10;\n    D\t\ta7, a9;\n    VASTART(a5);\n    DIVARG6();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dididi_didi": {
      "start_point": [
        326,
        0
      ],
      "end_point": [
        333,
        1
      ],
      "content": "void dididi_didi(D a1, W a2, D a3, W a4, D a5, W a6, ...)\n{\n    W\t\ta8, a10;\n    D\t\ta7, a9;\n    VASTART(a6);\n    DIVARG7();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "dididid_idi": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        342,
        1
      ],
      "content": "void dididid_idi(D a1, W a2, D a3, W a4, D a5, W a6, D a7, ...)\n{\n    W\t\ta8, a10;\n    D\t\ta9;\n    VASTART(a7);\n    DIVARG8();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "didididi_di": {
      "start_point": [
        344,
        0
      ],
      "end_point": [
        351,
        1
      ],
      "content": "void didididi_di(D a1, W a2, D a3, W a4, D a5, W a6, D a7, W a8, ...)\n{\n    W\t\ta10;\n    D\t\ta9;\n    VASTART(a8);\n    DIVARG9();\n    CHECK();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "didididid_i": {
      "start_point": [
        353,
        0
      ],
      "end_point": [
        359,
        1
      ],
      "content": "void didididid_i(D a1, W a2, D a3, W a4, D a5, W a6, D a7, W a8, D a9, ...)\n{\n    W\t\ta10;\n    VASTART(a9);\n    DIVARG10();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_i_iiiiiiiii": {
      "start_point": [
        361,
        0
      ],
      "end_point": [
        366,
        1
      ],
      "content": "void va_i_iiiiiiiii(W a1, va_list ap)\n{\n    W\t\ta2, a3, a4, a5, a6, a7, a8, a9, a10;\n    VARG2();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_ii_iiiiiiii": {
      "start_point": [
        368,
        0
      ],
      "end_point": [
        373,
        1
      ],
      "content": "void va_ii_iiiiiiii(W a1, W a2, va_list ap)\n{\n    W\t\ta3, a4, a5, a6, a7, a8, a9, a10;\n    VARG3();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_iii_iiiiiii": {
      "start_point": [
        375,
        0
      ],
      "end_point": [
        380,
        1
      ],
      "content": "void va_iii_iiiiiii(W a1, W a2, W a3, va_list ap)\n{\n    W\t\ta4, a5, a6, a7, a8, a9, a10;\n    VARG4();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_iiii_iiiiii": {
      "start_point": [
        382,
        0
      ],
      "end_point": [
        387,
        1
      ],
      "content": "void va_iiii_iiiiii(W a1, W a2, W a3, W a4, va_list ap)\n{\n    W\t\ta5, a6, a7, a8, a9, a10;\n    VARG5();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_d_ddddddddd": {
      "start_point": [
        390,
        0
      ],
      "end_point": [
        395,
        1
      ],
      "content": "void va_d_ddddddddd(D a1, va_list ap)\n{\n    D\t\ta2, a3, a4, a5, a6, a7, a8, a9, a10;\n    VARGD2();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_dd_dddddddd": {
      "start_point": [
        397,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "content": "void va_dd_dddddddd(D a1, D a2, va_list ap)\n{\n    D\t\ta3, a4, a5, a6, a7, a8, a9, a10;\n    VARGD3();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_ddd_ddddddd": {
      "start_point": [
        404,
        0
      ],
      "end_point": [
        409,
        1
      ],
      "content": "void va_ddd_ddddddd(D a1, D a2, D a3, va_list ap)\n{\n    D\t\ta4, a5, a6, a7, a8, a9, a10;\n    VARGD4();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_dddd_dddddd": {
      "start_point": [
        411,
        0
      ],
      "end_point": [
        416,
        1
      ],
      "content": "void va_dddd_dddddd(D a1, D a2, D a3, D a4, va_list ap)\n{\n    D\t\ta5, a6, a7, a8, a9, a10;\n    VARGD5();\n    CHECK();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_i_didididid": {
      "start_point": [
        418,
        0
      ],
      "end_point": [
        424,
        1
      ],
      "content": "void va_i_didididid(W a1, va_list ap)\n{\n    W\t\ta3, a5, a7, a9;\n    D\t\ta2, a4, a6, a8, a10;\n    IDVARG2();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_id_idididid": {
      "start_point": [
        426,
        0
      ],
      "end_point": [
        432,
        1
      ],
      "content": "void va_id_idididid(W a1, D a2, va_list ap)\n{\n    W\t\ta3, a5, a7, a9;\n    D\t\ta4, a6, a8, a10;\n    IDVARG3();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_idi_dididid": {
      "start_point": [
        434,
        0
      ],
      "end_point": [
        440,
        1
      ],
      "content": "void va_idi_dididid(W a1, D a2, W a3, va_list ap)\n{\n    W\t\ta5, a7, a9;\n    D\t\ta4, a6, a8, a10;\n    IDVARG4();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_idid_ididid": {
      "start_point": [
        442,
        0
      ],
      "end_point": [
        448,
        1
      ],
      "content": "void va_idid_ididid(W a1, D a2, W a3, D a4, va_list ap)\n{\n    W\t\ta5, a7, a9;\n    D\t\ta6, a8, a10;\n    IDVARG5();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_d_ididididi": {
      "start_point": [
        450,
        0
      ],
      "end_point": [
        456,
        1
      ],
      "content": "void va_d_ididididi(D a1, va_list ap)\n{\n    W\t\ta2, a4, a6, a8, a10;\n    D\t\ta3, a5, a7, a9;\n    DIVARG2();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_di_didididi": {
      "start_point": [
        458,
        0
      ],
      "end_point": [
        464,
        1
      ],
      "content": "void va_di_didididi(D a1, W a2, va_list ap)\n{\n    W\t\ta4, a6, a8, a10;\n    D\t\ta3, a5, a7, a9;\n    DIVARG3();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_did_idididi": {
      "start_point": [
        466,
        0
      ],
      "end_point": [
        472,
        1
      ],
      "content": "void va_did_idididi(D a1, W a2, D a3, va_list ap)\n{\n    W\t\ta4, a6, a8, a10;\n    D\t\ta5, a7, a9;\n    DIVARG4();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "va_didi_dididi": {
      "start_point": [
        474,
        0
      ],
      "end_point": [
        480,
        1
      ],
      "content": "void va_didi_dididi(D a1, W a2, D a3, W a4, va_list ap)\n{\n    W\t\ta6, a8, a10;\n    D\t\ta5, a7, a9;\n    DIVARG5();\n    CHECK();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "main": {
      "start_point": [
        557,
        0
      ],
      "end_point": [
        1186,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n    void\t\t(*function)(void);\n    jit_node_t\t\t*jmpi_main;\n    jit_node_t\t\t*a1, *a2, *node;\n    jit_node_t\t\t*jva_i_iiiiiiiii, *jva_ii_iiiiiiii;\n    jit_node_t\t\t*jva_d_ddddddddd, *jva_dd_dddddddd;\n    jit_node_t\t\t*jva_i_didididid, *jva_id_idididid;\n    jit_node_t\t\t*jva_d_ididididi, *jva_di_didididi;\n    jit_node_t\t\t*jva_iii_iiiiiii, *jva_iiii_iiiiii;\n    jit_node_t\t\t*jva_ddd_ddddddd, *jva_dddd_dddddd;\n    jit_node_t\t\t*jva_idi_dididid, *jva_idid_ididid;\n    jit_node_t\t\t*jva_did_idididi, *jva_didi_dididi;\n\n    init_jit(argv[0]);\n    _jit = jit_new_state();\n\n    jmpi_main = jit_jmpi();\n\n    /* Define simple functions to validate a jit_va_list_t\n     * is a valid va_list; these do not fetch arguments from\n     * the va_list. */\n    jva_i_iiiiiiiii = jit_label();\n    jit_name(\"va_i_iiiiiiiii\");\n    jit_prolog();\n    a1 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_i_iiiiiiiii);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_ii_iiiiiiii = jit_label();\n    jit_name(\"va_ii_iiiiiiii\");\n    jit_prolog();\n    a1 = jit_arg();\n    a2 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    jit_getarg(JIT_V2, a2);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V2);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_ii_iiiiiiii);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_d_ddddddddd = jit_label();\n    jit_name(\"va_d_ddddddddd\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_d_ddddddddd);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_dd_dddddddd = jit_label();\n    jit_name(\"va_dd_dddddddd\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    a2 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    jit_getarg_d(JIT_F4, a2);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr_d(JIT_F4);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_dd_dddddddd);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_i_didididid = jit_label();\n    jit_name(\"va_i_didididid\");\n    jit_prolog();\n    a1 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_i_didididid);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_id_idididid = jit_label();\n    jit_name(\"va_id_idididid\");\n    jit_prolog();\n    a1 = jit_arg();\n    a2 = jit_arg_d();\n    jit_getarg(JIT_V1, a1);\n    jit_getarg_d(JIT_F3, a2);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr(JIT_V1);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_id_idididid);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_d_ididididi = jit_label();\n    jit_name(\"va_d_ididididi\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_d_ididididi);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_di_didididi = jit_label();\n    jit_name(\"va_di_didididi\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    a2 = jit_arg();\n    jit_getarg_d(JIT_F3, a1);\n    jit_getarg(JIT_V1, a2);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_prepare();\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_di_didididi);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n\n    /* Define complex functions to validate a jit_va_list_t\n     * is a valid va_list; these do fetch arguments from\n     * the va_list, to ensure it does the correct operations\n     * fetching arguments, and pass a valid va_list to the\n     * C function. */\n    jva_iii_iiiiiii = jit_label();\n    jit_name(\"va_iii_iiiiiii\");\n    jit_prolog();\n    a1 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    node = jit_beqi(JIT_V1, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_va_arg(JIT_V2, JIT_V0);\n    jit_prepare();\n    jit_pushargi(1);\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V2);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_iii_iiiiiii);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_iiii_iiiiii = jit_label();\n    jit_name(\"va_iiii_iiiiii\");\n    jit_prolog();\n    a1 = jit_arg();\n    a2 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    node = jit_beqi(JIT_V1, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_getarg(JIT_V1, a2);\n    node = jit_beqi(JIT_V1, 2);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_va_arg(JIT_V2, JIT_V0);\n    jit_prepare();\n    jit_pushargi(1);\n    jit_pushargi(2);\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V2);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_iiii_iiiiii);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_ddd_ddddddd = jit_label();\n    jit_name(\"va_ddd_ddddddd\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    node = jit_beqi_d(JIT_F3, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_va_arg_d(JIT_F4, JIT_V0);\n    jit_prepare();\n    jit_pushargi_d(1);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr_d(JIT_F4);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_ddd_ddddddd);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_dddd_dddddd = jit_label();\n    jit_name(\"va_dddd_dddddd\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    a2 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    node = jit_beqi_d(JIT_F3, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_getarg_d(JIT_F3, a2);\n    node = jit_beqi_d(JIT_F3, 2);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_va_arg_d(JIT_F4, JIT_V0);\n    jit_prepare();\n    jit_pushargi_d(1);\n    jit_pushargi_d(2);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr_d(JIT_F4);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_dddd_dddddd);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_idi_dididid = jit_label();\n    jit_name(\"va_idi_dididid\");\n    jit_prolog();\n    a1 = jit_arg();\n    jit_getarg(JIT_V1, a1);\n    node = jit_beqi(JIT_V1, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_prepare();\n    jit_pushargi(1);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_idi_dididid);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_idid_ididid = jit_label();\n    jit_name(\"va_idid_ididid\");\n    jit_prolog();\n    a1 = jit_arg();\n    a2 = jit_arg_d();\n    jit_getarg(JIT_V1, a1);\n    node = jit_beqi(JIT_V1, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_getarg_d(JIT_F3, a2);\n    node = jit_beqi_d(JIT_F3, 2);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_prepare();\n    jit_pushargi(1);\n    jit_pushargi_d(2);\n    jit_pushargr(JIT_V1);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_idid_ididid);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_did_idididi = jit_label();\n    jit_name(\"va_did_idididi\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    jit_getarg_d(JIT_F3, a1);\n    node = jit_beqi_d(JIT_F3, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_prepare();\n    jit_pushargi_d(1);\n    jit_pushargr(JIT_V1);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_did_idididi);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n    jva_didi_dididi = jit_label();\n    jit_name(\"va_didi_dididi\");\n    jit_prolog();\n    a1 = jit_arg_d();\n    a2 = jit_arg();\n    jit_getarg_d(JIT_F3, a1);\n    node = jit_beqi_d(JIT_F3, 1);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_getarg(JIT_V1, a2);\n    node = jit_beqi(JIT_V1, 2);\n    jit_calli(abort);\n    jit_patch(node);\n    jit_ellipsis();\n    jit_va_start(JIT_V0);\n    jit_va_arg_d(JIT_F3, JIT_V0);\n    jit_va_arg(JIT_V1, JIT_V0);\n    jit_prepare();\n    jit_pushargi_d(1);\n    jit_pushargi(2);\n    jit_pushargr_d(JIT_F3);\n    jit_pushargr(JIT_V1);\n    jit_pushargr(JIT_V0);\n    jit_finishi(va_didi_dididi);\n    jit_va_end(JIT_V0);\n    jit_ret();\n    jit_epilog();\n\n    jit_patch(jmpi_main);\n    jit_name(\"main\");\n    jit_prolog();\n\n    /* Check that lightning properly calls vararg functions */\n    jit_prepare();\n    PUSH1();\n    jit_ellipsis();\n    VPUSH2();\n    jit_finishi(i_iiiiiiiii);\n    jit_prepare();\n    PUSH2();\n    jit_ellipsis();\n    VPUSH3();\n    jit_finishi(ii_iiiiiiii);\n    jit_prepare();\n    PUSH3();\n    jit_ellipsis();\n    VPUSH4();\n    jit_finishi(iii_iiiiiii);\n    jit_prepare();\n    PUSH4();\n    jit_ellipsis();\n    VPUSH5();\n    jit_finishi(iiii_iiiiii);\n    jit_prepare();\n    PUSH5();\n    jit_ellipsis();\n    VPUSH6();\n    jit_finishi(iiiii_iiiii);\n    jit_prepare();\n    PUSH6();\n    jit_ellipsis();\n    VPUSH7();\n    jit_finishi(iiiiii_iiii);\n    jit_prepare();\n    PUSH7();\n    jit_ellipsis();\n    VPUSH8();\n    jit_finishi(iiiiiii_iii);\n    jit_prepare();\n    PUSH8();\n    jit_ellipsis();\n    VPUSH9();\n    jit_finishi(iiiiiiii_ii);\n    jit_prepare();\n    PUSH9();\n    jit_ellipsis();\n    VPUSH10();\n    jit_finishi(iiiiiiiii_i);\n    jit_prepare();\n    PUSHD1();\n    jit_ellipsis();\n    VPUSHD2();\n    jit_finishi(d_ddddddddd);\n    jit_prepare();\n    PUSHD2();\n    jit_ellipsis();\n    VPUSHD3();\n    jit_finishi(dd_dddddddd);\n    jit_prepare();\n    PUSHD3();\n    jit_ellipsis();\n    VPUSHD4();\n    jit_finishi(ddd_ddddddd);\n    jit_prepare();\n    PUSHD4();\n    jit_ellipsis();\n    VPUSHD5();\n    jit_finishi(dddd_dddddd);\n    jit_prepare();\n    PUSHD5();\n    jit_ellipsis();\n    VPUSHD6();\n    jit_finishi(ddddd_ddddd);\n    jit_prepare();\n    PUSHD6();\n    jit_ellipsis();\n    VPUSHD7();\n    jit_finishi(dddddd_dddd);\n    jit_prepare();\n    PUSHD7();\n    jit_ellipsis();\n    VPUSHD8();\n    jit_finishi(ddddddd_ddd);\n    jit_prepare();\n    PUSHD8();\n    jit_ellipsis();\n    VPUSHD9();\n    jit_finishi(dddddddd_dd);\n    jit_prepare();\n    PUSHD9();\n    jit_ellipsis();\n    VPUSHD10();\n    jit_finishi(ddddddddd_d);\n    jit_prepare();\n    IDPUSH1();\n    jit_ellipsis();\n    IDVPUSH2();\n    jit_finishi(i_didididid);\n    jit_prepare();\n    IDPUSH2();\n    jit_ellipsis();\n    IDVPUSH3();\n    jit_finishi(id_idididid);\n    jit_prepare();\n    IDPUSH3();\n    jit_ellipsis();\n    IDVPUSH4();\n    jit_finishi(idi_dididid);\n    jit_prepare();\n    IDPUSH4();\n    jit_ellipsis();\n    IDVPUSH5();\n    jit_finishi(idid_ididid);\n    jit_prepare();\n    IDPUSH5();\n    jit_ellipsis();\n    IDVPUSH6();\n    jit_finishi(ididi_didid);\n    jit_prepare();\n    IDPUSH6();\n    jit_ellipsis();\n    IDVPUSH7();\n    jit_finishi(ididid_idid);\n    jit_prepare();\n    IDPUSH7();\n    jit_ellipsis();\n    IDVPUSH8();\n    jit_finishi(idididi_did);\n    jit_prepare();\n    IDPUSH8();\n    jit_ellipsis();\n    IDVPUSH9();\n    jit_finishi(idididid_id);\n    jit_prepare();\n    IDPUSH9();\n    jit_ellipsis();\n    IDVPUSH10();\n    jit_finishi(ididididi_d);\n    jit_prepare();\n    DIPUSH1();\n    jit_ellipsis();\n    DIVPUSH2();\n    jit_finishi(d_ididididi);\n    jit_prepare();\n    DIPUSH2();\n    jit_ellipsis();\n    DIVPUSH3();\n    jit_finishi(di_didididi);\n    jit_prepare();\n    DIPUSH3();\n    jit_ellipsis();\n    DIVPUSH4();\n    jit_finishi(did_idididi);\n    jit_prepare();\n    DIPUSH4();\n    jit_ellipsis();\n    DIVPUSH5();\n    jit_finishi(didi_dididi);\n    jit_prepare();\n    DIPUSH5();\n    jit_ellipsis();\n    DIVPUSH6();\n    jit_finishi(didid_ididi);\n    jit_prepare();\n    DIPUSH6();\n    jit_ellipsis();\n    DIVPUSH7();\n    jit_finishi(dididi_didi);\n    jit_prepare();\n    DIPUSH7();\n    jit_ellipsis();\n    DIVPUSH8();\n    jit_finishi(dididid_idi);\n    jit_prepare();\n    DIPUSH8();\n    jit_ellipsis();\n    DIVPUSH9();\n    jit_finishi(didididi_di);\n    jit_prepare();\n    DIPUSH9();\n    jit_ellipsis();\n    DIVPUSH10();\n    jit_finishi(didididid_i);\n\n    /* Check that unmodified jit_va_list_t is a valid va_list */\n    jit_prepare();\n    PUSH1();\n    jit_ellipsis();\n    VPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_i_iiiiiiiii);\n    jit_prepare();\n    PUSH2();\n    jit_ellipsis();\n    VPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_ii_iiiiiiii);\n    jit_prepare();\n    PUSHD1();\n    jit_ellipsis();\n    VPUSHD2();\n    jit_patch_at(jit_finishi(NULL), jva_d_ddddddddd);\n    jit_prepare();\n    PUSHD2();\n    jit_ellipsis();\n    VPUSHD3();\n    jit_patch_at(jit_finishi(NULL), jva_dd_dddddddd);\n    jit_prepare();\n    IDPUSH1();\n    jit_ellipsis();\n    IDVPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_i_didididid);\n    jit_prepare();\n    IDPUSH2();\n    jit_ellipsis();\n    IDVPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_id_idididid);\n    jit_prepare();\n    DIPUSH1();\n    jit_ellipsis();\n    DIVPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_d_ididididi);\n    jit_prepare();\n    DIPUSH2();\n    jit_ellipsis();\n    DIVPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_di_didididi);\n\n    /* Check that modified jit_va_list_t is a valid va_list */\n    jit_prepare();\n    PUSH1();\n    jit_ellipsis();\n    VPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_iii_iiiiiii);\n    jit_prepare();\n    PUSH2();\n    jit_ellipsis();\n    VPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_iiii_iiiiii);\n    jit_prepare();\n    PUSHD1();\n    jit_ellipsis();\n    VPUSHD2();\n    jit_patch_at(jit_finishi(NULL), jva_ddd_ddddddd);\n    jit_prepare();\n    PUSHD2();\n    jit_ellipsis();\n    VPUSHD3();\n    jit_patch_at(jit_finishi(NULL), jva_dddd_dddddd);\n    jit_prepare();\n    IDPUSH1();\n    jit_ellipsis();\n    IDVPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_idi_dididid);\n    jit_prepare();\n    IDPUSH2();\n    jit_ellipsis();\n    IDVPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_idid_ididid);\n    jit_prepare();\n    DIPUSH1();\n    jit_ellipsis();\n    DIVPUSH2();\n    jit_patch_at(jit_finishi(NULL), jva_did_idididi);\n    jit_prepare();\n    DIPUSH2();\n    jit_ellipsis();\n    DIVPUSH3();\n    jit_patch_at(jit_finishi(NULL), jva_didi_dididi);\n\n    jit_ret();\n    jit_epilog();\n\n\n    function = jit_emit();\n    jit_clear_state();\n    //jit_disassemble();\n    (*function)();\n    jit_destroy_state();\n\n    finish_jit();\n\n    printf(\"ok\\n\");\n    return 0;\n}",
      "lines": 630,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/lightning.c": {
    "get_ireg": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        831,
        1
      ],
      "content": "static jit_gpr_t\nget_ireg(void)\n{\n    if (primary(skip_ws) != tok_register)\n\terror(\"bad register\");\n    if (parser.regtype != type_l)\n\terror(\"bad int register\");\n\n    return ((jit_gpr_t)parser.regval);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_gpr_t"
      ]
    },
    "get_freg": {
      "start_point": [
        833,
        0
      ],
      "end_point": [
        842,
        1
      ],
      "content": "static jit_fpr_t\nget_freg(void)\n{\n    if (primary(skip_ws) != tok_register)\n\terror(\"bad register\");\n    if (parser.regtype != type_d)\n\terror(\"bad float register\");\n\n    return ((jit_fpr_t)parser.regval);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_fpr_t"
      ]
    },
    "get_symbol": {
      "start_point": [
        844,
        0
      ],
      "end_point": [
        859,
        1
      ],
      "content": "static symbol_t *\nget_symbol(void)\n{\n    symbol_t\t*symbol;\n    int\t\t ch = skipws();\n\n    if (ch != '$')\n\terror(\"expecting variable\");\n    (void)identifier('$');\n    if (parser.string[1] == '\\0')\n\terror(\"expecting variable\");\n    if ((symbol = get_symbol_by_name(parser.string)) == NULL)\n\tsymbol = new_symbol(parser.string);\n\n    return (symbol);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "symbol_t",
        "*\nget_symbol(void)",
        "*"
      ]
    },
    "jmp_forward": {
      "start_point": [
        861,
        0
      ],
      "end_point": [
        865,
        1
      ],
      "content": "static void\njmp_forward(void *value, label_t *label)\n{\n    (void)new_patch(patch_kind_jmp, label, value);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "mov_forward": {
      "start_point": [
        867,
        0
      ],
      "end_point": [
        871,
        1
      ],
      "content": "static void\nmov_forward(void *value, label_t *label)\n{\n    (void)new_patch(patch_kind_mov, label, value);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "call_forward": {
      "start_point": [
        873,
        0
      ],
      "end_point": [
        877,
        1
      ],
      "content": "static void\ncall_forward(void *value, label_t *label)\n{\n    (void)new_patch(patch_kind_call, label, value);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "make_arg": {
      "start_point": [
        879,
        0
      ],
      "end_point": [
        886,
        1
      ],
      "content": "static void\nmake_arg(void *value)\n{\n    symbol_t\t*symbol = get_symbol();\n\n    symbol->type = type_p;\n    symbol->value.p = value;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "get_arg": {
      "start_point": [
        888,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "static jit_pointer_t\nget_arg(void)\n{\n    symbol_t\t*symbol = get_symbol();\n\n    if (symbol->type != type_p)\n\terror(\"bad argument %s type\", symbol->name);\n\n    return symbol->value.p;\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_pointer_t"
      ]
    },
    "get_imm": {
      "start_point": [
        899,
        0
      ],
      "end_point": [
        939,
        1
      ],
      "content": "static long\nget_imm(void)\n{\n    int\t\t ch;\n    label_t\t*label;\n    long\t value;\n    ch = skipws();\n    switch (ch) {\n\tcase '+': case '-': case '0' ... '9':\n\t    ungetch(ch);\n\t    value = get_int(skip_none);\n\t    break;\n\tcase '\\'':\n\t    character();\n\t    value = parser.value.i;\n\t    break;\n\tcase '$':\n\t    switch (expression()) {\n\t\tcase tok_int:\n\t\tcase tok_pointer:\n\t\t    value = parser.value.i;\n\t\t    break;\n\t\tdefault:\n\t\t    error(\"expecting immediate\");\n\t    }\n\t    break;\n\tcase '@':\n\t    dynamic();\n\t    value = (long)parser.value.p;\n\t    break;\n\tdefault:\n\t    ungetch(ch);\n\t    label = get_label(skip_none);\n\t    if (label->kind == label_kind_data)\n\t\tvalue = (long)label->value;\n\t    else\n\t\terror(\"expecting immediate\");\n\t    break;\n    }\n    return (value);\n}",
      "lines": 41,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "long",
        "long"
      ]
    },
    "name": {
      "start_point": [
        1361,
        0
      ],
      "end_point": [
        1366,
        1
      ],
      "content": "static void\nname(void) {\n    int\t\t ch = skipws();\n    (void)identifier(ch);\n    jit_name(parser.string);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "allocai": {
      "start_point": [
        1370,
        0
      ],
      "end_point": [
        1379,
        1
      ],
      "content": "entry(ellipsis)\nvoid\nallocai(void) {\n    symbol_t\t*symbol;\n    jit_word_t\t i, im = get_imm();\n    i = jit_allocai(im);\n    symbol = get_symbol();\n    symbol->type = type_l;\n    symbol->value.i = i;\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "entry(ellipsis)",
        "entry",
        "(",
        "ellipsis",
        "ellipsis",
        ")",
        "void",
        "void"
      ]
    },
    "movi": {
      "start_point": [
        1424,
        0
      ],
      "end_point": [
        1470,
        1
      ],
      "content": "static void\nmovi(void)\n{\n    int\t\t ch;\n    label_t\t*label;\n    void\t*value;\n    jit_gpr_t\t r0 = get_ireg();\n    ch = skipws();\n    switch (ch) {\n\tcase '+': case '-':\n\tcase '0' ... '9':\n\t    ungetch(ch);\n\t    value = (void *)(long)get_uint(skip_none);\n\t    break;\n\tcase '\\'':\n\t    character();\n\t    value = (void *)parser.value.i;\n\t    break;\n\tcase '$':\n\t    switch (expression()) {\n\t\tcase tok_int:\n\t\t    value = (void *)parser.value.i;\n\t\t    break;\n\t\tcase tok_pointer:\n\t\t    value = parser.value.p;\n\t\t    break;\n\t\tdefault:\n\t\t    error(\"expecting pointer\");\n\t    }\n\t    break;\n\tcase '@':\n\t    dynamic();\n\t    value = parser.value.p;\n\t    break;\n\tdefault:\n\t    ungetch(ch);\n\t    label = get_label(skip_none);\n\t    if (label->kind == label_kind_code ||\n\t\tlabel->kind == label_kind_code_forward) {\n\t\tmov_forward((void *)jit_movi(r0, 0), label);\n\t\treturn;\n\t    }\n\t    value = label->value;\n\t    break;\n    }\n    jit_movi(r0, (jit_word_t)value);\n}",
      "lines": 47,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "vastart": {
      "start_point": [
        1653,
        0
      ],
      "end_point": [
        1658,
        1
      ],
      "content": "static void\nvastart(void)\n{\n    jit_gpr_t\tr0 = get_ireg();\n    jit_va_start(r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "vaarg": {
      "start_point": [
        1659,
        0
      ],
      "end_point": [
        1664,
        1
      ],
      "content": "static void\nvaarg(void)\n{\n    jit_gpr_t\tr0 = get_ireg(), r1 = get_ireg();\n    jit_va_arg(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "vaarg_d": {
      "start_point": [
        1665,
        0
      ],
      "end_point": [
        1671,
        1
      ],
      "content": "static void\nvaarg_d(void)\n{\n    jit_fpr_t\tr0 = get_freg();\n    jit_gpr_t\tr1 = get_ireg();\n    jit_va_arg_d(r0, r1);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "vaend": {
      "start_point": [
        1672,
        0
      ],
      "end_point": [
        1677,
        1
      ],
      "content": "static void\nvaend(void)\n{\n    jit_gpr_t\tr0 = get_ireg();\n    jit_va_end(r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "error": {
      "start_point": [
        1721,
        0
      ],
      "end_point": [
        1739,
        1
      ],
      "content": "static void\nerror(const char *format, ...)\n{\n    va_list\t ap;\n    int\t\t length;\n    char\t*string;\n\n    va_start(ap, format);\n    message(\"error\", format, ap);\n    va_end(ap);\n    length = parser.data.length - parser.data.offset;\n    string = (char *)(parser.data.buffer + parser.data.offset - 1);\n    if (length > 77)\n\tstrcpy(string + 74, \"...\");\n    else\n\tparser.data.buffer[parser.data.length - 1] = '\\0';\n    fprintf(stderr, \"(%s)\\n\", string);\n    exit(-1);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "warn": {
      "start_point": [
        1741,
        0
      ],
      "end_point": [
        1748,
        1
      ],
      "content": "static void\nwarn(const char *format, ...)\n{\n    va_list\tap;\n    va_start(ap, format);\n    message(\"warning\", format, ap);\n    va_end(ap);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "message": {
      "start_point": [
        1750,
        0
      ],
      "end_point": [
        1757,
        1
      ],
      "content": "static void\nmessage(const char *kind, const char *format, va_list ap)\n{\n    fprintf(stderr, \"%s:%d: %s: \", parser.name,\n\t    parser.line - parser.newline, kind);\n    vfprintf(stderr, format, ap);\n    fputc('\\n', stderr);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "getch": {
      "start_point": [
        1759,
        0
      ],
      "end_point": [
        1783,
        1
      ],
      "content": "static int\ngetch(void)\n{\n    int\t\tch;\n\n    if (parser.data.offset < parser.data.length)\n\tch = parser.data.buffer[parser.data.offset++];\n    else {\n\t/* keep first offset for ungetch */\n\tif ((parser.data.length = fread(parser.data.buffer + 1, 1,\n\t\t\t\t\tsizeof(parser.data.buffer) - 1,\n\t\t\t\t\tparser.fp) + 1) <= 1) {\n\t    ch = EOF;\n\t    parser.data.offset = 1;\n\t}\n\telse {\n\t    ch = parser.data.buffer[1];\n\t    parser.data.offset = 2;\n\t}\n    }\n    if ((parser.newline = ch == '\\n'))\n\t++parser.line;\n\n    return (ch);\n}",
      "lines": 25,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "getch_noeof": {
      "start_point": [
        1785,
        0
      ],
      "end_point": [
        1794,
        1
      ],
      "content": "static int\ngetch_noeof(void)\n{\n    int\t\tch = getch();\n\n    if (ch == EOF)\n\terror(\"unexpected end of file\");\n\n    return (ch);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "ungetch": {
      "start_point": [
        1796,
        0
      ],
      "end_point": [
        1809,
        1
      ],
      "content": "static int\nungetch(int ch)\n{\n    if ((parser.newline = ch == '\\n'))\n\t--parser.line;\n\n    if (parser.data.offset)\n\tparser.data.buffer[--parser.data.offset] = ch;\n    else\n\t/* overwrite */\n\tparser.data.buffer[0] = ch;\n\n    return (ch);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "skipws": {
      "start_point": [
        1811,
        0
      ],
      "end_point": [
        1832,
        1
      ],
      "content": "static int\nskipws(void)\n{\n    int\t\tch;\n\n    for (ch = getch();; ch = getch()) {\n\tswitch (ch) {\n\t    case '/':\n\t\tch = skipct();\n\t\tbreak;\n\t    case '#':\n\t\tch = skipcp();\n\t\tbreak;\n\t}\n\tswitch (ch) {\n\t    case ' ': case '\\f': case '\\r': case '\\t':\n\t\tbreak;\n\t    default:\n\t\treturn (ch);\n\t}\n    }\n}",
      "lines": 22,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "skipnl": {
      "start_point": [
        1834,
        0
      ],
      "end_point": [
        1858,
        1
      ],
      "content": "static int\nskipnl(void)\n{\n    int\t\tch;\n\n    for (ch = getch();; ch = getch()) {\n\tswitch (ch) {\n\t    case '/':\n\t\tch = skipct();\n\t\tbreak;\n\t    case '#':\n\t\tch = skipcp();\n\t\tbreak;\n\t}\n\tswitch (ch) {\n\t    case ' ': case '\\f': case '\\n': case '\\r': case '\\t':\n\t\tbreak;\n\t\t/* handle as newline */\n\t    case ';':\n\t\tbreak;\n\t    default:\n\t\treturn (ch);\n\t}\n    }\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "skipct": {
      "start_point": [
        1860,
        0
      ],
      "end_point": [
        1883,
        1
      ],
      "content": "static int\nskipct(void)\n{\n    int\t\tch;\n\n    ch = getch();\n    switch (ch) {\n\tcase '/':\n\t    for (ch = getch(); ch != '\\n' && ch != EOF; ch = getch())\n\t\t;\n\t    return (ch);\n\tcase '*':\n\t    for (; ch != '/';) {\n\t\twhile (getch_noeof() != '*')\n\t\t    ;\n\t\twhile ((ch = getch_noeof()) == '*')\n\t\t    ;\n\t    }\n\t    return (getch());\n\tdefault:\n\t    ungetch(ch);\n\t    return ('/');\n    }\n}",
      "lines": 24,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "skipcp": {
      "start_point": [
        1885,
        0
      ],
      "end_point": [
        1911,
        1
      ],
      "content": "static int\nskipcp(void)\n{\n    int\t\tch;\n\n    for (ch = getch(); ch != '\\n' && ch != EOF; ch = getch()) {\n\tswitch (ch) {\n\t    case '0' ... '9':\n\t\tif ((number(ch)) == tok_int)\n\t\t    parser.line = parser.value.i - 1;\n\t\tbreak;\n\t    case '\"':\n\t\tstring();\n\t\tif (parser.offset >= (int)sizeof(parser.name)) {\n\t\t    strncpy(parser.name, parser.string, sizeof(parser.name));\n\t\t    parser.name[sizeof(parser.name) - 1] = '\\0';\n\t\t}\n\t\telse\n\t\t    strcpy(parser.name, parser.string);\n\t\tbreak;\n\t    default:\n\t\tbreak;\n\t}\n    }\n\n    return (ch);\n}",
      "lines": 27,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "get_int": {
      "start_point": [
        1913,
        0
      ],
      "end_point": [
        1928,
        1
      ],
      "content": "static long\nget_int(skip_t skip)\n{\n    switch (primary(skip)) {\n\tcase tok_int:\n\t    break;\n\tcase tok_pointer:\n\t    parser.type = type_l;\n\t    parser.value.i = (long)parser.value.p;\n\t    break;\n\tdefault:\n\t    error(\"expecting integer\");\n    }\n\n    return (parser.value.i);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "long",
        "long"
      ]
    },
    "get_uint": {
      "start_point": [
        1930,
        0
      ],
      "end_point": [
        1945,
        1
      ],
      "content": "static unsigned long\nget_uint(skip_t skip)\n{\n    switch (primary(skip)) {\n\tcase tok_char:\t\tcase tok_int:\n\t    break;\n\tcase tok_pointer:\n\t    parser.type = type_l;\n\t    parser.value.ui = (unsigned long)parser.value.p;\n\t    break;\n\tdefault:\n\t    error(\"expecting integer\");\n    }\n\n    return (parser.value.ui);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "unsigned long",
        "unsigned",
        "long"
      ]
    },
    "get_float": {
      "start_point": [
        1947,
        0
      ],
      "end_point": [
        1963,
        1
      ],
      "content": "static double\nget_float(skip_t skip)\n{\n    switch (primary(skip)) {\n\tcase tok_char:\n\tcase tok_int:\n\t    parser.type = type_d;\n\t    parser.value.d = parser.value.i;\n\t    break;\n\tcase tok_float:\n\t    break;\n\tdefault:\n\t    error(\"expecting float\");\n    }\n\n    return (parser.value.d);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "double"
      ]
    },
    "make_float": {
      "start_point": [
        1967,
        0
      ],
      "end_point": [
        1980,
        1
      ],
      "content": "static float\nmake_float(double d)\n{\n    /* This is an workaround to a bug in Hercules s390 emulator,\n     * and at least HP-UX ia64 not have these */\n#if defined(HAVE_ISNAN) && defined(HAVE_ISINF)\n    if (isnan(d))\treturn ( 0.0f/0.0f);\n    if (isinf(d)) {\n\tif (d > 0.0)\treturn ( 1.0f/0.0f);\n\telse\t\treturn (-1.0f/0.0f);\n    }\n#endif\n    return ((float)d);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "float"
      ]
    },
    "get_pointer": {
      "start_point": [
        1982,
        0
      ],
      "end_point": [
        2013,
        1
      ],
      "content": "static void *\nget_pointer(skip_t skip)\n{\n    label_t\t*label;\n    token_t\t token = primary(skip);\n\n    switch (token) {\n\tcase tok_symbol:\n\t    label = get_label_by_name(parser.string);\n\t    if (label == NULL)\n\t\terror(\"bad identifier %s\", parser.string);\n\t    switch (label->kind) {\n\t\tcase label_kind_data:\n\t\tcase label_kind_code:\n\t\t    break;\n\t\tcase label_kind_code_forward:\n\t\t    /* as expression arguments */\n\t\t    error(\"forward references not implemented\");\n\t\t    break;\n\t\tcase label_kind_dynamic:\n\t\t    break;\n\t    }\n\t    parser.type = type_p;\n\t    return (parser.value.p = label->value);\n\tcase tok_int:\n\t    parser.type = type_p;\n\t    return (parser.value.p = (void *)parser.value.ui);\n\tcase tok_pointer:\n\t    return (parser.value.p);\n\tdefault:\t\terror(\"bad pointer\");\n    }\n}",
      "lines": 32,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nget_pointer(skip_t skip)",
        "*"
      ]
    },
    "get_label": {
      "start_point": [
        2015,
        0
      ],
      "end_point": [
        2036,
        1
      ],
      "content": "static label_t *\nget_label(skip_t skip)\n{\n    label_t\t*label;\n    int\t\t ch = skipws();\n\n    switch (ch) {\n\tcase '@':\n\t    (void)dynamic();\n\t    break;\n\tcase 'a' ... 'z': case 'A' ... 'Z': case '_':\n\t    (void)identifier(ch);\n\t    break;\n\tdefault:\n\t    error(\"expecting label/immediate\");\n    }\n    if ((label = get_label_by_name(parser.string)) == NULL)\n\tlabel = new_label(label_kind_code_forward,\n\t\t\t  parser.string, jit_forward());\n\n    return (label);\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "label_t",
        "*\nget_label(skip_t skip)",
        "*"
      ]
    },
    "regname": {
      "start_point": [
        2038,
        0
      ],
      "end_point": [
        2114,
        1
      ],
      "content": "static token_t\nregname(void)\n{\n    long\tnum;\n    int\t\tcheck = 1, ch = getch();\n\n    switch (ch) {\n\tcase 'r':\n\t    parser.regtype = type_l;\n\t    switch (ch = getch()) {\n\t\tcase '0':\tparser.regval = JIT_R0;\t\tbreak;\n\t\tcase '1':\tparser.regval = JIT_R1;\t\tbreak;\n\t\tcase '2':\tparser.regval = JIT_R2;\t\tbreak;\n\t\tcase '(':\n\t\t    num = get_int(skip_none);\n\t\t    if (num < 0 || num >= JIT_R_NUM)\t\tgoto fail;\n\t\t    parser.regval = JIT_R(num);\n\t\t    if (getch() != ')')\t\t\t\tgoto fail;\n\t\t    check = 0;\n\t\t    break;\n\t\tdefault:\t\t\t\t\tgoto fail;\n\t    }\n\t    break;\n\tcase 'v':\n\t    parser.regtype = type_l;\n\t    switch (ch = getch()) {\n\t\tcase '0':\tparser.regval = JIT_V0;\t\tbreak;\n\t\tcase '1':\tparser.regval = JIT_V1;\t\tbreak;\n\t\tcase '2':\tparser.regval = JIT_V2;\t\tbreak;\n\t\tdefault:\t\t\t\t\tgoto fail;\n\t\tcase '(':\n\t\t    num = get_int(skip_none);\n\t\t    if (num < 0 || num >= JIT_V_NUM)\t\tgoto fail;\n\t\t    parser.regval = JIT_V(num);\n\t\t    if (getch() != ')')\t\t\t\tgoto fail;\n\t\t    check = 0;\n\t\t    break;\n\t    }\n\t    break;\n\tcase 'f':\n\t    parser.regtype = type_d;\n\t    switch (ch = getch()) {\n\t\tcase '0':\tparser.regval = JIT_F0;\t\tbreak;\n\t\tcase '1':\tparser.regval = JIT_F1;\t\tbreak;\n\t\tcase '2':\tparser.regval = JIT_F2;\t\tbreak;\n\t\tcase '3':\tparser.regval = JIT_F3;\t\tbreak;\n\t\tcase '4':\tparser.regval = JIT_F4;\t\tbreak;\n\t\tcase '5':\tparser.regval = JIT_F5;\t\tbreak;\n\t\tcase 'p':\n\t\t    parser.regtype = type_l;\t/* oops */\n\t\t    parser.regval = JIT_FP;\t\t\tbreak;\n\t\tcase '(':\n\t\t    num = get_int(skip_none);\n\t\t    if (num < 0 || num >= JIT_F_NUM)\t\tgoto fail;\n\t\t    parser.regval = JIT_F(num);\n\t\t    if (getch() != ')')\t\t\t\tgoto fail;\n\t\t    check = 0;\n\t\t    break;\n\t\tdefault:\t\t\t\t\tgoto fail;\n\t    }\n\t    break;\n\tdefault:\n\tfail:\n\t    error(\"bad register\");\n    }\n    if (check) {\n\tch = getch();\n\tif ((ch >= 'a' && ch <= 'z') ||\n\t    (ch >= 'A' && ch <= 'Z') ||\n\t    (ch >= '0' && ch <= '9') ||\n\t    ch == '_')\n\t    goto fail;\n\tungetch(ch);\n    }\n\n    return (tok_register);\n}",
      "lines": 77,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "identifier": {
      "start_point": [
        2116,
        0
      ],
      "end_point": [
        2135,
        1
      ],
      "content": "static token_t\nidentifier(int ch)\n{\n    parser.string[0] = ch;\n    for (parser.offset = 1;;) {\n\tswitch ((ch = getch())) {\n\t    case 'a' ... 'z': case 'A' ... 'Z': case '0' ... '9' :  case '_':\n\t\tif (parser.offset + 1 >= MAX_IDENTIFIER) {\n\t\t    parser.string[parser.offset] = '\\0';\n\t\t    error(\"bad identifier %s\", parser.string);\n\t\t}\n\t\tparser.string[parser.offset++] = ch;\n\t\tbreak;\n\t    default:\n\t\tparser.string[parser.offset] = '\\0';\n\t\tungetch(ch);\n\t\treturn (tok_symbol);\n\t}\n    }\n}",
      "lines": 20,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "get_data": {
      "start_point": [
        2137,
        0
      ],
      "end_point": [
        2205,
        1
      ],
      "content": "static void\nget_data(type_t type)\n{\n    int\t\t ch;\n    token_t\t token;\n    char\t*test = data;\n\n    for (;;) {\n\tswitch (type) {\n\t    case type_c:\n\t\tswitch (token = primary(skip_ws)) {\n\t\t    case tok_char: case tok_int:\n\t\t\tcheck_data(sizeof(signed char));\n\t\t\t*(signed char *)(data + data_offset) = parser.value.i;\n\t\t\tdata_offset += sizeof(char);\n\t\t\tbreak;\n\t\t    case tok_string:\n\t\t\tcheck_data(parser.offset);\n\t\t\tmemcpy(data + data_offset, parser.string,\n\t\t\t       parser.offset);\n\t\t\tdata_offset += parser.offset;\n\t\t\tbreak;\n\t\t    case tok_newline:\n\t\t    case tok_semicollon:\n\t\t\tif (test == data)\terror(\"syntax error\");\n\t\t\treturn;\n\t\t    default:\t\t\terror(\"bad initializer\");\n\t\t}\n\t\tbreak;\n\t    case type_s:\n\t\tcheck_data(sizeof(signed short));\n\t\t*(signed short *)(data + data_offset) = get_int(skip_ws);\n\t\tdata_offset += sizeof(short);\n\t\tbreak;\n\t    case type_i:\n\t\tcheck_data(sizeof(signed int));\n\t\t*(signed int *)(data + data_offset) = get_int(skip_ws);\n\t\tdata_offset += sizeof(int);\n\t\tbreak;\n\t    case type_l:\n\t\tcheck_data(sizeof(signed long));\n\t\t*(signed long *)(data + data_offset) = get_int(skip_ws);\n\t\tdata_offset += sizeof(long);\n\t\tbreak;\n\t    case type_f:\n\t\tcheck_data(sizeof(float));\n\t\t*(float *)(data + data_offset) = get_float(skip_ws);\n\t\tdata_offset += sizeof(float);\n\t\tbreak;\n\t    case type_d:\n\t\tcheck_data(sizeof(double));\n\t\t*(double *)(data + data_offset) = get_float(skip_ws);\n\t\tdata_offset += sizeof(double);\n\t\tbreak;\n\t    case type_p:\n\t\t/* FIXME **patch if realloc** */\n\t\tcheck_data(sizeof(void*));\n\t\t*(void **)(data + data_offset) = get_pointer(skip_ws);\n\t\tdata_offset += sizeof(void*);\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tch = skipws();\n\tif (ch == '\\n' || ch == ';' || ch == EOF)\n\t    break;\n\tungetch(ch);\n    }\n}",
      "lines": 69,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "dot": {
      "start_point": [
        2207,
        0
      ],
      "end_point": [
        2279,
        1
      ],
      "content": "static void\ndot(void)\n{\n    int\t\tch;\n    size_t\toffset, length;\n\n    switch (ch = getch_noeof()) {\n\tcase '$':\n\t    /* use .$(expression) for non side effects expression */\n\t    (void)expression();\n\t    return;\n\tcase 'a' ... 'z': case 'A' ... 'Z': case '_':\n\t    (void)identifier(ch);\n\t    break;\n\tdefault:\n\t    ungetch(ch);\n\t    if (skipws() != '$')\n\t\terror(\"expecting symbol\");\n\t    /* allow spaces before an expression */\n\t    (void)expression();\n\t    return;\n    }\n    if (parser.string[1] == '\\0') {\n\tswitch (parser.string[0]) {\n\t    case 'c':\tget_data(type_c);\tbreak;\n\t    case 's':\tget_data(type_s);\tbreak;\n\t    case 'i':\tget_data(type_i);\tbreak;\n\t    case 'l':\tget_data(type_l);\tbreak;\n\t    case 'f':\tget_data(type_f);\tbreak;\n\t    case 'd':\tget_data(type_d);\tbreak;\n\t    case 'p':\tget_data(type_p);\tbreak;\n\t    default:\terror(\"bad type .%c\", parser.string[0]);\n\t}\n    }\n    else if (strcmp(parser.string, \"data\") == 0) {\n\tif (parser.parsing != PARSING_NONE)\n\t    error(\".data must be specified once and be the first section\");\n\tparser.parsing = PARSING_DATA;\n\tdata_length = get_int(skip_ws);\n\tdata = (char *)xcalloc(1, data_length);\n    }\n    else if (strcmp(parser.string, \"code\") == 0) {\n\tif (parser.parsing != PARSING_NONE &&\n\t    parser.parsing != PARSING_DATA)\n\t    error(\".code must be specified once only\");\n\tparser.parsing = PARSING_CODE;\n    }\n    else if (strcmp(parser.string, \"align\") == 0) {\n\tlength = get_int(skip_ws);\n\tif (parser.parsing != PARSING_DATA)\n\t    error(\".align must be in .data\");\n\tif (length > 1 && length <= 4096 && !(length & (length - 1))) {\n\t    offset = data_offset;\n\t    offset += length - ((offset + length) % length);\n\t    check_data(offset - data_offset);\n\t    data_offset = offset;\n\t}\n\telse\n\t    error(\"bad .align %ld (must be a power of 2, >= 2 && <= 4096)\",\n\t\t  (long)length);\n    }\n    else if (strcmp(parser.string, \"size\") == 0) {\n\tlength = get_int(skip_ws);\n\tif (parser.parsing != PARSING_DATA)\n\t    error(\".size must be in .data\");\n\tcheck_data(length);\n\tdata_offset += length;\n    }\n    else if (strcmp(parser.string, \"disasm\") == 0)\n\tflag_disasm = 1;\n    else\n\terror(\"unknown command .%s\", parser.string);\n}",
      "lines": 73,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "number": {
      "start_point": [
        2281,
        0
      ],
      "end_point": [
        2389,
        1
      ],
      "content": "static token_t\nnumber(int ch)\n{\n    char\tbuffer[1024], *endptr;\n    int\t\tinteger = 1, offset = 0, neg = 0, e = 0, d = 0, base = 10;\n\n    for (;; ch = getch()) {\n\tswitch (ch) {\n\t    case '-':\n\t\tif (offset == 0) {\n\t\t    neg = 1;\n\t\t    continue;\n\t\t}\n\t\tif (offset && buffer[offset - 1] != 'e') {\n\t\t    ungetch(ch);\n\t\t    goto done;\n\t\t}\n\t\tbreak;\n\t    case '+':\n\t\tif (offset == 0)\n\t\t    continue;\n\t\tif (offset && buffer[offset - 1] != 'e') {\n\t\t    ungetch(ch);\n\t\t    goto done;\n\t\t}\n\t\tbreak;\n\t    case '.':\n\t\tif (d)\n\t\t    goto fail;\n\t\td = 1;\n\t\tbase = 10;\n\t\tinteger = 0;\n\t\tbreak;\n\t    case '0':\n\t\tif (offset == 0 && base == 10) {\n\t\t    base = 8;\n\t\t    continue;\n\t\t}\n\t\tbreak;\n\t    case 'b':\n\t\tif (offset == 0 && base == 8) {\n\t\t    base = 2;\n\t\t    continue;\n\t\t}\n\t\tif (base != 16)\n\t\t    goto fail;\n\t\tbreak;\n\t    case '1':\n\t\tbreak;\n\t    case '2' ... '7':\n\t\tif (base < 8)\n\t\t    goto fail;\n\t\tbreak;\n\t    case '8': case '9':\n\t\tif (base < 10)\n\t\t    goto fail;\n\t\tbreak;\n\t    case 'x':\n\t\tif (offset == 0 && base == 8) {\n\t\t    base = 16;\n\t\t    continue;\n\t\t}\n\t\tgoto fail;\n\t    case 'a': case 'c': case 'd': case 'f':\n\t\tif (base < 16)\n\t\t    goto fail;\n\t\tbreak;\n\t    case 'e':\n\t\tif (e)\n\t\t    goto fail;\n\t\tif (base != 16) {\n\t\t    e = 1;\n\t\t    base = 10;\n\t\t    integer = 0;\n\t\t}\n\t\tbreak;\n\t    case '_': case 'g' ... 'w': case 'y': case 'z': case 'A' ... 'Z':\n\t    fail:\n\t\tbuffer[offset++] = '\\0';\n\t\terror(\"bad constant %s\", buffer);\n\t    default:\n\t\tungetch(ch);\n\t\tgoto done;\n\t}\n\tif (offset + 1 >= (int)sizeof(buffer))\n\t    goto fail;\n\tbuffer[offset++] = ch;\n    }\ndone:\n    /* check for literal 0 */\n    if (offset == 0 && base == 8)\tbuffer[offset++] = '0';\n    buffer[offset] = '\\0';\n    if (integer) {\n\tparser.value.ui = strtoul(buffer, &endptr, base);\n\tparser.type = type_l;\n\tif (neg)\n\t    parser.value.i = -parser.value.i;\n    }\n    else {\n\tparser.type = type_d;\n\tparser.value.d = strtod(buffer, &endptr);\n\tif (neg)\n\t    parser.value.d = -parser.value.d;\n    }\n    if (*endptr)\n\tgoto fail;\n\n    return (integer ? tok_int : tok_float);\n}",
      "lines": 109,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "escape": {
      "start_point": [
        2391,
        0
      ],
      "end_point": [
        2406,
        1
      ],
      "content": "static int\nescape(int ch)\n{\n    switch (ch) {\n\tcase 'a':\tch = '\\a';\tbreak;\n\tcase 'b':\tch = '\\b';\tbreak;\n\tcase 'f':\tch = '\\f';\tbreak;\n\tcase 'n':\tch = '\\n';\tbreak;\n\tcase 'r':\tch = '\\r';\tbreak;\n\tcase 't':\tch = '\\t';\tbreak;\n\tcase 'v':\tch = '\\v';\tbreak;\n\tdefault:\t\t\tbreak;\n    }\n\n    return (ch);\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "string": {
      "start_point": [
        2408,
        0
      ],
      "end_point": [
        2442,
        1
      ],
      "content": "static token_t\nstring(void)\n{\n    int\t\tch, esc = 0;\n\n    for (parser.offset = 0;;) {\n\tswitch (ch = getch_noeof()) {\n\t    case '\\\\':\n\t\tif (esc)\t\tgoto append;\n\t\tesc = 1;\n\t\tbreak;\n\t    case '\"':\n\t\tif (!esc) {\n\t\t    parser.string[parser.offset++] = '\\0';\n\t\t    parser.value.p = parser.string;\n\t\t    parser.type = type_p;\n\t\t    return (tok_string);\n\t\t}\n\t\t/* FALLTHROUGH */\n\t    default:\n\t    append:\n\t\tif (esc) {\n\t\t    ch = escape(ch);\n\t\t    esc = 0;\n\t\t}\n\t\tif (parser.offset + 1 >= parser.length) {\n\t\t    parser.length += 4096;\n\t\t    parser.string = (char *)xrealloc(parser.string,\n\t\t\t\t\t\t     parser.length);\n\t\t}\n\t\tparser.string[parser.offset++] = ch;\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 35,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "character": {
      "start_point": [
        2444,
        0
      ],
      "end_point": [
        2461,
        1
      ],
      "content": "static token_t\ncharacter(void)\n{\n    int\t\tch, esc = 0;\n\n    if ((ch = getch_noeof()) == '\\\\') {\n\tesc = 1;\n\tch = getch();\n    }\n    if (getch_noeof() != '\\'')\n\terror(\"bad single byte char\");\n    if (esc)\n\tch = escape(ch);\n    parser.type = type_l;\n    parser.value.i = ch & 0xff;\n\n    return (tok_char);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "dynamic": {
      "start_point": [
        2463,
        0
      ],
      "end_point": [
        2491,
        1
      ],
      "content": "static token_t\ndynamic(void)\n{\n    label_t\t*label;\n    void\t*value;\n    char\t*string;\n    (void)identifier('@');\n    if ((label = get_label_by_name(parser.string)) == NULL) {\n#if __CYGWIN__\n\t/* FIXME kludge to pass varargs test case, otherwise,\n\t * will not print/scan float values */\n\tif (strcmp(parser.string + 1, \"sprintf\") == 0)\n\t    value = sprintf;\n\telse if (strcmp(parser.string + 1, \"sscanf\") == 0)\n\t    value = sscanf;\n\telse\n#endif\n\t{\n\t    value = dlsym(DL_HANDLE, parser.string + 1);\n\t    if ((string = dlerror()))\n\t\terror(\"%s\", string);\n\t}\n\tlabel = new_label(label_kind_dynamic, parser.string, value);\n    }\n    parser.type = type_p;\n    parser.value.p = label->value;\n\n    return (tok_pointer);\n}",
      "lines": 29,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "expression_prim": {
      "start_point": [
        2493,
        0
      ],
      "end_point": [
        2662,
        1
      ],
      "content": "static void\nexpression_prim(void)\n{\n    int\t\t ch;\n    token_t\t token;\n    label_t\t*label;\n    symbol_t\t*symbol;\n\n    if (parser.putback) {\n\tparser.expr = parser.putback;\n\tparser.putback = (expr_t)0;\n\treturn;\n    }\n    switch (ch = skipws()) {\n\tcase '!':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_ne;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_not;\n\t    }\n\t    break;\n\tcase '~':\t\t\t\tparser.expr = expr_com;\n\t    break;\n\tcase '*':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_mulset;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_mul;\n\t    }\n\t    break;\n\tcase '/':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_divset;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_div;\n\t    }\n\t    break;\n\tcase '%':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_remset;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_rem;\n\t    }\n\t    break;\n\tcase '+':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '+':\t\t\tparser.expr = expr_inc;\n\t\t    break;\n\t\tcase '=':\t\t\tparser.expr = expr_addset;\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_add;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '-':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '-':\t\t\tparser.expr = expr_dec;\n\t\t    break;\n\t\tcase '=':\t\t\tparser.expr = expr_subset;\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_sub;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '<':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '=':\t\t\tparser.expr = expr_le;\n\t\t    break;\n\t\tcase '<':\t\t\tch = getch_noeof();\n\t\t    if (ch == '=')\t\tparser.expr = expr_lshset;\n\t\t    else {\n\t\t\tungetch(ch);\t\tparser.expr = expr_lsh;\n\t\t    }\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_lt;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '>':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '=':\t\t\tparser.expr = expr_ge;\n\t\t    break;\n\t\tcase '>':\t\t\tch = getch_noeof();\n\t\t    if (ch == '=')\t\tparser.expr = expr_rshset;\n\t\t    else {\n\t\t\tungetch(ch);\t\tparser.expr = expr_rsh;\n\t\t    }\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_gt;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '&':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '=':\t\t\tparser.expr = expr_andset;\n\t\t    break;\n\t\tcase '&':\t\t\tparser.expr = expr_andand;\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_and;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '|':\n\t    switch (ch = getch_noeof()) {\n\t\tcase '=':\t\t\tparser.expr = expr_orset;\n\t\t    break;\n\t\tcase '|':\t\t\tparser.expr = expr_oror;\n\t\t    break;\n\t\tdefault:\tungetch(ch);\tparser.expr = expr_or;\n\t\t    break;\n\t    }\n\t    break;\n\tcase '^':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_xorset;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_xor;\n\t    }\n\t    break;\n\tcase '=':\n\t    if ((ch = getch_noeof()) == '=')\tparser.expr = expr_eq;\n\t    else {\n\t\tungetch(ch);\t\t\tparser.expr = expr_set;\n\t    }\n\t    break;\n\tcase '(':\t\t\t\tparser.expr = expr_lparen;\n\t    break;\n\tcase ')':\t\t\t\tparser.expr = expr_rparen;\n\t    break;\n\tcase '0' ... '9':\n\t    token = number(ch);\n\t    parser.expr = token == tok_int ? expr_int : expr_float;\n\t    break;\n\tcase '@':\n\t    (void)dynamic();\n\t    parser.expr = expr_pointer;\n\t    break;\n\tcase '$':\n\t    identifier('$');\n\t    /* no support for nested expressions */\n\t    if (parser.string[0] == '\\0')\n\t\terror(\"syntax error\");\n\t    parser.expr = expr_symbol;\n\t    if ((symbol = get_symbol_by_name(parser.string)) != NULL) {\n\t\tparser.type = symbol->type;\n\t\tparser.value = symbol->value;\n\t    }\n\t    else\n\t\t/* only create symbol on assignment */\n\t\tparser.type = type_none;\n\t    break;\n\tcase 'a' ... 'z': case 'A' ... 'Z': case '_':\n\t    identifier(ch);\n\t    if ((label = get_label_by_name(parser.string))) {\n\t\tif (label->kind == label_kind_code_forward)\n\t\t    error(\"forward value for %s not supported\",\n\t\t\t  parser.string);\n\t\tparser.expr = expr_pointer;\n\t\tparser.type = type_p;\n\t\tparser.value.p = label->value;\n\t    }\n\t    else\n\t\terror(\"invalid identifier %s\", parser.string);\n\t    break;\n\tcase '\\'':\n\t    character();\n\t    parser.expr = expr_int;\n\t    break;\n\tcase '\"':\n\t    /* not smart enough to put it in data and/or relocate it, etc */\n\t    error(\"must declare strings as data\");\n\tdefault:\n\t    error(\"syntax error\");\n    }\n}",
      "lines": 170,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_inc": {
      "start_point": [
        2664,
        0
      ],
      "end_point": [
        2698,
        1
      ],
      "content": "static void\nexpression_inc(int pre)\n{\n    symbol_t\t*symbol;\n\n    if (pre) {\n\texpression_prim();\n\tif (parser.expr != expr_symbol)\n\t    error(\"syntax error\");\n    }\n    if ((symbol = get_symbol_by_name(parser.string)) == NULL) {\n\tif (!parser.short_circuit)\n\t    error(\"undefined symbol %s\", symbol->name);\n    }\n    if (!parser.short_circuit) {\n\tparser.type = symbol->type;\n\tif (!pre)\n\t    parser.value = symbol->value;\n\tswitch (symbol->type) {\n\t    case type_l:\n\t\t++symbol->value.i;\n\t\tbreak;\n\t    case type_d:\n\t\t/* should really be an error */\n\t\tsymbol->value.d += 1.0;\n\t\tbreak;\n\t    default:\n\t\t++parser.value.cp;\n\t\tbreak;\n\t}\n\tif (pre)\n\t    parser.value = symbol->value;\n    }\n    expression_prim();\n}",
      "lines": 35,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_dec": {
      "start_point": [
        2700,
        0
      ],
      "end_point": [
        2734,
        1
      ],
      "content": "static void\nexpression_dec(int pre)\n{\n    symbol_t\t*symbol;\n\n    if (pre) {\n\texpression_prim();\n\tif (parser.expr != expr_symbol)\n\t    error(\"syntax error\");\n    }\n    if ((symbol = get_symbol_by_name(parser.string)) == NULL) {\n\tif (!parser.short_circuit)\n\t    error(\"undefined symbol %s\", symbol->name);\n    }\n    if (!parser.short_circuit) {\n\tparser.type = symbol->type;\n\tif (!pre)\n\t    parser.value = symbol->value;\n\tswitch (symbol->type) {\n\t    case type_l:\n\t\t--symbol->value.i;\n\t\tbreak;\n\t    case type_d:\n\t\t/* should really be an error */\n\t\tsymbol->value.d -= 1.0;\n\t\tbreak;\n\t    default:\n\t\t--parser.value.cp;\n\t\tbreak;\n\t}\n\tif (pre)\n\t    parser.value = symbol->value;\n    }\n    expression_prim();\n}",
      "lines": 35,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_unary": {
      "start_point": [
        2736,
        0
      ],
      "end_point": [
        2881,
        1
      ],
      "content": "static void\nexpression_unary(void)\n{\n    symbol_t\t*symbol;\n    char\t buffer[256];\n\n    expression_prim();\n    switch (parser.expr) {\n\tcase expr_add:\n\t    expression_unary();\n\t    switch (parser.type) {\n\t\tcase type_l:\n\t\tcase type_d:\n\t\t    break;\n\t\tdefault:\n\t\t    error(\"syntax error\");\n\t    }\n\t    break;\n\tcase expr_sub:\n\t    expression_unary();\n\t    switch (parser.type) {\n\t\tcase type_l:\n\t\t    parser.value.i = -parser.value.i;\n\t\t    break;\n\t\tcase type_d:\n\t\t    parser.value.d = -parser.value.d;\n\t\t    break;\n\t\tdefault:\n\t\t    error(\"syntax error\");\n\t    }\n\t    break;\n\tcase expr_inc:\n\t    expression_inc(1);\n\t    break;\n\tcase expr_dec:\n\t    expression_dec(1);\n\t    break;\n\tcase expr_not:\n\t    expression_unary();\n\t    switch (parser.type) {\n\t\tcase type_l:\n\t\t    parser.value.i = !parser.value.i;\n\t\t    break;\n\t\tcase type_d:\n\t\t    parser.value.i = parser.value.d != 0;\n\t\t    break;\n\t\tcase type_p:\n\t\t    parser.value.i = parser.value.p != NULL;\n\t\t    break;\n\t\tdefault:\n\t\t    error(\"syntax error\");\n\t    }\n\t    parser.type = type_l;\n\t    break;\n\tcase expr_com:\n\t    expression_unary();\n\t    if (parser.type != type_l)\n\t\terror(\"syntax error\");\n\t    parser.value.i = ~parser.value.i;\n\t    break;\n\tcase expr_lparen:\n\t    expression_cond();\n\t    if (parser.expr != expr_rparen)\n\t\terror(\"syntax error\");\n\t    expression_prim();\n\t    break;\n\tcase expr_symbol:\n\t    strcpy(buffer, parser.string);\n\t    expression_prim();\n\t    switch (parser.expr) {\n\t\tcase expr_set:\n\t\t    if ((symbol = get_symbol_by_name(buffer)) == NULL) {\n\t\t\tif (!parser.short_circuit)\n\t\t\t    symbol = new_symbol(buffer);\n\t\t    }\n\t\t    expression_cond();\n\t\tset:\n\t\t    if (!parser.short_circuit) {\n\t\t\tif (symbol == NULL)\n\t\t\t    error(\"syntax error\");\n\t\t\tsymbol->type = parser.type;\n\t\t\tsymbol->value = parser.value;\n\t\t    }\n\t\t    break;\n\t\tcase expr_mulset:\t\tparser.putback = expr_mul;\n\t\t    goto check;\n\t\tcase expr_divset:\t\tparser.putback = expr_div;\n\t\t    goto check;\n\t\tcase expr_remset:\t\tparser.putback = expr_rem;\n\t\t    goto check;\n\t\tcase expr_addset:\t\tparser.putback = expr_add;\n\t\t    goto check;\n\t\tcase expr_subset:\t\tparser.putback = expr_sub;\n\t\t    goto check;\n\t\tcase expr_lshset:\t\tparser.putback = expr_lsh;\n\t\t    goto check;\n\t\tcase expr_rshset:\t\tparser.putback = expr_rsh;\n\t\t    goto check;\n\t\tcase expr_andset:\t\tparser.putback = expr_and;\n\t\t    goto check;\n\t\tcase expr_orset:\t\tparser.putback = expr_or;\n\t\t    goto check;\n\t\tcase expr_xorset:\t\tparser.putback = expr_xor;\n\t\tcheck:\n\t\t    if ((symbol = get_symbol_by_name(buffer)) == NULL) {\n\t\t\tif (!parser.short_circuit)\n\t\t\t    error(\"undefined symbol %s\", buffer);\n\t\t\tparser.type = type_l;\n\t\t\tparser.value.i = 1;\n\t\t    }\n\t\t    switch (parser.putback) {\n\t\t\tcase expr_mul:\tcase expr_div:\tcase expr_rem:\n\t\t\t    expression_mul();\n\t\t\t    break;\n\t\t\tcase expr_add:\tcase expr_sub:\n\t\t\t    expression_add();\n\t\t\t    break;\n\t\t\tcase expr_lsh:\tcase expr_rsh:\n\t\t\t    expression_shift();\n\t\t\t    break;\n\t\t\tcase expr_and:\tcase expr_or:  case expr_xor:\n\t\t\t    expression_bit();\n\t\t\t    break;\n\t\t\tdefault:\n\t\t\t    abort();\n\t\t    }\n\t\t    goto set;\n\t\tcase expr_inc:\n\t\t    expression_inc(0);\n\t\t    break;\n\t\tcase expr_dec:\n\t\t    expression_dec(0);\n\t\t    break;\n\t\tdefault:\n\t\t    break;\n\t    }\n\t    break;\n\tcase expr_int:\n\tcase expr_float:\n\tcase expr_pointer:\n\t    /* make next token available */\n\t    expression_prim();\n\tdefault:\n\t    break;\n    }\n}",
      "lines": 146,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_mul": {
      "start_point": [
        2883,
        0
      ],
      "end_point": [
        2965,
        1
      ],
      "content": "static void\nexpression_mul(void)\n{\n    type_t\ttype;\n    value_t\tvalue;\n\n    expression_unary();\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_mul:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_unary();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tif (type == type_l)\n\t\t\t    value.i *= parser.value.i;\n\t\t\telse\n\t\t\t    value.d *= parser.value.i;\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tif (type == type_l) {\n\t\t\t    type = type_d;\n\t\t\t    value.d = value.i;\n\t\t\t}\n\t\t\tvalue.d *= parser.value.d;\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type, parser.value = value;\n\t\tbreak;\n\t    case expr_div:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_unary();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tif (type == type_l) {\n\t\t\t    if (parser.value.i == 0)\n\t\t\t\terror(\"divide by zero\");\n\t\t\t    value.i /= parser.value.i;\n\t\t\t}\n\t\t\telse\n\t\t\t    value.d /= parser.value.i;\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tif (type == type_l) {\n\t\t\t    type = type_d;\n\t\t\t    value.d = value.i;\n\t\t\t}\n\t\t\tvalue.d /= parser.value.d;\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type, parser.value = value;\n\t\tbreak;\n\t    case expr_rem:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_unary();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tif (type == type_l) {\n\t\t\t    if (parser.value.i == 0)\n\t\t\t\terror(\"divide by zero\");\n\t\t\t    value.i %= parser.value.i;\n\t\t\t}\n\t\t\telse\n\t\t\t    error(\"invalid operand\");\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type, parser.value = value;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 83,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_add": {
      "start_point": [
        2967,
        0
      ],
      "end_point": [
        3074,
        1
      ],
      "content": "static void\nexpression_add(void)\n{\n    type_t\ttype;\n    value_t\tvalue;\n\n    expression_mul();\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_add:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_mul();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i += parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.d += parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.cp += parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\ttype = type_d;\n\t\t\t\tvalue.d = value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tvalue.d += parser.value.d;\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\ttype = type_p;\n\t\t\t\tvalue.cp = value.i + parser.value.cp;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type, parser.value = value;\n\t\tbreak;\n\t    case expr_sub:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_mul();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i -= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.d -= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.cp -= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\ttype = type_d;\n\t\t\t\tvalue.d = value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tvalue.d -= parser.value.d;\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_p:\n\t\t\t\ttype = type_l;\n\t\t\t\tvalue.i = value.cp - parser.value.cp;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type, parser.value = value;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 108,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_shift": {
      "start_point": [
        3076,
        0
      ],
      "end_point": [
        3112,
        1
      ],
      "content": "static void\nexpression_shift(void)\n{\n    long\tvalue;\n    expression_add();\n\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_lsh:\n\t\tvalue = parser.value.i;\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\texpression_add();\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\tvalue <<= parser.value.i;\n\t\tparser.value.i = value;\n\t\tbreak;\n\t    case expr_rsh:\n\t\tvalue = parser.value.i;\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\texpression_add();\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\tvalue >>= parser.value.i;\n\t\tparser.value.i = value;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 37,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_bit": {
      "start_point": [
        3114,
        0
      ],
      "end_point": [
        3160,
        1
      ],
      "content": "static void\nexpression_bit(void)\n{\n    long\ti;\n\n    expression_shift();\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_and:\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti = parser.value.i;\n\t\texpression_shift();\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti &= parser.value.i;\n\t\tparser.value.i = i;\n\t\tbreak;\n\t    case expr_or:\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti = parser.value.i;\n\t\texpression_shift();\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti |= parser.value.i;\n\t\tparser.value.i = i;\n\t\tbreak;\n\t    case expr_xor:\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti = parser.value.i;\n\t\texpression_shift();\n\t\tif (parser.type != type_l)\n\t\t    error(\"invalid operand\");\n\t\ti ^= parser.value.i;\n\t\tparser.value.i = i;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 47,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_rel": {
      "start_point": [
        3162,
        0
      ],
      "end_point": [
        3456,
        1
      ],
      "content": "static void\nexpression_rel(void)\n{\n    type_t\ttype;\n    value_t\tvalue;\n\n    expression_bit();\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_lt:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i < parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d < parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p < parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i < parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d < parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i < (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p < (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    case expr_le:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i <= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d <= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p <= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i <= parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d <= parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p <= parser.value.d;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i <= (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p <= (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    case expr_eq:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i == parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d == parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p == parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i == parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d == parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i == (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p == parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    case expr_ge:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i >= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d >= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p >= parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i >= parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d >= parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i >= (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p >= (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    case expr_gt:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i > parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d > parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p > parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i > parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d > parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i > (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p > (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    case expr_ne:\n\t\ttype = parser.type, value = parser.value;\n\t\texpression_bit();\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i != parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d != parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = (long)value.p != parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i != parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d != parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i != (long)parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\terror(\"invalid operand\");\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p != parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value = value;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 295,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression_cond": {
      "start_point": [
        3458,
        0
      ],
      "end_point": [
        3598,
        1
      ],
      "content": "static void\nexpression_cond(void)\n{\n    type_t\ttype;\n    value_t\tvalue;\n    int\t\tshort_circuit;\n\n    expression_rel();\n    switch (parser.type) {\n\tcase type_l:\tcase type_d:\tcase type_p:\tbreak;\n\tdefault:\t\t\t\t\treturn;\n    }\n    for (;;) {\n\tswitch (parser.expr) {\n\t    case expr_andand:\n\t\ttype = parser.type, value = parser.value;\n\t\tswitch (type) {\n\t\t    case type_l:\n\t\t\tshort_circuit = value.i == 0;\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tshort_circuit = value.d == 0.0;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tshort_circuit = value.p == NULL;\n\t\t\tbreak;\n\t\t}\n\t\tparser.short_circuit += short_circuit;\n\t\texpression_rel();\n\t\tparser.short_circuit -= short_circuit;\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i && parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d && parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p && parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i && parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d && parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p && parser.value.d;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i && parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d && parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p && parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value.i = value.i;\n\t\tbreak;\n\t    case expr_oror:\n\t\ttype = parser.type, value = parser.value;\n\t\tswitch (type) {\n\t\t    case type_l:\n\t\t\tshort_circuit = value.i != 0;\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tshort_circuit = value.d != 0.0;\n\t\t\tbreak;\n\t\t    default:\n\t\t\tshort_circuit = value.p != NULL;\n\t\t\tbreak;\n\t\t}\n\t\tparser.short_circuit += short_circuit;\n\t\texpression_rel();\n\t\tparser.short_circuit -= short_circuit;\n\t\tswitch (parser.type) {\n\t\t    case type_l:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i || parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d || parser.value.i;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p || parser.value.i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_d:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i || parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d || parser.value.d;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p || parser.value.d;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    case type_p:\n\t\t\tswitch (type) {\n\t\t\t    case type_l:\n\t\t\t\tvalue.i = value.i || parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    case type_d:\n\t\t\t\tvalue.i = value.d || parser.value.p;\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tvalue.i = value.p || parser.value.p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t    default:\n\t\t\terror(\"invalid operand\");\n\t\t}\n\t\tparser.type = type_l, parser.value.i = value.i;\n\t\tbreak;\n\t    default:\n\t\treturn;\n\t}\n    }\n}",
      "lines": 141,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "expression": {
      "start_point": [
        3600,
        0
      ],
      "end_point": [
        3639,
        1
      ],
      "content": "static token_t\nexpression(void)\n{\n    symbol_t\t*symbol;\n\n    (void)identifier('$');\n    if (parser.string[1] == '\\0') {\n\tif (getch_noeof() != '(')\n\t    error(\"bad symbol or expression\");\n\tparser.type = type_none;\n\texpression_cond();\n\tif (parser.expr != expr_rparen)\n\t    error(\"bad expression\");\n\tswitch (parser.type) {\n\t    case type_l:\n\t\treturn (tok_int);\n\t    case type_d:\n\t\treturn (tok_float);\n\t    case type_p:\n\t\treturn (tok_pointer);\n\t    default:\n\t\terror(\"bad expression\");\n\t}\n    }\n    else if ((symbol = get_symbol_by_name(parser.string))) {\n\tswitch (parser.type = symbol->type) {\n\t    case type_l:\n\t\tparser.value.i = symbol->value.i;\n\t\treturn (tok_int);\n\t    case type_d:\n\t\tparser.value.d = symbol->value.d;\n\t\treturn (tok_float);\n\t    default:\n\t\tparser.value.p = symbol->value.p;\n\t\treturn (tok_pointer);\n\t}\n    }\n    else\n\terror(\"undefined symbol %s\", parser.string);\n}",
      "lines": 40,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "primary": {
      "start_point": [
        3641,
        0
      ],
      "end_point": [
        3678,
        1
      ],
      "content": "static token_t\nprimary(skip_t skip)\n{\n    int\t\tch;\n\n    switch (skip) {\n\tcase skip_none:\tch = getch();\tbreak;\n\tcase skip_ws:\tch = skipws();\tbreak;\n\tcase skip_nl:\tch = skipnl();\tbreak;\n\tdefault:\t\t\tabort();\n    }\n    switch (ch) {\n\tcase '%':\n\t    return (regname());\n\tcase 'a' ... 'z': case 'A' ... 'Z': case '_':\n\t    return (identifier(ch));\n\tcase '0' ... '9': case '+': case '-':\n\t    return (number(ch));\n\tcase '.':\n\t    return (tok_dot);\n\tcase '\"':\n\t    return (string());\n\tcase '\\'':\n\t    return (character());\n\tcase '@':\n\t    return (dynamic());\n\tcase '$':\n\t    return (expression());\n\tcase EOF:\n\t    return (tok_eof);\n\tcase '\\n':\n\t    return (tok_newline);\n\tcase ';':\n\t    return (tok_semicollon);\n\tdefault:\n\t    error(\"syntax error\");\n    }\n}",
      "lines": 38,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "token_t"
      ]
    },
    "parse": {
      "start_point": [
        3680,
        0
      ],
      "end_point": [
        3737,
        1
      ],
      "content": "static void\nparse(void)\n{\n    int\t\t ch;\n    token_t\t token;\n    instr_t\t*instr;\n    label_t\t*label;\n    void\t*value;\n\n    for (;;) {\n\tswitch (token = primary(skip_nl)) {\n\t    case tok_symbol:\n\t\tch = getch_noeof();\n\t\tif (ch == ':') {\n\t\t    if ((label = get_label_by_name(parser.string))) {\n\t\t\tif (label->kind == label_kind_code_forward) {\n\t\t\t    label->kind = label_kind_code;\n\t\t\t    jit_link(label->value);\n\t\t\t    jit_note(parser.name, parser.line);\n\t\t\t}\n\t\t\telse\n\t\t\t    error(\"label %s: redefined\", parser.string);\n\t\t    }\n\t\t    else {\n\t\t\tif (parser.parsing == PARSING_DATA) {\n\t\t\t    value = data + data_offset;\n\t\t\t    label = new_label(label_kind_data,\n\t\t\t\t\t      parser.string, value);\n\t\t\t}\n\t\t\telse if (parser.parsing == PARSING_CODE) {\n\t\t\t    value = jit_label();\n\t\t\t    jit_note(parser.name, parser.line);\n\t\t\t    label = new_label(label_kind_code,\n\t\t\t\t\t      parser.string, value);\n\t\t\t}\n\t\t\telse\n\t\t\t    error(\"label not in .code or .data\");\n\t\t    }\n\t\t    break;\n\t\t}\n\t\tungetch(ch);\n\t\tif ((instr =\n\t\t     (instr_t *)get_hash(instrs, parser.string)) == NULL)\n\t\t    error(\"unhandled symbol %s\", parser.string);\n\t\tif (parser.parsing != PARSING_CODE)\n\t\t    error(\".code must be specified before instructions\");\n\t\t(*instr->function)();\n\t\tbreak;\n\t    case tok_dot:\n\t\tdot();\n\t\tbreak;\n\t    case tok_eof:\n\t\treturn;\n\t    default:\n\t\terror(\"syntax error\");\n\t}\n    }\n}",
      "lines": 58,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "execute": {
      "start_point": [
        3739,
        0
      ],
      "end_point": [
        3788,
        1
      ],
      "content": "static int\nexecute(int argc, char *argv[])\n{\n    int\t\t result;\n    label_t\t*label;\n    function_t\t function;\n    patch_t\t*patch, *next;\n\n    for (patch = patches; patch; patch = next) {\n\tnext = patch->next;\n\tlabel = patch->label;\n\tif (label->kind == label_kind_code_forward)\n\t    error(\"undefined label %s\", label->name);\n\tswitch (patch->kind) {\n\t    case patch_kind_jmp:\n\t    case patch_kind_mov:\n\t    case patch_kind_call:\n\t\tjit_patch_at(patch->value, label->value);\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tfree(patch);\n\tpatch = next;\n    }\n\n    if (flag_data == 0) {\n\tjit_realize();\n\tjit_set_data(NULL, 0, JIT_DISABLE_DATA | JIT_DISABLE_NOTE);\n    }\n\n    function = jit_emit();\n    if (flag_verbose > 1 || flag_disasm) {\n\tjit_print();\n\tfprintf(stdout, \"  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n\");\n    }\n    if (flag_verbose > 0 || flag_disasm) {\n\tjit_disassemble();\n\tfprintf(stdout, \"  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n\");\n    }\n\n    jit_clear_state();\n    if (flag_disasm)\n\tresult = 0;\n    else\n\tresult = (*function)(argc, argv);\n    jit_destroy_state();\n\n    return (result);\n}",
      "lines": 50,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "xmalloc": {
      "start_point": [
        3790,
        0
      ],
      "end_point": [
        3799,
        1
      ],
      "content": "static void *\nxmalloc(size_t size)\n{\n    void\t*pointer = malloc(size);\n\n    if (pointer == NULL)\n\terror(\"out of memory\");\n\n    return (pointer);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nxmalloc(size_t size)",
        "*"
      ]
    },
    "xrealloc": {
      "start_point": [
        3801,
        0
      ],
      "end_point": [
        3810,
        1
      ],
      "content": "static void *\nxrealloc(void *pointer, size_t size)\n{\n    pointer = realloc(pointer, size);\n\n    if (pointer == NULL)\n\terror(\"out of memory\");\n\n    return (pointer);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nxrealloc(void *pointer, size_t size)",
        "*"
      ]
    },
    "xcalloc": {
      "start_point": [
        3812,
        0
      ],
      "end_point": [
        3821,
        1
      ],
      "content": "static void *\nxcalloc(size_t nmemb, size_t size)\n{\n    void\t*pointer = calloc(nmemb, size);\n\n    if (pointer == NULL)\n\terror(\"out of memory\");\n\n    return (pointer);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void",
        "*\nxcalloc(size_t nmemb, size_t size)",
        "*"
      ]
    },
    "new_label": {
      "start_point": [
        3823,
        0
      ],
      "end_point": [
        3835,
        1
      ],
      "content": "static label_t *\nnew_label(label_kind_t kind, char *name, void *value)\n{\n    label_t\t*label;\n\n    label = (label_t *)xmalloc(sizeof(label_t));\n    label->kind = kind;\n    label->name = strdup(name);\n    label->value = value;\n    put_hash(labels, (entry_t *)label);\n    label_offset++;\n    return (label);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "label_t",
        "*\nnew_label(label_kind_t kind, char *name, void *value)",
        "*"
      ]
    },
    "new_patch": {
      "start_point": [
        3837,
        0
      ],
      "end_point": [
        3848,
        1
      ],
      "content": "static patch_t *\nnew_patch(patch_kind_t kind, label_t *label, void *value)\n{\n    patch_t\t*patch = (patch_t *)xmalloc(sizeof(patch_t));\n    patch->kind = kind;\n    patch->label = label;\n    patch->value = value;\n    patch->next = patches;\n    patches = patch;\n\n    return (patch);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "patch_t",
        "*\nnew_patch(patch_kind_t kind, label_t *label, void *value)",
        "*"
      ]
    },
    "bcmp_symbols": {
      "start_point": [
        3850,
        0
      ],
      "end_point": [
        3854,
        1
      ],
      "content": "static int\nbcmp_symbols(const void *left, const void *right)\n{\n    return (strcmp((char *)left, (*(symbol_t **)right)->name));\n}",
      "lines": 5,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "qcmp_symbols": {
      "start_point": [
        3856,
        0
      ],
      "end_point": [
        3860,
        1
      ],
      "content": "static int\nqcmp_symbols(const void *left, const void *right)\n{\n    return (strcmp((*(symbol_t **)left)->name, (*(symbol_t **)right)->name));\n}",
      "lines": 5,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "new_symbol": {
      "start_point": [
        3862,
        0
      ],
      "end_point": [
        3881,
        1
      ],
      "content": "static symbol_t *\nnew_symbol(char *name)\n{\n    symbol_t\t*symbol;\n\n    if ((symbol_offset & 15) == 0) {\n\tif ((symbol_length += 16) == 16)\n\t    symbols = (symbol_t **)xmalloc(sizeof(symbol_t *) *\n\t\t\t\t\t   symbol_length);\n\telse\n\t    symbols = (symbol_t **)xrealloc(symbols, sizeof(symbol_t *) *\n\t\t\t\t\t    symbol_length);\n    }\n    symbol = (symbol_t *)xmalloc(sizeof(symbol_t));\n    symbol->name = strdup(name);\n    symbols[symbol_offset++] = symbol;\n    qsort(symbols, symbol_offset, sizeof(symbol_t *), qcmp_symbols);\n\n    return (symbol);\n}",
      "lines": 20,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "symbol_t",
        "*\nnew_symbol(char *name)",
        "*"
      ]
    },
    "get_symbol_by_name": {
      "start_point": [
        3883,
        0
      ],
      "end_point": [
        3894,
        1
      ],
      "content": "static symbol_t *\nget_symbol_by_name(char *name)\n{\n    symbol_t\t**symbol_pointer;\n\n    if (symbols == NULL)\n\treturn (NULL);\n    symbol_pointer = (symbol_t **)bsearch(name, symbols, symbol_offset,\n\t\t\t\t\t  sizeof(symbol_t *), bcmp_symbols);\n\n    return (symbol_pointer ? *symbol_pointer : NULL);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "symbol_t",
        "*\nget_symbol_by_name(char *name)",
        "*"
      ]
    },
    "new_hash": {
      "start_point": [
        3896,
        0
      ],
      "end_point": [
        3906,
        1
      ],
      "content": "static hash_t *\nnew_hash(void)\n{\n    hash_t\t*hash;\n\n    hash = (hash_t *)xmalloc(sizeof(hash_t));\n    hash->count = 0;\n    hash->entries = (entry_t **)xcalloc(hash->size = 32, sizeof(void *));\n\n    return (hash);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "hash_t",
        "*\nnew_hash(void)",
        "*"
      ]
    },
    "hash_string": {
      "start_point": [
        3908,
        0
      ],
      "end_point": [
        3918,
        1
      ],
      "content": "static int\nhash_string(char *name)\n{\n    char\t*ptr;\n    int\t\t key;\n\n    for (key = 0, ptr = name; *ptr; ptr++)\n\tkey = (key << (key & 1)) ^ *ptr;\n\n    return (key);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "put_hash": {
      "start_point": [
        3920,
        0
      ],
      "end_point": [
        3938,
        1
      ],
      "content": "static void\nput_hash(hash_t *hash, entry_t *entry)\n{\n    entry_t\t*prev, *ptr;\n    int\t\t key = hash_string(entry->name) & (hash->size - 1);\n\n    for (prev = ptr = hash->entries[key]; ptr; prev = ptr, ptr = ptr->next) {\n\tif (strcmp(entry->name, ptr->name) == 0)\n\t    error(\"duplicated entry %s\", entry->name);\n    }\n    if (prev == NULL)\n\thash->entries[key] = entry;\n    else\n\tprev->next = entry;\n    entry->next = NULL;\n    ++hash->count;\n    if (hash->count > hash->size * 0.75)\n\trehash(hash);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "get_hash": {
      "start_point": [
        3940,
        0
      ],
      "end_point": [
        3951,
        1
      ],
      "content": "static entry_t *\nget_hash(hash_t *hash, char *name)\n{\n    entry_t\t*entry;\n    int\t\t key = hash_string(name) & (hash->size - 1);\n\n    for (entry = hash->entries[key]; entry; entry = entry->next) {\n\tif (strcmp(entry->name, name) == 0)\n\t    return (entry);\n    }\n    return (NULL);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "entry_t",
        "*\nget_hash(hash_t *hash, char *name)",
        "*"
      ]
    },
    "rehash": {
      "start_point": [
        3953,
        0
      ],
      "end_point": [
        3971,
        1
      ],
      "content": "static void\nrehash(hash_t *hash)\n{\n    int\t\t i, size, key;\n    entry_t\t*entry, *next, **entries;\n\n    entries = (entry_t **)xcalloc(size = hash->size * 2, sizeof(void *));\n    for (i = 0; i < hash->size; i++) {\n\tfor (entry = hash->entries[i]; entry; entry = next) {\n\t    next = entry->next;\n\t    key = hash_string(entry->name) & (size - 1);\n\t    entry->next = entries[key];\n\t    entries[key] = entry;\n\t}\n    }\n    free(hash->entries);\n    hash->entries = entries;\n    hash->size = size;\n}",
      "lines": 19,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "usage": {
      "start_point": [
        3973,
        0
      ],
      "end_point": [
        4007,
        1
      ],
      "content": "static void\nusage(void)\n{\n#if HAVE_GETOPT_LONG_ONLY\n    fprintf(stderr, \"\\\nUsage: %s [jit assembler options] file [jit program options]\\n\\\nJit assembler options:\\n\\\n  -help                    Display this information\\n\\\n  -v[0-3]                  Verbose output level\\n\\\n  -d                       Do not use a data buffer\\n\\\n  -D<macro>[=<val>]        Preprocessor options\\n\"\n#  if defined(__i386__) && __WORDSIZE == 32\n\"  -mx87=1                  Force using x87 when sse2 available\\n\"\n#  endif\n#  if defined(__i386__) || defined(__x86_64__)\n\"  -msse4_1=0               Do not use sse4_1 instructions when available\\n\"\n#  endif\n#  if defined(__arm__)\n\"  -mcpu=<val>              Force cpu version (4, 5, 6 or 7)\\n\\\n  -mthumb[=0|1]            Enable or disable thumb\\n\\\n  -mvfp=<val>              Set vpf version (0 to disable)\\n\\\n  -mneon[=0|1]             Enable or disable neon\\n\"\n#  endif\n\t    , progname);\n#else\n    fprintf(stderr, \"\\\nUsage: %s [jit assembler options] file [jit program options]\\n\\\nJit assembler options:\\n\\\n  -h                       Display this information\\n\\\n  -v                       Verbose output level\\n\\\n  -D<macro>[=<val>]        Preprocessor options\\n\", progname);\n#endif\n    finish_jit();\n    exit(1);\n}",
      "lines": 35,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "main": {
      "start_point": [
        4009,
        0
      ],
      "end_point": [
        4308,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n#if HAVE_GETOPT_LONG_ONLY\n    static const char\t*short_options = \"dv::\";\n    static struct option long_options[] = {\n\t{ \"help\",\t\t0, 0, 'h' },\n\t{ \"data\",\t\t2, 0, 'd' },\n#  if defined(__i386__) && __WORDSIZE == 32\n\t{ \"mx87\",\t\t2, 0, '7' },\n#  endif\n#  if defined(__i386__) || defined(__x86_64__)\n\t{ \"msse4_1\",\t\t2, 0, '4' },\n#  endif\n#  if defined(__arm__)\n\t{ \"mcpu\",\t\t2, 0, 'c' },\n\t{ \"mthumb\",\t\t2, 0, 't' },\n\t{ \"mvfp\",\t\t2, 0, 'f' },\n\t{ \"mneon\",\t\t2, 0, 'n' },\n#  endif\n\t{ 0,\t\t\t0, 0, 0   }\n    };\n#else\n#endif\t/* HAVE_GETOPT_LONG_ONLY */\n    int\t\t\t offset;\n    char\t\t*endptr;\n    int\t\t\t opt_index;\n    int\t\t\t opt_short;\n    char\t\t cmdline[8192];\n\n#if __WORDSIZE == 32 && defined(__CYGWIN__)\n    /* Cause a compile warning about redefinition without dllimport\n     * attribute, *but* cause correct linkage if liblightning.a is\n     * linked to binutils (that happens to have an internal\n     * getopt* implementation and an apparently conflicting\n     * optind global variable) */\n    extern int\t\t optind;\n    optind = 1;\n#endif\n\n    progname = argv[0];\n\n    init_jit(progname);\n\n#if defined(__sgi)\n    DL_HANDLE = dlopen(NULL, RTLD_LAZY);\n#endif\n\n    flag_data = 1;\n#if HAVE_GETOPT_LONG_ONLY\n    for (;;) {\n\tif ((opt_short = getopt_long_only(argc, argv, short_options,\n\t\t\t\t\t  long_options, &opt_index)) < 0)\n\t    break;\n\tswitch (opt_short) {\n\t    case 'h':\n\t    default:\n\t\tusage();\n\t\tbreak;\n\t    case 'v':\n\t\tif (optarg) {\n\t\t    flag_verbose = strtol(optarg, &endptr, 10);\n\t\t    if (*endptr || flag_verbose < 0)\n\t\t\tusage();\n\t\t}\n\t\telse\n\t\t    flag_verbose = 1;\n\t\tbreak;\n\t    case 'd':\n\t\tflag_data = 0;\n\t\tbreak;\n#if defined(__i386__) && __WORDSIZE == 32\n\t    case '7':\n\t\tif (optarg) {\n\t\t    if (strcmp(optarg, \"\") == 0 || strcmp(optarg, \"1\") == 0)\n\t\t\tjit_cpu.sse2 = 0;\n\t\t    else if (strcmp(optarg, \"0\"))\n\t\t\tusage();\n\t\t}\n\t\telse\n\t\t    jit_cpu.sse2 = 0;\n\t\tbreak;\n#endif\n#if defined(__i386__) || defined(__x86_64__)\n\t    case '4':\n\t\tif (optarg) {\n\t\t    if (strcmp(optarg, \"0\") == 0)\n\t\t\tjit_cpu.sse4_2 = 0;\n\t\t    else if (strcmp(optarg, \"1\"))\n\t\t\tusage();\n\t\t}\n\t\tbreak;\n#endif\n#if defined(__arm__)\n\t    case 'c':\n\t\tif (optarg) {\n\t\t    offset = strtol(optarg, &endptr, 10);\n\t\t    if (*endptr || offset < 0)\n\t\t\tusage();\n\t\t    if (offset < jit_cpu.version)\n\t\t\tjit_cpu.version = offset;\n\t\t}\n\t\tbreak;\n\t    case 't':\n\t\tif (optarg) {\n\t\t    if (strcmp(optarg, \"0\") == 0)\n\t\t\tjit_cpu.thumb = 0;\n\t\t    else if (strcmp(optarg, \"1\") && strcmp(optarg, \"2\"))\n\t\t\tusage();\n\t\t}\n\t\tbreak;\n\t    case 'f':\n#  if !defined(__ARM_PCS_VFP)\n\t\t/* Do not allow overrinding hard float abi */\n\t\tif (optarg) {\n\t\t    offset = strtol(optarg, &endptr, 10);\n\t\t    if (*endptr || offset < 0)\n\t\t\tusage();\n\t\t    if (offset < jit_cpu.vfp)\n\t\t\tjit_cpu.vfp = offset;\n\t\t}\n#  endif\n\t\tbreak;\n\t    case 'n':\n\t\tif (optarg) {\n\t\t    if (strcmp(optarg, \"0\") == 0)\n\t\t\tjit_cpu.neon = 0;\n\t\t    else if (strcmp(optarg, \"1\"))\n\t\t\tusage();\n\t\t}\n\t\tbreak;\n#endif\n\t}\n    }\n#else\n    while ((opt_short = getopt(argc, argv, \"hvd\")) >= 0) {\n\tif (opt_short == 'v')\n\t    ++flag_verbose;\n\telse if (opt_short == 'd')\n\t    flag_data = 0;\n\telse\n\t    usage();\n    }\n#endif\n\n    opt_index = optind;\n#if defined(__hpux)\n    /* Workaround */\n    if (opt_index < argc && argv[opt_index][0] == '-')\n\t++opt_index;\n#endif\n    if (opt_index < 0 || opt_index >= argc)\n\tusage();\n    if (strcmp(argv[opt_index], \"-\") == 0)\n\tstrcpy(parser.name, \"<stdin>\");\n    else {\n\tif ((endptr = strrchr(argv[opt_index], '/')) == NULL)\n\t    endptr = argv[opt_index];\n\telse\n\t    ++endptr;\n\tstrncpy(parser.name, endptr, sizeof(parser.name));\n\tparser.name[sizeof(parser.name) - 1] = '\\0';\n    }\n#if __clang__\n#  define cc \"clang\"\n#else\n#  define cc \"gcc\"\n#endif\n    opt_short = snprintf(cmdline, sizeof(cmdline), cc \" -E -x c %s\", argv[opt_index]);\n    for (++opt_index; opt_index < argc; opt_index++) {\n\tif (argv[opt_index][0] == '-')\n\t    opt_short += snprintf(cmdline + opt_short,\n\t\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t\t  \" %s\", argv[opt_index]);\n\telse {\n\t    --opt_index;\n\t    break;\n\t}\n    }\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__WORDSIZE=%d\", __WORDSIZE);\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__LITTLE_ENDIAN=%d\", __LITTLE_ENDIAN);\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__BIG_ENDIAN=%d\", __BIG_ENDIAN);\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__BYTE_ORDER=%d\", __BYTE_ORDER);\n#if defined(__i386__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__i386__=1\");\n#endif\n#if defined(__x86_64__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__x86_64__=1\");\n#endif\n#if defined(__mips__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__mips__=1\");\n#endif\n#if defined(__arm__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__arm__=1\");\n#endif\n#if defined(__ppc__) || defined(__powerpc__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__ppc__=1\");\n#endif\n#if defined(__sparc__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__sparc__=1\");\n#endif\n#if defined(__ia64__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__ia64__=1\");\n#endif\n#if defined(__hppa__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__hppa__=1\");\n#endif\n#if defined(_AIX)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D_AIX=1\");\n#endif\n#if defined(__sgi__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__sgi__=1\");\n#endif\n#if defined(__aarch64__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__aarch64__=1\");\n#endif\n#if defined(__s390__) || defined(__s390x__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__s390__=1\");\n#endif\n#if defined(__alpha__)\n    opt_short += snprintf(cmdline + opt_short,\n\t\t\t  sizeof(cmdline) - opt_short,\n\t\t\t  \" -D__alpha__=1\");\n#endif\n    if ((parser.fp = popen(cmdline, \"r\")) == NULL)\n\terror(\"cannot execute %s\", cmdline);\n\n    parser.line = 1;\n    parser.string = (char *)xmalloc(parser.length = 4096);\n\n#if defined(__linux__) && (defined(__i386__) || defined(__x86_64__))\n    /*\tdouble precision\t\t0x200\n     *\tround nearest\t\t\t0x000\n     *\tinvalid operation mask\t\t0x001\n     *\tdenormalized operand mask\t0x002\n     *\tzero divide mask\t\t0x004\n     *\tprecision (inexact) mask\t0x020\n     */\n    {\n\tfpu_control_t fpu_control = 0x027f;\n\t_FPU_SETCW(fpu_control);\n    }\n#endif\n\n    _jit = jit_new_state();\n\n    instrs = new_hash();\n    for (offset = 0;\n\t offset < (int)(sizeof(instr_vector) / sizeof(instr_vector[0]));\n\t offset++)\n\tput_hash(instrs, (entry_t *)(instr_vector + offset));\n\n    labels = new_hash();\n\n    parse();\n    pclose(parser.fp);\n    parser.fp = NULL;\n\n    for (opt_short = 0; opt_index < argc; opt_short++, opt_index++)\n\targv[opt_short] = argv[opt_index];\n    argv[opt_short] = NULL;\n    argc = opt_short;\n    execute(argc, argv);\n\n    finish_jit();\n\n    return (0);\n}",
      "lines": 300,
      "depth": 19,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/nodata.c": {
    "gencode": {
      "start_point": [
        32,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "content": "void\ngencode(jit_word_t flags)\n{\n    jit_word_t\t\toffset;\n    jit_word_t\t\tlength;\n\n    _jit = jit_new_state();\n\n    jit_name(\"main\");\n    jit_prolog();\n    jit_prepare();\n    jit_pushargi((jit_word_t)\"%f\\n\");\n    jit_ellipsis();\n    jit_pushargi_d(1.5);\n    jit_finishi(printf);\n    jit_note(\"nodata.c\", __LINE__);\n\n    /* call to jit_realize() is only required when using an alternate\n     * code buffer. Note that not using mmap'ed memory may not work\n     * on several ports and/or operating system versions */\n    jit_realize();\n\n    if (jit_get_data(&data_length, &note_length) != NULL)\n\tabort();\n\n    length = 0;\n    if (!(flags & JIT_DISABLE_DATA))\n\tlength += data_length;\n    if (!(flags & JIT_DISABLE_NOTE))\n\tlength += note_length;\n\n    /* check that a too small buffer fails */\n    if (flags)\n\tjit_set_data(length ? data : NULL, length, flags);\n\n    /* and calling again with enough space works */\n    offset = (length + 7) & -8;\n    function = jit_emit();\n    if (function == NULL)\n\tabort();\n\n    jit_clear_state();\n    (*function)();\n    jit_destroy_state();\n}",
      "lines": 45,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "main": {
      "start_point": [
        78,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n#if defined(__sgi)\n    mmap_fd = open(\"/dev/zero\", O_RDWR);\n#endif\n\n    data = mmap(NULL, 4096,\n\t\tPROT_READ | PROT_WRITE,\n\t\tMAP_PRIVATE | MAP_ANON, mmap_fd, 0);\n    assert(data != MAP_FAILED);\n#if defined(__sgi)\n    close(mmap_fd);\n#endif\n\n    init_jit(argv[0]);\n\n    gencode(0);\n    gencode(JIT_DISABLE_DATA);\n    gencode(JIT_DISABLE_NOTE);\n    gencode(JIT_DISABLE_DATA | JIT_DISABLE_NOTE);\n\n    finish_jit();\n\n    munmap(data, 4096);\n\n    return (0);\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/self.c": {
    "main": {
      "start_point": [
        4,
        0
      ],
      "end_point": [
        135,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    jit_state_t\t\t*_jit;\n\n    /* Same JIT_XY are not constants */\n    init_jit(argv[0]);\n\n    _jit = jit_new_state();\n    assert(JIT_R0 == jit_r(0));\n    (void)jit_callee_save_p(JIT_R0);\n    assert(JIT_R1 == jit_r(1));\n    (void)jit_callee_save_p(JIT_R1);\n    assert(JIT_R2 == jit_r(2));\n    (void)jit_callee_save_p(JIT_R2);\n#if defined(JIT_R3)\n    assert(JIT_R3 == jit_r(3));\n    (void)jit_callee_save_p(JIT_R3);\n#  if defined(JIT_R4)\n    assert(JIT_R4 == jit_r(4));\n    (void)jit_callee_save_p(JIT_R4);\n#    if defined(JIT_R5)\n    assert(JIT_R5 == jit_r(5));\n    (void)jit_callee_save_p(JIT_R5);\n#      if defined(JIT_R6)\n    assert(JIT_R6 == jit_r(6));\n    (void)jit_callee_save_p(JIT_R6);\n#        if defined(JIT_R7)\n    assert(JIT_R7 == jit_r(7));\n    (void)jit_callee_save_p(JIT_R7);\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n    assert(JIT_V0 == jit_v(0));\n    assert(jit_callee_save_p(JIT_V0));\n    assert(JIT_V1 == jit_v(1));\n    assert(jit_callee_save_p(JIT_V1));\n    assert(JIT_V2 == jit_v(2));\n    assert(jit_callee_save_p(JIT_V2));\n#if defined(JIT_V3)\n    assert(JIT_V3 == jit_v(3));\n    assert(jit_callee_save_p(JIT_V3));\n#  if defined(JIT_V4)\n    assert(JIT_V4 == jit_v(4));\n    assert(jit_callee_save_p(JIT_V4));\n#    if defined(JIT_V5)\n    assert(JIT_V5 == jit_v(5));\n    assert(jit_callee_save_p(JIT_V5));\n#      if defined(JIT_V6)\n    assert(JIT_V6 == jit_v(6));\n    assert(jit_callee_save_p(JIT_V6));\n#        if defined(JIT_V7)\n    assert(JIT_V7 == jit_v(7));\n    assert(jit_callee_save_p(JIT_V7));\n#          if defined(JIT_V8)\n    assert(JIT_V8 == jit_v(8));\n    assert(jit_callee_save_p(JIT_V8));\n#            if defined(JIT_V9)\n    assert(JIT_V9 == jit_v(9));\n    assert(jit_callee_save_p(JIT_V9));\n#              if defined(JIT_V10)\n    assert(JIT_V10 == jit_v(10));\n    assert(jit_callee_save_p(JIT_V10));\n#                if defined(JIT_V11)\n    assert(JIT_V11 == jit_v(11));\n    assert(jit_callee_save_p(JIT_V11));\n#                  if defined(JIT_V12)\n    assert(JIT_V12 == jit_v(12));\n    assert(jit_callee_save_p(JIT_V12));\n#                    if defined(JIT_V13)\n    assert(JIT_V13 == jit_v(13));\n    assert(jit_callee_save_p(JIT_V13));\n#                      if defined(JIT_V14)\n    assert(JIT_V14 == jit_v(14));\n    assert(jit_callee_save_p(JIT_V14));\n#                        if defined(JIT_V15)\n    assert(JIT_V15 == jit_v(15));\n    assert(jit_callee_save_p(JIT_V15));\n#                          if defined(JIT_V16)\n    assert(JIT_V16 == jit_v(16));\n    assert(jit_callee_save_p(JIT_V16));\n#                          endif\n#                        endif\n#                      endif\n#                    endif\n#                  endif\n#                endif\n#              endif\n#            endif\n#          endif\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n    assert(JIT_F0 == jit_f(0));\n    (void)jit_callee_save_p(JIT_F0);\n    assert(JIT_F1 == jit_f(1));\n    (void)jit_callee_save_p(JIT_F1);\n    assert(JIT_F2 == jit_f(2));\n    (void)jit_callee_save_p(JIT_F2);\n    assert(JIT_F3 == jit_f(3));\n    (void)jit_callee_save_p(JIT_F3);\n    assert(JIT_F4 == jit_f(4));\n    (void)jit_callee_save_p(JIT_F4);\n    assert(JIT_F5 == jit_f(5));\n    (void)jit_callee_save_p(JIT_F5);\n#if defined(JIT_F6)\n    assert(JIT_F6 == jit_f(6));\n    (void)jit_callee_save_p(JIT_F6);\n#  if defined(JIT_F7)\n    assert(JIT_F7 == jit_f(7));\n    (void)jit_callee_save_p(JIT_F7);\n#    if defined(JIT_F8)\n    assert(JIT_F8 == jit_f(8));\n    (void)jit_callee_save_p(JIT_F8);\n#      if defined(JIT_F9)\n    assert(JIT_F9 == jit_f(9));\n    (void)jit_callee_save_p(JIT_F9);\n#      endif\n#    endif\n#  endif\n#endif\n\n    jit_clear_state();\n    jit_destroy_state();\n    finish_jit();\n\n    return (0);\n}",
      "lines": 132,
      "depth": 23,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/check/setcode.c": {
    "main": {
      "start_point": [
        23,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "content": "int\nmain(int argc, char *argv[])\n{\n    jit_uint8_t\t\t *ptr;\n    jit_state_t\t\t *_jit;\n    jit_word_t\t\t  length;\n#if defined(__sgi)\n    int\t\t\t  mmap_fd;\n#endif\n    void\t\t(*function)(void);\n\n#if defined(__sgi)\n    mmap_fd = open(\"/dev/zero\", O_RDWR);\n#endif\n\n    ptr = mmap(NULL, 1024 * 1024,\n\t       PROT_EXEC | PROT_READ | PROT_WRITE,\n\t       MAP_PRIVATE | MAP_ANON, mmap_fd, 0);\n    assert(ptr != MAP_FAILED);\n#if defined(__sgi)\n    close(mmap_fd);\n#endif\n\n    init_jit(argv[0]);\n    _jit = jit_new_state();\n\n    jit_prolog();\n    jit_prepare();\n    jit_pushargi((jit_word_t)\"%s\\n\");\n    jit_ellipsis();\n    jit_pushargi((jit_word_t)\"ok\");\n    jit_finishi(printf);\n\n    /* call to jit_realize() is only required when using an alternate\n     * code buffer. Note that not using mmap'ed memory may not work\n     * on several ports and/or operating system versions */\n    jit_realize();\n\n    length = 0;\n    if (jit_get_code(&length) != NULL)\n\tabort();\n\n    if (length <= 4)\n\tabort();\n\n    /* check that a too small buffer fails */\n    jit_set_code(ptr, 4);\n    function = jit_emit();\n    if (function != NULL)\n\tabort();\n\n    /* and calling again with enough space works */\n    jit_set_code(ptr, 1024 * 1024);\n    function = jit_emit();\n    if (function == NULL)\n\tabort();\n\n    jit_clear_state();\n    (*function)();\n    jit_destroy_state();\n    finish_jit();\n\n    munmap(ptr, 1024 * 1024);\n\n    return (0);\n}",
      "lines": 66,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/fact.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n    pwfw_t\t factorial;\n    long\t arg;\n    jit_node_t\t*ac;\t\t\t/* Accumulator */\n    jit_node_t\t*in;\t\t\t/* Argument */\n    jit_node_t\t*call;\n    jit_node_t\t*fact;\n    jit_node_t\t*jump;\n    jit_node_t\t*fact_entry;\n    jit_node_t\t*fact_out;\n\n    init_jit(argv[0]);\n    _jit = jit_new_state();\n\n    /* declare a forward label */\n    fact = jit_forward();\n\n    jit_prolog();\t\t\t/* Entry point of the factorial function */\n    in = jit_arg();\t\t\t/* Receive an integer argument */\n    jit_getarg(JIT_R0, in);\t\t/* Move argument to RO */\n    jit_prepare();\n    jit_pushargi(1);\t\t\t/* This is the accumulator */\n    jit_pushargr(JIT_R0);\t\t/* This is the argument */\n    call = jit_finishi(NULL);\t\t/* Call the tail call optimized function */\n    jit_patch_at(call, fact);\t\t/* Patch call to forward defined function */\n    /* the above could have been written as:\n     *\t\tjit_patch_at(jit_finishi(NULL), fact);\n     */\n    jit_retval(JIT_R0);\t\t\t/* Fetch the result */\n    jit_retr(JIT_R0);\t\t\t/* Return it */\n    jit_epilog();\t\t\t/* Epilog *before* label before prolog */\n\n    /* define the forward label */\n    jit_link(fact);\t\t\t/* Entry point of the helper function */\n    jit_prolog();\n    jit_frame(16);\t\t\t/* Reserve 16 bytes in the stack */\n    fact_entry = jit_label();\t\t/* This is the tail call entry point */\n    ac = jit_arg();\t\t\t/* The accumulator is the first argument */\n    in = jit_arg();\t\t\t/* The factorial argument */\n    jit_getarg(JIT_R0, ac);\t\t/* Move the accumulator to R0 */\n    jit_getarg(JIT_R1, in);\t\t/* Move the argument to R1 */\n    fact_out = jit_blei(JIT_R1, 1);\t/* Done if argument is one or less */\n    jit_mulr(JIT_R0, JIT_R0, JIT_R1);\t/* accumulator *= argument */\n    jit_putargr(JIT_R0, ac);\t\t/* Update the accumulator */\n    jit_subi(JIT_R1, JIT_R1, 1);\t/* argument -= 1 */\n    jit_putargr(JIT_R1, in);\t\t/* Update the argument */\n    jump = jit_jmpi();\n    jit_patch_at(jump, fact_entry);\t/* Tail Call Optimize it! */\n    jit_patch(fact_out);\n    jit_retr(JIT_R0);\t\t\t/* Return the accumulator */\n\n    factorial = jit_emit();\n    /* no need to query information about resolved addresses */\n    jit_clear_state();\n\n    if (argc == 2)\n\targ = atoi(argv[1]);\n    else\n\targ = 5;\n\n    /* call the generated code */\n    printf(\"factorial(%ld) = %ld\\n\", arg, factorial(arg));\n    /* release all memory associated with the _jit identifier */\n    jit_destroy_state();\n    finish_jit();\n    return 0;\n}",
      "lines": 68,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/ifib.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  pifi       fib;\n  jit_node_t *in;               /* offset of the argument */\n  jit_node_t *ref;              /* to patch the forward reference */\n  jit_node_t *zero;             /* to patch the forward reference */\n  jit_node_t *jump;             /* jump to start of loop */\n  jit_node_t *loop;             /* start of the loop */\n\n  init_jit(argv[0]);\n  _jit = jit_new_state();\n\n        jit_prolog   ();\n  in =  jit_arg      ();\n        jit_getarg   (JIT_R0, in);              /* R0 = n */\n zero = jit_beqi     (JIT_R0, 0);\n        jit_movr     (JIT_R1, JIT_R0);\n        jit_movi     (JIT_R0, 1);\n  ref = jit_blei     (JIT_R1, 2);\n        jit_subi     (JIT_R2, JIT_R1, 2);\n        jit_movr     (JIT_R1, JIT_R0);\n\n  loop= jit_label();\n        jit_subi     (JIT_R2, JIT_R2, 1);       /* decr. counter */\n        jit_movr     (JIT_V0, JIT_R0);          /* V0 = R0 */\n        jit_addr     (JIT_R0, JIT_R0, JIT_R1);  /* R0 = R0 + R1 */\n        jit_movr     (JIT_R1, JIT_V0);          /* R1 = V0 */\n  jump= jit_bnei     (JIT_R2, 0);               /* if (R2) goto loop; */\n  jit_patch_at(jump, loop);\n\n  jit_patch(ref);                               /* patch forward jump */\n  jit_patch(zero);                              /* patch forward jump */\n        jit_retr     (JIT_R0);\n\n  /* call the generated code, passing 36 as an argument */\n  fib = jit_emit();\n  jit_clear_state();\n  printf(\"fib(%d) = %d\\n\", 36, fib(36));\n  jit_destroy_state();\n  finish_jit();\n  return 0;\n}",
      "lines": 42,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/incr.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        30,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  jit_node_t  *in;\n  pifi         incr;\n\n  init_jit(argv[0]);\n  _jit = jit_new_state();\n\n  jit_prolog();                    /* @t{     prolog             } */\n  in = jit_arg();                  /* @t{     in = arg           } */\n  jit_getarg(JIT_R0, in);          /* @t{     getarg R0          } */\n  jit_addi(JIT_R0, JIT_R0, 1);     /* @t{     addi   R0\\, R0\\, 1 } */\n  jit_retr(JIT_R0);                /* @t{     retr   R0          } */\n\n  incr = jit_emit();\n  jit_clear_state();\n\n  /* call the generated code\\, passing 5 as an argument */\n  printf(\"%d + 1 = %d\\n\", 5, incr(5));\n\n  jit_destroy_state();\n  finish_jit();\n  return 0;\n}",
      "lines": 24,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/printf.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        39,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  pvfi          myFunction;             /* ptr to generated code */\n  jit_node_t    *start, *end;           /* a couple of labels */\n  jit_node_t    *in;                    /* to get the argument */\n\n  init_jit(argv[0]);\n  _jit = jit_new_state();\n\n  start = jit_note(__FILE__, __LINE__);\n  jit_prolog();\n  in = jit_arg();\n  jit_getarg(JIT_R1, in);\n  jit_pushargi((jit_word_t)\"generated %d bytes\\n\");\n  jit_ellipsis();\n  jit_pushargr(JIT_R1);\n  jit_finishi(printf);\n  jit_ret();\n  jit_epilog();\n  end = jit_note(__FILE__, __LINE__);\n\n  myFunction = jit_emit();\n\n  /* call the generated code, passing its size as argument */\n  myFunction((char*)jit_address(end) - (char*)jit_address(start));\n  jit_clear_state();\n\n  jit_disassemble();\n\n  jit_destroy_state();\n  finish_jit();\n  return 0;\n}",
      "lines": 33,
      "depth": 10,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/rfib.c": {
    "main": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  pifi       fib;\n  jit_node_t *label;\n  jit_node_t *call;\n  jit_node_t *in;                 /* offset of the argument */\n  jit_node_t *ref;                /* to patch the forward reference */\n  jit_node_t *zero;             /* to patch the forward reference */\n\n  init_jit(argv[0]);\n  _jit = jit_new_state();\n\n  label = jit_label();\n        jit_prolog   ();\n  in =  jit_arg      ();\n        jit_getarg   (JIT_R0, in);              /* R0 = n */\n zero = jit_beqi     (JIT_R0, 0);\n        jit_movr     (JIT_V0, JIT_R0);          /* V0 = R0 */\n        jit_movi     (JIT_R0, 1);\n  ref = jit_blei     (JIT_V0, 2);\n        jit_subi     (JIT_V1, JIT_V0, 1);       /* V1 = n-1 */\n        jit_subi     (JIT_V2, JIT_V0, 2);       /* V2 = n-2 */\n        jit_prepare();\n          jit_pushargr(JIT_V1);\n        call = jit_finishi(NULL);\n        jit_patch_at(call, label);\n        jit_retval(JIT_V1);                     /* V1 = fib(n-1) */\n        jit_prepare();\n          jit_pushargr(JIT_V2);\n        call = jit_finishi(NULL);\n        jit_patch_at(call, label);\n        jit_retval(JIT_R0);                     /* R0 = fib(n-2) */\n        jit_addr(JIT_R0, JIT_R0, JIT_V1);       /* R0 = R0 + V1 */\n\n  jit_patch(ref);                               /* patch jump */\n  jit_patch(zero);                              /* patch jump */\n        jit_retr(JIT_R0);\n\n  /* call the generated code, passing 32 as an argument */\n  fib = jit_emit();\n  jit_clear_state();\n  printf(\"fib(%d) = %d\\n\", 32, fib(32));\n  jit_destroy_state();\n  finish_jit();\n  return 0;\n}",
      "lines": 46,
      "depth": 8,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/doc/rpn.c": {
    "stack_push": {
      "start_point": [
        7,
        0
      ],
      "end_point": [
        11,
        1
      ],
      "content": "void stack_push(int reg, int *sp)\n{\n  jit_stxi_i (*sp, JIT_FP, reg);\n  *sp += sizeof (int);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "stack_pop": {
      "start_point": [
        13,
        0
      ],
      "end_point": [
        17,
        1
      ],
      "content": "void stack_pop(int reg, int *sp)\n{\n  *sp -= sizeof (int);\n  jit_ldxi_i (reg, JIT_FP, *sp);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "compile_rpn": {
      "start_point": [
        19,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "content": "jit_node_t *compile_rpn(char *expr)\n{\n  jit_node_t *in, *fn;\n  int stack_base, stack_ptr;\n\n  fn = jit_note(NULL, 0);\n  jit_prolog();\n  in = jit_arg();\n  stack_ptr = stack_base = jit_allocai (32 * sizeof (int));\n\n  jit_getarg_i(JIT_R2, in);\n\n  while (*expr) {\n    char buf[32];\n    int n;\n    if (sscanf(expr, \"%[0-9]%n\", buf, &n)) {\n      expr += n - 1;\n      stack_push(JIT_R0, &stack_ptr);\n      jit_movi(JIT_R0, atoi(buf));\n    } else if (*expr == 'x') {\n      stack_push(JIT_R0, &stack_ptr);\n      jit_movr(JIT_R0, JIT_R2);\n    } else if (*expr == '+') {\n      stack_pop(JIT_R1, &stack_ptr);\n      jit_addr(JIT_R0, JIT_R1, JIT_R0);\n    } else if (*expr == '-') {\n      stack_pop(JIT_R1, &stack_ptr);\n      jit_subr(JIT_R0, JIT_R1, JIT_R0);\n    } else if (*expr == '*') {\n      stack_pop(JIT_R1, &stack_ptr);\n      jit_mulr(JIT_R0, JIT_R1, JIT_R0);\n    } else if (*expr == '/') {\n      stack_pop(JIT_R1, &stack_ptr);\n      jit_divr(JIT_R0, JIT_R1, JIT_R0);\n    } else {\n      fprintf(stderr, \"cannot compile: %s\\n\", expr);\n      abort();\n    }\n    ++expr;\n  }\n  jit_retr(JIT_R0);\n  jit_epilog();\n  return fn;\n}",
      "lines": 44,
      "depth": 16,
      "decorators": [
        "jit_node_t",
        "*compile_rpn(char *expr)",
        "*"
      ]
    },
    "main": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  jit_node_t *nc, *nf;\n  pifi c2f, f2c;\n  int i;\n\n  init_jit(argv[0]);\n  _jit = jit_new_state();\n\n  nc = compile_rpn(\"32x9*5/+\");\n  nf = compile_rpn(\"x32-5*9/\");\n  (void)jit_emit();\n  c2f = (pifi)jit_address(nc);\n  f2c = (pifi)jit_address(nf);\n  jit_clear_state();\n\n  printf(\"\\nC:\");\n  for (i = 0; i <= 100; i += 10) printf(\"%3d \", i);\n  printf(\"\\nF:\");\n  for (i = 0; i <= 100; i += 10) printf(\"%3d \", c2f(i));\n  printf(\"\\n\");\n\n  printf(\"\\nF:\");\n  for (i = 32; i <= 212; i += 18) printf(\"%3d \", i);\n  printf(\"\\nC:\");\n  for (i = 32; i <= 212; i += 18) printf(\"%3d \", f2c(i));\n  printf(\"\\n\");\n\n  jit_destroy_state();\n  finish_jit();\n  return 0;\n}",
      "lines": 32,
      "depth": 9,
      "decorators": [
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/include/lightning.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_aarch64.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_alpha.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_arm.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_hppa.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_ia64.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_mips.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_ppc.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_private.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_s390.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_sparc.h": {},
  "lightning/lightning-2.1.2/include/lightning/jit_x86.h": {},
  "lightning/lightning-2.1.2/lib/jit_aarch64-cpu.c": {
    "logical_immediate": {
      "start_point": [
        795,
        0
      ],
      "end_point": [
        825,
        1
      ],
      "content": "static jit_int32_t\nlogical_immediate(jit_word_t imm)\n{\n    /* There are 5334 possible immediate values, but to avoid the\n     * need of either too complex code or large lookup tables,\n     * only check for (simply) encodable common/small values */\n    switch (imm) {\n\tcase -16:\treturn (0xf3b);\n\tcase -15:\treturn (0xf3c);\n\tcase -13:\treturn (0xf3d);\n\tcase -9:\treturn (0xf3e);\n\tcase -8:\treturn (0xf7c);\n\tcase -7:\treturn (0xf7d);\n\tcase -5:\treturn (0xf7e);\n\tcase -4:\treturn (0xfbd);\n\tcase -3:\treturn (0xfbe);\n\tcase -2:\treturn (0xffe);\n\tcase 1:\t\treturn (0x000);\n\tcase 2:\t\treturn (0xfc0);\n\tcase 3:\t\treturn (0x001);\n\tcase 4:\t\treturn (0xf80);\n\tcase 6:\t\treturn (0xfc1);\n\tcase 7:\t\treturn (0x002);\n\tcase 8:\t\treturn (0xf40);\n\tcase 12:\treturn (0xf81);\n\tcase 14:\treturn (0xfc2);\n\tcase 15:\treturn (0x003);\n\tcase 16:\treturn (0xf00);\n\tdefault:\treturn (-1);\n    }\n}",
      "lines": 31,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_oxxx": {
      "start_point": [
        827,
        0
      ],
      "end_point": [
        841,
        1
      ],
      "content": "static void\n_oxxx(jit_state_t *_jit, jit_int32_t Op,\n      jit_int32_t Rd, jit_int32_t Rn, jit_int32_t Rm)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Op & ~0xffe0fc00));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.Rm.b = Rm;\n    ii(i.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxxi": {
      "start_point": [
        843,
        0
      ],
      "end_point": [
        857,
        1
      ],
      "content": "static void\n_oxxi(jit_state_t *_jit, jit_int32_t Op,\n      jit_int32_t Rd, jit_int32_t Rn, jit_int32_t Imm12)\n{\n    instr_t\ti;\n    assert(!(Rd    &       ~0x1f));\n    assert(!(Rn    &       ~0x1f));\n    assert(!(Imm12 &      ~0xfff));\n    assert(!(Op    & ~0xffe00000));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.imm12.b = Imm12;\n    ii(i.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxx9": {
      "start_point": [
        859,
        0
      ],
      "end_point": [
        873,
        1
      ],
      "content": "static void\n_oxx9(jit_state_t *_jit, jit_int32_t Op,\n      jit_int32_t Rd, jit_int32_t Rn, jit_int32_t Imm9)\n{\n    instr_t\ti;\n    assert(!(Rd   &       ~0x1f));\n    assert(!(Rn   &       ~0x1f));\n    assert(!(Imm9 &      ~0x1ff));\n    assert(!(Op   & ~0xffe00000));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.imm9.b = Imm9;\n    ii(i.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ox19": {
      "start_point": [
        875,
        0
      ],
      "end_point": [
        886,
        1
      ],
      "content": "static void\n_ox19(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rd, jit_int32_t Simm19)\n{\n    instr_t\ti;\n    assert(!(Rd &         ~0x1f));\n    assert(Simm19 >= -262148 && Simm19 <= 262143);\n    assert(!(Op   & ~0xff000000));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.imm19.b = Simm19;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oc19": {
      "start_point": [
        888,
        0
      ],
      "end_point": [
        899,
        1
      ],
      "content": "static void\n_oc19(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Cc, jit_int32_t Simm19)\n{\n    instr_t\ti;\n    assert(!(Cc &          ~0xf));\n    assert(Simm19 >= -262148 && Simm19 <= 262143);\n    assert(!(Op   & ~0xff000000));\n    i.w = Op;\n    i.cond2.b = Cc;\n    i.imm19.b = Simm19;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_o26": {
      "start_point": [
        901,
        0
      ],
      "end_point": [
        910,
        1
      ],
      "content": "static void\n_o26(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Simm26)\n{\n    instr_t\ti;\n    assert(Simm26 >= -33554432 && Simm26 <= 33554431);\n    assert(!(Op   & ~0xfc000000));\n    i.w = Op;\n    i.imm26.b = Simm26;\n    ii(i.w);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ox_x": {
      "start_point": [
        912,
        0
      ],
      "end_point": [
        923,
        1
      ],
      "content": "static void\n_ox_x(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rd, jit_int32_t Rm)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Op & ~0xffe0ffe0));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rm.b = Rm;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_o_xx": {
      "start_point": [
        925,
        0
      ],
      "end_point": [
        936,
        1
      ],
      "content": "static void\n_o_xx(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rd, jit_int32_t Rn)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(Op & ~0xfffffc00));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxx_": {
      "start_point": [
        938,
        0
      ],
      "end_point": [
        949,
        1
      ],
      "content": "static void\n_oxx_(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rn, jit_int32_t Rm)\n{\n    instr_t\ti;\n    assert(!(Rn &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Op & ~0xffc0fc1f));\n    i.w = Op;\n    i.Rn.b = Rn;\n    i.Rm.b = Rm;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_o_x_": {
      "start_point": [
        951,
        0
      ],
      "end_point": [
        960,
        1
      ],
      "content": "static void\n_o_x_(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rn)\n{\n    instr_t\ti;\n    assert(!(Rn & ~0x1f));\n    assert(!(Op & 0x3e0));\n    i.w = Op;\n    i.Rn.b = Rn;\n    ii(i.w);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ox_h": {
      "start_point": [
        962,
        0
      ],
      "end_point": [
        973,
        1
      ],
      "content": "static void\n_ox_h(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Rd, jit_int32_t Imm16)\n{\n    instr_t\ti;\n    assert(!(Rd    &       ~0x1f));\n    assert(!(Imm16 &     ~0xffff));\n    assert(!(Op    & ~0xffe00000));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.imm16.b = Imm16;\n    ii(i.w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxxrs": {
      "start_point": [
        975,
        0
      ],
      "end_point": [
        991,
        1
      ],
      "content": "static void\n_oxxrs(jit_state_t *_jit, jit_int32_t Op,\n       jit_int32_t Rd, jit_int32_t Rn, jit_int32_t R, jit_int32_t S)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(R  &       ~0x3f));\n    assert(!(S  &       ~0x3f));\n    assert(!(Op & ~0xffc00000));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.immr.b = R;\n    i.imms.b = S;\n    ii(i.w);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxxxc": {
      "start_point": [
        993,
        0
      ],
      "end_point": [
        1009,
        1
      ],
      "content": "static void\n_oxxxc(jit_state_t *_jit, jit_int32_t Op,\n       jit_int32_t Rd, jit_int32_t Rn, jit_int32_t Rm, jit_int32_t Cc)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Cc  &       ~0xf));\n    assert(!(Op & ~0xffc00c00));\n    i.w = Op;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.Rm.b = Rm;\n    i.cond.b = Cc;\n    ii(i.w);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_oxxx7": {
      "start_point": [
        1011,
        0
      ],
      "end_point": [
        1027,
        1
      ],
      "content": "static void\n_oxxx7(jit_state_t *_jit, jit_int32_t Op,\n       jit_int32_t Rt, jit_int32_t Rt2, jit_int32_t Rn, jit_int32_t Simm7)\n{\n    instr_t\ti;\n    assert(!(Rt  &       ~0x1f));\n    assert(!(Rt2 &       ~0x1f));\n    assert(!(Rn  &       ~0x1f));\n    assert(Simm7 >= -128 && Simm7 <= 127);\n    assert(!(Op & ~0xffc003e0));\n    i.w = Op;\n    i.Rt.b = Rt;\n    i.Rt2.b = Rt2;\n    i.Rn.b = Rn;\n    i.imm7.b = Simm7;\n    ii(i.w);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        1029,
        0
      ],
      "end_point": [
        1035,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        1037,
        0
      ],
      "end_point": [
        1058,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tis =  i0 >> 12;\n    jit_word_t\t\tin = -i0;\n    jit_word_t\t\tiS =  in >> 12;\n    if (      i0 >= 0 && i0 <= 0xfff)\n\tADDI   (r0, r1, i0);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tADDI_12(r0, r1, is);\n    else if ( in >= 0 && in <= 0xfff)\n\tSUBI   (r0, r1, in);\n    else if ((iS << 12) == is && iS >= 0 && iS <= 0xfff)\n\tSUBI_12(r0, r1, iS);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 22,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        1060,
        0
      ],
      "end_point": [
        1081,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tis =  i0 >> 12;\n    jit_word_t\t\tin = -i0;\n    jit_word_t\t\tiS =  in >> 12;\n    if (      i0 >= 0 && i0 <= 0xfff)\n\tADDSI   (r0, r1, i0);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tADDSI_12(r0, r1, is);\n    else if ( in >= 0 && in <= 0xfff)\n\tSUBSI   (r0, r1, in);\n    else if ((iS << 12) == is && iS >= 0 && iS <= 0xfff)\n\tSUBSI_12(r0, r1, iS);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddcr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 22,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        1083,
        0
      ],
      "end_point": [
        1091,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    addxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        1093,
        0
      ],
      "end_point": [
        1108,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tis = i0 >> 12;\n    if (      i0 >= 0 && i0 <= 0xfff)\n\tSUBI   (r0, r1, i0);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tSUBI_12(r0, r1, is);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        1110,
        0
      ],
      "end_point": [
        1125,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tis = i0 >> 12;\n    if (      i0 >= 0 && i0 <= 0xfff)\n\tSUBSI   (r0, r1, i0);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tSUBSI_12(r0, r1, is);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubcr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        1127,
        0
      ],
      "end_point": [
        1135,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        1137,
        0
      ],
      "end_point": [
        1142,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        1144,
        0
      ],
      "end_point": [
        1152,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    mulr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr": {
      "start_point": [
        1154,
        0
      ],
      "end_point": [
        1170,
        1
      ],
      "content": "static void\n_qmulr(jit_state_t *_jit, jit_int32_t r0,\n       jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 || r0 == r3) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmulr(rn(reg), r2, r3);\n    }\n    else\n\tmulr(r0, r2, r3);\n    SMULH(r1, r2, r3);\n    if (r0 == r2 || r0 == r3) {\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli": {
      "start_point": [
        1172,
        0
      ],
      "end_point": [
        1181,
        1
      ],
      "content": "static void\n_qmuli(jit_state_t *_jit, jit_int32_t r0,\n       jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qmulr(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr_u": {
      "start_point": [
        1183,
        0
      ],
      "end_point": [
        1199,
        1
      ],
      "content": "static void\n_qmulr_u(jit_state_t *_jit, jit_int32_t r0,\n\t jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 || r0 == r3) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmulr(rn(reg), r2, r3);\n    }\n    else\n\tmulr(r0, r2, r3);\n    UMULH(r1, r2, r3);\n    if (r0 == r2 || r0 == r3) {\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli_u": {
      "start_point": [
        1201,
        0
      ],
      "end_point": [
        1210,
        1
      ],
      "content": "static void\n_qmuli_u(jit_state_t *_jit, jit_int32_t r0,\n\t jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qmulr_u(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        1212,
        0
      ],
      "end_point": [
        1220,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1222,
        0
      ],
      "end_point": [
        1230,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        1232,
        0
      ],
      "end_point": [
        1264,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_bool_t sign,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\tsv0, rg0;\n    jit_int32_t\t\tsv1, rg1;\n    if (r0 == r2 || r0 == r3) {\n\tsv0 = jit_get_reg(jit_class_gpr);\n\trg0 = rn(sv0);\n    }\n    else\n\trg0 = r0;\n    if (r1 == r2 || r1 == r3) {\n\tsv1 = jit_get_reg(jit_class_gpr);\n\trg1 = rn(sv1);\n    }\n    else\n\trg1 = r1;\n    if (sign)\n\tdivr(rg0, r2, r3);\n    else\n\tdivr_u(rg0, r2, r3);\n    mulr(rg1, r3, rg0);\n    subr(rg1, r2, rg1);\n    if (rg0 != r0) {\n\tmovr(r0, rg0);\n\tjit_unget_reg(sv0);\n    }\n    if (rg1 != r1) {\n\tmovr(r1, rg1);\n\tjit_unget_reg(sv1);\n    }\n}",
      "lines": 33,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi": {
      "start_point": [
        1266,
        0
      ],
      "end_point": [
        1275,
        1
      ],
      "content": "static void\n_qdivi(jit_state_t *_jit, jit_int32_t r0,\n       jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qdivr(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi_u": {
      "start_point": [
        1277,
        0
      ],
      "end_point": [
        1286,
        1
      ],
      "content": "static void\n_qdivi_u(jit_state_t *_jit, jit_int32_t r0,\n\t jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qdivr_u(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        1288,
        0
      ],
      "end_point": [
        1304,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1306,
        0
      ],
      "end_point": [
        1314,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        1316,
        0
      ],
      "end_point": [
        1332,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr_u(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr_u(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1334,
        0
      ],
      "end_point": [
        1342,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        1344,
        0
      ],
      "end_point": [
        1353,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n\tassert(i0 > 0 && i0 < 64);\n\tLSLI(r0, r1, i0);\n    }\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        1355,
        0
      ],
      "end_point": [
        1364,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n\tassert(i0 > 0 && i0 < 64);\n\tASRI(r0, r1, i0);\n    }\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        1366,
        0
      ],
      "end_point": [
        1375,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n\tassert(i0 > 0 && i0 < 64);\n\tLSRI(r0, r1, i0);\n    }\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1377,
        0
      ],
      "end_point": [
        1397,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_int32_t\t\timm;\n    if (i0 == 0)\n\tmovi(r0, 0);\n    else if (i0 == -1)\n\tmovr(r0, r1);\n    else {\n\timm = logical_immediate(i0);\n\tif (imm != -1)\n\t    ANDI(r0, r1, imm);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    andr(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1399,
        0
      ],
      "end_point": [
        1419,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_int32_t\t\timm;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (i0 == -1)\n\tmovi(r0, -1);\n    else {\n\timm = logical_immediate(i0);\n\tif (imm != -1)\n\t    ORRI(r0, r1, imm);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    orr(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1421,
        0
      ],
      "end_point": [
        1441,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_int32_t\t\timm;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (i0 == -1)\n\tcomr(r0, r1);\n    else {\n\timm = logical_immediate(i0);\n\tif (imm != -1)\n\t    EORI(r0, r1, imm);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    xorr(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        1444,
        0
      ],
      "end_point": [
        1449,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    htonr_ul(r0, r1);\n    rshi_u(r0, r0, 48);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        1451,
        0
      ],
      "end_point": [
        1456,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    htonr_ul(r0, r1);\n    rshi_u(r0, r0, 32);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        1459,
        0
      ],
      "end_point": [
        1467,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_c(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_uc": {
      "start_point": [
        1469,
        0
      ],
      "end_point": [
        1476,
        1
      ],
      "content": "static void\n_ldr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    LDRBI(r0, r1, 0);\n#if 0\n    extr_uc(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        1478,
        0
      ],
      "end_point": [
        1486,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_uc(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        1488,
        0
      ],
      "end_point": [
        1496,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_s(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_us": {
      "start_point": [
        1498,
        0
      ],
      "end_point": [
        1505,
        1
      ],
      "content": "static void\n_ldr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    LDRHI(r0, r1, 0);\n#if 0\n    extr_us(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        1507,
        0
      ],
      "end_point": [
        1515,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_us(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        1517,
        0
      ],
      "end_point": [
        1525,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_ui": {
      "start_point": [
        1527,
        0
      ],
      "end_point": [
        1534,
        1
      ],
      "content": "static void\n_ldr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    LDRWI(r0, r1, 0);\n#if 0\n    extr_ui(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        1536,
        0
      ],
      "end_point": [
        1544,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_ui(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        1546,
        0
      ],
      "end_point": [
        1554,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        1556,
        0
      ],
      "end_point": [
        1561,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDRSB(r0, r1, r2);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        1563,
        0
      ],
      "end_point": [
        1578,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= 0 && i0 <= 4095)\n\tLDRSBI(r0, r1, i0);\n    else if (i0 > -256 && i0 < 0)\n\tLDURSB(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLDRSB(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    extr_c(r0, r0);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        1580,
        0
      ],
      "end_point": [
        1587,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDRB(r0, r1, r2);\n#if 0\n    extr_uc(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        1589,
        0
      ],
      "end_point": [
        1606,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= 0 && i0 <= 4095)\n\tLDRBI(r0, r1, i0);\n    else if (i0 > -256 && i0 < 0)\n\tLDURB(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n#if 0\n    extr_uc(r0, r0);\n#endif\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        1608,
        0
      ],
      "end_point": [
        1623,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 1));\n    if (i0 >= 0 && i0 <= 8191)\n\tLDRSHI(r0, r1, i0 >> 1);\n    else if (i0 > -256 && i0 < 0)\n\tLDURSH(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLDRSH(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        1625,
        0
      ],
      "end_point": [
        1632,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDRH(r0, r1, r2);\n#if 0\n    extr_us(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        1634,
        0
      ],
      "end_point": [
        1652,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 1));\n    if (i0 >= 0 && i0 <= 8191)\n\tLDRHI(r0, r1, i0 >> 1);\n    else if (i0 > -256 && i0 < 0)\n\tLDURH(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLDRH(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n#if 0\n    extr_us(r0, r0);\n#endif\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        1654,
        0
      ],
      "end_point": [
        1669,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 3));\n    if (i0 >= 0 && i0 <= 16383)\n\tLDRSWI(r0, r1, i0 >> 2);\n    else if (i0 > -256 && i0 < 0)\n\tLDURSW(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        1671,
        0
      ],
      "end_point": [
        1678,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDRW(r0, r1, r2);\n#if 0\n    extr_ui(r0, r0);\n#endif\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        1680,
        0
      ],
      "end_point": [
        1698,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 3));\n    if (i0 >= 0 && i0 <= 16383)\n\tLDRWI(r0, r1, i0 >> 2);\n    else if (i0 > -256 && i0 < 0)\n\tLDURW(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLDRW(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n#if 0\n    extr_ui(r0, r0);\n#endif\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        1700,
        0
      ],
      "end_point": [
        1715,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 7));\n    if (i0 >= 0 && i0 <= 32767)\n\tLDRI(r0, r1, i0 >> 3);\n    else if (i0 > -256 && i0 < 0)\n\tLDUR(r0, r1, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        1717,
        0
      ],
      "end_point": [
        1725,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_c(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        1727,
        0
      ],
      "end_point": [
        1735,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_s(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        1737,
        0
      ],
      "end_point": [
        1745,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_i(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        1747,
        0
      ],
      "end_point": [
        1755,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_l(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        1757,
        0
      ],
      "end_point": [
        1771,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= 0 && i0 <= 4095)\n\tSTRBI(r1, r0, i0);\n    else if (i0 > -256 && i0 < 0)\n\tSTURB(r1, r0, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        1773,
        0
      ],
      "end_point": [
        1788,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 1));\n    if (i0 >= 0 && i0 <= 8191)\n\tSTRHI(r1, r0, i0 >> 1);\n    else if (i0 > -256 && i0 < 0)\n\tSTURH(r1, r0, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        1790,
        0
      ],
      "end_point": [
        1805,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 3));\n    if (i0 >= 0 && i0 <= 16383)\n\tSTRWI(r1, r0, i0 >> 2);\n    else if (i0 > -256 && i0 < 0)\n\tSTURW(r1, r0, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        1807,
        0
      ],
      "end_point": [
        1822,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 7));\n    if (i0 >= 0 && i0 <= 32767)\n\tSTRI(r1, r0, i0 >> 3);\n    else if (i0 > -256 && i0 < 0)\n\tSTUR(r1, r0, i0 & 0x1ff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_l(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        1824,
        0
      ],
      "end_point": [
        1829,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tMOV(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        1831,
        0
      ],
      "end_point": [
        1938,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tn0, ibit, nbit;\n    n0 = ~i0;\n    ibit = nbit = 0;\n    if (i0 & 0x000000000000ffffL)\tibit |= 1;\n    if (i0 & 0x00000000ffff0000L)\tibit |= 2;\n    if (i0 & 0x0000ffff00000000L)\tibit |= 4;\n    if (i0 & 0xffff000000000000L)\tibit |= 8;\n    if (n0 & 0x000000000000ffffL)\tnbit |= 1;\n    if (n0 & 0x00000000ffff0000L)\tnbit |= 2;\n    if (n0 & 0x0000ffff00000000L)\tnbit |= 4;\n    if (n0 & 0xffff000000000000L)\tnbit |= 8;\n    switch (ibit) {\n\tcase 0:\n\t    MOVZ   (r0,  0);\n\t    break;\n\tcase 1:\n\t    MOVZ   (r0,  i0        & 0xffff);\n\t    break;\n\tcase 2:\n\t    MOVZ_16(r0, (i0 >> 16) & 0xffff);\n\t    break;\n\tcase 3:\n\t    MOVZ   (r0,  i0        & 0xffff);\n\t    MOVK_16(r0, (i0 >> 16) & 0xffff);\n\t    break;\n\tcase 4:\n\t    MOVZ_32(r0, (i0 >> 32) & 0xffff);\n\t    break;\n\tcase 5:\n\t    MOVZ   (r0,  i0        & 0xffff);\n\t    MOVK_32(r0, (i0 >> 32) & 0xffff);\n\t    break;\n\tcase 6:\n\t    MOVZ_16(r0, (i0 >> 16) & 0xffff);\n\t    MOVK_32(r0, (i0 >> 32) & 0xffff);\n\t    break;\n\tcase 7:\n\t    if (nbit == 8)\n\t\tMOVN_48(r0, (n0 >> 48) & 0xffff);\n\t    else {\n\t\tMOVZ   (r0,  i0        & 0xffff);\n\t\tMOVK_16(r0, (i0 >> 16) & 0xffff);\n\t\tMOVK_32(r0, (i0 >> 32) & 0xffff);\n\t    }\n\t    break;\n\tcase 8:\n\t    MOVZ_48(r0, (i0 >> 48) & 0xffff);\n\t    break;\n\tcase 9:\n\t    MOVZ   (r0,  i0        & 0xffff);\n\t    MOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    break;\n\tcase 10:\n\t    MOVZ_16(r0, (i0 >> 16) & 0xffff);\n\t    MOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    break;\n\tcase 11:\n\t    if (nbit == 4)\n\t\tMOVN_32(r0, (n0 >> 32) & 0xffff);\n\t    else {\n\t\tMOVZ   (r0,  i0        & 0xffff);\n\t\tMOVK_16(r0, (i0 >> 16) & 0xffff);\n\t\tMOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    }\n\t    break;\n\tcase 12:\n\t    MOVZ_32(r0, (i0 >> 32) & 0xffff);\n\t    MOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    break;\n\tcase 13:\n\t    if (nbit == 2)\n\t\tMOVN_16(r0, (n0 >> 16) & 0xffff);\n\t    else {\n\t\tMOVZ   (r0,  i0        & 0xffff);\n\t\tMOVK_32(r0, (i0 >> 32) & 0xffff);\n\t\tMOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    }\n\t    break;\n\tcase 14:\n\t    if (nbit == 1)\n\t\tMOVN   (r0, (n0)       & 0xffff);\n\t    else {\n\t\tMOVZ_16(r0, (i0 >> 16) & 0xffff);\n\t\tMOVK_32(r0, (i0 >> 32) & 0xffff);\n\t\tMOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    }\n\t    break;\n\tcase 15:\n\t    if (nbit == 0)\n\t\tMOVN   (r0,  0);\n\t    else if (nbit == 1)\n\t\tMOVN   (r0,  n0        & 0xffff);\n\t    else if (nbit == 8)\n\t\tMOVN_48(r0, (n0 >> 48) & 0xffff);\n\t    else {\n\t\tMOVZ   (r0,  i0        & 0xffff);\n\t\tMOVK_16(r0, (i0 >> 16) & 0xffff);\n\t\tMOVK_32(r0, (i0 >> 32) & 0xffff);\n\t\tMOVK_48(r0, (i0 >> 48) & 0xffff);\n\t    }\n\t    break;\n\tdefault:\n\t    abort();\n    }\n}",
      "lines": 108,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        1940,
        0
      ],
      "end_point": [
        1950,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    MOVZ   (r0,  i0        & 0xffff);\n    MOVK_16(r0, (i0 >> 16) & 0xffff);\n    MOVK_32(r0, (i0 >> 32) & 0xffff);\n    MOVK_48(r0, (i0 >> 48) & 0xffff);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ccr": {
      "start_point": [
        1952,
        0
      ],
      "end_point": [
        1958,
        1
      ],
      "content": "static void\n_ccr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP(r1, r2);\n    CSET(r0, cc);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cci": {
      "start_point": [
        1960,
        0
      ],
      "end_point": [
        1983,
        1
      ],
      "content": "static void\n_cci(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tis =  i0 >> 12;\n    jit_word_t\t\tin = -i0;\n    jit_word_t\t\tiS =  in >> 12;\n    if (      i0 >= 0 && i0 <= 0xfff)\n\tCMPI   (r1, i0);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tCMPI_12(r1, is);\n    else if ( in >= 0 && in <= 0xfff)\n\tCMNI   (r1, in);\n    else if ((iS << 12) == is && iS >= 0 && iS <= 0xfff)\n\tCMNI_12(r1, iS);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CSET(r0, cc);\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bccr": {
      "start_point": [
        1985,
        0
      ],
      "end_point": [
        1995,
        1
      ],
      "content": "static jit_word_t\n_bccr(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d;\n    CMP(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) >> 2;\n    B_C(cc, d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcci": {
      "start_point": [
        1997,
        0
      ],
      "end_point": [
        2024,
        1
      ],
      "content": "static jit_word_t\n_bcci(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tw, d;\n    jit_word_t\t\tis =  i1 >> 12;\n    jit_word_t\t\tin = -i1;\n    jit_word_t\t\tiS =  in >> 12;\n    if (      i1 >= 0 && i1 <= 0xfff)\n\tCMPI   (r0, i1);\n    else if ((is << 12) == i0 && is >= 0 && is <= 0xfff)\n\tCMPI_12(r0, is);\n    else if ( in >= 0 && in <= 0xfff)\n\tCMNI   (r0, in);\n    else if ((iS << 12) == is && iS >= 0 && iS <= 0xfff)\n\tCMNI_12(r0, iS);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) >> 2;\n    B_C(cc, d);\n    return (w);\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        2026,
        0
      ],
      "end_point": [
        2037,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tCBZ(r0, (i0 - w) >> 2);\n    }\n    else\n\tw = bcci(BCC_EQ, i0, r0, i1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        2039,
        0
      ],
      "end_point": [
        2050,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tCBNZ(r0, (i0 - w) >> 2);\n    }\n    else\n\tw = bcci(BCC_NE, i0, r0, i1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr": {
      "start_point": [
        2052,
        0
      ],
      "end_point": [
        2061,
        1
      ],
      "content": "static jit_word_t\n_baddr(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    addcr(r0, r0, r1);\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi": {
      "start_point": [
        2063,
        0
      ],
      "end_point": [
        2072,
        1
      ],
      "content": "static jit_word_t\n_baddi(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    addci(r0, r0, i1);\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr": {
      "start_point": [
        2074,
        0
      ],
      "end_point": [
        2083,
        1
      ],
      "content": "static jit_word_t\n_bsubr(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    subcr(r0, r0, r1);\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi": {
      "start_point": [
        2085,
        0
      ],
      "end_point": [
        2094,
        1
      ],
      "content": "static jit_word_t\n_bsubi(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    subci(r0, r0, i1);\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxr": {
      "start_point": [
        2096,
        0
      ],
      "end_point": [
        2105,
        1
      ],
      "content": "static jit_word_t\n_bmxr(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    TST(r0, r1);\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxi": {
      "start_point": [
        2107,
        0
      ],
      "end_point": [
        2126,
        1
      ],
      "content": "static jit_word_t\n_bmxi(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    jit_int32_t\t\timm;\n    imm = logical_immediate(i1);\n    if (imm != -1)\n\tTSTI(r0, imm);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tTST(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    B_C(cc, (i0 - w) >> 2);\n    return (w);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpi": {
      "start_point": [
        2128,
        0
      ],
      "end_point": [
        2142,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    w = (i0 - _jit->pc.w) >> 2;\n    if (w >= -33554432 && w <= 33554431)\n\tB(w);\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        2144,
        0
      ],
      "end_point": [
        2154,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    w = movi_p(rn(reg), i0);\n    jmpr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_calli": {
      "start_point": [
        2156,
        0
      ],
      "end_point": [
        2170,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    w = (i0 - _jit->pc.w) >> 2;\n    if (w >= -33554432 && w <= 33554431)\n\tBL(w);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tcallr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        2172,
        0
      ],
      "end_point": [
        2182,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    w = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        2192,
        0
      ],
      "end_point": [
        2267,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -16;\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t      /* align stack at 16 bytes */\n\t\t\t      _jitc->function->self.aoff) + 15) & -16;\n    STPI_POS(FP_REGNO, LR_REGNO, SP_REGNO, -(stack_framesize >> 3));\n    MOV_XSP(FP_REGNO, SP_REGNO);\n#define SPILL(L, R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, _R##L)) {\t\\\n\t    if (jit_regset_tstbit(&_jitc->function->regset, _R##R))\t\\\n\t\tSTPI(L, R, SP_REGNO, O);\t\t\t\t\\\n\t    else\t\t\t\t\t\t\t\\\n\t\tSTRI(L, SP_REGNO, O);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\telse if (jit_regset_tstbit(&_jitc->function->regset, _R##R))\t\\\n\t    STRI(R, SP_REGNO, O + 1);\t\t\t\t\t\\\n    } while (0)\n    SPILL(19, 20,  2);\n    SPILL(21, 22,  4);\n    SPILL(23, 24,  6);\n    SPILL(25, 26,  8);\n    SPILL(27, 28, 10);\n#undef SPILL\n#define SPILL(R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, _V##R))\t\t\\\n\t\tstxi_d(O, SP_REGNO, R);\t\t\t\t\t\\\n    } while (0)\n    SPILL( 8,  96);\n    SPILL( 9, 104);\n    SPILL(10, 112);\n    SPILL(11, 120);\n    SPILL(12, 128);\n    SPILL(13, 136);\n    SPILL(14, 144);\n    SPILL(15, 152);\n#undef SPILL\n    if (_jitc->function->stack)\n\tsubi(SP_REGNO, SP_REGNO, _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\t/* Save gp registers in the save area, if any is a vararg */\n\tfor (reg = 8 - _jitc->function->vagp / -8;\n\t     jit_arg_reg_p(reg); ++reg)\n\t    stxi(_jitc->function->vaoff + offsetof(jit_va_list_t, x0) +\n\t\t reg * 8, FP_REGNO, rn(JIT_RA0 - reg));\n\n\tfor (reg = 8 - _jitc->function->vafp / -16;\n\t     jit_arg_f_reg_p(reg); ++reg)\n\t    /* Save fp registers in the save area, if any is a vararg */\n\t    /* Note that the full 16 byte register is not saved, because\n\t     * lightning only handles float and double, and, while\n\t     * attempting to provide a va_list compatible pointer as\n\t     * jit_va_start return, does not guarantee it (on all ports). */\n\t    stxi_d(_jitc->function->vaoff + offsetof(jit_va_list_t, q0) +\n\t\t   reg * 16 + offsetof(jit_qreg_t, l), FP_REGNO, rn(_V0 - reg));\n    }\n}",
      "lines": 76,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        2269,
        0
      ],
      "end_point": [
        2309,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n    if (_jitc->function->stack)\n\tMOV_XSP(SP_REGNO, FP_REGNO);\n#define LOAD(L, R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, _R##L)) {\t\\\n\t    if (jit_regset_tstbit(&_jitc->function->regset, _R##R))\t\\\n\t\tLDPI(L, R, SP_REGNO, O);\t\t\t\t\\\n\t    else\t\t\t\t\t\t\t\\\n\t\tLDRI(L, SP_REGNO, O);\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\telse if (jit_regset_tstbit(&_jitc->function->regset, _R##R))\t\\\n\t    LDRI(R, SP_REGNO, O + 1);\t\t\t\t\t\\\n    } while (0)\n    LOAD(19, 20,  2);\n    LOAD(21, 22,  4);\n    LOAD(23, 24,  6);\n    LOAD(25, 26,  8);\n    LOAD(27, 28, 10);\n#undef LOAD\n#define LOAD(R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, _V##R))\t\t\\\n\t\tldxi_d(R, SP_REGNO, O);\t\t\t\t\t\\\n    } while (0)\n    LOAD( 8,  96);\n    LOAD( 9, 104);\n    LOAD(10, 112);\n    LOAD(11, 120);\n    LOAD(12, 128);\n    LOAD(13, 136);\n    LOAD(14, 144);\n    LOAD(15, 152);\n#undef LOAD\n    LDPI_PRE(FP_REGNO, LR_REGNO, SP_REGNO, stack_framesize >> 3);\n    RET();\n}",
      "lines": 41,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        2311,
        0
      ],
      "end_point": [
        2344,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Return jit_va_list_t in the register argument */\n    addi(r0, FP_REGNO, _jitc->function->vaoff);\n\n    reg = jit_get_reg(jit_class_gpr);\n\n    /* Initialize stack pointer to the first stack argument. */\n    addi(rn(reg), FP_REGNO, _jitc->function->self.size);\n    stxi(offsetof(jit_va_list_t, stack), r0, rn(reg));\n\n    /* Initialize gp top pointer to the first stack argument. */\n    addi(rn(reg), r0, va_gp_top_offset);\n    stxi(offsetof(jit_va_list_t, gptop), r0, rn(reg));\n\n    /* Initialize fp top pointer to the first stack argument. */\n    addi(rn(reg), r0, va_fp_top_offset);\n    stxi(offsetof(jit_va_list_t, fptop), r0, rn(reg));\n\n    /* Initialize gp offset in the save area. */\n    movi(rn(reg), _jitc->function->vagp);\n    stxi_i(offsetof(jit_va_list_t, gpoff), r0, rn(reg));\n\n    /* Initialize fp offset in the save area. */\n    movi(rn(reg), _jitc->function->vafp);\n    stxi_i(offsetof(jit_va_list_t, fpoff), r0, rn(reg));\n\n    jit_unget_reg(reg);\n}",
      "lines": 34,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        2346,
        0
      ],
      "end_point": [
        2397,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n    jit_int32_t\t\trg0, rg1;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n\n    /* Load the gp offset in save area in the first temporary. */\n    ldxi_i(rn(rg0), r1, offsetof(jit_va_list_t, gpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    ge_code = bgei(_jit->pc.w, rn(rg0), 0);\n\n    /* Load the gp save pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, gptop));\n\n    /* Load the vararg argument in the first argument. */\n    ldxr(r0, rn(rg1), rn(rg0));\n\n    /* Update the gp offset. */\n    addi(rn(rg0), rn(rg0), 8);\n    stxi_i(offsetof(jit_va_list_t, gpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg(rg1);\n\n    /* Jump over overflow code. */\n    lt_code = jmpi_p(_jit->pc.w);\n\n    /* Where to land if argument is in overflow area. */\n    patch_at(ge_code, _jit->pc.w);\n\n    /* Load stack pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, stack));\n\n    /* Load argument. */\n    ldr(r0, rn(rg0));\n\n    /* Update stack pointer. */\n    addi(rn(rg0), rn(rg0), 8);\n    stxi(offsetof(jit_va_list_t, stack), r1, rn(rg0));\n\n    /* Where to land if argument is in gp save area. */\n    patch_at(lt_code, _jit->pc.w);\n\n    jit_unget_reg(rg0);\n}",
      "lines": 52,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        2399,
        0
      ],
      "end_point": [
        2444,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    instr_t\t\t i;\n    jit_word_t\t\t d;\n    jit_int32_t\t\t fc, ff, ffc;\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n    u.w = instr;\n    i.w = u.i[0];\n    fc  = i.w & 0xfc000000;\n    ff  = i.w & 0xff000000;\n    ffc = i.w & 0xffc00000;\n    if (fc == A64_B || fc == A64_BL) {\n\td = (label - instr) >> 2;\n\tassert(d >= -33554432 && d <= 33554431);\n\ti.imm26.b = d;\n\tu.i[0] = i.w;\n    }\n    else if (ff == A64_B_C || ff == (A64_CBZ|XS) || ff == (A64_CBNZ|XS)) {\n\td = (label - instr) >> 2;\n\tassert(d >= -262148 && d <= 262143);\n\ti.imm19.b = d;\n\tu.i[0] = i.w;\n    }\n    else if (ffc == (A64_MOVZ|XS)) {\n\ti.imm16.b = label;\n\tu.i[0] = i.w;\n\ti.w = u.i[1];\n\tassert((i.w & 0xffe00000) == (A64_MOVK|XS|MOVI_LSL_16));\n\ti.imm16.b = label >> 16;\n\tu.i[1] = i.w;\n\ti.w = u.i[2];\n\tassert((i.w & 0xffe00000) == (A64_MOVK|XS|MOVI_LSL_32));\n\ti.imm16.b = label >> 32;\n\tu.i[2] = i.w;\n\ti.w = u.i[3];\n\tassert((i.w & 0xffe00000) == (A64_MOVK|XS|MOVI_LSL_48));\n\ti.imm16.b = label >> 48;\n\tu.i[3] = i.w;\n    }\n    else\n\tabort();\n}",
      "lines": 46,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_aarch64-fpu.c": {
    "_osvvv": {
      "start_point": [
        317,
        0
      ],
      "end_point": [
        333,
        1
      ],
      "content": "static void\n_osvvv(jit_state_t *_jit, jit_int32_t Op, jit_int32_t Sz,\n       jit_int32_t Rd, jit_int32_t Rn, jit_int32_t Rm)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Sz &        ~0x3));\n    assert(!(Op & ~0xffe0fc00));\n    i.w = Op;\n    i.size.b = Sz;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    i.Rm.b = Rm;\n    ii(i.w);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_osvv_": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        349,
        1
      ],
      "content": "static void\n_osvv_(jit_state_t *_jit, jit_int32_t Op,\n       jit_int32_t Sz, jit_int32_t Rd, jit_int32_t Rn)\n{\n    instr_t\ti;\n    assert(!(Rd &       ~0x1f));\n    assert(!(Rn &       ~0x1f));\n    assert(!(Sz &        ~0x3));\n    assert(!(Op & ~0xfffffc00));\n    i.w = Op;\n    i.size.b = Sz;\n    i.Rd.b = Rd;\n    i.Rn.b = Rn;\n    ii(i.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_os_vv": {
      "start_point": [
        351,
        0
      ],
      "end_point": [
        365,
        1
      ],
      "content": "static void\n_os_vv(jit_state_t *_jit, jit_int32_t Op,\n       jit_int32_t Sz, jit_int32_t Rn, jit_int32_t Rm)\n{\n    instr_t\ti;\n    assert(!(Rn &       ~0x1f));\n    assert(!(Rm &       ~0x1f));\n    assert(!(Sz &        ~0x3));\n    assert(!(Op & ~0xff20fc1f));\n    i.w = Op;\n    i.size.b = Sz;\n    i.Rn.b = Rn;\n    i.Rm.b = Rm;\n    ii(i.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_f_i": {
      "start_point": [
        414,
        0
      ],
      "end_point": [
        419,
        1
      ],
      "content": "static void\n_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    FCVTSZ_WS(r0, r1);\n    extr_i(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_i": {
      "start_point": [
        421,
        0
      ],
      "end_point": [
        426,
        1
      ],
      "content": "static void\n_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    FCVTSZ_WD(r0, r1);\n    extr_i(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_f": {
      "start_point": [
        432,
        0
      ],
      "end_point": [
        442,
        1
      ],
      "content": "fopi(div)\n\nstatic void\n_ldr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldr_i(rn(reg), r1);\n    FMOVSW(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "fopi(div)",
        "fopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        444,
        0
      ],
      "end_point": [
        452,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldi_i(rn(reg), i0);\n    FMOVSW(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        454,
        0
      ],
      "end_point": [
        462,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldxr_i(rn(reg), r1, r2);\n    FMOVSW(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        464,
        0
      ],
      "end_point": [
        472,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldxi_i(rn(reg), r1, i0);\n    FMOVSW(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_f": {
      "start_point": [
        474,
        0
      ],
      "end_point": [
        482,
        1
      ],
      "content": "static void\n_str_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVWS(rn(reg), r1);\n    str_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        484,
        0
      ],
      "end_point": [
        492,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVWS(rn(reg), r0);\n    sti_i(i0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        494,
        0
      ],
      "end_point": [
        502,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVWS(rn(reg), r2);\n    stxr_i(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        504,
        0
      ],
      "end_point": [
        512,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVWS(rn(reg), r1);\n    stxi_i(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_f": {
      "start_point": [
        514,
        0
      ],
      "end_point": [
        519,
        1
      ],
      "content": "static void\n_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tFMOVS(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        521,
        0
      ],
      "end_point": [
        539,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } u;\n    jit_int32_t\t\treg;\n    u.f = i0;\n    if (u.i == 0)\n\tFMOVSW(r0, WZR_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\t/* prevent generating unused top 32 bits */\n\tmovi(rn(reg), ((jit_word_t)u.i) & 0xffffffff);\n\tFMOVSW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 19,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fccr": {
      "start_point": [
        541,
        0
      ],
      "end_point": [
        547,
        1
      ],
      "content": "static void\n_fccr(jit_state_t *_jit, jit_int32_t cc,\n      jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPES(r1, r2);\n    CSET(r0, cc);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fcci": {
      "start_point": [
        549,
        0
      ],
      "end_point": [
        558,
        1
      ],
      "content": "static void\n_fcci(jit_state_t *_jit, jit_int32_t cc,\n      jit_int32_t r0, jit_int32_t r1, jit_float32_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    fccr(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_f": {
      "start_point": [
        560,
        0
      ],
      "end_point": [
        570,
        1
      ],
      "content": "static void\n_uneqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    FCMPES(r1, r2);\n    CSET(r0, CC_VS);\n    w = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered satisfies condition */\n    CSET(r0, CC_EQ);\t\t/* equal satisfies condition */\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_f": {
      "start_point": [
        571,
        0
      ],
      "end_point": [
        583,
        1
      ],
      "content": "fopi(uneq)\n\nstatic void\n_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    FCMPES(r1, r2);\n    CSET(r0, CC_VC);\t\t/* set to 1 if ordered */\n    w = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered does not satisfy condition */\n    CSET(r0, CC_NE);\t\t/* set to 1 if not equal */\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fopi(uneq)",
        "fopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_fbccr": {
      "start_point": [
        584,
        0
      ],
      "end_point": [
        596,
        1
      ],
      "content": "fopi(ltgt)\n\nstatic jit_word_t\n_fbccr(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d;\n    FCMPES(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) >> 2;\n    B_C(cc, d);\n    return (w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fopi(ltgt)",
        "fopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_fbcci": {
      "start_point": [
        598,
        0
      ],
      "end_point": [
        609,
        1
      ],
      "content": "static jit_word_t\n_fbcci(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_float32_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_f(rn(reg), i1);\n    w = fbccr(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr_f": {
      "start_point": [
        611,
        0
      ],
      "end_point": [
        625,
        1
      ],
      "content": "static jit_word_t\n_buneqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tu, v, w;\n    FCMPES(r0, r1);\n    u = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered satisfies condition */\n    v = _jit->pc.w;\n    B_C(BCC_NE, 1);\t\t/* not equal (or unordered) does not satisfy */\n    patch_at(u, _jit->pc.w);\n    w = _jit->pc.w;\n    B((i0 - w) >> 2);\n    patch_at(v, _jit->pc.w);\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr_f": {
      "start_point": [
        626,
        0
      ],
      "end_point": [
        642,
        1
      ],
      "content": "fbopi(uneq)\n\nstatic jit_word_t\n_bltgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tu, v, w;\n    FCMPES(r0, r1);\n    u = _jit->pc.w;\n    B_C(BCC_VS, 2);\t\t/* jump over if unordered */\n    v = _jit->pc.w;\n    B_C(BCC_EQ, 1);\t\t/* jump over if equal */\n    w = _jit->pc.w;\n    B((i0 - w) >> 2);\n    patch_at(u, _jit->pc.w);\n    patch_at(v, _jit->pc.w);\n    return (w);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "fbopi(uneq)",
        "fbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_ldr_d": {
      "start_point": [
        651,
        0
      ],
      "end_point": [
        659,
        1
      ],
      "content": "static void\n_ldr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldr_l(rn(reg), r1);\n    FMOVDX(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        661,
        0
      ],
      "end_point": [
        669,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldi_l(rn(reg), i0);\n    FMOVDX(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        671,
        0
      ],
      "end_point": [
        679,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldxr_l(rn(reg), r1, r2);\n    FMOVDX(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        681,
        0
      ],
      "end_point": [
        689,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ldxi_l(rn(reg), r1, i0);\n    FMOVDX(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_d": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        699,
        1
      ],
      "content": "static void\n_str_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVXD(rn(reg), r1);\n    str_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        701,
        0
      ],
      "end_point": [
        709,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVXD(rn(reg), r0);\n    sti_l(i0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        711,
        0
      ],
      "end_point": [
        719,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVXD(rn(reg), r2);\n    stxr_l(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        721,
        0
      ],
      "end_point": [
        729,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    FMOVXD(rn(reg), r1);\n    stxi_l(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d": {
      "start_point": [
        731,
        0
      ],
      "end_point": [
        736,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tFMOVD(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        738,
        0
      ],
      "end_point": [
        755,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t i0)\n{\n    union {\n\tjit_int64_t\tl;\n\tjit_float64_t\td;\n    } u;\n    jit_int32_t\t\treg;\n    u.d = i0;\n    if (u.l == 0)\n\tFMOVDX(r0, XZR_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), u.l);\n\tFMOVDX(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dccr": {
      "start_point": [
        757,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "content": "static void\n_dccr(jit_state_t *_jit, jit_int32_t cc,\n      jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPED(r1, r2);\n    CSET(r0, cc);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dcci": {
      "start_point": [
        765,
        0
      ],
      "end_point": [
        774,
        1
      ],
      "content": "static void\n_dcci(jit_state_t *_jit, jit_int32_t cc,\n      jit_int32_t r0, jit_int32_t r1, jit_float64_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    dccr(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        776,
        0
      ],
      "end_point": [
        786,
        1
      ],
      "content": "static void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    FCMPED(r1, r2);\n    CSET(r0, CC_VS);\n    w = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered satisfies condition */\n    CSET(r0, CC_EQ);\t\t/* equal satisfies condition */\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        787,
        0
      ],
      "end_point": [
        799,
        1
      ],
      "content": "dopi(uneq)\n\nstatic void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    FCMPED(r1, r2);\n    CSET(r0, CC_VC);\t\t/* set to 1 if ordered */\n    w = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered does not satisfy condition */\n    CSET(r0, CC_NE);\t\t/* set to 1 if not equal */\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dopi(uneq)",
        "dopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_dbccr": {
      "start_point": [
        800,
        0
      ],
      "end_point": [
        812,
        1
      ],
      "content": "dopi(ltgt)\n\nstatic jit_word_t\n_dbccr(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d;\n    FCMPED(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) >> 2;\n    B_C(cc, d);\n    return (w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dopi(ltgt)",
        "dopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_dbcci": {
      "start_point": [
        814,
        0
      ],
      "end_point": [
        825,
        1
      ],
      "content": "static jit_word_t\n_dbcci(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_float64_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_d(rn(reg), i1);\n    w = dbccr(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr_d": {
      "start_point": [
        827,
        0
      ],
      "end_point": [
        841,
        1
      ],
      "content": "static jit_word_t\n_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tu, v, w;\n    FCMPED(r0, r1);\n    u = _jit->pc.w;\n    B_C(BCC_VS, 1);\t\t/* unordered satisfies condition */\n    v = _jit->pc.w;\n    B_C(BCC_NE, 1);\t\t/* not equal (or unordered) does not satisfy */\n    patch_at(u, _jit->pc.w);\n    w = _jit->pc.w;\n    B((i0 - w) >> 2);\n    patch_at(v, _jit->pc.w);\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr_d": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        858,
        1
      ],
      "content": "dbopi(uneq)\n\nstatic jit_word_t\n_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tu, v, w;\n    FCMPED(r0, r1);\n    u = _jit->pc.w;\n    B_C(BCC_VS, 2);\t\t/* jump over if unordered */\n    v = _jit->pc.w;\n    B_C(BCC_EQ, 1);\t\t/* jump over if equal */\n    w = _jit->pc.w;\n    B((i0 - w) >> 2);\n    patch_at(u, _jit->pc.w);\n    patch_at(v, _jit->pc.w);\n    return (w);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "dbopi(uneq)",
        "dbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        859,
        0
      ],
      "end_point": [
        912,
        1
      ],
      "content": "dbopi(ltgt)\n\nstatic void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n    jit_int32_t\t\trg0, rg1;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n\n    /* Load the fp offset in save area in the first temporary. */\n    ldxi_i(rn(rg0), r1, offsetof(jit_va_list_t, fpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    ge_code = bgei(_jit->pc.w, rn(rg0), 0);\n\n    /* Load the gp save pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, fptop));\n\n    /* Load the vararg argument in the first argument. */\n    ldxr_d(r0, rn(rg1), rn(rg0));\n\n    /* Update the fp offset. */\n    addi(rn(rg0), rn(rg0), 16);\n    stxi_i(offsetof(jit_va_list_t, fpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg(rg1);\n\n    /* Jump over overflow code. */\n    lt_code = jmpi_p(_jit->pc.w);\n\n    /* Where to land if argument is in overflow area. */\n    patch_at(ge_code, _jit->pc.w);\n\n    /* Load stack pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, stack));\n\n    /* Load argument. */\n    ldr_d(r0, rn(rg0));\n\n    /* Update stack pointer. */\n    addi(rn(rg0), rn(rg0), 8);\n    stxi(offsetof(jit_va_list_t, stack), r1, rn(rg0));\n\n    /* Where to land if argument is in gp save area. */\n    patch_at(lt_code, _jit->pc.w);\n\n    jit_unget_reg(rg0);\n}",
      "lines": 54,
      "depth": 10,
      "decorators": [
        "dbopi(ltgt)",
        "dbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_aarch64-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_aarch64.c": {
    "jit_get_cpu": {
      "start_point": [
        143,
        0
      ],
      "end_point": [
        146,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        152,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.alen = 0;\n    _jitc->function->self.aoff = 0;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 41,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        212,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        245,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t r0, r1;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    r0 = jit_get_reg(jit_class_gpr);\n    jit_negr(r0, v);\n    jit_andi(r0, r0, -16);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, r0);\n    /* Cannot \"addr sp, sp, reg\" because in this context \"sp\" is \"[w|x]zr\",\n     * the zero register */\n#if 0\n    jit_addr(JIT_SP, JIT_SP, r0);\n#else\n    r1 = jit_get_reg(jit_class_gpr);\n    /* note that \"mov r1, sp\" does not work, but the proper encoding\n     * can be triggered before actually emiting with \"add r1, sp, 0\" */\n    jit_addi(r1, JIT_SP, 0);\n    jit_addr(r1, r1, r0);\n    jit_addi(JIT_SP, r1, 0);\n    jit_unget_reg(r1);\n#endif\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(r0);\n    jit_dec_synth();\n}",
      "lines": 32,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        257,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        269,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        271,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        280,
        0
      ],
      "end_point": [
        290,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (u != JIT_FRET)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        292,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        301,
        0
      ],
      "end_point": [
        311,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (u != JIT_FRET)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        313,
        0
      ],
      "end_point": [
        320,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        322,
        0
      ],
      "end_point": [
        329,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        331,
        0
      ],
      "end_point": [
        338,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_f_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        340,
        0
      ],
      "end_point": [
        372,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t/* Allocate va_list like object in the stack,\n\t * with enough space to save all argument\n\t * registers, and use fixed offsets for them. */\n\t_jitc->function->vaoff = jit_allocai(sizeof(jit_va_list_t));\n\n\t/* Initialize gp offset in save area. */\n\tif (jit_arg_reg_p(_jitc->function->self.argi))\n\t    _jitc->function->vagp = (8 - _jitc->function->self.argi) * -8;\n\telse\n\t    _jitc->function->vagp = 0;\n\n\t/* Initialize fp offset in save area. */\n\tif (jit_arg_f_reg_p(_jitc->function->self.argf))\n\t    _jitc->function->vafp = (8 - _jitc->function->self.argf) * -16;\n\telse\n\t    _jitc->function->vafp = 0;\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        374,
        0
      ],
      "end_point": [
        391,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        393,
        0
      ],
      "end_point": [
        410,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        412,
        0
      ],
      "end_point": [
        429,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        431,
        0
      ],
      "end_point": [
        441,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        443,
        0
      ],
      "end_point": [
        453,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        455,
        0
      ],
      "end_point": [
        465,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        467,
        0
      ],
      "end_point": [
        477,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        479,
        0
      ],
      "end_point": [
        489,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_i(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        491,
        0
      ],
      "end_point": [
        501,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_ui(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        503,
        0
      ],
      "end_point": [
        513,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_l(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        515,
        0
      ],
      "end_point": [
        525,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(JIT_RA0 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        527,
        0
      ],
      "end_point": [
        542,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(JIT_RA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        544,
        0
      ],
      "end_point": [
        554,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_f(u, JIT_FA0 - v->u.w);\n    else\n\tjit_ldxi_f(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        556,
        0
      ],
      "end_point": [
        566,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(JIT_FA0 - v->u.w, u);\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        568,
        0
      ],
      "end_point": [
        583,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_f(JIT_FA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        585,
        0
      ],
      "end_point": [
        595,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, JIT_FA0 - v->u.w);\n    else\n\tjit_ldxi_d(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        597,
        0
      ],
      "end_point": [
        607,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_d(JIT_FA0 - v->u.w, u);\n    else\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        609,
        0
      ],
      "end_point": [
        624,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_d(JIT_FA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        626,
        0
      ],
      "end_point": [
        641,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        643,
        0
      ],
      "end_point": [
        662,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        664,
        0
      ],
      "end_point": [
        679,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movr_f(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        681,
        0
      ],
      "end_point": [
        700,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_f(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n \tjit_stxi_f(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        702,
        0
      ],
      "end_point": [
        717,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movr_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        719,
        0
      ],
      "end_point": [
        738,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n \tjit_stxi_d(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        740,
        0
      ],
      "end_point": [
        757,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tregno = JIT_RA0 - regno;\n\tif (regno >= 0 && regno < node->v.w)\n\t    return (1);\n\tif (spec & jit_class_fpr) {\n\t    regno = JIT_FA0 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n\n    return (0);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        759,
        0
      ],
      "end_point": [
        774,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_callr(r0);\n    node->v.w = _jitc->function->self.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        776,
        0
      ],
      "end_point": [
        792,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        794,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        808,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        810,
        0
      ],
      "end_point": [
        816,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        818,
        0
      ],
      "end_point": [
        824,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        826,
        0
      ],
      "end_point": [
        832,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    jit_extr_i(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        834,
        0
      ],
      "end_point": [
        840,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_ui, r0);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        849,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        851,
        0
      ],
      "end_point": [
        858,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        860,
        0
      ],
      "end_point": [
        867,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        869,
        0
      ],
      "end_point": [
        1509,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_word_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_uint8_t\t*data;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t const_offset;\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.const_offset = undo.patch_offset = 0;\n#  define assert_data(node)\t\t/**/\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_f:\t\t\t\t\t\\\n\t\tassert_data(node);\t\t\t\t\t\\\n\t\tname##i_f(rn(node->u.w), rn(node->v.w), node->w.f);\t\\\n\t\tbreak\n#define case_rrd(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_d:\t\t\t\t\t\\\n\t\tassert_data(node);\t\t\t\t\t\\\n\t\tname##i_d(rn(node->u.w), rn(node->v.w), node->w.d);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak;\n#define case_brf(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_f:\t\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i_f(temp->u.w, rn(node->v.w), node->w.f);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i_f(_jit->pc.w, rn(node->v.w),\t\t\\\n\t\t\t\t     node->w.f);\t\t\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brd(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_d:\t\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i_d(temp->u.w, rn(node->v.w), node->w.d);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i_d(_jit->pc.w, rn(node->v.w),\t\t\\\n\t\t\t\t     node->w.d);\t\t\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n\t\tcase_rr(hton, _ul);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), temp->u.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub);\n\t\tcase_rrf(rsb);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert_data(node);\n\t\tmovi_f(rn(node->u.w), node->v.f);\n\t\tbreak;\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrd(add);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrd(sub);\n\t\tcase_rrd(rsb);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrd(mul);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrd(div);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert_data(node);\n\t\tmovi_d(rn(node->u.w), node->v.d);\n\t\tbreak;\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrd(lt);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrd(le);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrd(eq);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrd(ge);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrd(gt);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrd(ne);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrd(unlt);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrd(unle);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrd(uneq);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrd(unge);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrd(ungt);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrd(ltgt);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrd(ord);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrd(unord);\n\t\tcase_brr(blt, _d);\n\t\tcase_brd(blt);\n\t\tcase_brr(ble, _d);\n\t\tcase_brd(ble);\n\t\tcase_brr(beq, _d);\n\t\tcase_brd(beq);\n\t\tcase_brr(bge, _d);\n\t\tcase_brd(bge);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brd(bgt);\n\t\tcase_brr(bne, _d);\n\t\tcase_brd(bne);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brd(bunlt);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brd(bunle);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brd(buneq);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brd(bunge);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brd(bungt);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brd(bltgt);\n\t\tcase_brr(bord, _d);\n\t\tcase_brd(bord);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brd(bunord);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tcalli(temp->u.w);\n\t\t    else {\n\t\t\tword = calli_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\t\tcase jit_code_getarg_ui:\n\t    case jit_code_getarg_l:\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrw\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = _jitc->patches.ptr[offset].inst;\n\tvalue = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(word, value);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 641,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1516,
        0
      ],
      "end_point": [
        1527,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__GNUC__)\n    jit_word_t\t\tf, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n    __clear_cache((void *)f, (void *)t);\n#endif\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1529,
        0
      ],
      "end_point": [
        1533,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1535,
        0
      ],
      "end_point": [
        1539,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1541,
        0
      ],
      "end_point": [
        1545,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1547,
        0
      ],
      "end_point": [
        1551,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1553,
        0
      ],
      "end_point": [
        1573,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\t flag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_alpha-cpu.c": {
    "_Pcd": {
      "start_point": [
        660,
        0
      ],
      "end_point": [
        666,
        1
      ],
      "content": "static void\n_Pcd(jit_state_t *_jit, int o, unsigned int n)\n{\n    assert(_u6_p(o));\n    assert(_u26_p(n));\n    ii((o<<26)|_u26(n));\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_Bra": {
      "start_point": [
        668,
        0
      ],
      "end_point": [
        675,
        1
      ],
      "content": "static void\n_Bra(jit_state_t *_jit, int o, int ra, int d)\n{\n    assert(_u6_p(o));\n    assert(_u5_p(ra));\n    assert(_s21_p(d));\n    ii((o<<26)|(ra<<21)|_u21(d));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_Mem": {
      "start_point": [
        677,
        0
      ],
      "end_point": [
        685,
        1
      ],
      "content": "static void\n_Mem(jit_state_t *_jit, int o, int ra, int rb, unsigned int d)\n{\n    assert(_u6_p(o));\n    assert(_u5_p(ra));\n    assert(_u5_p(rb));\n    assert(_u16_p(d));\n    ii((o<<26)|(ra<<21)|(rb<<16)|_u16(d));\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_Mbr": {
      "start_point": [
        687,
        0
      ],
      "end_point": [
        696,
        1
      ],
      "content": "static void\n_Mbr(jit_state_t *_jit, int o, int ra, int rb, int h, int d)\n{\n    assert(_u6_p(o));\n    assert(_u5_p(ra));\n    assert(_u5_p(rb));\n    assert(_u2_p(h));\n    assert(_s14_p(d));\n    ii((o<<26)|(ra<<21)|(rb<<16)|(h<<14)|_u14(d));\n}",
      "lines": 10,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_Opr": {
      "start_point": [
        698,
        0
      ],
      "end_point": [
        707,
        1
      ],
      "content": "static void\n_Opr(jit_state_t *_jit, int o, int ra, int rb, unsigned int f, int rc)\n{\n    assert(_u6_p(o));\n    assert(_u5_p(ra));\n    assert(_u5_p(rb));\n    assert(_u5_p(rc));\n    assert(_u11_p(f));\n    ii((o<<26)|(ra<<21)|(rb<<16)|(_u11(f)<<5)|rc);\n}",
      "lines": 10,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_Opi": {
      "start_point": [
        709,
        0
      ],
      "end_point": [
        718,
        1
      ],
      "content": "static void\n_Opi(jit_state_t *_jit, int o, int ra, unsigned int i, unsigned int f, int rc)\n{\n    assert(_u6_p(o));\n    assert(_u5_p(ra));\n    assert(_u8_p(i));\n    assert(_u5_p(rc));\n    assert(_u7_p(f));\n    ii((o<<26)|(ra<<21)|(_u8(i)<<13)|(1<<12)|(_u7(f)<<5)|rc);\n}",
      "lines": 10,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        720,
        0
      ],
      "end_point": [
        726,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        728,
        0
      ],
      "end_point": [
        733,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tMOV(r1, r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        735,
        0
      ],
      "end_point": [
        783,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_int16_t\t\ts0, s1, s2, s3;\n    s0 = i0;\n    s1 = i0 >> 16;\n    s2 = i0 >> 32;\n    s3 = i0 >> 48;\n    if (s0 < 0)\n\t++s1;\n    if (s2 < 0)\n\t++s3;\n    if (_u8_p(i0))\n\tMOVi(_u8(i0), r0);\n    else if (_s16_p(i0))\n\tLDA(r0, _R31_REGNO, _u16(s0));\n    else if (_s32_p(i0)) {\n\tLDA(r0, _R31_REGNO, _u16(s0));\n\tLDAH(r0, r0, _u16(s1));\n    }\n    else if (_u32_p(i0)) {\n\tLDA(r0, _R31_REGNO, _u16(s0));\n\tif (s1)\n\t    LDAH(r0, r0, _u16(s1));\n\tlshi(r0, r0, 32);\n\trshi_u(r0, r0, 32);\n    }\n    else if (_u32(i0) == 0) {\n\tLDA(r0, _R31_REGNO, _u16(s2));\n\tif (s3)\n\t    LDAH(r0, r0, _u16(s3));\n\tlshi(r0, r0, 32);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDA(r0, _R31_REGNO, _u16(s0));\n\tLDA(rn(reg), _R31_REGNO, _u16(s2));\n\tif (s1)\n\t    LDAH(r0, r0, _u16(s1));\n\tif (s3)\n\t    LDAH(rn(reg), rn(reg), _u16(s3));\n\tlshi(r0, r0, 32);\n\trshi_u(r0, r0, 32);\n\tlshi(rn(reg), rn(reg), 32);\n\torr(r0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 49,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        785,
        0
      ],
      "end_point": [
        811,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    jit_int16_t\t\ts0, s1, s2, s3;\n    w = _jit->pc.w;\n    reg = jit_get_reg(jit_class_gpr);\n    s0 = i0;\n    s1 = i0 >> 16;\n    s2 = i0 >> 32;\n    s3 = i0 >> 48;\n    if (s0 < 0)\n\t++s1;\n    if (s2 < 0)\n\t++s3;\n    LDA(r0, _R31_REGNO, _u16(s0));\n    LDA(rn(reg), _R31_REGNO, _u16(s2));\n    LDAH(r0, r0, _u16(s1));\n    LDAH(rn(reg), rn(reg), _u16(s3));\n    lshi(r0, r0, 32);\n    rshi_u(r0, r0, 32);\n    lshi(rn(reg), rn(reg), 32);\n    orr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 27,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_addi": {
      "start_point": [
        813,
        0
      ],
      "end_point": [
        827,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tADDQi(r1, i0, r0);\n    else if (_s16_p(i0))\n\tLDA(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        829,
        0
      ],
      "end_point": [
        846,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddr(rn(reg), r1, r2);\n\tltr_u(rn(jit_carry), rn(reg), r1);\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddr(r0, r1, r2);\n\tltr_u(rn(jit_carry), r0, r1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        848,
        0
      ],
      "end_point": [
        865,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tltr_u(rn(jit_carry), rn(reg), r1);\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddi(r0, r1, i0);\n\tltr_u(rn(jit_carry), r0, r1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        867,
        0
      ],
      "end_point": [
        877,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    addcr(r0, r1, r2);\n    addcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        879,
        0
      ],
      "end_point": [
        889,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    addci(r0, r1, i0);\n    addcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        891,
        0
      ],
      "end_point": [
        905,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tSUBQi(r1, i0, r0);\n    else if (_s16_p(-i0))\n\tLDA(r0, r1, _u16(-i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        907,
        0
      ],
      "end_point": [
        924,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tsubr(rn(reg), r1, r2);\n\tltr_u(rn(jit_carry), r1, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsubr(r0, r1, r2);\n\tltr_u(rn(jit_carry), r1, r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        926,
        0
      ],
      "end_point": [
        943,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, -i0);\n\tltr_u(rn(jit_carry), r1, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddi(r0, r1, -i0);\n\tltr_u(rn(jit_carry), r1, r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        945,
        0
      ],
      "end_point": [
        955,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    subcr(r0, r1, r2);\n    subcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        957,
        0
      ],
      "end_point": [
        967,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    subci(r0, r1, i0);\n    subcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        969,
        0
      ],
      "end_point": [
        974,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        976,
        0
      ],
      "end_point": [
        988,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tMULQi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tmulr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr": {
      "start_point": [
        990,
        0
      ],
      "end_point": [
        1026,
        1
      ],
      "content": "static void\n_qmulr(jit_state_t *_jit, jit_int32_t r0,\n       jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\treg;\n    /* The only invalid condition is r0 == r1 */\n    jit_int32_t\t\tt2, t3, s2, s3;\n    if (r2 == r0 || r2 == r1) {\n\ts2 = jit_get_reg(jit_class_gpr);\n\tt2 = rn(s2);\n\tmovr(t2, r2);\n    }\n    else\n\tt2 = r2;\n    if (r3 == r0 || r3 == r1) {\n\ts3 = jit_get_reg(jit_class_gpr);\n\tt3 = rn(s3);\n\tmovr(t3, r3);\n    }\n    else\n\tt3 = r3;\n    qmulr_u(r0, r1, r2, r3);\n    reg = jit_get_reg(jit_class_gpr);\n    /**/\n    rshi(rn(reg), t2, 63);\n    mulr(rn(reg), rn(reg), t3);\n    addr(r1, r1, rn(reg));\n    /**/\n    rshi(rn(reg), t3, 63);\n    mulr(rn(reg), rn(reg), t2);\n    addr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n    if (t2 != r2)\n\tjit_unget_reg(s2);\n    if (t3 != r3)\n\tjit_unget_reg(s3);\n}",
      "lines": 37,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli": {
      "start_point": [
        1028,
        0
      ],
      "end_point": [
        1037,
        1
      ],
      "content": "static void\n_qmuli(jit_state_t *_jit, jit_int32_t r0,\n       jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qmulr(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr_u": {
      "start_point": [
        1039,
        0
      ],
      "end_point": [
        1055,
        1
      ],
      "content": "static void\n_qmulr_u(jit_state_t *_jit, jit_int32_t r0,\n\t jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 || r0 == r3) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmulr(rn(reg), r2, r3);\n    }\n    else\n\tmulr(r0, r2, r3);\n    UMULH(r2, r3, r1);\n    if (r0 == r2 || r0 == r3) {\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli_u": {
      "start_point": [
        1057,
        0
      ],
      "end_point": [
        1081,
        1
      ],
      "content": "static void\n_qmuli_u(jit_state_t *_jit, jit_int32_t r0,\n\t jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0)) {\n\tif (r0 == r2) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    muli(rn(reg), r2, i0);\n\t}\n\telse\n\t    muli(r0, r2, i0);\n\tUMULHi(r2, i0, r1);\n\tif (r0 == r2) {\n\t    movr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tqmulr_u(r0, r1, r2, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__idiv": {
      "start_point": [
        1083,
        0
      ],
      "end_point": [
        1087,
        1
      ],
      "content": "static jit_word_t\n__idiv(jit_word_t u, jit_word_t v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_divr": {
      "start_point": [
        1089,
        0
      ],
      "end_point": [
        1096,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_A0_REGNO, r1);\n    movr(_A1_REGNO, r2);\n    calli((jit_word_t)__idiv);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        1098,
        0
      ],
      "end_point": [
        1105,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_A0_REGNO, r1);\n    movi(_A1_REGNO, i0);\n    calli((jit_word_t)__idiv);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__udiv": {
      "start_point": [
        1107,
        0
      ],
      "end_point": [
        1111,
        1
      ],
      "content": "static jit_uword_t\n__udiv(jit_uword_t u, jit_uword_t v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_uword_t"
      ]
    },
    "_divr_u": {
      "start_point": [
        1113,
        0
      ],
      "end_point": [
        1120,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_A0_REGNO, r1);\n    movr(_A1_REGNO, r2);\n    calli((jit_word_t)__udiv);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1122,
        0
      ],
      "end_point": [
        1129,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_A0_REGNO, r1);\n    movi(_A1_REGNO, i0);\n    calli((jit_word_t)__udiv);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__irem": {
      "start_point": [
        1131,
        0
      ],
      "end_point": [
        1135,
        1
      ],
      "content": "static jit_word_t\n__irem(jit_word_t u, jit_word_t v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_remr": {
      "start_point": [
        1137,
        0
      ],
      "end_point": [
        1144,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_A0_REGNO, r1);\n    movr(_A1_REGNO, r2);\n    calli((jit_word_t)__irem);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1146,
        0
      ],
      "end_point": [
        1153,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_A0_REGNO, r1);\n    movi(_A1_REGNO, i0);\n    calli((jit_word_t)__irem);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__urem": {
      "start_point": [
        1155,
        0
      ],
      "end_point": [
        1159,
        1
      ],
      "content": "static jit_uword_t\n__urem(jit_uword_t u, jit_uword_t v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_uword_t"
      ]
    },
    "_remr_u": {
      "start_point": [
        1161,
        0
      ],
      "end_point": [
        1168,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_A0_REGNO, r1);\n    movr(_A1_REGNO, r2);\n    calli((jit_word_t)__urem);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1170,
        0
      ],
      "end_point": [
        1177,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_A0_REGNO, r1);\n    movi(_A1_REGNO, i0);\n    calli((jit_word_t)__urem);\n    movr(r0, _V0_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__idivrem": {
      "start_point": [
        1179,
        0
      ],
      "end_point": [
        1184,
        1
      ],
      "content": "static jit_word_t\n__idivrem(jit_word_t u, jit_word_t v, jit_word_t *rem)\n{\n    *rem = u % v;\n    return (u / v);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_qdivr": {
      "start_point": [
        1186,
        0
      ],
      "end_point": [
        1196,
        1
      ],
      "content": "static void\n_qdivr(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    movr(_A0_REGNO, r2);\n    movr(_A1_REGNO, r3);\n    subi(_A2_REGNO, _FP_REGNO, 8);\n    calli((jit_word_t)__idivrem);\n    movr(r0, _V0_REGNO);\n    ldxi(r1, _FP_REGNO, -8);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi": {
      "start_point": [
        1198,
        0
      ],
      "end_point": [
        1208,
        1
      ],
      "content": "static void\n_qdivi(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    movr(_A0_REGNO, r2);\n    movi(_A1_REGNO, i0);\n    subi(_A2_REGNO, _FP_REGNO, 8);\n    calli((jit_word_t)__idivrem);\n    movr(r0, _V0_REGNO);\n    ldxi(r1, _FP_REGNO, -8);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__udivrem": {
      "start_point": [
        1210,
        0
      ],
      "end_point": [
        1215,
        1
      ],
      "content": "static jit_word_t\n__udivrem(jit_uword_t u, jit_uword_t v, jit_uword_t *rem)\n{\n    *rem = u % v;\n    return (u / v);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_qdivr_u": {
      "start_point": [
        1217,
        0
      ],
      "end_point": [
        1227,
        1
      ],
      "content": "static void\n_qdivr_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    movr(_A0_REGNO, r2);\n    movr(_A1_REGNO, r3);\n    subi(_A2_REGNO, _FP_REGNO, 8);\n    calli((jit_word_t)__udivrem);\n    movr(r0, _V0_REGNO);\n    ldxi(r1, _FP_REGNO, -8);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi_u": {
      "start_point": [
        1229,
        0
      ],
      "end_point": [
        1239,
        1
      ],
      "content": "static void\n_qdivi_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    movr(_A0_REGNO, r2);\n    movi(_A1_REGNO, i0);\n    subi(_A2_REGNO, _FP_REGNO, 8);\n    calli((jit_word_t)__udivrem);\n    movr(r0, _V0_REGNO);\n    ldxi(r1, _FP_REGNO, -8);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        1241,
        0
      ],
      "end_point": [
        1246,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 < 64);\n    SLLi(r1, i0, r0);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        1248,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 < 64);\n    SRAi(r1, i0, r0);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1260,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 < 64);\n    SRLi(r1, i0, r0);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1262,
        0
      ],
      "end_point": [
        1274,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tANDi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tandr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1276,
        0
      ],
      "end_point": [
        1288,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tORi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\torr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1290,
        0
      ],
      "end_point": [
        1302,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tXORi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\txorr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti": {
      "start_point": [
        1304,
        0
      ],
      "end_point": [
        1316,
        1
      ],
      "content": "static void\n_lti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tCMPLTi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tltr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti_u": {
      "start_point": [
        1318,
        0
      ],
      "end_point": [
        1330,
        1
      ],
      "content": "static void\n_lti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tCMPULTi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tltr_u(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei": {
      "start_point": [
        1332,
        0
      ],
      "end_point": [
        1344,
        1
      ],
      "content": "static void\n_lei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tCMPLEi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tler(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei_u": {
      "start_point": [
        1346,
        0
      ],
      "end_point": [
        1360,
        1
      ],
      "content": "static void\n_lei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tni0;\n    ni0 = -i0;\n    if (_u8_p(i0))\n\tCMPULEi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tler_u(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqi": {
      "start_point": [
        1362,
        0
      ],
      "end_point": [
        1374,
        1
      ],
      "content": "static void\n_eqi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0))\n\tCMPEQi(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\teqr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei": {
      "start_point": [
        1376,
        0
      ],
      "end_point": [
        1384,
        1
      ],
      "content": "static void\n_gei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ger(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei_u": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1394,
        1
      ],
      "content": "static void\n_gei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ger_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti": {
      "start_point": [
        1396,
        0
      ],
      "end_point": [
        1404,
        1
      ],
      "content": "static void\n_gti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    gtr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti_u": {
      "start_point": [
        1406,
        0
      ],
      "end_point": [
        1414,
        1
      ],
      "content": "static void\n_gti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    gtr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        1416,
        0
      ],
      "end_point": [
        1421,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPEQ(r1, r2, r0);\n    CMPEQi(r0, 0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        1423,
        0
      ],
      "end_point": [
        1437,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_u8_p(i0)) {\n\tCMPEQi(r1, i0, r0);\n\tCMPEQi(r0, 0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tner(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr": {
      "start_point": [
        1439,
        0
      ],
      "end_point": [
        1450,
        1
      ],
      "content": "static jit_word_t\n_bltr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ltr(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti": {
      "start_point": [
        1452,
        0
      ],
      "end_point": [
        1469,
        1
      ],
      "content": "static jit_word_t\n_blti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBLT(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tlti(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltr_u": {
      "start_point": [
        1471,
        0
      ],
      "end_point": [
        1482,
        1
      ],
      "content": "static jit_word_t\n_bltr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ltr_u(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti_u": {
      "start_point": [
        1484,
        0
      ],
      "end_point": [
        1496,
        1
      ],
      "content": "static jit_word_t\n_blti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    /* FIXME cannot optimize zero because need to return a patcheable address */\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    lti_u(rn(reg), r0, i1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler": {
      "start_point": [
        1498,
        0
      ],
      "end_point": [
        1509,
        1
      ],
      "content": "static jit_word_t\n_bler(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ler(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei": {
      "start_point": [
        1511,
        0
      ],
      "end_point": [
        1528,
        1
      ],
      "content": "static jit_word_t\n_blei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBLE(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tlei(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_u": {
      "start_point": [
        1530,
        0
      ],
      "end_point": [
        1541,
        1
      ],
      "content": "static jit_word_t\n_bler_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ler_u(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei_u": {
      "start_point": [
        1543,
        0
      ],
      "end_point": [
        1560,
        1
      ],
      "content": "static jit_word_t\n_blei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBEQ(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tlei_u(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n     }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr": {
      "start_point": [
        1562,
        0
      ],
      "end_point": [
        1573,
        1
      ],
      "content": "static jit_word_t\n_beqr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    eqr(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        1575,
        0
      ],
      "end_point": [
        1592,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBEQ(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\teqi(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger": {
      "start_point": [
        1594,
        0
      ],
      "end_point": [
        1605,
        1
      ],
      "content": "static jit_word_t\n_bger(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ger(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei": {
      "start_point": [
        1607,
        0
      ],
      "end_point": [
        1624,
        1
      ],
      "content": "static jit_word_t\n_bgei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBGE(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tgei(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_u": {
      "start_point": [
        1626,
        0
      ],
      "end_point": [
        1637,
        1
      ],
      "content": "static jit_word_t\n_bger_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    ger_u(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei_u": {
      "start_point": [
        1639,
        0
      ],
      "end_point": [
        1657,
        1
      ],
      "content": "static jit_word_t\n_bgei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    /* always true if i1 == 0 */\n    if (i0 == 0) {\n\tw = _jit->pc.w;\n\tBR(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tgei_u(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 19,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr": {
      "start_point": [
        1659,
        0
      ],
      "end_point": [
        1670,
        1
      ],
      "content": "static jit_word_t\n_bgtr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    gtr(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti": {
      "start_point": [
        1672,
        0
      ],
      "end_point": [
        1689,
        1
      ],
      "content": "static jit_word_t\n_bgti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBGT(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tgti(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_u": {
      "start_point": [
        1691,
        0
      ],
      "end_point": [
        1702,
        1
      ],
      "content": "static jit_word_t\n_bgtr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    gtr_u(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti_u": {
      "start_point": [
        1704,
        0
      ],
      "end_point": [
        1715,
        1
      ],
      "content": "static jit_word_t\n_bgti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    gti_u(rn(reg), r0, i1);\n    w = _jit->pc.w;\n    BNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner": {
      "start_point": [
        1717,
        0
      ],
      "end_point": [
        1728,
        1
      ],
      "content": "static jit_word_t\n_bner(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    eqr(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BEQ(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        1730,
        0
      ],
      "end_point": [
        1747,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBNE(r0, ((i0 - w) >> 2) - 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\teqi(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBEQ(rn(reg), ((i0 - w) >> 2) - 1);\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr": {
      "start_point": [
        1749,
        0
      ],
      "end_point": [
        1779,
        1
      ],
      "content": "static jit_word_t\n_baddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    jit_int32_t\t\tt3;\n    /* t0 = r0 + r1;\toverflow = r1 < 0 ? r0 < t0 : t0 < r0 */\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    t3 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addr(rn(t0), r0, r1);\t\t/* t0 = r0 + r1 */\n    ltr(rn(t1), r1, _R31_REGNO);\t/* t1 = r1 < 0 */\n    ltr(rn(t2), r0, rn(t0));\t\t/* t2 = r0 < t0 */\n    ltr(rn(t3), rn(t0), r0);\t\t/* t3 = t0 < r0 */\n    movr(r0, rn(t0));\t\t\t/* r0 += r1 */\n    CMOVNE(rn(t1), rn(t2), rn(t3));\t/* if (t1 == 0) t3 = t2; */\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t3), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t3), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t3);\n    return (w);\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi": {
      "start_point": [
        1781,
        0
      ],
      "end_point": [
        1792,
        1
      ],
      "content": "static jit_word_t\n_baddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = baddr(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr_u": {
      "start_point": [
        1794,
        0
      ],
      "end_point": [
        1814,
        1
      ],
      "content": "static jit_word_t\n_baddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addr(rn(t0), r0, r1);\n    ltr_u(rn(t1), rn(t0), r0);\n    movr(r0, rn(t0));\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t1), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t1), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t1);\n    return (w);\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi_u": {
      "start_point": [
        1816,
        0
      ],
      "end_point": [
        1836,
        1
      ],
      "content": "static jit_word_t\n_baddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addi(rn(t0), r0, i1);\n    ltr_u(rn(t1), rn(t0), r0);\n    movr(r0, rn(t0));\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t1), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t1), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t1);\n    return (w);\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr": {
      "start_point": [
        1838,
        0
      ],
      "end_point": [
        1868,
        1
      ],
      "content": "static jit_word_t\n_bsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    jit_int32_t\t\tt3;\n    /* t0 = r0 - r1;\toverflow = 0 < r1 ? r0 < t0 : t0 < r0 */\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    t3 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subr(rn(t0), r0, r1);\t\t/* r0 = r0 - r1 */\n    ltr(rn(t1), _R31_REGNO, r1);\t/* t1 = 0 < r1 */\n    ltr(rn(t2), r0, rn(t0));\t\t/* t2 = r0 < t0 */\n    ltr(rn(t3), rn(t0), r0);\t\t/* t3 = t0 < r0 */\n    movr(r0, rn(t0));\t\t\t/* r0 -= r1 */\n    CMOVNE(rn(t1), rn(t2), rn(t3));\t/* if (t1 == 0) t3 = t2; */\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t3), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t3), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t3);\n    return (w);\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi": {
      "start_point": [
        1870,
        0
      ],
      "end_point": [
        1881,
        1
      ],
      "content": "static jit_word_t\n_bsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bsubr(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr_u": {
      "start_point": [
        1883,
        0
      ],
      "end_point": [
        1903,
        1
      ],
      "content": "static jit_word_t\n_bsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subr(rn(t0), r0, r1);\n    ltr_u(rn(t1), r0, rn(t0));\n    movr(r0, rn(t0));\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t1), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t1), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t1);\n    return (w);\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi_u": {
      "start_point": [
        1905,
        0
      ],
      "end_point": [
        1925,
        1
      ],
      "content": "static jit_word_t\n_bsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subi(rn(t0), r0, i1);\n    ltr_u(rn(t1), r0, rn(t0));\n    movr(r0, rn(t0));\n    jit_unget_reg(t0);\n    w = _jit->pc.w;\n    if (carry)\n\tBNE(rn(t1), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t1), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t1);\n    return (w);\n}",
      "lines": 21,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxr": {
      "start_point": [
        1927,
        0
      ],
      "end_point": [
        1942,
        1
      ],
      "content": "static jit_word_t\n_bmxr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n      jit_bool_t set)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andr(rn(t0), r0, r1);\n    w = _jit->pc.w;\n    if (set)\n\tBNE(rn(t0), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t0), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxi": {
      "start_point": [
        1944,
        0
      ],
      "end_point": [
        1959,
        1
      ],
      "content": "static jit_word_t\n_bmxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n      jit_bool_t set)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andi(rn(t0), r0, i1);\n    w = _jit->pc.w;\n    if (set)\n\tBNE(rn(t0), ((i0 - w) >> 2) - 1);\n    else\n\tBEQ(rn(t0), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldr_c": {
      "start_point": [
        1961,
        0
      ],
      "end_point": [
        1966,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_uc(r0, r1);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        1968,
        0
      ],
      "end_point": [
        1982,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDBU(r0, _R31_REGNO, _u16(i0));\n\textr_c(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        1984,
        0
      ],
      "end_point": [
        1996,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDBU(r0, _R31_REGNO, _u16(i0));\n    else  {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_s": {
      "start_point": [
        1998,
        0
      ],
      "end_point": [
        2003,
        1
      ],
      "content": "static void\n_ldr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_us(r0, r1);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        2005,
        0
      ],
      "end_point": [
        2019,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDWU(r0, _R31_REGNO, _u16(i0));\n\textr_s(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        2021,
        0
      ],
      "end_point": [
        2033,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDWU(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        2035,
        0
      ],
      "end_point": [
        2047,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDL(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_ui": {
      "start_point": [
        2049,
        0
      ],
      "end_point": [
        2054,
        1
      ],
      "content": "static void\n_ldr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_i(r0, r1);\n    extr_ui(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        2056,
        0
      ],
      "end_point": [
        2070,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDL(r0, _R31_REGNO, _u16(i0));\n\textr_ui(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        2072,
        0
      ],
      "end_point": [
        2084,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDQ(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2086,
        0
      ],
      "end_point": [
        2094,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_c(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        2096,
        0
      ],
      "end_point": [
        2110,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDBU(r0, r1, _u16(i0));\n\textr_c(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        2112,
        0
      ],
      "end_point": [
        2120,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_uc(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        2122,
        0
      ],
      "end_point": [
        2134,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDBU(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        2136,
        0
      ],
      "end_point": [
        2144,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_s(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        2146,
        0
      ],
      "end_point": [
        2160,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDWU(r0, r1, _u16(i0));\n\textr_s(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        2162,
        0
      ],
      "end_point": [
        2170,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_us(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        2172,
        0
      ],
      "end_point": [
        2184,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDWU(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        2186,
        0
      ],
      "end_point": [
        2194,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        2196,
        0
      ],
      "end_point": [
        2208,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDL(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        2210,
        0
      ],
      "end_point": [
        2218,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_ui(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        2220,
        0
      ],
      "end_point": [
        2234,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0)) {\n\tLDL(r0, r1, _u16(i0));\n\textr_ui(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        2236,
        0
      ],
      "end_point": [
        2244,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        2246,
        0
      ],
      "end_point": [
        2258,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tLDQ(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        2260,
        0
      ],
      "end_point": [
        2272,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTB(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_c(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        2274,
        0
      ],
      "end_point": [
        2286,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTW(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_s(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        2288,
        0
      ],
      "end_point": [
        2300,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTL(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_i(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        2302,
        0
      ],
      "end_point": [
        2314,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTQ(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_l(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        2316,
        0
      ],
      "end_point": [
        2324,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        2326,
        0
      ],
      "end_point": [
        2338,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTB(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        2340,
        0
      ],
      "end_point": [
        2348,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        2350,
        0
      ],
      "end_point": [
        2362,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTW(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        2364,
        0
      ],
      "end_point": [
        2372,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        2374,
        0
      ],
      "end_point": [
        2386,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTL(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        2388,
        0
      ],
      "end_point": [
        2396,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_l(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        2398,
        0
      ],
      "end_point": [
        2410,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (_s16_p(i0))\n\tSTQ(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_l(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_c": {
      "start_point": [
        2412,
        0
      ],
      "end_point": [
        2417,
        1
      ],
      "content": "static void\n_extr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 56);\n    rshi(r0, r0, 56);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_uc": {
      "start_point": [
        2419,
        0
      ],
      "end_point": [
        2424,
        1
      ],
      "content": "static void\n_extr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 56);\n    rshi_u(r0, r0, 56);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_s": {
      "start_point": [
        2426,
        0
      ],
      "end_point": [
        2431,
        1
      ],
      "content": "static void\n_extr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 48);\n    rshi(r0, r0, 48);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_us": {
      "start_point": [
        2433,
        0
      ],
      "end_point": [
        2438,
        1
      ],
      "content": "static void\n_extr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 48);\n    rshi_u(r0, r0, 48);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_i": {
      "start_point": [
        2440,
        0
      ],
      "end_point": [
        2445,
        1
      ],
      "content": "static void\n_extr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 32);\n    rshi(r0, r0, 32);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_ui": {
      "start_point": [
        2447,
        0
      ],
      "end_point": [
        2452,
        1
      ],
      "content": "static void\n_extr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 32);\n    rshi_u(r0, r0, 32);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        2454,
        0
      ],
      "end_point": [
        2464,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr);\n    EXTBLi(r1, 0, rn(t0));\n    EXTBLi(r1, 1, r0);\n    SLLi(rn(t0), 8, rn(t0));\n    OR(r0, rn(t0), r0);\n    jit_unget_reg(t0);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        2466,
        0
      ],
      "end_point": [
        2490,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    jit_int32_t\t\tt3;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    t3 = jit_get_reg(jit_class_gpr);\n    EXTBLi(r1, 3, rn(t0));\n    INSBLi(r1, 3, rn(t1));\n    SLLi(r1, 8, rn(t2));\n    ZAPNOTi(rn(t2), 4, rn(t2));\n    SRLi(r1, 8, rn(t3));\n    OR(rn(t0), rn(t1), r0);\n    OR(rn(t2), r0, r0);\n    ZAPNOTi(rn(t3), 2, rn(t3));\n    OR(rn(t3), r0, r0);\n    jit_unget_reg(t3);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 25,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ul": {
      "start_point": [
        2492,
        0
      ],
      "end_point": [
        2514,
        1
      ],
      "content": "static void\n_htonr_ul(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    assert(_jitc->function != NULL);\n    t0 = jit_get_reg(jit_class_fpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    stxi(-8, _FP_REGNO, r1);\t\t\t/* r1 = ABCD EFGH */\n    LDG(rn(t0), _FP_REGNO, _u16(-8));\t\t/* t0 = GHEF CDAB */\n    STT(rn(t0), _FP_REGNO, _u16(-8));\n    ldxi(rn(t1), _FP_REGNO, -8);\t\t/* t1 = GHEF CDAB */\n    lshi(rn(t2), rn(t1), 8);\t\t\t/* t2 = HEFC DAB. */\n    rshi_u(rn(t1), rn(t1), 8);\t\t\t/* t1 = .GHE FCDA */\n    ZAPi(rn(t2), 0x55, rn(t2));\t\t\t/* t2 = H.F. D.B. */\n    ZAPi(rn(t1), 0xaa, rn(t1));\t\t\t/* t1 = .G.E .C.A */\n    orr(r0, rn(t1), rn(t2));\t\t\t/* r0 = HGFE DCBA */\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 23,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        2516,
        0
      ],
      "end_point": [
        2527,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    w = _jit->pc.w;\n    d = ((i0 - w) >> 2) - 1;\n    if (_s21_p(d))\n\tBR(_R31_REGNO, d);\n    else\n\t(void)jmpi_p(i0);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        2529,
        0
      ],
      "end_point": [
        2539,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    w = movi_p(rn(reg), i0);\n    jmpr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        2541,
        0
      ],
      "end_point": [
        2547,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (r0 != _PV_REGNO)\n\tMOV(r0, _PV_REGNO);\n    JSR(_RA_REGNO, _PV_REGNO, 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        2549,
        0
      ],
      "end_point": [
        2560,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    w = _jit->pc.w;\n    d = ((i0 - w) >> 2) - 1;\n    if (_s21_p(d))\n\tBSR(_RA_REGNO, d);\n    else\n\t(void)calli_p(i0);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        2562,
        0
      ],
      "end_point": [
        2569,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = movi_p(_PV_REGNO, i0);\n    callr(_PV_REGNO);\n    return (w);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        2571,
        0
      ],
      "end_point": [
        2632,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -8;\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t       _jitc->function->self.aoff) + 7) & -8;\n    /* ldgp gp, 0(pv) */\n    LDAH(_PV_REGNO, _GP_REGNO, 0);\n    LDA(_GP_REGNO, _GP_REGNO, 0);\n    /* callee save registers */\n    subi(_SP_REGNO, _SP_REGNO, stack_framesize);\n    stxi(0, _SP_REGNO, _RA_REGNO);\n    stxi(8, _SP_REGNO, _FP_REGNO);\n#  define SPILL(N, O)\t\t\t\t\t\t\t\\\n    if (jit_regset_tstbit(&_jitc->function->regset, N))\t\t\t\\\n\tstxi(O, _SP_REGNO, N##_REGNO)\n#  define SPILLD(N, O)\t\t\t\t\t\t\t\\\n    if (jit_regset_tstbit(&_jitc->function->regset, N))\t\t\t\\\n\tstxi_d(O, _SP_REGNO, N##_REGNO)\n    SPILL(_S0, 16);\n    SPILL(_S1, 24);\n    SPILL(_S2, 32);\n    SPILL(_S3, 40);\n    SPILL(_S4, 48);\n    SPILL(_S5, 56);\n    SPILLD(_F2, 64);\n    SPILLD(_F3, 72);\n    SPILLD(_F4, 80);\n    SPILLD(_F5, 88);\n    SPILLD(_F6, 96);\n    SPILLD(_F7, 104);\n    SPILLD(_F8, 112);\n    SPILLD(_F9, 120);\n#  undef SPILLD\n#  undef SPILL\n    movr(_FP_REGNO, _SP_REGNO);\n    /* alloca */\n    if (_jitc->function->stack)\n\tsubi(_SP_REGNO, _SP_REGNO, _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (reg = _jitc->function->self.argi; jit_arg_reg_p(reg); ++reg)\n\t    stxi(stack_framesize - 48 + reg * 8, _FP_REGNO, rn(_A0 - reg));\n\tfor (reg = _jitc->function->self.argi; jit_arg_reg_p(reg); ++reg)\n\t    stxi_d(stack_framesize - 96 + reg * 8, _FP_REGNO, rn(_F16 - reg));\n    }\n}",
      "lines": 62,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        2634,
        0
      ],
      "end_point": [
        2668,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n    movr(_SP_REGNO, _FP_REGNO);\n    ldxi(_RA_REGNO, _SP_REGNO, 0);\n    ldxi(_FP_REGNO, _SP_REGNO, 8);\n#  define LOAD(N, O)\t\t\t\t\t\t\t\\\n    if (jit_regset_tstbit(&_jitc->function->regset, N))\t\t\t\\\n\tldxi(N##_REGNO, _SP_REGNO,  O)\n#  define LOADD(N, O)\t\t\t\t\t\t\t\\\n    if (jit_regset_tstbit(&_jitc->function->regset, N))\t\t\t\\\n\tldxi_d(N##_REGNO, _SP_REGNO,  O)\n    LOAD(_S0, 16);\n    LOAD(_S1, 24);\n    LOAD(_S2, 32);\n    LOAD(_S3, 40);\n    LOAD(_S4, 48);\n    LOAD(_S5, 56);\n    LOADD(_F2, 64);\n    LOADD(_F3, 72);\n    LOADD(_F4, 80);\n    LOADD(_F5, 88);\n    LOADD(_F6, 96);\n    LOADD(_F7, 104);\n    LOADD(_F8, 112);\n    LOADD(_F9, 120);\n#  undef LOADD\n#  undef LOAD\n    addi(_SP_REGNO, _SP_REGNO, stack_framesize);\n    RET(_R31_REGNO, _RA_REGNO, 1);\t/* 1 means procedure return\n\t\t\t\t\t * 0 means no procedure return\n\t\t\t\t\t * other values are reserved */\n}",
      "lines": 35,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        2670,
        0
      ],
      "end_point": [
        2689,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n\n    /* Return jit_va_list_t in the register argument */\n    addi(r0, _FP_REGNO, _jitc->function->vaoff);\n\n    reg = jit_get_reg(jit_class_gpr);\n\n    /* The base field is constant. */\n    addi(rn(reg), _FP_REGNO, stack_framesize - 48);\n    stxi(offsetof(jit_va_list_t, base), r0, rn(reg));\n\n    /* Initialize the offset field */\n    movi(rn(reg), _jitc->function->vagp * 8);\n    stxi(offsetof(jit_va_list_t, offset), r0, rn(reg));\n\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        2691,
        0
      ],
      "end_point": [
        2717,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0, rg1;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n\n    /* Load the base in first temporary. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, base));\n\n    /* Load the offset in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, offset));\n\n    /* Load the argument */\n    ldxr(r0, rn(rg0), rn(rg1));\n\n    /* No longer needed. */\n    jit_unget_reg(rg0);\n\n    /* Update offset. */\n    addi(rn(rg1), rn(rg1), 8);\n    stxi(offsetof(jit_va_list_t, offset), r1, rn(rg1));\n    jit_unget_reg(rg1);\n}",
      "lines": 27,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        2719,
        0
      ],
      "end_point": [
        2781,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n    jit_word_t\t\t d;\n    jit_int16_t\t\ts0, s1, s2, s3;\n    u.w = instr;\n    switch (_u6(u.i[0] >> 26)) {\n\t/*   BLT\t     BLE\t     BEQ\t     BGE */\n\tcase 0x3a:\tcase 0x3b:\tcase 0x39:\tcase 0x3e:\n\t/*   BGT\t     BNE\t     BLBC\t     BLBS */\n\tcase 0x3f:\tcase 0x3d:\tcase 0x38:\tcase 0x3c:\n\t/*   BR\t\t     BSR */\n\tcase 0x30:\tcase 0x34:\n\t/*   FBLT\t     FBLE\t     FBEQ\t     FBGE */\n\tcase 0x32:\tcase 0x33:\tcase 0x31:\tcase 0x36:\n\t/*   FBGT\t     FBNE */\n\tcase 0x37:\tcase 0x35:\n\t    d = ((label - instr) >> 2) - 1;\n\t    assert(_s21_p(d));\n\t    u.i[0] &= ~0x1fffff;\n\t    u.i[0] |= _u21(d);\n\t    break;\n\t/*   LDA */\n\tcase 0x08:\t\t/* movi_p */\n\t    s0 = label;\n\t    s1 = label >> 16;\n\t    s2 = label >> 32;\n\t    s3 = label >> 48;\n\t    if (s0 < 0)\n\t\t++s1;\n\t    if (s2 < 0)\n\t\t++s3;\n\t    u.i[0] &= ~0xffff;\n\t    u.i[0] |= _u16(s0);\n\t    /*\t\t\t\tLDA */\n\t    assert(_u6(u.i[1] >> 26) == 0x08);\n\t    u.i[1] &= ~0xffff;\n\t    u.i[1] |= _u16(s2);\n\t    /*\t\t\t\tLDAH */\n\t    assert(_u6(u.i[2] >> 26) == 0x09);\n\t    u.i[2] &= ~0xffff;\n\t    u.i[2] |= _u16(s1);\n\t    /*\t\t\t\tLDAH */\n\t    assert(_u6(u.i[3] >> 26) == 0x09);\n\t    u.i[3] &= ~0xffff;\n\t    u.i[3] |= _u16(s3);\n\t    /*\t\t\t\tSLL */\n\t    assert(_u6(u.i[4] >> 26) == 0x12 && _u7(u.i[4] >> 5) == 0x39);\n\t    /*\t\t\t\tSRL */\n\t    assert(_u6(u.i[5] >> 26) == 0x12 && _u7(u.i[5] >> 5) == 0x34);\n\t    /*\t\t\t\tSLL */\n\t    assert(_u6(u.i[6] >> 26) == 0x12 && _u7(u.i[6] >> 5) == 0x39);\n\t    /*\t\t\t\tBIS */\n\t    assert(_u6(u.i[7] >> 26) == 0x11 && _u7(u.i[7] >> 5) == 0x20);\n\t    break;\n\tdefault:\n\t    abort();\n    }\n}",
      "lines": 63,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_alpha-fpu.c": {
    "_movr_d": {
      "start_point": [
        622,
        0
      ],
      "end_point": [
        627,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tFMOV(r1, r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        629,
        0
      ],
      "end_point": [
        648,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i & 0xffffffff);\n\tstxi_i(-8, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_f(r0, _FP_REGNO, -8);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        650,
        0
      ],
      "end_point": [
        669,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.w);\n\tstxi_l(-8, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_d(r0, _FP_REGNO, -8);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_l": {
      "start_point": [
        671,
        0
      ],
      "end_point": [
        681,
        1
      ],
      "content": "static void\n_truncr_d_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    CVTTQ_SVC(r1, rn(reg));\n    TRAPB();\n    stxi_d(-8, _FP_REGNO, rn(reg));\n    ldxi(r0, _FP_REGNO, -8);\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sqrtr_f": {
      "start_point": [
        683,
        0
      ],
      "end_point": [
        688,
        1
      ],
      "content": "static void\n_sqrtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    SQRTS_SU(r1, r0);\n    TRAPB();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sqrtr_d": {
      "start_point": [
        690,
        0
      ],
      "end_point": [
        695,
        1
      ],
      "content": "static void\n_sqrtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    SQRTT_SU(r1, r0);\n    TRAPB();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_f": {
      "start_point": [
        697,
        0
      ],
      "end_point": [
        703,
        1
      ],
      "content": "static void\n_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_l(-8, _FP_REGNO, r1);\n    ldxi_d(r0, _FP_REGNO, -8);\n    CVTQS(r0, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        705,
        0
      ],
      "end_point": [
        711,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_l(-8, _FP_REGNO, r1);\n    ldxi_d(r0, _FP_REGNO, -8);\n    CVTQT(r0, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr_f": {
      "start_point": [
        713,
        0
      ],
      "end_point": [
        718,
        1
      ],
      "content": "static void\n_addr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    ADDS_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr_d": {
      "start_point": [
        719,
        0
      ],
      "end_point": [
        726,
        1
      ],
      "content": "fopi(add)\n\nstatic void\n_addr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    ADDT_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(add)",
        "fopi",
        "(",
        "add",
        "add",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_subr_f": {
      "start_point": [
        727,
        0
      ],
      "end_point": [
        734,
        1
      ],
      "content": "dopi(add)\n\nstatic void\n_subr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SUBS_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "dopi(add)",
        "dopi",
        "(",
        "add",
        "add",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_subr_d": {
      "start_point": [
        738,
        0
      ],
      "end_point": [
        743,
        1
      ],
      "content": "static void\n_subr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SUBT_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr_f": {
      "start_point": [
        747,
        0
      ],
      "end_point": [
        752,
        1
      ],
      "content": "static void\n_mulr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MULS_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr_d": {
      "start_point": [
        753,
        0
      ],
      "end_point": [
        760,
        1
      ],
      "content": "fopi(mul)\n\nstatic void\n_mulr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MULT_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(mul)",
        "fopi",
        "(",
        "mul",
        "mul",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_divr_f": {
      "start_point": [
        761,
        0
      ],
      "end_point": [
        768,
        1
      ],
      "content": "dopi(mul)\n\nstatic void\n_divr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    DIVS_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "dopi(mul)",
        "dopi",
        "(",
        "mul",
        "mul",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_divr_d": {
      "start_point": [
        769,
        0
      ],
      "end_point": [
        776,
        1
      ],
      "content": "fopi(div)\n\nstatic void\n_divr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    DIVT_SU(r1, r2, r0);\n    TRAPB();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(div)",
        "fopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ltr_d": {
      "start_point": [
        777,
        0
      ],
      "end_point": [
        798,
        1
      ],
      "content": "dopi(div)\n\nstatic void\n_ltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 22,
      "depth": 8,
      "decorators": [
        "dopi(div)",
        "dopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ler_d": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        821,
        1
      ],
      "content": "static void\n_ler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr_d": {
      "start_point": [
        825,
        0
      ],
      "end_point": [
        844,
        1
      ],
      "content": "static void\n_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_d": {
      "start_point": [
        848,
        0
      ],
      "end_point": [
        867,
        1
      ],
      "content": "static void\n_ger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_d": {
      "start_point": [
        871,
        0
      ],
      "end_point": [
        890,
        1
      ],
      "content": "static void\n_gtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner_d": {
      "start_point": [
        894,
        0
      ],
      "end_point": [
        913,
        1
      ],
      "content": "static void\n_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTEQ_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unltr_d": {
      "start_point": [
        917,
        0
      ],
      "end_point": [
        936,
        1
      ],
      "content": "static void\n_unltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unler_d": {
      "start_point": [
        940,
        0
      ],
      "end_point": [
        959,
        1
      ],
      "content": "static void\n_unler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        963,
        0
      ],
      "end_point": [
        982,
        1
      ],
      "content": "static void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unger_d": {
      "start_point": [
        986,
        0
      ],
      "end_point": [
        1005,
        1
      ],
      "content": "static void\n_unger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ungtr_d": {
      "start_point": [
        1009,
        0
      ],
      "end_point": [
        1028,
        1
      ],
      "content": "static void\n_ungtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    movi(r0, 0);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        1032,
        0
      ],
      "end_point": [
        1051,
        1
      ],
      "content": "static void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(v, _jit->pc.w);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 20,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ordr_d": {
      "start_point": [
        1055,
        0
      ],
      "end_point": [
        1069,
        1
      ],
      "content": "static void\n_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 0);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    movi(r0, 1);\n    patch_at(w, _jit->pc.w);\n    jit_unget_reg(reg);\n}",
      "lines": 15,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unordr_d": {
      "start_point": [
        1073,
        0
      ],
      "end_point": [
        1087,
        1
      ],
      "content": "static void\n_unordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi(r0, 1);\n    CMPTUN_SU(r1, r2, rn(reg));\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    jit_unget_reg(reg);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 15,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr_d": {
      "start_point": [
        1091,
        0
      ],
      "end_point": [
        1108,
        1
      ],
      "content": "static jit_word_t\n_bltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTLT_SU(r0, r1, rn(reg));\t\t/* lt satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_d": {
      "start_point": [
        1112,
        0
      ],
      "end_point": [
        1129,
        1
      ],
      "content": "static jit_word_t\n_bler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTLE_SU(r0, r1, rn(reg));\t\t/* le satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr_d": {
      "start_point": [
        1133,
        0
      ],
      "end_point": [
        1150,
        1
      ],
      "content": "static jit_word_t\n_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTEQ_SU(r0, r1, rn(reg));\t\t/* eq satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_d": {
      "start_point": [
        1154,
        0
      ],
      "end_point": [
        1171,
        1
      ],
      "content": "static jit_word_t\n_bger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTLT_SU(r0, r1, rn(reg));\t\t/* ge satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_d": {
      "start_point": [
        1175,
        0
      ],
      "end_point": [
        1192,
        1
      ],
      "content": "static jit_word_t\n_bgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tv, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 3);\n    CMPTLE_SU(r0, r1, rn(reg));\t\t/* gt satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner_d": {
      "start_point": [
        1196,
        0
      ],
      "end_point": [
        1216,
        1
      ],
      "content": "static jit_word_t\n_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r0, r1, rn(reg));\t\t/* ne satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    patch_at(u, _jit->pc.w);\n    w = _jit->pc.w;\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunltr_d": {
      "start_point": [
        1220,
        0
      ],
      "end_point": [
        1240,
        1
      ],
      "content": "static jit_word_t\n_bunltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r0, r1, rn(reg));\t\t/* lt satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    w = _jit->pc.w;\n    patch_at(u, _jit->pc.w);\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunler_d": {
      "start_point": [
        1244,
        0
      ],
      "end_point": [
        1264,
        1
      ],
      "content": "static jit_word_t\n_bunler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r0, r1, rn(reg));\t\t/* le satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    w = _jit->pc.w;\n    patch_at(u, _jit->pc.w);\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr_d": {
      "start_point": [
        1268,
        0
      ],
      "end_point": [
        1288,
        1
      ],
      "content": "static jit_word_t\n_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r0, r1, rn(reg));\t\t/* eq satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBEQ(rn(reg), 1);\n    w = _jit->pc.w;\n    patch_at(u, _jit->pc.w);\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunger_d": {
      "start_point": [
        1292,
        0
      ],
      "end_point": [
        1312,
        1
      ],
      "content": "static jit_word_t\n_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLT_SU(r0, r1, rn(reg));\t\t/* ge satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    w = _jit->pc.w;\n    patch_at(u, _jit->pc.w);\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bungtr_d": {
      "start_point": [
        1316,
        0
      ],
      "end_point": [
        1336,
        1
      ],
      "content": "static jit_word_t\n_bungtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tu, v, w;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTLE_SU(r0, r1, rn(reg));\t\t/* gt does satisfy condition */\n    TRAPB();\n    v = _jit->pc.w;\n    FBNE(rn(reg), 1);\n    w = _jit->pc.w;\n    patch_at(u, _jit->pc.w);\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr_d": {
      "start_point": [
        1340,
        0
      ],
      "end_point": [
        1360,
        1
      ],
      "content": "static jit_word_t\n_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tu, v, w;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    u = _jit->pc.w;\n    FBNE(rn(reg), 4);\n    CMPTEQ_SU(r1, r0, rn(reg));\n    TRAPB();\n    v = _jit->pc.w;\t\t\t/* eq does not satisfy condition */\n    FBNE(rn(reg), 1);\n    w = _jit->pc.w;\n    BR(_R31_REGNO, ((i0 - w) >> 2) - 1);\n    patch_at(u, _jit->pc.w);\n    patch_at(v, _jit->pc.w);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bordr_d": {
      "start_point": [
        1364,
        0
      ],
      "end_point": [
        1376,
        1
      ],
      "content": "static jit_word_t\n_bordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord does not satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBEQ(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunordr_d": {
      "start_point": [
        1380,
        0
      ],
      "end_point": [
        1392,
        1
      ],
      "content": "static jit_word_t\n_bunordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    CMPTUN_SU(r0, r1, rn(reg));\t\t/* unord satisfy condition */\n    TRAPB();\n    w = _jit->pc.w;\n    FBNE(rn(reg), ((i0 - w) >> 2) - 1);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldi_f": {
      "start_point": [
        1396,
        0
      ],
      "end_point": [
        1408,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tLDS(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        1410,
        0
      ],
      "end_point": [
        1422,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tLDT(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        1424,
        0
      ],
      "end_point": [
        1432,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        1434,
        0
      ],
      "end_point": [
        1446,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tLDS(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        1448,
        0
      ],
      "end_point": [
        1456,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        1458,
        0
      ],
      "end_point": [
        1470,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tLDT(r0, r1, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        1472,
        0
      ],
      "end_point": [
        1484,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tSTS(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        1486,
        0
      ],
      "end_point": [
        1498,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tSTT(r0, _R31_REGNO, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        1500,
        0
      ],
      "end_point": [
        1508,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        1510,
        0
      ],
      "end_point": [
        1522,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tSTS(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_f(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        1524,
        0
      ],
      "end_point": [
        1532,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        1534,
        0
      ],
      "end_point": [
        1546,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\treg;\n    if (_s16_p(i0))\n\tSTT(r1, r0, _u16(i0));\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_d(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1548,
        0
      ],
      "end_point": [
        1586,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tge_code;\n    jit_int32_t\t\trg0, rg1, rg2;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n    rg2 = jit_get_reg(jit_class_gpr);\n\n    /* Load the base in first temporary. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, base));\n\n    /* Load the offset in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, offset));\n\n    /* Remember absolute offset */\n    movr(rn(rg2), rn(rg1));\n\n    /* Jump if overflowed register saved area. */\n    ge_code = bgei(_jit->pc.w, rn(rg1), 48);\n    /* Otherwise load from the float registers save area. */\n    subi(rn(rg1), rn(rg1), 48);\n    patch_at(ge_code, _jit->pc.w);\n\n    /* Load the argument */\n    ldxr_d(r0, rn(rg0), rn(rg1));\n\n    /* No longer needed. */\n    jit_unget_reg(rg1);\n    jit_unget_reg(rg0);\n\n    /* Update offset. */\n    addi(rn(rg2), rn(rg2), 8);\n    stxi(offsetof(jit_va_list_t, offset), r1, rn(rg2));\n    jit_unget_reg(rg2);\n}",
      "lines": 39,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_alpha-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_alpha.c": {
    "jit_get_cpu": {
      "start_point": [
        142,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        147,
        0
      ],
      "end_point": [
        152,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n    jit_carry = _NOREG;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.alen = 0;\n    /* float conversion */\n    _jitc->function->self.aoff = -8;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 41,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        212,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function != NULL);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        233,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -8);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        235,
        0
      ],
      "end_point": [
        245,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function != NULL);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        257,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        266,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        268,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (u != JIT_FRET)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        280,
        0
      ],
      "end_point": [
        287,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        289,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (u != JIT_FRET)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        301,
        0
      ],
      "end_point": [
        308,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        310,
        0
      ],
      "end_point": [
        317,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function != NULL);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        319,
        0
      ],
      "end_point": [
        326,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_f_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        328,
        0
      ],
      "end_point": [
        347,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(jit_code_ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t/* Allocate va_list like object in the stack */\n\t_jitc->function->vaoff = jit_allocai(sizeof(jit_va_list_t));\n\t_jitc->function->vagp = _jitc->function->self.argi;\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        349,
        0
      ],
      "end_point": [
        365,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function != NULL);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += 8;\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        367,
        0
      ],
      "end_point": [
        383,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function != NULL);\n    if (jit_arg_f_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += 8;\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        385,
        0
      ],
      "end_point": [
        401,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function != NULL);\n    if (jit_arg_f_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += 8;\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        403,
        0
      ],
      "end_point": [
        413,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_c(u, _FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        415,
        0
      ],
      "end_point": [
        425,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_uc(u, _FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        427,
        0
      ],
      "end_point": [
        437,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_s(u, _FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        439,
        0
      ],
      "end_point": [
        449,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_us(u, _FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        451,
        0
      ],
      "end_point": [
        461,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_i(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_i(u, _FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        463,
        0
      ],
      "end_point": [
        473,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_ui(u, _FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        475,
        0
      ],
      "end_point": [
        485,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_l(u, _FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        487,
        0
      ],
      "end_point": [
        497,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(_A0 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, _FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        499,
        0
      ],
      "end_point": [
        514,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(_A0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, _FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        516,
        0
      ],
      "end_point": [
        526,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(u, _F16 - v->u.w);\n    else\n\tjit_ldxi_f(u, _FP, v->u.w + F_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        528,
        0
      ],
      "end_point": [
        538,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(_F16 - v->u.w, u);\n    else\n\tjit_stxi_f(v->u.w, _FP, u + F_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        540,
        0
      ],
      "end_point": [
        555,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_f(_F16 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, _FP, regno + F_DISP);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        557,
        0
      ],
      "end_point": [
        567,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, _F16 - v->u.w);\n    else\n\tjit_ldxi_d(u, _FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        569,
        0
      ],
      "end_point": [
        579,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(_F16 - v->u.w, u);\n    else\n\tjit_stxi_d(v->u.w, _FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        581,
        0
      ],
      "end_point": [
        596,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_d(_F16 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, _FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        598,
        0
      ],
      "end_point": [
        613,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += 8;\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        615,
        0
      ],
      "end_point": [
        634,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_int64_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size, JIT_SP, regno);\n\t_jitc->function->call.size += 8;\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        636,
        0
      ],
      "end_point": [
        651,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_f(_F16 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + F_DISP, JIT_SP, u);\n\t_jitc->function->call.size += 8;\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        653,
        0
      ],
      "end_point": [
        672,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_f(_F16 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size + F_DISP, JIT_SP, regno);\n\t_jitc->function->call.size += 8;\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        674,
        0
      ],
      "end_point": [
        689,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_d(_F16 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += 8;\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        710,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_d(_F16 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, regno);\n\t_jitc->function->call.size += 8;\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        712,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tif (spec & jit_class_gpr) {\n\t    regno = _A0 - regno;\n\t    if (regno >= 0 && regno < node->v.w)\n\t\treturn (1);\n\t}\n\telse if (spec & jit_class_fpr) {\n\t    regno = _F16 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n\n    return (0);\n}",
      "lines": 21,
      "depth": 14,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        734,
        0
      ],
      "end_point": [
        747,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = call->w.w = _jitc->function->self.argi;\n    _jitc->function->call.argi = _jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        749,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function != NULL);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_calli(i0);\n    call->v.w = call->w.w = _jitc->function->self.argf;\n    _jitc->function->call.argi = _jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (call);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        765,
        0
      ],
      "end_point": [
        771,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        773,
        0
      ],
      "end_point": [
        779,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        781,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        795,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        797,
        0
      ],
      "end_point": [
        803,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    jit_extr_i(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        805,
        0
      ],
      "end_point": [
        811,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_ui, r0);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        813,
        0
      ],
      "end_point": [
        820,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        829,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        838,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        840,
        0
      ],
      "end_point": [
        1480,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_word_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_uint8_t\t*data;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t const_offset;\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.const_offset = undo.patch_offset = 0;\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n\t\tcase_rr(hton, _ul);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (!(temp->flag & jit_flag_patch)) {\n\t\t\tword = calli_p(temp->u.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t    else\n\t\t\tcalli(temp->u.w);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\t\tcase jit_code_getarg_ui:\n\t    case jit_code_getarg_l:\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tif (jit_carry != _NOREG) {\n\t    switch (node->code) {\n\t\tcase jit_code_note:\n\t\tcase jit_code_addcr:\t\tcase jit_code_addci:\n\t\tcase jit_code_addxr:\t\tcase jit_code_addxi:\n\t\tcase jit_code_subcr:\t\tcase jit_code_subci:\n\t\tcase jit_code_subxr:\t\tcase jit_code_subxi:\n\t\t    break;\n\t\tdefault:\n\t\t    jit_unget_reg(jit_carry);\n\t\t    jit_carry = _NOREG;\n\t\t    break;\n\t    }\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == (jit_carry == _NOREG) ? 0 : (1 << jit_carry));\n\tassert(_jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrrw\n#undef case_rrrr\n#undef case_rrf\n#undef case_rrw\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 641,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1487,
        0
      ],
      "end_point": [
        1490,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n}",
      "lines": 4,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1492,
        0
      ],
      "end_point": [
        1496,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1498,
        0
      ],
      "end_point": [
        1502,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1504,
        0
      ],
      "end_point": [
        1508,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1510,
        0
      ],
      "end_point": [
        1514,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1516,
        0
      ],
      "end_point": [
        1536,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\t flag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n     assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_arm-cpu.c": {
    "encode_arm_immediate": {
      "start_point": [
        1131,
        0
      ],
      "end_point": [
        1141,
        1
      ],
      "content": "static int\nencode_arm_immediate(unsigned int v)\n{\n    unsigned int\ta, i;\n\n    for (i = 0; i < 32; i += 2)\n\tif ((a = rotate_left(v, i)) <= 0xff)\n\t    return (a | (i << 7));\n\n    return (-1);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "encode_thumb_immediate": {
      "start_point": [
        1143,
        0
      ],
      "end_point": [
        1175,
        1
      ],
      "content": "static int\nencode_thumb_immediate(unsigned int v)\n{\n    int\t\t\ti;\n    unsigned int\tm;\n    unsigned int\tn;\n    /* 00000000 00000000 00000000 abcdefgh */\n    if ((v & 0xff) == v)\n\treturn (v);\n    /* 00000000 abcdefgh 00000000 abcdefgh */\n    if ((v & 0xff00ff) == v && ((v & 0xff0000) >> 16) == (v & 0xff))\n\treturn ((v & 0xff) | (1 << 12));\n    /* abcdefgh 00000000 abcdefgh 00000000 */\n    if (((v & 0xffff0000) >> 16) == (v & 0xffff) && (v & 0xff) == 0)\n\treturn ((v & 0x000000ff) | (2 << 12));\n    /* abcdefgh abcdefgh abcdefgh abcdefgh */\n    if ( (v &    0xff)        == ((v &     0xff00) >>  8) &&\n\t((v &   0xff00) >> 8) == ((v &   0xff0000) >> 16) &&\n\t((v & 0xff0000) << 8) ==  (v & 0xff000000))\n\treturn ((v & 0xff) | (3 << 12));\n    /* 1bcdefgh << 24 ... 1bcdefgh << 1 */\n    for (i = 8, m = 0xff000000, n = 0x80000000;\n\t i < 23; i++, m >>= 1,  n >>= 1) {\n\tif ((v & m) == v && (v & n)) {\n\t    v >>= 32 - i;\n\t    if (!(i & 1))\n\t\tv &= 0x7f;\n\t    i >>= 1;\n\t    return (((i & 7) << 12) | ((i & 8) << 23) | v);\n\t}\n    }\n    return (-1);\n}",
      "lines": 33,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "encode_thumb_word_immediate": {
      "start_point": [
        1177,
        0
      ],
      "end_point": [
        1183,
        1
      ],
      "content": "static int\nencode_thumb_word_immediate(unsigned int v)\n{\n    if ((v & 0xfffff000) == 0)\n\treturn (((v & 0x800) << 15) | ((v & 0x700) << 4) | (v & 0xff));\n    return (-1);\n}",
      "lines": 7,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "encode_thumb_jump": {
      "start_point": [
        1185,
        0
      ],
      "end_point": [
        1198,
        1
      ],
      "content": "static int\nencode_thumb_jump(int v)\n{\n    int\t\ts, i1, i2, j1, j2;\n    if (v >= (int)-0x800000 && v <= 0x7fffff) {\n\ts  = !!(v & 0x800000);\n\ti1 = !!(v & 0x400000);\n\ti2 = !!(v & 0x200000);\n\tj1 = s ? i1 : !i1;\n\tj2 = s ? i2 : !i2;\n\treturn ((s<<26)|((v&0x1ff800)<<5)|(j1<<13)|(j2<<11)|(v&0x7ff));\n    }\n    return (-1);\n}",
      "lines": 14,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "encode_thumb_cc_jump": {
      "start_point": [
        1200,
        0
      ],
      "end_point": [
        1211,
        1
      ],
      "content": "static int\nencode_thumb_cc_jump(int v)\n{\n    int\t\ts, j1, j2;\n    if (v >= (int)-0x80000 && v <= 0x7ffff) {\n\ts  = !!(v & 0x80000);\n\tj1 = !!(v & 0x20000);\n\tj2 = !!(v & 0x40000);\n\treturn ((s<<26)|((v&0x1f800)<<5)|(j1<<13)|(j2<<11)|(v&0x7ff));\n    }\n    return (-1);\n}",
      "lines": 12,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "encode_thumb_shift": {
      "start_point": [
        1213,
        0
      ],
      "end_point": [
        1224,
        1
      ],
      "content": "static int\nencode_thumb_shift(int v, int type)\n{\n    switch (type) {\n\tcase ARM_ASR:\n\tcase ARM_LSL:\n\tcase ARM_LSR:\t\ttype >>= 1;\tbreak;\n\tdefault:\t\tassert(!\"handled shift\");\n    }\n    assert(v >= 0 && v <= 31);\n    return (((v & 0x1c) << 10) | ((v & 3) << 6) | type);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_tcit": {
      "start_point": [
        1226,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "static void\n_tcit(jit_state_t *_jit, unsigned int tc, int it)\n{\n    int\t\tc;\n    int\t\tm;\n    c = (tc >> 28) & 1;\n    assert(!(tc & 0xfffffff) && tc != ARM_CC_NV);\n    switch (it) {\n\tcase THUMB2_IT:\t\tm =   1<<3; \t\t\tbreak;\n\tcase THUMB2_ITT:\tm =  (c<<3)| (1<<2);\t\tbreak;\n\tcase THUMB2_ITE:\tm = (!c<<3)| (1<<2);\t\tbreak;\n\tcase THUMB2_ITTT:\tm =  (c<<3)| (c<<2)| (1<<1);\tbreak;\n\tcase THUMB2_ITET:\tm = (!c<<3)| (c<<2)| (1<<1);\tbreak;\n\tcase THUMB2_ITTE:\tm =  (c<<3)|(!c<<2)| (1<<1);\tbreak;\n\tcase THUMB2_ITEE:\tm = (!c<<3)|(!c<<2)| (1<<1);\tbreak;\n\tcase THUMB2_ITTTT:\tm =  (c<<3)| (c<<2)| (c<<1)|1;\tbreak;\n\tcase THUMB2_ITETT:\tm = (!c<<3)| (c<<2)| (c<<1)|1;\tbreak;\n\tcase THUMB2_ITTET:\tm =  (c<<3)|(!c<<2)| (c<<1)|1;\tbreak;\n\tcase THUMB2_ITEET:\tm = (!c<<3)|(!c<<2)| (c<<1)|1;\tbreak;\n\tcase THUMB2_ITTTE:\tm =  (c<<3)| (c<<2)|(!c<<1)|1;\tbreak;\n\tcase THUMB2_ITETE:\tm = (!c<<3)| (c<<2)|(!c<<1)|1;\tbreak;\n\tcase THUMB2_ITTEE:\tm =  (c<<3)|(!c<<2)|(!c<<1)|1;\tbreak;\n\tcase THUMB2_ITEEE:\tm = (!c<<3)|(!c<<2)|(!c<<1)|1;\tbreak;\n\tdefault:\t\tabort();\n    }\n    assert(m && (tc != ARM_CC_AL || !(m & (m - 1))));\n    is(0xbf00 | (tc >> 24) | m);\n}",
      "lines": 28,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corrr": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1261,
        1
      ],
      "content": "static void\n_corrr(jit_state_t *_jit, int cc, int o, int rn, int rd, int rm)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00fff0f));\n    ii(cc|o|(_u4(rn)<<16)|(_u4(rd)<<12)|_u4(rm));\n}",
      "lines": 7,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corri": {
      "start_point": [
        1263,
        0
      ],
      "end_point": [
        1270,
        1
      ],
      "content": "static void\n_corri(jit_state_t *_jit, int cc, int o, int rn, int rd, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00fffff));\n    assert(!(im & 0xfffff000));\n    ii(cc|o|(_u4(rn)<<16)|(_u4(rd)<<12)|_u12(im));\n}",
      "lines": 8,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corri8": {
      "start_point": [
        1272,
        0
      ],
      "end_point": [
        1279,
        1
      ],
      "content": "static void\n_corri8(jit_state_t *_jit, int cc, int o, int rn, int rt, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00fff0f));\n    assert(!(im & 0xffffff00));\n    ii(cc|o|(_u4(rn)<<16)|(_u4(rt)<<12)|((im&0xf0)<<4)|(im&0x0f));\n}",
      "lines": 8,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_coriw": {
      "start_point": [
        1281,
        0
      ],
      "end_point": [
        1288,
        1
      ],
      "content": "static void\n_coriw(jit_state_t *_jit, int cc, int o, int rd, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00fffff));\n    assert(!(im & 0xffff0000));\n    ii(cc|o|((im&0xf000)<<4)|(_u4(rd)<<12)|(im&0xfff));\n}",
      "lines": 8,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torrr": {
      "start_point": [
        1290,
        0
      ],
      "end_point": [
        1297,
        1
      ],
      "content": "static void\n_torrr(jit_state_t *_jit, int o, int rn, int rd, int rm)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0xf0f0f));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rd)<<8)|_u4(rm);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 8,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torrrs": {
      "start_point": [
        1299,
        0
      ],
      "end_point": [
        1307,
        1
      ],
      "content": "static void\n_torrrs(jit_state_t *_jit, int o, int rn, int rd, int rm, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o  & 0x000f0f0f));\n    assert(!(im & 0xffff8f0f));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rd)<<8)|im|_u4(rm);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torxr": {
      "start_point": [
        1309,
        0
      ],
      "end_point": [
        1316,
        1
      ],
      "content": "static void\n_torxr(jit_state_t *_jit, int o, int rn, int rt, int rm)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0xf0f0f));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rt)<<12)|_u4(rm);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 8,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torrrr": {
      "start_point": [
        1318,
        0
      ],
      "end_point": [
        1325,
        1
      ],
      "content": "static void\n_torrrr(jit_state_t *_jit, int o, int rn, int rl, int rh, int rm)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0x000fff0f));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rl)<<12)|(_u4(rh)<<8)|_u4(rm);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 8,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torrri8": {
      "start_point": [
        1327,
        0
      ],
      "end_point": [
        1335,
        1
      ],
      "content": "static void\n_torrri8(jit_state_t *_jit, int o, int rn, int rt, int rt2, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o  & 0x000fffff));\n    assert(!(im & 0xffffff00));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rt)<<12)|(_u4(rt2)<<8)|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torri": {
      "start_point": [
        1337,
        0
      ],
      "end_point": [
        1345,
        1
      ],
      "content": "static void\n_torri(jit_state_t *_jit, int o, int rn, int rd, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o  & 0x0c0f7fff));\n    assert(!(im & 0xfbff8f00));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rd)<<8)|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torri8": {
      "start_point": [
        1347,
        0
      ],
      "end_point": [
        1355,
        1
      ],
      "content": "static void\n_torri8(jit_state_t *_jit, int o, int rn, int rt, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o  & 0x000ff0ff));\n    assert(!(im & 0xffffff00));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rt)<<12)|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torri12": {
      "start_point": [
        1357,
        0
      ],
      "end_point": [
        1365,
        1
      ],
      "content": "static void\n_torri12(jit_state_t *_jit, int o, int rn, int rt, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o  & 0x000fffff));\n    assert(!(im & 0xfffff000));\n    thumb.i = o|(_u4(rn)<<16)|(_u4(rt)<<12)|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_tshift": {
      "start_point": [
        1367,
        0
      ],
      "end_point": [
        1375,
        1
      ],
      "content": "static void\n_tshift(jit_state_t *_jit, int o, int rd, int rm, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0x7fcf));\n    assert(im >= 0 && im < 32);\n    thumb.i = o|((im&0x1c)<<10)|(_u4(rd)<<8)|((im&3)<<6)|_u4(rm);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_toriw": {
      "start_point": [
        1377,
        0
      ],
      "end_point": [
        1384,
        1
      ],
      "content": "static void\n_toriw(jit_state_t *_jit, int o, int rd, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(im & 0xffff0000));\n    thumb.i = o|((im&0xf000)<<4)|((im&0x800)<<15)|((im&0x700)<<4)|(_u4(rd)<<8)|(im&0xff);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 8,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_tc8": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1393,
        1
      ],
      "content": "static void\n_tc8(jit_state_t *_jit, int cc, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(cc != ARM_CC_AL && cc != ARM_CC_NV);\n    assert(im >= -128 && im <= 127);\n    is(THUMB_CC_B|(cc>>20)|(im&0xff));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_t11": {
      "start_point": [
        1395,
        0
      ],
      "end_point": [
        1400,
        1
      ],
      "content": "static void\n_t11(jit_state_t *_jit, int im)\n{\n    assert(!(im & 0xfffff800));\n    is(THUMB_B|im);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_tcb": {
      "start_point": [
        1402,
        0
      ],
      "end_point": [
        1412,
        1
      ],
      "content": "static void\n_tcb(jit_state_t *_jit, int cc, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0xfffffff));\n    assert(cc != ARM_CC_AL && cc != ARM_CC_NV);\n    cc = ((jit_uint32_t)cc) >> 6;\n    assert(!(im & (THUMB2_CC_B|cc)));\n    thumb.i = THUMB2_CC_B|cc|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_blxi": {
      "start_point": [
        1414,
        0
      ],
      "end_point": [
        1419,
        1
      ],
      "content": "static void\n_blxi(jit_state_t *_jit, int im)\n{\n    assert(!(im & 0xfe000000));\n    ii(ARM_BLXI|im);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_tb": {
      "start_point": [
        1421,
        0
      ],
      "end_point": [
        1429,
        1
      ],
      "content": "static void\n_tb(jit_state_t *_jit, int o, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0x07ff2fff));\n    assert(!(o & im));\n    thumb.i = o|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corrrr": {
      "start_point": [
        1431,
        0
      ],
      "end_point": [
        1437,
        1
      ],
      "content": "static void\n_corrrr(jit_state_t *_jit, int cc, int o, int rh, int rl, int rm, int rn)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o & 0xf00fff0f));\n    ii(cc|o|(_u4(rh)<<16)|(_u4(rl)<<12)|(_u4(rm)<<8)|_u4(rn));\n}",
      "lines": 7,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corrrs": {
      "start_point": [
        1439,
        0
      ],
      "end_point": [
        1445,
        1
      ],
      "content": "static void\n_corrrs(jit_state_t *_jit, int cc, int o, int rn, int rd, int rm, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000ff8f));\n    ii(cc|o|(_u4(rd)<<12)|(_u4(rn)<<16)|(im<<7)|_u4(rm));\n}",
      "lines": 7,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cshift": {
      "start_point": [
        1447,
        0
      ],
      "end_point": [
        1454,
        1
      ],
      "content": "static void\n_cshift(jit_state_t *_jit, int cc, int o, int rd, int rm, int rn, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xffe0ff8f));\n    assert(((_u4(rm)<<8)&(im<<7)) == 0);\n    ii(cc|ARM_SHIFT|o|(_u4(rd)<<12)|(_u4(rm)<<8)|(im<<7)|_u4(rn));\n}",
      "lines": 8,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cb": {
      "start_point": [
        1456,
        0
      ],
      "end_point": [
        1462,
        1
      ],
      "content": "static void\n_cb(jit_state_t *_jit, int cc, int o, int im)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf0ffffff));\n    ii(cc|o|_u24(im));\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cbx": {
      "start_point": [
        1464,
        0
      ],
      "end_point": [
        1470,
        1
      ],
      "content": "static void\n_cbx(jit_state_t *_jit, int cc, int o, int rm)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000000f));\n    ii(cc|o|_u4(rm));\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_corl": {
      "start_point": [
        1472,
        0
      ],
      "end_point": [
        1478,
        1
      ],
      "content": "static void\n_corl(jit_state_t *_jit, int cc, int o, int r0, int i0)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00fffff));\n    ii(cc|o|(_u4(r0)<<16)|_u16(i0));\n}",
      "lines": 7,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_c6orr": {
      "start_point": [
        1480,
        0
      ],
      "end_point": [
        1486,
        1
      ],
      "content": "static void\n_c6orr(jit_state_t *_jit, int cc, int o, int rd, int rm)\n{\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    ii(cc|o|(_u4(rd)<<12)|_u4(rm));\n}",
      "lines": 7,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_tpp": {
      "start_point": [
        1488,
        0
      ],
      "end_point": [
        1498,
        1
      ],
      "content": "static void\n_tpp(jit_state_t *_jit, int o, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0x0000ffff));\n    if (o == THUMB2_PUSH)\n\tassert(!(im & 0x8000));\n    assert(__builtin_popcount(im & 0x1fff) > 1);\n    thumb.i = o|im;\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_torl": {
      "start_point": [
        1500,
        0
      ],
      "end_point": [
        1509,
        1
      ],
      "content": "static void\n_torl(jit_state_t *_jit, int o, int rn, int im)\n{\n    jit_thumb_t\tthumb;\n    assert(!(o & 0xf1fff));\n    assert(rn != _R15 || !im || ((o & 0xc000) == 0xc000));\n    assert(!(o & THUMB2_LDM_W) || !(im & (1 << rn)));\n    thumb.i = o | (_u4(rn)<<16)|_u13(im);\n    iss(thumb.s[0], thumb.s[1]);\n}",
      "lines": 10,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        1511,
        0
      ],
      "end_point": [
        1523,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    if (jit_thumb_p()) {\n\tfor (; i0 > 0; i0 -= 2)\n\t    T1_NOP();\n    }\n    else {\n\tfor (; i0 > 0; i0 -= 4)\n\t    NOP();\n    }\n    assert(i0 == 0);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        1525,
        0
      ],
      "end_point": [
        1534,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1) {\n\tif (jit_thumb_p())\n\t    T1_MOV(r0, r1);\n\telse\n\t    MOV(r0, r1);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        1536,
        0
      ],
      "end_point": [
        1568,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    int\t\t\ti;\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && r0 < 8 && !(i0 & 0xffffff80))\n\t    T1_MOVI(r0, i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_MOVI(r0, i);\n\telse if ((i = encode_thumb_immediate(~i0)) != -1)\n\t    T2_MVNI(r0, i);\n\telse {\n\t    T2_MOVWI(r0, (jit_uint16_t)i0);\n\t    if (i0 & 0xffff0000)\n\t\tT2_MOVTI(r0, (jit_uint16_t)((unsigned)i0 >> 16));\n\t}\n    }\n    else {\n\tif (jit_armv6_p() && !(i0 & 0xffff0000))\n\t    MOVWI(r0, i0);\n\telse if ((i = encode_arm_immediate(i0)) != -1)\n\t    MOVI(r0, i);\n\telse if ((i = encode_arm_immediate(~i0)) != -1)\n\t    MVNI(r0, i);\n\telse if (jit_armv6_p()) {\n\t    MOVWI(r0, (jit_uint16_t)(i0));\n\t    if ((i0 & 0xffff0000))\n\t\tMOVTI(r0, (jit_uint16_t)((unsigned)i0 >> 16));\n\t}\n\telse\n\t    load_const(0, r0, i0);\n    }\n}",
      "lines": 33,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        1570,
        0
      ],
      "end_point": [
        1582,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_MOVWI(r0, (jit_uint16_t)(i0));\n\tT2_MOVTI(r0, (jit_uint16_t)((unsigned)i0 >> 16));\n    }\n    else\n\tload_const(1, r0, 0);\n    return (w);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_comr": {
      "start_point": [
        1584,
        0
      ],
      "end_point": [
        1595,
        1
      ],
      "content": "static void\n_comr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8)\n\t    T1_NOT(r0, r1);\n\telse\n\t    T2_NOT(r0, r1);\n    }\n    else\n\tNOT(r0, r1);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_negr": {
      "start_point": [
        1597,
        0
      ],
      "end_point": [
        1608,
        1
      ],
      "content": "static void\n_negr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8)\n\t    T1_RSBI(r0, r1);\n\telse\n\t    T2_RSBI(r0, r1, 0);\n    }\n    else\n\tRSBI(r0, r1, 0);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr": {
      "start_point": [
        1610,
        0
      ],
      "end_point": [
        1623,
        1
      ],
      "content": "static void\n_addr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8)\n\t    T1_ADD(r0, r1, r2);\n\telse if (r0 == r1 || r0 == r2)\n\t    T1_ADDX(r0, r0 == r1 ? r2 : r1);\n\telse\n\t    T2_ADD(r0, r1, r2);\n    }\n    else\n\tADD(r0, r1, r2);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        1625,
        0
      ],
      "end_point": [
        1670,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8 && !(i0 & ~7))\n\t    T1_ADDI3(r0, r1, i0);\n\telse if (!jit_no_set_flags() && (r0|r1) < 8 && !(-i0 & ~7))\n\t    T1_SUBI3(r0, r1, -i0);\n\telse if (!jit_no_set_flags() && r0 < 8 && r0 == r1 && !(i0 & ~0xff))\n\t    T1_ADDI8(r0, i0);\n\telse if (!jit_no_set_flags() && r0 < 8 && r0 == r1 && !(-i0 & ~0xff))\n\t    T1_SUBI8(r0, -i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_ADDI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_SUBI(r0, r1, i);\n\telse if ((i = encode_thumb_word_immediate(i0)) != -1)\n\t    T2_ADDWI(r0, r1, i);\n\telse if ((i = encode_thumb_word_immediate(-i0)) != -1)\n\t    T2_SUBWI(r0, r1, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_ADD(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    ADDI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    SUBI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    ADD(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    ADD(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 46,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        1672,
        0
      ],
      "end_point": [
        1684,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\t/* thumb auto set carry if not inside IT block */\n\tif ((r0|r1|r2) < 8)\n\t    T1_ADD(r0, r1, r2);\n\telse\n\t    T2_ADDS(r0, r1, r2);\n    }\n    else\n\tADDS(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        1686,
        0
      ],
      "end_point": [
        1727,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && !(i0 & ~7))\n\t    T1_ADDI3(r0, r1, i0);\n\telse if ((r0|r1) < 8 && !(-i0 & ~7))\n\t    T1_SUBI3(r0, r1, -i0);\n\telse if (r0 < 8 && r0 == r1 && !(i0 & ~0xff))\n\t    T1_ADDI8(r0, i0);\n\telse if (r0 < 8 && r0 == r1 && !(-i0 & ~0xff))\n\t    T1_SUBI8(r0, -i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_ADDSI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_SUBSI(r0, r1, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_ADDS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    ADDSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    SUBSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    ADDS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    ADDS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 42,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        1729,
        0
      ],
      "end_point": [
        1742,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    /* keep setting carry because don't know last ADC */\n    if (jit_thumb_p()) {\n\t/* thumb auto set carry if not inside IT block */\n\tif ((r0|r1|r2) < 8 && (r0 == r1 || r0 == r2))\n\t    T1_ADC(r0, r0 == r1 ? r2 : r1);\n\telse\n\t    T2_ADCS(r0, r1, r2);\n    }\n    else\n\tADCS(r0, r1, r2);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        1744,
        0
      ],
      "end_point": [
        1785,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    int\t\t\tno_set_flags;\n    if (jit_thumb_p()) {\n\tno_set_flags = jit_no_set_flags();\n\tjit_no_set_flags() = 1;\n\tif ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_ADCSI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_SBCSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    T2_ADCS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_ADCS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tjit_no_set_flags() = no_set_flags;\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    ADCSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    SBCSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    ADCS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    ADCS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 42,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subr": {
      "start_point": [
        1787,
        0
      ],
      "end_point": [
        1798,
        1
      ],
      "content": "static void\n_subr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8)\n\t    T1_SUB(r0, r1, r2);\n\telse\n\t    T2_SUB(r0, r1, r2);\n    }\n    else\n\tSUB(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        1800,
        0
      ],
      "end_point": [
        1845,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8 && !(i0 & ~7))\n\t    T1_SUBI3(r0, r1, i0);\n\telse if (!jit_no_set_flags() && (r0|r1) < 8 && !(-i0 & ~7))\n\t    T1_ADDI3(r0, r1, -i0);\n\telse if (!jit_no_set_flags() && r0 < 8 && r0 == r1 && !(i0 & ~0xff))\n\t    T1_SUBI8(r0, i0);\n\telse if (!jit_no_set_flags() && r0 < 8 && r0 == r1 && !(-i0 & ~0xff))\n\t    T1_ADDI8(r0, -i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_SUBI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_ADDI(r0, r1, i);\n\telse if ((i = encode_thumb_word_immediate(i0)) != -1)\n\t    T2_SUBWI(r0, r1, i);\n\telse if ((i = encode_thumb_word_immediate(-i0)) != -1)\n\t    T2_ADDWI(r0, r1, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_SUB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    SUBI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    ADDI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    SUB(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    SUB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 46,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        1847,
        0
      ],
      "end_point": [
        1859,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\t/* thumb auto set carry if not inside IT block */\n\tif ((r0|r1|r2) < 8)\n\t    T1_SUB(r0, r1, r2);\n\telse\n\t    T2_SUBS(r0, r1, r2);\n    }\n    else\n\tSUBS(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        1861,
        0
      ],
      "end_point": [
        1902,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && !(i0 & ~7))\n\t    T1_SUBI3(r0, r1, i0);\n\telse if ((r0|r1) < 8 && !(-i0 & ~7))\n\t    T1_ADDI3(r0, r1, -i0);\n\telse if (r0 < 8 && r0 == r1 && !(i0 & ~0xff))\n\t    T1_SUBI8(r0, i0);\n\telse if (r0 < 8 && r0 == r1 && !(-i0 & ~0xff))\n\t    T1_ADDI8(r0, -i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_SUBSI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_ADDSI(r0, r1, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_SUBS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    SUBSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    ADDSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    SUBS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    SUBS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 42,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        1904,
        0
      ],
      "end_point": [
        1917,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    /* keep setting carry because don't know last SBC */\n    if (jit_thumb_p()) {\n\t/* thumb auto set carry if not inside IT block */\n\tif ((r0|r1|r2) < 8 && r0 == r1)\n\t    T1_SBC(r0, r2);\n\telse\n\t    T2_SBCS(r0, r1, r2);\n    }\n    else\n\tSBCS(r0, r1, r2);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        1919,
        0
      ],
      "end_point": [
        1960,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    int\t\t\tno_set_flags;\n    if (jit_thumb_p()) {\n\tno_set_flags = jit_no_set_flags();\n\tjit_no_set_flags() = 1;\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    T2_SBCSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    T2_ADCSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    T2_SBCS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    SBCS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tjit_no_set_flags() = no_set_flags;\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    SBCSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    ADCSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    SBCS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    SBCS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 42,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        1962,
        0
      ],
      "end_point": [
        1967,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        1969,
        0
      ],
      "end_point": [
        1995,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && r0 == r2 && (r0|r1) < 8)\n\t    T1_MUL(r0, r1);\n\telse if (!jit_no_set_flags() && r0 == r1 && (r0|r2) < 8)\n\t    T1_MUL(r0, r2);\n\telse\n\t    T2_MUL(r0, r1, r2);\n    }\n    else {\n\tif (r0 == r1 && !jit_armv6_p()) {\n\t    if (r0 != r2)\n\t\tMUL(r0, r2, r1);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tMOV(rn(reg), r1);\n\t\tMUL(r0, rn(reg), r2);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse\n\t    MUL(r0, r1, r2);\n    }\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        1997,
        0
      ],
      "end_point": [
        2005,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    mulr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        2007,
        0
      ],
      "end_point": [
        2058,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (r2 == r3) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r2);\n\t    if (sign)\n\t\tT2_SMULL(r0, r1, rn(reg), r2);\n\t    else\n\t\tT2_UMULL(r0, r1, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n\telse if (r0 != r2 && r1 != r2) {\n\t    if (sign)\n\t\tT2_SMULL(r0, r1, r2, r3);\n\t    else\n\t\tT2_UMULL(r0, r1, r2, r3);\n\t}\n\telse {\n\t    if (sign)\n\t\tT2_SMULL(r0, r1, r3, r2);\n\t    else\n\t\tT2_UMULL(r0, r1, r3, r2);\n\t}\n    }\n    else {\n\tif (r2 == r3) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r2);\n\t    if (sign)\n\t\tSMULL(r0, r1, rn(reg), r2);\n\t    else\n\t\tUMULL(r0, r1, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n\telse if (r0 != r2 && r1 != r2) {\n\t    if (sign)\n\t\tSMULL(r0, r1, r2, r3);\n\t    else\n\t\tUMULL(r0, r1, r2, r3);\n\t}\n\telse {\n\t    if (sign)\n\t\tSMULL(r0, r1, r3, r2);\n\t    else\n\t\tUMULL(r0, r1, r3, r2);\n\t}\n    }\n}",
      "lines": 52,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        2060,
        0
      ],
      "end_point": [
        2069,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqmulr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divrem": {
      "start_point": [
        2071,
        0
      ],
      "end_point": [
        2100,
        1
      ],
      "content": "static void\n_divrem(jit_state_t *_jit, int div, int sign,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\td;\n    jit_word_t\t\tw;\n    jit_get_reg_args();\n    movr(_R0_REGNO, r1);\n    movr(_R1_REGNO, r2);\n    if (sign)\t\t\tw = (jit_word_t)__aeabi_idivmod;\n    else\t\t\tw = (jit_word_t)__aeabi_uidivmod;\n    if (!jit_exchange_p()) {\n\tif (jit_thumb_p())\td = ((w - _jit->pc.w) >> 1) - 2;\n\telse\t\t\td = ((w - _jit->pc.w) >> 2) - 2;\n\tif (_s24P(d)) {\n\t    if (jit_thumb_p())\tT2_BLI(encode_thumb_jump(d));\n\t    else\t\tBLI(d & 0x00ffffff);\n\t}\n\telse\t\t\tgoto fallback;\n    }\n    else {\n    fallback:\n\tmovi(_R2_REGNO, w);\n\tif (jit_thumb_p())\tT1_BLX(_R2_REGNO);\n\telse\t\t\tBLX(_R2_REGNO);\n    }\n    if (div)\t\t\tmovr(r0, _R0_REGNO);\n    else\t\t\tmovr(r0, _R1_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 30,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr": {
      "start_point": [
        2102,
        0
      ],
      "end_point": [
        2109,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_armv7r_p() && jit_thumb_p())\n\tT2_SDIV(r0, r1, r2);\n    else\n\tdivrem(1, 1, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        2111,
        0
      ],
      "end_point": [
        2119,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_u": {
      "start_point": [
        2121,
        0
      ],
      "end_point": [
        2128,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_armv7r_p() && jit_thumb_p())\n\tT2_UDIV(r0, r1, r2);\n    else\n\tdivrem(1, 0, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        2130,
        0
      ],
      "end_point": [
        2138,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        2140,
        0
      ],
      "end_point": [
        2169,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3,\tjit_bool_t sign)\n{\n    jit_word_t\t\td;\n    jit_word_t\t\tw;\n    jit_get_reg_args();\n    movr(_R0_REGNO, r2);\n    movr(_R1_REGNO, r3);\n    if (sign)\t\t\tw = (jit_word_t)__aeabi_idivmod;\n    else\t\t\tw = (jit_word_t)__aeabi_uidivmod;\n    if (!jit_exchange_p()) {\n\tif (jit_thumb_p())\td = ((w - _jit->pc.w) >> 1) - 2;\n\telse\t\t\td = ((w - _jit->pc.w) >> 2) - 2;\n\tif (_s24P(d)) {\n\t    if (jit_thumb_p())\tT2_BLI(encode_thumb_jump(d));\n\t    else\t\tBLI(d & 0x00ffffff);\n\t}\n\telse\t\t\tgoto fallback;\n    }\n    else {\n    fallback:\n\tmovi(_R2_REGNO, w);\n\tif (jit_thumb_p())\tT1_BLX(_R2_REGNO);\n\telse\t\t\tBLX(_R2_REGNO);\n    }\n    movr(r0, _R0_REGNO);\n    movr(r1, _R1_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 30,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        2171,
        0
      ],
      "end_point": [
        2180,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqdivr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        2182,
        0
      ],
      "end_point": [
        2186,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    divrem(0, 1, r0, r1, r2);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        2188,
        0
      ],
      "end_point": [
        2196,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        2198,
        0
      ],
      "end_point": [
        2202,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    divrem(0, 0, r0, r1, r2);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        2204,
        0
      ],
      "end_point": [
        2212,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1,rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andr": {
      "start_point": [
        2214,
        0
      ],
      "end_point": [
        2225,
        1
      ],
      "content": "static void\n_andr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && (r0 == r1 || r0 == r2))\n\t    T1_AND(r0, r0 == r1 ? r2 : r1);\n\telse\n\t    T2_AND(r0, r1, r2);\n    }\n    else\n\tAND(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        2227,
        0
      ],
      "end_point": [
        2264,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_ANDI(r0, r1, i);\n\telse if ((i = encode_thumb_immediate(~i0)) != -1)\n\t    T2_BICI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    T2_AND(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_AND(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    ANDI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(~i0)) != -1)\n\t    BICI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    AND(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    AND(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 38,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_orr": {
      "start_point": [
        2266,
        0
      ],
      "end_point": [
        2277,
        1
      ],
      "content": "static void\n_orr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && (r0 == r1 || r0 == r2))\n\t    T1_ORR(r0, r0 == r1 ? r2 : r1);\n\telse\n\t    T2_ORR(r0, r1, r2);\n    }\n    else\n\tORR(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        2279,
        0
      ],
      "end_point": [
        2312,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_ORRI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    T2_ORR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_ORR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    ORRI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    ORR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    ORR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 34,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xorr": {
      "start_point": [
        2314,
        0
      ],
      "end_point": [
        2325,
        1
      ],
      "content": "static void\n_xorr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && (r0 == r1 || r0 == r2))\n\t    T1_EOR(r0, r0 == r1 ? r2 : r1);\n\telse\n\t    T2_EOR(r0, r1, r2);\n    }\n    else\n\tEOR(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        2327,
        0
      ],
      "end_point": [
        2360,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_EORI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    T2_EOR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    T2_EOR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    EORI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    EOR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    EOR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 34,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshr": {
      "start_point": [
        2362,
        0
      ],
      "end_point": [
        2373,
        1
      ],
      "content": "static void\n_lshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && r0 == r1)\n\t    T1_LSL(r0, r2);\n\telse\n\t    T2_LSL(r0, r1, r2);\n    }\n    else\n\tLSL(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        2375,
        0
      ],
      "end_point": [
        2389,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 31);\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8)\n\t    T1_LSLI(r0, r1, i0);\n\telse\n\t    T2_LSLI(r0, r1, i0);\n    }\n    else\n\tLSLI(r0, r1, i0);\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr": {
      "start_point": [
        2391,
        0
      ],
      "end_point": [
        2402,
        1
      ],
      "content": "static void\n_rshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && r0 == r1)\n\t    T1_ASR(r0, r2);\n\telse\n\t    T2_ASR(r0, r1, r2);\n    }\n    else\n\tASR(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        2404,
        0
      ],
      "end_point": [
        2418,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 31);\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8)\n\t    T1_ASRI(r0, r1, i0);\n\telse\n\t    T2_ASRI(r0, r1, i0);\n    }\n    else\n\tASRI(r0, r1, i0);\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr_u": {
      "start_point": [
        2420,
        0
      ],
      "end_point": [
        2431,
        1
      ],
      "content": "static void\n_rshr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1|r2) < 8 && r0 == r1)\n\t    T1_LSR(r0, r2);\n\telse\n\t    T2_LSR(r0, r1, r2);\n    }\n    else\n\tLSR(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        2433,
        0
      ],
      "end_point": [
        2447,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 31);\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (jit_thumb_p()) {\n\tif (!jit_no_set_flags() && (r0|r1) < 8)\n\t    T1_LSRI(r0, r1, i0);\n\telse\n\t    T2_LSRI(r0, r1, i0);\n    }\n    else\n\tLSRI(r0, r1, i0);\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ccr": {
      "start_point": [
        2449,
        0
      ],
      "end_point": [
        2476,
        1
      ],
      "content": "static void\n_ccr(jit_state_t *_jit, int ct, int cf,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tassert((ct ^ cf) >> 28 == 1);\n\tif ((r1|r2) < 8)\n\t    T1_CMP(r1, r2);\n\telse if ((r1&r2) & 8)\n\t    T1_CMPX(r1, r2);\n\telse\n\t    T2_CMP(r1, r2);\n\tITE(ct);\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 1);\n\t    T1_MOVI(r0, 0);\n\t}\n\telse {\n\t    T2_MOVI(r0, 1);\n\t    T2_MOVI(r0, 0);\n\t}\n    }\n    else {\n\tCMP(r1, r2);\n\tCC_MOVI(ct, r0, 1);\n\tCC_MOVI(cf, r0, 0);\n    }\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cci": {
      "start_point": [
        2478,
        0
      ],
      "end_point": [
        2526,
        1
      ],
      "content": "static void\n_cci(jit_state_t *_jit, int ct, int cf,\n     jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (r1 < 7 && !(i0 & 0xffffff00))\n\t    T1_CMPI(r1, i0);\n\telse if ((i = encode_thumb_immediate(i0)) != -1)\n\t    T2_CMPI(r1, i);\n\telse if ((i = encode_thumb_immediate(-i0)) != -1)\n\t    T2_CMNI(r1, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    ccr(ct, cf, r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t    return;\n\t}\n\tITE(ct);\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 1);\n\t    T1_MOVI(r0, 0);\n\t}\n\telse {\n\t    T2_MOVI(r0, 1);\n\t    T2_MOVI(r0, 0);\n\t}\n    }\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    CMPI(r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    CMNI(r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    CMP(r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    CMP(r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tCC_MOVI(ct, r0, 1);\n\tCC_MOVI(cf, r0, 0);\n    }\n}",
      "lines": 49,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        2528,
        0
      ],
      "end_point": [
        2537,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p())\n\tccr(ARM_CC_NE, ARM_CC_EQ, r0, r1, r2);\n    else {\n\tSUBS(r0, r1, r2);\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        2539,
        0
      ],
      "end_point": [
        2563,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p())\n\tcci(ARM_CC_NE, ARM_CC_EQ, r0, r1, i0);\n    else {\n\tif ((i = encode_arm_immediate(i0)) != -1)\n\t    SUBSI(r0, r1, i);\n\telse if ((i = encode_arm_immediate(-i0)) != -1)\n\t    ADDSI(r0, r1, i);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    SUBS(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    SUBS(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n    }\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpr": {
      "start_point": [
        2565,
        0
      ],
      "end_point": [
        2572,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (jit_thumb_p())\n\tT1_MOV(_R15_REGNO, r0);\n    else\n\tMOV(_R15_REGNO, r0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        2574,
        0
      ],
      "end_point": [
        2606,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    w = _jit->pc.w;\n    /* if thumb and in thumb mode */\n    if (jit_thumb_p() && _jitc->thumb) {\n\td = ((i0 - w) >> 1) - 2;\n\tif (d >= -1024 && d <= 1023)\n\t    T1_B(d & 0x7ff);\n\telse if (_s24P(d))\n\t    T2_B(encode_thumb_jump(d));\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\t    movi(rn(reg), i0);\n\t    jmpr(rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\td = ((i0 - w) >> 2) - 2;\n\tif (_s24P(d))\n\t    B(d & 0x00ffffff);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\t    movi(rn(reg), i0);\n\t    jmpr(rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        2608,
        0
      ],
      "end_point": [
        2636,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0, jit_bool_t i1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    if (i1) {\n\t/* Assume jump is not longer than 23 bits if inside jit */\n\tw = _jit->pc.w;\n\t/* if thumb and in thumb mode */\n\tif (jit_thumb_p() && _jitc->thumb) {\n\t    d = ((i0 - w) >> 1) - 2;\n\t    assert(_s24P(d));\n\t    T2_B(encode_thumb_jump(d));\n\t}\n\telse {\n\t    d = ((i0 - w) >> 2) - 2;\n\t    assert(_s24P(d));\n\t    B(d & 0x00ffffff);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tw = movi_p(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 29,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bccr": {
      "start_point": [
        2638,
        0
      ],
      "end_point": [
        2664,
        1
      ],
      "content": "static jit_word_t\n_bccr(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_CMP(r0, r1);\n\telse if ((r0&r1) & 8)\n\t    T1_CMPX(r0, r1);\n\telse\n\t    T2_CMP(r0, r1);\n\t/* use only thumb2 conditional as does not know if will be patched */\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCMP(r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 27,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcci": {
      "start_point": [
        2666,
        0
      ],
      "end_point": [
        2709,
        1
      ],
      "content": "static jit_word_t\n_bcci(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    int\t\t\ti;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (r0 < 7 && !(i1 & 0xffffff00))\n\t    T1_CMPI(r0, i1);\n\telse if ((i = encode_thumb_immediate(i1)) != -1)\n\t    T2_CMPI(r0, i);\n\telse if ((i = encode_thumb_immediate(-i1)) != -1)\n\t    T2_CMNI(r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    T2_CMP(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\t/* use only thumb2 conditional as does not know if will be patched */\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tif ((i = encode_arm_immediate(i1)) != -1)\n\t    CMPI(r0, i);\n\telse if ((i = encode_arm_immediate(-i1)) != -1)\n\t    CMNI(r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    CMP(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 44,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr": {
      "start_point": [
        2711,
        0
      ],
      "end_point": [
        2734,
        1
      ],
      "content": "static jit_word_t\n_baddr(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_ADD(r0, r0, r1);\n\telse\n\t    T2_ADDS(r0, r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tADDS(r0, r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi": {
      "start_point": [
        2736,
        0
      ],
      "end_point": [
        2784,
        1
      ],
      "content": "static jit_word_t\n_baddi(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, int i1)\n{\n    int\t\t\ti;\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (r0 < 8 && !(i1 & ~7))\n\t    T1_ADDI3(r0, r0, i1);\n\telse if (r0 < 8 && !(-i1 & ~7))\n\t    T1_SUBI3(r0, r0, -i1);\n\telse if (r0 < 8 && !(i1 & ~0xff))\n\t    T1_ADDI8(r0, i1);\n\telse if (r0 < 8 && !(-i1 & ~0xff))\n\t    T1_SUBI8(r0, -i1);\n\telse if ((i = encode_thumb_immediate(i1)) != -1)\n\t    T2_ADDSI(r0, r0, i);\n\telse if ((i = encode_thumb_immediate(-i1)) != -1)\n\t    T2_SUBSI(r0, r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    T2_ADDS(r0, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tif ((i = encode_arm_immediate(i1)) != -1)\n\t    ADDSI(r0, r0, i);\n\telse if ((i = encode_arm_immediate(-i1)) != -1)\n\t    SUBSI(r0, r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    ADDS(r0, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 49,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr": {
      "start_point": [
        2786,
        0
      ],
      "end_point": [
        2809,
        1
      ],
      "content": "static jit_word_t\n_bsubr(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_SUB(r0, r0, r1);\n\telse\n\t    T2_SUBS(r0, r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tSUBS(r0, r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi": {
      "start_point": [
        2811,
        0
      ],
      "end_point": [
        2859,
        1
      ],
      "content": "static jit_word_t\n_bsubi(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, int i1)\n{\n    int\t\t\ti;\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (r0 < 8 && !(i1 & ~7))\n\t    T1_SUBI3(r0, r0, i1);\n\telse if (r0 < 8 && !(-i1 & ~7))\n\t    T1_ADDI3(r0, r0, -i1);\n\telse if (r0 < 8 && !(i1 & ~0xff))\n\t    T1_SUBI8(r0, i1);\n\telse if (r0 < 8 && !(-i1 & ~0xff))\n\t    T1_ADDI8(r0, -i1);\n\telse if ((i = encode_thumb_immediate(i1)) != -1)\n\t    T2_SUBSI(r0, r0, i);\n\telse if ((i = encode_thumb_immediate(-i1)) != -1)\n\t    T2_SUBSI(r0, r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    T2_SUBS(r0, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tif ((i = encode_arm_immediate(i1)) != -1)\n\t    SUBSI(r0, r0, i);\n\telse if ((i = encode_arm_immediate(-i1)) != -1)\n\t    ADDSI(r0, r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    SUBS(r0, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 49,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxr": {
      "start_point": [
        2861,
        0
      ],
      "end_point": [
        2891,
        1
      ],
      "content": "static jit_word_t\n_bmxr(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_TST(r0, r1);\n\telse\n\t    T2_TST(r0, r1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tif (jit_armv5_p())\n\t    TST(r0, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    ANDS(rn(reg), r0, r1);\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 31,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxi": {
      "start_point": [
        2893,
        0
      ],
      "end_point": [
        2943,
        1
      ],
      "content": "static jit_word_t\n_bmxi(jit_state_t *_jit, int cc, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    int\t\t\ti;\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((i = encode_thumb_immediate(i1)) != -1)\n\t    T2_TSTI(r0, i);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i1);\n\t    T2_TST(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tif (jit_armv5_p()) {\n\t    if ((i = encode_arm_immediate(i1)) != -1)\n\t\tTSTI(r0, i);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tmovi(rn(reg), i1);\n\t\tTST(r0, rn(reg));\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    if ((i = encode_arm_immediate(i1)) != -1)\n\t\tANDSI(rn(reg), r0, i);\n\t    else if ((i = encode_arm_immediate(~i1)) != -1)\n\t\tBICSI(rn(reg), r0, i);\n\t    else {\n\t\tmovi(rn(reg), i1);\n\t\tANDS(rn(reg), r0, rn(reg));\n\t    }\n\t    jit_unget_reg(reg);\n\t}\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 51,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldr_c": {
      "start_point": [
        2945,
        0
      ],
      "end_point": [
        2952,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_LDRSBI(r0, r1, 0);\n    else\n\tLDRSBI(r0, r1, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        2954,
        0
      ],
      "end_point": [
        2965,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_LDRSBI(r0, rn(reg), 0);\n    else\n\tLDRSBI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2967,
        0
      ],
      "end_point": [
        2978,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_LDRSB(r0, r1, r2);\n\telse\n\t    T2_LDRSB(r0, r1, r2);\n    }\n    else\n\tLDRSB(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        2980,
        0
      ],
      "end_point": [
        3024,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_LDRSBI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_LDRSBIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_LDRSBWI(r0, r1, i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    if ((r0|r1) < 8)\n\t\tT1_LDRSB(r0, r1, r0);\n\t    else\n\t\tT2_LDRSB(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_LDRSB(r0, r1, rn(reg));\n\t    else\n\t\tT2_LDRSB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 255)\n\t    LDRSBI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    LDRSBIN(r0, r1, -i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    LDRSB(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    LDRSB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 45,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_uc": {
      "start_point": [
        3026,
        0
      ],
      "end_point": [
        3033,
        1
      ],
      "content": "static void\n_ldr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_LDRBI(r0, r1, 0);\n    else\n\tLDRBI(r0, r1, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        3035,
        0
      ],
      "end_point": [
        3046,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_LDRBI(r0, rn(reg), 0);\n    else\n\tLDRBI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        3048,
        0
      ],
      "end_point": [
        3059,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_LDRB(r0, r1, r2);\n\telse\n\t    T2_LDRB(r0, r1, r2);\n    }\n    else\n\tLDRB(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        3061,
        0
      ],
      "end_point": [
        3107,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && i0 < 0x20)\n\t    T1_LDRBI(r0, r1, i0);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_LDRBI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_LDRBIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_LDRBWI(r0, r1, i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    if ((r0|r1) < 8)\n\t\tT1_LDRB(r0, r1, r0);\n\t    else\n\t\tT2_LDRB(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_LDRB(r0, r1, rn(reg));\n\t    else\n\t\tT2_LDRB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 4095)\n\t    LDRBI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -4095)\n\t    LDRBIN(r0, r1, -i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    LDRB(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    LDRB(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 47,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_s": {
      "start_point": [
        3109,
        0
      ],
      "end_point": [
        3116,
        1
      ],
      "content": "static void\n_ldr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_LDRSHI(r0, r1, 0);\n    else\n\tLDRSHI(r0, r1, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        3118,
        0
      ],
      "end_point": [
        3129,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_LDRSHI(r0, rn(reg), 0);\n    else\n\tLDRSHI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        3131,
        0
      ],
      "end_point": [
        3142,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_LDRSH(r0, r1, r2);\n\telse\n\t    T2_LDRSH(r0, r1, r2);\n    }\n    else\n\tLDRSH(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        3144,
        0
      ],
      "end_point": [
        3188,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_LDRSHI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_LDRSHIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_LDRSHWI(r0, r1, i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    if ((r0|r1) < 8)\n\t\tT1_LDRSH(r0, r1, r0);\n\t    else\n\t\tT2_LDRSH(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_LDRSH(r0, r1, rn(reg));\n\t    else\n\t\tT2_LDRSH(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 255)\n\t    LDRSHI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    LDRSHIN(r0, r1, -i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    LDRSH(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    LDRSH(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 45,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_us": {
      "start_point": [
        3190,
        0
      ],
      "end_point": [
        3197,
        1
      ],
      "content": "static void\n_ldr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_LDRHI(r0, r1, 0);\n    else\n\tLDRHI(r0, r1, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        3199,
        0
      ],
      "end_point": [
        3210,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_LDRHI(r0, rn(reg), 0);\n    else\n\tLDRHI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        3212,
        0
      ],
      "end_point": [
        3223,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_LDRH(r0, r1, r2);\n\telse\n\t    T2_LDRH(r0, r1, r2);\n    }\n    else\n\tLDRH(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        3225,
        0
      ],
      "end_point": [
        3271,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && !(i0 & 1) && (i0 >> 1) < 0x20)\n\t    T1_LDRHI(r0, r1, i0 >> 1);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_LDRHI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_LDRHIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_LDRHWI(r0, r1, i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    if ((r0|r1) < 8)\n\t\tT1_LDRH(r0, r1, r0);\n\t    else\n\t\tT2_LDRH(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_LDRH(r0, r1, rn(reg));\n\t    else\n\t\tT2_LDRH(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 255)\n\t    LDRHI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    LDRHIN(r0, r1, -i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    LDRH(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    LDRH(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 47,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_i": {
      "start_point": [
        3273,
        0
      ],
      "end_point": [
        3280,
        1
      ],
      "content": "static void\n_ldr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_LDRI(r0, r1, 0);\n    else\n\tLDRI(r0, r1, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        3282,
        0
      ],
      "end_point": [
        3293,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_LDRI(r0, rn(reg), 0);\n    else\n\tLDRI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        3295,
        0
      ],
      "end_point": [
        3306,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_LDR(r0, r1, r2);\n\telse\n\t    T2_LDR(r0, r1, r2);\n    }\n    else\n\tLDR(r0, r1, r2);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        3308,
        0
      ],
      "end_point": [
        3357,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && !(i0 & 3) && (i0 >> 2) < 0x20)\n\t    T1_LDRI(r0, r1, i0 >> 2);\n\telse if (r1 == _R13_REGNO && r0 < 8 &&\n\t\t i0 >= 0 && !(i0 & 3) && (i0 >> 2) <= 255)\n\t    T1_LDRISP(r0, i0 >> 2);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_LDRI(r0, r1, i0);\n\telse if (i0 < 0 && i0 > -255)\n\t    T2_LDRIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_LDRWI(r0, r1, i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    if ((r0|r1) < 8)\n\t\tT1_LDR(r0, r1, r0);\n\t    else\n\t\tT2_LDR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_LDR(r0, r1, rn(reg));\n\t    else\n\t\tT2_LDR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 4095)\n\t    LDRI(r0, r1, i0);\n\telse if (i0 < 0 && i0 >= -4095)\n\t    LDRIN(r0, r1, -i0);\n\telse if (r0 != r1) {\n\t    movi(r0, i0);\n\t    LDR(r0, r1, r0);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    LDR(r0, r1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 50,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_c": {
      "start_point": [
        3359,
        0
      ],
      "end_point": [
        3366,
        1
      ],
      "content": "static void\n_str_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_STRBI(r1, r0, 0);\n    else\n\tSTRBI(r1, r0, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        3368,
        0
      ],
      "end_point": [
        3379,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_STRBI(r0, rn(reg), 0);\n    else\n\tSTRBI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        3381,
        0
      ],
      "end_point": [
        3392,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_STRB(r2, r1, r0);\n\telse\n\t    T2_STRB(r2, r1, r0);\n    }\n    else\n\tSTRB(r2, r1, r0);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        3394,
        0
      ],
      "end_point": [
        3429,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && i0 < 0x20)\n\t    T1_STRBI(r1, r0, i0);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_STRBI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_STRBIN(r1, r0, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_STRBWI(r1, r0, i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_STRB(r1, r0, rn(reg));\n\t    else\n\t\tT2_STRB(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 4095)\n\t    STRBI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -4095)\n\t    STRBIN(r1, r0, -i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    STRB(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 36,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_s": {
      "start_point": [
        3431,
        0
      ],
      "end_point": [
        3438,
        1
      ],
      "content": "static void\n_str_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_STRHI(r1, r0, 0);\n    else\n\tSTRHI(r1, r0, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        3440,
        0
      ],
      "end_point": [
        3451,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_STRHI(r0, rn(reg), 0);\n    else\n\tSTRHI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        3453,
        0
      ],
      "end_point": [
        3464,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_STRH(r2, r1, r0);\n\telse\n\t    T2_STRH(r2, r1, r0);\n    }\n    else\n\tSTRH(r2, r1, r0);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        3466,
        0
      ],
      "end_point": [
        3501,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && !(i0 & 1) && (i0 >> 1) < 0x20)\n\t    T1_STRHI(r1, r0, i0 >> 1);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_STRHI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_STRHIN(r1, r0, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_STRHWI(r1, r0, i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_STRH(r1, r0, rn(reg));\n\t    else\n\t\tT2_STRH(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 255)\n\t    STRHI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    STRHIN(r1, r0, -i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    STRH(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 36,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_i": {
      "start_point": [
        3503,
        0
      ],
      "end_point": [
        3510,
        1
      ],
      "content": "static void\n_str_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p())\n\tT2_STRI(r1, r0, 0);\n    else\n\tSTRI(r1, r0, 0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        3512,
        0
      ],
      "end_point": [
        3523,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_thumb_p())\n\tT2_STRI(r0, rn(reg), 0);\n    else\n\tSTRI(r0, rn(reg), 0);\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        3525,
        0
      ],
      "end_point": [
        3536,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1|r2) < 8)\n\t    T1_STR(r2, r1, r0);\n\telse\n\t    T2_STR(r2, r1, r0);\n    }\n    else\n\tSTR(r2, r1, r0);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        3538,
        0
      ],
      "end_point": [
        3576,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8 && i0 >= 0 && !(i0 & 3) && (i0 >> 2) < 0x20)\n\t    T1_STRI(r1, r0, i0 >> 2);\n\telse if (r0 == _R13_REGNO && r1 < 8 &&\n\t\t i0 >= 0 && !(i0 & 3) && (i0 >> 2) <= 255)\n\t    T1_STRISP(r1, i0 >> 2);\n\telse if (jit_ldrt_strt_p() && i0 >= 0 && i0 <= 255)\n\t    T2_STRI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -255)\n\t    T2_STRIN(r1, r0, -i0);\n\telse if (i0 >= 0 && i0 <= 4095)\n\t    T2_STRWI(r1, r0, i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    if ((r0|r1|rn(reg)) < 8)\n\t\tT1_STR(r1, r0, rn(reg));\n\t    else\n\t\tT2_STR(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (i0 >= 0 && i0 <= 4095)\n\t    STRI(r1, r0, i0);\n\telse if (i0 < 0 && i0 >= -4095)\n\t    STRIN(r1, r0, -i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    STR(r1, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 39,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        3579,
        0
      ],
      "end_point": [
        3605,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_REV(r0, r1);\n\telse\n\t    T2_REV(r0, r1);\n\trshi_u(r0, r0, 16);\n    }\n    else {\n\tif (jit_armv6_p()) {\n\t    REV(r0, r1);\n\t    rshi_u(r0, r0, 16);\n\t}\n\telse {\n\t    t0 = jit_get_reg(jit_class_gpr);\n\t    rshi(rn(t0), r1, 8);\n\t    andi(r0, r1, 0xff);\n\t    andi(rn(t0), rn(t0), 0xff);\n\t    lshi(r0, r0, 8);\n\t    orr(r0, r0, rn(t0));\n\t    jit_unget_reg(t0);\n\t}\n    }\n}",
      "lines": 27,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        3608,
        0
      ],
      "end_point": [
        3630,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_REV(r0, r1);\n\telse\n\t    T2_REV(r0, r1);\n    }\n    else {\n\tif (jit_armv6_p())\n\t    REV(r0, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    EOR_SI(rn(reg), r1, r1, ARM_ROR, 16);\n\t    LSRI(rn(reg), rn(reg), 8);\n\t    BICI(rn(reg), rn(reg), encode_arm_immediate(0xff00));\n\t    EOR_SI(r0, rn(reg), r1, ARM_ROR, 8);\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_c": {
      "start_point": [
        3633,
        0
      ],
      "end_point": [
        3650,
        1
      ],
      "content": "static void\n_extr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_SXTB(r0, r1);\n\telse\n\t    T2_SXTB(r0, r1);\n    }\n    else {\n\tif (jit_armv6_p())\n\t    SXTB(r0, r1);\n\telse {\n\t    LSLI(r0, r1, 24);\n\t    ASRI(r0, r0, 24);\n\t}\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_uc": {
      "start_point": [
        3652,
        0
      ],
      "end_point": [
        3667,
        1
      ],
      "content": "static void\n_extr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_UXTB(r0, r1);\n\telse\n\t    T2_UXTB(r0, r1);\n    }\n    else {\n\tif (jit_armv6_p())\n\t    UXTB(r0, r1);\n\telse\n\t    ANDI(r0, r1, 0xff);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_s": {
      "start_point": [
        3669,
        0
      ],
      "end_point": [
        3686,
        1
      ],
      "content": "static void\n_extr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_SXTH(r0, r1);\n\telse\n\t    T2_SXTH(r0, r1);\n    }\n    else {\n\tif (jit_armv6_p())\n\t    SXTH(r0, r1);\n\telse {\n\t    LSLI(r0, r1, 16);\n\t    ASRI(r0, r0, 16);\n\t}\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_us": {
      "start_point": [
        3688,
        0
      ],
      "end_point": [
        3705,
        1
      ],
      "content": "static void\n_extr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_thumb_p()) {\n\tif ((r0|r1) < 8)\n\t    T1_UXTH(r0, r1);\n\telse\n\t    T2_UXTH(r0, r1);\n    }\n    else {\n\tif (jit_armv6_p())\n\t    UXTH(r0, r1);\n\telse {\n\t    LSLI(r0, r1, 16);\n\t    LSRI(r0, r0, 16);\n\t}\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_callr": {
      "start_point": [
        3707,
        0
      ],
      "end_point": [
        3714,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (jit_thumb_p())\n\tT1_BLX(r0);\n    else\n\tBLX(r0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        3716,
        0
      ],
      "end_point": [
        3733,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    d = ((i0 - _jit->pc.w) >> 2) - 2;\n    if (!jit_exchange_p() && !jit_thumb_p() && _s24P(d))\n\tBLI(d & 0x00ffffff);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tif (jit_thumb_p())\n\t    T1_BLX(rn(reg));\n\telse\n\t    BLX(rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        3735,
        0
      ],
      "end_point": [
        3749,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    w = _jit->pc.w;\n    movi_p(rn(reg), i0);\n    if (jit_thumb_p())\n\tT1_BLX(rn(reg));\n    else\n\tBLX(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        3751,
        0
      ],
      "end_point": [
        3810,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame) {\n\t    if (jit_thumb_p() && !_jitc->thumb)\n\t\t_jitc->thumb = _jit->pc.w;\n\t    return;\n\t}\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -8;\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t      /* align stack at 8 bytes */\n\t\t\t      _jitc->function->self.aoff) + 7) & -8;\n\n    if (jit_thumb_p()) {\n\t/*  switch to thumb mode (better approach would be to\n\t * ORR 1 address being called, but no clear distinction\n\t * of what is a pointer to a jit function, or if patching\n\t * a pointer to a jit function) */\n\tADDI(_R12_REGNO, _R15_REGNO, 1);\n\tBX(_R12_REGNO);\n\tif (!_jitc->thumb)\n\t    _jitc->thumb = _jit->pc.w;\n\tif (jit_cpu.abi) {\n\t    T2_PUSH(0xf);\n\t    T2_PUSH(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n\t    VPUSH_F64(_D8_REGNO, 8);\n\t}\n\telse {\n\t    T2_PUSH(0xf);\n\t    T2_PUSH(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n\t}\n    }\n    else {\n\tif (jit_cpu.abi) {\n\t    PUSH(0xf);\n\t    PUSH(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n\t    VPUSH_F64(_D8_REGNO, 8);\n\t}\n\telse {\n\t    PUSH(0xf);\n\t    PUSH(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n\t}\n    }\n    movr(_FP_REGNO, _SP_REGNO);\n    if (_jitc->function->stack)\n\tsubi(_SP_REGNO, _SP_REGNO, _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 60,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        3812,
        0
      ],
      "end_point": [
        3832,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n\n    movr(_SP_REGNO, _FP_REGNO);\n    if (jit_cpu.abi)\n\tVPOP_F64(_D8_REGNO, 8);\n    if (jit_thumb_p())\n\tT2_POP(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n    else\n\tPOP(0x3f0|(1<<_FP_REGNO)|(1<<_LR_REGNO));\n    addi(_SP_REGNO, _SP_REGNO, 16);\n    if (jit_thumb_p())\n\tT1_BX(_LR_REGNO);\n    else\n\tBX(_LR_REGNO);\n    if (jit_thumb_p() && (_jit->pc.w & 2))\n\tT1_NOP();\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        3834,
        0
      ],
      "end_point": [
        3845,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Initialize stack pointer to the first stack argument.\n     * The -16 is to account for the 4 argument registers\n     * always saved, and _jitc->function->vagp is to account\n     * for declared arguments. */\n    addi(r0, _FP_REGNO, _jitc->function->self.size -\n\t 16 + _jitc->function->vagp);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        3847,
        0
      ],
      "end_point": [
        3857,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Load argument. */\n    ldr(r0, r1);\n\n    /* Update stack pointer. */\n    addi(r1, r1, sizeof(jit_word_t));\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        3859,
        0
      ],
      "end_point": [
        3953,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit,\n\t  jit_int32_t kind, jit_word_t instr, jit_word_t label)\n{\n    jit_word_t\t\t d;\n    jit_thumb_t\t\t thumb;\n    union {\n\tjit_int16_t\t*s;\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n    u.w = instr;\n    if (kind == arm_patch_jump) {\n\tif (jit_thumb_p() && (jit_uword_t)instr >= _jitc->thumb) {\n\t    code2thumb(thumb.s[0], thumb.s[1], u.s[0], u.s[1]);\n\t    if ((thumb.i & THUMB2_B) == THUMB2_B) {\n\t\td = ((label - instr) >> 1) - 2;\n\t\tassert(_s24P(d));\n\t\tthumb.i = THUMB2_B | encode_thumb_jump(d);\n\t\tthumb2code(thumb.s[0], thumb.s[1], u.s[0], u.s[1]);\n\t    }\n\t    else if ((thumb.i & THUMB2_B) == THUMB2_CC_B) {\n\t\td = ((label - instr) >> 1) - 2;\n\t\tassert(_s20P(d));\n\t\tthumb.i = THUMB2_CC_B | (thumb.i & 0x3c00000) |\n\t\t\t  encode_thumb_cc_jump(d);\n\t\tthumb2code(thumb.s[0], thumb.s[1], u.s[0], u.s[1]);\n\t    }\n\t    else {\n\t\t/* for the sake of simplicity in case choose to\n\t\t * movw+movt+[bx|blx], e.g. if changing to instead\n\t\t * of asserting target is reachable, load constant\n\t\t * and do indirect jump if not reachable */\n\t\tif ((thumb.i & 0xfbf00000) == THUMB2_MOVWI)\n\t\t    goto indirect_jump;\n\t\tassert(!\"handled branch opcode\");\n\t    }\n\t}\n\telse {\n\t    thumb.i = u.i[0];\n\t    /* 0x0e000000 because 0x01000000 is (branch&) link modifier */\n\t    assert((thumb.i & 0x0e000000) == ARM_B);\n\t    d = ((label - instr) >> 2) - 2;\n\t    assert(_s24P(d));\n\t    u.i[0] = (thumb.i & 0xff000000) | (d & 0x00ffffff);\n\t}\n    }\n    else if (kind == arm_patch_load) {\n\t/* offset may be negative for a forward patch because it\n\t * is relative to pc + 8, for example:\n\t *\t    ldr r0, [pc, #-4]\n\t *\t    bx r0\t\t;; [pc, #-8]\n\t *\t    .data ...\t\t;; [pc, #-4]\n\t *\t    ... \t\t;; [pc]\n\t */\n\tassert(!jit_thumb_p());\n\tthumb.i = u.i[0];\n\tassert((thumb.i & 0x0f700000) == ARM_LDRI);\n\td = label - (instr + 8);\n\tif (d < 0) {\n\t    thumb.i &= ~ARM_P;\n\t    d = -d;\n\t}\n\telse\n\t    thumb.i |= ARM_P;\n\tassert(!(d & 0xfffff000));\n\tu.i[0] = (thumb.i & 0xfffff000) | d;\n    }\n    else if (kind == arm_patch_word) {\n\tif (jit_thumb_p()) {\n\t    code2thumb(thumb.s[0], thumb.s[1], u.s[0], u.s[1]);\n\t    assert((thumb.i & 0xfbf00000) == THUMB2_MOVWI);\n\tindirect_jump:\n\t    thumb.i = ((thumb.i & 0xfbf00f00) |\n\t\t       ( (label & 0x0000f000) <<  4) |\n\t\t       ( (label & 0x00000800) << 15) |\n\t\t       ( (label & 0x00000700) <<  4) |\n\t\t       (  label & 0x000000ff));\n\t    thumb2code(thumb.s[0], thumb.s[1], u.s[0], u.s[1]);\n\t    label >>= 16;\n\t    code2thumb(thumb.s[0], thumb.s[1], u.s[2], u.s[3]);\n\t    assert((thumb.i & 0xfbf00000) == THUMB2_MOVTI);\n\t    thumb.i = ((thumb.i & 0xfbf00f00) |\n\t\t       ( (label & 0x0000f000) <<  4) |\n\t\t       ( (label & 0x00000800) << 15) |\n\t\t       ( (label & 0x00000700) <<  4) |\n\t\t       (  label & 0x000000ff));\n\t    thumb2code(thumb.s[0], thumb.s[1], u.s[2], u.s[3]);\n\t}\n\telse\n\t    u.i[0] = label;\n    }\n    else\n\tassert(!\"handled patch\");\n}",
      "lines": 95,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_arm-swf.c": {
    "__addsf3": {
      "start_point": [
        405,
        0
      ],
      "end_point": [
        408,
        1
      ],
      "content": "float __addsf3(float u, float v)\n{\n    return (u + v);\n}",
      "lines": 4,
      "depth": 6,
      "decorators": [
        "float"
      ]
    },
    "__adddf3": {
      "start_point": [
        410,
        0
      ],
      "end_point": [
        414,
        1
      ],
      "content": "double\n__adddf3(double u, double v)\n{\n    return (u + v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_fsub": {
      "start_point": [
        416,
        0
      ],
      "end_point": [
        420,
        1
      ],
      "content": "float\n__aeabi_fsub(float u, float v)\n{\n    return (u - v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "float"
      ]
    },
    "__aeabi_dsub": {
      "start_point": [
        422,
        0
      ],
      "end_point": [
        426,
        1
      ],
      "content": "double\n__aeabi_dsub(double u, double v)\n{\n    return (u - v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_fmul": {
      "start_point": [
        428,
        0
      ],
      "end_point": [
        432,
        1
      ],
      "content": "float\n__aeabi_fmul(float u, float v)\n{\n    return (u * v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "float"
      ]
    },
    "__aeabi_dmul": {
      "start_point": [
        434,
        0
      ],
      "end_point": [
        438,
        1
      ],
      "content": "double\n__aeabi_dmul(double u, double v)\n{\n    return (u * v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_fdiv": {
      "start_point": [
        440,
        0
      ],
      "end_point": [
        444,
        1
      ],
      "content": "float\n__aeabi_fdiv(float u, float v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "float"
      ]
    },
    "__aeabi_ddiv": {
      "start_point": [
        446,
        0
      ],
      "end_point": [
        450,
        1
      ],
      "content": "double\n__aeabi_ddiv(double u, double v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_i2f": {
      "start_point": [
        452,
        0
      ],
      "end_point": [
        456,
        1
      ],
      "content": "float\n__aeabi_i2f(int u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "float"
      ]
    },
    "__aeabi_i2d": {
      "start_point": [
        458,
        0
      ],
      "end_point": [
        462,
        1
      ],
      "content": "double\n__aeabi_i2d(int u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_d2f": {
      "start_point": [
        464,
        0
      ],
      "end_point": [
        468,
        1
      ],
      "content": "float\n__aeabi_d2f(double u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "float"
      ]
    },
    "__aeabi_f2d": {
      "start_point": [
        470,
        0
      ],
      "end_point": [
        474,
        1
      ],
      "content": "double\n__aeabi_f2d(float u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "double"
      ]
    },
    "__aeabi_f2iz": {
      "start_point": [
        476,
        0
      ],
      "end_point": [
        480,
        1
      ],
      "content": "extern int\n__aeabi_f2iz(float u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "extern",
        "extern",
        "int"
      ]
    },
    "__aeabi_d2iz": {
      "start_point": [
        482,
        0
      ],
      "end_point": [
        486,
        1
      ],
      "content": "int\n__aeabi_d2iz(double u)\n{\n    return (u);\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmplt": {
      "start_point": [
        488,
        0
      ],
      "end_point": [
        492,
        1
      ],
      "content": "int\n__aeabi_fcmplt(float u, float v)\n{\n    return (u < v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmplt": {
      "start_point": [
        494,
        0
      ],
      "end_point": [
        498,
        1
      ],
      "content": "int\n__aeabi_dcmplt(double u, double v)\n{\n    return (u < v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmple": {
      "start_point": [
        500,
        0
      ],
      "end_point": [
        504,
        1
      ],
      "content": "int\n__aeabi_fcmple(float u, float v)\n{\n    return (u <= v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmple": {
      "start_point": [
        506,
        0
      ],
      "end_point": [
        510,
        1
      ],
      "content": "int\n__aeabi_dcmple(double u, double v)\n{\n    return (u <= v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmpeq": {
      "start_point": [
        512,
        0
      ],
      "end_point": [
        516,
        1
      ],
      "content": "int\n__aeabi_fcmpeq(float u, float v)\n{\n    return (u == v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmpeq": {
      "start_point": [
        518,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "content": "int\n__aeabi_dcmpeq(double u, double v)\n{\n    return (u == v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmpge": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        528,
        1
      ],
      "content": "int\n__aeabi_fcmpge(float u, float v)\n{\n    return (u >= v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmpge": {
      "start_point": [
        530,
        0
      ],
      "end_point": [
        534,
        1
      ],
      "content": "int\n__aeabi_dcmpge(double u, double v)\n{\n    return (u >= v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmpgt": {
      "start_point": [
        536,
        0
      ],
      "end_point": [
        540,
        1
      ],
      "content": "int\n__aeabi_fcmpgt(float u, float v)\n{\n    return (u > v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmpgt": {
      "start_point": [
        542,
        0
      ],
      "end_point": [
        546,
        1
      ],
      "content": "int\n__aeabi_dcmpgt(double u, double v)\n{\n    return (u > v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_fcmpun": {
      "start_point": [
        548,
        0
      ],
      "end_point": [
        552,
        1
      ],
      "content": "int\n__aeabi_fcmpun(float u, float v)\n{\n    return ((u != u) || (v != v));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "__aeabi_dcmpun": {
      "start_point": [
        554,
        0
      ],
      "end_point": [
        558,
        1
      ],
      "content": "int\n__aeabi_dcmpun(double u, double v)\n{\n    return ((u != u) || (v != v));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "int"
      ]
    },
    "_swf_ff": {
      "start_point": [
        561,
        0
      ],
      "end_point": [
        576,
        1
      ],
      "content": "static void\n_swf_ff(jit_state_t *_jit, float(*i0)(float),\n\tjit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    swf_call(i0, fallback, _R1_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_dd": {
      "start_point": [
        578,
        0
      ],
      "end_point": [
        609,
        1
      ],
      "content": "static void\n_swf_dd(jit_state_t *_jit, double (*i0)(double),\n\tjit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    swf_call(i0, fallback, _R2_REGNO);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 32,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_fff": {
      "start_point": [
        611,
        0
      ],
      "end_point": [
        630,
        1
      ],
      "content": "static void\n_swf_fff(jit_state_t *_jit, float (*i0)(float, float),\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    if (jit_fpr_p(r2))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r2) + 8);\n    else\n\tmovr(_R1_REGNO, r1);\n    swf_call(i0, fallback, _R3_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ddd": {
      "start_point": [
        632,
        0
      ],
      "end_point": [
        675,
        1
      ],
      "content": "static void\n_swf_ddd(jit_state_t *_jit, double (*i0)(double, double),\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    if (jit_fpr_p(r2)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r2) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r2);\n\tmovr(_R3_REGNO, r2 + 1);\n    }\n    swf_call_with_get_reg(i0, fallback);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 44,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_fff_": {
      "start_point": [
        677,
        0
      ],
      "end_point": [
        698,
        1
      ],
      "content": "static void\n_swf_fff_(jit_state_t *_jit, float (*i0)(float, float),\n\t  jit_int32_t r0, jit_int32_t r1, jit_float32_t i1)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_get_reg_args();\n    data.f = i1;\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    movi(_R1_REGNO, data.i);\n    swf_call(i0, fallback, _R3_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 22,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_rsbi_f": {
      "start_point": [
        700,
        0
      ],
      "end_point": [
        720,
        1
      ],
      "content": "static void\n_swf_rsbi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float32_t i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_get_reg_args();\n    data.f = i0;\n    movi(_R0_REGNO, data.i);\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R1_REGNO, r1);\n    swf_call(__aeabi_fsub, fallback, _R3_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 21,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ddd_": {
      "start_point": [
        722,
        0
      ],
      "end_point": [
        761,
        1
      ],
      "content": "static void\n_swf_ddd_(jit_state_t *_jit, double (*i0)(double, double),\n\t  jit_int32_t r0, jit_int32_t r1, jit_float64_t i1)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n\n    data.d = i1;\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(i0, fallback);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 40,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_rsbi_d": {
      "start_point": [
        763,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "static void\n_swf_rsbi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float64_t i0)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n    data.d = i0;\n    movi(_R0_REGNO, data.i[0]);\n    movi(_R1_REGNO, data.i[1]);\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r1);\n\tmovr(_R3_REGNO, r1 + 1);\n    }\n    swf_call_with_get_reg(__aeabi_dsub, fallback);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 38,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iff": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        818,
        1
      ],
      "content": "static void\n_swf_iff(jit_state_t *_jit, int (*i0)(float, float),\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    if (jit_fpr_p(r2))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r2) + 8);\n    else\n\tmovr(_R1_REGNO, r2);\n    swf_call(i0, fallback, _R2_REGNO);\n    movr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_idd": {
      "start_point": [
        820,
        0
      ],
      "end_point": [
        852,
        1
      ],
      "content": "static void\n_swf_idd(jit_state_t *_jit, int (*i0)(double, double),\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    if (jit_fpr_p(r2)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r2) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r2);\n\tmovr(_R3_REGNO, r2 + 1);\n    }\n    swf_call_with_get_reg(i0, fallback);\n    movr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iff_": {
      "start_point": [
        854,
        0
      ],
      "end_point": [
        872,
        1
      ],
      "content": "static void\n_swf_iff_(jit_state_t *_jit, int (*i0)(float, float),\n\t  jit_int32_t r0, jit_int32_t r1, jit_float32_t i1)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_get_reg_args();\n    data.f = i1;\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    movi(_R1_REGNO, data.i);\n    swf_call(i0, fallback, _R2_REGNO);\n    movr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_idd_": {
      "start_point": [
        874,
        0
      ],
      "end_point": [
        901,
        1
      ],
      "content": "static void\n_swf_idd_(jit_state_t *_jit, int (*i0)(double, double),\n\t  jit_int32_t r0, jit_int32_t r1, jit_float64_t i1)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n    data.d = i1;\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(i0, fallback);\n    movr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iunff": {
      "start_point": [
        903,
        0
      ],
      "end_point": [
        946,
        1
      ],
      "content": "static void\n_swf_iunff(jit_state_t *_jit, int (*i0)(float, float),\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tinstr;\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    if (jit_fpr_p(r2))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r2) + 8);\n    else\n\tmovr(_R1_REGNO, r2);\n    swf_call(__aeabi_fcmpun, fcmpun, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tIT(ARM_CC_NE);\n\tif (r0 < 8)\n\t    T1_MOVI(r0, 1);\n\telse\n\t    T2_MOVI(r0, 1);\n\tinstr = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n\tinstr = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    if (jit_fpr_p(r2))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r2) + 8);\n    else\n\tmovr(_R1_REGNO, r2);\n    swf_call(i0, fallback, _R2_REGNO);\n    movr(r0, _R0_REGNO);\n    patch_at(arm_patch_jump, instr, _jit->pc.w);\n    jit_unget_reg_args();\n}",
      "lines": 44,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iundd": {
      "start_point": [
        948,
        0
      ],
      "end_point": [
        1023,
        1
      ],
      "content": "static void\n_swf_iundd(jit_state_t *_jit, int (*i0)(double, double),\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tinstr;\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    if (jit_fpr_p(r2)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r2) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r2);\n\tmovr(_R3_REGNO, r2 + 1);\n    }\n    swf_call_with_get_reg(__aeabi_dcmpun, dcmpun);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tIT(ARM_CC_NE);\n\tif (r0 < 8)\n\t    T1_MOVI(r0, 1);\n\telse\n\t    T2_MOVI(r0, 1);\n\tinstr = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n\tinstr = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    if (jit_fpr_p(r2)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r2) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r2) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r2);\n\tmovr(_R3_REGNO, r2 + 1);\n    }\n    swf_call_with_get_reg(i0, fallback);\n    movr(r0, _R0_REGNO);\n    patch_at(arm_patch_jump, instr, _jit->pc.w);\n    jit_unget_reg_args();\n}",
      "lines": 76,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iunff_": {
      "start_point": [
        1025,
        0
      ],
      "end_point": [
        1067,
        1
      ],
      "content": "static void\n_swf_iunff_(jit_state_t *_jit, int (*i0)(float, float),\n\t    jit_int32_t r0, jit_int32_t r1, jit_float32_t i1)\n{\n    jit_word_t\t\tinstr;\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_get_reg_args();\n    data.f = i1;\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    movi(_R1_REGNO, data.i);\n    swf_call(__aeabi_fcmpun, fcmpun, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tIT(ARM_CC_NE);\n\tif (r0 < 8)\n\t    T1_MOVI(r0, 1);\n\telse\n\t    T2_MOVI(r0, 1);\n\tinstr = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n\tinstr = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    movi(_R1_REGNO, data.i);\n    swf_call(i0, fallback, _R2_REGNO);\n    movr(r0, _R0_REGNO);\n    patch_at(arm_patch_jump, instr, _jit->pc.w);\n    jit_unget_reg_args();\n}",
      "lines": 43,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_iundd_": {
      "start_point": [
        1069,
        0
      ],
      "end_point": [
        1129,
        1
      ],
      "content": "static void\n_swf_iundd_(jit_state_t *_jit, int (*i0)(double, double),\n\t    jit_int32_t r0, jit_int32_t r1, jit_float64_t i1)\n{\n    jit_word_t\t\tinstr;\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n    data.d = i1;\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(__aeabi_dcmpun, dcmpun);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tIT(ARM_CC_NE);\n\tif (r0 < 8)\n\t    T1_MOVI(r0, 1);\n\telse\n\t    T2_MOVI(r0, 1);\n\tinstr = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n\tinstr = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(i0, fallback);\n    movr(r0, _R0_REGNO);\n    patch_at(arm_patch_jump, instr, _jit->pc.w);\n    jit_unget_reg_args();\n}",
      "lines": 61,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_bff": {
      "start_point": [
        1131,
        0
      ],
      "end_point": [
        1162,
        1
      ],
      "content": "static jit_word_t\n_swf_bff(jit_state_t *_jit, int (*i0)(float, float), int cc,\n\t jit_word_t i1, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d;\n    jit_get_reg_args();\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R1_REGNO, r1);\n    swf_call(i0, fallback, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 32,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bdd": {
      "start_point": [
        1164,
        0
      ],
      "end_point": [
        1211,
        1
      ],
      "content": "static jit_word_t\n_swf_bdd(jit_state_t *_jit, int (*i0)(double, double), int cc,\n\t jit_word_t i1, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d;\n    jit_get_reg_args();\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r1);\n\tmovr(_R3_REGNO, r1 + 1);\n    }\n    swf_call_with_get_reg(i0, fallback);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 48,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bff_": {
      "start_point": [
        1213,
        0
      ],
      "end_point": [
        1246,
        1
      ],
      "content": "static jit_word_t\n_swf_bff_(jit_state_t *_jit, int (*i0)(float, float), int cc,\n\t  jit_word_t i1, jit_int32_t r0, jit_float32_t i2)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_word_t\t\tw, d;\n    jit_get_reg_args();\n    data.f = i2;\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    movi(_R1_REGNO, data.i);\n    swf_call(i0, fallback, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 34,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bdd_": {
      "start_point": [
        1248,
        0
      ],
      "end_point": [
        1290,
        1
      ],
      "content": "static jit_word_t\n_swf_bdd_(jit_state_t *_jit, int (*i0)(double, double), int cc,\n\t  jit_word_t i1, jit_int32_t r0, jit_float64_t i2)\n{\n    jit_word_t\t\tw, d;\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n    data.d = i2;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(i0, fallback);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tw = _jit->pc.w;\n\td = ((i1 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 43,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bunff": {
      "start_point": [
        1292,
        0
      ],
      "end_point": [
        1360,
        1
      ],
      "content": "static jit_word_t\n_swf_bunff(jit_state_t *_jit, int eq,\n\t   jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d, j0, j1;\n    jit_get_reg_args();\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R1_REGNO, r1);\n    swf_call(__aeabi_fcmpun, fcmpun, _R2_REGNO);\n    /* if unordered */\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R1_REGNO, r1);\n    swf_call(__aeabi_fcmpeq, fcmpeq, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    T2_CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    T2_CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s24P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    if (!eq)\n\tpatch_at(arm_patch_jump, j0, _jit->pc.w);\n    patch_at(arm_patch_jump, j1, _jit->pc.w);\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 69,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bundd": {
      "start_point": [
        1362,
        0
      ],
      "end_point": [
        1462,
        1
      ],
      "content": "static jit_word_t\n_swf_bundd(jit_state_t *_jit, int eq,\n\t   jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw, d, j0, j1;\n    jit_get_reg_args();\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r0);\n\tmovr(_R3_REGNO, r0 + 1);\n    }\n    swf_call_with_get_reg(__aeabi_dcmpun, dcmpun);\n    /* if unordered */\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R2_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R3_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R2_REGNO, r0);\n\tmovr(_R3_REGNO, r0 + 1);\n    }\n    swf_call_with_get_reg(__aeabi_dcmpeq, dcmpeq);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    T2_CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    T2_CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s24P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    if (!eq)\n\tpatch_at(arm_patch_jump, j0, _jit->pc.w);\n    patch_at(arm_patch_jump, j1, _jit->pc.w);\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 101,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bunff_": {
      "start_point": [
        1464,
        0
      ],
      "end_point": [
        1531,
        1
      ],
      "content": "static jit_word_t\n_swf_bunff_(jit_state_t *_jit, int eq,\n\t    jit_word_t i0, jit_int32_t r0, jit_float32_t i1)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_word_t\t\tw, d, j0, j1;\n    data.f = i1;\n    jit_get_reg_args();\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    movi(_R1_REGNO, data.i);\n    swf_call(__aeabi_fcmpun, fcmpun, _R2_REGNO);\n    /* if unordered */\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r0))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(_R0_REGNO, r0);\n    movi(_R1_REGNO, data.i);\n    swf_call(__aeabi_fcmpeq, fcmpeq, _R2_REGNO);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    T2_CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    T2_CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s24P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    if (!eq)\n\tpatch_at(arm_patch_jump, j0, _jit->pc.w);\n    patch_at(arm_patch_jump, j1, _jit->pc.w);\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 68,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_bundd_": {
      "start_point": [
        1533,
        0
      ],
      "end_point": [
        1618,
        1
      ],
      "content": "static jit_word_t\n_swf_bundd_(jit_state_t *_jit, int eq,\n\t    jit_word_t i0, jit_int32_t r0, jit_float64_t i1)\n{\n    jit_word_t\t\tw, d, j0, j1;\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    jit_get_reg_args();\n    data.d = i1;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(__aeabi_dcmpun, fcmpun);\n    /* if unordered */\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj0 = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n    }\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r0);\n\tmovr(_R1_REGNO, r0 + 1);\n    }\n    movi(_R2_REGNO, data.i[0]);\n    movi(_R3_REGNO, data.i[1]);\n    swf_call_with_get_reg(__aeabi_dcmpeq, fcmpeq);\n    if (jit_thumb_p()) {\n\tT1_CMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    T2_CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    T2_CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s24P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCMPI(_R0_REGNO, 0);\n\tj1 = _jit->pc.w;\n\tif (eq) {\n\t    CC_B(ARM_CC_EQ, 0);\n\t    patch_at(arm_patch_jump, j0, _jit->pc.w);\n\t}\n\telse\n\t    CC_B(ARM_CC_NE, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    if (!eq)\n\tpatch_at(arm_patch_jump, j0, _jit->pc.w);\n    patch_at(arm_patch_jump, j1, _jit->pc.w);\n    jit_unget_reg_args();\n    return (w);\n}",
      "lines": 86,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_swf_extr_f": {
      "start_point": [
        1620,
        0
      ],
      "end_point": [
        1631,
        1
      ],
      "content": "static void\n_swf_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    movr(_R0_REGNO, r1);\n    swf_call(__aeabi_i2f, i2f, _R1_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_extr_d": {
      "start_point": [
        1633,
        0
      ],
      "end_point": [
        1652,
        1
      ],
      "content": "static void\n_swf_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    movr(_R0_REGNO, r1);\n    swf_call(__aeabi_i2d, i2d, _R2_REGNO);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_extr_d_f": {
      "start_point": [
        1654,
        0
      ],
      "end_point": [
        1676,
        1
      ],
      "content": "static void\n_swf_extr_d_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n    swf_call(__aeabi_d2f, d2f, _R2_REGNO);\n    if (jit_fpr_p(r0))\n\tswf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n    else\n\tmovr(r0, _R0_REGNO);\n    jit_unget_reg_args();\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_extr_f_d": {
      "start_point": [
        1678,
        0
      ],
      "end_point": [
        1700,
        1
      ],
      "content": "static void\n_swf_extr_f_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n    swf_call(__aeabi_f2d, f2d, _R1_REGNO);\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    STRDIN(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\telse {\n\t    swf_strin(_R0_REGNO, _FP_REGNO, swf_off(r0) + 8);\n\t    swf_strin(_R1_REGNO, _FP_REGNO, swf_off(r0) + 4);\n\t}\n    }\n    else {\n\tmovr(r0, _R0_REGNO);\n\tmovr(r0 + 1, _R1_REGNO);\n    }\n    jit_unget_reg_args();\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_truncr_f_i": {
      "start_point": [
        1702,
        0
      ],
      "end_point": [
        1754,
        1
      ],
      "content": "static void\n_swf_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if !NAN_TO_INT_IS_ZERO\n    jit_word_t\t\tis_nan;\n    jit_word_t\t\tfast_not_nan;\n    jit_word_t\t\tslow_not_nan;\n#endif\n    jit_get_reg_args();\n    if (jit_fpr_p(r1))\n\tswf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n    else\n\tmovr(_R0_REGNO, r1);\n#if !NAN_TO_INT_IS_ZERO\n    /* >> based on fragment of __aeabi_fcmpun */\n    lshi(_R2_REGNO, _R0_REGNO, 1);\n    if (jit_thumb_p())\n\ttorrrs(THUMB2_MVN|ARM_S, _R0_REGNO, _R3_REGNO, _R2_REGNO,\n\t       encode_thumb_shift(24, ARM_ASR));\n    else\n\tcorrrs(ARM_CC_AL, ARM_MVN|ARM_S|ARM_ASR,\n\t       _R0_REGNO, _R3_REGNO, _R2_REGNO, 24);\n    fast_not_nan = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(ARM_CC_NE, 0);\n\ttshift(THUMB2_LSLI|ARM_S, _R0_REGNO, _R3_REGNO, 9);\n    }\n    else {\n\tCC_B(ARM_CC_NE, 0);\n\tcshift(ARM_CC_AL, ARM_S|ARM_LSL, _R0_REGNO, _R3_REGNO, _R0_REGNO, 9);\n    }\n    slow_not_nan = _jit->pc.w;\n    if (jit_thumb_p())\n\tT2_CC_B(ARM_CC_EQ, 0);\n    else\n\tCC_B(ARM_CC_EQ, 0);\n    movi(r0, 0x80000000);\n    is_nan = _jit->pc.w;\n    if (jit_thumb_p())\n\tT2_B(0);\n    else\n\tB(0);\n    patch_at(arm_patch_jump, fast_not_nan, _jit->pc.w);\n    patch_at(arm_patch_jump, slow_not_nan, _jit->pc.w);\n    /* << based on fragment of __aeabi_fcmpun */\n#endif\n    swf_call(__aeabi_f2iz, f2iz, _R2_REGNO);\n    movr(r0, _R0_REGNO);\n#if !NAN_TO_INT_IS_ZERO\n    patch_at(arm_patch_jump, is_nan, _jit->pc.w);\n#endif\n    jit_unget_reg_args();\n}",
      "lines": 53,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_truncr_d_i": {
      "start_point": [
        1756,
        0
      ],
      "end_point": [
        1818,
        1
      ],
      "content": "static void\n_swf_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if !NAN_TO_INT_IS_ZERO\n    jit_word_t\t\tis_nan;\n    jit_word_t\t\tfast_not_nan;\n    jit_word_t\t\tslow_not_nan;\n#endif\n    jit_get_reg_args();\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p())\n\t    LDRDIN(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\telse {\n\t    swf_ldrin(_R0_REGNO, _FP_REGNO, swf_off(r1) + 8);\n\t    swf_ldrin(_R1_REGNO, _FP_REGNO, swf_off(r1) + 4);\n\t}\n    }\n    else {\n\tmovr(_R0_REGNO, r1);\n\tmovr(_R1_REGNO, r1 + 1);\n    }\n#if !NAN_TO_INT_IS_ZERO\n    /* >> based on fragment of __aeabi_dcmpun */\n    lshi(_R3_REGNO, _R1_REGNO, 1);\n    if (jit_thumb_p())\n\ttorrrs(THUMB2_MVN|ARM_S, _R0_REGNO, _R3_REGNO, _R3_REGNO,\n\t       encode_thumb_shift(21, ARM_ASR));\n    else\n\tcorrrs(ARM_CC_AL, ARM_MVN|ARM_S|ARM_ASR,\n\t       _R0_REGNO, _R3_REGNO, _R3_REGNO, 21);\n    fast_not_nan = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(ARM_CC_NE, 0);\n\ttorrrs(THUMB2_ORR|ARM_S, _R0_REGNO, _R3_REGNO, _R1_REGNO,\n\t       encode_thumb_shift(12, ARM_LSL));\n    }\n    else {\n\tCC_B(ARM_CC_NE, 0);\n\tcorrrs(ARM_CC_AL, ARM_ORR|ARM_S|ARM_LSL,\n\t       _R0_REGNO, _R3_REGNO, _R1_REGNO, 12);\n    }\n    slow_not_nan = _jit->pc.w;\n    if (jit_thumb_p())\n\tT2_CC_B(ARM_CC_EQ, 0);\n    else\n\tCC_B(ARM_CC_EQ, 0);\n    movi(r0, 0x80000000);\n    is_nan = _jit->pc.w;\n    if (jit_thumb_p())\n\tT2_B(0);\n    else\n\tB(0);\n    patch_at(arm_patch_jump, fast_not_nan, _jit->pc.w);\n    patch_at(arm_patch_jump, slow_not_nan, _jit->pc.w);\n    /* << based on fragment of __aeabi_dcmpun */\n#endif\n    swf_call(__aeabi_d2iz, d2iz, _R3_REGNO);\n    movr(r0, _R0_REGNO);\n#if !NAN_TO_INT_IS_ZERO\n    patch_at(arm_patch_jump, is_nan, _jit->pc.w);\n#endif\n    jit_unget_reg_args();\n}",
      "lines": 63,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_movr_f": {
      "start_point": [
        1820,
        0
      ],
      "end_point": [
        1839,
        1
      ],
      "content": "static void\n_swf_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (r0 != r1) {\n\tif (jit_fpr_p(r1)) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t    if (jit_fpr_p(r0))\n\t\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    else\n\t\tmovr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\telse if (jit_fpr_p(r0))\n\t    swf_strin(r1, _FP_REGNO, swf_off(r0) + 8);\n\telse\n\t    movr(r0, r1);\n    }\n}",
      "lines": 20,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_movr_d": {
      "start_point": [
        1841,
        0
      ],
      "end_point": [
        1886,
        1
      ],
      "content": "static void\n_swf_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (r0 != r1) {\n\tif (jit_fpr_p(r1)) {\n\t    if (!jit_thumb_p() && jit_armv5e_p() &&\n\t\t(reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t\tLDRDIN(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\tif (jit_fpr_p(r0))\n\t\t    STRDIN(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t\telse {\n\t\t    movr(r0, rn(reg));\n\t\t    movr(r0 + 1, rn(reg) + 1);\n\t\t}\n\t\tjit_unget_reg_pair(reg);\n\t    }\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\tif (jit_fpr_p(r0))\n\t\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t\telse\n\t\t    movr(r0, rn(reg));\n\t\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 4);\n\t\tif (jit_fpr_p(r0))\n\t\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\t\telse\n\t\t    movr(r0 + 1, rn(reg));\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse if (jit_fpr_p(r0)) {\n\t    if (!jit_thumb_p() && jit_armv5e_p() && !(r1 & 1))\n\t\tSTRDIN(r1, _FP_REGNO, swf_off(r0) + 8);\n\t    else {\n\t\tswf_strin(r1, _FP_REGNO, swf_off(r0) + 8);\n\t\tswf_strin(r1 + 1, _FP_REGNO, swf_off(r0) + 4);\n\t    }\n\t}\n\telse {\n\t    movr(r0, r1);\n\t    movr(r0 + 1, r1 + 1);\n\t}\n    }\n}",
      "lines": 46,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_movi_f": {
      "start_point": [
        1888,
        0
      ],
      "end_point": [
        1905,
        1
      ],
      "content": "static void\n_swf_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_int32_t\t\treg;\n    data.f = i0;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tmovi(r0, data.i);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_movi_d": {
      "start_point": [
        1907,
        0
      ],
      "end_point": [
        1937,
        1
      ],
      "content": "static void\n_swf_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t i0)\n{\n    jit_int32_t\t\treg;\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } data;\n    data.d = i0;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t    movi(rn(reg), data.i[0]);\n\t    movi(rn(reg) + 1, data.i[1]);\n\t    STRDIN(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(reg);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), data.i[0]);\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    movi(rn(reg), data.i[1]);\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tmovi(r0, data.i[0]);\n\tmovi(r0 + 1, data.i[1]);\n    }\n}",
      "lines": 31,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_absr_f": {
      "start_point": [
        1939,
        0
      ],
      "end_point": [
        1962,
        1
      ],
      "content": "static void\n_swf_absr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\tswf_bici(rn(reg), rn(reg), 0x80000000);\n\tif (jit_fpr_p(r0))\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\telse\n\t    movr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r1);\n\tswf_bici(rn(reg), rn(reg), 0x80000000);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tswf_bici(r0, r1, 0x80000000);\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_absr_d": {
      "start_point": [
        1964,
        0
      ],
      "end_point": [
        2009,
        1
      ],
      "content": "static void\n_swf_absr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (jit_fpr_p(r0) && !jit_thumb_p() && jit_armv5e_p() &&\n\t    r0 != r1 && (reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDIN(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t    swf_bici(rn(reg) + 1, rn(reg) + 1, 0x80000000);\n\t    STRDIN(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(reg);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 4);\n\t    swf_bici(rn(reg), rn(reg), 0x80000000);\n\t    if (jit_fpr_p(r0)) {\n\t\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\t\tif (r0 != r1) {\n\t\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t\t}\n\t    }\n\t    else {\n\t\tmovr(r0, rn(reg));\n\t\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\tmovr(r0 + 1, rn(reg));\n\t    }\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r1);\n\tswf_bici(rn(reg), rn(reg), 0x80000000);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\tmovr(rn(reg), r1 + 1);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else {\n\tswf_bici(r0, r1, 0x80000000);\n\tif (r0 != r1)\n\t    movr(r0 + 1, r1 + 1);\n    }\n}",
      "lines": 46,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_negr_f": {
      "start_point": [
        2011,
        0
      ],
      "end_point": [
        2034,
        1
      ],
      "content": "static void\n_swf_negr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\txori(rn(reg), rn(reg), 0x80000000);\n\tif (jit_fpr_p(r0))\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\telse\n\t    movr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r1);\n\txori(rn(reg), rn(reg), 0x80000000);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\txori(r0, r1, 0x80000000);\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_negr_d": {
      "start_point": [
        2036,
        0
      ],
      "end_point": [
        2081,
        1
      ],
      "content": "static void\n_swf_negr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (jit_fpr_p(r0) && !jit_thumb_p() && jit_armv5e_p() &&\n\t    r0 != r1 && (reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDIN(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t    EORI(rn(reg) + 1, rn(reg) + 1, encode_arm_immediate(0x80000000));\n\t    STRDIN(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(reg);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 4);\n\t    xori(rn(reg), rn(reg), 0x80000000);\n\t    if (jit_fpr_p(r0)) {\n\t\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\t\tif (r0 != r1) {\n\t\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t\t}\n\t    }\n\t    else {\n\t\tmovr(r0, rn(reg));\n\t\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t\tmovr(r0 + 1, rn(reg));\n\t    }\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r1);\n\txori(rn(reg), rn(reg), 0x80000000);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\tmovr(rn(reg), r1 + 1);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else {\n\txori(r0, r1, 0x80000000);\n\tif (r0 != r1)\n\t    movr(r0 + 1, r1 + 1);\n    }\n}",
      "lines": 46,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ner_f": {
      "start_point": [
        2083,
        0
      ],
      "end_point": [
        2088,
        1
      ],
      "content": "static void\n_swf_ner_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_iff(__aeabi_fcmpeq, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_nei_f": {
      "start_point": [
        2090,
        0
      ],
      "end_point": [
        2095,
        1
      ],
      "content": "static void\n_swf_nei_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float32_t i0)\n{\n    swf_iff_(__aeabi_fcmpeq, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ner_d": {
      "start_point": [
        2097,
        0
      ],
      "end_point": [
        2102,
        1
      ],
      "content": "static void\n_swf_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_idd(__aeabi_dcmpeq, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_nei_d": {
      "start_point": [
        2104,
        0
      ],
      "end_point": [
        2109,
        1
      ],
      "content": "static void\n_swf_nei_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float64_t i0)\n{\n    swf_idd_(__aeabi_dcmpeq, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ltgtr_f": {
      "start_point": [
        2111,
        0
      ],
      "end_point": [
        2116,
        1
      ],
      "content": "static void\n_swf_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_iunff(__aeabi_fcmpeq, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ltgti_f": {
      "start_point": [
        2118,
        0
      ],
      "end_point": [
        2123,
        1
      ],
      "content": "static void\n_swf_ltgti_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float32_t i0)\n{\n    swf_iunff_(__aeabi_fcmpeq, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ltgtr_d": {
      "start_point": [
        2125,
        0
      ],
      "end_point": [
        2130,
        1
      ],
      "content": "static void\n_swf_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_iundd(__aeabi_dcmpeq, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ltgti_d": {
      "start_point": [
        2132,
        0
      ],
      "end_point": [
        2137,
        1
      ],
      "content": "static void\n_swf_ltgti_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float64_t i0)\n{\n    swf_iundd_(__aeabi_dcmpeq, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ordr_f": {
      "start_point": [
        2139,
        0
      ],
      "end_point": [
        2144,
        1
      ],
      "content": "static void\n_swf_ordr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_iff(__aeabi_fcmpun, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ordi_f": {
      "start_point": [
        2146,
        0
      ],
      "end_point": [
        2151,
        1
      ],
      "content": "static void\n_swf_ordi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float32_t i0)\n{\n    swf_iff_(__aeabi_fcmpun, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ordr_d": {
      "start_point": [
        2153,
        0
      ],
      "end_point": [
        2158,
        1
      ],
      "content": "static void\n_swf_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    swf_idd(__aeabi_dcmpun, r0, r1, r2);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ordi_d": {
      "start_point": [
        2160,
        0
      ],
      "end_point": [
        2165,
        1
      ],
      "content": "static void\n_swf_ordi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float64_t i0)\n{\n    swf_idd_(__aeabi_dcmpun, r0, r1, i0);\n    xori(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldr_f": {
      "start_point": [
        2167,
        0
      ],
      "end_point": [
        2179,
        1
      ],
      "content": "static void\n_swf_ldr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tldxi_i(rn(reg), r1, 0);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tldxi_i(r0, r1, 0);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldr_d": {
      "start_point": [
        2181,
        0
      ],
      "end_point": [
        2207,
        1
      ],
      "content": "static void\n_swf_ldr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDI(rn(reg), r1, 0);\n\t    STRDIN(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(reg);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    ldxi_i(rn(reg), r1, 0);\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\t    ldxi_i(rn(reg), r1, 4);\n\t    swf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else if (!jit_thumb_p() && jit_armv5e_p() && !(r0 & 1))\n\tLDRDI(r0, r1, 0);\n    else {\n\tldxi_i(r0, r1, 0);\n\tldxi_i(r0 + 1, r1, 4);\n    }\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldi_f": {
      "start_point": [
        2209,
        0
      ],
      "end_point": [
        2221,
        1
      ],
      "content": "static void\n_swf_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tldi_i(rn(reg), i0);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tldi_i(r0, i0);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldi_d": {
      "start_point": [
        2223,
        0
      ],
      "end_point": [
        2253,
        1
      ],
      "content": "static void\n_swf_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0) && !jit_thumb_p() && jit_armv5e_p() &&\n\t(rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\tmovi(rn(rg0), i0);\n\tLDRDI(rn(rg0), rn(rg0), 0);\n\tSTRDIN(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg_pair(rg0);\n    }\n    else {\n\trg1 = jit_get_reg(jit_class_gpr);\n\tmovi(rn(rg1), i0);\n\tif (jit_fpr_p(r0)) {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    ldxi_i(rn(rg0), rn(rg1), 0);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    ldxi_i(rn(rg0), rn(rg1), 4);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(rg0);\n\t}\n\telse if (!jit_thumb_p() && jit_armv5e_p() && !(r0 & 1))\n\t    LDRDI(r0, rn(rg1), 0);\n\telse {\n\t    ldxi_i(r0, rn(rg1), 0);\n\t    ldxi_i(r0 + 1, rn(rg1), 0);\n\t}\n\tjit_unget_reg(rg1);\n    }\n}",
      "lines": 31,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldxr_f": {
      "start_point": [
        2255,
        0
      ],
      "end_point": [
        2267,
        1
      ],
      "content": "static void\n_swf_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tldxr_i(rn(reg), r1, r2);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tldxr_i(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldxr_d": {
      "start_point": [
        2269,
        0
      ],
      "end_point": [
        2303,
        1
      ],
      "content": "static void\n_swf_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRD(rn(rg0), r1, r2);\n\t    STRDIN(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(rg0);\n\t}\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addr(rn(rg1), r1, r2);\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    ldxi_i(rn(rg0), rn(rg1), 0);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    ldxi_i(rn(rg0), rn(rg1), 4);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(rg0);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n    else {\n\tif (!jit_thumb_p() && jit_armv5e_p() && !(r0 & 1))\n\t    LDRD(r0, r1, r2);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addr(rn(rg1), r1, r2);\n\t    ldxi_i(r0, rn(rg1), 0);\n\t    ldxi_i(r0 + 1, rn(rg1), 4);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n}",
      "lines": 35,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldxi_f": {
      "start_point": [
        2305,
        0
      ],
      "end_point": [
        2317,
        1
      ],
      "content": "static void\n_swf_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tldxi_i(rn(reg), r1, i0);\n\tswf_strin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tjit_unget_reg(reg);\n    }\n    else\n\tldxi_i(r0, r1, i0);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_ldxi_d": {
      "start_point": [
        2319,
        0
      ],
      "end_point": [
        2386,
        1
      ],
      "content": "static void\n_swf_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    ((i0 >= 0 && i0 <= 255) || (i0 < 0 && i0 >= -255)) &&\n\t    (rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\t    if (i0 >= 0)\n\t\tLDRDI(rn(rg0), r1, i0);\n\t    else\n\t\tLDRDIN(rn(rg0), r1, -i0);\n\t    STRDIN(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    jit_unget_reg_pair(rg0);\n\t}\n\telse if (i0 >= 0 && i0 + 4 <= 4095) {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    ldxi_i(rn(rg0), r1, i0);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    ldxi_i(rn(rg0), r1, i0 + 4);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(rg0);\n\t}\n\telse if (i0 < 0 && ((jit_thumb_p() && i0 >= -255) ||\n\t\t\t    (!jit_thumb_p() && i0 >= -4095))) {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), r1, -i0);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    swf_ldrin(rn(rg0), r1, -(i0 + 4));\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(rg0);\n\t}\n\telse {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addi(rn(rg1), r1, i0);\n\t    ldxi_i(rn(rg0), rn(rg1), 0);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    ldxi_i(rn(rg0), rn(rg1), 4);\n\t    swf_strin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    jit_unget_reg(rg1);\n\t    jit_unget_reg(rg0);\n\t}\n    }\n    else {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    i0 >= 0 && i0 <= 255 && !(r0 & 1))\n\t    LDRDI(r0, r1, i0);\n\telse if (!jit_thumb_p() && jit_armv5e_p() &&\n\t\t i0 < 0 && i0 >= -255 && !(r0 & 1))\n\t    LDRDIN(r0, r1, -i0);\n\telse if (i0 >= 0 && i0 + 4 <= 4095) {\n\t    ldxi_i(r0, r1, i0);\n\t    ldxi_i(r0 + 1, r1, i0 + 4);\n\t}\n\telse if (i0 < 0 && i0 >= -4095) {\n\t    swf_ldrin(r0, r1, -i0);\n\t    swf_ldrin(r0 + 1, r1, -(i0 + 4));\n\t}\n\telse {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    addi(rn(rg0), r1, i0);\n\t    ldxi_i(r0, rn(rg0), 0);\n\t    ldxi_i(r0 + 1, rn(rg0), 4);\n\t    jit_unget_reg(rg0);\n\t}\n    }\n}",
      "lines": 68,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_str_f": {
      "start_point": [
        2388,
        0
      ],
      "end_point": [
        2400,
        1
      ],
      "content": "static void\n_swf_str_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\tstxi_i(0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_i(r0, r1);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_str_d": {
      "start_point": [
        2402,
        0
      ],
      "end_point": [
        2430,
        1
      ],
      "content": "static void\n_swf_str_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (reg = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDIN(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t    STRDI(rn(reg), r0, 0);\n\t    jit_unget_reg_pair(reg);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\t    stxi_i(0, r0, rn(reg));\n\t    swf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 4);\n\t    stxi_i(4, r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tif (!jit_thumb_p() && jit_armv5e_p() && !(r1 & 1))\n\t    STRDI(r1, r0, 0);\n\telse {\n\t    stxi_i(0, r0, r1);\n\t    stxi_i(4, r0, r1 + 1);\n\t}\n    }\n}",
      "lines": 29,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_sti_f": {
      "start_point": [
        2432,
        0
      ],
      "end_point": [
        2444,
        1
      ],
      "content": "static void\n_swf_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r0) + 8);\n\tsti_i(i0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tsti_i(i0, r0);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_sti_d": {
      "start_point": [
        2446,
        0
      ],
      "end_point": [
        2483,
        1
      ],
      "content": "static void\n_swf_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    movi(rn(rg1), i0);\n\t    LDRDIN(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    STRDI(rn(rg0), rn(rg1), 0);\n\t    jit_unget_reg(rg1);\n\t    jit_unget_reg_pair(rg0);\n\t}\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    movi(rn(rg1), i0);\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r0) + 8);\n\t    stxi_i(0, rn(rg1), rn(rg0));\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r0) + 4);\n\t    stxi_i(4, rn(rg1), rn(rg0));\n\t    jit_unget_reg(rg1);\n\t    jit_unget_reg(rg0);\n\t}\n    }\n    else {\n\trg1 = jit_get_reg(jit_class_gpr);\n\tmovi(rn(rg1), i0);\n\tif (!jit_thumb_p() && jit_armv5e_p() && !(r0 & 1))\n\t    STRDI(r0, rn(rg1), 0);\n\telse {\n\t    stxi_i(0, rn(rg1), r0);\n\t    stxi_i(4, rn(rg1), r0 + 1);\n\t}\n\tjit_unget_reg(rg1);\n    }\n}",
      "lines": 38,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_stxr_f": {
      "start_point": [
        2485,
        0
      ],
      "end_point": [
        2497,
        1
      ],
      "content": "static void\n_swf_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r2)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r2) + 8);\n\tstxr_i(r1, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tstxr_i(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_stxr_d": {
      "start_point": [
        2499,
        0
      ],
      "end_point": [
        2533,
        1
      ],
      "content": "static void\n_swf_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r2)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    (rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDIN(rn(rg0), _FP_REGNO, swf_off(r2) + 8);\n\t    STRD(rn(rg0), r0, r1);\n\t    jit_unget_reg_pair(rg0);\n\t}\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addr(rn(rg1), r0, r1);\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r2) + 8);\n\t    stxi_i(0, rn(rg1), rn(rg0));\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r2) + 4);\n\t    stxi_i(4, rn(rg1), rn(rg0));\n\t    jit_unget_reg(rg0);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n    else {\n\tif (!jit_thumb_p() && jit_armv5e_p() && !(r2 & 1))\n\t    STRD(r0, r1, r2);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addr(rn(rg1), r0, r1);\n\t    stxi_i(0, rn(rg1), r2);\n\t    stxi_i(4, rn(rg1), r2 + 1);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n}",
      "lines": 35,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_stxi_f": {
      "start_point": [
        2535,
        0
      ],
      "end_point": [
        2547,
        1
      ],
      "content": "static void\n_swf_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tswf_ldrin(rn(reg), _FP_REGNO, swf_off(r1) + 8);\n\tstxi_i(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tstxi_i(i0, r0, r1);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_stxi_d": {
      "start_point": [
        2549,
        0
      ],
      "end_point": [
        2617,
        1
      ],
      "content": "static void\n_swf_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r1)) {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    ((i0 >= 0 && i0 <= 255) || (i0 < 0 && i0 >= -255)) &&\n\t    (rg0 = jit_get_reg_pair()) != JIT_NOREG) {\n\t    LDRDIN(rn(rg0), _FP_REGNO, swf_off(r1) + 8);\n\t    if (i0 >= 0 && i0 <= 255)\n\t\tSTRDI(rn(rg0), r0, i0);\n\t    else\n\t\tSTRDIN(rn(rg0), r0, -i0);\n\t    jit_unget_reg_pair(rg0);\n\t}\n\telse if (i0 >= 0 && i0 + 4 <= 4095) {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 8);\n\t    stxi_i(i0, r0, rn(rg0));\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 4);\n\t    stxi_i(i0 + 4, r0, rn(rg0));\n\t    jit_unget_reg(rg0);\n\t}\n\telse if (i0 < 0 && ((jit_thumb_p() && i0 >= -255) ||\n\t\t\t    (!jit_thumb_p() && i0 >= -4095))) {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 8);\n\t    swf_strin(rn(rg0), r0, -i0);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 4);\n\t    swf_strin(rn(rg0), r0, -(i0 + 4));\n\t    jit_unget_reg(rg0);\n\t}\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addi(rn(rg1), r0, i0);\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 8);\n\t    stxi_i(0, rn(rg1), rn(rg0));\n\t    swf_ldrin(rn(rg0), _FP_REGNO, swf_off(r1) + 4);\n\t    stxi_i(4, rn(rg1), rn(rg0));\n\t    jit_unget_reg(rg0);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n    else {\n\tif (!jit_thumb_p() && jit_armv5e_p() &&\n\t    i0 >= 0 && i0 <= 255 && !(r1 & 1))\n\t    STRDI(r1, r0, i0);\n\telse if (!jit_thumb_p() && jit_armv5e_p() &&\n\t\t i0 < 0 && i0 >= -255 && !(r1 & 1))\n\t    STRDIN(r1, r0, -i0);\n\telse if (i0 >= 0 && i0 + 4 <= 4095) {\n\t    stxi_i(i0, r0, r1);\n\t    stxi_i(i0 + 4, r0, r1 + 1);\n\t}\n\telse if (i0 < 0 && ((jit_thumb_p() && i0 >= 255) ||\n\t\t\t    (!jit_thumb_p() && i0 >= -4095))) {\n\t    swf_strin(r1, r0, -i0);\n\t    swf_strin(r1 + 1, r0, -(i0 + 4));\n\t}\n\telse {\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    addi(rn(rg1), r0, i0);\n\t    stxi_i(0, rn(rg1), r1);\n\t    stxi_i(4, rn(rg1), r1 + 1);\n\t    jit_unget_reg(rg1);\n\t}\n    }\n}",
      "lines": 69,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_swf_vaarg_d": {
      "start_point": [
        2619,
        0
      ],
      "end_point": [
        2637,
        1
      ],
      "content": "static void\n_swf_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Adjust pointer. */\n    reg = jit_get_reg(jit_class_gpr);\n    andi(rn(reg), r1, 7);\n    addr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n\n    /* Load argument. */\n    swf_ldr_d(r0, r1);\n\n    /* Update stack pointer. */\n    addi(r1, r1, sizeof(jit_float64_t));\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_arm-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_arm-vfp.c": {
    "encode_vfp_double": {
      "start_point": [
        813,
        0
      ],
      "end_point": [
        934,
        1
      ],
      "content": "static int\nencode_vfp_double(int mov, int inv, unsigned lo, unsigned hi)\n{\n    int\t\tcode, mode, imm, mask;\n\n    if (hi != lo) {\n\tif (mov && !inv) {\n\t    /* (I64)\n\t     *\taaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhh\n\t     */\n\t    for (mode = 0, mask = 0xff; mode < 4; mask <<= 8, mode++) {\n\t\timm = lo & mask;\n\t\tif (imm != mask && imm != 0)\n\t\t    goto fail;\n\t\timm = hi & mask;\n\t\tif (imm != mask && imm != 0)\n\t\t    goto fail;\n\t    }\n\t    mode = 0xe20;\n\t    imm = (((hi & 0x80000000) >> 24) | ((hi & 0x00800000) >> 17) |\n\t\t   ((hi & 0x00008000) >> 10) | ((hi & 0x00000080) >>  3) |\n\t\t   ((lo & 0x80000000) >> 28) | ((lo & 0x00800000) >> 21) |\n\t\t   ((lo & 0x00008000) >> 14) | ((lo & 0x00000080) >>  7));\n\t    goto success;\n\t}\n\tgoto fail;\n    }\n    /*  (I32)\n     *  00000000 00000000 00000000 abcdefgh\n     *  00000000 00000000 abcdefgh 00000000\n     *  00000000 abcdefgh 00000000 00000000\n     *  abcdefgh 00000000 00000000 00000000 */\n    for (mode = 0, mask = 0xff; mode < 4; mask <<= 8, mode++) {\n\tif ((lo & mask) == lo) {\n\t    imm = lo >> (mode << 3);\n\t    mode <<= 9;\n\t    goto success;\n\t}\n    }\n    /*  (I16)\n     *  00000000 abcdefgh 00000000 abcdefgh\n     *  abcdefgh 00000000 abcdefgh 00000000 */\n    for (mode = 0, mask = 0xff; mode < 2; mask <<= 8, mode++) {\n\tif ((lo & mask) && ((lo & (mask << 16)) >> 16) == (lo & mask)) {\n\t    imm = lo >> (mode << 3);\n\t    mode = 0x800 | (mode << 9);\n\t    goto success;\n\t}\n    }\n    if (mov) {\n\t/*  (I32)\n\t *  00000000 00000000 abcdefgh 11111111\n\t *  00000000 abcdefgh 11111111 11111111 */\n\tfor (mode = 0, mask = 0xff; mode < 2;\n\t     mask = (mask << 8) | 0xff, mode++) {\n\t    if ((lo & mask) == mask &&\n\t\t!((lo & ~mask) >> 8) &&\n\t\t(imm = lo >> (8 + (mode << 8)))) {\n\t\tmode = 0xc00 | (mode << 8);\n\t\tgoto success;\n\t    }\n\t}\n\tif (!inv) {\n\t    /* (F32)\n\t     *  aBbbbbbc defgh000 00000000 00000000\n\t     *  from the ARM Architecture Reference Manual:\n\t     *  In this entry, B = NOT(b). The bit pattern represents the\n\t     *  floating-point number (-1)^s* 2^exp * mantissa, where\n\t     *  S = UInt(a),\n\t     *  exp = UInt(NOT(b):c:d)-3 and\n\t     *  mantissa = (16+UInt(e:f:g:h))/16. */\n\t    if ((lo & 0x7ffff) == 0 &&\n\t\t(((lo & 0x7e000000) == 0x3e000000) ||\n\t\t ((lo & 0x7e000000) == 0x40000000))) {\n\t\tmode = 0xf00;\n\t\timm = ((lo >> 24) & 0x80) | ((lo >> 19) & 0x7f);\n\t\tgoto success;\n\t    }\n\t}\n    }\n\nfail:\n    /* need another approach (load from memory, move from arm register, etc) */\n    return (-1);\n\nsuccess:\n    code = inv ? ARM_VMVNI : ARM_VMOVI;\n    switch ((mode & 0xf00) >> 8) {\n\tcase 0x0:\tcase 0x2:\tcase 0x4:\tcase 0x6:\n\tcase 0x8:\tcase 0xa:\n\t    if (inv)\tmode |= 0x20;\n\t    if (!mov)\tmode |= 0x100;\n\t    break;\n\tcase 0x1:\tcase 0x3:\tcase 0x5:\tcase 0x7:\n\t    /* should actually not reach here */\n\t    assert(!inv);\n\tcase 0x9:\tcase 0xb:\n\t    assert(!mov);\n\t    break;\n\tcase 0xc:\tcase 0xd:\n\t    /* should actually not reach here */\n\t    assert(inv);\n\tcase 0xe:\n\t    assert(mode & 0x20);\n\t    assert(mov && !inv);\n\t    break;\n\tdefault:\n\t    assert(!(mode & 0x20));\n\t    break;\n    }\n    imm = ((imm & 0x80) << 17) | ((imm & 0x70) << 12) | (imm & 0x0f);\n    code |= mode | imm;\n    if (jit_thumb_p()) {\n\tif (code & 0x1000000)\n\t    code |= 0xff000000;\n\telse\n\t    code |= 0xef000000;\n    }\n    else\n\tcode |= ARM_CC_NV;\n    return (code);\n}",
      "lines": 122,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_vodi": {
      "start_point": [
        936,
        0
      ],
      "end_point": [
        947,
        1
      ],
      "content": "static void\n_vodi(jit_state_t *_jit, int oi, int r0)\n{\n    jit_thumb_t\tthumb;\n    assert(!(oi  & 0x0000f000));\n    assert(!(r0 & 1));\tr0 = vfp_regno(r0);\n    thumb.i = oi|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_voqi": {
      "start_point": [
        949,
        0
      ],
      "end_point": [
        960,
        1
      ],
      "content": "static void\n_voqi(jit_state_t *_jit, int oi, int r0)\n{\n    jit_thumb_t\tthumb;\n    assert(!(oi  & 0x0000f000));\n    assert(!(r0 & 3));\tr0 = vfp_regno(r0);\n    thumb.i = oi|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vo_ss": {
      "start_point": [
        962,
        0
      ],
      "end_point": [
        975,
        1
      ],
      "content": "static void\n_cc_vo_ss(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    if (r0 & 1)\to |= ARM_V_D;\tr0 = vfp_regno(r0);\n    if (r1 & 1)\to |= ARM_V_M;\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r0)<<12)|_u4(r1);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vo_dd": {
      "start_point": [
        977,
        0
      ],
      "end_point": [
        990,
        1
      ],
      "content": "static void\n_cc_vo_dd(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    assert(!(r0 & 1) && !(r1 & 1));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r0)<<12)|_u4(r1);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vo_qd": {
      "start_point": [
        992,
        0
      ],
      "end_point": [
        1005,
        1
      ],
      "content": "static void\n_cc_vo_qd(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    assert(!(r0 & 3) && !(r1 & 1));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r0)<<12)|_u4(r1);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vo_qq": {
      "start_point": [
        1007,
        0
      ],
      "end_point": [
        1020,
        1
      ],
      "content": "static void\n_cc_vo_qq(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    assert(!(r0 & 3) && !(r1 & 3));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r0)<<12)|_u4(r1);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vorr_": {
      "start_point": [
        1022,
        0
      ],
      "end_point": [
        1033,
        1
      ],
      "content": "static void\n_cc_vorr_(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vors_": {
      "start_point": [
        1035,
        0
      ],
      "end_point": [
        1047,
        1
      ],
      "content": "static void\n_cc_vors_(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    if (r1 & 1)\to |= ARM_V_N;\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vorv_": {
      "start_point": [
        1049,
        0
      ],
      "end_point": [
        1061,
        1
      ],
      "content": "static void\n_cc_vorv_(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    if (r1 & 1)\to |= ARM_V_M;\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vori_": {
      "start_point": [
        1063,
        0
      ],
      "end_point": [
        1076,
        1
      ],
      "content": "static void\n_cc_vori_(jit_state_t *_jit, int cc, int o, int r0, int r1)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf000f00f));\n    /* use same bit pattern, to set opc1... */\n    if (r1 & 1)\to |= ARM_V_I32;\tr1 = vfp_regno(r1);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vorrd": {
      "start_point": [
        1078,
        0
      ],
      "end_point": [
        1091,
        1
      ],
      "content": "static void\n_cc_vorrd(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    assert(!(r2 & 1));\n    r2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vosss": {
      "start_point": [
        1093,
        0
      ],
      "end_point": [
        1107,
        1
      ],
      "content": "static void\n_cc_vosss(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    if (r0 & 1)\to |= ARM_V_D;\tr0 = vfp_regno(r0);\n    if (r1 & 1)\to |= ARM_V_N;\tr1 = vfp_regno(r1);\n    if (r2 & 1)\to |= ARM_V_M;\tr2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_voddd": {
      "start_point": [
        1109,
        0
      ],
      "end_point": [
        1122,
        1
      ],
      "content": "static void\n_cc_voddd(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    assert(!(r0 & 1) && !(r1 & 1) && !(r2 & 1));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\tr2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_voqdd": {
      "start_point": [
        1124,
        0
      ],
      "end_point": [
        1137,
        1
      ],
      "content": "static void\n_cc_voqdd(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    assert(!(r0 & 3) && !(r1 & 1) && !(r2 & 1));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\tr2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_voqqd": {
      "start_point": [
        1139,
        0
      ],
      "end_point": [
        1152,
        1
      ],
      "content": "static void\n_cc_voqqd(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    assert(!(r0 & 3) && !(r1 & 3) && !(r2 & 1));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\tr2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_voqqq": {
      "start_point": [
        1154,
        0
      ],
      "end_point": [
        1167,
        1
      ],
      "content": "static void\n_cc_voqqq(jit_state_t *_jit, int cc, int o, int r0, int r1, int r2)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff00f));\n    assert(!(r0 & 3) && !(r1 & 3) && !(r2 & 3));\n    r0 = vfp_regno(r0);\tr1 = vfp_regno(r1);\tr2 = vfp_regno(r2);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u4(r2);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vldst": {
      "start_point": [
        1169,
        0
      ],
      "end_point": [
        1186,
        1
      ],
      "content": "static void\n_cc_vldst(jit_state_t *_jit, int cc, int o, int r0, int r1, int i0)\n{\n    jit_thumb_t\tthumb;\n    /* i0 << 2 is byte offset */\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff0ff));\n    if (r0 & 1) {\n\tassert(!(o & ARM_V_F64));\n\to |= ARM_V_D;\n    }\n    r0 = vfp_regno(r0);\n    thumb.i = cc|o|(_u4(r1)<<16)|(_u4(r0)<<12)|_u8(i0);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc_vorsl": {
      "start_point": [
        1188,
        0
      ],
      "end_point": [
        1204,
        1
      ],
      "content": "static void\n_cc_vorsl(jit_state_t *_jit, int cc, int o, int r0, int r1, int i0)\n{\n    jit_thumb_t\tthumb;\n    assert(!(cc & 0x0fffffff));\n    assert(!(o  & 0xf00ff0ff));\n    /* save i0 double precision registers */\n    if (o & ARM_V_F64)\t\ti0 <<= 1;\n    /* if (r1 & 1) cc & ARM_V_F64 must be false */\n    if (r1 & 1)\to |= ARM_V_D;\tr1 = vfp_regno(r1);\n    assert(i0 && !(i0 & 1) && r1 + i0 <= 32);\n    thumb.i = cc|o|(_u4(r0)<<16)|(_u4(r1)<<12)|_u8(i0);\n    if (jit_thumb_p())\n\tiss(thumb.s[0], thumb.s[1]);\n    else\n\tii(thumb.i);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_movr_f": {
      "start_point": [
        1206,
        0
      ],
      "end_point": [
        1221,
        1
      ],
      "content": "static void\n_vfp_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1) {\n\tif (jit_fpr_p(r1)) {\n\t    if (jit_fpr_p(r0))\n\t\tVMOV_F32(r0, r1);\n\t    else\n\t\tVMOV_A_S(r0, r1);\n\t}\n\telse if (jit_fpr_p(r0))\n\t    VMOV_S_A(r0, r1);\n\telse\n\t    movr(r0, r1);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_movr_d": {
      "start_point": [
        1223,
        0
      ],
      "end_point": [
        1242,
        1
      ],
      "content": "static void\n_vfp_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1) {\n\tif (jit_fpr_p(r1)) {\n\t    if (jit_fpr_p(r0))\n\t\tVMOV_F64(r0, r1);\n\t    else\n\t\tVMOV_AA_D(r0, r0 + 1, r1);\n\t}\n\telse if (jit_fpr_p(r0))\n\t    VMOV_D_AA(r0, r1, r1 + 1);\n\telse {\n\t    /* minor consistency check */\n\t    assert(r0 + 1 != r1 && r0 -1 != r1);\n\t    movr(r0, r1);\n\t    movr(r0 + 1, r1 + 1);\n\t}\n    }\n}",
      "lines": 20,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_movi_f": {
      "start_point": [
        1244,
        0
      ],
      "end_point": [
        1270,
        1
      ],
      "content": "static void\n_vfp_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } u;\n    jit_int32_t\t\treg;\n    jit_int32_t\t\tcode;\n    u.f = i0;\n    if (jit_fpr_p(r0)) {\n\t/* float arguments are packed, for others,\n\t * lightning only address even registers */\n\tif (!(r0 & 1) && (r0 - 16) >= 0 &&\n\t    ((code = encode_vfp_double(1, 0, u.i, u.i)) != -1 ||\n\t     (code = encode_vfp_double(1, 1, ~u.i, ~u.i)) != -1))\n\t    VIMM(code, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), u.i);\n\t    VMOV_S_A(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tmovi(r0, u.i);\n}",
      "lines": 27,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_movi_d": {
      "start_point": [
        1272,
        0
      ],
      "end_point": [
        1300,
        1
      ],
      "content": "static void\n_vfp_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t i0)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_float64_t\td;\n    } u;\n    jit_int32_t\t\tcode;\n    jit_int32_t\t\trg0, rg1;\n    u.d = i0;\n    if (jit_fpr_p(r0)) {\n\tif ((code = encode_vfp_double(1, 0, u.i[0], u.i[1])) != -1 ||\n\t    (code = encode_vfp_double(1, 1, ~u.i[0], ~u.i[1])) != -1)\n\t    VIMM(code, r0);\n\telse {\n\t    rg0 = jit_get_reg(jit_class_gpr);\n\t    rg1 = jit_get_reg(jit_class_gpr);\n\t    movi(rn(rg0), u.i[0]);\n\t    movi(rn(rg1), u.i[1]);\n\t    VMOV_D_AA(r0, rn(rg0), rn(rg1));\n\t    jit_unget_reg(rg1);\n\t    jit_unget_reg(rg0);\n\t}\n    }\n    else {\n\tmovi(r0, u.i[0]);\n\tmovi(r0 + 1, u.i[1]);\n    }\n}",
      "lines": 29,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_extr_d_f": {
      "start_point": [
        1302,
        0
      ],
      "end_point": [
        1326,
        1
      ],
      "content": "static void\n_vfp_extr_d_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (jit_fpr_p(r0))\n\t    VCVT_F64_F32(r0, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_fpr);\n\t    VCVT_F64_F32(rn(reg), r1);\n\t    VMOV_A_S(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_fpr);\n\tVMOV_S_A(rn(reg), r1);\n\tVCVT_F64_F32(rn(reg), rn(reg));\n\tif (jit_fpr_p(r0))\n\t    VMOV_F32(r0, rn(reg));\n\telse\n\t    VMOV_A_S(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_extr_f_d": {
      "start_point": [
        1328,
        0
      ],
      "end_point": [
        1352,
        1
      ],
      "content": "static void\n_vfp_extr_f_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (jit_fpr_p(r0))\n\t    VCVT_F32_F64(r0, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_fpr);\n\t    VCVT_F32_F64(rn(reg), r1);\n\t    VMOV_AA_D(r0, r0 + 1, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_fpr);\n\tVMOV_D_AA(rn(reg), r1, r1 + 1);\n\tVCVT_F32_F64(rn(reg), rn(reg));\n\tif (jit_fpr_p(r0))\n\t    VMOV_F64(r0, rn(reg));\n\telse\n\t    VMOV_AA_D(r0, r0 + 1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_extr_f": {
      "start_point": [
        1354,
        0
      ],
      "end_point": [
        1369,
        1
      ],
      "content": "static void\n_vfp_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\tVMOV_V_I32(r0, r1);\n\tVCVT_F32_S32(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_fpr);\n\tVMOV_V_I32(rn(reg), r1);\n\tVCVT_F32_S32(rn(reg), rn(reg));\n\tVMOV_F32(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_extr_d": {
      "start_point": [
        1371,
        0
      ],
      "end_point": [
        1386,
        1
      ],
      "content": "static void\n_vfp_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\tVMOV_V_I32(r0, r1);\n\tVCVT_F64_S32(r0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_fpr);\n\tVMOV_V_I32(rn(reg), r1);\n\tVCVT_F64_S32(rn(reg), rn(reg));\n\tVMOV_F64(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_truncr_f_i": {
      "start_point": [
        1388,
        0
      ],
      "end_point": [
        1401,
        1
      ],
      "content": "static void\n_vfp_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    if (jit_fpr_p(r1))\n\tVCVT_S32_F32(rn(reg), r1);\n    else {\n\tVMOV_V_I32(rn(reg), r1);\n\tVCVT_S32_F32(rn(reg), rn(reg));\n    }\n    VMOV_A_S32(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_truncr_d_i": {
      "start_point": [
        1403,
        0
      ],
      "end_point": [
        1416,
        1
      ],
      "content": "static void\n_vfp_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    if (jit_fpr_p(r1))\n\tVCVT_S32_F64(rn(reg), r1);\n    else {\n\tVMOV_V_I32(rn(reg), r1);\n\tVCVT_S32_F64(rn(reg), rn(reg));\n    }\n    VMOV_A_S32(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_cmp_f": {
      "start_point": [
        1476,
        0
      ],
      "end_point": [
        1503,
        1
      ],
      "content": "static void\n_vfp_cmp_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0)) {\n\tif (jit_fpr_p(r1))\n\t    VCMP_F32(r0, r1);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_fpr);\n\t    VMOV_S_A(rn(rg1), r1);\n\t    VCMP_F32(r0, rn(rg1));\n\t    jit_unget_reg(rg1);\n\t}\n    }\n    else {\n\trg0 = jit_get_reg(jit_class_fpr);\n\tVMOV_S_A(rn(rg0), r0);\n\tif (jit_fpr_p(r1))\n\t    VCMP_F32(rn(rg0), r1);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_fpr);\n\t    VMOV_S_A(rn(rg1), r1);\n\t    VCMP_F32(rn(rg0), rn(rg1));\n\t    jit_unget_reg(rg1);\n\t}\n\tjit_unget_reg(rg0);\n    }\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_cmp_d": {
      "start_point": [
        1505,
        0
      ],
      "end_point": [
        1532,
        1
      ],
      "content": "static void\n_vfp_cmp_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0, rg1;\n    if (jit_fpr_p(r0)) {\n\tif (jit_fpr_p(r1))\n\t    VCMP_F64(r0, r1);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_fpr);\n\t    VMOV_D_AA(rn(rg1), r1, r1 + 1);\n\t    VCMP_F64(r0, rn(rg1));\n\t    jit_unget_reg(rg1);\n\t}\n    }\n    else {\n\trg0 = jit_get_reg(jit_class_fpr);\n\tVMOV_D_AA(rn(rg0), r0, r0 + 1);\n\tif (jit_fpr_p(r1))\n\t    VCMP_F64(rn(rg0), r1);\n\telse {\n\t    rg1 = jit_get_reg(jit_class_fpr);\n\t    VMOV_D_AA(rn(rg1), r1, r1 + 1);\n\t    VCMP_F64(rn(rg0), rn(rg1));\n\t    jit_unget_reg(rg1);\n\t}\n\tjit_unget_reg(rg0);\n    }\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp01_x": {
      "start_point": [
        1534,
        0
      ],
      "end_point": [
        1569,
        1
      ],
      "content": "static void\n_vcmp01_x(jit_state_t *_jit, int c0, int c1, jit_int32_t r0)\n{\n    VMRS(_R15_REGNO);\n    if (jit_thumb_p()) {\n\tif ((c0 ^ c1) >> 28 == 1) {\n\t    ITE(c0);\n\t    if (r0 < 8) {\n\t\tT1_MOVI(r0, 0);\n\t\tT1_MOVI(r0, 1);\n\t    }\n\t    else {\n\t\tT2_MOVI(r0, 0);\n\t\tT2_MOVI(r0, 1);\n\t    }\n\t}\n\telse {\n\t    if (r0 < 8) {\n\t\tIT(c0);\n\t\tT1_MOVI(r0, 0);\n\t\tIT(c1);\n\t\tT1_MOVI(r0, 1);\n\t    }\n\t    else {\n\t\tIT(c0);\n\t\tT2_MOVI(r0, 0);\n\t\tIT(c1);\n\t\tT2_MOVI(r0, 1);\n\t    }\n\t}\n    }\n    else {\n\tCC_MOVI(c0, r0, 0);\n\tCC_MOVI(c1, r0, 1);\n    }\n}",
      "lines": 36,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp01_f": {
      "start_point": [
        1571,
        0
      ],
      "end_point": [
        1577,
        1
      ],
      "content": "static void\n_vcmp01_f(jit_state_t *_jit, int c0, int c1,\n\t  jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vcmp01_x(c0, c1, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp01_d": {
      "start_point": [
        1579,
        0
      ],
      "end_point": [
        1585,
        1
      ],
      "content": "static void\n_vcmp01_d(jit_state_t *_jit, int c0, int c1,\n\t  jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vcmp01_x(c0, c1, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp10_x": {
      "start_point": [
        1587,
        0
      ],
      "end_point": [
        1609,
        1
      ],
      "content": "static void\n_vcmp10_x(jit_state_t *_jit, int cc, jit_int32_t r0)\n{\n    if (jit_thumb_p()) {\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 1);\n\t    VMRS(_R15_REGNO);\n\t    IT(cc);\n\t    T1_MOVI(r0, 0);\n\t}\n\telse {\n\t    T2_MOVI(r0, 1);\n\t    VMRS(_R15_REGNO);\n\t    IT(cc);\n\t    T2_MOVI(r0, 0);\n\t}\n    }\n    else {\n\tVMRS(_R15_REGNO);\n\tMOVI(r0, 1);\n\tCC_MOVI(cc, r0, 0);\n    }\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp_10_f": {
      "start_point": [
        1610,
        0
      ],
      "end_point": [
        1616,
        1
      ],
      "content": "static void\n_vcmp_10_f(jit_state_t *_jit, int cc,\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vcmp10_x(cc, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp_10_d": {
      "start_point": [
        1618,
        0
      ],
      "end_point": [
        1624,
        1
      ],
      "content": "static void\n_vcmp_10_d(jit_state_t *_jit, int cc,\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vcmp10_x(cc, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_uneqr_x": {
      "start_point": [
        1643,
        0
      ],
      "end_point": [
        1667,
        1
      ],
      "content": "static void\n_vfp_uneqr_x(jit_state_t *_jit, jit_int32_t r0)\n{\n    VMRS(_R15_REGNO);\n    if (jit_thumb_p()) {\n\tITE(ARM_CC_NE);\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 0);\n\t    T1_MOVI(r0, 1);\n\t    IT(ARM_CC_VS);\n\t    T1_MOVI(r0, 1);\n\t}\n\telse {\n\t    T2_MOVI(r0, 0);\n\t    T2_MOVI(r0, 1);\n\t    IT(ARM_CC_VS);\n\t    T2_MOVI(r0, 1);\n\t}\n    }\n    else {\n\tCC_MOVI(ARM_CC_NE, r0, 0);\n\tCC_MOVI(ARM_CC_EQ, r0, 1);\n\tCC_MOVI(ARM_CC_VS, r0, 1);\n    }\n}",
      "lines": 25,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_uneqr_f": {
      "start_point": [
        1669,
        0
      ],
      "end_point": [
        1674,
        1
      ],
      "content": "static void\n_vfp_uneqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vfp_uneqr_x(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_uneqr_d": {
      "start_point": [
        1676,
        0
      ],
      "end_point": [
        1683,
        1
      ],
      "content": "fopi(uneq)\n\nstatic void\n_vfp_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vfp_uneqr_x(r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(uneq)",
        "fopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vcmp_01_x": {
      "start_point": [
        1685,
        0
      ],
      "end_point": [
        1709,
        1
      ],
      "content": "dopi(uneq)\n\nstatic void\n_vcmp_01_x(jit_state_t *_jit, int cc, jit_int32_t r0)\n{\n    if (jit_thumb_p()) {\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 0);\n\t    VMRS(_R15_REGNO);\n\t    IT(cc);\n\t    T1_MOVI(r0, 1);\n\t}\n\telse {\n\t    T2_MOVI(r0, 0);\n\t    VMRS(_R15_REGNO);\n\t    IT(cc);\n\t    T2_MOVI(r0, 1);\n\t}\n    }\n    else {\n\tMOVI(r0, 0);\n\tVMRS(_R15_REGNO);\n\tCC_MOVI(cc, r0, 1);\n    }\n}",
      "lines": 25,
      "depth": 10,
      "decorators": [
        "dopi(uneq)",
        "dopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vcmp_01_f": {
      "start_point": [
        1711,
        0
      ],
      "end_point": [
        1717,
        1
      ],
      "content": "static void\n_vcmp_01_f(jit_state_t *_jit, int cc,\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vcmp_01_x(cc, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vcmp_01_d": {
      "start_point": [
        1719,
        0
      ],
      "end_point": [
        1725,
        1
      ],
      "content": "static void\n_vcmp_01_d(jit_state_t *_jit, int cc,\n\t   jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vcmp_01_x(cc, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ltgtr_x": {
      "start_point": [
        1732,
        0
      ],
      "end_point": [
        1756,
        1
      ],
      "content": "static void\n_vfp_ltgtr_x(jit_state_t *_jit, jit_int32_t r0)\n{\n    VMRS(_R15_REGNO);\n    if (jit_thumb_p()) {\n\tITE(ARM_CC_NE);\n\tif (r0 < 8) {\n\t    T1_MOVI(r0, 1);\n\t    T1_MOVI(r0, 0);\n\t    IT(ARM_CC_VS);\n\t    T1_MOVI(r0, 0);\n\t}\n\telse {\n\t    T2_MOVI(r0, 1);\n\t    T2_MOVI(r0, 0);\n\t    IT(ARM_CC_VS);\n\t    T2_MOVI(r0, 0);\n\t}\n    }\n    else {\n\tCC_MOVI(ARM_CC_NE, r0, 1);\n\tCC_MOVI(ARM_CC_EQ, r0, 0);\n\tCC_MOVI(ARM_CC_VS, r0, 0);\n    }\n}",
      "lines": 25,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ltgtr_f": {
      "start_point": [
        1758,
        0
      ],
      "end_point": [
        1763,
        1
      ],
      "content": "static void\n_vfp_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vfp_ltgtr_x(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ltgtr_d": {
      "start_point": [
        1765,
        0
      ],
      "end_point": [
        1772,
        1
      ],
      "content": "fopi(ltgt)\n\nstatic void\n_vfp_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vfp_ltgtr_x(r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(ltgt)",
        "fopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vfp_ordr_f": {
      "start_point": [
        1774,
        0
      ],
      "end_point": [
        1781,
        1
      ],
      "content": "dopi(ltgt)\n\nstatic void\n_vfp_ordr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vcmp10_x(ARM_CC_VS, r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "dopi(ltgt)",
        "dopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vfp_ordr_d": {
      "start_point": [
        1783,
        0
      ],
      "end_point": [
        1790,
        1
      ],
      "content": "fopi(ord)\n\nstatic void\n_vfp_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vcmp10_x(ARM_CC_VS, r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(ord)",
        "fopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vfp_unordr_f": {
      "start_point": [
        1792,
        0
      ],
      "end_point": [
        1799,
        1
      ],
      "content": "dopi(ord)\n\nstatic void\n_vfp_unordr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_f(r1, r2);\n    vcmp_01_x(ARM_CC_VS, r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "dopi(ord)",
        "dopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vfp_unordr_d": {
      "start_point": [
        1801,
        0
      ],
      "end_point": [
        1808,
        1
      ],
      "content": "fopi(unord)\n\nstatic void\n_vfp_unordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    vfp_cmp_d(r1, r2);\n    vcmp_01_x(ARM_CC_VS, r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "fopi(unord)",
        "fopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vbcmp_x": {
      "start_point": [
        1810,
        0
      ],
      "end_point": [
        1829,
        1
      ],
      "content": "dopi(unord)\n\nstatic jit_word_t\n_vbcmp_x(jit_state_t *_jit, int cc, jit_word_t i0)\n{\n    jit_word_t\t\td, w;\n    VMRS(_R15_REGNO);\n    w = _jit->pc.w;\n    if (jit_thumb_p()) {\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(cc, encode_thumb_cc_jump(d));\n    }\n    else {\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(cc, d & 0x00ffffff);\n    }\n    return (w);\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "dopi(unord)",
        "dopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vbcmp_f": {
      "start_point": [
        1832,
        0
      ],
      "end_point": [
        1838,
        1
      ],
      "content": "static jit_word_t\n_vbcmp_f(jit_state_t *_jit, int cc,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_f(r0, r1);\n    return (vbcmp_x(cc, i0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vbcmp_d": {
      "start_point": [
        1840,
        0
      ],
      "end_point": [
        1846,
        1
      ],
      "content": "static jit_word_t\n_vbcmp_d(jit_state_t *_jit, int cc,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_d(r0, r1);\n    return (vbcmp_x(cc, i0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vbncmp_x": {
      "start_point": [
        1848,
        0
      ],
      "end_point": [
        1870,
        1
      ],
      "content": "static jit_word_t\n_vbncmp_x(jit_state_t *_jit, int cc, jit_word_t i0)\n{\n    jit_word_t\t\td, p, w;\n    VMRS(_R15_REGNO);\n    p = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(cc, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCC_B(cc, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    patch_at(arm_patch_jump, p, _jit->pc.w);\n    return (w);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vbncmp_f": {
      "start_point": [
        1872,
        0
      ],
      "end_point": [
        1878,
        1
      ],
      "content": "static jit_word_t\n_vbncmp_f(jit_state_t *_jit, int cc,\n\t  jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_f(r0, r1);\n    return (vbncmp_x(cc, i0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vbncmp_d": {
      "start_point": [
        1880,
        0
      ],
      "end_point": [
        1886,
        1
      ],
      "content": "static jit_word_t\n_vbncmp_d(jit_state_t *_jit, int cc,\n\t  jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_d(r0, r1);\n    return (vbncmp_x(cc, i0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vfp_buneqr_x": {
      "start_point": [
        1905,
        0
      ],
      "end_point": [
        1933,
        1
      ],
      "content": "static jit_word_t\n_vfp_buneqr_x(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td, p, q, w;\n    VMRS(_R15_REGNO);\n    p = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(ARM_CC_VS, 0);\n\tq = _jit->pc.w;\n\tT2_CC_B(ARM_CC_NE, 0);\n\tpatch_at(arm_patch_jump, p, _jit->pc.w);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCC_B(ARM_CC_VS, 0);\n\tq = _jit->pc.w;\n\tCC_B(ARM_CC_NE, 0);\n\tpatch_at(arm_patch_jump, p, _jit->pc.w);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    patch_at(arm_patch_jump, q, _jit->pc.w);\n    return (w);\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vfp_buneqr_f": {
      "start_point": [
        1935,
        0
      ],
      "end_point": [
        1940,
        1
      ],
      "content": "static jit_word_t\n_vfp_buneqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_f(r0, r1);\n    return (vfp_buneqr_x(i0));\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vfp_buneqr_d": {
      "start_point": [
        1942,
        0
      ],
      "end_point": [
        1949,
        1
      ],
      "content": "fbopi(uneq)\n\nstatic jit_word_t\n_vfp_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_d(r0, r1);\n    return (vfp_buneqr_x(i0));\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "fbopi(uneq)",
        "fbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vfp_bunger_x": {
      "start_point": [
        1951,
        0
      ],
      "end_point": [
        1975,
        1
      ],
      "content": "dbopi(uneq)\n\nstatic jit_word_t\n_vfp_bunger_x(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td, p, w;\n    VMRS(_R15_REGNO);\n    p = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(ARM_CC_MI, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_CC_B(ARM_CC_HS, encode_thumb_cc_jump(d));\n    }\n    else {\n\tCC_B(ARM_CC_MI, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tCC_B(ARM_CC_HS, d & 0x00ffffff);\n    }\n    patch_at(arm_patch_jump, p, _jit->pc.w);\n    return (w);\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "dbopi(uneq)",
        "dbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vfp_bunger_f": {
      "start_point": [
        1977,
        0
      ],
      "end_point": [
        1982,
        1
      ],
      "content": "static jit_word_t\n_vfp_bunger_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_f(r0, r1);\n    return (vfp_bunger_x(i0));\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vfp_bunger_d": {
      "start_point": [
        1984,
        0
      ],
      "end_point": [
        1991,
        1
      ],
      "content": "fbopi(unge)\n\nstatic jit_word_t\n_vfp_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_d(r0, r1);\n    return (vfp_bunger_x(i0));\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "fbopi(unge)",
        "fbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vfp_bltgtr_x": {
      "start_point": [
        1993,
        0
      ],
      "end_point": [
        2022,
        1
      ],
      "content": "dbopi(unge)\n\nstatic jit_word_t\n_vfp_bltgtr_x(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td, p, q, w;\n    VMRS(_R15_REGNO);\n    p = _jit->pc.w;\n    if (jit_thumb_p()) {\n\tT2_CC_B(ARM_CC_VS, 0);\n\tq = _jit->pc.w;\n\tT2_CC_B(ARM_CC_EQ, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 1) - 2;\n\tassert(_s20P(d));\n\tT2_B(encode_thumb_jump(d));\n    }\n    else {\n\tCC_B(ARM_CC_VS, 0);\n\tq = _jit->pc.w;\n\tCC_B(ARM_CC_EQ, 0);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 2;\n\tassert(_s24P(d));\n\tB(d & 0x00ffffff);\n    }\n    patch_at(arm_patch_jump, p, _jit->pc.w);\n    patch_at(arm_patch_jump, q, _jit->pc.w);\n    return (w);\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "dbopi(unge)",
        "dbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vfp_bltgtr_f": {
      "start_point": [
        2024,
        0
      ],
      "end_point": [
        2029,
        1
      ],
      "content": "static jit_word_t\n_vfp_bltgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_f(r0, r1);\n    return (vfp_bltgtr_x(i0));\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vfp_bltgtr_d": {
      "start_point": [
        2033,
        0
      ],
      "end_point": [
        2040,
        1
      ],
      "content": "fbopi(ltgt)\n\nstatic jit_word_t\n_vfp_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    vfp_cmp_d(r0, r1);\n    return (vfp_bltgtr_x(i0));\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "fbopi(ltgt)",
        "fbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vfp_ldi_f": {
      "start_point": [
        2046,
        0
      ],
      "end_point": [
        2060,
        1
      ],
      "content": "dbopi(unord)\n\nstatic void\n_vfp_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\tgpr;\n    if (jit_fpr_p(r0)) {\n\tgpr = jit_get_reg(jit_class_gpr);\n\tmovi(rn(gpr), i0);\n\tVLDR_F32(r0, rn(gpr), 0);\n\tjit_unget_reg(gpr);\n    }\n    else\n\tldi_i(r0, i0);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "dbopi(unord)",
        "dbopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_vfp_ldi_d": {
      "start_point": [
        2062,
        0
      ],
      "end_point": [
        2075,
        1
      ],
      "content": "static void\n_vfp_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_fpr_p(r0))\n\tVLDR_F64(r0, rn(reg), 0);\n    else {\n\tldr_i(r0, rn(reg));\n\tldxi_i(r0 + 1, rn(reg), 4);\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ldxr_f": {
      "start_point": [
        2077,
        0
      ],
      "end_point": [
        2089,
        1
      ],
      "content": "static void\n_vfp_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddr(rn(reg), r1, r2);\n\tVLDR_F32(r0, rn(reg), 0);\n\tjit_unget_reg(reg);\n    }\n    else\n\tldxr_i(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ldxr_d": {
      "start_point": [
        2091,
        0
      ],
      "end_point": [
        2104,
        1
      ],
      "content": "static void\n_vfp_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    if (jit_fpr_p(r0))\n\tVLDR_F64(r0, rn(reg), 0);\n    else {\n\tldr_i(r0, rn(reg));\n\tldxi_i(r0 + 1, rn(reg), 4);\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ldxi_f": {
      "start_point": [
        2106,
        0
      ],
      "end_point": [
        2137,
        1
      ],
      "content": "static void\n_vfp_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\tif (i0 >= 0) {\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVLDR_F32(r0, r1, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\taddi(rn(reg), r1, i0);\n\t\tVLDR_F32(r0, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse {\n\t    i0 = -i0;\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVLDRN_F32(r0, r1, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tsubi(rn(reg), r1, i0);\n\t\tVLDR_F32(r0, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n    }\n    else\n\tldxi_i(r0, r1, i0);\n}",
      "lines": 32,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_ldxi_d": {
      "start_point": [
        2139,
        0
      ],
      "end_point": [
        2175,
        1
      ],
      "content": "static void\n_vfp_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\tif (i0 >= 0) {\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVLDR_F64(r0, r1, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\taddi(rn(reg), r1, i0);\n\t\tVLDR_F64(r0, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse {\n\t    i0 = -i0;\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVLDRN_F64(r0, r1, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tsubi(rn(reg), r1, i0);\n\t\tVLDR_F64(r0, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_i(r0, rn(reg));\n\tldxi_i(r0 + 1, rn(reg), 4);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 37,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_sti_f": {
      "start_point": [
        2177,
        0
      ],
      "end_point": [
        2189,
        1
      ],
      "content": "static void\n_vfp_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tVSTR_F32(r0, rn(reg), 0);\n\tjit_unget_reg(reg);\n    }\n    else\n\tsti_i(i0, r0);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_sti_d": {
      "start_point": [
        2191,
        0
      ],
      "end_point": [
        2204,
        1
      ],
      "content": "static void\n_vfp_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (jit_fpr_p(r0))\n\tVSTR_F64(r0, rn(reg), 0);\n    else {\n\tstr_i(rn(reg), r0);\n\tstxi_i(4, rn(reg), r0 + 1);\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_stxr_f": {
      "start_point": [
        2206,
        0
      ],
      "end_point": [
        2218,
        1
      ],
      "content": "static void\n_vfp_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r2)) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddr(rn(reg), r0, r1);\n\tVSTR_F32(r2, rn(reg), 0);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstxr_i(r0, r1, r2);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_stxr_d": {
      "start_point": [
        2220,
        0
      ],
      "end_point": [
        2233,
        1
      ],
      "content": "static void\n_vfp_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    if (jit_fpr_p(r2))\n\tVSTR_F64(r2, rn(reg), 0);\n    else {\n\tstr_i(rn(reg), r2);\n\tstxi_i(4, rn(reg), r2 + 1);\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_stxi_f": {
      "start_point": [
        2235,
        0
      ],
      "end_point": [
        2266,
        1
      ],
      "content": "static void\n_vfp_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (i0 >= 0) {\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVSTR_F32(r1, r0, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\taddi(rn(reg), r0, i0);\n\t\tVSTR_F32(r1, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse {\n\t    i0 = -i0;\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVSTRN_F32(r1, r0, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tsubi(rn(reg), r0, i0);\n\t\tVSTR_F32(r1, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n    }\n    else\n\tstxi_i(i0, r0, r1);\n}",
      "lines": 32,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_stxi_d": {
      "start_point": [
        2268,
        0
      ],
      "end_point": [
        2304,
        1
      ],
      "content": "static void\n_vfp_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (jit_fpr_p(r1)) {\n\tif (i0 >= 0) {\n\t    assert(!(i0 & 3));\n\t    if (i0 < 0124)\n\t\tVSTR_F64(r1, r0, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\taddi(rn(reg), r0, i0);\n\t\tVSTR_F64(r1, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n\telse {\n\t    i0 = -i0;\n\t    assert(!(i0 & 3));\n\t    if (i0 < 1024)\n\t\tVSTRN_F64(r1, r0, i0 >> 2);\n\t    else {\n\t\treg = jit_get_reg(jit_class_gpr);\n\t\tsubi(rn(reg), r0, i0);\n\t\tVSTR_F64(r1, rn(reg), 0);\n\t\tjit_unget_reg(reg);\n\t    }\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tstxi_i(4, rn(reg), r1 + 1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 37,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vfp_vaarg_d": {
      "start_point": [
        2306,
        0
      ],
      "end_point": [
        2324,
        1
      ],
      "content": "static void\n_vfp_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Adjust pointer. */\n    reg = jit_get_reg(jit_class_gpr);\n    andi(rn(reg), r1, 7);\n    addr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n\n    /* Load argument. */\n    vfp_ldr_d(r0, r1);\n\n    /* Update stack pointer. */\n    addi(r1, r1, sizeof(jit_float64_t));\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_arm.c": {
    "jit_get_cpu": {
      "start_point": [
        153,
        0
      ],
      "end_point": [
        203,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n#if defined(__linux__)\n    FILE\t*fp;\n    char\t*ptr;\n    char\t buf[128];\n\n    if ((fp = fopen(\"/proc/cpuinfo\", \"r\")) != NULL) {\n\twhile (fgets(buf, sizeof(buf), fp)) {\n\t    if (strncmp(buf, \"CPU architecture:\", 17) == 0) {\n\t\tjit_cpu.version = strtol(buf + 17, &ptr, 10);\n\t\twhile (*ptr) {\n\t\t    if (*ptr == 'T' || *ptr == 't') {\n\t\t\t++ptr;\n\t\t\tjit_cpu.thumb = 1;\n\t\t    }\n\t\t    else if (*ptr == 'E' || *ptr == 'e') {\n\t\t\tjit_cpu.extend = 1;\n\t\t\t++ptr;\n\t\t    }\n\t\t    else\n\t\t\t++ptr;\n\t\t}\n\t    }\n\t    else if (strncmp(buf, \"Features\\t:\", 10) == 0) {\n\t\tif ((ptr = strstr(buf + 10, \"vfpv\")))\n\t\t    jit_cpu.vfp = strtol(ptr + 4, NULL, 0);\n\t\tif ((ptr = strstr(buf + 10, \"neon\")))\n\t\t    jit_cpu.neon = 1;\n\t\tif ((ptr = strstr(buf + 10, \"thumb\")))\n\t\t    jit_cpu.thumb = 1;\n\t    }\n\t}\n\tfclose(fp);\n    }\n#endif\n#if defined(__ARM_PCS_VFP)\n    if (!jit_cpu.vfp)\n\tjit_cpu.vfp = 3;\n    if (!jit_cpu.version)\n\tjit_cpu.version = 7;\n    jit_cpu.abi = 1;\n#endif\n#if defined(__thumb2__)\n    jit_cpu.thumb = 1;\n#endif\n    /* armv6t2 todo (software float and thumb2) */\n    if (!jit_cpu.vfp && jit_cpu.thumb)\n\tjit_cpu.thumb = 0;\n}",
      "lines": 51,
      "depth": 18,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        205,
        0
      ],
      "end_point": [
        226,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    jit_int32_t\t\tregno;\n    static jit_bool_t\tfirst = 1;\n\n    _jitc->reglen = jit_size(_rvs) - 1;\n    if (first) {\n\t/* jit_get_cpu() should have been already called, and only once */\n\tif (!jit_cpu.vfp) {\n\t    /* cause register to never be allocated, because simple\n\t     * software float only allocates stack space for 8 slots  */\n\t    for (regno = _D8; regno < _D7; regno++)\n\t\t_rvs[regno].spec = 0;\n\t}\n\tif (!jit_cpu.abi) {\n\t    for (regno = _S15; regno <= _D0; regno++)\n\t\t_rvs[regno].spec &= ~rc(arg);\n\t}\n\tfirst = 0;\n    }\n}",
      "lines": 22,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        228,
        0
      ],
      "end_point": [
        274,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    if (jit_cpu.abi)\n\t_jitc->function->self.size += 64;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.alen = 0;\n    if (jit_swf_p())\n\t/* 8 soft float registers */\n\t_jitc->function->self.aoff = -64;\n    else\n\t_jitc->function->self.aoff = 0;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 47,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        276,
        0
      ],
      "end_point": [
        292,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        294,
        0
      ],
      "end_point": [
        313,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -8);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        315,
        0
      ],
      "end_point": [
        325,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        327,
        0
      ],
      "end_point": [
        337,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        339,
        0
      ],
      "end_point": [
        346,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        348,
        0
      ],
      "end_point": [
        366,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (jit_cpu.abi) {\n\tif (u != JIT_FRET)\n\t    jit_movr_f(JIT_FRET, u);\n\telse\n\t    jit_live(JIT_FRET);\n    }\n    else {\n\tif (u != JIT_RET)\n\t    jit_movr_f_w(JIT_RET, u);\n\telse\n\t    jit_live(JIT_RET);\n    }\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        368,
        0
      ],
      "end_point": [
        378,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    if (jit_cpu.abi)\n\tjit_movi_f(JIT_FRET, u);\n    else\n\tjit_movi_f_w(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        380,
        0
      ],
      "end_point": [
        398,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (jit_cpu.abi) {\n\tif (u != JIT_FRET)\n\t    jit_movr_d(JIT_FRET, u);\n\telse\n\t    jit_live(JIT_FRET);\n    }\n    else {\n\tif (u != JIT_RET)\n\t    jit_movr_d_ww(JIT_RET, _R1, u);\n\telse\n\t    jit_live(JIT_RET);\n    }\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        400,
        0
      ],
      "end_point": [
        410,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    if (jit_cpu.abi)\n\tjit_movi_d(JIT_FRET, u);\n    else\n\tjit_movi_d_ww(JIT_RET, _R1, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        412,
        0
      ],
      "end_point": [
        419,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        421,
        0
      ],
      "end_point": [
        436,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code != jit_code_arg) {\n\tif (u->code == jit_code_arg_f) {\n\t    if (jit_cpu.abi)\n\t\treturn (jit_arg_f_reg_p(u->u.w));\n\t}\n\telse {\n\t    assert(u->code == jit_code_arg_d);\n\t    if (jit_cpu.abi)\n\t\treturn (jit_arg_d_reg_p(u->u.w));\n\t}\n    }\n    return (jit_arg_reg_p(u->u.w));\n}",
      "lines": 16,
      "depth": 14,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_make_arg": {
      "start_point": [
        438,
        0
      ],
      "end_point": [
        456,
        1
      ],
      "content": "static jit_node_t *\n_jit_make_arg(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_jit_make_arg(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_make_arg_f": {
      "start_point": [
        458,
        0
      ],
      "end_point": [
        485,
        1
      ],
      "content": "jit_node_t *\n_jit_make_arg_f(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n    if (jit_cpu.abi && !(_jitc->function->self.call & jit_call_varargs)) {\n\tif (jit_arg_f_reg_p(_jitc->function->self.argf)) {\n\t    offset = _jitc->function->self.argf++;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (jit_arg_reg_p(_jitc->function->self.argi)) {\n\t    offset = _jitc->function->self.argi++;\n\t    goto done;\n\t}\n    }\n    offset = _jitc->function->self.size;\n    _jitc->function->self.size += sizeof(jit_float32_t);\ndone:\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg_f);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_make_arg_f(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_make_arg_d": {
      "start_point": [
        487,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "content": "jit_node_t *\n_jit_make_arg_d(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n    if (jit_cpu.abi && !(_jitc->function->self.call & jit_call_varargs)) {\n\tif (jit_arg_d_reg_p(_jitc->function->self.argf)) {\n\t    if (_jitc->function->self.argf & 1)\n\t\t++_jitc->function->self.argf;\n\t    offset = _jitc->function->self.argf;\n\t    _jitc->function->self.argf += 2;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (_jitc->function->self.argi & 1)\n\t    ++_jitc->function->self.argi;\n\tif (jit_arg_reg_p(_jitc->function->self.argi)) {\n\t    offset = _jitc->function->self.argi;\n\t    _jitc->function->self.argi += 2;\n\t    goto done;\n\t}\n    }\n    if (_jitc->function->self.size & 7)\n\t_jitc->function->self.size += 4;\n    offset = _jitc->function->self.size;\n    _jitc->function->self.size += sizeof(jit_float64_t);\ndone:\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg_d);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 36,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_make_arg_d(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        550,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    if (_jitc->prepare) {\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n\tif (jit_cpu.abi && _jitc->function->call.argf)\n\t    rewind_prepare();\n    }\n    else {\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\tif (jit_cpu.abi &&  _jitc->function->self.argf)\n\t    rewind_prolog();\n\t/* First 4 stack addresses are always spilled r0-r3 */\n\tif (jit_arg_reg_p(_jitc->function->self.argi))\n\t    _jitc->function->vagp = _jitc->function->self.argi * 4;\n\telse\n\t    _jitc->function->vagp = 16;\n    }\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare)\n\tjit_link_prepare();\n    else\n\tjit_link_prolog();\n    jit_dec_synth();\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        552,
        0
      ],
      "end_point": [
        557,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        559,
        0
      ],
      "end_point": [
        564,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg_f((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        566,
        0
      ],
      "end_point": [
        571,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg_d((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        573,
        0
      ],
      "end_point": [
        585,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_swf_p())\n\tjit_ldxi_c(u, JIT_FP, arg_offset(v->u.w));\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        587,
        0
      ],
      "end_point": [
        599,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_swf_p())\n\tjit_ldxi_uc(u, JIT_FP, arg_offset(v->u.w));\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        601,
        0
      ],
      "end_point": [
        613,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_swf_p())\n\tjit_ldxi_s(u, JIT_FP, arg_offset(v->u.w));\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        615,
        0
      ],
      "end_point": [
        627,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_swf_p())\n\tjit_ldxi_us(u, JIT_FP, arg_offset(v->u.w));\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        629,
        0
      ],
      "end_point": [
        641,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_swf_p())\n\tjit_ldxi_i(u, JIT_FP, arg_offset(v->u.w));\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        643,
        0
      ],
      "end_point": [
        655,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_swf_p())\n\tjit_stxi(arg_offset(v->u.w), JIT_FP, u);\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_movr(JIT_RA0 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        657,
        0
      ],
      "end_point": [
        678,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_swf_p()) {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(arg_offset(v->u.w), JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    else if (jit_arg_reg_p(v->u.w))\n\tjit_movi(JIT_RA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 22,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        680,
        0
      ],
      "end_point": [
        700,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_cpu.abi && !(_jitc->function->self.call & jit_call_varargs)) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movr_f(u, JIT_FA0 - v->u.w);\n\telse\n\t    jit_ldxi_f(u, JIT_FP, v->u.w);\n    }\n    else if (jit_swf_p())\n\tjit_ldxi_f(u, JIT_FP, arg_offset(v->u.w));\n    else {\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_w_f(u, JIT_RA0 - v->u.w);\n\telse\n\t    jit_ldxi_f(u, JIT_FP, v->u.w);\n    }\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        702,
        0
      ],
      "end_point": [
        722,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_cpu.abi) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movr_f(JIT_FA0 - v->u.w, u);\n\telse\n\t    jit_stxi_f(v->u.w, JIT_FP, u);\n    }\n    else if (jit_swf_p())\n\tjit_stxi_f(arg_offset(v->u.w), JIT_FP, u);\n    else {\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_f_w(JIT_RA0 - v->u.w, u);\n\telse\n\t    jit_stxi_f(v->u.w, JIT_FP, u);\n    }\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        724,
        0
      ],
      "end_point": [
        756,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_cpu.abi) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movi_f(JIT_FA0 - v->u.w, u);\n\telse {\n\t    regno = jit_get_reg(jit_class_fpr);\n\t    jit_movi_f(regno, u);\n\t    jit_stxi_f(v->u.w, JIT_FP, regno);\n\t    jit_unget_reg(regno);\n\t}\n    }\n    else if (jit_swf_p()) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(arg_offset(v->u.w), JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_f_w(JIT_RA0 - v->u.w, regno);\n\telse\n\t    jit_stxi_f(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        758,
        0
      ],
      "end_point": [
        778,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_cpu.abi && !(_jitc->function->self.call & jit_call_varargs)) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movr_d(u, JIT_FA0 - v->u.w);\n\telse\n\t    jit_ldxi_d(u, JIT_FP, v->u.w);\n    }\n    else if (jit_swf_p())\n\tjit_ldxi_d(u, JIT_FP, arg_offset(v->u.w));\n    else {\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_ww_d(u, JIT_RA0 - v->u.w, JIT_RA0 - (v->u.w + 1));\n\telse\n\t    jit_ldxi_d(u, JIT_FP, v->u.w);\n    }\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        780,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_cpu.abi) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movr_d(JIT_FA0 - v->u.w, u);\n\telse\n\t    jit_stxi_d(v->u.w, JIT_FP, u);\n    }\n    else if (jit_swf_p())\n\tjit_stxi_d(arg_offset(v->u.w), JIT_FP, u);\n    else {\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_d_ww(JIT_RA0 - v->u.w, JIT_RA0 - (v->u.w + 1), u);\n\telse\n\t    jit_stxi_d(v->u.w, JIT_FP, u);\n    }\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        834,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_cpu.abi) {\n\tif (jit_arg_f_reg_p(v->u.w))\n\t    jit_movi_d(JIT_FA0 - v->u.w, u);\n\telse {\n\t    regno = jit_get_reg(jit_class_fpr);\n\t    jit_movi_d(regno, u);\n\t    jit_stxi_d(v->u.w, JIT_FP, regno);\n\t    jit_unget_reg(regno);\n\t}\n    }\n    else if (jit_swf_p()) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(arg_offset(v->u.w), JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tif (jit_arg_reg_p(v->u.w))\n\t    jit_movr_d_ww(JIT_RA0 - v->u.w, JIT_RA0 - (v->u.w + 1), regno);\n\telse\n\t    jit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        836,
        0
      ],
      "end_point": [
        851,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        853,
        0
      ],
      "end_point": [
        872,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        874,
        0
      ],
      "end_point": [
        898,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_cpu.abi && !(_jitc->function->call.call & jit_call_varargs)) {\n\tif (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\t    jit_movr_f(JIT_FA0 - _jitc->function->call.argf, u);\n\t    ++_jitc->function->call.argf;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t    jit_movr_f_w(JIT_RA0 - _jitc->function->call.argi, u);\n\t    ++_jitc->function->call.argi;\n\t    goto done;\n\t}\n    }\n    jit_stxi_f(_jitc->function->call.size, JIT_SP, u);\n    _jitc->function->call.size += sizeof(jit_word_t);\ndone:\n    jit_dec_synth();\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        900,
        0
      ],
      "end_point": [
        935,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_cpu.abi && !(_jitc->function->call.call & jit_call_varargs)) {\n\tif (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\t    /* cannot jit_movi_f in the argument register because\n\t     * float arguments are packed, and that would cause\n\t     * either an assertion in debug mode, or overwritting\n\t     * two registers */\n\t    regno = jit_get_reg(jit_class_fpr);\n\t    jit_movi_f(regno, u);\n\t    jit_movr_f(JIT_FA0 - _jitc->function->call.argf, regno);\n\t    jit_unget_reg(regno);\n\t    ++_jitc->function->call.argf;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t    jit_movi_f_w(JIT_RA0 - _jitc->function->call.argi, u);\n\t    ++_jitc->function->call.argi;\n\t    goto done;\n\t}\n    }\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_f(regno, u);\n    jit_stxi_f(_jitc->function->call.size, JIT_SP, regno);\n    jit_unget_reg(regno);\n    _jitc->function->call.size += sizeof(jit_word_t);\ndone:\n    jit_dec_synth();\n}",
      "lines": 36,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        937,
        0
      ],
      "end_point": [
        969,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_cpu.abi && !(_jitc->function->call.call & jit_call_varargs)) {\n\tif (jit_arg_d_reg_p(_jitc->function->call.argf)) {\n\t    if (_jitc->function->call.argf & 1)\n\t\t++_jitc->function->call.argf;\n\t    jit_movr_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t    _jitc->function->call.argf += 2;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (_jitc->function->call.argi & 1)\n\t    ++_jitc->function->call.argi;\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t    jit_movr_d_ww(JIT_RA0 - _jitc->function->call.argi,\n\t\t\t  JIT_RA0 - (_jitc->function->call.argi + 1),\n\t\t\t  u);\n\t    _jitc->function->call.argi += 2;\n\t    goto done;\n\t}\n    }\n    if (_jitc->function->call.size & 7)\n\t_jitc->function->call.size += 4;\n    jit_stxi_d(_jitc->function->call.size, JIT_SP, u);\n    _jitc->function->call.size += sizeof(jit_float64_t);\ndone:\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        971,
        0
      ],
      "end_point": [
        1007,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_cpu.abi && !(_jitc->function->call.call & jit_call_varargs)) {\n\tif (jit_arg_d_reg_p(_jitc->function->call.argf)) {\n\t    if (_jitc->function->call.argf & 1)\n\t\t++_jitc->function->call.argf;\n\t    jit_movi_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t    _jitc->function->call.argf += 2;\n\t    goto done;\n\t}\n    }\n    else {\n\tif (_jitc->function->call.argi & 1)\n\t    ++_jitc->function->call.argi;\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t    jit_movi_d_ww(JIT_RA0 - _jitc->function->call.argi,\n\t\t\t  JIT_RA0 - (_jitc->function->call.argi + 1),\n\t\t\t  u);\n\t    _jitc->function->call.argi += 2;\n\t    goto done;\n\t}\n    }\n    if (_jitc->function->call.size & 7)\n\t_jitc->function->call.size += 4;\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_d(regno, u);\n    jit_stxi_d(_jitc->function->call.size, JIT_SP, regno);\n    jit_unget_reg(regno);\n    _jitc->function->call.size += sizeof(jit_float64_t);\ndone:\n    jit_dec_synth();\n}",
      "lines": 37,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        1009,
        0
      ],
      "end_point": [
        1026,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tregno = JIT_RA0 - regno;\n\tif (regno >= 0 && regno < node->v.w)\n\t    return (1);\n\tif (jit_cpu.abi && spec & jit_class_fpr) {\n\t    regno = JIT_FA0 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n\n    return (0);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        1028,
        0
      ],
      "end_point": [
        1043,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_callr(r0);\n    node->v.w = _jitc->function->self.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        1045,
        0
      ],
      "end_point": [
        1061,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        1063,
        0
      ],
      "end_point": [
        1069,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        1071,
        0
      ],
      "end_point": [
        1077,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        1079,
        0
      ],
      "end_point": [
        1085,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        1087,
        0
      ],
      "end_point": [
        1093,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        1095,
        0
      ],
      "end_point": [
        1102,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        1104,
        0
      ],
      "end_point": [
        1115,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    if (jit_cpu.abi) {\n\tif (r0 != JIT_FRET)\n\t    jit_movr_f(r0, JIT_FRET);\n    }\n    else if (r0 != JIT_RET)\n\tjit_movr_w_f(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        1117,
        0
      ],
      "end_point": [
        1128,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    if (jit_cpu.abi) {\n\tif (r0 != JIT_FRET)\n\t    jit_movr_d(r0, JIT_FRET);\n    }\n    else if (r0 != JIT_RET)\n\tjit_movr_ww_d(r0, JIT_RET, _R1);\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "jit_flush": {
      "start_point": [
        1995,
        0
      ],
      "end_point": [
        2007,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__GNUC__)\n    jit_uword_t\t\ti, f, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_uword_t)fptr & -s;\n    t = (((jit_uword_t)tptr) + s - 1) & -s;\n    for (i = f; i < t; i += s)\n\t__clear_cache((void *)i, (void *)(i + s));\n#endif\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        2009,
        0
      ],
      "end_point": [
        2013,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_i(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        2015,
        0
      ],
      "end_point": [
        2019,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_i(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        2021,
        0
      ],
      "end_point": [
        2028,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (jit_swf_p())\n\tswf_ldxi_d(rn(r0), rn(r1), i0);\n    else\n\tvfp_ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        2030,
        0
      ],
      "end_point": [
        2037,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_swf_p())\n\tswf_stxi_d(i0, rn(r0), rn(r1));\n    else\n\tvfp_stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_reg_pair": {
      "start_point": [
        2039,
        0
      ],
      "end_point": [
        2072,
        1
      ],
      "content": "static jit_int32_t\n_jit_get_reg_pair(jit_state_t *_jit)\n{\n    /*   bypass jit_get_reg() with argument or'ed with jit_class_chk\n     * and try to find an consecutive, even free register pair, or\n     * return JIT_NOREG if fail, as the cost of spills is greater\n     * than splitting a double load/store in two operations. */\n    if (jit_reg_free_p(_R0) && jit_reg_free_p(_R1)) {\n\tjit_regset_setbit(&_jitc->regarg, _R0);\n\tjit_regset_setbit(&_jitc->regarg, _R1);\n\treturn (_R0);\n    }\n    if (jit_reg_free_p(_R2) && jit_reg_free_p(_R3)) {\n\tjit_regset_setbit(&_jitc->regarg, _R2);\n\tjit_regset_setbit(&_jitc->regarg, _R3);\n\treturn (_R2);\n    }\n    if (jit_reg_free_p(_R4) && jit_reg_free_p(_R5)) {\n\tjit_regset_setbit(&_jitc->regarg, _R4);\n\tjit_regset_setbit(&_jitc->regarg, _R5);\n\treturn (_R4);\n    }\n    if (jit_reg_free_p(_R6) && jit_reg_free_p(_R7)) {\n\tjit_regset_setbit(&_jitc->regarg, _R6);\n\tjit_regset_setbit(&_jitc->regarg, _R7);\n\treturn (_R6);\n    }\n    if (jit_reg_free_p(_R8) && jit_reg_free_p(_R9)) {\n\tjit_regset_setbit(&_jitc->regarg, _R8);\n\tjit_regset_setbit(&_jitc->regarg, _R9);\n\treturn (_R8);\n    }\n    return (JIT_NOREG);\n}",
      "lines": 34,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_jit_unget_reg_pair": {
      "start_point": [
        2074,
        0
      ],
      "end_point": [
        2086,
        1
      ],
      "content": "static void\n_jit_unget_reg_pair(jit_state_t *_jit, jit_int32_t reg)\n{\n    jit_unget_reg(reg);\n    switch (reg) {\n\tcase _R0:\tjit_unget_reg(_R1);\tbreak;\n\tcase _R2:\tjit_unget_reg(_R3);\tbreak;\n\tcase _R4:\tjit_unget_reg(_R5);\tbreak;\n\tcase _R6:\tjit_unget_reg(_R7);\tbreak;\n\tcase _R8:\tjit_unget_reg(_R9);\tbreak;\n\tdefault:\tabort();\n    }\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_must_align_p": {
      "start_point": [
        2092,
        0
      ],
      "end_point": [
        2110,
        1
      ],
      "content": "static jit_bool_t\n_must_align_p(jit_state_t *_jit, jit_node_t *node)\n{\n    if (jit_thumb_p() && (_jit->pc.w & 3)) {\n\tfor (; node; node = node->next) {\n\t    switch (node->code) {\n\t\tcase jit_code_note:\n\t\tcase jit_code_name:\n\t\tcase jit_code_label:\n\t\t    break;\n\t\tcase jit_code_prolog:\n\t\t    return (1);\n\t\tdefault:\n\t\t    return (0);\n\t    }\n\t}\n    }\n    return (0);\n}",
      "lines": 19,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_load_const": {
      "start_point": [
        2112,
        0
      ],
      "end_point": [
        2184,
        1
      ],
      "content": "static void\n_load_const(jit_state_t *_jit, jit_bool_t uniq, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\t w;\n    jit_word_t\t\t d;\n    jit_word_t\t\t base;\n    jit_int32_t\t\t*data;\n    jit_int32_t\t\t size;\n    jit_int32_t\t\t offset;\n\n    assert(!jit_thumb_p());\n    if (!uniq) {\n\t/* use zero, a valid directly encoded immediate, to avoid the\n\t * need of a bitmask to know what offsets will be patched, so\n\t * that comparison will always fail for constants that cannot\n\t * be encoded */\n\tassert(i0 != 0);\n\n\t/* Actually, code is (currently at least) not self modifying,\n\t * so, any value reachable backwards is valid as a constant. */\n\n\t/* FIXME a quickly updateable/mutable hash table could be\n\t * better here, but most times only a few comparisons\n\t * should be done\n\t */\n\n\t/* search in previous constant pool */\n\tif ((data = (jit_int32_t *)_jitc->consts.data)) {\n\t    w = (jit_word_t)data;\n\t    /* maximum backwards offset */\n\t    base = (_jit->pc.w + 8) - 4092;\n\t    if (base <= w)\n\t\t/* can scan all possible available backward constants */\n\t\tbase = 0;\n\t    else\n\t\tbase = (base - w) >> 2;\n\t    size = _jitc->consts.size >> 2;\n\t    for (offset = size - 1; offset >= base; offset--) {\n\t\tif (data[offset] == i0) {\n\t\t    w = (jit_word_t)(data + offset);\n\t\t    d = (_jit->pc.w + 8) - w;\n\t\t    LDRIN(r0, _R15_REGNO, d);\n\t\t    return;\n\t\t}\n\t    }\n\t}\n    }\n    else\n\tassert(i0 == 0);\n\n    _jitc->consts.patches[_jitc->consts.offset++] = _jit->pc.w;\n    /* (probably) positive forward offset */\n    LDRI(r0, _R15_REGNO, 0);\n\n    if (!uniq) {\n\t/* search already requested values */\n\tfor (offset = 0; offset < _jitc->consts.length; offset++) {\n\t    if (_jitc->consts.values[offset] == i0) {\n\t\t_jitc->consts.patches[_jitc->consts.offset++] = offset;\n\t\treturn;\n\t    }\n\t}\n    }\n\n#if DEBUG\n    /* cannot run out of space because of limited range\n     * but assert anyway to catch logic errors */\n    assert(_jitc->consts.length < 1024);\n    assert(_jitc->consts.offset < 2048);\n#endif\n    _jitc->consts.patches[_jitc->consts.offset++] = _jitc->consts.length;\n    _jitc->consts.values[_jitc->consts.length++] = i0;\n}",
      "lines": 73,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_flush_consts": {
      "start_point": [
        2186,
        0
      ],
      "end_point": [
        2223,
        1
      ],
      "content": "static void\n_flush_consts(jit_state_t *_jit)\n{\n    jit_word_t\t\t word;\n    jit_int32_t\t\t offset;\n\n    /* if no forward constants */\n    if (!_jitc->consts.length)\n\treturn;\n    assert(!jit_thumb_p());\n    word = _jit->pc.w;\n    _jitc->consts.data = _jit->pc.uc;\n    _jitc->consts.size = _jitc->consts.length << 2;\n    /* FIXME check will not overrun, otherwise, need to reallocate\n     * code buffer and start over */\n    jit_memcpy(_jitc->consts.data, _jitc->consts.values, _jitc->consts.size);\n    _jit->pc.w += _jitc->consts.size;\n\n#if DISASSEMBLER\n    if (_jitc->data_info.ptr) {\n\tif (_jitc->data_info.offset >= _jitc->data_info.length) {\n\t    jit_realloc((jit_pointer_t *)&_jitc->data_info.ptr,\n\t\t\t_jitc->data_info.length * sizeof(jit_data_info_t),\n\t\t\t(_jitc->data_info.length + 1024) *\n\t\t\tsizeof(jit_data_info_t));\n\t    _jitc->data_info.length += 1024;\n\t}\n\t_jitc->data_info.ptr[_jitc->data_info.offset].code = word;\n\t_jitc->data_info.ptr[_jitc->data_info.offset].length = _jitc->consts.size;\n\t++_jitc->data_info.offset;\n    }\n#endif\n\n    for (offset = 0; offset < _jitc->consts.offset; offset += 2)\n\tpatch_at(arm_patch_load, _jitc->consts.patches[offset],\n\t\t word + (_jitc->consts.patches[offset + 1] << 2));\n    _jitc->consts.length = _jitc->consts.offset = 0;\n}",
      "lines": 38,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_invalidate_consts": {
      "start_point": [
        2226,
        0
      ],
      "end_point": [
        2232,
        1
      ],
      "content": "static void\n_invalidate_consts(jit_state_t *_jit)\n{\n    /* if no forward constants */\n    if (_jitc->consts.length)\n\t_jitc->consts.length = _jitc->consts.offset = 0;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        2234,
        0
      ],
      "end_point": [
        2265,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\t flag;\n    jit_int32_t\t\t kind;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi) {\n\tflag = node->v.n->flag;\n\tkind = arm_patch_word;\n    }\n    else {\n\tflag = node->u.n->flag;\n\tif (node->code == jit_code_calli ||\n\t    (node->code == jit_code_jmpi && !(node->flag & jit_flag_node)))\n\t    kind = arm_patch_word;\n\telse\n\t    kind = arm_patch_jump;\n    }\n    assert(!(flag & jit_flag_patch));\n    kind |= arm_patch_node;\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].kind = kind;\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 32,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_disasm.c": {
    "jit_init_debug": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        205,
        1
      ],
      "content": "void\njit_init_debug(const char *progname)\n{\n#if DISASSEMBLER\n    bfd_init();\n\n    if (progname)\n\tdisasm_bfd = bfd_openr(progname, NULL);\n    if (disasm_bfd == NULL) {\n#if defined(__linux__)\n\tdisasm_bfd = bfd_openr(\"/proc/self/exe\", NULL);\n\tif (disasm_bfd == NULL)\n#endif\n\t    return;\n    }\n    bfd_check_format(disasm_bfd, bfd_object);\n    bfd_check_format(disasm_bfd, bfd_archive);\n    INIT_DISASSEMBLE_INFO(disasm_info, disasm_stream, fprintf);\n#  if defined(__i386__) || defined(__x86_64__)\n    disasm_info.arch = bfd_arch_i386;\n#    if defined(__x86_64__)\n#      if __WORDSIZE == 32\n    disasm_info.mach = bfd_mach_x64_32;\n#      else\n    disasm_info.mach = bfd_mach_x86_64;\n#      endif\n#    else\n    disasm_info.mach = bfd_mach_i386_i386;\n#    endif\n#  endif\n#  if defined(__powerpc__)\n    disasm_info.arch = bfd_arch_powerpc;\n    disasm_info.mach = bfd_mach_ppc64;\n#    if HAVE_DISASSEMBLE_INIT_FOR_TARGET\n    disassemble_init_for_target(&disasm_info);\n#    elif HAVE_DISASSEMBLE_INIT_POWERPC\n    disassemble_init_powerpc(&disasm_info);\n#    endif\n#    if defined(__powerpc64__)\n    disasm_info.disassembler_options = \"64\";\n#    endif\n#    if HAVE_DISASSEMBLE_INIT_FOR_TARGET\n    disassemble_init_for_target(&disasm_info);\n#    elif HAVE_DISASSEMBLE_INIT_POWERPC\n    disassemble_init_powerpc(&disasm_info);\n#    endif\n#  endif\n#  if defined(__sparc__)\n    disasm_info.endian = disasm_info.display_endian = BFD_ENDIAN_BIG;\n#  endif\n#  if defined(__s390__) || defined(__s390x__)\n    disasm_info.arch = bfd_arch_s390;\n#    if __WORDSIZE == 32\n    disasm_info.mach = bfd_mach_s390_31;\n#    else\n    disasm_info.mach = bfd_mach_s390_64;\n#    endif\n    disasm_info.endian = disasm_info.display_endian = BFD_ENDIAN_BIG;\n    disasm_info.disassembler_options = \"zarch\";\n#  endif\n#  if defined(__alpha__)\n    disasm_info.arch = bfd_arch_alpha;\n    disasm_info.mach = bfd_mach_alpha_ev6;\n#  endif\n    disasm_info.print_address_func = disasm_print_address;\n\n# if BINUTILS_2_29\n    disasm_print = disassembler(disasm_info.arch, __BYTE_ORDER == __BIG_ENDIAN,\n\t\t\t\tdisasm_info.mach, disasm_bfd);\n#  else\n    disasm_print = disassembler(disasm_bfd);\n#  endif\n    assert(disasm_print);\n\n    if (bfd_get_file_flags(disasm_bfd) & HAS_SYMS) {\n\tasymbol\t\t**in;\n\tasymbol\t\t**out;\n\tasymbol\t\t *symbol;\n\tlong\t\t  offset;\n\tlong\t\t  sym_count;\n\tlong\t\t  dyn_count;\n\tlong\t\t  sym_storage;\n\tlong\t\t  dyn_storage;\n\n\tif ((sym_storage = bfd_get_symtab_upper_bound(disasm_bfd)) >= 0) {\n\n\t    if (bfd_get_file_flags(disasm_bfd) & DYNAMIC) {\n\t\tdyn_storage = bfd_get_dynamic_symtab_upper_bound(disasm_bfd);\n#  if defined(__alpha__)\n\t\t/* XXX */\n\t\tif (dyn_storage < 0)\n\t\t    dyn_storage = 0;\n#  else\n\t\tassert(dyn_storage >= 0);\n#  endif\n\t    }\n\t    else\n\t\tdyn_storage = 0;\n\n\t    jit_alloc((jit_pointer_t *)&disasm_symbols,\n\t\t      (sym_storage + dyn_storage) * sizeof(asymbol *));\n\t    sym_count = bfd_canonicalize_symtab(disasm_bfd, disasm_symbols);\n\t    assert(sym_count >= 0);\n\t    if (dyn_storage) {\n\t\tdyn_count = bfd_canonicalize_dynamic_symtab(disasm_bfd,\n\t\t\t\t\t\t\t    disasm_symbols +\n\t\t\t\t\t\t\t    sym_count);\n\t\tassert(dyn_count >= 0);\n\t    }\n\t    else\n\t\tdyn_count = 0;\n\t    disasm_num_symbols = sym_count + dyn_count;\n\n\t    disasm_num_synthetic = bfd_get_synthetic_symtab(disasm_bfd,\n\t\t\t\t\t\t\t    sym_count,\n\t\t\t\t\t\t\t    disasm_symbols,\n\t\t\t\t\t\t\t    dyn_count,\n\t\t\t\t\t\t\t    disasm_symbols +\n\t\t\t\t\t\t\t    sym_count,\n\t\t\t\t\t\t\t    &disasm_synthetic);\n\t    if (disasm_num_synthetic > 0) {\n\t\tjit_realloc((jit_pointer_t *)&disasm_symbols,\n\t\t\t    (sym_storage + dyn_storage) * sizeof(asymbol *),\n\t\t\t    (sym_storage + dyn_storage + disasm_num_synthetic) *\n\t\t\t    sizeof(asymbol *));\n\t\tfor (offset = 0; offset < disasm_num_synthetic; offset++)\n\t\t    disasm_symbols[disasm_num_symbols++] =\n\t\t\tdisasm_synthetic + offset;\n\t    }\n\n\t    /* remove symbols not useful for disassemble */\n\t    in = out = disasm_symbols;\n\t    for (offset = 0; offset < disasm_num_symbols; offset++) {\n\t\tsymbol = *in++;\n\t\tif (symbol->name &&\n\t\t    symbol->name[0] != '\\0' &&\n\t\t    !(symbol->flags & (BSF_DEBUGGING | BSF_SECTION_SYM)) &&\n\t\t    !bfd_is_und_section(symbol->section) &&\n\t\t    !bfd_is_com_section(symbol->section))\n\t\t    *out++ = symbol;\n\t    }\n\t    disasm_num_symbols = out - disasm_symbols;\n\t    qsort(disasm_symbols, disasm_num_symbols,\n\t\t  sizeof(asymbol *), disasm_compare_symbols);\n\t}\n    }\n#endif\n}",
      "lines": 148,
      "depth": 20,
      "decorators": [
        "void"
      ]
    },
    "jit_finish_debug": {
      "start_point": [
        207,
        0
      ],
      "end_point": [
        216,
        1
      ],
      "content": "void\njit_finish_debug(void)\n{\n#if DISASSEMBLER\n    if (disasm_synthetic)\n\tjit_free((jit_pointer_t *)&disasm_synthetic);\n    if (disasm_symbols)\n\tjit_free((jit_pointer_t *)&disasm_symbols);\n#endif\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_disassemble": {
      "start_point": [
        218,
        0
      ],
      "end_point": [
        232,
        1
      ],
      "content": "void\n_jit_disassemble(jit_state_t *_jit)\n{\n#if DISASSEMBLER\n    if (disasm_bfd) {\n#  if defined(__arm__)\n\t/* FIXME add mapping for prolog switching to arm and possible jump\n\t * before first prolog also in arm mode */\n\tdisasm_info.disassembler_options = jit_cpu.thumb ? \"force-thumb\" : \"\";\n#  endif\n\n\tdisassemble(_jit->code.ptr, _jit->pc.uc - _jit->code.ptr);\n    }\n#endif\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "disasm_compare_symbols": {
      "start_point": [
        236,
        0
      ],
      "end_point": [
        247,
        1
      ],
      "content": "static int\ndisasm_compare_symbols(const void *ap, const void *bp)\n{\n    const asymbol\t*a = *(const asymbol **)ap;\n    const asymbol\t*b = *(const asymbol **)bp;\n\n    if (bfd_asymbol_value(a) > bfd_asymbol_value(b))\n\treturn (1);\n    if (bfd_asymbol_value(a) < bfd_asymbol_value(b))\n\treturn (-1);\n    return (0);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "disasm_print_address": {
      "start_point": [
        256,
        0
      ],
      "end_point": [
        318,
        1
      ],
      "content": "static void\ndisasm_print_address(bfd_vma addr, struct disassemble_info *info)\n{\n    char\t\t*name;\n    char\t\t*file;\n    int\t\t\t line;\n    char\t\t buffer[address_buffer_length];\n\n    sprintf(buffer, address_buffer_format, (long long)addr);\n    (*info->fprintf_func)(info->stream, \"0x%s\", buffer);\n\n#  define _jit\t\t\t\tdisasm_jit\n#  undef jit_pointer_p\n#  define jit_pointer_p(u)\t\t\t\t\t\\\n\t((u) >= _jit->code.ptr && (u) < _jit->pc.uc)\n    if (jit_pointer_p((jit_uint8_t *)(jit_word_t)addr)) {\n\tif (jit_get_note((jit_uint8_t *)(jit_word_t)addr, &name, &file, &line))\n\t    (*info->fprintf_func)(info->stream, \" %s:%s:%d\",\n\t\t\t\t  name ? name : \"\",\n\t\t\t\t  file ? file : \"\",\n\t\t\t\t  line);\n    }\n#  undef jit_pointer_p\n#  undef _jit\n    else if (disasm_num_symbols) {\n\tlong\t\t low;\n\tlong\t\t high;\n\tlong\t\t offset;\n\tasymbol\t\t*symbol;\n\n\tlow = 0;\n\thigh = disasm_num_symbols;\n\tdo {\n\t    offset = (low + high) >> 1;\n\t    symbol = disasm_symbols[offset];\n\t    if (bfd_asymbol_value(symbol) > addr)\n\t\thigh = offset - 1;\n\t    else if (bfd_asymbol_value(symbol) < addr)\n\t\tlow = offset + 1;\n\t    else\n\t\tbreak;\n\t} while (low < high);\n\n\tif (offset >= 0 && offset < disasm_num_symbols) {\n\t    if (bfd_asymbol_value(symbol) < addr) {\n\t\twhile (++offset < disasm_num_symbols) {\n\t\t    symbol = disasm_symbols[offset];\n\t\t    if (bfd_asymbol_value(symbol) >= addr)\n\t\t\tbreak;\n\t\t}\n\t    }\n\t    else if (bfd_asymbol_value(symbol) > addr) {\n\t\twhile (offset--) {\n\t\t    if (bfd_asymbol_value(disasm_symbols[offset]) < addr)\n\t\t\tbreak;\n\t\t    symbol = disasm_symbols[offset];\n\t\t}\n\t    }\n\t    if (bfd_asymbol_value(symbol) == addr)\n\t\t(*info->fprintf_func)(info->stream, \" # %s\", symbol->name);\n\t}\n    }\n}",
      "lines": 63,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_disassemble": {
      "start_point": [
        320,
        0
      ],
      "end_point": [
        413,
        1
      ],
      "content": "static void\n_disassemble(jit_state_t *_jit, jit_pointer_t code, jit_int32_t length)\n{\n    int\t\t\t bytes;\n    char\t\t*name, *old_name;\n    char\t\t*file, *old_file;\n    int\t\t\t line,  old_line;\n#if __arm__\n    jit_int32_t\t\t offset;\n    jit_bool_t\t\t data_info;\n    jit_int32_t\t\t data_offset;\n#endif\n    bfd_vma\t\t pc = (jit_uword_t)code;\n    bfd_vma\t\t end = (jit_uword_t)code + length;\n    char\t\t buffer[address_buffer_length];\n#if DEVEL_DISASSEMBLER\n    jit_node_t\t\t*node;\n    jit_uword_t\t\t prevw;\n#endif\n\n#if __arm__\n    data_info = _jitc && _jitc->data_info.ptr;\n    data_offset = 0;\n#endif\n    disasm_info.buffer = code;\n    disasm_info.buffer_vma = (jit_uword_t)code;\n    disasm_info.buffer_length = length;\n    old_file = old_name = NULL;\n    old_line = 0;\n    disasm_jit = _jit;\n#if DEVEL_DISASSEMBLER\n    node = _jitc->head;\n    prevw = pc;\n#endif\n    while (pc < end) {\n#if DEVEL_DISASSEMBLER\n\twhile (node && (jit_uword_t)(prevw + node->offset) < (jit_uword_t)pc) {\n\t    prevw += node->offset;\n\t    node = node->next;\n\t}\n\twhile (node && (jit_uword_t)(prevw + node->offset) == (jit_uword_t)pc) {\n\t    jit_print_node(node);\n\t    fputc('\\n', stdout); \n\t    prevw += node->offset;\n\t    node = node->next;\n\t}\n#endif\n#if __arm__\n    again:\n\tif (data_info) {\n\t    while (_jitc->data_info.ptr[data_offset].code < pc) {\n\t\tif (++data_offset >= _jitc->data_info.length) {\n\t\t    data_info = 0;\n\t\t    goto again;\n\t\t}\n\t    }\n\t    if (pc == _jitc->data_info.ptr[data_offset].code) {\n\t\toffset = _jitc->data_info.ptr[data_offset].length;\n\t\tfor (; offset >= 4; offset -= 4, pc += 4) {\n\t\t    bytes = sprintf(buffer, address_buffer_format, pc);\n\t\t    (*disasm_info.fprintf_func)(disasm_stream,\n\t\t\t\t\t\t\"%*c0x%s\\t.data\\t0x%08x\\n\",\n\t\t\t\t\t\t16 - bytes, ' ', buffer,\n\t\t\t\t\t\t*(jit_uint32_t *)\n\t\t\t\t\t\t(jit_uint32_t)pc);\n\t\t}\n\t\t/* reset disassemble information instead of attempting\n\t\t * to hack the arm specific backend data structures to\n\t\t * tell it to forward the required number of bytes. */\n\t\tdisasm_info.buffer = (jit_pointer_t)(jit_uint32_t)pc;\n\t\tdisasm_info.buffer_vma = (jit_uword_t)pc;\n\t\tif ((disasm_info.buffer_length = end - pc) <= 0)\n\t\t    break;\n\t    }\n\t}\n#endif\n\tif (jit_get_note((jit_uint8_t *)(jit_word_t)pc, &name, &file, &line) &&\n\t    (name != old_name || file != old_file || line != old_line)) {\n\t    (*disasm_info.fprintf_func)(disasm_stream, \"# %s:%s:%d\\n\",\n\t\t\t\t\tname ? name : \"\",\n\t\t\t\t\tfile ? file : \"\",\n\t\t\t\t\tline);\n\t    old_name = name;\n\t    old_file = file;\n\t    old_line = line;\n\t}\n\n\tbytes = sprintf(buffer, address_buffer_format, (long long)pc);\n\t(*disasm_info.fprintf_func)(disasm_stream, \"%*c0x%s\\t\",\n\t\t\t\t    16 - bytes, ' ', buffer);\n\tpc += (*disasm_print)(pc, &disasm_info);\n\tputc('\\n', disasm_stream);\n    }\n}",
      "lines": 94,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_hppa-cpu.c": {
    "sign_extend": {
      "start_point": [
        932,
        0
      ],
      "end_point": [
        938,
        1
      ],
      "content": "static inline int\nsign_extend (int x, int len)\n{\n  int signbit = (1 << (len - 1));\n  int mask = (signbit << 1) - 1;\n  return ((x & mask) ^ signbit) - signbit;\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "sign_unext": {
      "start_point": [
        940,
        0
      ],
      "end_point": [
        948,
        1
      ],
      "content": "static inline int\nsign_unext (int x, int len)\n{\n  int len_ones;\n\n  len_ones = (1 << len) - 1;\n\n  return x & len_ones;\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "low_sign_unext": {
      "start_point": [
        950,
        0
      ],
      "end_point": [
        961,
        1
      ],
      "content": "static inline int\nlow_sign_unext (int x, int len)\n{\n  int temp;\n  int sign;\n\n  sign = (x >> (len-1)) & 1;\n\n  temp = sign_unext (x, len-1);\n\n  return (temp << 1) | sign;\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_3": {
      "start_point": [
        963,
        0
      ],
      "end_point": [
        968,
        1
      ],
      "content": "static inline int\nre_assemble_3 (int as3)\n{\n  return ((  (as3 & 4) << (13-2))\n\t  | ((as3 & 3) << (13+1)));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_12": {
      "start_point": [
        970,
        0
      ],
      "end_point": [
        976,
        1
      ],
      "content": "static inline int\nre_assemble_12 (int as12)\n{\n  return ((  (as12 & 0x800) >> 11)\n\t  | ((as12 & 0x400) >> (10 - 2))\n\t  | ((as12 & 0x3ff) << (1 + 2)));\n}",
      "lines": 7,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_16": {
      "start_point": [
        978,
        0
      ],
      "end_point": [
        987,
        1
      ],
      "content": "static inline int\nre_assemble_16 (int as16)\n{\n  int s, t;\n\n  /* Unusual 16-bit encoding, for wide mode only.  */\n  t = (as16 << 1) & 0xffff;\n  s = (as16 & 0x8000);\n  return (t ^ s ^ (s >> 1)) | (s >> 15);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_17": {
      "start_point": [
        989,
        0
      ],
      "end_point": [
        996,
        1
      ],
      "content": "static inline int\nre_assemble_17 (int as17)\n{\n  return ((  (as17 & 0x10000) >> 16)\n\t  | ((as17 & 0x0f800) << (16 - 11))\n\t  | ((as17 & 0x00400) >> (10 - 2))\n\t  | ((as17 & 0x003ff) << (1 + 2)));\n}",
      "lines": 8,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_21": {
      "start_point": [
        998,
        0
      ],
      "end_point": [
        1006,
        1
      ],
      "content": "static inline int\nre_assemble_21 (int as21)\n{\n  return ((  (as21 & 0x100000) >> 20)\n\t  | ((as21 & 0x0ffe00) >> 8)\n\t  | ((as21 & 0x000180) << 7)\n\t  | ((as21 & 0x00007c) << 14)\n\t  | ((as21 & 0x000003) << 12));\n}",
      "lines": 9,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "re_assemble_22": {
      "start_point": [
        1008,
        0
      ],
      "end_point": [
        1016,
        1
      ],
      "content": "static inline int\nre_assemble_22 (int as22)\n{\n  return ((  (as22 & 0x200000) >> 21)\n\t  | ((as22 & 0x1f0000) << (21 - 16))\n\t  | ((as22 & 0x00f800) << (16 - 11))\n\t  | ((as22 & 0x000400) >> (10 - 2))\n\t  | ((as22 & 0x0003ff) << (1 + 2)));\n}",
      "lines": 9,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "int"
      ]
    },
    "_f1": {
      "start_point": [
        1018,
        0
      ],
      "end_point": [
        1027,
        1
      ],
      "content": "static void\n_f1(jit_state_t *_jit, jit_int32_t o,\n    jit_int32_t b, jit_int32_t t, jit_int32_t i)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(t  & ~0x1f));\n    assert(i >= -8192 && i <= 8191);\n    ii((o<<26)|(b<<21)|(t<<16)|(re_assemble_16(i)));\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f2": {
      "start_point": [
        1029,
        0
      ],
      "end_point": [
        1039,
        1
      ],
      "content": "static void\n_f2(jit_state_t *_jit, jit_int32_t o,\n    jit_int32_t b, jit_int32_t t, jit_int32_t i, jit_int32_t j)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(t  & ~0x1f));\n    assert(i >= -32768 && i <= 32767);\n    assert(!(j  &  ~0x3));\n    ii((o<<26)|(b<<21)|(t<<16)|(j<<1)|(re_assemble_16(i)));\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f3": {
      "start_point": [
        1041,
        0
      ],
      "end_point": [
        1051,
        1
      ],
      "content": "static void\n_f3(jit_state_t *_jit, jit_int32_t o,\n    jit_int32_t b, jit_int32_t t, jit_int32_t i, jit_int32_t j)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(t  & ~0x1f));\n    assert(i >= -32768 && i <= 32767);\n    assert(!(j  &  ~0x1));\n    ii((o<<26)|(b<<21)|(t<<16)|(j<<1)|(re_assemble_16(i)));\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f4": {
      "start_point": [
        1053,
        0
      ],
      "end_point": [
        1069,
        1
      ],
      "content": "static void\n_f4(jit_state_t *_jit, jit_int32_t o, jit_int32_t b,\n    jit_int32_t x, jit_int32_t s, jit_int32_t u, jit_int32_t y,\n    jit_int32_t c, jit_int32_t z, jit_int32_t m, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(x  & ~0x1f));\n    assert(!(s  &  ~0x3));\n    assert(!(u  &  ~0x1));\n    assert(!(y  &  ~0x1));\n    assert(!(c  &  ~0x3));\n    assert(!(z  &  ~0xf));\n    assert(!(m  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(b<<21)|(x<<16)|(s<<14)|(u<<13)|(y<<12)|(c<<10)|(z<<6)|(m<<5)|t);\n}",
      "lines": 17,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f5": {
      "start_point": [
        1071,
        0
      ],
      "end_point": [
        1087,
        1
      ],
      "content": "static void\n_f5(jit_state_t *_jit, jit_int32_t o, jit_int32_t b,\n    jit_int32_t i, jit_int32_t s, jit_int32_t a, jit_int32_t y,\n    jit_int32_t c, jit_int32_t z, jit_int32_t m, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(s  &  ~0x3));\n    assert(!(a  &  ~0x1));\n    assert(!(y  &  ~0x1));\n    assert(!(c  &  ~0x3));\n    assert(!(z  &  ~0xf));\n    assert(!(m  &  ~0x1));\n    assert(i >= -16 && i <= 15);\n    ii((o<<26)|(b<<21)|(low_sign_unext(i,5)<<16)|\n       (s<<14)|(a<<13)|(y<<12)|(c<<10)|(z<<6)|(m<<5)|t);\n}",
      "lines": 17,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f6": {
      "start_point": [
        1089,
        0
      ],
      "end_point": [
        1105,
        1
      ],
      "content": "static void\n_f6(jit_state_t *_jit, jit_int32_t o, jit_int32_t b,\n    jit_int32_t r, jit_int32_t s, jit_int32_t a, jit_int32_t x,\n    jit_int32_t c, jit_int32_t y, jit_int32_t m, jit_int32_t i)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(b  & ~0x1f));\n    assert(!(s  &  ~0x3));\n    assert(!(a  &  ~0x1));\n    assert(!(x  &  ~0x1));\n    assert(!(c  &  ~0x3));\n    assert(!(y  &  ~0xf));\n    assert(!(m  &  ~0x1));\n    assert(i >= -16 && i <= 15);\n    ii((o<<26)|(b<<21)|(r<<16)|(s<<14)|(a<<13)|\n       (x<<12)|(c<<10)|(y<<6)|(m<<5)|low_sign_unext(i,5));\n}",
      "lines": 17,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f7": {
      "start_point": [
        1107,
        0
      ],
      "end_point": [
        1114,
        1
      ],
      "content": "static void\n_f7(jit_state_t *_jit, jit_int32_t o, jit_int32_t r, jit_int32_t i)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r  & ~0x1f));\n    assert(!(i  &  0x7ff));\n    ii((o<<26)|(r<<21)|re_assemble_21(i>>11));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f8": {
      "start_point": [
        1116,
        0
      ],
      "end_point": [
        1134,
        1
      ],
      "content": "static void\n_f8(jit_state_t *_jit, jit_int32_t o,\n    jit_int32_t r2, jit_int32_t r1, jit_int32_t cf,\n    jit_int32_t e1, jit_int32_t x, jit_int32_t e2,\n    jit_int32_t e3, jit_int32_t d, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r2 & ~0x1f));\n    assert(!(r1 & ~0x1f));\n    assert(!(cf &  ~0xf));\n    assert(!(e1 &  ~0x3));\n    assert(!(x  &  ~0x1));\n    assert(!(e2 &  ~0x3));\n    assert(!(e3 &  ~0x3));\n    assert(!(d  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(cf<<12)|\n       (e1<<10)|(x<<9)|(e2<<8)|(e3<<6)|(d<<5)|t);\n}",
      "lines": 19,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f9": {
      "start_point": [
        1136,
        0
      ],
      "end_point": [
        1148,
        1
      ],
      "content": "static void\n_f9(jit_state_t *_jit,\n    jit_int32_t o, jit_int32_t r, jit_int32_t t,\n    jit_int32_t cf, jit_int32_t e1, jit_int32_t i)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r  & ~0x1f));\n    assert(!(t  & ~0x1f));\n    assert(!(cf &  ~0xf));\n    assert(!(e1 &  ~0x1));\n    assert(i >= -2048 && i <= 2047);\n    ii((o<<26)|(r<<21)|(t<<16)|(cf<<12)|(e1<<11)|low_sign_unext(i,11));\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f10": {
      "start_point": [
        1150,
        0
      ],
      "end_point": [
        1167,
        1
      ],
      "content": "static void\n_f10(jit_state_t *_jit, jit_int32_t o, jit_int32_t r2,\n     jit_int32_t r1, jit_int32_t u, jit_int32_t v, jit_int32_t w,\n     jit_int32_t x, jit_int32_t sa, jit_int32_t y, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r2 & ~0x1f));\n    assert(!(r1 & ~0x1f));\n    assert(!(u  &  ~0x1));\n    assert(!(v  &  ~0x3));\n    assert(!(w  &  ~0x1));\n    assert(!(x  &  ~0x3));\n    assert(!(sa &  ~0xf));\n    assert(!(y  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(u<<15)|\n       (v<<13)|(w<<12)|(x<<10)|(sa<<6)|(y<<5)|t);\n}",
      "lines": 18,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f11": {
      "start_point": [
        1169,
        0
      ],
      "end_point": [
        1184,
        1
      ],
      "content": "static void\n_f11(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t r2, jit_int32_t r1, jit_int32_t c, jit_int32_t x,\n     jit_int32_t y, jit_int32_t z, jit_int32_t u, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r1 & ~0x1f));\n    assert(!(r2 & ~0x1f));\n    assert(!(c  &  ~0x7));\n    assert(!(x  &  ~0x3));\n    assert(!(y  &  ~0x1));\n    assert(!(z  &  ~0x1));\n    assert(!(u  &  ~0xf));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(c<<13)|(x<<11)|(y<<10)|(z<<9)|(u<<5)|t);\n}",
      "lines": 16,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f12": {
      "start_point": [
        1186,
        0
      ],
      "end_point": [
        1203,
        1
      ],
      "content": "static void\n_f12(jit_state_t *_jit, jit_int32_t o, jit_int32_t r,\n     jit_int32_t t, jit_int32_t c, jit_int32_t x, jit_int32_t se,\n     jit_int32_t y, jit_int32_t c1, jit_int32_t z, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(r    & ~0x1f));\n    assert(!(t    & ~0x1f));\n    assert(!(c    &  ~0x7));\n    assert(!(x    &  ~0x3));\n    assert(!(se   &  ~0x1));\n    assert(!(y    &  ~0x1));\n    assert(!(c1   &  ~0x1));\n    assert(!(z    &  ~0x7));\n    assert(!((32-clen) & ~0x1f));\n    ii((o<<26)|(r<<21)|(t<<16)|(c<<13)|(x<<11)|\n       (se<<10)|(y<<9)|(c1<<8)|(z<<5)|(32-clen));\n}",
      "lines": 18,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f13": {
      "start_point": [
        1205,
        0
      ],
      "end_point": [
        1220,
        1
      ],
      "content": "static void\n_f13(jit_state_t *_jit, jit_int32_t o, jit_int32_t t,\n     jit_int32_t r, jit_int32_t c, jit_int32_t x,\n     jit_int32_t nz, jit_int32_t c1, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(t    & ~0x1f));\n    assert(!(r    & ~0x1f));\n    assert(!(c    &  ~0x7));\n    assert(!(x    &  ~0x3));\n    assert(!(nz   &  ~0x1));\n    assert(!(c1   &  ~0x1));\n    assert(!((32-clen) & ~0x1f));\n    ii((o<<26)|(t<<21)|(r<<16)|(c<<13)|\n       (x<<11)|(nz<<10)|(c1<<8)|(32-clen));\n}",
      "lines": 16,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f13x": {
      "start_point": [
        1222,
        0
      ],
      "end_point": [
        1236,
        1
      ],
      "content": "static void\n_f13x(jit_state_t *_jit, jit_int32_t o, jit_int32_t t,\n      jit_int32_t i, jit_int32_t c, jit_int32_t x,\n      jit_int32_t nz, jit_int32_t c1, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(t    & ~0x1f));\n    assert(i >= -16 && i <= 15);\n    assert(!(c    &  ~0x7));\n    assert(!(x    &  ~0x3));\n    assert(!(nz   &  ~0x1));\n    assert(!((32-clen) & ~0x1f));\n    ii((o<<26)|(t<<21)|(low_sign_unext(i,5)<<16)|\n       (c<<13)|(x<<11)|(nz<<10)|(c1<<8)|(32-clen));\n}",
      "lines": 15,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f14": {
      "start_point": [
        1238,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "static void\n_f14(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t r2, jit_int32_t r1, jit_int32_t c, jit_int32_t x,\n     jit_int32_t cp, jit_int32_t y, jit_int32_t cpos, jit_int32_t t)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(r1   & ~0x1f));\n    assert(!(r2   & ~0x1f));\n    assert(!(c    &  ~0x7));\n    assert(!(x    &  ~0x3));\n    assert(!(cp   &  ~0x1));\n    assert(!(y    &  ~0x1));\n    assert(!(cpos & ~0x1f));\n    assert(!(t    & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(c<<13)|(x<<12)|(cp<<11)|(y<<10)|(cpos<<5)|t);\n}",
      "lines": 16,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f15": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1271,
        1
      ],
      "content": "static void\n_f15(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t r, jit_int32_t t, jit_int32_t c, jit_int32_t c1,\n     jit_int32_t p, jit_int32_t se, jit_int32_t pos, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(r    & ~0x1f));\n    assert(!(t    & ~0x1f));\n    assert(!(c    &  ~0x7));\n    assert(!(c1   &  ~0x1));\n    assert(!(p    &  ~0x1));\n    assert(!(se   &  ~0x1));\n    assert(!(pos  & ~0x1f));\n    assert(!((32-clen) & ~0x1f));\n    ii((o<<26)|(r<<21)|(t<<16)|(c<<13)|(c1<<12)|\n       (p<<11)|(se<<10)|(pos<<5)|(32-clen));\n}",
      "lines": 17,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f16": {
      "start_point": [
        1273,
        0
      ],
      "end_point": [
        1289,
        1
      ],
      "content": "static void\n_f16(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t t, jit_int32_t r, jit_int32_t c, jit_int32_t c1,\n     jit_int32_t cp, jit_int32_t nz, jit_int32_t cpos, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(t    & ~0x1f));\n    assert(!(r    & ~0x1f));\n    assert(!(c    &  ~0x7));\n    assert(!(c1   &  ~0x1));\n    assert(!(cp   &  ~0x1));\n    assert(!(nz   &  ~0x1));\n    assert(!(cpos & ~0x1f));\n    assert(!((32-clen) & ~0x3f));\n    ii((o<<26)|(t<<21)|(r<<16)|(c<<13)|\n       (c1<<12)|(cp<<11)|(nz<<10)|(cpos<<5)|(32-clen));\n}",
      "lines": 17,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f16x": {
      "start_point": [
        1291,
        0
      ],
      "end_point": [
        1307,
        1
      ],
      "content": "static void\n_f16x(jit_state_t *_jit, jit_int32_t o,\n      jit_int32_t t, jit_int32_t i, jit_int32_t c, jit_int32_t c1,\n      jit_int32_t cp, jit_int32_t nz, jit_int32_t cpos, jit_int32_t clen)\n{\n    assert(!(o    & ~0x3f));\n    assert(!(t    & ~0x1f));\n    assert(i >= -16 && i <= 15);\n    assert(!(c    &  ~0x7));\n    assert(!(c1   &  ~0x1));\n    assert(!(cp   &  ~0x1));\n    assert(!(nz   &  ~0x1));\n    assert(!(cpos & ~0x1f));\n    assert(!((32-clen) & ~0x3f));\n    ii((o<<26)|(t<<21)|(low_sign_unext(i,5)<<16)|(c<<13)|\n       (c1<<12)|(cp<<11)|(nz<<10)|(cpos<<5)|(32-clen));\n}",
      "lines": 17,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f17": {
      "start_point": [
        1309,
        0
      ],
      "end_point": [
        1320,
        1
      ],
      "content": "static void\n_f17(jit_state_t *_jit, jit_int32_t o, jit_int32_t r2,\n     jit_int32_t r1, jit_int32_t c, jit_int32_t i, jit_int32_t n)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r2 & ~0x1f));\n    assert(!(r1 & ~0x1f));\n    assert(!(c  &  ~0x7));\n    assert(i >= -2048 && i <= 2047);\n    assert(!(n  &   ~0x1));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(c<<13)|re_assemble_12(i)|(n<<1));\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f17x": {
      "start_point": [
        1322,
        0
      ],
      "end_point": [
        1334,
        1
      ],
      "content": "static void\n_f17x(jit_state_t *_jit, jit_int32_t o, jit_int32_t r,\n      jit_int32_t i, jit_int32_t c, jit_int32_t t, jit_int32_t n)\n{\n    assert(!(o & ~0x3f));\n    assert(!(r & ~0x1f));\n    assert(i >= -16 && i <= 15);\n    assert(!(c &  ~0x7));\n    assert(t >= -2048 && t <= 2047);\n    assert(!(n &  ~0x1));\n    ii((o<<26)|(r<<21)|\n       (low_sign_unext(i,5)<<16)|(c<<13)|re_assemble_12(t)|(n<<1));\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f18": {
      "start_point": [
        1336,
        0
      ],
      "end_point": [
        1347,
        1
      ],
      "content": "static void\n_f18(jit_state_t *_jit, jit_int32_t o, jit_int32_t p,\n     jit_int32_t r, jit_int32_t c, jit_int32_t i, jit_int32_t n)\n{\n    assert(!(o & ~0x3f));\n    assert(!(p & ~0x1f));\n    assert(!(r & ~0x1f));\n    assert(!(c &  ~0x1));\n    assert(i >= -2048 && i <= 2047);\n    assert(!(n &  ~0x1));\n    ii((o<<26)|(p<<21)|(r<<16)|(c<<15)|(1<<14)|re_assemble_12(i)|(n<<1));\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f19": {
      "start_point": [
        1349,
        0
      ],
      "end_point": [
        1359,
        1
      ],
      "content": "static void\n_f19(jit_state_t *_jit, jit_int32_t o, jit_int32_t b,\n     jit_int32_t s, jit_int32_t i, jit_int32_t n)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(!(s &  ~0x7));\n    assert(i >= -65536 && i <= 65535);\n    assert(!(n &  ~0x1));\n    ii((o<<26)|(b<<21)|re_assemble_3(s)|re_assemble_17(i)|(n<<1));\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f20": {
      "start_point": [
        1361,
        0
      ],
      "end_point": [
        1371,
        1
      ],
      "content": "static void\n_f20(jit_state_t *_jit, jit_int32_t o, jit_int32_t t,\n     jit_int32_t i, jit_int32_t g, jit_int32_t n)\n{\n    assert(!(o & ~0x3f));\n    assert(!(t & ~0x1f));\n    assert(i >= -32768 && i <= 32767);\n    assert(!(g &  ~0x7));\n    assert(!(n &  ~0x1));\n    ii((o<<26)|(t<<21)|(g<<13)|re_assemble_17(i)|(n<<1));\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f21": {
      "start_point": [
        1373,
        0
      ],
      "end_point": [
        1383,
        1
      ],
      "content": "static void\n_f21(jit_state_t *_jit, jit_int32_t o, jit_int32_t t,\n     jit_int32_t x, jit_int32_t y, jit_int32_t n)\n{\n    assert(!(o & ~0x3f));\n    assert(!(t & ~0x1f));\n    assert(!(x & ~0x1f));\n    assert(!(y &  ~0x7));\n    assert(!(n &  ~0x1));\n    ii((o<<26)|(t<<21)|(x<<16)|(y<<13)|(n<<1));\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f22": {
      "start_point": [
        1385,
        0
      ],
      "end_point": [
        1396,
        1
      ],
      "content": "static void\n_f22(jit_state_t *_jit, jit_int32_t o, jit_int32_t b,\n     jit_int32_t x, jit_int32_t r, jit_int32_t n, jit_int32_t p)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(!(x &  ~0x7));\n    assert(!(r & ~0x3f));\n    assert(!(n &  ~0x1));\n    assert(!(p &  ~0x1));\n    ii((o<<26)|(b<<21)|(x<<13)|(1<<12)|(r<<2)|(n<<1)|p);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f23": {
      "start_point": [
        1398,
        0
      ],
      "end_point": [
        1413,
        1
      ],
      "content": "static void\n_f23(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t a, jit_int32_t b, jit_int32_t c, jit_int32_t d,\n     jit_int32_t e, jit_int32_t f, jit_int32_t g, jit_int32_t h)\n{\n    assert(!(o &  ~0x3f));\n    assert(!(a &  ~0x1f));\n    assert(!(b &  ~0x1f));\n    assert(!(c &   ~0x7));\n    assert(!(d &   ~0x1));\n    assert(!(e & ~0x1ff));\n    assert(!(f &   ~0x1));\n    assert(!(g &   ~0x1));\n    assert(!(h &   ~0x1));\n    ii((o<<26)|(a<<21)|(b<<16)|(c<<13)|(d<<12)|(e<<3)|(f<<2)|(g<<1)|h);\n}",
      "lines": 16,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f24": {
      "start_point": [
        1415,
        0
      ],
      "end_point": [
        1428,
        1
      ],
      "content": "static void\n_f24(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t x, jit_int32_t s,\n     jit_int32_t y, jit_int32_t m,jit_int32_t r)\n{\n    assert(!(o &  ~0x3f));\n    assert(!(b &  ~0x1f));\n    assert(!(x &  ~0x1f));\n    assert(!(s &   ~0x3));\n    assert(!(y &  ~0xff));\n    assert(!(m &   ~0x1));\n    assert(!(r &  ~0x1f));\n    ii((o<<26)|(b<<21)|(x<<16)|(s<<14)|(y<<6)|(m<<5)|r);\n}",
      "lines": 14,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f25": {
      "start_point": [
        1430,
        0
      ],
      "end_point": [
        1443,
        1
      ],
      "content": "static void\n_f25(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t i, jit_int32_t s,\n     jit_int32_t y, jit_int32_t m, jit_int32_t r)\n{\n    assert(!(o &  ~0x3f));\n    assert(!(b &  ~0x1f));\n    assert(i >= -16 && i <= 15);\n    assert(!(s &   ~0x3));\n    assert(!(y &  ~0xff));\n    assert(!(m &   ~0x1));\n    assert(!(r &  ~0x1f));\n    ii((o<<26)|(b<<21)|(low_sign_unext(i,5)<<16)|(s<<14)|(y<<6)|(m<<5)|r);\n}",
      "lines": 14,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f26": {
      "start_point": [
        1445,
        0
      ],
      "end_point": [
        1458,
        1
      ],
      "content": "static void\n_f26(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t x, jit_int32_t s,\n     jit_int32_t y, jit_int32_t m,jit_int32_t r)\n{\n    assert(!(o &  ~0x3f));\n    assert(!(b &  ~0x1f));\n    assert(!(x &  ~0x1f));\n    assert(!(s &   ~0x7));\n    assert(!(y &  ~0x7f));\n    assert(!(m &   ~0x1));\n    assert(!(r &  ~0x1f));\n    ii((o<<26)|(b<<21)|(x<<16)|(s<<13)|(y<<6)|(m<<5)|r);\n}",
      "lines": 14,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f27": {
      "start_point": [
        1460,
        0
      ],
      "end_point": [
        1467,
        1
      ],
      "content": "static void\n_f27(jit_state_t *_jit, jit_int32_t o, jit_int32_t i, jit_int32_t j)\n{\n    assert(!(o & ~0x3f));\n    assert(i >= -4096 && i < 4095);\n    assert(j >=   -16 && j <   15);\n    ii((o<<26)|(i<<13)|j);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f28": {
      "start_point": [
        1469,
        0
      ],
      "end_point": [
        1475,
        1
      ],
      "content": "static void\n_f28(jit_state_t *_jit, jit_int32_t o, jit_int32_t i)\n{\n    assert(!(o &      ~0x3f));\n    assert(!(i & ~0x1ffffff));\n    ii((o<<26)|i);\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f29": {
      "start_point": [
        1477,
        0
      ],
      "end_point": [
        1488,
        1
      ],
      "content": "static void\n_f29(jit_state_t *_jit, jit_int32_t o, jit_int32_t r,\n     jit_int32_t x, jit_int32_t s, jit_int32_t y, jit_int32_t t)\n{\n    assert(!(o & ~0x3f));\n    assert(!(r & ~0x1f));\n    assert(!(x & ~0x1f));\n    assert(!(s &  ~0x7));\n    assert(!(y & ~0xff));\n    assert(!(t & ~0x1f));\n    ii((o<<26)|(r<<21)|(x<<16)|re_assemble_3(s)|(y<<5)|t);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f30": {
      "start_point": [
        1490,
        0
      ],
      "end_point": [
        1502,
        1
      ],
      "content": "static void\n_f30(jit_state_t *_jit, jit_int32_t o, jit_int32_t b, jit_int32_t r,\n     jit_int32_t s, jit_int32_t x, jit_int32_t y, jit_int32_t t)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(!(r & ~0x1f));\n    assert(!(s &  ~0x3));\n    assert(!(x &  ~0x1));\n    assert(!(y & ~0xff));\n    assert(!(t & ~0x1f));\n    ii((o<<26)|(b<<21)|(r<<16)|(s<<14)|(x<<13)|(y<<5)|t);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f31": {
      "start_point": [
        1504,
        0
      ],
      "end_point": [
        1515,
        1
      ],
      "content": "static void\n_f31(jit_state_t *_jit, jit_int32_t o, jit_int32_t t,\n     jit_int32_t r, jit_int32_t v, jit_int32_t x, jit_int32_t y)\n{\n    assert(!(o & ~0x3f));\n    assert(!(t & ~0x1f));\n    assert(!(r & ~0x1f));\n    assert(!(v & ~0x1f));\n    assert(!(x & ~0xff));\n    assert(!(y & ~0x1f));\n    ii((o<<26)|(t<<21)|(r<<16)|(v<<14)|(x<<5)|y);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f33": {
      "start_point": [
        1517,
        0
      ],
      "end_point": [
        1528,
        1
      ],
      "content": "static void\n_f33(jit_state_t *_jit, jit_int32_t o, jit_int32_t x,\n     jit_int32_t r, jit_int32_t y, jit_int32_t z, jit_int32_t u)\n{\n    assert(!(o & ~0x3f));\n    assert(!(x & ~0x1f));\n    assert(!(r & ~0x1f));\n    assert(!(y &  ~0x7));\n    assert(!(z & ~0xff));\n    assert(!(u & ~0x1f));\n    ii((o<<26)|(x<<21)|(r<<16)|(y<<13)|(z<<5)|u);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f34": {
      "start_point": [
        1530,
        0
      ],
      "end_point": [
        1541,
        1
      ],
      "content": "static void\n_f34(jit_state_t *_jit, jit_int32_t o, jit_int32_t o1,\n     jit_int32_t x, jit_int32_t sf, jit_int32_t n, jit_int32_t o2)\n{\n    assert(!(o  &   ~0x3f));\n    assert(!(o1 & ~0x7fff));\n    assert(!(x  &    ~0x3));\n    assert(!(sf &    ~0x7));\n    assert(!(n  &    ~0x1));\n    assert(!(o2 &   ~0x1f));\n    ii((o<<26)|(o1<<11)|(x<<9)|(sf<<6)|(n<<5)|o2);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f35": {
      "start_point": [
        1543,
        0
      ],
      "end_point": [
        1554,
        1
      ],
      "content": "static void\n_f35(jit_state_t *_jit, jit_int32_t o, jit_int32_t op,\n     jit_int32_t x, jit_int32_t sf, jit_int32_t n, jit_int32_t t)\n{\n    assert(!(o  &   ~0x3f));\n    assert(!(op & ~0x7fff));\n    assert(!(x  &    ~0x3));\n    assert(!(sf &    ~0x7));\n    assert(!(n  &    ~0x1));\n    assert(!(t  &   ~0x1f));\n    ii((o<<26)|(op<<11)|(x<<9)|(sf<<6)|(n<<5)|t);\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f36": {
      "start_point": [
        1556,
        0
      ],
      "end_point": [
        1568,
        1
      ],
      "content": "static void\n_f36(jit_state_t *_jit, jit_int32_t o, jit_int32_t r, jit_int32_t o1,\n     jit_int32_t x, jit_int32_t sf, jit_int32_t n, jit_int32_t o2)\n{\n    assert(!(o  &  ~0x3f));\n    assert(!(r  &  ~0x1f));\n    assert(!(o1 & ~0x3ff));\n    assert(!(x  &   ~0x3));\n    assert(!(sf &   ~0x7));\n    assert(!(n  &   ~0x1));\n    assert(!(o2 &  ~0x1f));\n    ii((o<<26)|(r<<21)|(o1<<11)|(x<<9)|(sf<<6)|(n<<5)|o2);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f37": {
      "start_point": [
        1570,
        0
      ],
      "end_point": [
        1584,
        1
      ],
      "content": "static void\n_f37(jit_state_t *_jit, jit_int32_t o, jit_int32_t r2,\n     jit_int32_t r1, jit_int32_t o1, jit_int32_t x,\n     jit_int32_t sf, jit_int32_t n, jit_int32_t o2)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r2 & ~0x1f));\n    assert(!(r1 & ~0x1f));\n    assert(!(o1 & ~0x1f));\n    assert(!(x  &  ~0x3));\n    assert(!(sf &  ~0x7));\n    assert(!(n  &  ~0x1));\n    assert(!(o2 & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(o1<<11)|(x<<9)|(sf<<6)|(n<<5)|o2);\n}",
      "lines": 15,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f38": {
      "start_point": [
        1586,
        0
      ],
      "end_point": [
        1595,
        1
      ],
      "content": "static void\n_f38(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t s, jit_int32_t u, jit_int32_t n)\n{\n    assert(!(o &     ~0x3f));\n    assert(!(s & ~0x3fffff));\n    assert(!(u &      ~0x7));\n    assert(!(n &      ~0x1));\n    ii((o<<26)|((s>>5)<<9)|(u<<6)|(n<<1)|(s&0x1f));\n}",
      "lines": 10,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        1597,
        0
      ],
      "end_point": [
        1603,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        1605,
        0
      ],
      "end_point": [
        1610,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tCOPY(r1, r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        1612,
        0
      ],
      "end_point": [
        1623,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    if (i0 >= -8192 && i0 <= 8191)\n\tLDI(i0, r0);\n    else if (!(i0 & 0x7ff))\n\tLDIL(i0, r0);\n    else {\n\tLDIL(i0 & ~0x7ff, r0);\n\tLDO(i0 & 0x7ff, r0, r0);\n    }\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        1625,
        0
      ],
      "end_point": [
        1633,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    LDIL(i0 & ~0x7ff, r0);\n    LDO(i0 & 0x7ff, r0, r0);\n    return (w);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_addi": {
      "start_point": [
        1635,
        0
      ],
      "end_point": [
        1647,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -1024 && i0 <= 1023)\n\tADDI(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        1649,
        0
      ],
      "end_point": [
        1657,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    addcr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        1659,
        0
      ],
      "end_point": [
        1667,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    addxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        1669,
        0
      ],
      "end_point": [
        1681,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -1023 && i0 <= 1024)\n\taddi(r0, r1, -i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        1683,
        0
      ],
      "end_point": [
        1691,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subcr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        1693,
        0
      ],
      "end_point": [
        1701,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        1703,
        0
      ],
      "end_point": [
        1715,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -1024 && i0 <= 1023)\n\tSUBI(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        1717,
        0
      ],
      "end_point": [
        1732,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0, t1;\n    t0 = jit_get_reg(jit_class_fpr);\n    t1 = jit_get_reg(jit_class_fpr);\n    stxi(alloca_offset - 8, _FP_REGNO, r1);\n    ldxi_f(rn(t0), _FP_REGNO, alloca_offset - 8);\n    stxi(alloca_offset - 8, _FP_REGNO, r2);\n    ldxi_f(rn(t1), _FP_REGNO, alloca_offset - 8);\n    XMPYU(rn(t0), rn(t1), rn(t0));\n    stxi_d(alloca_offset - 8, _FP_REGNO, rn(t0));\n    ldxi(r0, _FP_REGNO, alloca_offset - 4);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 16,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        1734,
        0
      ],
      "end_point": [
        1748,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (r0 != r1) {\n\tmovi(r0, i0);\n\tmulr(r0, r1, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tmulr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__llmul": {
      "start_point": [
        1750,
        0
      ],
      "end_point": [
        1754,
        1
      ],
      "content": "static long long\n__llmul(int u, int v)\n{\n    return ((long long)u * (long long)v);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "long long",
        "long",
        "long"
      ]
    },
    "_qmulr": {
      "start_point": [
        1756,
        0
      ],
      "end_point": [
        1765,
        1
      ],
      "content": "static void\n_qmulr(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    movr(_R26_REGNO, r2);\n    movr(_R25_REGNO, r3);\n    calli((jit_word_t)__llmul);\n    movr(r0, _R29_REGNO);\n    movr(r1, _R28_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli": {
      "start_point": [
        1767,
        0
      ],
      "end_point": [
        1776,
        1
      ],
      "content": "static void\n_qmuli(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    movr(_R26_REGNO, r2);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__llmul);\n    movr(r0, _R29_REGNO);\n    movr(r1, _R28_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr_u": {
      "start_point": [
        1778,
        0
      ],
      "end_point": [
        1795,
        1
      ],
      "content": "static void\n_qmulr_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\tt0, t1;\n    t0 = jit_get_reg(jit_class_fpr);\n    t1 = jit_get_reg(jit_class_fpr);\n    stxi(alloca_offset - 8, _FP_REGNO, r2);\n    ldxi_f(rn(t0), _FP_REGNO, alloca_offset - 8);\n    stxi(alloca_offset - 8, _FP_REGNO, r3);\n    ldxi_f(rn(t1), _FP_REGNO, alloca_offset - 8);\n    XMPYU(rn(t0), rn(t1), rn(t0));\n    stxi_d(alloca_offset - 8, _FP_REGNO, rn(t0));\n    ldxi(r0, _FP_REGNO, alloca_offset - 4);\n    ldxi(r1, _FP_REGNO, alloca_offset - 8);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 18,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli_u": {
      "start_point": [
        1797,
        0
      ],
      "end_point": [
        1806,
        1
      ],
      "content": "static void\n_qmuli_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qmulr_u(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__idiv": {
      "start_point": [
        1808,
        0
      ],
      "end_point": [
        1812,
        1
      ],
      "content": "static int\n__idiv(int u, int v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_divr": {
      "start_point": [
        1814,
        0
      ],
      "end_point": [
        1821,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_R26_REGNO, r1);\n    movr(_R25_REGNO, r2);\n    calli((jit_word_t)__idiv);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        1823,
        0
      ],
      "end_point": [
        1830,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_R26_REGNO, r1);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__idiv);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__udiv": {
      "start_point": [
        1832,
        0
      ],
      "end_point": [
        1836,
        1
      ],
      "content": "static unsigned int\n__udiv(unsigned int u, unsigned int v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "_divr_u": {
      "start_point": [
        1838,
        0
      ],
      "end_point": [
        1845,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_R26_REGNO, r1);\n    movr(_R25_REGNO, r2);\n    calli((jit_word_t)__udiv);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1847,
        0
      ],
      "end_point": [
        1854,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_R26_REGNO, r1);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__udiv);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__irem": {
      "start_point": [
        1856,
        0
      ],
      "end_point": [
        1860,
        1
      ],
      "content": "static int\n__irem(int u, int v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    },
    "_remr": {
      "start_point": [
        1862,
        0
      ],
      "end_point": [
        1869,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_R26_REGNO, r1);\n    movr(_R25_REGNO, r2);\n    calli((jit_word_t)__irem);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1871,
        0
      ],
      "end_point": [
        1878,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_R26_REGNO, r1);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__irem);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__urem": {
      "start_point": [
        1880,
        0
      ],
      "end_point": [
        1884,
        1
      ],
      "content": "static unsigned int\n__urem(unsigned int u, unsigned int v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "unsigned int",
        "unsigned",
        "int"
      ]
    },
    "_remr_u": {
      "start_point": [
        1886,
        0
      ],
      "end_point": [
        1893,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    movr(_R26_REGNO, r1);\n    movr(_R25_REGNO, r2);\n    calli((jit_word_t)__urem);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1895,
        0
      ],
      "end_point": [
        1902,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(_R26_REGNO, r1);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__urem);\n    movr(r0, _R28_REGNO);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__idivrem": {
      "start_point": [
        1904,
        0
      ],
      "end_point": [
        1911,
        1
      ],
      "content": "static idiv_t\n__idivrem(int u, int v)\n{\n    idiv_t\tdiv;\n    div.quo = u / v;\n    div.rem = u % v;\n    return (div);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "idiv_t"
      ]
    },
    "_qdivr": {
      "start_point": [
        1913,
        0
      ],
      "end_point": [
        1922,
        1
      ],
      "content": "static void\n_qdivr(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    movr(_R26_REGNO, r2);\n    movr(_R25_REGNO, r3);\n    calli((jit_word_t)__idivrem);\n    movr(r0, _R28_REGNO);\n    movr(r1, _R29_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi": {
      "start_point": [
        1924,
        0
      ],
      "end_point": [
        1933,
        1
      ],
      "content": "static void\n_qdivi(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    movr(_R26_REGNO, r2);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__idivrem);\n    movr(r0, _R28_REGNO);\n    movr(r1, _R29_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__udivrem": {
      "start_point": [
        1935,
        0
      ],
      "end_point": [
        1942,
        1
      ],
      "content": "static udiv_t\n__udivrem(unsigned int u, unsigned int v)\n{\n    udiv_t\tdiv;\n    div.quo = u / v;\n    div.rem = u % v;\n    return (div);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "udiv_t"
      ]
    },
    "_qdivr_u": {
      "start_point": [
        1944,
        0
      ],
      "end_point": [
        1953,
        1
      ],
      "content": "static void\n_qdivr_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    movr(_R26_REGNO, r2);\n    movr(_R25_REGNO, r3);\n    calli((jit_word_t)__udivrem);\n    movr(r0, _R28_REGNO);\n    movr(r1, _R29_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi_u": {
      "start_point": [
        1955,
        0
      ],
      "end_point": [
        1964,
        1
      ],
      "content": "static void\n_qdivi_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    movr(_R26_REGNO, r2);\n    movi(_R25_REGNO, i0);\n    calli((jit_word_t)__udivrem);\n    movr(r0, _R28_REGNO);\n    movr(r1, _R29_REGNO);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1966,
        0
      ],
      "end_point": [
        1974,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    andr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1976,
        0
      ],
      "end_point": [
        1984,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    orr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1986,
        0
      ],
      "end_point": [
        1994,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    xorr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshr": {
      "start_point": [
        1996,
        0
      ],
      "end_point": [
        2002,
        1
      ],
      "content": "static void\n_lshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    SUBI(0x1f, r2, _R1_REGNO);\n    MTSAR(_R1_REGNO);\n    DEPW_Z(r1, 32, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr": {
      "start_point": [
        2004,
        0
      ],
      "end_point": [
        2010,
        1
      ],
      "content": "static void\n_rshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    SUBI(0x1f, r2, _R1_REGNO);\n    MTSAR(_R1_REGNO);\n    EXTRW(r1, 32, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr_u": {
      "start_point": [
        2012,
        0
      ],
      "end_point": [
        2018,
        1
      ],
      "content": "static void\n_rshr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    SUBI(0x1f, r2, _R1_REGNO);\n    MTSAR(_R1_REGNO);\n    EXTRW_U(r1, 32, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpr": {
      "start_point": [
        2020,
        0
      ],
      "end_point": [
        2026,
        1
      ],
      "content": "static void\n_cmpr(jit_state_t *_jit, jit_word_t c,\n      jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPCLR_(c, r1, r2, r0);\n    LDI(1, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpi": {
      "start_point": [
        2028,
        0
      ],
      "end_point": [
        2042,
        1
      ],
      "content": "static void\n_cmpi(jit_state_t *_jit, jit_word_t c, jit_word_t ci,\n      jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tCMPICLR_(ci, i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPCLR_(c, r1, rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n    LDI(1, r0);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_c": {
      "start_point": [
        2044,
        0
      ],
      "end_point": [
        2049,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_uc(r0, r1);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        2051,
        0
      ],
      "end_point": [
        2056,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    ldi_uc(r0, i0);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2058,
        0
      ],
      "end_point": [
        2063,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    ldxr_uc(r0, r1, r2);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        2065,
        0
      ],
      "end_point": [
        2070,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_uc(r0, r1, i0);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        2072,
        0
      ],
      "end_point": [
        2084,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tLDBL(i0, _R0_REGNO, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tLDBL(sign_extend(i0, 11), rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        2086,
        0
      ],
      "end_point": [
        2100,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tLDBI(i0, r1, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tLDBL(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_uc(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_s": {
      "start_point": [
        2102,
        0
      ],
      "end_point": [
        2107,
        1
      ],
      "content": "static void\n_ldr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_us(r0, r1);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        2109,
        0
      ],
      "end_point": [
        2114,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    ldi_us(r0, i0);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        2116,
        0
      ],
      "end_point": [
        2121,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    ldxr_us(r0, r1, r2);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        2123,
        0
      ],
      "end_point": [
        2128,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_us(r0, r1, i0);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        2130,
        0
      ],
      "end_point": [
        2142,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tLDHL(i0, _R0_REGNO, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tLDHL(sign_extend(i0, 11), rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        2144,
        0
      ],
      "end_point": [
        2158,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tLDHI(i0, r1, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tLDHL(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_us(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        2160,
        0
      ],
      "end_point": [
        2172,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tLDWL(i0, _R0_REGNO, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tLDWL(sign_extend(i0, 11), rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        2174,
        0
      ],
      "end_point": [
        2188,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tLDWI(i0, r1, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tLDWL(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_ui(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        2190,
        0
      ],
      "end_point": [
        2202,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tSTBL(r0, i0, _R0_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tSTBL(r0, sign_extend(i0, 11), rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        2204,
        0
      ],
      "end_point": [
        2212,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        2214,
        0
      ],
      "end_point": [
        2228,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tSTBI(r1, i0, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tSTBL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        2230,
        0
      ],
      "end_point": [
        2242,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tSTHL(r0, i0, _R0_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tSTHL(r0, sign_extend(i0, 11), rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        2244,
        0
      ],
      "end_point": [
        2252,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        2254,
        0
      ],
      "end_point": [
        2268,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tSTHI(r1, i0, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tSTHL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        2270,
        0
      ],
      "end_point": [
        2282,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8182 && i0 <= 8191)\n\tSTWL(r0, i0, _R0_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tLDIL(i0 & ~0x7ff, rn(reg));\n\tSTWL(r0, sign_extend(i0, 11), rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        2284,
        0
      ],
      "end_point": [
        2292,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        2294,
        0
      ],
      "end_point": [
        2308,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tSTWI(r1, i0, r0);\n    else if (i0 >= -8182 && i0 <= 8191)\n\tSTWL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bcmpr": {
      "start_point": [
        2310,
        0
      ],
      "end_point": [
        2319,
        1
      ],
      "content": "static jit_word_t\n_bcmpr(jit_state_t *_jit, jit_word_t c,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    CMPB_N_(c, r0, r1, ((i0 - w) >> 2) - 2);\n    NOP();\n    return (w);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcmpi": {
      "start_point": [
        2321,
        0
      ],
      "end_point": [
        2340,
        1
      ],
      "content": "static jit_word_t\n_bcmpi(jit_state_t *_jit, jit_word_t c, jit_word_t ci,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -16 && i1 <= 15) {\n\tw = _jit->pc.w;\n\tCMPIB_N_(ci, i1, r0, ((i0 - w) >> 2) - 2);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = _jit->pc.w;\n\tCMPB_N_(c, r0, rn(reg), ((i0 - w) >> 2) - 2);\n\tjit_unget_reg(reg);\n    }\n    NOP();\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxr": {
      "start_point": [
        2342,
        0
      ],
      "end_point": [
        2353,
        1
      ],
      "content": "static jit_word_t\n_bmxr(jit_state_t *_jit, jit_bool_t c,\n      jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andr(rn(reg), r0, r1);\n    w = c ? bnei(i0, rn(reg), 0) : beqi(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxi": {
      "start_point": [
        2355,
        0
      ],
      "end_point": [
        2367,
        1
      ],
      "content": "static jit_word_t\n_bmxi(jit_state_t *_jit, jit_bool_t c,\n      jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    andr(rn(reg), r0, rn(reg));\n    w = c ? bnei(i0, rn(reg), 0) : beqi(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr": {
      "start_point": [
        2369,
        0
      ],
      "end_point": [
        2377,
        1
      ],
      "content": "static jit_word_t\n_boaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    ADDB_N_SV(r1, r0, ((i0 - w) >> 2) - 2);\n    NOP();\n    return (w);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi": {
      "start_point": [
        2379,
        0
      ],
      "end_point": [
        2396,
        1
      ],
      "content": "static jit_word_t\n_boaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -16 && i1 <= 15) {\n\tw = _jit->pc.w;\n\tADDIB_N_SV(i1, r0, ((i0 - w) >> 2) - 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = boaddr(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr_u": {
      "start_point": [
        2398,
        0
      ],
      "end_point": [
        2406,
        1
      ],
      "content": "static jit_word_t\n_boaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    ADDB_N_UV(r1, r0, ((i0 - w) >> 2) - 2);\n    NOP();\n    return (w);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi_u": {
      "start_point": [
        2408,
        0
      ],
      "end_point": [
        2425,
        1
      ],
      "content": "static jit_word_t\n_boaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -16 && i1 <= 15) {\n\tw = _jit->pc.w;\n\tADDIB_N_UV(i1, r0, ((i0 - w) >> 2) - 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = boaddr_u(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr": {
      "start_point": [
        2427,
        0
      ],
      "end_point": [
        2435,
        1
      ],
      "content": "static jit_word_t\n_bxaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    ADDB_N_NSV(r1, r0, ((i0 - w) >> 2) - 2);\n    NOP();\n    return (w);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi": {
      "start_point": [
        2437,
        0
      ],
      "end_point": [
        2454,
        1
      ],
      "content": "static jit_word_t\n_bxaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -16 && i1 <= 15) {\n\tw = _jit->pc.w;\n\tADDIB_N_NSV(i1, r0, ((i0 - w) >> 2) - 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bxaddr(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr_u": {
      "start_point": [
        2456,
        0
      ],
      "end_point": [
        2464,
        1
      ],
      "content": "static jit_word_t\n_bxaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    ADDB_N_NUV(r1, r0, ((i0 - w) >> 2) - 2);\n    NOP();\n    return (w);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi_u": {
      "start_point": [
        2466,
        0
      ],
      "end_point": [
        2483,
        1
      ],
      "content": "static jit_word_t\n_bxaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -16 && i1 <= 15) {\n\tw = _jit->pc.w;\n\tADDIB_N_NUV(i1, r0, ((i0 - w) >> 2) - 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bxaddr_u(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr": {
      "start_point": [
        2485,
        0
      ],
      "end_point": [
        2495,
        1
      ],
      "content": "static jit_word_t\n_bosubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    SUB_NSV(r0, r1, r0);\n    w = _jit->pc.w;\n    /* null'ed if no signed overflow */\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi": {
      "start_point": [
        2497,
        0
      ],
      "end_point": [
        2502,
        1
      ],
      "content": "static jit_word_t\n_bosubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    movi(_R1_REGNO, i1);\n    return (bosubr(i0, r0, _R1_REGNO));\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr_u": {
      "start_point": [
        2504,
        0
      ],
      "end_point": [
        2510,
        1
      ],
      "content": "static jit_word_t\n_bosubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    SUB(r0, r1, r0);\n    SUB_B(_R0_REGNO, _R0_REGNO, _R1_REGNO);\n    return (bnei(i0, _R1_REGNO, 0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi_u": {
      "start_point": [
        2512,
        0
      ],
      "end_point": [
        2519,
        1
      ],
      "content": "static jit_word_t\n_bosubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    movi(_R1_REGNO, i1);\n    SUB(r0, _R1_REGNO, r0);\n    SUB_B(_R0_REGNO, _R0_REGNO, _R1_REGNO);\n    return (bnei(i0, _R1_REGNO, 0));\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr": {
      "start_point": [
        2521,
        0
      ],
      "end_point": [
        2531,
        1
      ],
      "content": "static jit_word_t\n_bxsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    SUB_SV(r0, r1, r0);\n    w = _jit->pc.w;\n    /* null'ed if signed overflow */\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi": {
      "start_point": [
        2533,
        0
      ],
      "end_point": [
        2538,
        1
      ],
      "content": "static jit_word_t\n_bxsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    movi(_R1_REGNO, i1);\n    return (bxsubr(i0, r0, _R1_REGNO));\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr_u": {
      "start_point": [
        2540,
        0
      ],
      "end_point": [
        2546,
        1
      ],
      "content": "static jit_word_t\n_bxsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    SUB(r0, r1, r0);\n    SUB_B(_R0_REGNO, _R0_REGNO, _R1_REGNO);\n    return (beqi(i0, _R1_REGNO, 0));\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi_u": {
      "start_point": [
        2548,
        0
      ],
      "end_point": [
        2555,
        1
      ],
      "content": "static jit_word_t\n_bxsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    movi(_R1_REGNO, i1);\n    SUB(r0, _R1_REGNO, r0);\n    SUB_B(_R0_REGNO, _R0_REGNO, _R1_REGNO);\n    return (beqi(i0, _R1_REGNO, 0));\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpr": {
      "start_point": [
        2557,
        0
      ],
      "end_point": [
        2561,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    BV_N(_R0_REGNO, r0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        2563,
        0
      ],
      "end_point": [
        2574,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = ((i0 - _jit->pc.w) >> 2) - 2;\n    if (w >= -32768 && w <= 32767)\n\tB_N(w, _R0_REGNO);\n    else {\n\tmovi(_R1_REGNO, w);\n\tBV_N(_R0_REGNO, _R1_REGNO);\n    }\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        2576,
        0
      ],
      "end_point": [
        2583,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = movi_p(_R1_REGNO, i0);\n    jmpr(_R1_REGNO);\n    return (w);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        2585,
        0
      ],
      "end_point": [
        2607,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_word_t\t\tdyn;\n    jit_word_t\t\timm;\n    if (r0 != _R1_REGNO)\n\tCOPY(r0, _R1_REGNO);\n    /* inline $$dyncall */\n    imm = _jit->pc.w;\n    BBI_N_GE(_R1_REGNO, 30, 0);\t\t/*   if (r1 & 2) {\t\t*/\n    DEPWRI(0, 31, 2, _R1_REGNO);\t/*\tr1 &= ~2;\t\t*/\n    LDWI(4, _R1_REGNO, _R19_REGNO);\t/*\tr19 = r1[1];\t\t*/\n    LDWI(0, _R1_REGNO, _R1_REGNO);\t/*\tr1  = r1[0];\t\t*/\n\t\t\t\t\t/*   }\t\t\t\t*/\n    BVE_L(_R1_REGNO);\n    STWL(_RP_REGNO, -24, _SP_REGNO);\n    dyn = _jit->pc.w;\n    jmpi(_jit->pc.w);\n    patch_at(imm, _jit->pc.w);\n    BVE_L_N(_R1_REGNO);\n    NOP();\n    patch_at(dyn, _jit->pc.w);\n}",
      "lines": 23,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        2609,
        0
      ],
      "end_point": [
        2631,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    if (i0 & 2) {\n\ti0 &= -4;\n\tmovi(_R1_REGNO, i0);\n\tLDWI(4, _R1_REGNO, _R19_REGNO);\n\tLDWI(0, _R1_REGNO, _R1_REGNO);\n\tBVE_L(_R1_REGNO);\n\tSTWL(_RP_REGNO, -24, _SP_REGNO);\n    }\n    else {\n\tw = ((i0 - _jit->pc.w) >> 2) - 2;\n\tif (w >= -32768 && w <= 32767)\n\t    B_L_N(w);\n\telse {\n\t    movi(_R1_REGNO, i0);\n\t    BVE_L_N(_R1_REGNO);\n\t}\n\tNOP();\n    }\n}",
      "lines": 23,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        2633,
        0
      ],
      "end_point": [
        2640,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = movi_p(_R1_REGNO, i0);\n    callr(_R1_REGNO);\n    return (w);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        2653,
        0
      ],
      "end_point": [
        2704,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\tregno;\n    jit_word_t\t\toffset;\n\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\t/* hppa stack grows up */\n\tassert(_jitc->function->self.aoff <= _jitc->function->frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = _jitc->function->frame;\n    }\n    if (_jitc->function->allocar) {\n\t_jitc->function->self.aoff += 63;\n\t_jitc->function->self.aoff &= -64;\n    }\n    _jitc->function->stack = ((_jitc->function->self.aoff -\n\t\t\t       _jitc->function->self.alen -\n\t\t\t       _jitc->function->self.size) + 63) & -64;\n\n    /* Save stack frame (FIXME Only required if non leaf) */\n    STWL(_RP_REGNO, -20, _SP_REGNO);\n\n    /* Create stack frame */\n    COPY(_FP_REGNO, _R1_REGNO);\n    COPY(_SP_REGNO, _FP_REGNO);\n    STWL_MA(_R1_REGNO, _jitc->function->stack, _SP_REGNO);\n\n    /* Save any modified callee save registers */\n    offset = alloca_offset - 140;\n    for (regno = 0; regno < jit_size(gr); regno++, offset += 4) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, gr[regno]))\n\t    stxi(offset, _FP_REGNO, rn(gr[regno]));\n    }\n    for (regno = 0; regno < jit_size(fr); regno++, offset += 8) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, fr[regno]))\n\t    stxi_d(offset, _FP_REGNO, rn(fr[regno]));\n    }\n\n    if (_jitc->function->allocar) {\n\tregno = jit_get_reg(jit_class_gpr);\n\tmovi(rn(regno), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _FP_REGNO, rn(regno));\n\tjit_unget_reg(regno);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (regno = 3; regno >= _jitc->function->vagp; --regno)\n\t    stxi(params_offset - regno * 4 - 4, _FP_REGNO, rn(_R26 - regno));\n    }\n}",
      "lines": 52,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        2706,
        0
      ],
      "end_point": [
        2734,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\tregno;\n    jit_word_t\t\toffset;\n\n    if (_jitc->function->assume_frame)\n\treturn;\n    /* Restore any modified callee save registers */\n    offset = alloca_offset - 140;\n    for (regno = 0; regno < jit_size(gr); regno++, offset += 4) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, gr[regno]))\n\t    ldxi(rn(gr[regno]), _FP_REGNO, offset);\n    }\n    for (regno = 0; regno < jit_size(fr); regno++, offset += 8) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, fr[regno]))\n\t    ldxi_d(rn(fr[regno]), _FP_REGNO, offset);\n    }\n\n    /* Restore stack frame (FIXME Only required if non leaf) */\n    LDWL(-20, _FP_REGNO, _RP_REGNO);\n    LDO(_jitc->function->stack, _FP_REGNO, _SP_REGNO);\n    LDWL_MB(-_jitc->function->stack, _SP_REGNO, _FP_REGNO);\n#if defined(__hpux)\n    BVE_N(_RP_REGNO);\n#else\n    BV_N(_R0_REGNO, _RP_REGNO);\n#endif\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        2736,
        0
      ],
      "end_point": [
        2741,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    /* Initialize stack pointer to the first stack argument. */\n    addi(r0, _FP_REGNO, params_offset - _jitc->function->vagp * 4);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        2743,
        0
      ],
      "end_point": [
        2753,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Update vararg stack pointer. */\n    subi(r1, r1, 4);\n\n    /* Load argument. */\n    ldr(r0, r1);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        2755,
        0
      ],
      "end_point": [
        2791,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_word_t\t\t w;\n    union {\n\tjit_uint32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n    u.w = instr;\n    switch (u.i[0] >> 26) {\n\tcase 0x8:\t\t\t\t/* LDIL */\n\t    u.i[0] &= ~0x1fffff;\n\t    u.i[0] |= re_assemble_21((label & ~0x7ff) >> 11);\n\t    assert((u.i[1] >> 26) == 0xd);\t/* LDO */\n\t    u.i[1] &= ~0xffff;\n\t    u.i[1] |= re_assemble_16(label & 0x7ff);\n\t    break;\n\tcase 0x20:\tcase 0x22:\t\t/* CMPB */\n\tcase 0x21:\tcase 0x23:\t\t/* CMPIB */\n\tcase 0x28:\tcase 0x2a:\t\t/* ADDB */\n\tcase 0x29:\tcase 0x2b:\t\t/* ADDIB */\n\tcase 0x31:\t\t\t\t/* BBI */\n\t    w = ((label - instr) >> 2) - 2;\n\t    assert(w >= -2048 && w <= 2047);\n\t    u.i[0] &= ~0x1ffd;\n\t    u.i[0] |= re_assemble_12(w);\n\t    break;\n\tcase 0x3a:\t\t\t\t/* B */\n\t    w = ((label - instr) >> 2) - 2;\n\t    assert(w >= -32768 && w <= 32767);\n\t    u.i[0] &= ~0x1f1ffd;\n\t    u.i[0] |= re_assemble_17(w);\n\t    break;\n\tdefault:\n\t    abort();\n    }\n}",
      "lines": 37,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_hppa-fpu.c": {
    "_f39": {
      "start_point": [
        494,
        0
      ],
      "end_point": [
        503,
        1
      ],
      "content": "static void\n_f39(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t x, jit_int32_t t)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(!(x & ~0x1f));\n    assert(!(t & ~0x1f));\n    ii((o<<26)|(b<<21)|(x<<16)|t);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f40": {
      "start_point": [
        505,
        0
      ],
      "end_point": [
        514,
        1
      ],
      "content": "static void\n_f40(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t x, jit_int32_t r)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(!(x & ~0x1f));\n    assert(!(r & ~0x1f));\n    ii((o<<26)|(b<<21)|(x<<16)|(1<<9)|r);\n}",
      "lines": 10,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f41": {
      "start_point": [
        516,
        0
      ],
      "end_point": [
        525,
        1
      ],
      "content": "static void\n_f41(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t x, jit_int32_t t)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(x >= -16 && x < 15);\n    assert(!(t & ~0x1f));\n    ii((o<<26)|(b<<21)|(low_sign_unext(x,5)<<16)|(1<<12)|t);\n}",
      "lines": 10,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f42": {
      "start_point": [
        527,
        0
      ],
      "end_point": [
        536,
        1
      ],
      "content": "static void\n_f42(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t b, jit_int32_t i, jit_int32_t r)\n{\n    assert(!(o & ~0x3f));\n    assert(!(b & ~0x1f));\n    assert(i >= -16 && i < 15);\n    assert(!(r & ~0x1f));\n    ii((o<<26)|(b<<21)|(low_sign_unext(i,5)<<16)|(1<<12)|(1<<9)|r);\n}",
      "lines": 10,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f45": {
      "start_point": [
        538,
        0
      ],
      "end_point": [
        553,
        1
      ],
      "content": "static void\n_f45(jit_state_t *_jit, jit_int32_t o,\n     jit_int32_t r, jit_int32_t a, jit_int32_t b, jit_int32_t fmt,\n     jit_int32_t c, jit_int32_t d, jit_int32_t e, jit_int32_t t)\n{\n    assert(!(o   & ~0x3f));\n    assert(!(r   & ~0x1f));\n    assert(!(a   & ~0x1f));\n    assert(!(b   &  ~0x7));\n    assert(!(fmt &  ~0x3));\n    assert(!(c   &  ~0x3));\n    assert(!(d   &  ~0x7));\n    assert(!(e   &  ~0x1));\n    assert(!(t   & ~0x1f));\n    ii((o<<26)|(r<<21)|(a<<16)|(fmt<<13)|(b<<11)|(c<<9)|(d<<6)|(e<<5)|t);\n}",
      "lines": 16,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f46": {
      "start_point": [
        555,
        0
      ],
      "end_point": [
        572,
        1
      ],
      "content": "static void\n_f46(jit_state_t *_jit, jit_int32_t o, jit_int32_t r,\n     jit_int32_t a, jit_int32_t s, jit_int32_t df, jit_int32_t sf,\n     jit_int32_t b, jit_int32_t c, jit_int32_t d, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r  & ~0x1f));\n    assert(!(a  &  ~0x7));\n    assert(!(s  &  ~0x7));\n    assert(!(df &  ~0x3));\n    assert(!(sf &  ~0x3));\n    assert(!(b  &  ~0x3));\n    assert(!(c  &  ~0x7));\n    assert(!(d  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r<<21)|(a<<18)|(s<<15)|\n       (df<<13)|(sf<<11)|(b<<9)|(c<<6)|(d<<5)|t);\n}",
      "lines": 18,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f47_48": {
      "start_point": [
        574,
        0
      ],
      "end_point": [
        589,
        1
      ],
      "content": "static void\n_f47_48(jit_state_t *_jit, jit_int32_t o,\n\tjit_int32_t r2, jit_int32_t r1, jit_int32_t y, jit_int32_t fmt,\n\tjit_int32_t a, jit_int32_t b, jit_int32_t c, jit_int32_t t)\n{\n    assert(!(o   & ~0x3f));\n    assert(!(r2  & ~0x1f));\n    assert(!(r1  & ~0x1f));\n    assert(!(y   &  ~0x7));\n    assert(!(fmt &  ~0x3));\n    assert(!(a   &  ~0x3));\n    assert(!(b   &  ~0x7));\n    assert(!(c   &  ~0x1));\n    assert(!(t   & ~0x1f));\n    ii((o<<26)|(r2<<21)|(r1<<16)|(y<<13)|(fmt<<11)|(a<<9)|(b<<6)|(c<<5)|t);\n}",
      "lines": 16,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f49_52": {
      "start_point": [
        591,
        0
      ],
      "end_point": [
        611,
        1
      ],
      "content": "static void\n_f49_52(jit_state_t *_jit, jit_int32_t o,\n\tjit_int32_t r1, jit_int32_t r2, jit_int32_t y,\n\tjit_int32_t v, jit_int32_t f, jit_int32_t a, jit_int32_t b,\n\tjit_int32_t u, jit_int32_t c, jit_int32_t d, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r1 & ~0x1f));\n    assert(!(r2 & ~0x3f));\n    assert(!(y  &  ~0x7));\n    assert(!(v  &  ~0x1));\n    assert(!(f  &  ~0x1));\n    assert(!(a  &  ~0x3));\n    assert(!(b  &  ~0x1));\n    assert(!(u  &  ~0x1));\n    assert(!(c  &  ~0x1));\n    assert(!(d  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r1<<21)|(r2<<16)|(y<<13)|(v<<12)|\n       (f<<11)|(a<<9)|(b<<8)|(u<<7)|(c<<6)|(d<<5)|t);\n}",
      "lines": 21,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f53": {
      "start_point": [
        613,
        0
      ],
      "end_point": [
        628,
        1
      ],
      "content": "static void\n_f53(jit_state_t *_jit, jit_int32_t o, jit_int32_t r1, jit_int32_t r2,\n     jit_int32_t ta, jit_int32_t ra, jit_int32_t f, jit_int32_t tm)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r1 & ~0x1f));\n    assert(!(r2 & ~0x1f));\n    assert(!(ta & ~0x1f));\n    assert(!(ra & ~0x1f));\n    assert(!(f  &  ~0x1));\n    assert(!(tm & ~0x1f));\n    assert(ra != tm ||\n\t   (ta == r1 || ta == r2 || ta == tm) ||\n\t   (f && ra == 1) || (!f && !ra));\n    ii((o<<26)|(r1<<21)|(r2<<16)|(ta<<11)|(ra<<6)|(f<<5)|tm);\n}",
      "lines": 16,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f54": {
      "start_point": [
        630,
        0
      ],
      "end_point": [
        648,
        1
      ],
      "content": "static void\n_f54(jit_state_t *_jit, jit_int32_t o, jit_int32_t r1, jit_int32_t r2,\n     jit_int32_t a, jit_int32_t b, jit_int32_t f, jit_int32_t c,\n     jit_int32_t d, jit_int32_t e, jit_int32_t g, jit_int32_t t)\n{\n    assert(!(o  & ~0x3f));\n    assert(!(r1 & ~0x1f));\n    assert(!(r2 & ~0x1f));\n    assert(!(a  &  ~0x7));\n    assert(!(b  &  ~0x1));\n    assert(!(f  &  ~0x1));\n    assert(!(c  &  ~0x7));\n    assert(!(e  &  ~0x1));\n    assert(!(e  &  ~0x1));\n    assert(!(g  &  ~0x1));\n    assert(!(t  & ~0x1f));\n    ii((o<<26)|(r1<<21)|(r2<<16)|(a<<13)|\n       (b<<12)|(f<11)|(c<<8)|(d<<7)|(e<<6)|(g<<5)|t);\n}",
      "lines": 19,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_f": {
      "start_point": [
        650,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "content": "static void\n_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(alloca_offset - 8, _FP_REGNO, r1);\n    ldxi_f(r0, _FP_REGNO, alloca_offset - 8);\n    FCNVXF_S_S(r0, r0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        658,
        0
      ],
      "end_point": [
        664,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(alloca_offset - 8, _FP_REGNO, r1);\n    ldxi_f(r0, _FP_REGNO, alloca_offset - 8);\n    FCNVXF_S_D(r0, r0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_f_i": {
      "start_point": [
        666,
        0
      ],
      "end_point": [
        675,
        1
      ],
      "content": "static void\n_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FCNVXT_S_S(r1, rn(reg));\n    stxi_f(alloca_offset - 8, _FP_REGNO, rn(reg));\n    ldxi(r0, _FP_REGNO, alloca_offset - 8);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_i": {
      "start_point": [
        677,
        0
      ],
      "end_point": [
        686,
        1
      ],
      "content": "static void\n_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FCNVXT_D_S(r1, rn(reg));\n    stxi_d(alloca_offset - 8, _FP_REGNO, rn(reg));\n    ldxi(r0, _FP_REGNO, alloca_offset - 8);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        688,
        0
      ],
      "end_point": [
        707,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i);\n\tstxi_i(alloca_offset - 8, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_f(r0, _FP_REGNO, alloca_offset - 8);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        709,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\t ii[2];\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    data.d = *i0;\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.ii[0]);\n\tstxi_i(alloca_offset - 8, _FP_REGNO, rn(reg));\n\tmovi(rn(reg), data.ii[1]);\n\tstxi_i(alloca_offset - 4, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_d(r0, _FP_REGNO, alloca_offset - 8);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpr_f": {
      "start_point": [
        759,
        0
      ],
      "end_point": [
        767,
        1
      ],
      "content": "static void\n_cmpr_f(jit_state_t *_jit, jit_word_t c,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDI(0, r0);\n    FCMP_S_(r1, r2, c);\n    FTEST();\n    LDI(1, r0);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpi_f": {
      "start_point": [
        769,
        0
      ],
      "end_point": [
        777,
        1
      ],
      "content": "static void\n_cmpi_f(jit_state_t *_jit, jit_word_t c,\n\tjit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    cmpr_f(c, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpr_d": {
      "start_point": [
        779,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "static void\n_cmpr_d(jit_state_t *_jit, jit_word_t c,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    LDI(0, r0);\n    FCMP_D_(r1, r2, c);\n    FTEST();\n    LDI(1, r0);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cmpi_d": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        797,
        1
      ],
      "content": "static void\n_cmpi_d(jit_state_t *_jit, jit_word_t c,\n\tjit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    cmpr_d(c, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        799,
        0
      ],
      "end_point": [
        812,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 3));\n    if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 6))\n\tFLDWL(i0, _R0_REGNO, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        814,
        0
      ],
      "end_point": [
        829,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tFLDWI(i0, r1, r0);\n    /* |im11a|0|t|i| */\n    else if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 6))\n\tFLDWL(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_f(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        844,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 7));\n    if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 14))\n\tFLDDL(i0, _R0_REGNO, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        846,
        0
      ],
      "end_point": [
        861,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tFLDDI(i0, r1, r0);\n    /* |im10a|m|a|1|i| */\n    else if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 14))\n\tFLDDL(i0, r1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_d(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        863,
        0
      ],
      "end_point": [
        876,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 3));\n    if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 6))\n\tFSTWL(r0, i0, _R0_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        879,
        0
      ],
      "end_point": [
        887,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        889,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        900,
        0
      ],
      "end_point": [
        920,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tFSTWI(r1, i0, r0);\n    /* |im11a|0|t|i| */\n    else if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 6))\n\tFSTWL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if FSTXR\n\tmovi(rn(reg), i0);\n\tstxr_f(rn(reg), r0, r1);\n#else\n\taddi(rn(reg), r0, i0);\n\tstr_f(rn(reg), r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        922,
        0
      ],
      "end_point": [
        935,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    assert(!(i0 & 7));\n    if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 14))\n\tFSTDL(r0, i0, _R0_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        937,
        0
      ],
      "end_point": [
        957,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -16 && i0 <= 15)\n\tFSTDI(r1, i0, r0);\n    /* |im10a|m|a|1|i| */\n    else if (i0 >= -8192 && i0 <= 8191 && !(re_assemble_16(i0) & 14))\n\tFSTDL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if FSTXR\n\tmovi(rn(reg), i0);\n\tstxr_d(rn(reg), r0, r1);\n#else\n\taddi(rn(reg), r0, i0);\n\tstr_d(rn(reg), r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bcmpr_f": {
      "start_point": [
        959,
        0
      ],
      "end_point": [
        970,
        1
      ],
      "content": "static jit_word_t\n_bcmpr_f(jit_state_t *_jit, jit_word_t c,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_S_(r0, r1, c);\n    FTEST();\n    w = _jit->pc.w;\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcmpi_f": {
      "start_point": [
        972,
        0
      ],
      "end_point": [
        987,
        1
      ],
      "content": "static jit_word_t\n_bcmpi_f(jit_state_t *_jit, jit_word_t c,\n\t jit_word_t i0, jit_int32_t r0, jit_float32_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_f(rn(reg), i1);\n    FCMP_S_(r0, rn(reg), c);\n    FTEST();\n    w = _jit->pc.w;\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcmpr_d": {
      "start_point": [
        989,
        0
      ],
      "end_point": [
        1000,
        1
      ],
      "content": "static jit_word_t\n_bcmpr_d(jit_state_t *_jit, jit_word_t c,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_D_(r0, r1, c);\n    FTEST();\n    w = _jit->pc.w;\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bcmpi_d": {
      "start_point": [
        1002,
        0
      ],
      "end_point": [
        1017,
        1
      ],
      "content": "static jit_word_t\n_bcmpi_d(jit_state_t *_jit, jit_word_t c,\n\t jit_word_t i0, jit_int32_t r0, jit_float64_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_d(rn(reg), i1);\n    FCMP_D_(r0, rn(reg), c);\n    FTEST();\n    w = _jit->pc.w;\n    B_N(((i0 - w) >> 2) - 2, _R0_REGNO);\n    NOP();\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1019,
        0
      ],
      "end_point": [
        1037,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Align pointer if required. */\n    reg = jit_get_reg(jit_class_gpr);\n    andi(rn(reg), r1, 7);\n    subr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n\n    /* Adjust vararg stack pointer. */\n    subi(r1, r1, 8);\n\n    /* Load argument. */\n    ldr_d(r0, r1);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_hppa-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_hppa.c": {
    "jit_get_cpu": {
      "start_point": [
        128,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n    /* FIXME Expecting PARISC 2.0, for PARISC 1.0 should not use fr16-fr31 */\n}",
      "lines": 5,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        134,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        140,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\toffset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = params_offset;\n    _jitc->function->self.argi = _jitc->function->self.alen = 0;\n    /* float conversion */\n    _jitc->function->self.aoff = alloca_offset;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 41,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    jit_int32_t\t\toffset;\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\n\t    break;\n\tcase 2:\n\t    _jitc->function->self.aoff = (_jitc->function->self.aoff + 1) & -2;\n\t    break;\n\tcase 3:\tcase 4:\n\t    _jitc->function->self.aoff = (_jitc->function->self.aoff + 3) & -4;\n\t    break;\n\tdefault:\n\t    _jitc->function->self.aoff = (_jitc->function->self.aoff + 7) & -8;\n\t    break;\n    }\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    offset = _jitc->function->self.aoff;\n    _jitc->function->self.aoff += length;\n    return (offset);\n}",
      "lines": 26,
      "depth": 14,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        209,
        0
      ],
      "end_point": [
        227,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_addi(reg, v, 63);\n    jit_andi(reg, reg, -64);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        229,
        0
      ],
      "end_point": [
        239,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        241,
        0
      ],
      "end_point": [
        248,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    jit_movr(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        250,
        0
      ],
      "end_point": [
        257,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        266,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    jit_movr_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        268,
        0
      ],
      "end_point": [
        275,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        277,
        0
      ],
      "end_point": [
        284,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    jit_movr_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        286,
        0
      ],
      "end_point": [
        293,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        295,
        0
      ],
      "end_point": [
        302,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        304,
        0
      ],
      "end_point": [
        310,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    assert(u->code == jit_code_arg ||\n\t   u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_reg_p(u->u.w));\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        312,
        0
      ],
      "end_point": [
        329,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t_jitc->function->vagp = _jitc->function->self.argi;\n    }\n    jit_dec_synth();\n}",
      "lines": 18,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        331,
        0
      ],
      "end_point": [
        346,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    _jitc->function->self.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else\n\toffset = _jitc->function->self.size;\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        348,
        0
      ],
      "end_point": [
        363,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    _jitc->function->self.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else\n\toffset = _jitc->function->self.size;\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        365,
        0
      ],
      "end_point": [
        390,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (_jitc->function->self.argi & 1) {\n\t++_jitc->function->self.argi;\n\t_jitc->function->self.size -= sizeof(jit_word_t);\n    }\n    _jitc->function->self.size -= sizeof(jit_float64_t);\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi + 1;\n\t_jitc->function->self.argi += 2;\n    }\n    else {\n\t/* \"Standard\" initial value (-52) is unaligned */\n\tif (_jitc->function->self.size & 7)\n\t    _jitc->function->self.size -= sizeof(jit_word_t);\n\toffset = _jitc->function->self.size;\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 26,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        392,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (v->u.w >= 0)\n\tjit_extr_c(u, _R26 - v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP, v->u.w + 3);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        404,
        0
      ],
      "end_point": [
        414,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (v->u.w >= 0)\n\tjit_extr_uc(u, _R26 - v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP, v->u.w + 3);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        416,
        0
      ],
      "end_point": [
        426,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (v->u.w >= 0)\n\tjit_extr_s(u, _R26 - v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP, v->u.w + 2);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        428,
        0
      ],
      "end_point": [
        438,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (v->u.w >= 0)\n\tjit_extr_us(u, _R26 - v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP, v->u.w + 2);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        440,
        0
      ],
      "end_point": [
        450,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (v->u.w >= 0)\n\tjit_movr(u, _R26 - v->u.w);\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        452,
        0
      ],
      "end_point": [
        462,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (v->u.w >= 0)\n\tjit_movr(_R26 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        464,
        0
      ],
      "end_point": [
        479,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (v->u.w >= 0)\n\tjit_movi(_R26 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        481,
        0
      ],
      "end_point": [
        491,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (v->u.w >= 0)\n\tjit_movr_f(u, _F4 - v->u.w);\n    else\n\tjit_ldxi_f(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        493,
        0
      ],
      "end_point": [
        503,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (v->u.w >= 0)\n\tjit_movr_f(_F4 - v->u.w, u);\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        505,
        0
      ],
      "end_point": [
        520,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (v->u.w >= 0)\n\tjit_movi_f(_R26 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        522,
        0
      ],
      "end_point": [
        532,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (v->u.w >= 0)\n\tjit_movr_d(u, _F4 - v->u.w);\n    else\n\tjit_ldxi_d(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        534,
        0
      ],
      "end_point": [
        544,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (v->u.w >= 0)\n\tjit_movr_d(_F4 - v->u.w, u);\n    else\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        546,
        0
      ],
      "end_point": [
        561,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (v->u.w >= 0)\n\tjit_movi_d(_R26 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        563,
        0
      ],
      "end_point": [
        577,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_R26 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, u);\n    jit_dec_synth();\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        579,
        0
      ],
      "end_point": [
        598,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_R26 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        600,
        0
      ],
      "end_point": [
        623,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_f(_F4 - _jitc->function->call.argi, u);\n#if !defined(__hpux)\n\t/* HP-UX appears to always pass float arguments in gpr registers */\n\tif (_jitc->function->call.call & jit_call_varargs)\n#endif\n\t{\n\t    jit_stxi_f(alloca_offset - 8, JIT_FP, u);\n\t    jit_ldxi(_R26 - _jitc->function->call.argi, JIT_FP,\n\t\t     alloca_offset - 8);\n\t}\n\t++_jitc->function->call.argi;\n    }\n    else\n\tjit_stxi_f(_jitc->function->call.size + params_offset, JIT_SP, u);\n    jit_dec_synth();\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        625,
        0
      ],
      "end_point": [
        654,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_word_t);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_f(_F4 - _jitc->function->call.argi, u);\n#if !defined(__hpux)\n\t/* HP-UX appears to always pass float arguments in gpr registers */\n\tif (_jitc->function->call.call & jit_call_varargs)\n#endif\n\t{\n\t    jit_stxi_f(alloca_offset - 8, JIT_FP,\n\t\t       _F4 - _jitc->function->call.argi);\n\t    jit_ldxi(_R26 - _jitc->function->call.argi,\n\t\t     JIT_FP, alloca_offset - 8);\n\t}\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 30,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        656,
        0
      ],
      "end_point": [
        689,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_float64_t);\n    if (_jitc->function->call.argi & 1) {\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size -= sizeof(jit_word_t);\n    }\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_d(_F4 - (_jitc->function->call.argi + 1), u);\n#if !defined(__hpux)\n\t/* HP-UX appears to always pass float arguments in gpr registers */\n\tif (_jitc->function->call.call & jit_call_varargs)\n#endif\n\t{\n\t    jit_stxi_d(alloca_offset - 8, JIT_FP, u);\n\t    jit_ldxi(_R26 - _jitc->function->call.argi,\n\t\t     JIT_FP, alloca_offset - 4);\n\t    jit_ldxi(_R25 - _jitc->function->call.argi,\n\t\t     JIT_FP, alloca_offset - 8);\n\t}\n\t_jitc->function->call.argi += 2;\n    }\n    else {\n\t/* \"Standard\" initial value (-52) is unaligned */\n\tif ((_jitc->function->call.size + params_offset) & 7)\n\t    _jitc->function->call.size -= sizeof(jit_word_t);\n\tjit_stxi_d(_jitc->function->call.size + params_offset, JIT_SP, u);\n    }\n    jit_dec_synth();\n}",
      "lines": 34,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        728,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    _jitc->function->call.size -= sizeof(jit_float64_t);\n    if (_jitc->function->call.argi & 1) {\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size -= sizeof(jit_word_t);\n    }\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_d(_F4 - (_jitc->function->call.argi + 1), u);\n#if !defined(__hpux)\n\t/* HP-UX appears to always pass float arguments in gpr registers */\n\tif (_jitc->function->call.call & jit_call_varargs)\n#endif\n\t{\n\t    jit_stxi_d(alloca_offset - 8, JIT_FP,\n\t\t       _F4 - (_jitc->function->call.argi + 1));\n\t    jit_ldxi(_R26 - _jitc->function->call.argi,\n\t\t     JIT_FP, alloca_offset - 4);\n\t    jit_ldxi(_R25 - _jitc->function->call.argi,\n\t\t     JIT_FP, alloca_offset - 8);\n\t}\n\t_jitc->function->call.argi += 2;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tif ((_jitc->function->call.size + params_offset) & 7)\n\t    _jitc->function->call.size -= sizeof(jit_word_t);\n\tjit_stxi_d(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 38,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        730,
        0
      ],
      "end_point": [
        748,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tif (spec & jit_class_gpr) {\n\t    regno = _R26 - regno;\n\t    if (regno >= 0 && regno < node->v.w)\n\t\treturn (1);\n\t}\n\telse if (spec & jit_class_fpr) {\n\t    regno = _F4 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n    return (0);\n}",
      "lines": 19,
      "depth": 14,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        750,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen > _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = call->w.w = _jitc->function->call.argi;\n    _jitc->function->call.argi = _jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        765,
        0
      ],
      "end_point": [
        779,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen > _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = node->w.w = _jitc->function->call.argi;\n    _jitc->function->call.argi = _jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        781,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        795,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        797,
        0
      ],
      "end_point": [
        803,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        805,
        0
      ],
      "end_point": [
        811,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        813,
        0
      ],
      "end_point": [
        819,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    jit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        821,
        0
      ],
      "end_point": [
        827,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    jit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        829,
        0
      ],
      "end_point": [
        835,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    jit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        837,
        0
      ],
      "end_point": [
        1443,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w),rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w,rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (!(temp->flag & jit_flag_patch)) {\n\t\t\tword = calli_p(temp->u.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t    else\n\t\t\tcalli(temp->u.w);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\n\t    case jit_code_arg:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrf\n#undef case_rrrw\n#undef case_rrw\n#undef case_rrrr\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 607,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1450,
        0
      ],
      "end_point": [
        1529,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n    jit_word_t\t\tf, t, s;\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n#if defined(__hppa)\n/* --- parisc2.0.pdf ---\n\t\tProgramming Note\n\nThe minimum spacing that is guaranteed to work for \"self-modifying code\" is\nshown in the code segment below. Since instruction prefetching is permitted,\nany data cache flushes must be separated from any instruction cache flushes\nby a SYNC. This will ensure that the \"new\" instruction will be written to\nmemory prior to any attempts at prefetching it as an instruction.\n\n\tLDIL\tl%newinstr,rnew\n\tLDW\tr%newinstr(0,rnew),temp\n\tLDIL\tl%instr,rinstr\n\tSTW\ttemp,r%instr(0,rinstr)\n\tFDC\tr%instr(0,rinstr)\n\tSYNC\n\tFIC\tr%instr(rinstr)\n\tSYNC\n\tinstr\t...\n\t(at least seven instructions)\n\nThis sequence assumes a uniprocessor system. In a multiprocessor system,\nsoftware must ensure no processor is executing code which is in the process\nof being modified.\n*/\n\n/*\n  Adapted from ffcall/trampoline/cache-hppa.c:__TR_clear_cache to\nloop over addresses as it is unlikely from and to addresses would fit in\nat most two cachelines.\n  FIXME A cache line can be 16, 32, or 64 bytes.\n */\n    /*\n     * Copyright 1995-1997 Bruno Haible, <bruno@clisp.org>\n     *\n     * This is free software distributed under the GNU General Public Licence\n     * described in the file COPYING. Contact the author if you don't have this\n     * or can't live with it. There is ABSOLUTELY NO WARRANTY, explicit or implied,\n     * on this software.\n     */\n    {\n\tjit_word_t\tn = f + 32;\n\tregister int\tu, v;\n\tfor (; f <= t; n = f + 32, f += 64) {\n\t    asm volatile (\"fdc 0(0,%0)\"\n\t\t\t  \"\\n\\t\" \"fdc 0(0,%1)\"\n\t\t\t  \"\\n\\t\" \"sync\"\n\t\t\t  :\n\t\t\t  : \"r\" (f), \"r\" (n)\n\t\t\t  );\n\t    asm volatile (\"mfsp %%sr0,%1\"\n\t\t\t  \"\\n\\t\" \"ldsid (0,%4),%0\"\n\t\t\t  \"\\n\\t\" \"mtsp %0,%%sr0\"\n\t\t\t  \"\\n\\t\" \"fic 0(%%sr0,%2)\"\n\t\t\t  \"\\n\\t\" \"fic 0(%%sr0,%3)\"\n\t\t\t  \"\\n\\t\" \"sync\"\n\t\t\t  \"\\n\\t\" \"mtsp %1,%%sr0\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  \"\\n\\t\" \"nop\"\n\t\t\t  : \"=r\" (u), \"=r\" (v)\n\t\t\t  : \"r\" (f), \"r\" (n), \"r\" (f)\n\t\t\t  );\n\t}\n    }\n#else\n    /* This is supposed to work but appears to fail on multiprocessor systems */\n    __clear_cache((void *)f, (void *)t);\n#endif\n}",
      "lines": 80,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1531,
        0
      ],
      "end_point": [
        1535,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_gpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1537,
        0
      ],
      "end_point": [
        1541,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_gpr_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1543,
        0
      ],
      "end_point": [
        1547,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_fpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1549,
        0
      ],
      "end_point": [
        1553,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_fpr_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1555,
        0
      ],
      "end_point": [
        1575,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\tflag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ia64-cpu.c": {
    "byte_swap_if_big_endian": {
      "start_point": [
        1520,
        0
      ],
      "end_point": [
        1537,
        1
      ],
      "content": "static jit_word_t\nbyte_swap_if_big_endian(jit_word_t w)\n{\n    union {\n\tchar\tc[8];\n\tlong\tw;\n    } l, h;\n    l.w = w;\n    h.c[0] = l.c[7];\n    h.c[1] = l.c[6];\n    h.c[2] = l.c[5];\n    h.c[3] = l.c[4];\n    h.c[4] = l.c[3];\n    h.c[5] = l.c[2];\n    h.c[6] = l.c[1];\n    h.c[7] = l.c[0];\n    return (h.w);\n}",
      "lines": 18,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_out": {
      "start_point": [
        1542,
        0
      ],
      "end_point": [
        1554,
        1
      ],
      "content": "static void\n_out(jit_state_t *_jit, int n, int tm,\n     jit_word_t s0, jit_word_t s1, jit_word_t s2)\n{\n    int\t\t\t i;\n    jit_word_t\t\t l, h, *w;\n    set_bundle(_jit->pc.ul, l, h, tm, s0, s1, s2);\n    _jit->pc.ul += 2;\n    w = (jit_word_t *)_jitc->inst;\n    for (i = n; i < _jitc->ioff; i++)\n\tw[i - n] = w[i];\n    _jitc->ioff -= n;\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stop": {
      "start_point": [
        1559,
        0
      ],
      "end_point": [
        1570,
        1
      ],
      "content": "static void\n_stop(jit_state_t *_jit)\n{\n    /* Clear set of live registers */\n    jit_regset_set_ui(&_jitc->regs, 0);\n    _jitc->pred = 0;\n    /* Flag a stop is required */\n    if (_jitc->ioff)\n\t_jitc->inst[_jitc->ioff - 1].t |= INST_STOP;\n    else\n\tinst(nop_m, INST_Ms);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sync": {
      "start_point": [
        1572,
        0
      ],
      "end_point": [
        1583,
        1
      ],
      "content": "static void\n_sync(jit_state_t *_jit)\n{\n    /* Taken branches are supposed to not need a stop, so, it\n     * should not be required to stop if no registers live in\n     * sequential code */\n    if (jit_regset_cmp_ui(&_jitc->regs, 0) != 0 || _jitc->pred)\n\tstop();\n    do\n\tflush();\n    while (_jitc->ioff);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "templat": {
      "start_point": [
        1687,
        0
      ],
      "end_point": [
        1728,
        1
      ],
      "content": "static jit_word_t\ntemplat(jit_word_t cc)\n{\n    switch (cc) {\n\tcase I_:\n\tcase I_I_:\tcase I_Is:\n\tcase I_B_:\tcase I_Bs:\n\tcase Is:\n\tcase IsI_:\tcase IsIs:\n\tcase M_:\n\tcase M_I_:\tcase M_Is:\n\tcase M_M_:\tcase M_Ms:\n\tcase M_F_:\tcase M_Fs:\n\tcase M_B_:\tcase M_Bs:\n\tcase M_I_I_:\tcase M_I_Is:\n\tcase M_I_B_:\tcase M_I_Bs:\n\tcase M_IsI_:\tcase M_IsIs:\n\tcase M_M_I_:\tcase M_M_Is:\n\tcase M_M_F_:\tcase M_M_Fs:\n\tcase M_M_B_:\tcase M_M_Bs:\n\tcase M_F_I_:\tcase M_F_Is:\n\tcase M_F_B_:\tcase M_F_Bs:\n\tcase M_B_B_:\tcase M_B_Bs:\n\tcase M_L_X_:\tcase M_L_Xs:\n\tcase Ms:\n\tcase MsI_:\tcase MsIs:\n\tcase MsM_:\tcase MsMs:\n\tcase MsM_I_:\tcase MsM_Is:\n\tcase F_:\n\tcase F_I_:\tcase F_Is:\n\tcase F_B_:\tcase F_Bs:\n\tcase Fs:\n\tcase B_:\n\tcase B_B_:\tcase B_Bs:\n\tcase B_B_B_:\tcase B_B_Bs:\n\tcase Bs:\n\tcase L_X_:\tcase L_Xs:\n\t    return (cc);\n\tdefault:\n\t    return (0);\n    }\n}",
      "lines": 42,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match_2": {
      "start_point": [
        1735,
        0
      ],
      "end_point": [
        1744,
        1
      ],
      "content": "static jit_word_t\nmatch_2(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | M_2)))\n\treturn (t);\n    if ((t = templat(cc | I_2)))\n\treturn (t);\n    return (0);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "matchs2": {
      "start_point": [
        1746,
        0
      ],
      "end_point": [
        1755,
        1
      ],
      "content": "static jit_word_t\nmatchs2(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | Ms2)))\n\treturn (t);\n    if ((t = templat(cc | Is2)))\n\treturn (t);\n    return (0);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match2": {
      "start_point": [
        1757,
        0
      ],
      "end_point": [
        1765,
        1
      ],
      "content": "static jit_word_t\nmatch2(jit_word_t cc)\n{\n    if ((cc & 0xf00) == A_2)\n\treturn (match_2(cc & ~0xf00));\n    if ((cc & 0xf00) == As2)\n\treturn (matchs2(cc & ~0xf00));\n    return (0);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match_1": {
      "start_point": [
        1767,
        0
      ],
      "end_point": [
        1780,
        1
      ],
      "content": "static jit_word_t\nmatch_1(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | I_1)))\n\treturn (t);\n    if ((t = templat(cc | M_1)))\n\treturn (t);\n    if ((t = match2(cc | I_1)))\n\treturn (t);\n    if ((t = match2(cc | M_1)))\n\treturn (t);\n    return (0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "matchs1": {
      "start_point": [
        1782,
        0
      ],
      "end_point": [
        1795,
        1
      ],
      "content": "static jit_word_t\nmatchs1(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | Is1)))\n\treturn (t);\n    if ((t = templat(cc | Ms1)))\n\treturn (t);\n    if ((t = match2(cc | Is1)))\n\treturn (t);\n    if ((t = match2(cc | Ms1)))\n\treturn (t);\n    return (0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match1": {
      "start_point": [
        1797,
        0
      ],
      "end_point": [
        1805,
        1
      ],
      "content": "static jit_word_t\nmatch1(jit_word_t cc)\n{\n    if ((cc & 0x0f0) == A_1)\n\treturn (match_1(cc & ~0x0f0));\n    if ((cc & 0x0f0) == As1)\n\treturn (matchs1(cc & ~0x0f0));\n    return (0);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match_0": {
      "start_point": [
        1807,
        0
      ],
      "end_point": [
        1820,
        1
      ],
      "content": "static jit_word_t\nmatch_0(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | M_0)))\n\treturn (t);\n    if ((t = templat(cc | I_0)))\n\treturn (t);\n    if ((t = match1(cc | M_0)))\n\treturn (t);\n    if ((t = match1(cc | I_0)))\n\treturn (t);\n    return (0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "matchs0": {
      "start_point": [
        1822,
        0
      ],
      "end_point": [
        1835,
        1
      ],
      "content": "static jit_word_t\nmatchs0(jit_word_t cc)\n{\n    jit_word_t\t\tt;\n    if ((t = templat(cc | Ms0)))\n\treturn (t);\n    if ((t = templat(cc | Is0)))\n\treturn (t);\n    if ((t = match1(cc | Ms0)))\n\treturn (t);\n    if ((t = match1(cc | Is0)))\n\treturn (t);\n    return (0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "match0": {
      "start_point": [
        1837,
        0
      ],
      "end_point": [
        1845,
        1
      ],
      "content": "static jit_word_t\nmatch0(jit_word_t cc)\n{\n    if ((cc & 0x00f) == A_0)\n\treturn (match_0(cc & ~0x00f));\n    if ((cc & 0x00f) == As0)\n\treturn (matchs0(cc & ~0x00f));\n    return (0);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_flush": {
      "start_point": [
        1847,
        0
      ],
      "end_point": [
        2115,
        1
      ],
      "content": "static void\n_flush(jit_state_t *_jit)\n{\n    int\t\t\tn, soff;\n    jit_word_t\t\tt, cc, tm, s0, s1, s2;\n\n    if (!_jitc->ioff)\n\treturn;\n    for (cc = 0, n = soff = 0; n < _jitc->ioff; n++, soff += 4)\n\tcc |= (jit_uword_t)(_jitc->inst[n].t) << soff;\n\n    soff = 0xf00;\n    while (soff) {\n\t/* Try to find a template, or reduce down\n\t * to one instruction if no template match */\n\tif ((t = templat(cc))) {\n\t    cc = t;\n\t    break;\n\t}\n\t/* A- instructions may be execute in M- or I- unit */\n\tif ((t = match0(cc))) {\n\t    cc = t;\n\t    break;\n\t}\n\tcc &= ~soff;\n\tsoff >>= 4;\n    }\n    assert(soff);\n\n    /* Prefer tail nop if need to add some nop, so that patching is easier */\n#define ii(n)\t\t_jitc->inst[n].i\n    switch (cc) {\n\tcase I_:\n\t    n = 1;\t\ttm = TM_M_I_I_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = nop_i;\n\t    break;\n\tcase I_I_:\n\t    n = 2;\t\ttm = TM_M_I_I_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase I_Is:\n\t    n = 2;\t\ttm = TM_M_I_Is;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase I_B_:\n\t    n = 2;\t\ttm = TM_M_I_B_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase I_Bs:\n\t    n = 2;\t\ttm = TM_M_I_Bs;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase Is:\n\t    n = 1;\t\ttm = TM_M_IsI_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = nop_i;\n\t    break;\n\tcase IsI_:\n\t    n = 2;\t\ttm = TM_M_IsI_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase IsIs:\n\t    n = 2;\t\ttm = TM_M_IsIs;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase M_:\n\t    n = 1;\t\ttm = TM_M_I_I_;\n\t    s0 = ii(0);\t\ts1 = nop_i;\t\ts2 = nop_i;\n\t    break;\n\tcase M_I_:\n\t    n = 2;\t\ttm = TM_M_I_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_Is:\n\t    n = 2;\t\ttm = TM_M_IsI_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_M_:\n\t    n = 2;\t\ttm = TM_M_M_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_Ms:\n\t    n = 2;\t\ttm = TM_M_M_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_F_:\n\t    n = 2;\t\ttm = TM_M_F_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_Fs:\n\t    n = 2;\t\ttm = TM_M_F_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase M_B_:\n\t    n = 2;\t\ttm = TM_M_B_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_b;\n\t    break;\n\tcase M_Bs:\n\t    n = 2;\t\ttm = TM_M_B_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_b;\n\t    break;\n\tcase M_I_I_:\n\t    n = 3;\t\ttm = TM_M_I_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_I_Is:\n\t    n = 3;\t\ttm = TM_M_I_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_I_B_:\n\t    n = 3;\t\ttm = TM_M_I_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_I_Bs:\n\t    n = 3;\t\ttm = TM_M_I_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_IsI_:\n\t    n = 3;\t\ttm = TM_M_IsI_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_IsIs:\n\t    n = 3;\t\ttm = TM_M_IsIs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_I_:\n\t    n = 3;\t\ttm = TM_M_M_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_Is:\n\t    n = 3;\t\ttm = TM_M_M_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_F_:\n\t    n = 3;\t\ttm = TM_M_M_F_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_Fs:\n\t    n = 3;\t\ttm = TM_M_M_Fs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_B_:\n\t    n = 3;\t\ttm = TM_M_M_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_M_Bs:\n\t    n = 3;\t\ttm = TM_M_M_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_F_I_:\n\t    n = 3;\t\ttm = TM_M_F_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_F_Is:\n\t    n = 3;\t\ttm = TM_M_F_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_F_B_:\n\t    n = 3;\t\ttm = TM_M_F_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_F_Bs:\n\t    n = 3;\t\ttm = TM_M_F_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_B_B_:\n\t    n = 3;\t\ttm = TM_M_B_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_B_Bs:\n\t    n = 3;\t\ttm = TM_M_B_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_L_X_:\n\t    n = 3;\t\ttm = TM_M_L_X_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase M_L_Xs:\n\t    n = 3;\t\ttm = TM_M_L_Xs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase Ms:\n\t    n = 1;\t\ttm = TM_MsM_I_;\n\t    s0 = ii(0);\t\ts1 = nop_m;\t\ts2 = nop_i;\n\t    break;\n\tcase MsI_:\n\t    n = 2;\t\ttm = TM_MsM_I_;\n\t    s0 = ii(0);\t\ts1 = nop_m;\t\ts2 = ii(1);\n\t    break;\n\tcase MsIs:\n\t    n = 2;\t\ttm = TM_MsM_Is;\n\t    s0 = ii(0);\t\ts1 = nop_m;\t\ts2 = ii(1);\n\t    break;\n\tcase MsM_:\n\t    n = 2;\t\ttm = TM_MsM_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase MsMs:\n\t    n = 2;\t\ttm = TM_MsM_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_i;\n\t    break;\n\tcase MsM_I_:\n\t    n = 3;\t\ttm = TM_MsM_I_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase MsM_Is:\n\t    n = 3;\t\ttm = TM_MsM_Is;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase F_:\n\t    n = 1;\t\ttm = TM_M_F_I_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = nop_i;\n\t    break;\n\tcase F_I_:\n\t    n = 2;\t\ttm = TM_M_F_I_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase F_Is:\n\t    n = 2;\t\ttm = TM_M_F_Is;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase F_B_:\n\t    n = 2;\t\ttm = TM_M_F_B_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase F_Bs:\n\t    n = 2;\t\ttm = TM_M_F_Bs;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase Fs:\n\t    n = 1;\t\ttm = TM_M_F_Is;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = nop_i;\n\t    break;\n\tcase B_:\n\t    n = 1;\t\ttm = TM_B_B_B_;\n\t    s0 = ii(0);\t\ts1 = nop_b;\t\ts2 = nop_b;\n\t    break;\n\tcase B_B_:\n\t    n = 2;\t\ttm = TM_B_B_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_b;\n\t    break;\n\tcase B_Bs:\n\t    n = 2;\t\ttm = TM_B_B_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = nop_b;\n\t    break;\n\tcase B_B_B_:\n\t    n = 3;\t\ttm = TM_B_B_B_;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase B_B_Bs:\n\t    n = 3;\t\ttm = TM_B_B_Bs;\n\t    s0 = ii(0);\t\ts1 = ii(1);\t\ts2 = ii(2);\n\t    break;\n\tcase Bs:\n\t    n = 1;\t\ttm = TM_B_B_Bs;\n\t    s0 = ii(0);\t\ts1 = nop_b;\t\ts2 = nop_b;\n\t    break;\n\tcase L_X_:\n\t    n = 2;\t\ttm = TM_M_L_X_;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tcase L_Xs:\n\t    n = 2;\t\ttm = TM_M_L_Xs;\n\t    s0 = nop_m;\t\ts1 = ii(0);\t\ts2 = ii(1);\n\t    break;\n\tdefault:\n\t    abort();\n    }\n    out(n, tm, s0, s1, s2);\n}",
      "lines": 269,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_inst": {
      "start_point": [
        2117,
        0
      ],
      "end_point": [
        2126,
        1
      ],
      "content": "static void\n_inst(jit_state_t *_jit, jit_word_t i, jit_uint8_t t)\n{\n    if (_jitc->ioff > 2)\n\tflush();\n    assert(!(i & 0x11111e0000000000L));\n    _jitc->inst[_jitc->ioff].i = i;\n    _jitc->inst[_jitc->ioff].t = t;\n    ++_jitc->ioff;\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A1": {
      "start_point": [
        2128,
        0
      ],
      "end_point": [
        2143,
        1
      ],
      "content": "static void\n_A1(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x4, jit_word_t x2, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x4 &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((8L<<37)|(x4<<29)|(x2<<27)|(r3<<20)|(r2<<13)|(r1<<6)|_p, INST_A);\n    SETREG(r1);\n}",
      "lines": 16,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A3": {
      "start_point": [
        2145,
        0
      ],
      "end_point": [
        2161,
        1
      ],
      "content": "static void\n_A3(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x4, jit_word_t x2, jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x4 &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(im >= -128 && im <= 127);\n    assert(!(r1 & ~0x7f));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((8L<<37)|(((im>>7)&1L)<<36)|(x4<<29)|(x2<<27)|\n\t (r3<<20)|((im&0x7fL)<<13)|(r1<<6)|_p, INST_A);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A4": {
      "start_point": [
        2163,
        0
      ],
      "end_point": [
        2178,
        1
      ],
      "content": "static void\n_A4(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x2, jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(im >= -8192 && im <= 8191);\n    assert(!(r1  & ~0x7f));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((8L<<37)|(((im>>13)&1L)<<36)|(x2<<34)|(((im>>7)&0x3fL)<<27)|\n\t (r3<<20)|((im&0x7fL)<<13)|(r1<<6)|_p, INST_A);\n    SETREG(r1);\n}",
      "lines": 16,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A5": {
      "start_point": [
        2180,
        0
      ],
      "end_point": [
        2200,
        1
      ],
      "content": "static void\n_A5(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    jit_word_t\t\ts, i5, i9, i7;\n    assert(!(_p & ~0x3fL));\n    assert(!(r3  & ~0x3L));\n    assert(im >= -2097152 && im <= 2097151);\n    assert(!(r1  & ~0x7fL));\n    /* imm22 = sign_ext(s << 21 | imm5c << 16 | imm9d << 7 | imm7b, 22) */\n    s  = (im & 0x200000) >> 21;\n    i5 = (im & 0x1f0000) >> 16;\n    i9 = (im &   0xff80) >>  7;\n    i7 =  im &     0x7f;\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((9L<<37)|(s<<36)|(i9<<27)|(i5<<22)|\n\t (r3<<20)|(i7<<13)|(r1<<6)|_p, INST_A);\n    SETREG(r1);\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A6": {
      "start_point": [
        2202,
        0
      ],
      "end_point": [
        2224,
        1
      ],
      "content": "static void\n_A6(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t o, jit_word_t x2, jit_word_t ta, jit_word_t p2,\n    jit_word_t r3, jit_word_t r2, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(o  &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(ta &  ~0x1L));\n    assert(!(p2 & ~0x7fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    inst((o<<37)|(x2<<34)|(ta<<33)|(p2<<27)|(r3<<20)|\n\t (r2<<13)|(c<<12)|(p1<<6)|_p, INST_A);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 23,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A7": {
      "start_point": [
        2226,
        0
      ],
      "end_point": [
        2247,
        1
      ],
      "content": "static void\n_A7(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t o, jit_word_t x2, jit_word_t ta,\n    jit_word_t p2, jit_word_t r3, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(o  &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(ta &  ~0x1L));\n    assert(!(p2 & ~0x7fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((o<<37)|(1L<<36)|(x2<<34)|(ta<<33)|\n\t (p2<<27)|(r3<<20)|(c<<12)|(p1<<6)|_p, INST_A);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 22,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A8": {
      "start_point": [
        2249,
        0
      ],
      "end_point": [
        2271,
        1
      ],
      "content": "static void\n_A8(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t o, jit_word_t x2, jit_word_t ta, jit_word_t p2,\n    jit_word_t r3, jit_word_t im, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(o  &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(ta &  ~0x1L));\n    assert(!(p2 & ~0x7fL));\n    assert(!(r3 & ~0x7fL));\n    assert(im >= -128 && im <= 127);\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((o<<37)|(((im>>7)&1L)<<36)|(x2<<34)|(ta<<33)|(p2<<27)|(r3<<20)|\n\t ((im&0x7fL)<<13)|(c<<12)|(p1<<6)|_p, INST_A);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 23,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_A9": {
      "start_point": [
        2273,
        0
      ],
      "end_point": [
        2292,
        1
      ],
      "content": "static void\n_A9(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t zb, jit_word_t x4,\n    jit_word_t x2, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(zb &  ~0x1L));\n    assert(!(x4 &  ~0xfL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((8L<<37)|(za<<36)|(1L<<34)|(zb<<33)|(x4<<29)|(x2<<27)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_A);\n    SETREG(r1);\n}",
      "lines": 20,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I1": {
      "start_point": [
        2294,
        0
      ],
      "end_point": [
        2310,
        1
      ],
      "content": "static void\n_I1(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t ct, jit_word_t x2, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ct &  ~0x3L));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(1L<<33)|(ct<<30)|(x2<<28)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I2": {
      "start_point": [
        2312,
        0
      ],
      "end_point": [
        2332,
        1
      ],
      "content": "static void\n_I2(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t xa, jit_word_t zb, jit_word_t xc,\n    jit_word_t xb ,jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(xa &  ~0x3L));\n    assert(!(zb &  ~0x1L));\n    assert(!(xc &  ~0x3L));\n    assert(!(xb &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(za<<36)|(xa<<34)|(zb<<33)|(xc<<30)|\n\t (xb<<28)|(r3<<20)|(r2<<13)|(r1<<6), INST_I);\n    SETREG(r1);\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I3": {
      "start_point": [
        2334,
        0
      ],
      "end_point": [
        2348,
        1
      ],
      "content": "static void\n_I3(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t mb, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(mb &  ~0xfL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(3L<<34)|(2L<<30)|(2L<<28)|\n\t (mb<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I4": {
      "start_point": [
        2350,
        0
      ],
      "end_point": [
        2364,
        1
      ],
      "content": "static void\n_I4(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t mh, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(mh & ~0xffL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(3L<<34)|(1L<<33)|(2L<<30)|\n\t (2L<<28)|(mh<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I5": {
      "start_point": [
        2366,
        0
      ],
      "end_point": [
        2384,
        1
      ],
      "content": "static void\n_I5(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t zb, jit_word_t x2,\n    jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(zb &  ~0x1L));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(za<<36)|(zb<<33)|(x2<<28)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 19,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I6": {
      "start_point": [
        2386,
        0
      ],
      "end_point": [
        2404,
        1
      ],
      "content": "static void\n_I6(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t zb, jit_word_t x2,\n    jit_word_t r3, jit_word_t ct, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(zb &  ~0x1L));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(ct & ~0x1fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(za<<36)|(1L<<34)|(zb<<33)|\n\t (x2<<28)|(r3<<20)|(ct<<14)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 19,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I7": {
      "start_point": [
        2406,
        0
      ],
      "end_point": [
        2422,
        1
      ],
      "content": "static void\n_I7(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t zb, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(zb &  ~0x1L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(za<<36)|(zb<<33)|(1L<<30)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I8": {
      "start_point": [
        2424,
        0
      ],
      "end_point": [
        2440,
        1
      ],
      "content": "static void\n_I8(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t za, jit_word_t zb, jit_word_t im, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(za &  ~0x1L));\n    assert(!(zb &  ~0x1L));\n    assert(!(im & ~0x1fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(za<<36)|(3L<<34)|(zb<<33)|(1L<<30)|(1L<<28)|\n\t (im<<20)|(r2<<13)|(r1<<6), INST_I);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I9": {
      "start_point": [
        2442,
        0
      ],
      "end_point": [
        2456,
        1
      ],
      "content": "static void\n_I9(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x2, jit_word_t r3, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((7L<<37)|(1L<<34)|(1L<<34)|(1L<<33)|\n\t (x2<<30)|(1L<<28)|(r3<<20)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I10": {
      "start_point": [
        2458,
        0
      ],
      "end_point": [
        2472,
        1
      ],
      "content": "static void\n_I10(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ct, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ct & ~0x3fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(3L<<34)|(ct<<27)|(r3<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I11": {
      "start_point": [
        2474,
        0
      ],
      "end_point": [
        2491,
        1
      ],
      "content": "static void\n_I11(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t len, jit_word_t r3,\n     jit_word_t pos, jit_word_t y, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(len & ~0x3fL));\n    assert(!(r3  & ~0x7fL));\n    assert(!(pos & ~0x1fL));\n    assert(!(y   &  ~0x1L));\n    assert(!(r1  & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(1L<<34)|(len<<27)|(r3<<20)|\n\t (pos<<14)|(y<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 18,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I12": {
      "start_point": [
        2493,
        0
      ],
      "end_point": [
        2508,
        1
      ],
      "content": "static void\n_I12(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t len, jit_word_t pos, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(len & ~0x3fL));\n    assert(!(pos & ~0x3fL));\n    assert(!(r2  & ~0x7fL));\n    assert(!(r1  & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(1L<<34)|(1L<<33)|(len<<27)|\n\t (pos<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 16,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I13": {
      "start_point": [
        2510,
        0
      ],
      "end_point": [
        2524,
        1
      ],
      "content": "static void\n_I13(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t len, jit_word_t pos, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(len & ~0x3fL));\n    assert(!(pos & ~0x3fL));\n    assert(!(im  & ~0x7fL));\n    assert(!(r1  & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(((im>>7)&1L)<<36)|(1L<<34)|(1L<<33)|(len<<27)|\n\t (1L<<26)|(pos<<20)|((im&0x7fL)<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I14": {
      "start_point": [
        2526,
        0
      ],
      "end_point": [
        2542,
        1
      ],
      "content": "static void\n_I14(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t s, jit_word_t len, jit_word_t r3, jit_word_t pos, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(s   &  ~0x1L));\n    assert(!(len & ~0x3fL));\n    assert(!(r3  & ~0x7fL));\n    assert(!(pos & ~0x1fL));\n    assert(!(r1  & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(s<<36)|(3L<<34)|(1L<<33)|\n\t (len<<27)|(r3<<20)|(pos<<14)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I15": {
      "start_point": [
        2544,
        0
      ],
      "end_point": [
        2560,
        1
      ],
      "content": "static void\n_I15(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t pos, jit_word_t len,\n     jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(pos & ~0x3fL));\n    assert(!(len &  ~0xfL));\n    assert(!(r3  & ~0x7fL));\n    assert(!(r2  & ~0x7fL));\n    assert(!(r1  & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(pos<<31)|(len<<27)|(r3<<20)|(r2<<13)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I16": {
      "start_point": [
        2562,
        0
      ],
      "end_point": [
        2583,
        1
      ],
      "content": "static void\n_I16(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t tb, jit_word_t ta, jit_word_t p2,\n     jit_word_t r3, jit_word_t ps, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(tb &  ~0x1L));\n    assert(!(ta &  ~0x1L));\n    assert(!(p2 & ~0x7fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(ps & ~0x3fL));\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((5L<<37)|(tb<<36)|(ta<<33)|(p2<<27)|\n\t (r3<<20)|(ps<<14)|(c<<12)|(p1<<6), INST_I);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 22,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I17": {
      "start_point": [
        2585,
        0
      ],
      "end_point": [
        2605,
        1
      ],
      "content": "static void\n_I17(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t tb, jit_word_t ta, jit_word_t p2,\n     jit_word_t r3, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(tb &  ~0x1L));\n    assert(!(ta &  ~0x1L));\n    assert(!(p2 & ~0x7fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((5L<<37)|(tb<<36)|(ta<<33)|(p2<<27)|\n\t (r3<<20)|(1L<<13)|(c<<12)|(p1<<6)|_p, INST_I);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 21,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I18": {
      "start_point": [
        2607,
        0
      ],
      "end_point": [
        2616,
        1
      ],
      "content": "static void\n_I18(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t im, jit_word_t y)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(im & ~0x1fffffL));\n    assert(!(y  &      ~0x1L));\n    TSTPRED(_p);\n    inst((((im>>20)&1L)<<26)|(1L<<27)|(y<<26)|((im&0xffffL)<<6)|_p, INST_I);\n}",
      "lines": 10,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I19": {
      "start_point": [
        2618,
        0
      ],
      "end_point": [
        2626,
        1
      ],
      "content": "static void\n_I19(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t im)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(im & ~0x1fffffL));\n    TSTPRED(_p);\n    inst(((im>>20)&1L)|((im&0xffffL)<<6)|_p, INST_I);\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I20": {
      "start_point": [
        2628,
        0
      ],
      "end_point": [
        2639,
        1
      ],
      "content": "static void\n_I20(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t r2, jit_word_t im)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(r2 &     ~0x7fL));\n    assert(!(im & ~0x1fffffL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst(((im>>20)&1L)|(1L<<33)|(((im>>7)&0x1fffL)<<20)|\n\t (r2<<13)|((im&0x7fL)<<6)|_p, INST_I);\n}",
      "lines": 12,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I21": {
      "start_point": [
        2641,
        0
      ],
      "end_point": [
        2657,
        1
      ],
      "content": "static void\n_I21(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t im, jit_word_t ih, jit_word_t x,\n     jit_word_t wh, jit_word_t r2, jit_word_t b1)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(im &    ~0x1ffL));\n    assert(!(ih &      ~0x1L));\n    assert(!(x  &      ~0x1L));\n    assert(!(wh &      ~0x3L));\n    assert(!(r2 &     ~0x7fL));\n    assert(!(b1 &      ~0x7L));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((7L<<33)|(im<<24)|(ih<<23)|(x<<22)|(wh<<20)|\n\t (r2<<13)|(b1<<6), INST_I);\n}",
      "lines": 17,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I22": {
      "start_point": [
        2659,
        0
      ],
      "end_point": [
        2668,
        1
      ],
      "content": "static void\n_I22(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t b2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(b2 &  ~0x7L));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    inst((0x31L<<27)|(b2<<13)|(r1<<6)|_p, INST_I);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I23": {
      "start_point": [
        2670,
        0
      ],
      "end_point": [
        2681,
        1
      ],
      "content": "static void\n_I23(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t r2, jit_word_t im)\n{\n    assert(!(_p &   ~0x3fL));\n    assert(!(r2 &   ~0x7fL));\n    assert(!(im & ~0xffffL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((((im>>15)&1L)<<36)|(3L<<33)|(((im>>7)&0xffL)<<24)|\n\t (r2<<13)|(im&0x7fL)|_p, INST_I);\n}",
      "lines": 12,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I24": {
      "start_point": [
        2683,
        0
      ],
      "end_point": [
        2692,
        1
      ],
      "content": "static void\n_I24(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t im)\n{\n    jit_uint8_t\t\tcc = INST_I;\n    assert(!(_p &      ~0x3fL));\n    assert(!(im & ~0xfffffffL));\n    TSTPRED(_p);\n    inst((((im>>27)&1L)<<36)|(2L<<33)|((im&0x7ffffffL)<<6)|_p, cc);\n}",
      "lines": 10,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I25": {
      "start_point": [
        2694,
        0
      ],
      "end_point": [
        2705,
        1
      ],
      "content": "static void\n_I25(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((x6<<27)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I26": {
      "start_point": [
        2707,
        0
      ],
      "end_point": [
        2717,
        1
      ],
      "content": "static void\n_I26(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar,jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((0x2aL<<27)|(ar<<20)|(r2<<13)|_p, INST_I);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I27": {
      "start_point": [
        2719,
        0
      ],
      "end_point": [
        2728,
        1
      ],
      "content": "static void\n_I27(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar,jit_word_t im)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar & ~0x7fL));\n    assert(!(im & ~0xffL));\n    TSTPRED(_p);\n    inst((((im>>7)&1L)<<36)|(0xaL<<27)|(ar<<20)|((im&0x7fL)<<13)|_p, INST_I);\n}",
      "lines": 10,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I28": {
      "start_point": [
        2730,
        0
      ],
      "end_point": [
        2741,
        1
      ],
      "content": "static void\n_I28(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((0x32L<<27)|(ar<<20)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I29": {
      "start_point": [
        2743,
        0
      ],
      "end_point": [
        2756,
        1
      ],
      "content": "static void\n_I29(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3,jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((x6<<27)|(r3<<20)|(r1<<6)|_p, INST_I);\n    SETREG(r1);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I30": {
      "start_point": [
        2758,
        0
      ],
      "end_point": [
        2777,
        1
      ],
      "content": "static void\n_I30(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ta, jit_word_t tb, jit_word_t p2,\n     jit_word_t im, jit_word_t c, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ta &  ~0x1L));\n    assert(!(tb &  ~0x1L));\n    assert(!(p2 & ~0x3fL));\n    assert(!(im & ~0x1fL));\n    assert(!(c  &  ~0x1L));\n    assert(!(p1 & ~0x1fL));\n    TSTPRED(_p);\n    inst((5L<<37)|(tb<<36)|(ta<<33)|(1L<<19)|(im<<14)|\n\t (1L<<13)|(c<<12)|(p1<<6)|_p, INST_I);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 20,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M1": {
      "start_point": [
        2779,
        0
      ],
      "end_point": [
        2794,
        1
      ],
      "content": "static void\n_M1(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t x, jit_word_t r3, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(x  &  ~0x1L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(x6<<30)|(ht<<28)|(x<<27)|(r3<<20)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 16,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M2": {
      "start_point": [
        2796,
        0
      ],
      "end_point": [
        2813,
        1
      ],
      "content": "static void\n_M2(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(1L<<36)|(x6<<30)|(ht<<28)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n    SETREG(r3);\n}",
      "lines": 18,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M3": {
      "start_point": [
        2815,
        0
      ],
      "end_point": [
        2833,
        1
      ],
      "content": "static void\n_M3(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    jit_uint8_t\t\tcc = INST_M;\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(ht &   ~0x3L));\n    assert(!(r3 &  ~0x7fL));\n    assert(im > -256 && im <= 255);\n    assert(!(r1 &  ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((5L<<37)|(((im>>8)&1L)<<36)|(x6<<30)|(ht<<28)|\n\t (((im>>7)&1L)<<27)|(r3<<20)|((im&0x7fL)<<13)|(r1<<6)|_p, cc);\n    SETREG(r1);\n    SETREG(r3);\n}",
      "lines": 19,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M5": {
      "start_point": [
        2835,
        0
      ],
      "end_point": [
        2850,
        1
      ],
      "content": "static void\n_M5(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2, jit_word_t im)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(ht &   ~0x3L));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(r2 &  ~0x7fL));\n    assert(im > -256 && im <= 255);\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    inst((5L<<37)|(((im>>8)&1L)<<36)|(x6<<30)|(ht<<28)|\n\t (((im>>7)&1L)<<27)|(r3<<20)|(r2<<13)|((im&0x7fL)<<6)|_p, INST_M);\n    SETREG(r3);\n}",
      "lines": 16,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M6": {
      "start_point": [
        2852,
        0
      ],
      "end_point": [
        2865,
        1
      ],
      "content": "static void\n_M6(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t x, jit_word_t r3, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(x  &  ~0x1L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    inst((4L<<37)|(x6<<30)|(ht<<28)|(x<<27)|(r3<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 14,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M13": {
      "start_point": [
        2867,
        0
      ],
      "end_point": [
        2881,
        1
      ],
      "content": "static void\n_M13(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    TSTREG1(r3);\n    if (r2)\n\tTSTFREG1(r2);\n    TSTPRED(_p);\n    inst((6L<<37)|(x6<<30)|(ht<<28)|(r3<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 15,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M14": {
      "start_point": [
        2883,
        0
      ],
      "end_point": [
        2895,
        1
      ],
      "content": "static void\n_M14(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    inst((6L<<37)|(1L<<36)|(x6<<30)|(ht<<28)|(r3<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M15": {
      "start_point": [
        2897,
        0
      ],
      "end_point": [
        2910,
        1
      ],
      "content": "static void\n_M15(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t im)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(ht &   ~0x3L));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(im & ~0x1ffL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((7L<<37)|(((im>>8)&1L)<<36)|(x6<<30)|(ht<<28)|\n\t (((im>>7)&1L)<<27)|(r3<<20)|((im&0x7fL)<<13)|_p, INST_M);\n}",
      "lines": 14,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M16": {
      "start_point": [
        2912,
        0
      ],
      "end_point": [
        2928,
        1
      ],
      "content": "static void\n_M16(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(x6<<30)|(ht<<28)|(1L<<27)|\n\t (r3<<20)|(r2<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M17": {
      "start_point": [
        2930,
        0
      ],
      "end_point": [
        2946,
        1
      ],
      "content": "static void\n_M17(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(im &  ~0x7L));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(x6<<30)|(ht<<28)|(1L<<27)|\n\t (r3<<20)|(im<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 17,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M20x": {
      "start_point": [
        2948,
        0
      ],
      "end_point": [
        2963,
        1
      ],
      "content": "static void\n_M20x(jit_state_t *_jit, jit_word_t _p,\n      jit_word_t x3, jit_word_t r2, jit_word_t im)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(x3 &      ~0x7L));\n    assert(!(r2 &     ~0x7fL));\n    assert(!(im & ~0x1fffffL));\n    if (x3 == 1)\n\tTSTREG1(r2);\n    else\n\tTSTFREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(((im>>20)&1L)<<36)|(x3<<33)|\n\t (((im>>7)&0x1fffL)<<20)|(r2<<13)|((im&0x7fL)<<6)|_p, INST_M);\n}",
      "lines": 16,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M22x": {
      "start_point": [
        2965,
        0
      ],
      "end_point": [
        2983,
        1
      ],
      "content": "static void\n_M22x(jit_state_t *_jit, jit_word_t _p,\n      jit_word_t x3, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(x3 &      ~0x7L));\n    assert(!(im & ~0x1fffffL));\n    assert(!(r1 &     ~0x7fL));\n    TSTPRED(_p);\n    if (x3 < 6)\n\tTSTREG1(r1);\n    else\n\tTSTFREG1(r1);\n    inst((((im>>20)&1L)<<36)|(x3<<33)|((im&0xffffL)<<13)|(r1<<6)|_p, INST_M);\n    if (x3 < 6)\n\tSETREG(r1);\n    else\n\tSETFREG(r1);\n}",
      "lines": 19,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M24": {
      "start_point": [
        2985,
        0
      ],
      "end_point": [
        2994,
        1
      ],
      "content": "static void\n_M24(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x2, jit_word_t x4)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x2 &  ~0x3L));\n    assert(!(x4 &  ~0xfL));\n    TSTPRED(_p);\n    inst((x2<<31)|(x4<<27)|_p, INST_M);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M26x": {
      "start_point": [
        2996,
        0
      ],
      "end_point": [
        3009,
        1
      ],
      "content": "static void\n_M26x(jit_state_t *_jit, jit_word_t _p,\n      jit_word_t x4, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x4 &  ~0xfL));\n    assert(!(r1 & ~0x7fL));\n    if (x4 == 2)\n\tTSTREG1(r1);\n    else\n\tTSTFREG1(r1);\n    TSTPRED(_p);\n    inst((1L<<31)|(x4<<27)|(r1<<6)|_p, INST_M);\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M28": {
      "start_point": [
        3011,
        0
      ],
      "end_point": [
        3021,
        1
      ],
      "content": "static void\n_M28(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x, jit_word_t r3)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x  &  ~0x1L));\n    assert(!(r3 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((1L<<37)|(x<<36)|(0x30L<<27)|(r3<<20)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M29": {
      "start_point": [
        3023,
        0
      ],
      "end_point": [
        3033,
        1
      ],
      "content": "static void\n_M29(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar  & ~0x7L));\n    assert(!(r2 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(0x2aL<<27)|(ar<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M30": {
      "start_point": [
        3035,
        0
      ],
      "end_point": [
        3045,
        1
      ],
      "content": "static void\n_M30(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar, jit_word_t im)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar  & ~0x7L));\n    assert(!(im & ~0xffL));\n    TSTPRED(_p);\n    inst((((im>>7)&1L)<<36)|(2L<<31)|(0x8L<<27)|\n\t (ar<<20)|((im&0x7fL)<<13)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M31": {
      "start_point": [
        3047,
        0
      ],
      "end_point": [
        3058,
        1
      ],
      "content": "static void\n_M31(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t ar, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(ar  & ~0x7L));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(0x22L<<27)|(ar<<20)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M32": {
      "start_point": [
        3060,
        0
      ],
      "end_point": [
        3070,
        1
      ],
      "content": "static void\n_M32(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t cr, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(cr  & ~0x7L));\n    assert(!(r2 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(0x2cL<<27)|(cr<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M33": {
      "start_point": [
        3072,
        0
      ],
      "end_point": [
        3083,
        1
      ],
      "content": "static void\n_M33(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t cr, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(cr  & ~0x7L));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(0x24L<<27)|(cr<<20)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M34": {
      "start_point": [
        3085,
        0
      ],
      "end_point": [
        3096,
        1
      ],
      "content": "static void\n_M34(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t sor, jit_word_t sol, jit_word_t sof, jit_word_t r1)\n{\n    assert(!(_p  & ~0x3fL));\n    assert(!(sor &  ~0xfL));\n    assert(!(sol & ~0x7fL));\n    assert(!(sof & ~0x7fL));\n    assert(!(r1  & ~0x7fL));\n    TSTPRED(_p);\n    inst((1L<<37)|(6L<<33)|(sor<<27)|(sol<<20)|(sof<<13)|(r1<<6)|_p, INST_M);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M35": {
      "start_point": [
        3098,
        0
      ],
      "end_point": [
        3108,
        1
      ],
      "content": "static void\n_M35(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r2)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r2 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(x6<<27)|(r2<<13)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M36": {
      "start_point": [
        3110,
        0
      ],
      "end_point": [
        3121,
        1
      ],
      "content": "static void\n_M36(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r1 & ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(x6<<27)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M37": {
      "start_point": [
        3123,
        0
      ],
      "end_point": [
        3131,
        1
      ],
      "content": "static void\n_M37(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(im & ~0x1ffffL));\n    TSTPRED(_p);\n    inst((((im>>20)&1L)<<36)|((im&0xffffL)<<6)|_p, INST_M);\n}",
      "lines": 9,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M38": {
      "start_point": [
        3133,
        0
      ],
      "end_point": [
        3147,
        1
      ],
      "content": "static void\n_M38(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t r2, jit_word_t r1)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(r2 &  ~0x7fL));\n    assert(!(r1 &  ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(r2<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M39": {
      "start_point": [
        3149,
        0
      ],
      "end_point": [
        3163,
        1
      ],
      "content": "static void\n_M39(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t im, jit_word_t r1)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(im &   ~0x7L));\n    assert(!(r1 &  ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(im<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 15,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M40": {
      "start_point": [
        3165,
        0
      ],
      "end_point": [
        3176,
        1
      ],
      "content": "static void\n_M40(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t im)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(im &   ~0x7L));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(im<<13)|_p, INST_M);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M41": {
      "start_point": [
        3178,
        0
      ],
      "end_point": [
        3188,
        1
      ],
      "content": "static void\n_M41(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r2)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r2 &  ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(x6<<27)|(r2<<13)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M42": {
      "start_point": [
        3190,
        0
      ],
      "end_point": [
        3201,
        1
      ],
      "content": "static void\n_M42(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t r2)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(r2 &  ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M43": {
      "start_point": [
        3203,
        0
      ],
      "end_point": [
        3215,
        1
      ],
      "content": "static void\n_M43(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t r1)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(r1 &  ~0x7fL));\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 13,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M44": {
      "start_point": [
        3217,
        0
      ],
      "end_point": [
        3227,
        1
      ],
      "content": "static void\n_M44(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x4, jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(x4 &     ~0xfL));\n    assert(!(im & ~0xfffffL));\n    TSTPRED(_p);\n    inst((((im>>23)&1L)<<36)|(((im>>21)&3L)<<31)|\n\t (x4<<27)|((im&0x1ffffL)<<6)|_p, INST_M);\n}",
      "lines": 11,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M45": {
      "start_point": [
        3229,
        0
      ],
      "end_point": [
        3240,
        1
      ],
      "content": "static void\n_M45(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t r2)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(r2 &  ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(r2<<13)|_p, INST_M);\n}",
      "lines": 12,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M46": {
      "start_point": [
        3242,
        0
      ],
      "end_point": [
        3255,
        1
      ],
      "content": "static void\n_M46(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r3, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    if (r1)\tTSTREG1(r1);\n    inst((1L<<37)|(x6<<27)|(r3<<20)|(r1<<6)|_p, INST_M);\n    if (r1)\tSETREG(r1);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M48": {
      "start_point": [
        3257,
        0
      ],
      "end_point": [
        3266,
        1
      ],
      "content": "static void\n_M48(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t y, jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(y  &     ~0x1L));\n    assert(!(im & ~0x1ffffL));\n    TSTPRED(_p);\n    inst((((im>>20)&1L)<<36)|(1L<<27)|(y<<26)|((im&0xffffL)<<6)|_p, INST_M);\n}",
      "lines": 10,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B1": {
      "start_point": [
        3268,
        0
      ],
      "end_point": [
        3281,
        1
      ],
      "content": "static void\n_B1(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t d, jit_word_t wh, jit_word_t im, jit_word_t p, jit_word_t tp)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(d  &     ~0x1L));\n    assert(!(wh &     ~0x3L));\n    assert(im >= -1048576 && im <= 1048575);\n    assert(!(p  &     ~0x1L));\n    assert(!(tp &     ~0x7L));\n    TSTPRED(_p);\n    inst((4L<<37)|(((im>>20)&1L)<<36)|(d<<35)|(wh<<33)|\n\t ((im&0xfffffL)<<13)|(p<<12)|(tp<<6)|_p, INST_B);\n}",
      "lines": 14,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B3": {
      "start_point": [
        3283,
        0
      ],
      "end_point": [
        3296,
        1
      ],
      "content": "static void\n_B3(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t d, jit_word_t wh, jit_word_t im, jit_word_t p, jit_word_t b)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(d  &     ~0x1L));\n    assert(!(wh &     ~0x3L));\n    assert(im >= -1048576 && im <= 1048575);\n    assert(!(p  &     ~0x1L));\n    assert(!(b  &     ~0x3L));\n    TSTPRED(_p);\n    inst((5L<<37)|(((im>>20)&1L)<<36)|(d<<35)|(wh<<33)|\n\t ((im&0xfffffL)<<13)|(p<<12)|(b<<6)|_p, INST_B);\n}",
      "lines": 14,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B4": {
      "start_point": [
        3298,
        0
      ],
      "end_point": [
        3312,
        1
      ],
      "content": "static void\n_B4(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t d, jit_word_t wh, jit_word_t x6,\n    jit_word_t b, jit_word_t p, jit_word_t tp)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(d  &  ~0x1L));\n    assert(!(wh &  ~0x3L));\n    assert(!(x6 & ~0x3fL));\n    assert(!(b  &  ~0x7L));\n    assert(!(p  &  ~0x1L));\n    assert(!(tp &  ~0x7L));\n    TSTPRED(_p);\n    inst((d<<35)|(wh<<33)|(x6<<27)|(b<<13)|(p<<12)|(tp<<6)|_p, INST_B);\n}",
      "lines": 15,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B5": {
      "start_point": [
        3314,
        0
      ],
      "end_point": [
        3326,
        1
      ],
      "content": "static void\n_B5(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t d, jit_word_t wh, jit_word_t b2, jit_word_t p, jit_word_t b1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(d  &  ~0x1L));\n    assert(!(wh &  ~0x3L));\n    assert(!(b2 &  ~0x7L));\n    assert(!(p  &  ~0x1L));\n    assert(!(b1 &  ~0x7L));\n    TSTPRED(_p);\n    inst((1L<<37)|(d<<35)|(wh<<32)|(b2<<13)|(p<<12)|(b1<<6)|_p, INST_B);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B6": {
      "start_point": [
        3328,
        0
      ],
      "end_point": [
        3340,
        1
      ],
      "content": "static void\n_B6(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t ih, jit_word_t im, jit_word_t tag, jit_word_t wh)\n{\n    assert(!(_p &     ~0x3fL));\n    assert(!(ih  &     ~0x1L));\n    assert(!(im  & ~0x1ffffL));\n    assert(!(tag &   ~0x1ffL));\n    assert(!(wh  &     ~0x3L));\n    TSTPRED(_p);\n    inst((7L<<37)|(((im>>20)&1L)<<36)|(ih<<35)|(((tag>>7)&3L)<<33)|\n\t ((im&0xfffffL)<<13)|((tag&0x7fL)<<6)|(wh<<3)|_p, INST_B);\n}",
      "lines": 13,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B7": {
      "start_point": [
        3342,
        0
      ],
      "end_point": [
        3355,
        1
      ],
      "content": "static void\n_B7(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t ih, jit_word_t x6, jit_word_t b2, jit_word_t tag, jit_word_t wh)\n{\n    assert(!(_p &   ~0x3fL));\n    assert(!(ih  &   ~0x1L));\n    assert(!(x6  &  ~0x3fL));\n    assert(!(b2  &   ~0x7L));\n    assert(!(tag & ~0x1ffL));\n    assert(!(wh  &   ~0x3L));\n    TSTPRED(_p);\n    inst((2L<<37)|(ih<<35)|(((tag>>7)&3L)<<33)|(x6<<27)|\n\t (b2<<13)|((tag&0x7fL)<<6)|(wh<<3)|_p, INST_B);\n}",
      "lines": 14,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B8": {
      "start_point": [
        3357,
        0
      ],
      "end_point": [
        3365,
        1
      ],
      "content": "static void\n_B8(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    TSTPRED(_p);\n    inst((x6<<27)|_p, INST_B);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_B9": {
      "start_point": [
        3367,
        0
      ],
      "end_point": [
        3377,
        1
      ],
      "content": "static void\n_B9(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t op, jit_word_t x6, jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(op &     ~0xfL));\n    assert(!(x6 &    ~0x3fL));\n    assert(!(im & ~0x1ffffL));\n    TSTPRED(_p);\n    inst((op<<37)|(((im>>20)&1L)<<36)|(x6<<27)|((im&0xffffL)<<6)|_p, INST_B);\n}",
      "lines": 11,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_X1": {
      "start_point": [
        3379,
        0
      ],
      "end_point": [
        3392,
        1
      ],
      "content": "static void\n_X1(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t im)\n{\n    jit_word_t\t\ti41, i1, i20;\n    assert(!(_p &               ~0x3fL));\n    assert(im > -0x2000000000000000 && im <= 0x1fffffffffffffff);\n    i41 = (im >> 22) & 0x1ffffffffffL;\n    i1  = (im >> 21) &           0x1L;\n    i20 =  im        &       0xfffffL;\n    TSTPRED(_p);\n    inst(i41, INST_L);\n    inst((i1<<36)|(i20<<6)|_p, INST_X);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_X2": {
      "start_point": [
        3394,
        0
      ],
      "end_point": [
        3413,
        1
      ],
      "content": "static void\n_X2(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t r1, jit_word_t im)\n{\n    jit_word_t\t\ti1, i41, ic, i5, i9, i7;\n    assert(!(_p & ~0x3fL));\n    assert(!(r1 & ~0x7fL));\n    i1  = (im >> 63) &           0x1L;\n    i41 = (im >> 22) & 0x1ffffffffffL;\n    ic  = (im >> 21) &           0x1L;\n    i5  = (im >> 16) &          0x1fL;\n    i9  = (im >>  7) &         0x1ffL;\n    i7  =  im        &          0x7fL;\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst(i41, INST_L);\n    inst((6L<<37)|(i1<<36)|(i9<<27)|(i5<<22)|\n\t (ic<<21)|(i7<<13)|(r1<<6)|_p, INST_X);\n    SETREG(r1);\n}",
      "lines": 20,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_X3x": {
      "start_point": [
        3415,
        0
      ],
      "end_point": [
        3435,
        1
      ],
      "content": "static void\n_X3x(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t op, jit_word_t d, jit_word_t wh,\n     jit_word_t p, jit_word_t tp, jit_word_t im)\n{\n    /* target64 = IP + ((i1 << 59 | imm39 << 20 | imm20b) << 4) */\n    jit_word_t\t\ti1, i41, i20;\n    assert(!(_p &               ~0x3fL));\n    assert(!(op &                ~0xfL));\n    assert(!(d  &                ~0x1L));\n    assert(!(wh &                ~0x3L));\n    assert(!(p  &                ~0x1L));\n    assert(!(tp &                ~0x7L));\n    i1  = (im >> 61) &           0x1L;\n    i41 = (im >> 22) & 0x1ffffffffffL;\n    i20 =  im        &       0xfffffL;\n    TSTPRED(_p);\n    inst(i41, INST_L);\n    inst((op<<37)|(i1<<36)|(d<<35)|(wh<<33)|\n\t (i20<<13)|(p<<12)|(tp<<6)|_p, INST_X);\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_X5": {
      "start_point": [
        3437,
        0
      ],
      "end_point": [
        3450,
        1
      ],
      "content": "static void\n_X5(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t y, jit_word_t im)\n{\n    jit_word_t\t\ti41, i1, i20;\n    assert(!(_p &               ~0x3fL));\n    assert(im > -0x2000000000000000 && im <= 0x1fffffffffffffff);\n    i41 = (im >> 22) & 0x1ffffffffffL;\n    i1  = (im >> 21) &           0x1L;\n    i20 =  im        &       0xfffffL;\n    TSTPRED(_p);\n    inst(i41, INST_L);\n    inst((i1<<36)|(1L<<27)|(y<<26)|(i20<<6)|_p, INST_X);\n}",
      "lines": 14,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        3452,
        0
      ],
      "end_point": [
        3460,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* patch pushargr */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n\n    MOV(r0, r1);\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        3462,
        0
      ],
      "end_point": [
        3473,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    /* patch pushargi */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n\n    if (i0 >= -2097152 && i0 <= 2097151)\n\tMOVI(r0, i0);\n    else\n\tMOVL(r0, i0);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        3475,
        0
      ],
      "end_point": [
        3483,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    sync();\n    w = _jit->pc.w;\n    MOVL(r0, i0);\n    return (w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_addi": {
      "start_point": [
        3485,
        0
      ],
      "end_point": [
        3499,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -8192 && i0 <= 8191)\n\tADDS(r0, i0, r1);\n    else if (!(r1 & ~3) && i0 >= -2097152 && i0 <= 2097151)\n\tADDL(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        3501,
        0
      ],
      "end_point": [
        3518,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddr(rn(reg), r1, r2);\n\tltr_u(rn(jit_carry), rn(reg), r1);\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddr(r0, r1, r2);\n\tltr_u(rn(jit_carry), r0, r1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        3520,
        0
      ],
      "end_point": [
        3537,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tltr_u(rn(jit_carry), rn(reg), r1);\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddi(r0, r1, i0);\n\tltr_u(rn(jit_carry), r0, r1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        3539,
        0
      ],
      "end_point": [
        3549,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    addcr(r0, r1, r2);\n    addcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        3551,
        0
      ],
      "end_point": [
        3561,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    addci(r0, r1, i0);\n    addcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        3563,
        0
      ],
      "end_point": [
        3571,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        3573,
        0
      ],
      "end_point": [
        3590,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tsubr(rn(reg), r1, r2);\n\tltr_u(rn(jit_carry), r1, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsubr(r0, r1, r2);\n\tltr_u(rn(jit_carry), r1, r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        3592,
        0
      ],
      "end_point": [
        3609,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, -i0);\n\tltr_u(rn(jit_carry), r1, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\taddi(r0, r1, -i0);\n\tltr_u(rn(jit_carry), r1, r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        3611,
        0
      ],
      "end_point": [
        3621,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    subcr(r0, r1, r2);\n    subcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        3623,
        0
      ],
      "end_point": [
        3633,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    assert(jit_carry != _NOREG);\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), rn(jit_carry));\n    subci(r0, r1, i0);\n    subcr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        3635,
        0
      ],
      "end_point": [
        3649,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tSUBI(r0, i0, r1);\n    else if (!(r1 & ~3) && i0 >= -2097151 && i0 <= 2097152)\n\tADDL(r1, -i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        3651,
        0
      ],
      "end_point": [
        3663,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tf0, f1;\n    f0 = jit_get_reg(jit_class_fpr);\n    f1 = jit_get_reg(jit_class_fpr);\n    SETF_SIG(rn(f0), r1);\n    SETF_SIG(rn(f1), r2);\n    XMPY_L(rn(f0), rn(f0), rn(f1));\n    GETF_SIG(r0, rn(f0));\n    jit_unget_reg(f0);\n    jit_unget_reg(f1);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        3665,
        0
      ],
      "end_point": [
        3673,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    mulr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "__divdi3": {
      "start_point": [
        3676,
        0
      ],
      "end_point": [
        3680,
        1
      ],
      "content": "static long\n__divdi3(long u, long v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "long",
        "long"
      ]
    },
    "__udivdi3": {
      "start_point": [
        3682,
        0
      ],
      "end_point": [
        3686,
        1
      ],
      "content": "static unsigned long\n__udivdi3(unsigned long u, unsigned long v)\n{\n    return (u / v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "unsigned long",
        "unsigned",
        "long"
      ]
    },
    "__moddi3": {
      "start_point": [
        3688,
        0
      ],
      "end_point": [
        3692,
        1
      ],
      "content": "static long\n__moddi3(long u, long v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "long",
        "long"
      ]
    },
    "__umoddi3": {
      "start_point": [
        3694,
        0
      ],
      "end_point": [
        3698,
        1
      ],
      "content": "static unsigned long\n__umoddi3(unsigned long u, unsigned long v)\n{\n    return (u % v);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "unsigned long",
        "unsigned",
        "long"
      ]
    },
    "_divr": {
      "start_point": [
        3701,
        0
      ],
      "end_point": [
        3708,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOV(_jitc->rout, r1);\n    MOV(_jitc->rout + 1, r2);\n    calli((jit_word_t)__divdi3);\n    MOV(r0, GR_8);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        3710,
        0
      ],
      "end_point": [
        3733,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    switch (i0) {\n\tcase 1:\n\t    movr(r0, r1);\n\t    return;\n\tcase -1:\n\t    negr(r0, r1);\n\t    return;\n\tdefault:\n\t    if (i0 > 0 && !(i0 & (i0 - 1))) {\n\t\tmovr(r0, r1);\n\t\trshi(r0, r0, ffsl(i0) - 1);\n\t\treturn;\n\t    }\n\t    break;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_u": {
      "start_point": [
        3735,
        0
      ],
      "end_point": [
        3742,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOV(_jitc->rout, r1);\n    MOV(_jitc->rout + 1, r2);\n    calli((jit_word_t)__udivdi3);\n    MOV(r0, GR_8);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        3744,
        0
      ],
      "end_point": [
        3761,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 1) {\n\tmovr(r0, r1);\n\treturn;\n    }\n    else if (i0 > 0 && !(i0 & (i0 - 1))) {\n\tmovr(r0, r1);\n\trshi_u(r0, r0, ffsl(i0) - 1);\n\treturn;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        3763,
        0
      ],
      "end_point": [
        3770,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOV(_jitc->rout, r1);\n    MOV(_jitc->rout + 1, r2);\n    calli((jit_word_t)__moddi3);\n    MOV(r0, GR_8);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        3772,
        0
      ],
      "end_point": [
        3784,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 1 || i0 == -1) {\n\tMOV(r0, GR_0);\n\treturn;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        3786,
        0
      ],
      "end_point": [
        3793,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOV(_jitc->rout, r1);\n    MOV(_jitc->rout + 1, r2);\n    calli((jit_word_t)__umoddi3);\n    MOV(r0, GR_8);\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        3795,
        0
      ],
      "end_point": [
        3811,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 1) {\n\tMOV(r0, GR_0);\n\treturn;\n    }\n    else if (i0 > 0 && !(i0 & (i0 - 1))) {\n\tandi(r0, r1, i0 - 1);\n\treturn;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulh": {
      "start_point": [
        3813,
        0
      ],
      "end_point": [
        3829,
        1
      ],
      "content": "static void\n_mulh(jit_state_t *_jit,\n      jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_bool_t sign)\n{\n    jit_int32_t\t\tf0, f1;\n    f0 = jit_get_reg(jit_class_fpr);\n    f1 = jit_get_reg(jit_class_fpr);\n    SETF_SIG(rn(f0), r1);\n    SETF_SIG(rn(f1), r2);\n    if (sign)\n\tXMPY_H(rn(f0), rn(f0), rn(f1));\n    else\n\tXMPY_HU(rn(f0), rn(f0), rn(f1));\n    GETF_SIG(r0, rn(f0));\n    jit_unget_reg(f0);\n    jit_unget_reg(f1);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        3831,
        0
      ],
      "end_point": [
        3847,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 || r0 == r3) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmulr(rn(reg), r2, r3);\n    }\n    else\n\tmulr(r0, r2, r3);\n    mulh(r1, r2, r3, sign);\n    if (r0 == r2 || r0 == r3) {\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        3849,
        0
      ],
      "end_point": [
        3858,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqmulr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        3860,
        0
      ],
      "end_point": [
        3894,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\tsv0, rg0;\n    jit_int32_t\t\tsv1, rg1;\n\n    if (r0 == r2 || r0 == r3) {\n\tsv0 = jit_get_reg(jit_class_gpr);\n\trg0 = rn(sv0);\n    }\n    else\n\trg0 = r0;\n    if (r1 == r2 || r1 == r3) {\n\tsv1 = jit_get_reg(jit_class_gpr);\n\trg1 = rn(sv1);\n    }\n    else\n\trg1 = r1;\n\n    if (sign)\n\tdivr(rg0, r2, r3);\n    else\n\tdivr_u(rg0, r2, r3);\n    mulr(rg1, r3, rg0);\n    subr(rg1, r2, rg1);\n    if (rg0 != r0) {\n\tmovr(r0, rg0);\n\tjit_unget_reg(sv0);\n    }\n    if (rg1 != r1) {\n\tmovr(r1, rg1);\n\tjit_unget_reg(sv1);\n    }\n}",
      "lines": 35,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        3896,
        0
      ],
      "end_point": [
        3905,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqdivr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        3907,
        0
      ],
      "end_point": [
        3921,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tANDI(r0, i0, r1);\n    else if (~i0 >= -128 && ~i0 <= 127)\n\tANDCMI(r0, ~i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tandr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        3923,
        0
      ],
      "end_point": [
        3935,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tORI(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\torr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        3937,
        0
      ],
      "end_point": [
        3949,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tXORI(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\txorr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        3952,
        0
      ],
      "end_point": [
        3963,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr);\n    rshi(rn(t0), r1, 8);\n    andi(r0, r1, 0xff);\n    andi(rn(t0), rn(t0), 0xff);\n    lshi(r0, r0, 8);\n    orr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        3965,
        0
      ],
      "end_point": [
        3990,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    rshi(rn(t0), r1, 24);\n    rshi(rn(t1), r1, 16);\n    rshi(rn(t2), r1,  8);\n    andi(rn(t0), rn(t0), 0xff);\n    andi(rn(t1), rn(t1), 0xff);\n    andi(rn(t2), rn(t2), 0xff);\n    andi(r0, r1, 0xff);\n    lshi(r0, r0, 24);\n    lshi(rn(t1), rn(t1), 8);\n    orr(r0, r0, rn(t0));\n    lshi(rn(t2), rn(t2), 16);\n    orr(r0, r0, rn(t1));\n    orr(r0, r0, rn(t2));\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 26,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        3993,
        0
      ],
      "end_point": [
        4001,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    lshr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        4003,
        0
      ],
      "end_point": [
        4011,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    rshr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        4013,
        0
      ],
      "end_point": [
        4021,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    rshr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr": {
      "start_point": [
        4023,
        0
      ],
      "end_point": [
        4029,
        1
      ],
      "content": "static void\n_ltr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LT(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti": {
      "start_point": [
        4031,
        0
      ],
      "end_point": [
        4045,
        1
      ],
      "content": "static void\n_lti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -127 && i0 <= 128)\n\tCMPI_LT(PR_7, PR_6, i0 - 1, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_LT(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_u": {
      "start_point": [
        4047,
        0
      ],
      "end_point": [
        4053,
        1
      ],
      "content": "static void\n_ltr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LTU(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti_u": {
      "start_point": [
        4055,
        0
      ],
      "end_point": [
        4069,
        1
      ],
      "content": "static void\n_lti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -127 && i0 <= 128)\n\tCMPI_LTU(PR_7, PR_6, i0 - 1, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_LTU(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler": {
      "start_point": [
        4071,
        0
      ],
      "end_point": [
        4077,
        1
      ],
      "content": "static void\n_ler(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LT(PR_6, PR_7, r2, r1);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei": {
      "start_point": [
        4079,
        0
      ],
      "end_point": [
        4087,
        1
      ],
      "content": "static void\n_lei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ler(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_u": {
      "start_point": [
        4089,
        0
      ],
      "end_point": [
        4095,
        1
      ],
      "content": "static void\n_ler_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LTU(PR_6, PR_7, r2, r1);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei_u": {
      "start_point": [
        4097,
        0
      ],
      "end_point": [
        4105,
        1
      ],
      "content": "static void\n_lei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ler_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr": {
      "start_point": [
        4107,
        0
      ],
      "end_point": [
        4113,
        1
      ],
      "content": "static void\n_eqr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_EQ(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqi": {
      "start_point": [
        4115,
        0
      ],
      "end_point": [
        4129,
        1
      ],
      "content": "static void\n_eqi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tCMPI_EQ(PR_6, PR_7, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_EQ(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger": {
      "start_point": [
        4131,
        0
      ],
      "end_point": [
        4137,
        1
      ],
      "content": "static void\n_ger(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LT(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei": {
      "start_point": [
        4139,
        0
      ],
      "end_point": [
        4153,
        1
      ],
      "content": "static void\n_gei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -127 && i0 <= 128)\n\tCMPI_LT(PR_7, PR_6, i0 - 1, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_LT(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_u": {
      "start_point": [
        4155,
        0
      ],
      "end_point": [
        4161,
        1
      ],
      "content": "static void\n_ger_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LTU(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei_u": {
      "start_point": [
        4163,
        0
      ],
      "end_point": [
        4177,
        1
      ],
      "content": "static void\n_gei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -127 && i0 <= 128)\n\tCMPI_LTU(PR_7, PR_6, i0 - 1, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_LTU(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr": {
      "start_point": [
        4179,
        0
      ],
      "end_point": [
        4185,
        1
      ],
      "content": "static void\n_gtr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LT(PR_6, PR_7, r2, r1);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti": {
      "start_point": [
        4187,
        0
      ],
      "end_point": [
        4195,
        1
      ],
      "content": "static void\n_gti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    gtr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_u": {
      "start_point": [
        4197,
        0
      ],
      "end_point": [
        4203,
        1
      ],
      "content": "static void\n_gtr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_LTU(PR_6, PR_7, r2, r1);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti_u": {
      "start_point": [
        4205,
        0
      ],
      "end_point": [
        4213,
        1
      ],
      "content": "static void\n_gti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    gtr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        4215,
        0
      ],
      "end_point": [
        4221,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP_EQ(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        4223,
        0
      ],
      "end_point": [
        4237,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 >= -128 && i0 <= 127)\n\tCMPI_EQ(PR_6, PR_7, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMP_EQ(PR_6, PR_7, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_c": {
      "start_point": [
        4239,
        0
      ],
      "end_point": [
        4244,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_uc(r0, r1);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        4246,
        0
      ],
      "end_point": [
        4254,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_c(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        4256,
        0
      ],
      "end_point": [
        4264,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_uc(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_s": {
      "start_point": [
        4266,
        0
      ],
      "end_point": [
        4271,
        1
      ],
      "content": "static void\n_ldr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_us(r0, r1);\n    extr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        4273,
        0
      ],
      "end_point": [
        4281,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_s(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        4283,
        0
      ],
      "end_point": [
        4291,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_us(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_i": {
      "start_point": [
        4293,
        0
      ],
      "end_point": [
        4298,
        1
      ],
      "content": "static void\n_ldr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_ui(r0, r1);\n    extr_i(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        4300,
        0
      ],
      "end_point": [
        4308,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        4310,
        0
      ],
      "end_point": [
        4318,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_ui(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        4320,
        0
      ],
      "end_point": [
        4328,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        4330,
        0
      ],
      "end_point": [
        4338,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_c(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        4340,
        0
      ],
      "end_point": [
        4352,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_c(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_c(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        4354,
        0
      ],
      "end_point": [
        4362,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_uc(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        4364,
        0
      ],
      "end_point": [
        4376,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_uc(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_uc(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        4378,
        0
      ],
      "end_point": [
        4386,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_s(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        4388,
        0
      ],
      "end_point": [
        4400,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_s(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_s(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        4402,
        0
      ],
      "end_point": [
        4410,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_us(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        4412,
        0
      ],
      "end_point": [
        4424,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_us(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_us(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        4426,
        0
      ],
      "end_point": [
        4434,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        4436,
        0
      ],
      "end_point": [
        4448,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_i(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_i(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        4450,
        0
      ],
      "end_point": [
        4458,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_ui(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        4460,
        0
      ],
      "end_point": [
        4472,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_ui(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_ui(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        4474,
        0
      ],
      "end_point": [
        4482,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        4484,
        0
      ],
      "end_point": [
        4496,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_l(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_l(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        4498,
        0
      ],
      "end_point": [
        4506,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_c(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        4508,
        0
      ],
      "end_point": [
        4516,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_s(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        4518,
        0
      ],
      "end_point": [
        4526,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_i(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        4528,
        0
      ],
      "end_point": [
        4536,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_l(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        4538,
        0
      ],
      "end_point": [
        4546,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        4548,
        0
      ],
      "end_point": [
        4560,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_c(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        4562,
        0
      ],
      "end_point": [
        4570,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        4572,
        0
      ],
      "end_point": [
        4584,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_s(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        4586,
        0
      ],
      "end_point": [
        4594,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        4596,
        0
      ],
      "end_point": [
        4608,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_i(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        4610,
        0
      ],
      "end_point": [
        4618,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_l(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        4620,
        0
      ],
      "end_point": [
        4632,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_l(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_l(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr": {
      "start_point": [
        4634,
        0
      ],
      "end_point": [
        4643,
        1
      ],
      "content": "static jit_word_t\n_bltr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LT(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti": {
      "start_point": [
        4645,
        0
      ],
      "end_point": [
        4662,
        1
      ],
      "content": "static jit_word_t\n_blti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -127 && i1 <= 128)\n\tCMPI_LT(PR_7, PR_6, i1 - 1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_LT(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltr_u": {
      "start_point": [
        4664,
        0
      ],
      "end_point": [
        4673,
        1
      ],
      "content": "static jit_word_t\n_bltr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LTU(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti_u": {
      "start_point": [
        4675,
        0
      ],
      "end_point": [
        4692,
        1
      ],
      "content": "static jit_word_t\n_blti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -127 && i1 <= 128)\n\tCMPI_LTU(PR_7, PR_6, i1 - 1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_LTU(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler": {
      "start_point": [
        4694,
        0
      ],
      "end_point": [
        4703,
        1
      ],
      "content": "static jit_word_t\n_bler(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LT(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei": {
      "start_point": [
        4705,
        0
      ],
      "end_point": [
        4715,
        1
      ],
      "content": "static jit_word_t\n_blei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bler(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_u": {
      "start_point": [
        4717,
        0
      ],
      "end_point": [
        4726,
        1
      ],
      "content": "static jit_word_t\n_bler_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LTU(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei_u": {
      "start_point": [
        4728,
        0
      ],
      "end_point": [
        4738,
        1
      ],
      "content": "static jit_word_t\n_blei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bler_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr": {
      "start_point": [
        4740,
        0
      ],
      "end_point": [
        4749,
        1
      ],
      "content": "static jit_word_t\n_beqr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_EQ(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        4751,
        0
      ],
      "end_point": [
        4768,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -128 && i1 <= 127)\n\tCMPI_EQ(PR_6, PR_7, i1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_EQ(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger": {
      "start_point": [
        4770,
        0
      ],
      "end_point": [
        4779,
        1
      ],
      "content": "static jit_word_t\n_bger(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LT(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei": {
      "start_point": [
        4781,
        0
      ],
      "end_point": [
        4798,
        1
      ],
      "content": "static jit_word_t\n_bgei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -127 && i1 <= 128)\n\tCMPI_LT(PR_7, PR_6, i1 - 1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_LT(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_u": {
      "start_point": [
        4800,
        0
      ],
      "end_point": [
        4809,
        1
      ],
      "content": "static jit_word_t\n_bger_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LTU(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei_u": {
      "start_point": [
        4811,
        0
      ],
      "end_point": [
        4828,
        1
      ],
      "content": "static jit_word_t\n_bgei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -127 && i1 <= 128)\n\tCMPI_LTU(PR_7, PR_6, i1 - 1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_LTU(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr": {
      "start_point": [
        4830,
        0
      ],
      "end_point": [
        4839,
        1
      ],
      "content": "static jit_word_t\n_bgtr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LT(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti": {
      "start_point": [
        4841,
        0
      ],
      "end_point": [
        4851,
        1
      ],
      "content": "static jit_word_t\n_bgti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bgtr(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_u": {
      "start_point": [
        4853,
        0
      ],
      "end_point": [
        4862,
        1
      ],
      "content": "static jit_word_t\n_bgtr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_LTU(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti_u": {
      "start_point": [
        4864,
        0
      ],
      "end_point": [
        4874,
        1
      ],
      "content": "static jit_word_t\n_bgti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bgtr_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner": {
      "start_point": [
        4876,
        0
      ],
      "end_point": [
        4885,
        1
      ],
      "content": "static jit_word_t\n_bner(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_EQ(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        4887,
        0
      ],
      "end_point": [
        4904,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (i1 >= -128 && i1 <= 127)\n\tCMPI_EQ(PR_6, PR_7, i1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMP_EQ(PR_6, PR_7, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsr": {
      "start_point": [
        4906,
        0
      ],
      "end_point": [
        4919,
        1
      ],
      "content": "static jit_word_t\n_bmsr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    andr(rn(reg), r0, r1);\n    CMPI_EQ(PR_6, PR_7, 0, rn(reg));\n    jit_unget_reg(reg);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsi": {
      "start_point": [
        4921,
        0
      ],
      "end_point": [
        4935,
        1
      ],
      "content": "static jit_word_t\n_bmsi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i1);\n    andr(rn(reg), r0, rn(reg));\n    CMPI_EQ(PR_6, PR_7, 0, rn(reg));\n    jit_unget_reg(reg);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmcr": {
      "start_point": [
        4937,
        0
      ],
      "end_point": [
        4950,
        1
      ],
      "content": "static jit_word_t\n_bmcr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    andr(rn(reg), r0, r1);\n    CMPI_EQ(PR_6, PR_7, 0, rn(reg));\n    jit_unget_reg(reg);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmci": {
      "start_point": [
        4952,
        0
      ],
      "end_point": [
        4966,
        1
      ],
      "content": "static jit_word_t\n_bmci(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i1);\n    andr(rn(reg), r0, rn(reg));\n    CMPI_EQ(PR_6, PR_7, 0, rn(reg));\n    jit_unget_reg(reg);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr": {
      "start_point": [
        4968,
        0
      ],
      "end_point": [
        4995,
        1
      ],
      "content": "static jit_word_t\n_baddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    /* t1 = r0 + r1;\toverflow = r1 < 0 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    lti(rn(t0), r1, 0);\t\t\t/* t0 = r1 < 0 */\n    addr(rn(t1), r0, r1);\t\t/* t1 = r0 + r1 */\n    ltr(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    ltr(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    CMPI_EQ(PR_6, PR_7, 0, rn(t0));\n    CMPI_EQ_p(PR_8, PR_9, 0, rn(t2), PR_6);/* if (t0==0) p8=t2==0,p9=t2!=0; */\n    CMPI_EQ_p(PR_8, PR_9, 0, rn(t1), PR_7);/* if (t0!=0) p8=t1==0,p9=t1!=0; */\n    addr(r0, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, carry ? PR_9 : PR_8);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi": {
      "start_point": [
        4997,
        0
      ],
      "end_point": [
        5008,
        1
      ],
      "content": "static jit_word_t\n_baddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = baddr(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr_u": {
      "start_point": [
        5010,
        0
      ],
      "end_point": [
        5029,
        1
      ],
      "content": "static jit_word_t\n_baddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addr(rn(t0), r0, r1);\n    ltr_u(rn(t1), rn(t0), r0);\n    CMPI_EQ(PR_6, PR_7, 0, rn(t1));\n    MOV(r0, rn(t0));\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, carry ? PR_7 : PR_6);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi_u": {
      "start_point": [
        5031,
        0
      ],
      "end_point": [
        5042,
        1
      ],
      "content": "static jit_word_t\n_baddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = baddr_u(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr": {
      "start_point": [
        5044,
        0
      ],
      "end_point": [
        5071,
        1
      ],
      "content": "static jit_word_t\n_bsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    /* t1 = r0 - r1;\toverflow = 0 < r1 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    gti(rn(t0), r1, 0);\t\t\t/* t0 = r1 > 0 */\n    subr(rn(t1), r0, r1);\t\t/* t1 = r0 - r1 */\n    ltr(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    ltr(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    CMPI_EQ(PR_6, PR_7, 0, rn(t0));\n    CMPI_EQ_p(PR_8, PR_9, 0, rn(t2), PR_6);/* if (t0==0) p4=t2==0,p5=t2!=0; */\n    CMPI_EQ_p(PR_8, PR_9, 0, rn(t1), PR_7);/* if (t0!=0) p4=t1==0,p5=t1!=0; */\n    subr(r0, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, carry ? PR_9 : PR_8);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi": {
      "start_point": [
        5073,
        0
      ],
      "end_point": [
        5084,
        1
      ],
      "content": "static jit_word_t\n_bsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n       jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bsubr(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr_u": {
      "start_point": [
        5086,
        0
      ],
      "end_point": [
        5105,
        1
      ],
      "content": "static jit_word_t\n_bsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subr(rn(t0), r0, r1);\n    ltr_u(rn(t1), r0, rn(t0));\n    CMPI_EQ(PR_6, PR_7, 0, rn(t1));\n    MOV(r0, rn(t0));\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, carry ? PR_7 : PR_6);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi_u": {
      "start_point": [
        5107,
        0
      ],
      "end_point": [
        5118,
        1
      ],
      "content": "static jit_word_t\n_bsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1,\n\t jit_bool_t carry)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bsubr_u(i0, r0, rn(reg), carry);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpr": {
      "start_point": [
        5120,
        0
      ],
      "end_point": [
        5125,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    MOV_br_rn(BR_6, r0);\n    BR(BR_6);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        5127,
        0
      ],
      "end_point": [
        5137,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td;\n    sync();\n    d = ((jit_word_t)i0 - _jit->pc.w) >> 4;\n    if (d >= -16777216 && d <= 16777215)\n\tBRI(d);\n    else\n\tBRL(d);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        5139,
        0
      ],
      "end_point": [
        5148,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td, w;\n    sync();\n    w = _jit->pc.w;\n    d = ((jit_word_t)i0 - w) >> 4;\n    BRL(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        5150,
        0
      ],
      "end_point": [
        5160,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    LD8_inc(rn(reg), r0, 8);\n    MOV_br_rn(BR_6, rn(reg));\n    jit_unget_reg(reg);\n    LD8(GR_1, r0);\n    BR_CALL(BR_0, BR_6);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        5162,
        0
      ],
      "end_point": [
        5170,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        5172,
        0
      ],
      "end_point": [
        5182,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    w = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        5184,
        0
      ],
      "end_point": [
        5273,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg, ruse, rout;\n\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -16;\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t       _jitc->function->self.aoff) + 15) & -16;\n\n    /* First lowest unused register is first output register */\n    for (reg = _R115; reg >= _R40; reg--) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, reg))\n\t    break;\n    }\n    _jitc->breg = rn(reg) + 1;\n    _jitc->rout = _jitc->breg + 5;\n    ruse = _jitc->rout - GR_32;\n\n    /* How many out argument registers required? */\n    if (!_jitc->function->define_frame) {\n\tfor (reg = _OUT7; reg >= _OUT0; --reg) {\n\t    if (jit_regset_tstbit(&_jitc->function->regset, reg))\n\t\tbreak;\n\t}\n\trout = (reg + 1) - _OUT0;\n    }\n    else\n\trout = 8;\n\n    /* Do not know if will call div/mod functions (sqrt* needs one) */\n    if (rout < 2)\n\trout = 2;\n\n    /* Match gcc prolog */\n    ALLOC(_jitc->breg + 1, ruse, rout);\n    MOV(_jitc->breg + 2, GR_12);\n    MOV_rn_br(_jitc->breg, BR_0);\n    MOV(_jitc->breg + 3, GR_1);\n\n    /* lightning specific, use r4 as frame pointer */\n    MOV(_jitc->breg + 4, GR_4);\n    addi(GR_4, GR_12, -(stack_framesize + params_offset));\n\n    /* adjust stack pointer */\n    addi(GR_12, GR_12, -(stack_framesize +\n\t\t\t (params_offset << 1) + _jitc->function->stack));\n\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F0))\n\tSTF_SPILL(GR_4, rn(JIT_F0));\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F1)) {\n\taddi(GR_2, GR_4, 16);\n\tSTF_SPILL(GR_2, rn(JIT_F1));\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F2)) {\n\taddi(GR_2, GR_4, 32);\n\tSTF_SPILL(GR_2, rn(JIT_F2));\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F3)) {\n\taddi(GR_2, GR_4, 48);\n\tSTF_SPILL(GR_2, rn(JIT_F3));\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F4)) {\n\taddi(GR_2, GR_4, 64);\n\tSTF_SPILL(GR_2, rn(JIT_F4));\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F5)) {\n\taddi(GR_2, GR_4, 80);\n\tSTF_SPILL(GR_2, rn(JIT_F5));\n    }\n\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, GR_4, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (reg = _jitc->function->vagp; reg < 8; ++reg)\n\t    stxi(112 + reg * 8, GR_4, GR_32 + reg);\n    }\n}",
      "lines": 90,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        5275,
        0
      ],
      "end_point": [
        5311,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F0))\n\tLDF_FILL(rn(JIT_F0), GR_4);\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F1)) {\n\taddi(GR_2, GR_4, 16);\n\tLDF_FILL(rn(JIT_F1), GR_2);\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F2)) {\n\taddi(GR_2, GR_4, 32);\n\tLDF_FILL(rn(JIT_F2), GR_2);\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F3)) {\n\taddi(GR_2, GR_4, 48);\n\tLDF_FILL(rn(JIT_F3), GR_2);\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F4)) {\n\taddi(GR_2, GR_4, 64);\n\tLDF_FILL(rn(JIT_F4), GR_2);\n    }\n    if (jit_regset_tstbit(&_jitc->function->regset, JIT_F5)) {\n\taddi(GR_2, GR_4, 80);\n\tLDF_FILL(rn(JIT_F5), GR_2);\n    }\n    /* Match gcc epilog */\n    MOV(GR_1, _jitc->breg + 3);\n    MOV_I_ar_rn(AR_PFS, _jitc->breg + 1);\n    MOV_br_rn(BR_0, _jitc->breg);\n    MOV(GR_12, _jitc->breg + 2);\n    /* Restore lightning specific r4 as frame pointer */\n    MOV(GR_4, _jitc->breg + 4);\n    BR_RET(BR_0);\n    flush();\n}",
      "lines": 37,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        5313,
        0
      ],
      "end_point": [
        5322,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n    /* Initialize va_list to the first stack argument. */\n    if (_jitc->function->vagp < 8)\n\taddi(r0, GR_4, 112 + _jitc->function->vagp * 8);\n    else\n\taddi(r0, GR_4, _jitc->function->self.size);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        5324,
        0
      ],
      "end_point": [
        5332,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n    /* Load argument. */\n    ldr(r0, r1);\n    /* Update va_list. */\n    addi(r1, r1, 8);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        5334,
        0
      ],
      "end_point": [
        5400,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_code_t code,\n\t  jit_word_t instr, jit_word_t label)\n{\n    jit_word_t\t\t l, h, tm, s0, s1, s2;\n    union {\n\tjit_word_t\t w;\n\tjit_word_t\t*p;\n    } c;\n    jit_word_t\t\t i1, i41, i20, ic, i5, i9, i7;\n    c.w = instr;\n    get_bundle(c.p, l, h, tm, s0, s1, s2);\n    switch (code) {\n\tcase jit_code_movi:\n\t    /* Handle jit functions as C function, so that jit function\n\t     * pointers can be passed to C code, and jit code does not\n\t     * need to try to differentiate them. */\n\tcase jit_code_calli:\n\t    i1  = (label >> 63) &           0x1L;\n\t    i41 = (label >> 22) & 0x1ffffffffffL;\n\t    ic  = (label >> 21) &           0x1L;\n\t    i5  = (label >> 16) &          0x1fL;\n\t    i9  = (label >>  7) &         0x1ffL;\n\t    i7  =  label        &          0x7fL;\n\t    s1 = i41;\n\t    assert((tm & ~1) == TM_M_L_X_ &&\n\t\t   (s2 & 0xfL<<37) == (6L<<37) &&\n\t\t   s0 == nop_m);\n\t    s2 &= (6L<<37)|(0x7fL<<6);\n\t    s2 |= (i1<<36)|(i9<<27)|(i5<<22)|(ic<<21)|(i7<<13);\n\t    break;\n\tcase jit_code_jmpi:\n\t    if (_jitc->jump) {\n\t\t/* kludge to hide function descriptors; check that gp\n\t\t * is zero, what is done for all jit functions */\n\t\tif (((long *)label)[1] == 0) {\n\t\t    for (ic = 0; ic < _jitc->prolog.offset; ic++) {\n\t\t\tif (_jitc->prolog.ptr[ic] == label) {\n\t\t\t    label += 16;\n\t\t\t    break;\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t    ic = (label - instr) >> 4;\n\t    i1  = (ic >> 61) &           0x1L;\n\t    i41 = (ic >> 22) & 0x1ffffffffffL;\n\t    i20 =  ic        &       0xfffffL;\n\t    assert((tm & ~1) == TM_M_L_X_ &&\n\t\t   (s2 & 0xfL<<37) == (0xcL<<37) &&\n\t\t   s0 == nop_m);\n\t    s1 = i41;\n\t    s2 &= (0xcL<<37)|(0x7L<<33)|(1L<<12);\n\t    s2 |= (i1<<36)|(i20<<13);\n\t    break;\n\tdefault:\n\t    /* Only B1 in slot 0 expected due to need to either\n\t     * a stop to update predicates, or a sync before\n\t     * unconditional short branch */\n\t    ic = (label - instr) >> 4;\n\t    assert((s0 >> 37) == 4 && (s0 & (7 << 6)) == 0);\n\t    s0 &= (4L<<37)|(7L<<33)|(1L<<12)|0x1f;\n\t    s0 |= (((ic>>20)&1L)<<36)|((ic&0xfffffL)<<13);\n\t    break;\n    }\n    set_bundle(c.p, l, h, tm, s0, s1, s2);\n}",
      "lines": 67,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "ffsl": {
      "start_point": [
        5403,
        0
      ],
      "end_point": [
        5412,
        1
      ],
      "content": "static int\nffsl(long i)\n{\n    int\t\tbit;\n    if ((bit = ffs((int)i)) == 0) {\n\tif ((bit = ffs((int)((unsigned long)i >> 32))))\n\t    bit += 32;\n    }\n    return (bit);\n}",
      "lines": 10,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ia64-fpu.c": {
    "_M7": {
      "start_point": [
        729,
        0
      ],
      "end_point": [
        746,
        1
      ],
      "content": "static void\n_M7(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t r2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTREG2(r2, r3);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((6L<<37)|(1L<<36)|(x6<<30)|(ht<<28)|\n\t (r3<<20)|(r2<<13)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n    SETREG(r3);\n}",
      "lines": 18,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M8": {
      "start_point": [
        748,
        0
      ],
      "end_point": [
        765,
        1
      ],
      "content": "static void\n_M8(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t im, jit_word_t f1)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(ht &   ~0x3L));\n    assert(!(r3 &  ~0x7fL));\n    assert(im > -256 && im <= 255);\n    assert(!(f1 &  ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((7L<<37)|(((im>>8)&1L)<<36)|(x6<<30)|(ht<<28)|\n\t (((im>>8)&1L)<<27)|(r3<<20)|((im&0x7fLL)<<13)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n    SETREG(r3);\n}",
      "lines": 18,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M9": {
      "start_point": [
        767,
        0
      ],
      "end_point": [
        781,
        1
      ],
      "content": "static void\n_M9(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((6L<<37)|(x6<<30)|(ht<<28)|(r3<<20)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n}",
      "lines": 15,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M10": {
      "start_point": [
        783,
        0
      ],
      "end_point": [
        799,
        1
      ],
      "content": "static void\n_M10(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t f2, jit_word_t im)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(x6 &  ~0x3fL));\n    assert(!(ht &   ~0x3L));\n    assert(!(r3 &  ~0x7fL));\n    assert(!(f2 &  ~0x7fL));\n    assert(im > -256 && im <= 255);\n    TSTREG1(r3);\n    TSTFREG1(f2);\n    TSTPRED(_p);\n    inst((7L<<37)|(((im>>8)&1L)<<36)|(x6<<30)|(ht<<28)|\n\t (((im>>8)&1L)<<27)|(r3<<20)|(f2<<13)|((im&0x7fL)<<6)|_p, INST_M);\n    SETREG(r3);\n}",
      "lines": 17,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M11": {
      "start_point": [
        801,
        0
      ],
      "end_point": [
        818,
        1
      ],
      "content": "static void\n_M11(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t f2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTFREG2(f1, f2);\n    inst((6L<<37)|(x6<<30)|(ht<<28)|(1L<<27)|\n\t (r3<<20)|(f2<<13)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n    SETFREG(f2);\n}",
      "lines": 18,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M12": {
      "start_point": [
        820,
        0
      ],
      "end_point": [
        838,
        1
      ],
      "content": "static void\n_M12(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t ht, jit_word_t r3, jit_word_t f2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(ht &  ~0x3L));\n    assert(!(r3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTREG1(r3);\n    TSTPRED(_p);\n    TSTFREG2(f1, f2);\n    inst((6L<<37)|(1L<<36)|(x6<<30)|(ht<<28)|\n\t (1L<<27)|(r3<<20)|(f2<<13)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n    SETFREG(f2);\n    SETREG(r3);\n}",
      "lines": 19,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M18": {
      "start_point": [
        840,
        0
      ],
      "end_point": [
        853,
        1
      ],
      "content": "static void\n_M18(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t r2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(r2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTREG1(r2);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((6L<<37)|(x6<<30)|(1L<<27)|(r2<<13)|(f1<<6)|_p, INST_M);\n    SETFREG(f1);\n}",
      "lines": 14,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_M19": {
      "start_point": [
        855,
        0
      ],
      "end_point": [
        868,
        1
      ],
      "content": "static void\n_M19(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t x6, jit_word_t f2, jit_word_t r1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(x6 & ~0x3fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(r1 & ~0x7fL));\n    TSTFREG1(f2);\n    TSTPRED(_p);\n    TSTREG1(r1);\n    inst((4L<<37)|(x6<<30)|(1L<<27)|(f2<<13)|(r1<<6)|_p, INST_M);\n    SETREG(r1);\n}",
      "lines": 14,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F1_": {
      "start_point": [
        870,
        0
      ],
      "end_point": [
        889,
        1
      ],
      "content": "static void\nF1_(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t op, jit_word_t x, jit_word_t sf,\n    jit_word_t f4, jit_word_t f3, jit_word_t f2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(op &  ~0xfL));\n    assert(!(x  &  ~0x1L));\n    assert(!(sf &  ~0x3L));\n    assert(!(f4 & ~0x7fL));\n    assert(!(f3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTFREG3(f2, f3, f4);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((op<<37)|(x<<36)|(sf<<34)|(f4<<27)|\n\t (f3<<20)|(f2<<13)|(f1<<6)|_p, INST_F);\n    SETFREG(f1);\n}",
      "lines": 20,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F4_": {
      "start_point": [
        891,
        0
      ],
      "end_point": [
        913,
        1
      ],
      "content": "static void\nF4_(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t rb, jit_word_t sf, jit_word_t ra, jit_word_t p2,\n    jit_word_t f3, jit_word_t f2, jit_word_t ta, jit_word_t p1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(rb &  ~0x1L));\n    assert(!(sf &  ~0x3L));\n    assert(!(ra &  ~0x1L));\n    assert(!(p2 & ~0x3fL));\n    assert(!(f3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(ta &  ~0x1L));\n    assert(!(p1 & ~0x3fL));\n    TSTFREG2(f2, f3);\n    TSTPRED(_p);\n    inst((4L<<37)|(rb<<36)|(sf<<34)|(ra<<33)|(p2<<27)|\n\t (f3<<20)|(f2<<13)|(ta<<12)|(p1<<6)|_p, INST_F);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 23,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F5_": {
      "start_point": [
        915,
        0
      ],
      "end_point": [
        933,
        1
      ],
      "content": "static void\nF5_(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t p2, jit_word_t fc, jit_word_t f2, jit_word_t ta, jit_word_t p1)\n{\n    assert(!(_p &  ~0x3fL));\n    assert(!(p2 &  ~0x3fL));\n    assert(!(fc & ~0x1ffL));\n    assert(!(f2 &  ~0x7fL));\n    assert(!(ta &   ~0x1L));\n    assert(!(p1 &  ~0x3fL));\n    TSTFREG1(f2);\n    TSTPRED(_p);\n    inst((5L<<37)|(((fc>>7)&3L)<<33)|(p2<<27)|\n\t ((fc&0x7fL)<<20)|(f2<<13)|(ta<<12)|(p1<<6)|_p, INST_F);\n    if (p1)\n\t_jitc->pred |= 1 << p1;\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 19,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F6x_": {
      "start_point": [
        935,
        0
      ],
      "end_point": [
        956,
        1
      ],
      "content": "static void\nF6x_(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t op, jit_word_t q, jit_word_t sf,\n     jit_word_t p2,  jit_word_t f3, jit_word_t f2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(op &  ~0xfL));\n    assert(!(q  &  ~0x1L));\n    assert(!(sf &  ~0x3L));\n    assert(!(p2 & ~0x3fL));\n    assert(!(f3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTFREG2(f2, f3);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((op<<37)|(q<<36)|(sf<<34)|(1L<<33)|\n\t (p2<<27)|(f3<<20)|(f2<<13)|(f1<<6)|_p, INST_F);\n    SETFREG(f1);\n    if (p2)\n\t_jitc->pred |= 1 << p2;\n}",
      "lines": 22,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F8_": {
      "start_point": [
        958,
        0
      ],
      "end_point": [
        975,
        1
      ],
      "content": "static void\nF8_(jit_state_t *_jit, jit_word_t _p,\n    jit_word_t op, jit_word_t sf, jit_word_t x6,\n    jit_word_t f3, jit_word_t f2, jit_word_t f1)\n{\n    assert(!(_p & ~0x3fL));\n    assert(!(op &  ~0xfL));\n    assert(!(sf &  ~0x3L));\n    assert(!(x6 & ~0x3fL));\n    assert(!(f3 & ~0x7fL));\n    assert(!(f2 & ~0x7fL));\n    assert(!(f1 & ~0x7fL));\n    TSTFREG2(f2, f3);\n    TSTPRED(_p);\n    TSTFREG1(f1);\n    inst((op<<37)|(sf<<34)|(x6<<27)|(f3<<20)|(f2<<13)|(f1<<6)|_p, INST_F);\n    SETFREG(f1);\n}",
      "lines": 18,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F12_": {
      "start_point": [
        977,
        0
      ],
      "end_point": [
        988,
        1
      ],
      "content": "static void\nF12_(jit_state_t *_jit, jit_word_t _p,\n     jit_word_t sf, jit_word_t x6, jit_word_t omsk, jit_word_t amsk)\n{\n    assert(!(_p   & ~0x3fL));\n    assert(!(sf   &  ~0x3L));\n    assert(!(x6   & ~0x3fL));\n    assert(!(omsk & ~0x7fL));\n    assert(!(amsk & ~0x7fL));\n    TSTPRED(_p);\n    inst((sf<<34)|(x6<<27)|(omsk<<20)|(amsk<<13), INST_F);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F14x_": {
      "start_point": [
        990,
        0
      ],
      "end_point": [
        1002,
        1
      ],
      "content": "static void\nF14x_(jit_state_t* _jit, jit_word_t _p,\n      jit_word_t sf,  jit_word_t x, jit_word_t x6, jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(sf &     ~0x3L));\n    assert(!(x  &     ~0x1L));\n    assert(!(x6 &    ~0x3fL));\n    assert(!(im & ~0x1ffffL));\n    TSTPRED(_p);\n    inst((((im>>20)&1L)<<36)|(sf<<34)|(x<<33)|\n\t (x6<<27)|((im&0xffffL)<<6)|_p, INST_F);\n}",
      "lines": 13,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "F16_": {
      "start_point": [
        1004,
        0
      ],
      "end_point": [
        1013,
        1
      ],
      "content": "static void\nF16_(jit_state_t* _jit, jit_word_t _p,\n     jit_word_t y, jit_word_t im)\n{\n    assert(!(_p &    ~0x3fL));\n    assert(!(y  &     ~0x1L));\n    assert(!(im & ~0x1ffffL));\n    TSTPRED(_p);\n    inst((((im>>20)&1L)<<36)|(y<<27)|(1L<<26)|((im&0xffffL)<<6)|_p, INST_F);\n}",
      "lines": 10,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        1015,
        0
      ],
      "end_point": [
        1033,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i & 0xffffffff);\n\tSETF_S(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        1035,
        0
      ],
      "end_point": [
        1053,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.w);\n\tSETF_D(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_w_f": {
      "start_point": [
        1055,
        0
      ],
      "end_point": [
        1062,
        1
      ],
      "content": "static void\n_movr_w_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Should be used only in this case (with out0 == 120) */\n    if (r1 >= 120)\n\tr1 = _jitc->rout + (r1 - 120);\n    SETF_S(r0, r1);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_f_w": {
      "start_point": [
        1064,
        0
      ],
      "end_point": [
        1071,
        1
      ],
      "content": "static void\n_movr_f_w(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Should actually be used only in this case (with out0 == 120) */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n    GETF_S(r0, r1);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f_w": {
      "start_point": [
        1073,
        0
      ],
      "end_point": [
        1087,
        1
      ],
      "content": "static void\n_movi_f_w(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    jit_data_t\t\tdata;\n\n    /* Should be used only in this case (with out0 == 120) */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\tmovi(r0, data.q.l);\n    }\n    else\n\tldi_i(r0, (jit_word_t)i0);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_w_d": {
      "start_point": [
        1089,
        0
      ],
      "end_point": [
        1096,
        1
      ],
      "content": "static void\n_movr_w_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Should be used only in this case (with out0 == 120) */\n    if (r1 >= 120)\n\tr1 = _jitc->rout + (r1 - 120);\n    SETF_D(r0, r1);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d_w": {
      "start_point": [
        1098,
        0
      ],
      "end_point": [
        1105,
        1
      ],
      "content": "static void\n_movr_d_w(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Should be used only in this case (with out0 == 120) */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n    GETF_D(r0, r1);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d_w": {
      "start_point": [
        1107,
        0
      ],
      "end_point": [
        1124,
        1
      ],
      "content": "static void\n_movi_d_w(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n\n    /* Should be used only in this case (with out0 == 120) */\n    if (r0 >= 120)\n\tr0 = _jitc->rout + (r0 - 120);\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\tmovi(r0, data.w);\n    }\n    else\n\tldi_l(r0, (jit_word_t)i0);\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_f": {
      "start_point": [
        1168,
        0
      ],
      "end_point": [
        1188,
        1
      ],
      "content": "static void\n_divr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0, t1, t2;\n    t0 = jit_get_reg(jit_class_fpr);\n    t1 = jit_get_reg(jit_class_fpr);\n    t2 = jit_get_reg(jit_class_fpr);\n    FRCPA(rn(t0), PR_6, r1, r2);\n    FNMA_p(rn(t1), r2, rn(t0), GR_1, SF_S1, PR_6);\n    FMA_p(rn(t2), rn(t0), rn(t1), rn(t0), SF_S1, PR_6);\n    FMPY_p(rn(t1), rn(t1), rn(t1), SF_S1, PR_6);\n    FMA_p(rn(t2), rn(t2), rn(t1), rn(t2), SF_S1, PR_6);\n    FMPY_p(rn(t1), rn(t1), rn(t1), SF_S1, PR_6);\n    FMA_p(rn(t1), rn(t2), rn(t1), rn(t2), SF_S1, PR_6);\n    FMPY_S_p(rn(t2), r1, rn(t1), SF_S1, PR_6);\n    FNMA_p(rn(t0), r2, rn(t2), r1, SF_S1, PR_6);\n    FMA_S_p(r0, rn(t0), rn(t1), rn(t2), SF_S0, PR_6);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 21,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_d": {
      "start_point": [
        1190,
        0
      ],
      "end_point": [
        1210,
        1
      ],
      "content": "static void\n_divr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0, t1, t2;\n    t0 = jit_get_reg(jit_class_fpr);\n    t1 = jit_get_reg(jit_class_fpr);\n    t2 = jit_get_reg(jit_class_fpr);\n    FRCPA(rn(t0), PR_6, r1, r2);\n    FNMA_p(rn(t1), r2, rn(t0), GR_1, SF_S1, PR_6);\n    FMA_p(rn(t2), rn(t0), rn(t1), rn(t0), SF_S1, PR_6);\n    FMPY_p(rn(t1), rn(t1), rn(t1), SF_S1, PR_6);\n    FMA_p(rn(t2), rn(t2), rn(t1), rn(t2), SF_S1, PR_6);\n    FMPY_p(rn(t1), rn(t1), rn(t1), SF_S1, PR_6);\n    FMA_p(rn(t1), rn(t2), rn(t1), rn(t2), SF_S1, PR_6);\n    FMPY_D_p(rn(t2), r1, rn(t1), SF_S1, PR_6);\n    FNMA_p(rn(t0), r2, rn(t2), r1, SF_S1, PR_6);\n    FMA_D_p(r0, rn(t0), rn(t1), rn(t2), SF_S0, PR_6);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 21,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_f": {
      "start_point": [
        1212,
        0
      ],
      "end_point": [
        1221,
        1
      ],
      "content": "static void\n_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    SETF_SIG(rn(reg), r1);\n    FCVT_XF(r0, rn(reg));\n    FNORM_S(r0, r0);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        1223,
        0
      ],
      "end_point": [
        1232,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    SETF_SIG(rn(reg), r1);\n    FCVT_XF(r0, rn(reg));\n    FNORM_D(r0, r0);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_l": {
      "start_point": [
        1234,
        0
      ],
      "end_point": [
        1243,
        1
      ],
      "content": "static void\n_truncr_d_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FCVT_FX_TRUNC(rn(reg), r1);\n    GETF_SIG(r0, rn(reg));\n    FNORM(r0, r0);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_d": {
      "start_point": [
        1245,
        0
      ],
      "end_point": [
        1251,
        1
      ],
      "content": "static void\n_ltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LT(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_d": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1261,
        1
      ],
      "content": "static void\n_ler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LE(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr_d": {
      "start_point": [
        1265,
        0
      ],
      "end_point": [
        1271,
        1
      ],
      "content": "static void\n_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_EQ(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_d": {
      "start_point": [
        1275,
        0
      ],
      "end_point": [
        1281,
        1
      ],
      "content": "static void\n_ger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LE(PR_6, PR_7, r2, r1);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_d": {
      "start_point": [
        1285,
        0
      ],
      "end_point": [
        1291,
        1
      ],
      "content": "static void\n_gtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LT(PR_6, PR_7, r2, r1);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner_d": {
      "start_point": [
        1295,
        0
      ],
      "end_point": [
        1301,
        1
      ],
      "content": "static void\n_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_EQ(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unltr_d": {
      "start_point": [
        1305,
        0
      ],
      "end_point": [
        1311,
        1
      ],
      "content": "static void\n_unltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LE(PR_6, PR_7, r2, r1);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unler_d": {
      "start_point": [
        1315,
        0
      ],
      "end_point": [
        1321,
        1
      ],
      "content": "static void\n_unler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LT(PR_6, PR_7, r2, r1);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        1325,
        0
      ],
      "end_point": [
        1333,
        1
      ],
      "content": "static void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOVI(r0, 1);\n    FCMP_LT(PR_8, PR_9, r1, r2);\n    FCMP_LT(PR_6, PR_7, r2, r1);\n    MOV_p(r0, GR_0, PR_8);\t\t/* !(r1 < r2) && !(r2 < r1) */\n    MOV_p(r0, GR_0, PR_6);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unger_d": {
      "start_point": [
        1337,
        0
      ],
      "end_point": [
        1343,
        1
      ],
      "content": "static void\n_unger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LT(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ungtr_d": {
      "start_point": [
        1347,
        0
      ],
      "end_point": [
        1353,
        1
      ],
      "content": "static void\n_ungtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_LE(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        1357,
        0
      ],
      "end_point": [
        1365,
        1
      ],
      "content": "static void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    MOVI(r0, 1);\n    FCMP_EQ(PR_8, PR_9, r1, r2);\n    FCMP_UNORD(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_8);\n    MOV_p(r0, GR_0, PR_6);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ordr_d": {
      "start_point": [
        1369,
        0
      ],
      "end_point": [
        1375,
        1
      ],
      "content": "static void\n_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_UNORD(PR_6, PR_7, r1, r2);\n    MOV_p(r0, GR_0, PR_6);\n    MOVI_p(r0, 1, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unordr_d": {
      "start_point": [
        1379,
        0
      ],
      "end_point": [
        1385,
        1
      ],
      "content": "static void\n_unordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMP_UNORD(PR_6, PR_7, r1, r2);\n    MOVI_p(r0, 1, PR_6);\n    MOV_p(r0, GR_0, PR_7);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        1389,
        0
      ],
      "end_point": [
        1397,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        1399,
        0
      ],
      "end_point": [
        1407,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        1409,
        0
      ],
      "end_point": [
        1421,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (r0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_f(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        1423,
        0
      ],
      "end_point": [
        1431,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        1433,
        0
      ],
      "end_point": [
        1441,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        1443,
        0
      ],
      "end_point": [
        1455,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (r0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else\n\tldr_d(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        1457,
        0
      ],
      "end_point": [
        1465,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_f(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        1467,
        0
      ],
      "end_point": [
        1475,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        1477,
        0
      ],
      "end_point": [
        1489,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_f(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_f(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        1491,
        0
      ],
      "end_point": [
        1499,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    str_d(rn(reg), r0);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        1501,
        0
      ],
      "end_point": [
        1509,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        1511,
        0
      ],
      "end_point": [
        1523,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0) {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_d(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n    else\n\tstr_d(r0, r1);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sqrtr_f": {
      "start_point": [
        1525,
        0
      ],
      "end_point": [
        1531,
        1
      ],
      "content": "static void\n_sqrtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr_f(GR_8, r1);\n    calli((jit_word_t)sqrtf);\n    MOVF(r0, GR_8);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sqrtr_d": {
      "start_point": [
        1533,
        0
      ],
      "end_point": [
        1539,
        1
      ],
      "content": "static void\n_sqrtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr_d(GR_8, r1);\n    calli((jit_word_t)sqrt);\n    MOVF(r0, GR_8);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr_d": {
      "start_point": [
        1541,
        0
      ],
      "end_point": [
        1550,
        1
      ],
      "content": "static jit_word_t\n_bltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LT(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_d": {
      "start_point": [
        1554,
        0
      ],
      "end_point": [
        1563,
        1
      ],
      "content": "static jit_word_t\n_bler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LE(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr_d": {
      "start_point": [
        1567,
        0
      ],
      "end_point": [
        1576,
        1
      ],
      "content": "static jit_word_t\n_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_EQ(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_d": {
      "start_point": [
        1580,
        0
      ],
      "end_point": [
        1589,
        1
      ],
      "content": "static jit_word_t\n_bger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LE(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_d": {
      "start_point": [
        1593,
        0
      ],
      "end_point": [
        1602,
        1
      ],
      "content": "static jit_word_t\n_bgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LT(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner_d": {
      "start_point": [
        1606,
        0
      ],
      "end_point": [
        1615,
        1
      ],
      "content": "static jit_word_t\n_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_EQ(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunltr_d": {
      "start_point": [
        1619,
        0
      ],
      "end_point": [
        1628,
        1
      ],
      "content": "static jit_word_t\n_bunltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LE(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunler_d": {
      "start_point": [
        1632,
        0
      ],
      "end_point": [
        1641,
        1
      ],
      "content": "static jit_word_t\n_bunler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LT(PR_6, PR_7, r1, r0);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr_d": {
      "start_point": [
        1645,
        0
      ],
      "end_point": [
        1669,
        1
      ],
      "content": "static jit_word_t\n_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\tjunord, jne;\n    FCMP_UNORD(PR_8, PR_9, r0, r1);\n    sync();\n    /* junord L1 */\n    junord = _jit->pc.w;\n    BRI_COND(3, PR_8);\n    FCMP_EQ(PR_6, PR_7, r0, r1);\n    sync();\n    /* jne L2 */\n    jne = _jit->pc.w;\n    BRI_COND(2, PR_7);\n    sync();\n    w = _jit->pc.w;\n    /* L1: */\n    patch_at(jit_code_bunordr_d, junord, _jit->pc.w);\n    BRI((i0 - w) >> 4);\t\t/* unconditional jump to patch */\n    sync();\n    /* L2: */\n    patch_at(jit_code_bner_d, jne, _jit->pc.w);\n    return (w);\n}",
      "lines": 25,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunger_d": {
      "start_point": [
        1673,
        0
      ],
      "end_point": [
        1682,
        1
      ],
      "content": "static jit_word_t\n_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LT(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bungtr_d": {
      "start_point": [
        1686,
        0
      ],
      "end_point": [
        1695,
        1
      ],
      "content": "static jit_word_t\n_bungtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_LE(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr_d": {
      "start_point": [
        1699,
        0
      ],
      "end_point": [
        1722,
        1
      ],
      "content": "static jit_word_t\n_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\tjeq, junord;\n    FCMP_EQ(PR_8, PR_9, r0, r1);\n    /* jeq L1 */\n    sync();\n    jeq = _jit->pc.w;\n    BRI_COND(4, PR_8);\n    FCMP_UNORD(PR_6, PR_7, r0, r1);\n    /* junord L1 */\n    sync();\n    junord = _jit->pc.w;\n    BRI_COND(2, PR_6);\n    sync();\n    w = _jit->pc.w;\n    BRI((i0 - w) >> 4);\t\t/* unconditional jump to patch */\n    /* L1 */\n    sync();\n    patch_at(jit_code_beqr_d, jeq, _jit->pc.w);\n    patch_at(jit_code_bordr_d, junord, _jit->pc.w);\n    return (w);\n}",
      "lines": 24,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bordr_d": {
      "start_point": [
        1726,
        0
      ],
      "end_point": [
        1735,
        1
      ],
      "content": "static jit_word_t\n_bordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_UNORD(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_7);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunordr_d": {
      "start_point": [
        1739,
        0
      ],
      "end_point": [
        1748,
        1
      ],
      "content": "static jit_word_t\n_bunordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMP_UNORD(PR_6, PR_7, r0, r1);\n    sync();\n    w = _jit->pc.w;\n    BRI_COND((i0 - w) >> 4, PR_6);\n    return (w);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1752,
        0
      ],
      "end_point": [
        1760,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n    /* Load argument. */\n    ldr_d(r0, r1);\n    /* Update va_list. */\n    addi(r1, r1, 8);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ia64-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_ia64.c": {
    "jit_get_cpu": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        240,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        242,
        0
      ],
      "end_point": [
        248,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n    jit_regset_new(&_jitc->regs);\n    jit_carry = _NOREG;\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        250,
        0
      ],
      "end_point": [
        292,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\toffset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    /* params_offset << 1, once for ours arguments, once for arguments\n     * to any called function; required because offsets are computed\n     * as JIT_FP displacement */\n    _jitc->function->self.size = stack_framesize + (params_offset << 1);\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.aoff = _jitc->function->self.alen = 0;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 43,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        294,
        0
      ],
      "end_point": [
        310,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        312,
        0
      ],
      "end_point": [
        331,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -16);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        333,
        0
      ],
      "end_point": [
        343,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        345,
        0
      ],
      "end_point": [
        352,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    jit_movr(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        354,
        0
      ],
      "end_point": [
        361,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        363,
        0
      ],
      "end_point": [
        370,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    jit_movr_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        372,
        0
      ],
      "end_point": [
        379,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        381,
        0
      ],
      "end_point": [
        388,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    jit_movr_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        390,
        0
      ],
      "end_point": [
        397,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        399,
        0
      ],
      "end_point": [
        406,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        408,
        0
      ],
      "end_point": [
        414,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    assert(u->code == jit_code_arg ||\n\t   u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_reg_p(u->u.w));\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        416,
        0
      ],
      "end_point": [
        432,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n\tjit_link_prepare();\n    }\n    else {\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\t_jitc->function->vagp = _jitc->function->self.argi;\n\tjit_link_prolog();\n    }\n    jit_dec_synth();\n}",
      "lines": 17,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        434,
        0
      ],
      "end_point": [
        450,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        452,
        0
      ],
      "end_point": [
        473,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\tif (!(_jitc->function->self.call & jit_call_varargs))\n\t    offset = 8 + _jitc->function->self.argf++;\n\telse\n\t    offset = _jitc->function->self.argi;\n\t++_jitc->function->self.argi;\n    }\n   else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 22,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        475,
        0
      ],
      "end_point": [
        496,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\tif (!(_jitc->function->self.call & jit_call_varargs))\n\t    offset = 8 + _jitc->function->self.argf++;\n\telse\n\t    offset = _jitc->function->self.argi;\n\t++_jitc->function->self.argi;\n    }\n   else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_float64_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 22,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        498,
        0
      ],
      "end_point": [
        508,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        510,
        0
      ],
      "end_point": [
        520,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        522,
        0
      ],
      "end_point": [
        532,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        534,
        0
      ],
      "end_point": [
        544,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        546,
        0
      ],
      "end_point": [
        556,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_i(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        558,
        0
      ],
      "end_point": [
        568,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, _R32 + v->u.w);\n    else\n\tjit_ldxi_ui(u, JIT_FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        570,
        0
      ],
      "end_point": [
        580,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, _R32 + v->u.w);\n    else\n\tjit_ldxi(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        582,
        0
      ],
      "end_point": [
        592,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(_R32 + v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        594,
        0
      ],
      "end_point": [
        609,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(_R32 + v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        611,
        0
      ],
      "end_point": [
        623,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_w_f(u, _OUT0 + v->u.w);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_f(u, _F8 + (v->u.w - 8));\n    else\n\tjit_ldxi_f(u, JIT_FP, v->u.w + F_DISP);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        625,
        0
      ],
      "end_point": [
        637,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_f_w(_OUT0 + v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_f(_F8 + (v->u.w - 8), u);\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, u + F_DISP);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        639,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_f_w(_OUT0 + v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movi_f(_F8 + (v->u.w - 8), u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, JIT_FP, regno + F_DISP);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        658,
        0
      ],
      "end_point": [
        670,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_w_d(u, _OUT0 + v->u.w);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_d(u, _F8 + (v->u.w - 8));\n    else\n\tjit_ldxi_d(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        672,
        0
      ],
      "end_point": [
        684,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_d_w(_OUT0 + v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_d(_F8 + (v->u.w - 8), u);\n    else\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        686,
        0
      ],
      "end_point": [
        703,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_d_w(_OUT0 + v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movi_d(_F8 + (v->u.w - 8), u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 18,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        705,
        0
      ],
      "end_point": [
        720,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        722,
        0
      ],
      "end_point": [
        741,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        743,
        0
      ],
      "end_point": [
        764,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movr_f(_F8 + _jitc->function->call.argf, u);\n\t    ++_jitc->function->call.argf;\n\t}\n\telse\n\t    jit_movr_f_w(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + params_offset + F_DISP,\n\t\t   JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 22,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        766,
        0
      ],
      "end_point": [
        791,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movi_f(_F8 + _jitc->function->call.argf, u);\n\t    ++_jitc->function->call.argf;\n\t}\n\telse\n\t    jit_movi_f_w(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size + params_offset + F_DISP,\n\t\t   JIT_SP, regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 26,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        793,
        0
      ],
      "end_point": [
        813,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movr_d(_F8 + _jitc->function->call.argf, u);\n\t    ++_jitc->function->call.argf;\n\t}\n\telse\n\t    jit_movr_d_w(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size + params_offset, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        815,
        0
      ],
      "end_point": [
        839,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movi_d(_F8 + _jitc->function->call.argf, u);\n\t    ++_jitc->function->call.argf;\n\t}\n\telse\n\t    jit_movi_d_w(_OUT0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 25,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        841,
        0
      ],
      "end_point": [
        846,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    /* Argument registers are allocated from the pool of unused registers */\n    return (0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        848,
        0
      ],
      "end_point": [
        863,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = _jitc->function->call.argi;\n    call->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        865,
        0
      ],
      "end_point": [
        881,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        883,
        0
      ],
      "end_point": [
        889,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        891,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        899,
        0
      ],
      "end_point": [
        905,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        907,
        0
      ],
      "end_point": [
        913,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        915,
        0
      ],
      "end_point": [
        921,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    jit_extr_i(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        923,
        0
      ],
      "end_point": [
        929,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_ui, r0);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        931,
        0
      ],
      "end_point": [
        937,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    jit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        939,
        0
      ],
      "end_point": [
        945,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    jit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        947,
        0
      ],
      "end_point": [
        953,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    jit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        955,
        0
      ],
      "end_point": [
        1678,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n\tjit_word_t\t prolog_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    /* If did resize the code buffer, these were not reset */\n    _jitc->ioff = 0;\n    jit_regset_set_ui(&_jitc->regs, 0);\n    _jitc->pred = 0;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    undo.prolog_offset = 0;\n    for (node = _jitc->head; node; node = node->next)\n\tif (node->code != jit_code_label &&\n\t    node->code != jit_code_note &&\n\t    node->code != jit_code_name)\n\t    break;\n    if (node && (node->code != jit_code_prolog ||\n\t\t !(_jitc->functions.ptr + node->w.w)->assume_frame)) {\n\t/* code may start with a jump so add an initial function descriptor */\n\tword = _jit->pc.w + 16;\n\til(word);\t\t/* addr */\n\til(0);\t\t\t/* gp */\n    }\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n\tvalue = jit_classify(node->code);\n#if GET_JIT_SIZE\n\tsync();\n#endif\n#if DEVEL_DISASSEMBLER\n\t/* FIXME DEVEL_DISASSEMBLER should become DISASSEMBLER,\n\t * but a \"real\" DEVEL_DISASSEMBLER should be required\n\t * to turn the below \"#if 0\" into \"#if 1\" */\n#  if 0\t\t/* Since disassembly outputs 3 instructions at a time,\n\t\t * make it \"#if 1\" for more clear debug output. */\n\tsync();\n#  endif\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\t/* nothing done */\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tsync();\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\tsync();\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n\t\tcase_rr(hton, _ul);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    if (_jit->pc.uc == _jit->code.ptr + 16)\n\t\t\t_jitc->jump = 1;\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    word = calli_p(temp->u.w);\n\t\t    if (!(temp->flag & jit_flag_patch))\n\t\t\tpatch(word, node);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\tjit_regset_set_ui(&_jitc->regs, 0);\n\t\t_jitc->pred = 0;\n\t\tsync();\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t\tundo.prolog_offset = _jitc->prolog.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tif (_jitc->jump && !_jitc->function->assume_frame) {\n\t\t    /* remember prolog to hide offset adjustment for a jump\n\t\t     * to the start of a function, what is expected to be\n\t\t     * a common practice as first jit instruction */\n\t\t    if (_jitc->prolog.offset >= _jitc->prolog.length) {\n\t\t\t_jitc->prolog.length += 16;\n\t\t\tjit_realloc((jit_pointer_t *)&_jitc->prolog.ptr,\n\t\t\t\t    (_jitc->prolog.length - 16) *\n\t\t\t\t    sizeof(jit_word_t),\n\t\t\t\t    _jitc->prolog.length * sizeof(jit_word_t));\n\t\t    }\n\t\t    _jitc->prolog.ptr[_jitc->prolog.offset++] = _jit->pc.w;\n\t\t    /* function descriptor */\n\t\t    word = _jit->pc.w + 16;\n\t\t    il(word);\t\t\t/* addr */\n\t\t    il(0);\t\t\t/* gp */\n\t\t}\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    _jitc->prolog.offset = undo.prolog_offset;\n\t\t    _jitc->ioff = 0;\n\t\t    jit_regset_set_ui(&_jitc->regs, 0);\n\t\t    _jitc->pred = 0;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tsync();\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\tjit_regset_set_ui(&_jitc->regs, 0);\n\t\t_jitc->pred = 0;\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\n\t    case jit_code_arg:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\t\tcase jit_code_getarg_ui:\n\t    case jit_code_getarg_l:\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    case jit_code_movr_w_f:\n\t\tmovr_w_f(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movr_f_w:\n\t\tmovr_f_w(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movr_w_d:\n\t\tmovr_w_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movr_d_w:\n\t\tmovr_d_w(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movi_f_w:\n\t\tmovi_f_w(rn(node->u.w), node->v.n->u.p);\n\t\tbreak;\n\t    case jit_code_movi_d_w:\n\t\tmovi_d_w(rn(node->u.w), node->v.n->u.p);\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tif (jit_carry != _NOREG) {\n\t    switch (node->code) {\n\t\tcase jit_code_note:\n\t\tcase jit_code_addcr:\t\tcase jit_code_addci:\n\t\tcase jit_code_addxr:\t\tcase jit_code_addxi:\n\t\tcase jit_code_subcr:\t\tcase jit_code_subci:\n\t\tcase jit_code_subxr:\t\tcase jit_code_subxi:\n\t\t    break;\n\t\tdefault:\n\t\t    jit_unget_reg(jit_carry);\n\t\t    jit_carry = _NOREG;\n\t\t    break;\n\t    }\n\t}\n#if GET_JIT_SIZE\n\tsync();\n#endif\n\tjit_regarg_clr(node, value);\n\tif (jit_carry == _NOREG)\n\t    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n\telse {\n\t    assert(jit_regset_scan1(&_jitc->regarg, 0) == jit_carry);\n\t    assert(jit_regset_scan1(&_jitc->regarg, jit_carry + 1) == ULONG_MAX);\n\t}\n\tassert(_jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n    sync();\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrrw\n#undef case_rrf\n#undef case_rrw\n#undef case_rrrr\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(node->code, _jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 724,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1685,
        0
      ],
      "end_point": [
        1703,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__GNUC__)\n    jit_word_t\t\tf, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n#  if 0\n    __clear_cache((void *)f, (void *)t);\n#  else\n    /* __clear_cache is a noop in (old?) gcc, but cache flush is\n     * required on a multi processor Linux system. */\n    for (s = f; s < t; s += 32)\n\tasm volatile(\"fc %0\" :: \"r\"(s) : \"memory\");\n#  endif\n#endif\n}",
      "lines": 19,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1709,
        0
      ],
      "end_point": [
        1715,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_gpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    assert(i0 >= -2097152 && i0 < 2097151);\n    addi(GR_2, rn(r1), i0);\n    ldr(rn(r0), GR_2);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1717,
        0
      ],
      "end_point": [
        1723,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_gpr_t r1)\n{\n    assert(i0 >= -2097152 && i0 < 2097151);\n    addi(GR_2, rn(r0), i0);\n    str(GR_2, rn(r1));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1725,
        0
      ],
      "end_point": [
        1731,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_fpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    assert(i0 >= -2097152 && i0 < 2097151);\n    addi(GR_2, rn(r1), i0);\n    ldr_d(rn(r0), GR_2);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1733,
        0
      ],
      "end_point": [
        1739,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_fpr_t r1)\n{\n    assert(i0 >= -2097152 && i0 < 2097151);\n    addi(GR_2, rn(r0), i0);\n    str_d(GR_2, rn(r1));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1741,
        0
      ],
      "end_point": [
        1761,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\tflag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_memory.c": {
    "jit_memcpy": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "content": "jit_pointer_t\njit_memcpy(jit_pointer_t dst, const void * src, jit_word_t size)\n{\n    if (size)\n\treturn (memcpy(dst, src, size));\n    return (dst);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_memmove": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "content": "jit_pointer_t\njit_memmove(jit_pointer_t dst, const void *src , jit_word_t size)\n{\n    if (size)\n\treturn (memmove(dst, src, size));\n    return (dst);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_set_memory_functions": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "content": "void\njit_set_memory_functions(jit_alloc_func_ptr alloc_ptr,\n\t\t\t jit_realloc_func_ptr realloc_ptr,\n\t\t\t jit_free_func_ptr free_ptr)\n{\n    if (alloc_ptr == NULL)\n\talloc_ptr = jit_default_alloc_func;\n    if (realloc_ptr == NULL)\n\trealloc_ptr = jit_default_realloc_func;\n    if (free_ptr == NULL)\n\tfree_ptr = jit_default_free_func;\n    jit_alloc_ptr = alloc_ptr;\n    jit_realloc_ptr = realloc_ptr;\n    jit_free_ptr = free_ptr;\n}",
      "lines": 15,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "jit_get_memory_functions": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "content": "void\njit_get_memory_functions(jit_alloc_func_ptr *alloc_ptr,\n\t\t\t jit_realloc_func_ptr *realloc_ptr,\n\t\t\t jit_free_func_ptr *free_ptr)\n{\n    *alloc_ptr = jit_alloc_ptr;\n    *realloc_ptr = jit_realloc_ptr;\n    *free_ptr = jit_free_ptr;\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "jit_alloc": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        87,
        1
      ],
      "content": "void\njit_alloc(jit_pointer_t *ptr, jit_word_t size)\n{\n    *ptr = (*jit_alloc_ptr)(size);\n    memset(*ptr, 0, size);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "jit_realloc": {
      "start_point": [
        89,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "content": "void\njit_realloc(jit_pointer_t *ptr, jit_word_t old_size, jit_word_t new_size)\n{\n    *ptr = (*jit_realloc_ptr)(*ptr, new_size);\n    if (old_size < new_size)\n\tmemset((jit_int8_t*)*ptr + old_size, 0, new_size - old_size);\n}",
      "lines": 7,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "jit_free": {
      "start_point": [
        97,
        0
      ],
      "end_point": [
        104,
        1
      ],
      "content": "void\njit_free(jit_pointer_t *ptr)\n{\n    if (*ptr) {\n\t(*jit_free_ptr)(*ptr);\n\t*ptr = NULL;\n    }\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "jit_default_alloc_func": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        110,
        1
      ],
      "content": "static void *\njit_default_alloc_func(size_t size)\n{\n    return (malloc(size));\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "*\njit_default_alloc_func(size_t size)",
        "*"
      ]
    },
    "jit_default_realloc_func": {
      "start_point": [
        112,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "content": "static void *\njit_default_realloc_func(void *ptr, size_t size)\n{\n    return (realloc(ptr, size));\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "*\njit_default_realloc_func(void *ptr, size_t size)",
        "*"
      ]
    },
    "jit_default_free_func": {
      "start_point": [
        118,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "content": "static void\njit_default_free_func(void *ptr)\n{\n    free(ptr);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_mips-cpu.c": {
    "_hrrrit": {
      "start_point": [
        752,
        0
      ],
      "end_point": [
        765,
        1
      ],
      "content": "static void\n_hrrrit(jit_state_t *_jit,jit_int32_t hc,\n\tjit_int32_t rs, jit_int32_t rt, jit_int32_t rd,\n\tjit_int32_t ic, jit_int32_t tc)\n{\n    jit_instr_t\t\ti;\n    i.tc.b = tc;\n    i.ic.b = ic;\n    i.rd.b = rd;\n    i.rt.b = rt;\n    i.rs.b = rs;\n    i.hc.b = hc;\n    ii(i.op);\n}",
      "lines": 14,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_hrri": {
      "start_point": [
        767,
        0
      ],
      "end_point": [
        778,
        1
      ],
      "content": "static void\n_hrri(jit_state_t *_jit, jit_int32_t hc,\n      jit_int32_t rs, jit_int32_t rt, jit_int32_t im)\n{\n    jit_instr_t\t\ti;\n    i.op = 0;\n    i.is.b = im;\n    i.rt.b = rt;\n    i.rs.b = rs;\n    i.hc.b = hc;\n    ii(i.op);\n}",
      "lines": 12,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_hi": {
      "start_point": [
        780,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "static void\n_hi(jit_state_t *_jit, jit_int32_t hc, jit_int32_t im)\n{\n    jit_instr_t\t\ti;\n    i.ii.b = im;\n    i.hc.b = hc;\n    ii(i.op);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        795,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        797,
        0
      ],
      "end_point": [
        811,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (can_sign_extend_short_p(i0))\n\taddiu(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        813,
        0
      ],
      "end_point": [
        831,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0;\n\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\tt0 = jit_get_reg(jit_class_gpr);\n\taddr(rn(t0), r1, r2);\n\tSLTU(rn(jit_carry), rn(t0), r1);\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    else {\n\taddr(r0, r1, r2);\n\tSLTU(rn(jit_carry), r0, r1);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        833,
        0
      ],
      "end_point": [
        861,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tt0;\n\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    t0 = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\tif (can_sign_extend_short_p(i0))\n\t    addiu(rn(t0), r1, i0);\n\telse {\n\t    movi(rn(t0), i0);\n\t    addr(rn(t0), r1, rn(t0));\n\t}\n\tSLTU(rn(jit_carry), rn(t0), r1);\n\tmovr(r0, rn(t0));\n    }\n    else {\n\tif (can_sign_extend_short_p(i0))\n\t    addiu(r0, r1, i0);\n\telse {\n\t    movi(rn(t0), i0);\n\t    addr(r0, r1, rn(t0));\n\t}\n\tSLTU(rn(jit_carry), r0, r1);\n    }\n    jit_unget_reg(t0);\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        863,
        0
      ],
      "end_point": [
        874,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0;\n\n    assert(jit_carry != _NOREG);\n    t0 = jit_get_reg(jit_class_gpr);\n    movr(rn(t0), rn(jit_carry));\n    addcr(r0, r1, r2);\n    addcr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        876,
        0
      ],
      "end_point": [
        887,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tt0;\n\n    assert(jit_carry != _NOREG);\n    t0 = jit_get_reg(jit_class_gpr);\n    movr(rn(t0), rn(jit_carry));\n    addci(r0, r1, i0);\n    addcr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        889,
        0
      ],
      "end_point": [
        903,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (can_sign_extend_short_p(i0) && (i0 & 0xffff) != 0x8000)\n\taddiu(r0, r1, -i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        905,
        0
      ],
      "end_point": [
        923,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0;\n\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\tt0 = jit_get_reg(jit_class_gpr);\n\tsubr(rn(t0), r1, r2);\n\tSLTU(rn(jit_carry), r1, rn(t0));\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    else {\n\tsubr(r0, r1, r2);\n\tSLTU(rn(jit_carry), r1, r0);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        925,
        0
      ],
      "end_point": [
        953,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tt0;\n\n    if (jit_carry == _NOREG)\n\tjit_carry = jit_get_reg(jit_class_gpr);\n    t0 = jit_get_reg(jit_class_gpr);\n    if (r0 == r1) {\n\tif (can_sign_extend_short_p(i0) && (i0 & 0xffff) != 0x8000)\n\t    addiu(rn(t0), r1, -i0);\n\telse {\n\t    movi(rn(t0), i0);\n\t    subr(rn(t0), r1, rn(t0));\n\t}\n\tSLTU(rn(jit_carry), r1, rn(t0));\n\tmovr(r0, rn(t0));\n    }\n    else {\n\tif (can_sign_extend_short_p(i0) && (i0 & 0xffff) != 0x8000)\n\t    addiu(r0, r1, -i0);\n\telse {\n\t    movi(rn(t0), i0);\n\t    subr(r0, r1, rn(t0));\n\t}\n\tSLTU(rn(jit_carry), r1, r0);\n    }\n    jit_unget_reg(t0);\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        955,
        0
      ],
      "end_point": [
        966,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tt0;\n\n    assert(jit_carry != _NOREG);\n    t0 = jit_get_reg(jit_class_gpr);\n    movr(rn(t0), rn(jit_carry));\n    subcr(r0, r1, r2);\n    subcr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        968,
        0
      ],
      "end_point": [
        979,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tt0;\n\n    assert(jit_carry != _NOREG);\n    t0 = jit_get_reg(jit_class_gpr);\n    movr(rn(t0), rn(jit_carry));\n    subci(r0, r1, i0);\n    subcr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        981,
        0
      ],
      "end_point": [
        986,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        988,
        0
      ],
      "end_point": [
        993,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    multu(r1, r2);\n    MFLO(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        995,
        0
      ],
      "end_point": [
        1004,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    mulr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        1006,
        0
      ],
      "end_point": [
        1016,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    if (sign)\n\tmult(r2, r3);\n    else\n\tmultu(r2, r3);\n    MFLO(r0);\n    MFHI(r1);\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        1018,
        0
      ],
      "end_point": [
        1027,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqmulr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr": {
      "start_point": [
        1029,
        0
      ],
      "end_point": [
        1034,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    div(r1, r2);\n    MFLO(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        1036,
        0
      ],
      "end_point": [
        1044,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_u": {
      "start_point": [
        1046,
        0
      ],
      "end_point": [
        1051,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    divu(r1, r2);\n    MFLO(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1053,
        0
      ],
      "end_point": [
        1061,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        1063,
        0
      ],
      "end_point": [
        1073,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n       jit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    if (sign)\n\tdiv(r2, r3);\n    else\n\tdivu(r2, r3);\n    MFLO(r0);\n    MFHI(r1);\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        1075,
        0
      ],
      "end_point": [
        1084,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqdivr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        1086,
        0
      ],
      "end_point": [
        1091,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    div(r1, r2);\n    MFHI(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1093,
        0
      ],
      "end_point": [
        1101,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        1103,
        0
      ],
      "end_point": [
        1108,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    divu(r1, r2);\n    MFHI(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1110,
        0
      ],
      "end_point": [
        1118,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        1121,
        0
      ],
      "end_point": [
        1129,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 63);\n    if (i0 < 32)\n\tDSLL(r0, r1, i0);\n    else\n\tDSLL32(r0, r1, i0 - 32);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        1131,
        0
      ],
      "end_point": [
        1139,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 63);\n    if (i0 < 32)\n\tDSRA(r0, r1, i0);\n    else\n\tDSRA32(r0, r1, i0 - 32);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        1141,
        0
      ],
      "end_point": [
        1149,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    assert(i0 >= 0 && i0 <= 63);\n    if (i0 < 32)\n\tDSRL(r0, r1, i0);\n    else\n\tDSRL32(r0, r1, i0 - 32);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1152,
        0
      ],
      "end_point": [
        1164,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tANDI(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tAND(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1166,
        0
      ],
      "end_point": [
        1178,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tORI(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tOR(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1180,
        0
      ],
      "end_point": [
        1192,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tXORI(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tXOR(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        1194,
        0
      ],
      "end_point": [
        1227,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    if (i0 == 0)\n\tOR(r0, _ZERO_REGNO, _ZERO_REGNO);\n    else if (can_sign_extend_short_p(i0))\n\taddiu(r0, _ZERO_REGNO, i0);\n    else if (can_zero_extend_short_p(i0))\n\tORI(r0, _ZERO_REGNO, i0);\n    else {\n\tif (can_sign_extend_int_p(i0))\n\t    LUI(r0, i0 >> 16);\n\telse if (can_zero_extend_int_p(i0)) {\n\t    if (i0 & 0xffff0000) {\n\t\tORI(r0, _ZERO_REGNO, i0 >> 16);\n\t\tlshi(r0, r0, 16);\n\t    }\n\t}\n#  if __WORDSIZE == 64\n\telse {\n\t    movi(r0, (jit_uword_t)i0 >> 32);\n\t    if (i0 & 0xffff0000) {\n\t\tlshi(r0, r0, 16);\n\t\tORI(r0, r0, i0 >> 16);\n\t\tlshi(r0, r0, 16);\n\t    }\n\t    else\n\t\tlshi(r0, r0, 32);\n\t}\n#  endif\n\tif (i0 & 0xffff)\n\t    ORI(r0, r0, i0);\n    }\n}",
      "lines": 34,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        1229,
        0
      ],
      "end_point": [
        1248,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n\n    w = _jit->pc.w;\n#  if __WORDSIZE == 32\n    LUI(r0, i0 >> 16);\n    ORI(r0, r0, i0);\n#  else\n    LUI(r0, i0 >> 48);\n    ORI(r0, r0, i0 >> 32);\n    lshi(r0, r0, 16);\n    ORI(r0, r0, i0 >> 16);\n    lshi(r0, r0, 16);\n    ORI(r0, r0, i0);\n#  endif\n\n    return (w);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldi_c": {
      "start_point": [
        1250,
        0
      ],
      "end_point": [
        1262,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLB(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        1264,
        0
      ],
      "end_point": [
        1276,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLBU(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        1278,
        0
      ],
      "end_point": [
        1290,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLH(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        1292,
        0
      ],
      "end_point": [
        1304,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLHU(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        1306,
        0
      ],
      "end_point": [
        1318,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLW(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        1321,
        0
      ],
      "end_point": [
        1333,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLWU(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        1335,
        0
      ],
      "end_point": [
        1347,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLD(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        1350,
        0
      ],
      "end_point": [
        1358,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_c(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        1360,
        0
      ],
      "end_point": [
        1372,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLB(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        1374,
        0
      ],
      "end_point": [
        1382,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_uc(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        1384,
        0
      ],
      "end_point": [
        1396,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLBU(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        1398,
        0
      ],
      "end_point": [
        1406,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_s(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        1408,
        0
      ],
      "end_point": [
        1420,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLH(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        1422,
        0
      ],
      "end_point": [
        1430,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_us(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        1432,
        0
      ],
      "end_point": [
        1444,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLHU(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        1446,
        0
      ],
      "end_point": [
        1454,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_i(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        1456,
        0
      ],
      "end_point": [
        1468,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLW(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        1471,
        0
      ],
      "end_point": [
        1479,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_ui(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        1481,
        0
      ],
      "end_point": [
        1493,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLWU(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        1495,
        0
      ],
      "end_point": [
        1503,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_l(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        1505,
        0
      ],
      "end_point": [
        1517,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLD(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        1520,
        0
      ],
      "end_point": [
        1532,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSB(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_c(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        1534,
        0
      ],
      "end_point": [
        1546,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSH(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_s(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        1548,
        0
      ],
      "end_point": [
        1560,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSW(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_i(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        1563,
        0
      ],
      "end_point": [
        1575,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSD(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_l(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        1578,
        0
      ],
      "end_point": [
        1586,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        1588,
        0
      ],
      "end_point": [
        1600,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSB(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        1602,
        0
      ],
      "end_point": [
        1610,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        1612,
        0
      ],
      "end_point": [
        1624,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSH(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        1626,
        0
      ],
      "end_point": [
        1634,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        1636,
        0
      ],
      "end_point": [
        1648,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSW(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        1651,
        0
      ],
      "end_point": [
        1659,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1 ,jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_l(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        1661,
        0
      ],
      "end_point": [
        1673,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSD(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_l(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        1677,
        0
      ],
      "end_point": [
        1688,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr);\n    rshi(rn(t0), r1, 8);\n    andi(r0, r1, 0xff);\n    andi(rn(t0), rn(t0), 0xff);\n    lshi(r0, r0, 8);\n    orr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        1690,
        0
      ],
      "end_point": [
        1715,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n    t0 = jit_get_reg(jit_class_gpr);\n    t1 = jit_get_reg(jit_class_gpr);\n    t2 = jit_get_reg(jit_class_gpr);\n    rshi(rn(t0), r1, 24);\n    rshi(rn(t1), r1, 16);\n    rshi(rn(t2), r1,  8);\n    andi(rn(t0), rn(t0), 0xff);\n    andi(rn(t1), rn(t1), 0xff);\n    andi(rn(t2), rn(t2), 0xff);\n    andi(r0, r1, 0xff);\n    lshi(r0, r0, 24);\n    lshi(rn(t1), rn(t1), 8);\n    orr(r0, r0, rn(t0));\n    lshi(rn(t2), rn(t2), 16);\n    orr(r0, r0, rn(t1));\n    orr(r0, r0, rn(t2));\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n}",
      "lines": 26,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ul": {
      "start_point": [
        1717,
        0
      ],
      "end_point": [
        1728,
        1
      ],
      "content": "static void\n_htonr_ul(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    rshi_u(rn(reg), r1, 32);\n    htonr_ui(r0, r1);\n    htonr_ui(rn(reg), rn(reg));\n    lshi(r0, r0, 32);\n    orr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_c": {
      "start_point": [
        1731,
        0
      ],
      "end_point": [
        1740,
        1
      ],
      "content": "static void\n_extr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_mips2_p())\n\tSEB(r0, r1);\n    else {\n\tlshi(r0, r1, __WORDSIZE - 8);\n\trshi(r0, r0, __WORDSIZE - 8);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_s": {
      "start_point": [
        1742,
        0
      ],
      "end_point": [
        1751,
        1
      ],
      "content": "static void\n_extr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (jit_mips2_p())\n\tSEH(r0, r1);\n    else {\n\tlshi(r0, r1, __WORDSIZE - 16);\n\trshi(r0, r0, __WORDSIZE - 16);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_ui": {
      "start_point": [
        1754,
        0
      ],
      "end_point": [
        1759,
        1
      ],
      "content": "static void\n_extr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 32);\n    rshi_u(r0, r0, 32);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti": {
      "start_point": [
        1762,
        0
      ],
      "end_point": [
        1775,
        1
      ],
      "content": "static void\n_lti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (can_sign_extend_short_p(i0))\n\tSLTI(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tltr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti_u": {
      "start_point": [
        1777,
        0
      ],
      "end_point": [
        1790,
        1
      ],
      "content": "static void\n_lti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (can_sign_extend_short_p(i0))\n\tSLTIU(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tltr_u(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler": {
      "start_point": [
        1792,
        0
      ],
      "end_point": [
        1797,
        1
      ],
      "content": "static void\n_ler(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SLT(r0, r2, r1);\n    XORI(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei": {
      "start_point": [
        1799,
        0
      ],
      "end_point": [
        1814,
        1
      ],
      "content": "static void\n_lei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0) {\n\tSLT(r0, _ZERO_REGNO, r1);\n\tXORI(r0, r0, 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tler(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_u": {
      "start_point": [
        1816,
        0
      ],
      "end_point": [
        1821,
        1
      ],
      "content": "static void\n_ler_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SLTU(r0, r2, r1);\n    XORI(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei_u": {
      "start_point": [
        1823,
        0
      ],
      "end_point": [
        1838,
        1
      ],
      "content": "static void\n_lei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0) {\n\tSLTU(r0, _ZERO_REGNO, r1);\n\tXORI(r0, r0, 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tler_u(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr": {
      "start_point": [
        1840,
        0
      ],
      "end_point": [
        1846,
        1
      ],
      "content": "static void\n_eqr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    subr(r0, r1, r2);\n    SLTU(r0, _ZERO_REGNO, r0);\n    XORI(r0, r0, 1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqi": {
      "start_point": [
        1848,
        0
      ],
      "end_point": [
        1858,
        1
      ],
      "content": "static void\n_eqi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0) {\n\tsubi(r0, r1, i0);\n\tSLTU(r0, _ZERO_REGNO, r0);\n    }\n    else\n\tSLTU(r0, _ZERO_REGNO, r1);\n    XORI(r0, r0, 1);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger": {
      "start_point": [
        1860,
        0
      ],
      "end_point": [
        1865,
        1
      ],
      "content": "static void\n_ger(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SLT(r0, r1, r2);\n    XORI(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei": {
      "start_point": [
        1867,
        0
      ],
      "end_point": [
        1876,
        1
      ],
      "content": "static void\n_gei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ger(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_u": {
      "start_point": [
        1878,
        0
      ],
      "end_point": [
        1883,
        1
      ],
      "content": "static void\n_ger_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    SLTU(r0, r1, r2);\n    XORI(r0, r0, 1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei_u": {
      "start_point": [
        1885,
        0
      ],
      "end_point": [
        1894,
        1
      ],
      "content": "static void\n_gei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ger_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti": {
      "start_point": [
        1896,
        0
      ],
      "end_point": [
        1909,
        1
      ],
      "content": "static void\n_gti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0)\n\tSLT(r0, _ZERO_REGNO, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tSLT(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti_u": {
      "start_point": [
        1911,
        0
      ],
      "end_point": [
        1924,
        1
      ],
      "content": "static void\n_gti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0)\n\tSLTU(r0, _ZERO_REGNO, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tSLTU(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        1926,
        0
      ],
      "end_point": [
        1931,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    subr(r0, r1, r2);\n    SLTU(r0, _ZERO_REGNO, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        1933,
        0
      ],
      "end_point": [
        1942,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0) {\n\tsubi(r0, r1, i0);\n\tSLTU(r0, _ZERO_REGNO, r0);\n    }\n    else\n\tSLTU(r0, _ZERO_REGNO, r1);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr": {
      "start_point": [
        1944,
        0
      ],
      "end_point": [
        1958,
        1
      ],
      "content": "static jit_word_t\n_bltr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    SLT(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltr_u": {
      "start_point": [
        1960,
        0
      ],
      "end_point": [
        1974,
        1
      ],
      "content": "static jit_word_t\n_bltr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLTU(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BNE(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti": {
      "start_point": [
        1976,
        0
      ],
      "end_point": [
        2005,
        1
      ],
      "content": "static jit_word_t\n_blti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    jit_bool_t\t\tzero_p;\n\n    if (!(zero_p = i1 == 0))\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_sign_extend_short_p(i1)) {\n\tif (!zero_p)\n\t    SLTI(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 1;\n\tif (!zero_p)\n\t    BNE(rn(reg), _ZERO_REGNO, d);\n\telse\n\t    BLTZ(r0, d);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(reg), i1);\n\tw = bltr(i0, r0, rn(reg));\n    }\n    if (!zero_p)\n\tjit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti_u": {
      "start_point": [
        2007,
        0
      ],
      "end_point": [
        2027,
        1
      ],
      "content": "static jit_word_t\n_blti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_sign_extend_short_p(i1)) {\n\tSLTIU(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(reg), i1);\n\tw = bltr_u(i0, r0, rn(reg));\n    }\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler": {
      "start_point": [
        2029,
        0
      ],
      "end_point": [
        2043,
        1
      ],
      "content": "static jit_word_t\n_bler(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(reg), r1, r0);\n    w = _jit->pc.w;\n    BEQ(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_u": {
      "start_point": [
        2045,
        0
      ],
      "end_point": [
        2059,
        1
      ],
      "content": "static jit_word_t\n_bler_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLTU(rn(reg), r1, r0);\n    w = _jit->pc.w;\n    BEQ(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei": {
      "start_point": [
        2061,
        0
      ],
      "end_point": [
        2080,
        1
      ],
      "content": "static jit_word_t\n_blei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBLEZ(r0, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bler(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei_u": {
      "start_point": [
        2082,
        0
      ],
      "end_point": [
        2101,
        1
      ],
      "content": "static jit_word_t\n_blei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBEQ(r0, _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bler_u(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr": {
      "start_point": [
        2103,
        0
      ],
      "end_point": [
        2113,
        1
      ],
      "content": "static jit_word_t\n_beqr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n\n    w = _jit->pc.w;\n    BEQ(r0, r1, ((i0 - w) >> 2) - 1);\n    NOP(1);\n\n    return (w);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        2115,
        0
      ],
      "end_point": [
        2134,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBEQ(r0, _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = beqr(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger": {
      "start_point": [
        2136,
        0
      ],
      "end_point": [
        2150,
        1
      ],
      "content": "static jit_word_t\n_bger(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BEQ(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_u": {
      "start_point": [
        2152,
        0
      ],
      "end_point": [
        2166,
        1
      ],
      "content": "static jit_word_t\n_bger_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLTU(rn(reg), r0, r1);\n    w = _jit->pc.w;\n    BEQ(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei": {
      "start_point": [
        2168,
        0
      ],
      "end_point": [
        2197,
        1
      ],
      "content": "static jit_word_t\n_bgei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    jit_bool_t\t\tzero_p;\n\n    if (!(zero_p = i1 == 0))\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_sign_extend_short_p(i1)) {\n\tif (!zero_p)\n\t    SLTI(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\td = ((i0 - w) >> 2) - 1;\n\tif (!zero_p)\n\t    BEQ(rn(reg), _ZERO_REGNO, d);\n\telse\n\t    BGEZ(r0, d);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(reg), i1);\n\tw = bger(i0, r0, rn(reg));\n    }\n    if (!zero_p)\n\tjit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei_u": {
      "start_point": [
        2199,
        0
      ],
      "end_point": [
        2219,
        1
      ],
      "content": "static jit_word_t\n_bgei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_sign_extend_short_p(i1)) {\n\tSLTIU(rn(reg), r0, i1);\n\tw = _jit->pc.w;\n\tBEQ(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(reg), i1);\n\tw = bger_u(i0, r0, rn(reg));\n    }\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr": {
      "start_point": [
        2221,
        0
      ],
      "end_point": [
        2235,
        1
      ],
      "content": "static jit_word_t\n_bgtr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(reg), r1, r0);\n    w = _jit->pc.w;\n    BNE(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_u": {
      "start_point": [
        2237,
        0
      ],
      "end_point": [
        2251,
        1
      ],
      "content": "static jit_word_t\n_bgtr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLTU(rn(reg), r1, r0);\n    w = _jit->pc.w;\n    BNE(rn(reg), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(reg);\n\n    return (w);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti": {
      "start_point": [
        2253,
        0
      ],
      "end_point": [
        2272,
        1
      ],
      "content": "static jit_word_t\n_bgti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBGTZ(r0, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bgtr(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti_u": {
      "start_point": [
        2274,
        0
      ],
      "end_point": [
        2293,
        1
      ],
      "content": "static jit_word_t\n_bgti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBNE(r0, _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bgtr_u(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner": {
      "start_point": [
        2295,
        0
      ],
      "end_point": [
        2305,
        1
      ],
      "content": "static jit_word_t\n_bner(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n\n    w = _jit->pc.w;\n    BNE(r0, r1, ((i0 - w) >> 2) - 1);\n    NOP(1);\n\n    return (w);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        2307,
        0
      ],
      "end_point": [
        2326,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    if (i1 == 0) {\n\tw = _jit->pc.w;\n\tBNE(r0, _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bner(i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpr": {
      "start_point": [
        2328,
        0
      ],
      "end_point": [
        2333,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    JR(r0);\n    NOP(1);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        2335,
        0
      ],
      "end_point": [
        2354,
        1
      ],
      "content": "static jit_word_t\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n\n    w = _jit->pc.w;\n    if (((w + sizeof(jit_int32_t)) & 0xf0000000) == (i0 & 0xf0000000)) {\n\tJ((i0 & ~0xf0000000) >> 2);\n\tNOP(1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi_p(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    return (w);\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr": {
      "start_point": [
        2356,
        0
      ],
      "end_point": [
        2382,
        1
      ],
      "content": "static jit_word_t\n_boaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    /* t1 = r0 + r1;\toverflow = r1 < 0 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(t0), r1, _ZERO_REGNO);\t/* t0 = r1 < 0 */\n    addr(rn(t1), r0, r1);\t\t/* t1 = r0 + r1 */\n    SLT(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    SLT(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    MOVZ(rn(t1), rn(t2), rn(t0));\t/* if (r0 == 0) t1 = t2 */\n    w = _jit->pc.w;\n    BNE(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    addr(r0, r0, r1);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n\n    return (w);\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi": {
      "start_point": [
        2384,
        0
      ],
      "end_point": [
        2416,
        1
      ],
      "content": "static jit_word_t\n_boaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    if (can_sign_extend_short_p(i1)) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tSLTI(rn(t0), _ZERO_REGNO, i1);\n\taddiu(rn(t1), r0, i1);\n\tSLT(rn(t2), r0, rn(t1));\n\tSLT(rn(t1), rn(t1), r0);\n\tMOVZ(rn(t1), rn(t2), rn(t0));\n\tw = _jit->pc.w;\n\tBNE(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\taddiu(r0, r0, i1);\n\tjit_unget_reg(t2);\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr);\n\tmovi(rn(t0), i1);\n\tw = boaddr(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr_u": {
      "start_point": [
        2418,
        0
      ],
      "end_point": [
        2436,
        1
      ],
      "content": "static jit_word_t\n_boaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addr(rn(t0), r0, r1);\n    SLTU(rn(t1), rn(t0), r0);\n    w = _jit->pc.w;\n    BNE(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    movr(r0, rn(t0));\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi_u": {
      "start_point": [
        2438,
        0
      ],
      "end_point": [
        2464,
        1
      ],
      "content": "static jit_word_t\n_boaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    if (can_sign_extend_short_p(i0)) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\taddiu(rn(t0), r0, i1);\n\tSLTU(rn(t1), rn(t0), r0);\n\tw = _jit->pc.w;\n\tBNE(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = boaddr_u(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr": {
      "start_point": [
        2466,
        0
      ],
      "end_point": [
        2492,
        1
      ],
      "content": "static jit_word_t\n_bxaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    /* t1 = r0 + r1;\toverflow = r1 < 0 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(t0), r1, _ZERO_REGNO);\t/* t0 = r1 < 0 */\n    addr(rn(t1), r0, r1);\t\t/* t1 = r0 + r1 */\n    SLT(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    SLT(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    MOVZ(rn(t1), rn(t2), rn(t0));\t/* if (r0 == 0) t1 = t2 */\n    w = _jit->pc.w;\n    BEQ(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    addr(r0, r0, r1);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n\n    return (w);\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi": {
      "start_point": [
        2494,
        0
      ],
      "end_point": [
        2526,
        1
      ],
      "content": "static jit_word_t\n_bxaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    if (can_sign_extend_short_p(i1)) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tSLTI(rn(t0), _ZERO_REGNO, i1);\n\taddiu(rn(t1), r0, i1);\n\tSLT(rn(t2), r0, rn(t1));\n\tSLT(rn(t1), rn(t1), r0);\n\tMOVZ(rn(t1), rn(t2), rn(t0));\n\tw = _jit->pc.w;\n\tBEQ(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\taddiu(r0, r0, i1);\n\tjit_unget_reg(t2);\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bxaddr(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr_u": {
      "start_point": [
        2528,
        0
      ],
      "end_point": [
        2546,
        1
      ],
      "content": "static jit_word_t\n_bxaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    addr(rn(t0), r0, r1);\n    SLTU(rn(t1), rn(t0), r0);\n    w = _jit->pc.w;\n    BEQ(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    movr(r0, rn(t0));\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi_u": {
      "start_point": [
        2548,
        0
      ],
      "end_point": [
        2574,
        1
      ],
      "content": "static jit_word_t\n_bxaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    if (can_sign_extend_short_p(i0)) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\taddiu(rn(t0), r0, i1);\n\tSLTU(rn(t1), rn(t0), r0);\n\tw = _jit->pc.w;\n\tBEQ(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bxaddr_u(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr": {
      "start_point": [
        2576,
        0
      ],
      "end_point": [
        2602,
        1
      ],
      "content": "static jit_word_t\n_bosubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    /* t1 = r0 - r1;\toverflow = 0 < r1 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(t0), _ZERO_REGNO, r1);\t/* t0 = 0 < r1 */\n    subr(rn(t1), r0, r1);\t\t/* t1 = r0 - r1 */\n    SLT(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    SLT(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    MOVZ(rn(t1), rn(t2), rn(t0));\t/* if (r0 == 0) t1 = t2 */\n    w = _jit->pc.w;\n    BNE(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    subr(r0, r0, r1);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n\n    return (w);\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi": {
      "start_point": [
        2604,
        0
      ],
      "end_point": [
        2636,
        1
      ],
      "content": "static jit_word_t\n_bosubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    if (can_sign_extend_short_p(i1) && (i1 & 0xffff) != 0x8000) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tSLTI(rn(t0), _ZERO_REGNO, i1);\n\taddiu(rn(t1), r0, -i1);\n\tSLT(rn(t2), rn(t1), r0);\n\tSLT(rn(t1), r0, rn(t1));\n\tMOVZ(rn(t1), rn(t2), rn(t0));\n\tw = _jit->pc.w;\n\tBNE(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\taddiu(r0, r0, -i1);\n\tjit_unget_reg(t2);\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bosubr(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr_u": {
      "start_point": [
        2638,
        0
      ],
      "end_point": [
        2656,
        1
      ],
      "content": "static jit_word_t\n_bosubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subr(rn(t0), r0, r1);\n    SLTU(rn(t1), r0, rn(t0));\n    w = _jit->pc.w;\n    BNE(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    movr(r0, rn(t0));\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi_u": {
      "start_point": [
        2658,
        0
      ],
      "end_point": [
        2684,
        1
      ],
      "content": "static jit_word_t\n_bosubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    if (can_sign_extend_short_p(i0) && (i0 & 0xffff) != 0x8000) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\taddiu(rn(t0), r0, -i1);\n\tSLTU(rn(t1), r0, rn(t0));\n\tw = _jit->pc.w;\n\tBNE(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bosubr_u(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr": {
      "start_point": [
        2686,
        0
      ],
      "end_point": [
        2712,
        1
      ],
      "content": "static jit_word_t\n_bxsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    /* t1 = r0 - r1;\toverflow = 0 < r1 ? r0 < t1 : t1 < r0 */\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    SLT(rn(t0), _ZERO_REGNO, r1);\t/* t0 = 0 < r1 */\n    subr(rn(t1), r0, r1);\t\t/* t1 = r0 - r1 */\n    SLT(rn(t2), rn(t1), r0);\t\t/* t2 = t1 < r0 */\n    SLT(rn(t1), r0, rn(t1));\t\t/* t1 = r0 < t1 */\n    MOVZ(rn(t1), rn(t2), rn(t0));\t/* if (t0 == 0) t1 = t2 */\n    w = _jit->pc.w;\n    BEQ(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    subr(r0, r0, r1);\n    jit_unget_reg(t2);\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n\n    return (w);\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi": {
      "start_point": [
        2714,
        0
      ],
      "end_point": [
        2746,
        1
      ],
      "content": "static jit_word_t\n_bxsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n    jit_int32_t\t\tt2;\n\n    if (can_sign_extend_short_p(i1) && (i1 & 0xffff) != 0x8000) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt2 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tSLTI(rn(t0), _ZERO_REGNO, i1);\n\taddiu(rn(t1), r0, -i1);\n\tSLT(rn(t2), rn(t1), r0);\n\tSLT(rn(t1), r0, rn(t1));\n\tMOVZ(rn(t1), rn(t2), rn(t0));\n\tw = _jit->pc.w;\n\tBEQ(rn(t1), _ZERO_REGNO, ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\taddiu(r0, r0, -i1);\n\tjit_unget_reg(t2);\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bxsubr(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr_u": {
      "start_point": [
        2748,
        0
      ],
      "end_point": [
        2766,
        1
      ],
      "content": "static jit_word_t\n_bxsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    t1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    subr(rn(t0), r0, r1);\n    SLTU(rn(t1), r0, rn(t0));\n    w = _jit->pc.w;\n    BEQ(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n    /* delay slot */\n    movr(r0, rn(t0));\n    jit_unget_reg(t1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi_u": {
      "start_point": [
        2768,
        0
      ],
      "end_point": [
        2794,
        1
      ],
      "content": "static jit_word_t\n_bxsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    jit_int32_t\t\tt1;\n\n    if (can_sign_extend_short_p(i0) && (i0 & 0xffff) != 0x8000) {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tt1 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\taddiu(rn(t0), r0, -i1);\n\tSLTU(rn(t1), r0, rn(t0));\n\tw = _jit->pc.w;\n\tBEQ(_ZERO_REGNO, rn(t1), ((i0 - w) >> 2) - 1);\n\t/* delay slot */\n\tmovr(r0, rn(t0));\n\tjit_unget_reg(t1);\n\tjit_unget_reg(t0);\n    }\n    else {\n\tt0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(t0), i1);\n\tw = bxsubr_u(i0, r0, rn(t0));\n\tjit_unget_reg(t0);\n    }\n    return (w);\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsr": {
      "start_point": [
        2796,
        0
      ],
      "end_point": [
        2808,
        1
      ],
      "content": "static jit_word_t\n_bmsr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    AND(rn(t0), r0, r1);\n    w = _jit->pc.w;\n    BNE(_ZERO_REGNO, rn(t0), ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsi": {
      "start_point": [
        2810,
        0
      ],
      "end_point": [
        2828,
        1
      ],
      "content": "static jit_word_t\n_bmsi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_zero_extend_short_p(i1)) {\n\tANDI(rn(t0), r0, i1);\n\tw = _jit->pc.w;\n\tBNE(_ZERO_REGNO, rn(t0), ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(t0), i1);\n\tw = bmsr(i0, r0, rn(t0));\n    }\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmcr": {
      "start_point": [
        2830,
        0
      ],
      "end_point": [
        2842,
        1
      ],
      "content": "static jit_word_t\n_bmcr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    AND(rn(t0), r0, r1);\n    w = _jit->pc.w;\n    BEQ(_ZERO_REGNO, rn(t0), ((i0 - w) >> 2) - 1);\n    NOP(1);\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmci": {
      "start_point": [
        2844,
        0
      ],
      "end_point": [
        2862,
        1
      ],
      "content": "static jit_word_t\n_bmci(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    if (can_zero_extend_short_p(i1)) {\n\tANDI(rn(t0), r0, i1);\n\tw = _jit->pc.w;\n\tBEQ(_ZERO_REGNO, rn(t0), ((i0 - w) >> 2) - 1);\n\tNOP(1);\n    }\n    else {\n\tmovi(rn(t0), i1);\n\tw = bmcr(i0, r0, rn(t0));\n    }\n    jit_unget_reg(t0);\n    return (w);\n}",
      "lines": 19,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        2864,
        0
      ],
      "end_point": [
        2871,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (r0 != _T9_REGNO)\n\tmovr(_T9_REGNO, r0);\n    JALR(r0);\n    NOP(1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        2873,
        0
      ],
      "end_point": [
        2879,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    movi(_T9_REGNO, i0);\n    JALR(_T9_REGNO);\n    NOP(1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        2881,
        0
      ],
      "end_point": [
        2892,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tword;\n\n    word = _jit->pc.w;\n    movi_p(_T9_REGNO, i0);\n    JALR(_T9_REGNO);\n    NOP(1);\n\n    return (word);\n}",
      "lines": 12,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        2905,
        0
      ],
      "end_point": [
        2973,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\tindex;\n    jit_int32_t\t\toffset;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -8;\n#if NEW_ABI\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t      /* align stack at 16 bytes */\n\t\t\t       _jitc->function->self.aoff) + 15) & -16;\n#else\n    _jitc->function->stack = ((/* first 16 bytes must be allocated */\n\t\t\t      (_jitc->function->self.alen > 16 ?\n\t\t\t       _jitc->function->self.alen : 16) -\n\t\t\t      /* align stack at 8 bytes */\n\t\t\t      _jitc->function->self.aoff) + 7) & -8;\n#endif\n    /* callee save registers */\n#if NEW_ABI\n    if ((_jitc->function->self.call & jit_call_varargs) &&\n\tjit_arg_reg_p(_jitc->function->vagp))\n\tsubi(_SP_REGNO, _SP_REGNO, stack_framesize + 64);\n    else\n#endif\n\tsubi(_SP_REGNO, _SP_REGNO, stack_framesize);\n    offset = stack_framesize - (sizeof(jit_word_t) << 1);\n    for (index = 0; index < jit_size(fregs); index++, offset -= 8) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, fregs[index]))\n\t    stxi_d(offset, _SP_REGNO, rn(fregs[index]));\n    }\n    for (index = 0; index < jit_size(iregs);\n\t index++, offset -= sizeof(jit_word_t)) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, iregs[index]))\n\t    stxi(offset, _SP_REGNO, rn(iregs[index]));\n    }\n    assert(offset >= sizeof(jit_word_t));\n    stxi(offset, _SP_REGNO, _RA_REGNO);\n    stxi(0, _SP_REGNO, _BP_REGNO);\n    movr(_BP_REGNO, _SP_REGNO);\n\n    /* alloca */\n    if (_jitc->function->stack)\n\tsubi(_SP_REGNO, _SP_REGNO, _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\tindex = jit_get_reg(jit_class_gpr);\n\tmovi(rn(index), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _BP_REGNO, rn(index));\n\tjit_unget_reg(index);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n#if NEW_ABI\n\tindex = _jitc->function->vagp;\n#else\n\tindex = (_jitc->function->self.size - stack_framesize) >> STACK_SHIFT;\n#endif\n\toffset = stack_framesize + index * STACK_SLOT;\n\tfor (; jit_arg_reg_p(index); ++index, offset += STACK_SLOT)\n\t    stxi(offset\t+  WORD_ADJUST, _BP_REGNO, rn(_A0 - index));\n    }\n}",
      "lines": 69,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        2975,
        0
      ],
      "end_point": [
        3006,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\tindex;\n    jit_int32_t\t\toffset;\n    if (_jitc->function->assume_frame)\n\treturn;\n    /* callee save registers */\n    movr(_SP_REGNO, _BP_REGNO);\n    offset = stack_framesize - (sizeof(jit_word_t) << 1);\n    for (index = 0; index < jit_size(fregs); index++, offset -= 8) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, fregs[index]))\n\t    ldxi_d(rn(fregs[index]), _SP_REGNO, offset);\n    }\n    for (index = 0; index < jit_size(iregs);\n\t index++, offset -= sizeof(jit_word_t)) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, iregs[index]))\n\t    ldxi(rn(iregs[index]), _SP_REGNO, offset);\n    }\n    assert(offset >= sizeof(jit_word_t));\n    ldxi(_RA_REGNO, _SP_REGNO, offset);\n    ldxi(_BP_REGNO, _SP_REGNO, 0);\n    JR(_RA_REGNO);\n    /* delay slot */\n#if NEW_ABI\n    if ((_jitc->function->self.call & jit_call_varargs) &&\n\tjit_arg_reg_p(_jitc->function->vagp))\n\taddi(_SP_REGNO, _SP_REGNO, stack_framesize + 64);\n    else\n#endif\n\taddi(_SP_REGNO, _SP_REGNO, stack_framesize);\n}",
      "lines": 32,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        3008,
        0
      ],
      "end_point": [
        3020,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n    /* Initialize va_list to the first stack argument. */\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->vagp))\n\taddi(r0, _BP_REGNO, stack_framesize + _jitc->function->vagp *\n\t     sizeof(jit_word_t));\n    else\n#endif\n\taddi(r0, _BP_REGNO, _jitc->function->self.size);\n}",
      "lines": 13,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        3022,
        0
      ],
      "end_point": [
        3034,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Load argument. */\n#if WORD_ADJUST\n    ldxi(r0, r1, WORD_ADJUST);\n#else\n    ldr(r0, r1);\n#endif\n\n    /* Update va_list. */\n    addi(r1, r1, STACK_SLOT);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_abs": {
      "start_point": [
        3036,
        0
      ],
      "end_point": [
        3075,
        1
      ],
      "content": "static void\n_patch_abs(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_instr_t\t\ti;\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n\n    u.w = instr;\n#if __WORDSIZE == 32\n    i.op = u.i[0];\n    assert(i.hc.b == MIPS_LUI);\n    i.is.b = label >> 16;\n    u.i[0] = i.op;\n    i.op = u.i[1];\n    assert(i.hc.b == MIPS_ORI);\n    i.is.b = label;\n    u.i[1] = i.op;\n#else\n    i.op = u.i[0];\n    assert(i.hc.b == MIPS_LUI);\n    i.is.b = label >> 48;\n    u.i[0] = i.op;\n    i.op = u.i[1];\n    assert(i.hc.b == MIPS_ORI);\n    i.is.b = label >> 32;\n    u.i[1] = i.op;\n    /* lshi */\n    i.op = u.i[3];\n    assert(i.hc.b == MIPS_ORI);\n    i.is.b = label >> 16;\n    u.i[3] = i.op;\n    /* lshi */\n    i.op = u.i[5];\n    assert(i.hc.b == MIPS_ORI);\n    i.is.b = label;\n    u.i[5] = i.op;\n#endif\n}",
      "lines": 40,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        3077,
        0
      ],
      "end_point": [
        3146,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_instr_t\t\ti;\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n\n    u.w = instr;\n    i.op = u.i[0];\n    switch (i.hc.b) {\n\t/* 16 bit immediate opcodes */\n\tcase MIPS_REGIMM:\n\t    switch (i.rt.b) {\n\t\tcase MIPS_BLTZ:\t\tcase MIPS_BLTZL:\n\t\tcase MIPS_BLTZAL:\tcase MIPS_BLTZALL:\n\t\tcase MIPS_BGEZ:\t\tcase MIPS_BGEZAL:\n\t\tcase MIPS_BGEZALL:\tcase MIPS_BGEZL:\n\t\tcase MIPS_TEQI:\t\tcase MIPS_TGEI:\n\t\tcase MIPS_TGEIU:\tcase MIPS_TLTI:\n\t\tcase MIPS_TLTIU:\tcase MIPS_TNEI:\n\t\t    i.is.b = ((label - instr) >> 2) - 1;\n\t\t    u.i[0] = i.op;\n\t\t    break;\n\t\tdefault:\n\t\t    assert(!\"unhandled branch opcode\");\n\t\t    break;\n\t    }\n\t    break;\n\n\tcase MIPS_COP1:\t\t\tcase MIPS_COP2:\n\t    assert(i.rs.b == MIPS_BC);\n\t    switch (i.rt.b) {\n\t\tcase MIPS_BCF:\t\tcase MIPS_BCFL:\n\t\tcase MIPS_BCT:\t\tcase MIPS_BCTL:\n\t\t    i.is.b = ((label - instr) >> 2) - 1;\n\t\t    u.i[0] = i.op;\n\t\t    break;\n\t\tdefault:\n\t\t    assert(!\"unhandled branch opcode\");\n\t\t    break;\n\t    }\n\t    break;\n\n\tcase MIPS_BLEZ:\t\t\tcase MIPS_BLEZL:\n\tcase MIPS_BEQ:\t\t\tcase MIPS_BEQL:\n\tcase MIPS_BGTZ:\t\t\tcase MIPS_BGTZL:\n\tcase MIPS_BNE:\t\t\tcase MIPS_BNEL:\n\t    i.is.b = ((label - instr) >> 2) - 1;\n\t    u.i[0] = i.op;\n\t    break;\n\n\tcase MIPS_LUI:\n\t    patch_abs(instr, label);\n\t    break;\n\n\tcase MIPS_J:\t\t\tcase MIPS_JAL:\n\tcase MIPS_JALX:\n\t    assert(((instr + sizeof(jit_int32_t)) & 0xf0000000) ==\n\t\t   (label & 0xf0000000));\n\t    i.ii.b = (label & ~0xf0000000) >> 2;\n\t    u.i[0] = i.op;\n\t    break;\n\n\tdefault:\n\t    assert(!\"unhandled branch opcode\");\n\t    break;\n    }\n}",
      "lines": 70,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_mips-fpu.c": {
    "_c_cond_fmt": {
      "start_point": [
        549,
        0
      ],
      "end_point": [
        560,
        1
      ],
      "content": "static void\n_c_cond_fmt(jit_state_t *_jit, jit_int32_t fm,\n\t    jit_int32_t ft, jit_int32_t fs, jit_int32_t cc)\n{\n    jit_instr_t\t\ti;\n    i.cc.b = cc;\n    i.fs.b = fs;\n    i.ft.b = ft;\n    i.fm.b = fm;\n    i.hc.b = MIPS_COP1;\n    ii(i.op);\n}",
      "lines": 12,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f_w": {
      "start_point": [
        596,
        0
      ],
      "end_point": [
        608,
        1
      ],
      "content": "fopi(div)\n\nstatic void\n_movi_f_w(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n\n    data.f = *i0;\n    movi(r0, data.i);\n}",
      "lines": 13,
      "depth": 7,
      "decorators": [
        "fopi(div)",
        "fopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_extr_f": {
      "start_point": [
        610,
        0
      ],
      "end_point": [
        623,
        1
      ],
      "content": "static void\n_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n#  if __WORDSIZE == 32\n    MTC1(r1, rn(t0));\n    CVT_S_W(r0, rn(t0));\n#  else\n    DMTC1(r1, rn(t0));\n    CVT_S_L(r0, rn(t0));\n#  endif\n    jit_unget_reg(t0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_f_i": {
      "start_point": [
        625,
        0
      ],
      "end_point": [
        633,
        1
      ],
      "content": "static void\n_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n    TRUNC_W_S(rn(t0), r1);\n    MFC1(r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_f_l": {
      "start_point": [
        636,
        0
      ],
      "end_point": [
        644,
        1
      ],
      "content": "static void\n_truncr_f_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n    TRUNC_L_S(rn(t0), r1);\n    DMFC1(r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        647,
        0
      ],
      "end_point": [
        659,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLWC1(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        661,
        0
      ],
      "end_point": [
        669,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        671,
        0
      ],
      "end_point": [
        683,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tLWC1(r0, i0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        685,
        0
      ],
      "end_point": [
        697,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSWC1(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        699,
        0
      ],
      "end_point": [
        707,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        709,
        0
      ],
      "end_point": [
        721,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tSWC1(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_f(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_f": {
      "start_point": [
        723,
        0
      ],
      "end_point": [
        728,
        1
      ],
      "content": "static void\n_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tMOV_S(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        730,
        0
      ],
      "end_point": [
        752,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\ti;\n\tjit_float32_t\tf;\n    } data;\n    jit_int32_t\t\treg;\n\n    data.f = *i0;\n    if (data.i) {\n\tif (_jitc->no_data) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), data.i);\n\t    MTC1(rn(reg), r0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    ldi_f(r0, (jit_word_t)i0);\n    }\n    else\n\tMTC1(_ZERO_REGNO, r0);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d_w": {
      "start_point": [
        761,
        0
      ],
      "end_point": [
        782,
        1
      ],
      "content": "static void\n_movi_d_w(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    jit_word_t\t\tw;\n    union {\n\tjit_word_t\tw;\n\tjit_float64_t\td;\n    } data;\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\tmovi(r0, data.w);\n    }\n    else {\n\tw = (jit_word_t)i0;\n\tif (can_sign_extend_short_p(w))\n\t    LD(r0, w, _ZERO_REGNO);\n\telse {\n\t    movi(r0, w);\n\t    LD(r0, 0, r0);\n\t}\n    }\n}",
      "lines": 22,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_ww_d": {
      "start_point": [
        785,
        0
      ],
      "end_point": [
        791,
        1
      ],
      "content": "static void\n_movr_ww_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    assert(r1 == r2 - 1);\n    MTC1(r1, r0);\n    MTC1(r2, r0 + 1);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d_ww": {
      "start_point": [
        793,
        0
      ],
      "end_point": [
        799,
        1
      ],
      "content": "static void\n_movr_d_ww(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    assert(r0 == r1 - 1);\n    MFC1(r0, r2);\n    MFC1(r1, r2 + 1);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d_ww": {
      "start_point": [
        801,
        0
      ],
      "end_point": [
        813,
        1
      ],
      "content": "static void\n_movi_d_ww(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_int64_t\tl;\n\tjit_float64_t\td;\n    } data;\n\n    data.d = *i0;\n    movi(r0, data.i[0]);\n    movi(r1, data.i[1]);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        816,
        0
      ],
      "end_point": [
        829,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n#  if __WORDSIZE == 32\n    MTC1(r1, rn(t0));\n    CVT_D_W(r0, rn(t0));\n#  else\n    DMTC1(r1, rn(t0));\n    CVT_D_L(r0, rn(t0));\n#  endif\n    jit_unget_reg(t0);\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_i": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        839,
        1
      ],
      "content": "static void\n_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n    TRUNC_W_D(rn(t0), r1);\n    MFC1(r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_l": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        850,
        1
      ],
      "content": "static void\n_truncr_d_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_fpr);\n    TRUNC_L_D(rn(t0), r1);\n    DMFC1(r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_d": {
      "start_point": [
        853,
        0
      ],
      "end_point": [
        862,
        1
      ],
      "content": "static void\n_ldr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#  if __WORDSIZE == 64 || NEW_ABI\n    LDC1(r0, 0, r1);\n#  else\n    LWC1(r0, 0, r1);\n    LWC1(r0 + 1, 4, r1);\n#  endif\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        864,
        0
      ],
      "end_point": [
        890,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n#  if __WORDSIZE == 64 || NEW_ABI\n    if (can_sign_extend_short_p(i0))\n\tLDC1(r0, i0, _ZERO_REGNO);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLDC1(r0, 0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n#  else\n    if (can_sign_extend_short_p(i0) && can_sign_extend_short_p(i0 + 4)) {\n\tLWC1(r0, i0, _ZERO_REGNO);\n\tLWC1(r0 + 1, i0 + 4, _ZERO_REGNO);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tLWC1(r0, 0, rn(reg));\n\tLWC1(r0 + 1, 4, rn(reg));\n\tjit_unget_reg(reg);\n    }\n#  endif\n}",
      "lines": 27,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        892,
        0
      ],
      "end_point": [
        900,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        902,
        0
      ],
      "end_point": [
        920,
        5
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n#  if __WORDSIZE == 64 || NEW_ABI\n    if (can_sign_extend_short_p(i0))\n\tLDC1(r0, i0, r1);\n#  else\n    if (can_sign_extend_short_p(i0) && can_sign_extend_short_p(i0 + 4)) {\n\tLWC1(r0, i0, r1);\n\tLWC1(r0 + 1, i0 + 4, r1);\n    }\n#  endif\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r1, i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_d": {
      "start_point": [
        923,
        0
      ],
      "end_point": [
        932,
        1
      ],
      "content": "static void\n_str_d(jit_state_t *_jit,jit_int32_t r0, jit_int32_t r1)\n{\n#  if __WORDSIZE == 64 || NEW_ABI\n    SDC1(r1, 0, r0);\n#  else\n    SWC1(r1, 0, r0);\n    SWC1(r1 + 1, 4, r0);\n#  endif\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        934,
        0
      ],
      "end_point": [
        952,
        5
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n#  if __WORDSIZE == 64 || NEW_ABI\n    if (can_sign_extend_short_p(i0))\n\tSDC1(r0, i0, _ZERO_REGNO);\n#  else\n    if (can_sign_extend_short_p(i0) && can_sign_extend_short_p(i0 + 4)) {\n\tSWC1(r0, i0, _ZERO_REGNO);\n\tSWC1(r0 + 1, i0 + 4, _ZERO_REGNO);\n    }\n#  endif\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        955,
        0
      ],
      "end_point": [
        963,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        965,
        0
      ],
      "end_point": [
        983,
        5
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n#  if __WORDSIZE == 64 || NEW_ABI\n    if (can_sign_extend_short_p(i0))\n\tSDC1(r1, i0, r0);\n#  else\n    if (can_sign_extend_short_p(i0) && can_sign_extend_short_p(i0 + 4)) {\n\tSWC1(r1, i0, r0);\n\tSWC1(r1 + 1, i0 + 4, r0);\n    }\n#  endif\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\taddi(rn(reg), r0, i0);\n\tstr_d(rn(reg), r1);\n\tjit_unget_reg(reg);\n    }",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d": {
      "start_point": [
        986,
        0
      ],
      "end_point": [
        991,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tMOV_D(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        993,
        0
      ],
      "end_point": [
        1058,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\ti[2];\n\tjit_int64_t\tl;\n\tjit_float64_t\td;\n    } data;\n    jit_int32_t\t\treg;\n\n    data.d = *i0;\n#  if __WORDSIZE == 64 || NEW_ABI\n    if (data.l) {\n\tif (_jitc->no_data) {\n\t    reg = jit_get_reg(jit_class_gpr);\n#  if __WORDSIZE == 64\n\t    movi(rn(reg), data.l);\n\t    DMTC1(rn(reg), r0);\n#  else\n\t    if (data.i[0]) {\n\t\tmovi(rn(reg), data.i[0]);\n\t\tMTC1(rn(reg), r0);\n\t    }\n\t    else\n\t\tMTC1(_ZERO_REGNO, r0);\n\t    if (data.i[1]) {\n\t\tmovi(rn(reg), data.i[1]);\n\t\tMTC1(rn(reg), r0 + 1);\n\t    }\n\t    else\n\t\tMTC1(_ZERO_REGNO, r0 + 1);\n#  endif\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    ldi_d(r0, (jit_word_t)i0);\n    }\n    else\n\tDMTC1(_ZERO_REGNO, r0);\n#  else\n    if (_jitc->no_data)\n\treg = jit_get_reg(jit_class_gpr);\n    if (data.i[0]) {\n\tif (_jitc->no_data) {\n\t    movi(rn(reg), data.i[0]);\n\t    MTC1(rn(reg), r0);\n\t}\n\telse\n\t    ldi_f(r0, (jit_word_t)i0);\n    }\n    else\n\tMTC1(_ZERO_REGNO, r0);\n    if (data.i[1]) {\n\tif (_jitc->no_data) {\n\t    movi(rn(reg), data.i[1]);\n\t    MTC1(rn(reg), r0 + 1);\n\t}\n\telse\n\t    ldi_f(r0 + 1, ((jit_word_t)i0) + 4);\n    }\n    else\n\tMTC1(_ZERO_REGNO, r0 + 1);\n    if (_jitc->no_data)\n\tjit_unget_reg(reg);\n#  endif\n}",
      "lines": 66,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_f": {
      "start_point": [
        1060,
        0
      ],
      "end_point": [
        1071,
        1
      ],
      "content": "static void\n_ltr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_f": {
      "start_point": [
        1072,
        0
      ],
      "end_point": [
        1085,
        1
      ],
      "content": "fopi(lt)\n\nstatic void\n_ler_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(lt)",
        "fopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_eqr_f": {
      "start_point": [
        1086,
        0
      ],
      "end_point": [
        1099,
        1
      ],
      "content": "fopi(le)\n\nstatic void\n_eqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(le)",
        "fopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ger_f": {
      "start_point": [
        1100,
        0
      ],
      "end_point": [
        1113,
        1
      ],
      "content": "fopi(eq)\n\nstatic void\n_ger_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(eq)",
        "fopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_gtr_f": {
      "start_point": [
        1114,
        0
      ],
      "end_point": [
        1127,
        1
      ],
      "content": "fopi(ge)\n\nstatic void\n_gtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(ge)",
        "fopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ner_f": {
      "start_point": [
        1128,
        0
      ],
      "end_point": [
        1141,
        1
      ],
      "content": "fopi(gt)\n\nstatic void\n_ner_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(gt)",
        "fopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unltr_f": {
      "start_point": [
        1142,
        0
      ],
      "end_point": [
        1155,
        1
      ],
      "content": "fopi(ne)\n\nstatic void\n_unltr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(ne)",
        "fopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unler_f": {
      "start_point": [
        1156,
        0
      ],
      "end_point": [
        1169,
        1
      ],
      "content": "fopi(unlt)\n\nstatic void\n_unler_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(unlt)",
        "fopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_uneqr_f": {
      "start_point": [
        1170,
        0
      ],
      "end_point": [
        1183,
        1
      ],
      "content": "fopi(unle)\n\nstatic void\n_uneqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(unle)",
        "fopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unger_f": {
      "start_point": [
        1184,
        0
      ],
      "end_point": [
        1197,
        1
      ],
      "content": "fopi(uneq)\n\nstatic void\n_unger_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(uneq)",
        "fopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ungtr_f": {
      "start_point": [
        1198,
        0
      ],
      "end_point": [
        1211,
        1
      ],
      "content": "fopi(unge)\n\nstatic void\n_ungtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(unge)",
        "fopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ltgtr_f": {
      "start_point": [
        1212,
        0
      ],
      "end_point": [
        1225,
        1
      ],
      "content": "fopi(ungt)\n\nstatic void\n_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(ungt)",
        "fopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ordr_f": {
      "start_point": [
        1226,
        0
      ],
      "end_point": [
        1239,
        1
      ],
      "content": "fopi(ltgt)\n\nstatic void\n_ordr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(ltgt)",
        "fopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unordr_f": {
      "start_point": [
        1240,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "fopi(ord)\n\nstatic void\n_unordr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fopi(ord)",
        "fopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_bltr_f": {
      "start_point": [
        1254,
        0
      ],
      "end_point": [
        1265,
        1
      ],
      "content": "fopi(unord)\n\nstatic jit_word_t\n_bltr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fopi(unord)",
        "fopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bler_f": {
      "start_point": [
        1266,
        0
      ],
      "end_point": [
        1277,
        1
      ],
      "content": "fbopi(lt)\n\nstatic jit_word_t\n_bler_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(lt)",
        "fbopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_beqr_f": {
      "start_point": [
        1278,
        0
      ],
      "end_point": [
        1289,
        1
      ],
      "content": "fbopi(le)\n\nstatic jit_word_t\n_beqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(le)",
        "fbopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bger_f": {
      "start_point": [
        1290,
        0
      ],
      "end_point": [
        1301,
        1
      ],
      "content": "fbopi(eq)\n\nstatic jit_word_t\n_bger_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(eq)",
        "fbopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bgtr_f": {
      "start_point": [
        1302,
        0
      ],
      "end_point": [
        1313,
        1
      ],
      "content": "fbopi(ge)\n\nstatic jit_word_t\n_bgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(ge)",
        "fbopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bner_f": {
      "start_point": [
        1314,
        0
      ],
      "end_point": [
        1325,
        1
      ],
      "content": "fbopi(gt)\n\nstatic jit_word_t\n_bner_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(gt)",
        "fbopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunltr_f": {
      "start_point": [
        1326,
        0
      ],
      "end_point": [
        1337,
        1
      ],
      "content": "fbopi(ne)\n\nstatic jit_word_t\n_bunltr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(ne)",
        "fbopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunler_f": {
      "start_point": [
        1338,
        0
      ],
      "end_point": [
        1349,
        1
      ],
      "content": "fbopi(unlt)\n\nstatic jit_word_t\n_bunler_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(unlt)",
        "fbopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_buneqr_f": {
      "start_point": [
        1350,
        0
      ],
      "end_point": [
        1361,
        1
      ],
      "content": "fbopi(unle)\n\nstatic jit_word_t\n_buneqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(unle)",
        "fbopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunger_f": {
      "start_point": [
        1362,
        0
      ],
      "end_point": [
        1373,
        1
      ],
      "content": "fbopi(uneq)\n\nstatic jit_word_t\n_bunger_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(uneq)",
        "fbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bungtr_f": {
      "start_point": [
        1374,
        0
      ],
      "end_point": [
        1385,
        1
      ],
      "content": "fbopi(unge)\n\nstatic jit_word_t\n_bungtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(unge)",
        "fbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bltgtr_f": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1397,
        1
      ],
      "content": "fbopi(ungt)\n\nstatic jit_word_t\n_bltgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(ungt)",
        "fbopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bordr_f": {
      "start_point": [
        1398,
        0
      ],
      "end_point": [
        1409,
        1
      ],
      "content": "fbopi(ltgt)\n\nstatic jit_word_t\n_bordr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_S(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(ltgt)",
        "fbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunordr_f": {
      "start_point": [
        1410,
        0
      ],
      "end_point": [
        1421,
        1
      ],
      "content": "fbopi(ord)\n\nstatic jit_word_t\n_bunordr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_S(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "fbopi(ord)",
        "fbopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_ltr_d": {
      "start_point": [
        1422,
        0
      ],
      "end_point": [
        1435,
        1
      ],
      "content": "fbopi(unord)\n\nstatic void\n_ltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "fbopi(unord)",
        "fbopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ler_d": {
      "start_point": [
        1436,
        0
      ],
      "end_point": [
        1449,
        1
      ],
      "content": "dopi(lt)\n\nstatic void\n_ler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(lt)",
        "dopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_eqr_d": {
      "start_point": [
        1450,
        0
      ],
      "end_point": [
        1463,
        1
      ],
      "content": "dopi(le)\n\nstatic void\n_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(le)",
        "dopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ger_d": {
      "start_point": [
        1464,
        0
      ],
      "end_point": [
        1477,
        1
      ],
      "content": "dopi(eq)\n\nstatic void\n_ger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(eq)",
        "dopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_gtr_d": {
      "start_point": [
        1478,
        0
      ],
      "end_point": [
        1491,
        1
      ],
      "content": "dopi(ge)\n\nstatic void\n_gtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(ge)",
        "dopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ner_d": {
      "start_point": [
        1492,
        0
      ],
      "end_point": [
        1505,
        1
      ],
      "content": "dopi(gt)\n\nstatic void\n_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(gt)",
        "dopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unltr_d": {
      "start_point": [
        1506,
        0
      ],
      "end_point": [
        1519,
        1
      ],
      "content": "dopi(ne)\n\nstatic void\n_unltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(ne)",
        "dopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unler_d": {
      "start_point": [
        1520,
        0
      ],
      "end_point": [
        1533,
        1
      ],
      "content": "dopi(unlt)\n\nstatic void\n_unler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(unlt)",
        "dopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        1534,
        0
      ],
      "end_point": [
        1547,
        1
      ],
      "content": "dopi(unle)\n\nstatic void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(unle)",
        "dopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unger_d": {
      "start_point": [
        1548,
        0
      ],
      "end_point": [
        1561,
        1
      ],
      "content": "dopi(uneq)\n\nstatic void\n_unger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(uneq)",
        "dopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ungtr_d": {
      "start_point": [
        1562,
        0
      ],
      "end_point": [
        1575,
        1
      ],
      "content": "dopi(unge)\n\nstatic void\n_ungtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(unge)",
        "dopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        1576,
        0
      ],
      "end_point": [
        1589,
        1
      ],
      "content": "dopi(ungt)\n\nstatic void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(ungt)",
        "dopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_ordr_d": {
      "start_point": [
        1590,
        0
      ],
      "end_point": [
        1603,
        1
      ],
      "content": "dopi(ltgt)\n\nstatic void\n_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(ltgt)",
        "dopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_unordr_d": {
      "start_point": [
        1604,
        0
      ],
      "end_point": [
        1617,
        1
      ],
      "content": "dopi(ord)\n\nstatic void\n_unordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(0);\n    /* delay slot */\n    movi(r0, 1);\n    movi(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "dopi(ord)",
        "dopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_bltr_d": {
      "start_point": [
        1618,
        0
      ],
      "end_point": [
        1629,
        1
      ],
      "content": "dopi(unord)\n\nstatic jit_word_t\n_bltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dopi(unord)",
        "dopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bler_d": {
      "start_point": [
        1630,
        0
      ],
      "end_point": [
        1641,
        1
      ],
      "content": "dbopi(lt)\n\nstatic jit_word_t\n_bler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(lt)",
        "dbopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_beqr_d": {
      "start_point": [
        1642,
        0
      ],
      "end_point": [
        1653,
        1
      ],
      "content": "dbopi(le)\n\nstatic jit_word_t\n_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(le)",
        "dbopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bger_d": {
      "start_point": [
        1654,
        0
      ],
      "end_point": [
        1665,
        1
      ],
      "content": "dbopi(eq)\n\nstatic jit_word_t\n_bger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(eq)",
        "dbopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bgtr_d": {
      "start_point": [
        1666,
        0
      ],
      "end_point": [
        1677,
        1
      ],
      "content": "dbopi(ge)\n\nstatic jit_word_t\n_bgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(ge)",
        "dbopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bner_d": {
      "start_point": [
        1678,
        0
      ],
      "end_point": [
        1689,
        1
      ],
      "content": "dbopi(gt)\n\nstatic jit_word_t\n_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_EQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(gt)",
        "dbopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunltr_d": {
      "start_point": [
        1690,
        0
      ],
      "end_point": [
        1701,
        1
      ],
      "content": "dbopi(ne)\n\nstatic jit_word_t\n_bunltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(ne)",
        "dbopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunler_d": {
      "start_point": [
        1702,
        0
      ],
      "end_point": [
        1713,
        1
      ],
      "content": "dbopi(unlt)\n\nstatic jit_word_t\n_bunler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_ULE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(unlt)",
        "dbopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_buneqr_d": {
      "start_point": [
        1714,
        0
      ],
      "end_point": [
        1725,
        1
      ],
      "content": "dbopi(unle)\n\nstatic jit_word_t\n_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(unle)",
        "dbopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunger_d": {
      "start_point": [
        1726,
        0
      ],
      "end_point": [
        1737,
        1
      ],
      "content": "dbopi(uneq)\n\nstatic jit_word_t\n_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLT_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(uneq)",
        "dbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bungtr_d": {
      "start_point": [
        1738,
        0
      ],
      "end_point": [
        1749,
        1
      ],
      "content": "dbopi(unge)\n\nstatic jit_word_t\n_bungtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_OLE_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(unge)",
        "dbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bltgtr_d": {
      "start_point": [
        1750,
        0
      ],
      "end_point": [
        1761,
        1
      ],
      "content": "dbopi(ungt)\n\nstatic jit_word_t\n_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UEQ_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(ungt)",
        "dbopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bordr_d": {
      "start_point": [
        1762,
        0
      ],
      "end_point": [
        1773,
        1
      ],
      "content": "dbopi(ltgt)\n\nstatic jit_word_t\n_bordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_D(r1, r2);\n    w = _jit->pc.w;\n    BC1F(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(ltgt)",
        "dbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_bunordr_d": {
      "start_point": [
        1774,
        0
      ],
      "end_point": [
        1785,
        1
      ],
      "content": "dbopi(ord)\n\nstatic jit_word_t\n_bunordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    C_UN_D(r1, r2);\n    w = _jit->pc.w;\n    BC1T(((i0 - w) >> 2) - 1);\n    NOP(1);\n    return (w);\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "dbopi(ord)",
        "dbopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1786,
        0
      ],
      "end_point": [
        1808,
        1
      ],
      "content": "dbopi(unord)\n\nstatic void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if !NEW_ABI\n    jit_int32_t\t\treg;\n#endif\n    assert(_jitc->function->self.call & jit_call_varargs);\n#if !NEW_ABI\n    /* Align, if required. */\n    reg = jit_get_reg(jit_class_gpr);\n    andi(rn(reg), r1, 7);\n    addr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n#endif\n\n    /* Load argument. */\n    ldr_d(r0, r1);\n\n    /* Update va_list. */\n    addi(r1, r1, sizeof(jit_float64_t));\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "dbopi(unord)",
        "dbopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_mips-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_mips.c": {
    "jit_get_cpu": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        157,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        159,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n/* Could also:\n *\to reserve a register for carry\t(overkill)\n *\to use MTLO/MFLO\t\t\t(performance hit)\n * So, keep a register allocated after setting carry, and implicitly\n * deallocate it if it can no longer be tracked\n */\n    jit_carry = _NOREG;\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        172,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.aoff = _jitc->function->self.alen = 0;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 40,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        213,
        0
      ],
      "end_point": [
        229,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        231,
        0
      ],
      "end_point": [
        250,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -8);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        252,
        0
      ],
      "end_point": [
        262,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        264,
        0
      ],
      "end_point": [
        274,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        276,
        0
      ],
      "end_point": [
        283,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        285,
        0
      ],
      "end_point": [
        295,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (JIT_FRET != u)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        297,
        0
      ],
      "end_point": [
        304,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        306,
        0
      ],
      "end_point": [
        316,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (JIT_FRET != u)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        318,
        0
      ],
      "end_point": [
        325,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        327,
        0
      ],
      "end_point": [
        334,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        336,
        0
      ],
      "end_point": [
        347,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n#if NEW_ABI\n    return (jit_arg_reg_p(u->u.w));\n#else\n    return (u->u.w < 8);\n#endif\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_make_arg": {
      "start_point": [
        349,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "content": "static jit_node_t *\n_jit_make_arg(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += STACK_SLOT;\n    }\n#else\n    offset = (_jitc->function->self.size - stack_framesize) >> STACK_SHIFT;\n    _jitc->function->self.argi = 1;\n    if (offset >= 4)\n\toffset = _jitc->function->self.size;\n    _jitc->function->self.size += STACK_SLOT;\n#endif\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 27,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_jit_make_arg(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_make_arg_f": {
      "start_point": [
        377,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "content": "static jit_node_t *\n_jit_make_arg_f(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n\tif (_jitc->function->self.call & jit_call_varargs)\n\t    offset += 8;\n    }\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += STACK_SLOT;\n    }\n#else\n    offset = (_jitc->function->self.size - stack_framesize) >> STACK_SHIFT;\n    if (offset < NUM_WORD_ARGS) {\n\tif (!_jitc->function->self.argi &&\n\t    !(_jitc->function->self.call & jit_call_varargs)) {\n\t    if (offset == 0)\n\t\toffset = 4;\n\t    else {\n\t\toffset = 6;\n\t\t_jitc->function->self.argi = 1;\n\t    }\n\t    /* Use as flag to rewind in case of varargs function */\n\t    ++_jitc->function->self.argf;\n\t}\n    }\n    else\n\toffset = _jitc->function->self.size;\n    _jitc->function->self.size += STACK_SLOT;\n#endif\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg_f);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 42,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_jit_make_arg_f(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_make_arg_d": {
      "start_point": [
        420,
        0
      ],
      "end_point": [
        460,
        1
      ],
      "content": "static jit_node_t *\n_jit_make_arg_d(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t offset;\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n\tif (_jitc->function->self.call & jit_call_varargs)\n\t    offset += 8;\n    }\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += STACK_SLOT;\n    }\n#else\n    if (_jitc->function->self.size & 7) {\n\t_jitc->function->self.size += 4;\n\t_jitc->function->self.argi = 1;\n    }\n    offset = (_jitc->function->self.size - stack_framesize) >> STACK_SHIFT;\n    if (offset < NUM_WORD_ARGS) {\n\tif (!_jitc->function->self.argi &&\n\t    !(_jitc->function->self.call & jit_call_varargs)) {\n\t    offset += 4;\n\t    /* Use as flag to rewind in case of varargs function */\n\t    ++_jitc->function->self.argf;\n\t}\n    }\n    else\n\toffset = _jitc->function->self.size;\n    _jitc->function->self.size += sizeof(jit_float64_t);\n#endif\n    if (node == (jit_node_t *)0)\n\tnode = jit_new_node(jit_code_arg_d);\n    else\n\tlink_node(node);\n    node->u.w = offset;\n    node->v.w = ++_jitc->function->self.argn;\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 41,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_jit_make_arg_d(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        462,
        0
      ],
      "end_point": [
        494,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    if (_jitc->prepare) {\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n#if !NEW_ABI\n\tif (_jitc->function->call.argf)\n\t    rewind_prepare();\n#endif\n    }\n    else {\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n#if NEW_ABI\n\t/* If varargs start in a register, allocate extra 64 bytes. */\n\tif (jit_arg_reg_p(_jitc->function->self.argi))\n\t    rewind_prolog();\n\t/* Do not set during possible rewind. */\n\t_jitc->function->self.call |= jit_call_varargs;\n#else\n\t_jitc->function->self.call |= jit_call_varargs;\n\tif (_jitc->function->self.argf)\n\t    rewind_prolog();\n#endif\n\t_jitc->function->vagp = _jitc->function->self.argi;\n    }\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare)\n\tjit_link_prepare();\n    else\n\tjit_link_prolog();\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        496,
        0
      ],
      "end_point": [
        501,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        503,
        0
      ],
      "end_point": [
        508,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg_f((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        510,
        0
      ],
      "end_point": [
        515,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    return (jit_make_arg_d((jit_node_t*)0));\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        517,
        0
      ],
      "end_point": [
        527,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_c(u, _FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        529,
        0
      ],
      "end_point": [
        539,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_uc(u, _FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        541,
        0
      ],
      "end_point": [
        551,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_s(u, _FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        553,
        0
      ],
      "end_point": [
        563,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_us(u, _FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        565,
        0
      ],
      "end_point": [
        580,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w)) {\n#if __WORDSIZE == 64\n\tjit_extr_i(u, _A0 - v->u.w);\n#else\n\tjit_movr(u, _A0 - v->u.w);\n#endif\n    }\n    else\n\tjit_ldxi_i(u, _FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        583,
        0
      ],
      "end_point": [
        593,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_ui(u, _FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        595,
        0
      ],
      "end_point": [
        605,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, _A0 - v->u.w);\n    else\n\tjit_ldxi_l(u, _FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        608,
        0
      ],
      "end_point": [
        618,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    jit_inc_synth_wp(putargr, u, v);\n    assert(v->code == jit_code_arg);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(_A0 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, _FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        620,
        0
      ],
      "end_point": [
        635,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(_A0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, _FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        637,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_f(u, _F12 - v->u.w);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_w_f(u, _A0 - v->u.w - 8);\n#else\n    if (v->u.w < 4)\n\tjit_movr_w_f(u, _A0 - v->u.w);\n    else if (v->u.w < 8)\n\tjit_movr_f(u, _F12 - ((v->u.w - 4) >> 1));\n#endif\n    else\n\tjit_ldxi_f(u, _FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        658,
        0
      ],
      "end_point": [
        677,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_f(_F12 - v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_f_w(_A0 - v->u.w - 8, u);\n#else\n    if (v->u.w < 4)\n\tjit_movr_f_w(_A0 - v->u.w, u);\n    else if (v->u.w < 8)\n\tjit_movr_f(_F12 - ((v->u.w - 4) >> 1), u);\n#endif\n    else\n\tjit_stxi_f(v->u.w, _FP, u);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        679,
        0
      ],
      "end_point": [
        711,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_f(_F12 - v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8)) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_movr_f_w(_A0 - v->u.w - 8, u);\n\tjit_unget_reg(regno);\n    }\n#else\n    if (v->u.w < 4) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_movr_f_w(_A0 - ((v->u.w - 4) >> 1), regno);\n\tjit_unget_reg(regno);\n    }\n    else if (v->u.w < 8)\n\tjit_movi_f(_F12 - ((v->u.w - 4) >> 1), u);\n#endif\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, _FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        713,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_d(u, _F12 - v->u.w);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_d_w(_A0 - v->u.w - 8, u);\n#else\n    if (v->u.w < 4)\n\tjit_movr_ww_d(u, _A0 - v->u.w, _A0 - (v->u.w + 1));\n    else if (v->u.w < 8)\n\tjit_movr_d(u, _F12 - ((v->u.w - 4) >> 1));\n#endif\n    else\n\tjit_ldxi_d(u, _FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        734,
        0
      ],
      "end_point": [
        753,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_d(_F12 - v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8))\n\tjit_movr_d_w(_A0 - v->u.w - 8, u);\n#else\n    if (v->u.w < 4)\n\tjit_movr_d_ww(_A0 - v->u.w, _A0 - (v->u.w + 1), u);\n    else if (v->u.w < 8)\n\tjit_movr_d(_F12 - ((v->u.w - 4) >> 1), u);\n#endif\n    else\n\tjit_stxi_d(v->u.w, _FP, u);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        755,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n#if NEW_ABI\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_d(_F12 - v->u.w, u);\n    else if (jit_arg_reg_p(v->u.w - 8)) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_movr_d_w(_A0 - v->u.w - 8, u);\n\tjit_unget_reg(regno);\n    }\n#else\n    if (v->u.w < 4) {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_movr_d_ww(_A0 - v->u.w, _A0 - (v->u.w + 1), regno);\n\tjit_unget_reg(regno);\n    }\n    else if (v->u.w < 8)\n\tjit_movi_d(_F12 - ((v->u.w - 4) >> 1), u);\n#endif\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, _FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        816,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n#if NEW_ABI\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size + WORD_ADJUST, JIT_SP, u);\n\t_jitc->function->call.size += STACK_SLOT;\n    }\n#else\n    jit_word_t\t\toffset;\n    assert(_jitc->function);\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    _jitc->function->call.argi = 1;\n    if (jit_arg_reg_p(offset))\n\tjit_movr(_A0 - offset, u);\n    else\n\tjit_stxi(_jitc->function->call.size, JIT_SP, u);\n    _jitc->function->call.size += STACK_SLOT;\n#endif\n    jit_dec_synth();\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        818,
        0
      ],
      "end_point": [
        854,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\tregno;\n#if !NEW_ABI\n    jit_word_t\t\toffset;\n#endif\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + WORD_ADJUST, JIT_SP, regno);\n\t_jitc->function->call.size += STACK_SLOT;\n\tjit_unget_reg(regno);\n    }\n#else\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    ++_jitc->function->call.argi;\n    if (jit_arg_reg_p(offset))\n\tjit_movi(_A0 - offset, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += STACK_SLOT;\n#endif\n    jit_dec_synth();\n}",
      "lines": 37,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        856,
        0
      ],
      "end_point": [
        893,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n#if !NEW_ABI\n    jit_word_t\t\toffset;\n#endif\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs))\n\t    jit_movr_f(_F12 - _jitc->function->call.argi, u);\n\telse\n\t    jit_movr_f_w(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += STACK_SLOT;\n    }\n#else\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    if (offset < 2 && !_jitc->function->call.argi &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\t++_jitc->function->call.argf;\n\tjit_movr_f(_F12 - offset, u);\n    }\n    else if (offset < 4) {\n\t++_jitc->function->call.argi;\n\tjit_movr_f_w(_A0 - offset, u);\n    }\n    else\n\tjit_stxi_f(_jitc->function->call.size, JIT_SP, u);\n    _jitc->function->call.size += STACK_SLOT;\n#endif\n    jit_dec_synth();\n}",
      "lines": 38,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        895,
        0
      ],
      "end_point": [
        940,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n#if !NEW_ABI\n    jit_word_t\t\toffset;\n#endif\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs))\n\t    jit_movi_f(_F12 - _jitc->function->call.argi, u);\n\telse\n\t    jit_movi_f_w(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size, JIT_SP, regno);\n\t_jitc->function->call.size += STACK_SLOT;\n\tjit_unget_reg(regno);\n    }\n#else\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    if (offset < 2 && !_jitc->function->call.argi &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\t++_jitc->function->call.argf;\n\tjit_movi_f(_F12 - offset, u);\n    }\n    else if (offset < 4) {\n\t++_jitc->function->call.argi;\n\tjit_movi_f_w(_A0 - offset, u);\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += STACK_SLOT;\n#endif\n    jit_dec_synth();\n}",
      "lines": 46,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        942,
        0
      ],
      "end_point": [
        986,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n#if !NEW_ABI\n    jit_bool_t\t\tadjust;\n    jit_word_t\t\toffset;\n#endif\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs))\n\t    jit_movr_d(_F12 - _jitc->function->call.argi, u);\n\telse\n\t    jit_movr_d_w(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, u);\n\t_jitc->function->call.size += STACK_SLOT;\n    }\n#else\n    adjust = !!_jitc->function->call.argi;\n    if (_jitc->function->call.size & 7) {\n\t_jitc->function->call.size += 4;\n\tadjust = 1;\n    }\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    if (offset < 3) {\n\tif (adjust || (_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movr_d_ww(_A0 - offset, _A0 - (offset + 1), u);\n\t    _jitc->function->call.argi += 2;\n\t}\n\telse {\n\t    jit_movr_d(_F12 - (offset >> 1), u);\n\t    ++_jitc->function->call.argf;\n\t}\n    }\n    else\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, u);\n    _jitc->function->call.size += sizeof(jit_float64_t);\n#endif\n    jit_dec_synth();\n}",
      "lines": 45,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        988,
        0
      ],
      "end_point": [
        1040,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n#if !NEW_ABI\n    jit_bool_t\t\tadjust;\n    jit_word_t\t\toffset;\n#endif\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n#if NEW_ABI\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tif (!(_jitc->function->call.call & jit_call_varargs))\n\t    jit_movi_d(_F12 - _jitc->function->call.argi, u);\n\telse\n\t    jit_movi_d_w(_A0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, regno);\n\t_jitc->function->call.size += STACK_SLOT;\n\tjit_unget_reg(regno);\n    }\n#else\n    adjust = !!_jitc->function->call.argi;\n    if (_jitc->function->call.size & 7) {\n\t_jitc->function->call.size += 4;\n\tadjust = 1;\n    }\n    offset = _jitc->function->call.size >> STACK_SHIFT;\n    if (offset < 3) {\n\tif (adjust || (_jitc->function->call.call & jit_call_varargs)) {\n\t    jit_movi_d_ww(_A0 - offset, _A0 - (offset + 1), u);\n\t    _jitc->function->call.argi += 2;\n\t}\n\telse {\n\t    jit_movi_d(_F12 - (offset >> 1), u);\n\t    ++_jitc->function->call.argf;\n\t}\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(_jitc->function->call.size, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += sizeof(jit_float64_t);\n#endif\n    jit_dec_synth();\n}",
      "lines": 53,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        1042,
        0
      ],
      "end_point": [
        1062,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tif (spec & jit_class_gpr) {\n\t    regno = _A0 - regno;\n\t    if (regno >= 0 && regno < node->v.w)\n\t\treturn (1);\n\t}\n\telse if (spec & jit_class_fpr) {\n\t    regno = _F12 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n\n    return (0);\n}",
      "lines": 21,
      "depth": 14,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        1064,
        0
      ],
      "end_point": [
        1084,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    jit_movr(_T9, r0);\n    call = jit_callr(_T9);\n    call->v.w = _jitc->function->self.argi;\n#if NEW_ABI\n    call->w.w = call->v.w;\n#else\n    call->w.w = _jitc->function->self.argf;\n#endif\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 21,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        1086,
        0
      ],
      "end_point": [
        1108,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*call;\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_movi(_T9, (jit_word_t)i0);\n    call = jit_callr(_T9);\n    call->v.w = _jitc->function->call.argi;\n#if NEW_ABI\n    call->w.w = call->v.w;\n#else\n    call->w.w = _jitc->function->call.argf;\n#endif\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        1110,
        0
      ],
      "end_point": [
        1114,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_extr_c(r0, JIT_RET);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        1116,
        0
      ],
      "end_point": [
        1120,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_extr_uc(r0, JIT_RET);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        1122,
        0
      ],
      "end_point": [
        1126,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_extr_s(r0, JIT_RET);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        1128,
        0
      ],
      "end_point": [
        1132,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_extr_us(r0, JIT_RET);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        1134,
        0
      ],
      "end_point": [
        1143,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n#if __WORDSIZE == 32\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n#else\n    jit_extr_i(r0, JIT_RET);\n#endif\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        1146,
        0
      ],
      "end_point": [
        1150,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_extr_ui(r0, JIT_RET);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        1152,
        0
      ],
      "end_point": [
        1157,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        1160,
        0
      ],
      "end_point": [
        1165,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (r0 != JIT_FRET)\n\tjit_movr_f(r0, JIT_FRET);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        1167,
        0
      ],
      "end_point": [
        1172,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        1174,
        0
      ],
      "end_point": [
        1859,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n#if __WORDSIZE == 64\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n#endif\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n#endif\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n#endif\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n#endif\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n#endif\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n#if __WORDSIZE == 64\n\t\tcase_rr(hton, _ul);\n#endif\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n#if __WORDSIZE == 64\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n#endif\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    word = calli_p(temp->u.w);\n\t\t    if (!(temp->flag & jit_flag_patch))\n\t\t\tpatch(word, node);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n#if !NEW_ABI\n\t    case jit_code_movr_w_f:\n\t\tmovr_w_f(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n#endif\n\t    case jit_code_movr_f_w:\n\t\tmovr_f_w(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movi_f_w:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f_w(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n#if NEW_ABI\n\t    case jit_code_movr_d_w:\n\t\tmovr_d_w(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_movi_d_w:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d_w(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n#else\n\t    case jit_code_movr_ww_d:\n\t\tmovr_ww_d(rn(node->u.w), rn(node->v.w), rn(node->w.w));\n\t\tbreak;\n\t    case jit_code_movr_d_ww:\n\t\tmovr_d_ww(rn(node->u.w), rn(node->v.w), rn(node->w.w));\n\t\tbreak;\n\t    case jit_code_movi_d_ww:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d_ww(rn(node->u.w), rn(node->v.w),\n\t\t\t  (jit_float64_t *)node->w.n->u.w);\n\t\tbreak;\n#endif\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\n\t    case jit_code_arg:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n#if __WORDSIZE == 64\n\t    case jit_code_getarg_ui:\t\tcase jit_code_getarg_l:\n#endif\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n#if __WORDSIZE == 64\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n#endif\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tif (jit_carry != _NOREG) {\n\t    switch (node->code) {\n\t\tcase jit_code_note:\n\t\tcase jit_code_addcr:\t\tcase jit_code_addci:\n\t\tcase jit_code_addxr:\t\tcase jit_code_addxi:\n\t\tcase jit_code_subcr:\t\tcase jit_code_subci:\n\t\tcase jit_code_subxr:\t\tcase jit_code_subxi:\n\t\t    break;\n\t\tdefault:\n\t\t    jit_unget_reg(jit_carry);\n\t\t    jit_carry = _NOREG;\n\t\t    break;\n\t    }\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == jit_carry == _NOREG ? 0 : (1 << jit_carry));\n\tassert(_jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrf\n#undef case_rrw\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 686,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1867,
        0
      ],
      "end_point": [
        1878,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__linux__)\n    jit_word_t\t\tf, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n    _flush_cache((void *)f, t - f, ICACHE);\n#endif\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1880,
        0
      ],
      "end_point": [
        1884,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1886,
        0
      ],
      "end_point": [
        1890,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1892,
        0
      ],
      "end_point": [
        1896,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1898,
        0
      ],
      "end_point": [
        1902,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1904,
        0
      ],
      "end_point": [
        1924,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\t flag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_names.c": {},
  "lightning/lightning-2.1.2/lib/jit_note.c": {
    "jit_init_note": {
      "start_point": [
        38,
        0
      ],
      "end_point": [
        41,
        1
      ],
      "content": "void\njit_init_note(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "jit_finish_note": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "content": "void\njit_finish_note(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_name": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "content": "jit_node_t *\n_jit_name(jit_state_t *_jit, const char *name)\n{\n    jit_node_t\t\t*node;\n\n    node = jit_new_node(jit_code_name);\n    if (name)\n\tnode->v.n = jit_data(name, strlen(name) + 1, 1);\n    else\n\tnode->v.p = NULL;\n    if (_jitc->note.head == NULL)\n\t_jitc->note.head = _jitc->note.tail = node;\n    else {\n\t_jitc->note.tail->link = node;\n\t_jitc->note.tail = node;\n    }\n    ++_jit->note.length;\n    _jitc->note.size += sizeof(jit_note_t);\n    /* remember previous note is invalid due to name change */\n    _jitc->note.note = NULL;\n    return (_jitc->note.name = node);\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_name(jit_state_t *_jit, const char *name)",
        "*"
      ]
    },
    "_jit_note": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        96,
        1
      ],
      "content": "jit_node_t *\n_jit_note(jit_state_t *_jit, const char *name, int line)\n{\n    jit_node_t\t\t*node;\n\n    node = jit_new_node(jit_code_note);\n    if (name)\n\tnode->v.n = jit_data(name, strlen(name) + 1, 1);\n    else\n\tnode->v.p = NULL;\n    node->w.w = line;\n    if (_jitc->note.head == NULL)\n\t_jitc->note.head = _jitc->note.tail = node;\n    else {\n\t_jitc->note.tail->link = node;\n\t_jitc->note.tail = node;\n    }\n    if (_jitc->note.note == NULL ||\n\t(name == NULL && _jitc->note.note != NULL) ||\n\t(name != NULL && _jitc->note.note == NULL) ||\n\t(name != NULL && _jitc->note.note != NULL &&\n\t strcmp(name, (char *)_jitc->data.ptr + _jitc->note.note->v.n->u.w)))\n\t_jitc->note.size += sizeof(jit_line_t);\n    _jitc->note.size += sizeof(jit_int32_t) * 2;\n    return (_jitc->note.note = node);\n}",
      "lines": 26,
      "depth": 17,
      "decorators": [
        "jit_node_t",
        "*\n_jit_note(jit_state_t *_jit, const char *name, int line)",
        "*"
      ]
    },
    "_jit_annotate": {
      "start_point": [
        98,
        0
      ],
      "end_point": [
        164,
        1
      ],
      "content": "void\n_jit_annotate(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_note_t\t\t*note;\n    jit_line_t\t\t*line;\n    jit_word_t\t\t length;\n    jit_word_t\t\t note_offset;\n    jit_word_t\t\t line_offset;\n\n    /* initialize pointers in mmaped data area */\n    _jit->note.ptr = (jit_note_t *)_jitc->note.base;\n    _jit->note.length = 0;\n\n    note = NULL;\n    for (node = _jitc->note.head; node; node = node->link) {\n\tif (node->code == jit_code_name)\n\t    note = new_note(node->u.p, node->v.p ? node->v.n->u.p : NULL);\n\telse if (node->v.p) {\n\t    if (note == NULL)\n\t\tnote = new_note(node->u.p, NULL);\n\t    jit_set_note(note, node->v.n->u.p, node->w.w,\n\t\t\t (jit_uint8_t *)node->u.p - note->code);\n\t}\n    }\n    /* last note */\n    if (note)\n\tnote->size = _jit->pc.uc - note->code;\n\n    /* annotations may be very complex with conditions to extend\n     * or ignore redundant notes, as well as add entries to earlier\n     * notes, so, relocate the information to the data buffer,\n     * with likely over allocated reserved space */\n\n    /* relocate jit_line_t objects */\n    for (note_offset = 0; note_offset < _jit->note.length; note_offset++) {\n\tnote = _jit->note.ptr + note_offset;\n\tif ((length = sizeof(jit_line_t) * note->length) == 0)\n\t    continue;\n\tassert(_jitc->note.base + length < _jit->data.ptr + _jit->data.length);\n\tjit_memcpy(_jitc->note.base, note->lines, length);\n\tjit_free((jit_pointer_t *)&note->lines);\n\tnote->lines = (jit_line_t *)_jitc->note.base;\n\t_jitc->note.base += length;\n    }\n\n    /* relocate offset and line number information */\n    for (note_offset = 0; note_offset < _jit->note.length; note_offset++) {\n\tnote = _jit->note.ptr + note_offset;\n\tfor (line_offset = 0; line_offset < note->length; line_offset++) {\n\t    line = note->lines + line_offset;\n\t    length = sizeof(jit_int32_t) * line->length;\n\t    assert(_jitc->note.base + length <\n\t\t   _jit->data.ptr + _jit->data.length);\n\t    jit_memcpy(_jitc->note.base, line->linenos, length);\n\t    jit_free((jit_pointer_t *)&line->linenos);\n\t    line->linenos = (jit_int32_t *)_jitc->note.base;\n\t    _jitc->note.base += length;\n\t    assert(_jitc->note.base + length <\n\t\t   _jit->data.ptr + _jit->data.length);\n\t    jit_memcpy(_jitc->note.base, line->offsets, length);\n\t    jit_free((jit_pointer_t *)&line->offsets);\n\t    line->offsets = (jit_int32_t *)_jitc->note.base;\n\t    _jitc->note.base += length;\n\t}\n    }\n}",
      "lines": 67,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_set_note": {
      "start_point": [
        166,
        0
      ],
      "end_point": [
        213,
        1
      ],
      "content": "void\n_jit_set_note(jit_state_t *_jit, jit_note_t *note,\n\t      char *file, int lineno, jit_int32_t offset)\n{\n    jit_line_t\t\t*line;\n    jit_int32_t\t\t index;\n\n    index = line_insert_index(note, offset);\n    if (note->length && index == note->length &&\n\tnote->lines[index - 1].file == file)\n\t--index;\n    if (index >= note->length || note->lines[index].file != file)\n\tnew_line(index, note, file, lineno, offset);\n    else {\n\tline = note->lines + index;\n\tindex = offset_insert_index(line, offset);\n\tif (index < line->length && line->offsets[index] == offset) {\n\t    /* common case if no code was generated for several source lines */\n\t    if (line->linenos[index] < lineno)\n\t\tline->linenos[index] = lineno;\n\t}\n\telse if (index < line->length && line->linenos[index] == lineno) {\n\t    /* common case of extending entry */\n\t    if (line->offsets[index] > offset)\n\t\tline->offsets[index] = offset;\n\t}\n\telse {\n\t    /* line or offset changed */\n\t    if ((line->length & 15) == 0) {\n\t\tjit_realloc((jit_pointer_t *)&line->linenos,\n\t\t\t    line->length * sizeof(jit_int32_t),\n\t\t\t    (line->length + 17) * sizeof(jit_int32_t));\n\t\tjit_realloc((jit_pointer_t *)&line->offsets,\n\t\t\t    line->length * sizeof(jit_int32_t),\n\t\t\t    (line->length + 17) * sizeof(jit_int32_t));\n\t    }\n\t    if (index < note->length) {\n\t\tjit_memmove(line->linenos + index + 1, line->linenos + index,\n\t\t\t    sizeof(jit_int32_t) * (line->length - index));\n\t\tjit_memmove(line->offsets + index + 1, line->offsets + index,\n\t\t\t    sizeof(jit_int32_t) * (line->length - index));\n\t    }\n\t    line->linenos[index] = lineno;\n\t    line->offsets[index] = offset;\n\t    ++line->length;\n\t}\n    }\n}",
      "lines": 48,
      "depth": 18,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_note": {
      "start_point": [
        215,
        0
      ],
      "end_point": [
        247,
        1
      ],
      "content": "jit_bool_t\n_jit_get_note(jit_state_t *_jit, jit_pointer_t code,\n\t      char **name, char **file, jit_int32_t *lineno)\n{\n    jit_note_t\t\t*note;\n    jit_line_t\t\t*line;\n    jit_int32_t\t\t index;\n    jit_int32_t\t\t offset;\n\n    if ((index = note_search_index((jit_uint8_t *)code)) >= _jit->note.length)\n\treturn (0);\n    note = _jit->note.ptr + index;\n    if ((jit_uint8_t *)code < note->code ||\n\t(jit_uint8_t *)code >= note->code + note->size)\n\treturn (0);\n    offset = (jit_uint8_t *)code - note->code;\n    if ((index = line_search_index(note, offset)) >= note->length)\n\treturn (0);\n    if (index == 0 && offset < note->lines[0].offsets[0])\n\treturn (0);\n    line = note->lines + index;\n    if ((index = offset_search_index(line, offset)) >= line->length)\n\treturn (0);\n\n    if (name)\n\t*name = note->name;\n    if (file)\n\t*file = line->file;\n    if (lineno)\n\t*lineno = line->linenos[index];\n\n    return (1);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_new_note": {
      "start_point": [
        249,
        0
      ],
      "end_point": [
        267,
        1
      ],
      "content": "static jit_note_t *\n_new_note(jit_state_t *_jit, jit_uint8_t *code, char *name)\n{\n    jit_note_t\t\t*note;\n    jit_note_t\t\t*prev;\n\n    if (_jit->note.length) {\n\tprev = _jit->note.ptr + _jit->note.length - 1;\n\tassert(code >= prev->code);\n\tprev->size = code - prev->code;\n    }\n    note = (jit_note_t *)_jitc->note.base;\n    _jitc->note.base += sizeof(jit_note_t);\n    ++_jit->note.length;\n    note->code = code;\n    note->name = name;\n\n    return (note);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_note_t",
        "*\n_new_note(jit_state_t *_jit, jit_uint8_t *code, char *name)",
        "*"
      ]
    },
    "new_line": {
      "start_point": [
        269,
        0
      ],
      "end_point": [
        294,
        1
      ],
      "content": "static void\nnew_line(jit_int32_t index, jit_note_t *note,\n\t  char *file, jit_int32_t lineno, jit_int32_t offset)\n{\n    jit_line_t\t\t*line;\n\n    if (note->lines == NULL)\n\tjit_alloc((jit_pointer_t *)&note->lines, 16 * sizeof(jit_line_t));\n    else if ((note->length & 15) == 15)\n\tjit_realloc((jit_pointer_t *)&note->lines,\n\t\t    note->length * sizeof(jit_line_t),\n\t\t    (note->length + 17) * sizeof(jit_line_t));\n\n    if (index < note->length)\n\tjit_memmove(note->lines + index + 1, note->lines + index,\n\t\t    sizeof(jit_line_t) * (note->length - index));\n    line = note->lines + index;\n    ++note->length;\n\n    line->file = file;\n    line->length = 1;\n    jit_alloc((jit_pointer_t *)&line->linenos, 16 * sizeof(jit_int32_t));\n    line->linenos[0] = lineno;\n    jit_alloc((jit_pointer_t *)&line->offsets, 16 * sizeof(jit_int32_t));\n    line->offsets[0] = offset;\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_note_search_index": {
      "start_point": [
        296,
        0
      ],
      "end_point": [
        318,
        1
      ],
      "content": "static jit_int32_t\n_note_search_index(jit_state_t *_jit, jit_uint8_t *code)\n{\n    jit_int32_t\t\t bot;\n    jit_int32_t\t\t top;\n    jit_int32_t\t\t index;\n    jit_note_t\t\t*notes;\n\n    bot = 0;\n    top = _jit->note.length;\n    notes = _jit->note.ptr;\n    for (index = (bot + top) >> 1; bot < top; index = (bot + top) >> 1) {\n\tif (code < notes[index].code)\n\t    top = index;\n\telse if (code >= notes[index].code &&\n\t\t code - notes[index].code < notes[index].size)\n\t    break;\n\telse\n\t    bot = index + 1;\n    }\n\n    return (index);\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "line_insert_index": {
      "start_point": [
        320,
        0
      ],
      "end_point": [
        340,
        1
      ],
      "content": "static jit_int32_t\nline_insert_index(jit_note_t *note, jit_int32_t offset)\n{\n    jit_int32_t\t\t bot;\n    jit_int32_t\t\t top;\n    jit_int32_t\t\t index;\n    jit_line_t\t\t*lines;\n\n    bot = 0;\n    top = note->length;\n    if ((lines = note->lines) == NULL)\n\treturn (0);\n    for (index = (bot + top) >> 1; bot < top; index = (bot + top) >> 1) {\n\tif (offset < *lines[index].offsets)\n\t    top = index;\n\telse\n\t    bot = index + 1;\n    }\n\n    return ((bot + top) >> 1);\n}",
      "lines": 21,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "line_search_index": {
      "start_point": [
        342,
        0
      ],
      "end_point": [
        367,
        1
      ],
      "content": "static jit_int32_t\nline_search_index(jit_note_t *note, jit_int32_t offset)\n{\n    jit_int32_t\t\t bot;\n    jit_int32_t\t\t top;\n    jit_int32_t\t\t index;\n    jit_line_t\t\t*lines;\n\n    bot = 0;\n    top = note->length;\n    if ((lines = note->lines) == NULL)\n\treturn (0);\n    for (index = (bot + top) >> 1; bot < top; index = (bot + top) >> 1) {\n\tif (offset < *lines[index].offsets)\n\t    top = index;\n\t/* offset should be already verified to be in range */\n\telse if (index == note->length - 1 ||\n\t\t (offset >= *lines[index].offsets &&\n\t\t  offset < *lines[index + 1].offsets))\n\t    break;\n\telse\n\t    bot = index + 1;\n    }\n\n    return (index);\n}",
      "lines": 26,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "offset_insert_index": {
      "start_point": [
        369,
        0
      ],
      "end_point": [
        388,
        1
      ],
      "content": "static jit_int32_t\noffset_insert_index(jit_line_t *line, jit_int32_t offset)\n{\n    jit_int32_t\t\t bot;\n    jit_int32_t\t\t top;\n    jit_int32_t\t\t index;\n    jit_int32_t\t\t*offsets;\n\n    bot = 0;\n    top = line->length;\n    offsets = line->offsets;\n    for (index = (bot + top) >> 1; bot < top; index = (bot + top) >> 1) {\n\tif (offset < offsets[index])\n\t    top = index;\n\telse\n\t    bot = index + 1;\n    }\n\n    return ((bot + top) >> 1);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "offset_search_index": {
      "start_point": [
        390,
        0
      ],
      "end_point": [
        413,
        1
      ],
      "content": "static jit_int32_t\noffset_search_index(jit_line_t *line, jit_int32_t offset)\n{\n    jit_int32_t\t\t bot;\n    jit_int32_t\t\t top;\n    jit_int32_t\t\t index;\n    jit_int32_t\t\t*offsets;\n\n    bot = 0;\n    top = line->length;\n    offsets = line->offsets;\n    for (index = (bot + top) >> 1; bot < top; index = (bot + top) >> 1) {\n\tif (offset < offsets[index])\n\t    top = index;\n\t/* offset should be already verified to be in range */\n\telse if (index == line->length - 1 ||\n\t\t (offset >= offsets[index] && offset < offsets[index + 1]))\n\t    break;\n\telse\n\t    bot = index + 1;\n    }\n\n    return (index);\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ppc-cpu.c": {
    "_FXO": {
      "start_point": [
        867,
        0
      ],
      "end_point": [
        878,
        1
      ],
      "content": "static void\n_FXO(jit_state_t *_jit, int o, int d, int a, int b, int e, int x, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(d & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(b & ~((1 << 5) - 1)));\n    assert(!(e & ~((1 << 1) - 1)));\n    assert(!(x & ~((1 << 9) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    ii((o<<26)|(d<<21)|(a<<16)|(b<<11)|(e<<10)|(x<<1)|r);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FDs": {
      "start_point": [
        880,
        0
      ],
      "end_point": [
        888,
        1
      ],
      "content": "static void\n_FDs(jit_state_t *_jit, int o, int d, int a, int s)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(d & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(can_sign_extend_short_p(s));\n    ii((o<<26)|(d<<21)|(a<<16)|_u16(s));\n}",
      "lines": 9,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FDu": {
      "start_point": [
        890,
        0
      ],
      "end_point": [
        898,
        1
      ],
      "content": "static void\n_FDu(jit_state_t *_jit, int o, int d, int a, int s)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(d & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(can_zero_extend_short_p(s));\n    ii((o<<26)|(d<<21)|(a<<16)|_u16(s));\n}",
      "lines": 9,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FX": {
      "start_point": [
        900,
        0
      ],
      "end_point": [
        910,
        1
      ],
      "content": "static void\n_FX(jit_state_t *_jit, int o, int s, int a, int b, int x, int r)\n{\n    assert(!(o & ~((1 <<  6) - 1)));\n    assert(!(s & ~((1 <<  5) - 1)));\n    assert(!(a & ~((1 <<  5) - 1)));\n    assert(!(b & ~((1 <<  5) - 1)));\n    assert(!(x & ~((1 << 10) - 1)));\n    assert(!(r & ~((1 <<  1) - 1)));\n    ii((o<<26)|(s<<21)|(a<<16)|(b<<11)|(x<<1)|r);\n}",
      "lines": 11,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FI": {
      "start_point": [
        912,
        0
      ],
      "end_point": [
        920,
        1
      ],
      "content": "static void\n_FI(jit_state_t *_jit, int o, int t, int a, int k)\n{\n    assert(!(o & ~(( 1 <<  6) - 1)));\n    assert(!(t & 3) && can_sign_extend_jump_p(t));\n    assert(!(a & ~(( 1 <<  1) - 1)));\n    assert(!(k & ~(( 1 <<  1) - 1)));\n    ii((o<<26)|_u26(t)|(a<<1)|k);\n}",
      "lines": 9,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FB": {
      "start_point": [
        922,
        0
      ],
      "end_point": [
        932,
        1
      ],
      "content": "static void\n_FB(jit_state_t *_jit, int o, int bo, int bi, int t, int a, int k)\n{\n    assert(!( o & ~((1 <<  6) - 1)));\n    assert(!(bo & ~((1 <<  5) - 1)));\n    assert(!(bi & ~((1 <<  5) - 1)));\n    assert(!(t & 3) && can_sign_extend_short_p(t));\n    assert(!(a & ~(( 1 <<  1) - 1)));\n    assert(!(k & ~(( 1 <<  1) - 1)));\n    ii((o<<26)|(bo<<21)|(bi<<16)|_u16(t)|(a<<1)|k);\n}",
      "lines": 11,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FXL": {
      "start_point": [
        934,
        0
      ],
      "end_point": [
        943,
        1
      ],
      "content": "static void\n_FXL(jit_state_t *_jit, int o, int bo, int bi, int x, int k)\n{\n    assert(!( o & ~((1 <<  6) - 1)));\n    assert(!(bo & ~((1 <<  5) - 1)));\n    assert(!(bi & ~((1 <<  5) - 1)));\n    assert(!(x & ~(( 1 << 10) - 1)));\n    assert(!(k & ~(( 1 <<  1) - 1)));\n    ii((o<<26)|(bo<<21)|(bi<<16)|(x<<1)|k);\n}",
      "lines": 10,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FC": {
      "start_point": [
        945,
        0
      ],
      "end_point": [
        955,
        1
      ],
      "content": "static void\n_FC(jit_state_t *_jit, int o, int d, int l, int a, int b, int x)\n{\n    assert(!(o & ~((1 <<  6) - 1)));\n    assert(!(d & ~((1 <<  3) - 1)));\n    assert(!(l & ~((1 <<  1) - 1)));\n    assert(!(a & ~((1 <<  5) - 1)));\n    assert(!(b & ~((1 <<  5) - 1)));\n    assert(!(x & ~((1 << 10) - 1)));\n    ii((o<<26)|(d<<23)|(l<<21)|(a<<16)|(b<<11)|(x<<1));\n}",
      "lines": 11,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FCI": {
      "start_point": [
        957,
        0
      ],
      "end_point": [
        970,
        1
      ],
      "content": "static void\n_FCI(jit_state_t *_jit, int o, int d, int l, int a, int s)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(d & ~((1 << 3) - 1)));\n    assert(!(l & ~((1 << 1) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    if (o == 11)\tassert(can_sign_extend_short_p(s));\n    else if (o == 10)\tassert(can_zero_extend_short_p(s));\n#if DEBUG\n    else\t\tabort();\n#endif\n    ii((o<<26)|(d<<23)|(l<<21)|(a<<16)|_u16(s));\n}",
      "lines": 14,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FXFX": {
      "start_point": [
        972,
        0
      ],
      "end_point": [
        980,
        1
      ],
      "content": "static void\n_FXFX(jit_state_t *_jit, int o, int d, int x, int f)\n{\n    assert(!(o & ~((1 <<  6) - 1)));\n    assert(!(d & ~((1 <<  5) - 1)));\n    assert(!(x & ~((1 << 10) - 1)));\n    assert(!(f & ~((1 << 10) - 1)));\n    ii((o<<26)|(d<<21)|(x<<11)|(f<<1));\n}",
      "lines": 9,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FM": {
      "start_point": [
        982,
        0
      ],
      "end_point": [
        993,
        1
      ],
      "content": "static void\n_FM(jit_state_t *_jit, int o, int s, int a, int h, int b, int e, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(s & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(h & ~((1 << 5) - 1)));\n    assert(!(b & ~((1 << 5) - 1)));\n    assert(!(e & ~((1 << 5) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    ii((o<<26)|(s<<21)|(a<<16)|(h<<11)|(b<<6)|(e<<1)|r);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FMDS": {
      "start_point": [
        996,
        0
      ],
      "end_point": [
        1008,
        1
      ],
      "content": "static void\n_FMDS(jit_state_t *_jit, int o, int s, int a, int b, int e, int x, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(s & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(b & ~((1 << 5) - 1)));\n    assert(!(e & ~((1 << 6) - 1)));\n    assert(!(x & ~((1 << 4) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    e = (e >> 5) | ((e << 1) & 63);\n    ii((o<<26)|(s<<21)|(a<<16)|(b<<11)|(e<<5)|(x<<1)|r);\n}",
      "lines": 13,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FMD": {
      "start_point": [
        1010,
        0
      ],
      "end_point": [
        1023,
        1
      ],
      "content": "static void\n_FMD(jit_state_t *_jit, int o, int s, int a, int h, int e, int x, int i, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(s & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(h & ~((1 << 5) - 1)));\n    assert(!(e & ~((1 << 6) - 1)));\n    assert(!(x & ~((1 << 3) - 1)));\n    assert(!(i & ~((1 << 1) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    e = (e >> 5) | ((e << 1) & 63);\n    ii((o<<26)|(s<<21)|(a<<16)|(h<<11)|(e<<5)|(x<<2)|(i<<1)|r);\n}",
      "lines": 14,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FXS": {
      "start_point": [
        1025,
        0
      ],
      "end_point": [
        1036,
        1
      ],
      "content": "static void\n_FXS(jit_state_t *_jit, int o, int s, int a, int h, int x, int i, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(s & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(h & ~((1 << 5) - 1)));\n    assert(!(x & ~((1 << 9) - 1)));\n    assert(!(i & ~((1 << 1) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    ii((o<<26)|(s<<21)|(a<<16)|(h<<11)|(x<<2)|(i<<1)|r);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_MCRXR": {
      "start_point": [
        1044,
        0
      ],
      "end_point": [
        1054,
        1
      ],
      "content": "static void\n_MCRXR(jit_state_t *_jit, jit_int32_t cr)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    MFXER(rn(reg));\n    MTCRF(128, rn(reg));\n    RLWINM(rn(reg), rn(reg), 0, 0, 28);\n    MTXER(rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        1057,
        0
      ],
      "end_point": [
        1063,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        1065,
        0
      ],
      "end_point": [
        1070,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tMR(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        1072,
        0
      ],
      "end_point": [
        1101,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    if (can_sign_extend_short_p(i0))\n\tLI(r0, i0);\n    else {\n\tif (can_sign_extend_int_p(i0))\n\t    LIS(r0, (jit_int16_t)(i0 >> 16));\n\telse if (can_zero_extend_int_p(i0)) {\n\t    if (i0 & 0xffff0000) {\n\t\tORI(r0, r0, (jit_uint16_t)(i0 >> 16));\n\t\tSLWI(r0, r0, 16);\n\t    }\n\t}\n#  if __WORDSIZE == 64\n\telse {\n\t    movi(r0, (jit_uint32_t)(i0 >> 32));\n\t    if (i0 & 0xffff0000) {\n\t\tSLDI(r0, r0, 16);\n\t\tORI(r0, r0, (jit_uint16_t)(i0 >> 16));\n\t\tSLDI(r0, r0, 16);\n\t    }\n\t    else\n\t\tSLDI(r0, r0, 32);\n\t}\n#  endif\n\tif (i0 & 0xffff)\n\t    ORI(r0, r0, (jit_uint16_t)i0);\n    }\n}",
      "lines": 30,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        1103,
        0
      ],
      "end_point": [
        1119,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tword = _jit->pc.w;\n#  if __WORDSIZE == 32\n    LIS(r0, (jit_int16_t)(i0 >> 16));\n    ORI(r0, r0, (jit_uint16_t)i0);\n#  else\n    LIS(r0, (jit_int16_t)(i0 >> 48));\n    ORI(r0, r0, (jit_uint16_t)(i0 >> 32));\n    SLDI(r0, r0, 16);\n    ORI(r0, r0, (jit_uint16_t)(i0 >> 16));\n    SLDI(r0, r0, 16);\n    ORI(r0, r0, (jit_uint16_t)i0);\n#  endif\n    return (word);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_htonr_us": {
      "start_point": [
        1122,
        0
      ],
      "end_point": [
        1133,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tt0;\n    t0 = jit_get_reg(jit_class_gpr);\n    rshi(rn(t0), r1, 8);\n    andi(r0, r1, 0xff);\n    andi(rn(t0), rn(t0), 0xff);\n    lshi(r0, r0, 8);\n    orr(r0, r0, rn(t0));\n    jit_unget_reg(t0);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        1135,
        0
      ],
      "end_point": [
        1145,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    ROTLWI(rn(reg), r1, 8);\n    RLWIMI(rn(reg), r1, 24, 0, 7);\n    RLWIMI(rn(reg), r1, 24, 16, 23);\n    CLRLDI(r0, rn(reg), 32);\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ul": {
      "start_point": [
        1148,
        0
      ],
      "end_point": [
        1159,
        1
      ],
      "content": "static void\n_htonr_ul(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    rshi_u(rn(reg), r1, 32);\n    htonr_ui(r0, r1);\n    htonr_ui(rn(reg), rn(reg));\n    lshi(r0, r0, 32);\n    orr(r0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        1163,
        0
      ],
      "end_point": [
        1177,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tADDI(r0, r1, i0);\n    else if (can_zero_extend_int_p(i0) && !(i0 & 0x0000ffff))\n\tADDIS(r0, r1, i0 >> 16);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tADD(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        1179,
        0
      ],
      "end_point": [
        1191,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tADDIC(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tADDC(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        1193,
        0
      ],
      "end_point": [
        1201,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    ADDE(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        1203,
        0
      ],
      "end_point": [
        1218,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tni0 = -i0;\n    if (can_sign_extend_short_p(ni0))\n\tADDI(r0, r1, ni0);\n    else if (can_zero_extend_int_p(ni0) && !(ni0 & 0x0000ffff))\n\tADDIS(r0, r1, ni0 >> 16);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tSUB(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        1220,
        0
      ],
      "end_point": [
        1228,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    SUBC(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        1230,
        0
      ],
      "end_point": [
        1238,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    SUBE(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        1240,
        0
      ],
      "end_point": [
        1245,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        1247,
        0
      ],
      "end_point": [
        1259,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tMULLI(r0, r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tmulr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        1261,
        0
      ],
      "end_point": [
        1280,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 || r0 == r3) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmullr(rn(reg), r2, r3);\n    }\n    else\n\tmullr(r0, r2, r3);\n    if (sign)\n\tmulhr(r1, r2, r3);\n    else\n\tmulhr_u(r1, r2, r3);\n    if (r0 == r2 || r0 == r3) {\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        1282,
        0
      ],
      "end_point": [
        1291,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqmulr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        1293,
        0
      ],
      "end_point": [
        1301,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1303,
        0
      ],
      "end_point": [
        1311,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    divr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        1313,
        0
      ],
      "end_point": [
        1347,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\tsv0, rg0;\n    jit_int32_t\t\tsv1, rg1;\n\n    if (r0 == r2 || r0 == r3) {\n\tsv0 = jit_get_reg(jit_class_gpr);\n\trg0 = rn(sv0);\n    }\n    else\n\trg0 = r0;\n    if (r1 == r2 || r1 == r3) {\n\tsv1 = jit_get_reg(jit_class_gpr);\n\trg1 = rn(sv1);\n    }\n    else\n\trg1 = r1;\n\n    if (sign)\n\tdivr(rg0, r2, r3);\n    else\n\tdivr_u(rg0, r2, r3);\n    mulr(rg1, r3, rg0);\n    subr(rg1, r2, rg1);\n    if (rg0 != r0) {\n\tmovr(r0, rg0);\n\tjit_unget_reg(sv0);\n    }\n    if (rg1 != r1) {\n\tmovr(r1, rg1);\n\tjit_unget_reg(sv1);\n    }\n}",
      "lines": 35,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        1349,
        0
      ],
      "end_point": [
        1358,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqdivr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        1360,
        0
      ],
      "end_point": [
        1376,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1378,
        0
      ],
      "end_point": [
        1386,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        1388,
        0
      ],
      "end_point": [
        1404,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr_u(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr_u(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1406,
        0
      ],
      "end_point": [
        1414,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1416,
        0
      ],
      "end_point": [
        1430,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tANDI_(r0, r1, i0);\n    else if (can_zero_extend_int_p(i0) && !(i0 & 0x0000ffff))\n\tANDIS_(r0, r1, (jit_uword_t)i0 >> 16);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tAND(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1432,
        0
      ],
      "end_point": [
        1446,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tORI(r0, r1, i0);\n    else if (can_zero_extend_int_p(i0) && !(i0 & 0x0000ffff))\n\tORIS(r0, r1, (jit_uword_t)i0 >> 16);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tOR(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1448,
        0
      ],
      "end_point": [
        1462,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tXORI(r0, r1, i0);\n    else if (can_zero_extend_int_p(i0) && !(i0 & 0x0000ffff))\n\tXORIS(r0, r1, (jit_uword_t)i0 >> 16);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tXOR(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        1464,
        0
      ],
      "end_point": [
        1476,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n#  if __WORDSIZE == 32\n\tSLWI(r0, r1, i0);\n#  else\n\tSLDI(r0, r1, i0);\n#  endif\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        1478,
        0
      ],
      "end_point": [
        1490,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n#  if __WORDSIZE == 32\n\tSRAWI(r0, r1, i0);\n#  else\n\tSRADI(r0, r1, i0);\n#  endif\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        1492,
        0
      ],
      "end_point": [
        1504,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else {\n#  if __WORDSIZE == 32\n\tSRWI(r0, r1, i0);\n#  else\n\tSRDI(r0, r1, i0);\n#  endif\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr": {
      "start_point": [
        1506,
        0
      ],
      "end_point": [
        1512,
        1
      ],
      "content": "static void\n_ltr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti": {
      "start_point": [
        1514,
        0
      ],
      "end_point": [
        1528,
        1
      ],
      "content": "static void\n_lti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_u": {
      "start_point": [
        1530,
        0
      ],
      "end_point": [
        1536,
        1
      ],
      "content": "static void\n_ltr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPLW(r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti_u": {
      "start_point": [
        1538,
        0
      ],
      "end_point": [
        1552,
        1
      ],
      "content": "static void\n_lti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPLW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler": {
      "start_point": [
        1554,
        0
      ],
      "end_point": [
        1561,
        1
      ],
      "content": "static void\n_ler(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    CRNOT(CR_GT, CR_GT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei": {
      "start_point": [
        1563,
        0
      ],
      "end_point": [
        1578,
        1
      ],
      "content": "static void\n_lei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CRNOT(CR_GT, CR_GT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_u": {
      "start_point": [
        1580,
        0
      ],
      "end_point": [
        1587,
        1
      ],
      "content": "static void\n_ler_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPLW(r1, r2);\n    CRNOT(CR_GT, CR_GT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei_u": {
      "start_point": [
        1589,
        0
      ],
      "end_point": [
        1604,
        1
      ],
      "content": "static void\n_lei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPLW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CRNOT(CR_GT, CR_GT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr": {
      "start_point": [
        1606,
        0
      ],
      "end_point": [
        1612,
        1
      ],
      "content": "static void\n_eqr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqi": {
      "start_point": [
        1614,
        0
      ],
      "end_point": [
        1630,
        1
      ],
      "content": "static void\n_eqi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger": {
      "start_point": [
        1632,
        0
      ],
      "end_point": [
        1639,
        1
      ],
      "content": "static void\n_ger(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    CRNOT(CR_LT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei": {
      "start_point": [
        1641,
        0
      ],
      "end_point": [
        1656,
        1
      ],
      "content": "static void\n_gei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CRNOT(CR_LT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_u": {
      "start_point": [
        1658,
        0
      ],
      "end_point": [
        1665,
        1
      ],
      "content": "static void\n_ger_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPLW(r1, r2);\n    CRNOT(CR_LT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei_u": {
      "start_point": [
        1667,
        0
      ],
      "end_point": [
        1682,
        1
      ],
      "content": "static void\n_gei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPLW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CRNOT(CR_LT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr": {
      "start_point": [
        1684,
        0
      ],
      "end_point": [
        1690,
        1
      ],
      "content": "static void\n_gtr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti": {
      "start_point": [
        1692,
        0
      ],
      "end_point": [
        1706,
        1
      ],
      "content": "static void\n_gti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_u": {
      "start_point": [
        1708,
        0
      ],
      "end_point": [
        1714,
        1
      ],
      "content": "static void\n_gtr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPLW(r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti_u": {
      "start_point": [
        1716,
        0
      ],
      "end_point": [
        1730,
        1
      ],
      "content": "static void\n_gti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPLW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        1732,
        0
      ],
      "end_point": [
        1739,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMPW(r1, r2);\n    CRNOT(CR_EQ, CR_EQ);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        1741,
        0
      ],
      "end_point": [
        1758,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_short_p(i0))\n\tCMPWI(r1, i0);\n    else if (can_zero_extend_short_p(i0))\n\tCMPLWI(r1, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tCMPW(r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    CRNOT(CR_EQ, CR_EQ);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr": {
      "start_point": [
        1760,
        0
      ],
      "end_point": [
        1769,
        1
      ],
      "content": "static jit_word_t\n_bltr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti": {
      "start_point": [
        1771,
        0
      ],
      "end_point": [
        1788,
        1
      ],
      "content": "static jit_word_t\n_blti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltr_u": {
      "start_point": [
        1790,
        0
      ],
      "end_point": [
        1799,
        1
      ],
      "content": "static jit_word_t\n_bltr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPLW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti_u": {
      "start_point": [
        1801,
        0
      ],
      "end_point": [
        1818,
        1
      ],
      "content": "static jit_word_t\n_blti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPLW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler": {
      "start_point": [
        1820,
        0
      ],
      "end_point": [
        1829,
        1
      ],
      "content": "static jit_word_t\n_bler(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei": {
      "start_point": [
        1831,
        0
      ],
      "end_point": [
        1848,
        1
      ],
      "content": "static jit_word_t\n_blei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_u": {
      "start_point": [
        1850,
        0
      ],
      "end_point": [
        1859,
        1
      ],
      "content": "static jit_word_t\n_bler_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPLW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei_u": {
      "start_point": [
        1861,
        0
      ],
      "end_point": [
        1878,
        1
      ],
      "content": "static jit_word_t\n_blei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPLW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr": {
      "start_point": [
        1880,
        0
      ],
      "end_point": [
        1889,
        1
      ],
      "content": "static jit_word_t\n_beqr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        1891,
        0
      ],
      "end_point": [
        1910,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger": {
      "start_point": [
        1912,
        0
      ],
      "end_point": [
        1921,
        1
      ],
      "content": "static jit_word_t\n_bger(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei": {
      "start_point": [
        1923,
        0
      ],
      "end_point": [
        1940,
        1
      ],
      "content": "static jit_word_t\n_bgei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGE(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_u": {
      "start_point": [
        1942,
        0
      ],
      "end_point": [
        1951,
        1
      ],
      "content": "static jit_word_t\n_bger_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPLW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei_u": {
      "start_point": [
        1953,
        0
      ],
      "end_point": [
        1970,
        1
      ],
      "content": "static jit_word_t\n_bgei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPLW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGE(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr": {
      "start_point": [
        1972,
        0
      ],
      "end_point": [
        1981,
        1
      ],
      "content": "static jit_word_t\n_bgtr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti": {
      "start_point": [
        1983,
        0
      ],
      "end_point": [
        2000,
        1
      ],
      "content": "static jit_word_t\n_bgti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_u": {
      "start_point": [
        2002,
        0
      ],
      "end_point": [
        2011,
        1
      ],
      "content": "static jit_word_t\n_bgtr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPLW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti_u": {
      "start_point": [
        2013,
        0
      ],
      "end_point": [
        2030,
        1
      ],
      "content": "static jit_word_t\n_bgti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPLW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner": {
      "start_point": [
        2032,
        0
      ],
      "end_point": [
        2041,
        1
      ],
      "content": "static jit_word_t\n_bner(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    CMPW(r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        2043,
        0
      ],
      "end_point": [
        2062,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1))\n\tCMPWI(r0, i1);\n    else if (can_zero_extend_short_p(i1))\n\tCMPLWI(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\tCMPW(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNE(d);\n    return (w);\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsr": {
      "start_point": [
        2064,
        0
      ],
      "end_point": [
        2074,
        1
      ],
      "content": "static jit_word_t\n_bmsr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andr(rn(reg), r0, r1);\n    w = bnei(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsi": {
      "start_point": [
        2076,
        0
      ],
      "end_point": [
        2086,
        1
      ],
      "content": "static jit_word_t\n_bmsi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andi(rn(reg), r0, i1);\n    w = bnei(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmcr": {
      "start_point": [
        2088,
        0
      ],
      "end_point": [
        2098,
        1
      ],
      "content": "static jit_word_t\n_bmcr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andr(rn(reg), r0, r1);\n    w = beqi(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmci": {
      "start_point": [
        2100,
        0
      ],
      "end_point": [
        2110,
        1
      ],
      "content": "static jit_word_t\n_bmci(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    andi(rn(reg), r0, i1);\n    w = beqi(i0, rn(reg), 0);\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr": {
      "start_point": [
        2112,
        0
      ],
      "end_point": [
        2122,
        1
      ],
      "content": "static jit_word_t\n_boaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    ADDO(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\t\t\t\t/* GT = bit 1 of XER = OV */\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi": {
      "start_point": [
        2124,
        0
      ],
      "end_point": [
        2134,
        1
      ],
      "content": "static jit_word_t\n_boaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = boaddr(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr": {
      "start_point": [
        2136,
        0
      ],
      "end_point": [
        2146,
        1
      ],
      "content": "static jit_word_t\n_bxaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    ADDO(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi": {
      "start_point": [
        2148,
        0
      ],
      "end_point": [
        2158,
        1
      ],
      "content": "static jit_word_t\n_bxaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bxaddr(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr": {
      "start_point": [
        2160,
        0
      ],
      "end_point": [
        2170,
        1
      ],
      "content": "static jit_word_t\n_bosubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    SUBO(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi": {
      "start_point": [
        2172,
        0
      ],
      "end_point": [
        2182,
        1
      ],
      "content": "static jit_word_t\n_bosubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bosubr(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr": {
      "start_point": [
        2184,
        0
      ],
      "end_point": [
        2194,
        1
      ],
      "content": "static jit_word_t\n_bxsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    SUBO(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi": {
      "start_point": [
        2196,
        0
      ],
      "end_point": [
        2206,
        1
      ],
      "content": "static jit_word_t\n_bxsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bxsubr(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr_u": {
      "start_point": [
        2208,
        0
      ],
      "end_point": [
        2218,
        1
      ],
      "content": "static jit_word_t\n_boaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    ADDC(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\t\t\t\t/* EQ = bit 2 of XER = CA */\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi_u": {
      "start_point": [
        2220,
        0
      ],
      "end_point": [
        2238,
        1
      ],
      "content": "static jit_word_t\n_boaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1)) {\n\tADDIC(r0, r0, i1);\n\tMCRXR(CR_0);\n\tw = _jit->pc.w;\n\td = (i0 - w) & ~3;\n\tBEQ(d);\n\treturn (w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = boaddr_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr_u": {
      "start_point": [
        2240,
        0
      ],
      "end_point": [
        2250,
        1
      ],
      "content": "static jit_word_t\n_bxaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    ADDC(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNE(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi_u": {
      "start_point": [
        2252,
        0
      ],
      "end_point": [
        2270,
        1
      ],
      "content": "static jit_word_t\n_bxaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\td, w;\n    if (can_sign_extend_short_p(i1)) {\n\tADDIC(r0, r0, i1);\n\tMCRXR(CR_0);\n\tw = _jit->pc.w;\n\td = (i0 - w) & ~3;\n\tBNE(d);\n\treturn (w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bxaddr_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr_u": {
      "start_point": [
        2272,
        0
      ],
      "end_point": [
        2282,
        1
      ],
      "content": "static jit_word_t\n_bosubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    SUBC(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNE(d);\t\t\t\t/* PPC uses \"carry\" not \"borrow\" */\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi_u": {
      "start_point": [
        2284,
        0
      ],
      "end_point": [
        2294,
        1
      ],
      "content": "static jit_word_t\n_bosubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bosubr_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr_u": {
      "start_point": [
        2296,
        0
      ],
      "end_point": [
        2306,
        1
      ],
      "content": "static jit_word_t\n_bxsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    SUBC(r0, r0, r1);\n    MCRXR(CR_0);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi_u": {
      "start_point": [
        2308,
        0
      ],
      "end_point": [
        2318,
        1
      ],
      "content": "static jit_word_t\n_bxsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bxsubr_u(i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldr_c": {
      "start_point": [
        2320,
        0
      ],
      "end_point": [
        2325,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ldr_uc(r0, r1);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        2327,
        0
      ],
      "end_point": [
        2332,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    ldi_uc(r0, i0);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2334,
        0
      ],
      "end_point": [
        2339,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    ldxr_uc(r0, r1, r2);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        2341,
        0
      ],
      "end_point": [
        2346,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_uc(r0, r1, i0);\n    extr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        2348,
        0
      ],
      "end_point": [
        2372,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLBZ(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLBZ(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        2374,
        0
      ],
      "end_point": [
        2390,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LBZX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LBZX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLBZX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        2392,
        0
      ],
      "end_point": [
        2414,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_uc(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LBZ(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LBZ(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_uc(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        2416,
        0
      ],
      "end_point": [
        2440,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLHA(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLHA(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        2442,
        0
      ],
      "end_point": [
        2458,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LHAX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LHAX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLHAX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        2460,
        0
      ],
      "end_point": [
        2482,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_s(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LHA(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LHA(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_s(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        2484,
        0
      ],
      "end_point": [
        2508,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLHZ(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLHZ(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        2510,
        0
      ],
      "end_point": [
        2526,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LHZX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LHZX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLHZX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        2528,
        0
      ],
      "end_point": [
        2550,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_us(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LHZ(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LHZ(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_us(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": [
      {
        "start_point": [
          2553,
          0
        ],
        "end_point": [
          2577,
          1
        ],
        "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLWZ(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLWZ(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
        "lines": 25,
        "depth": 15,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          2622,
          0
        ],
        "end_point": [
          2646,
          1
        ],
        "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLWA(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLWA(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
        "lines": 25,
        "depth": 15,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      }
    ],
    "_ldxr_i": [
      {
        "start_point": [
          2579,
          0
        ],
        "end_point": [
          2595,
          1
        ],
        "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LWZX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWZX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLWZX(r0, r1, r2);\n}",
        "lines": 17,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          2648,
          0
        ],
        "end_point": [
          2664,
          1
        ],
        "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LWZX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWAX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLWZX(r0, r1, r2);\n}",
        "lines": 17,
        "depth": 12,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      }
    ],
    "_ldxi_i": [
      {
        "start_point": [
          2597,
          0
        ],
        "end_point": [
          2619,
          1
        ],
        "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_i(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWZ(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LWZ(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_i(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
        "lines": 23,
        "depth": 13,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      },
      {
        "start_point": [
          2666,
          0
        ],
        "end_point": [
          2688,
          1
        ],
        "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_i(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWA(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LWA(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_i(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
        "lines": 23,
        "depth": 13,
        "decorators": [
          "static",
          "static",
          "void"
        ]
      }
    ],
    "_ldi_ui": {
      "start_point": [
        2690,
        0
      ],
      "end_point": [
        2714,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLWZ(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLWZ(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        2716,
        0
      ],
      "end_point": [
        2732,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LWZX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWZX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLWZX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        2734,
        0
      ],
      "end_point": [
        2756,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_i(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LWZ(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LWZ(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_ui(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        2758,
        0
      ],
      "end_point": [
        2782,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLD(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLD(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        2784,
        0
      ],
      "end_point": [
        2800,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LDX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LDX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLDX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        2802,
        0
      ],
      "end_point": [
        2824,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_l(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LD(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LD(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_l(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        2827,
        0
      ],
      "end_point": [
        2851,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTB(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTB(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_c(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        2853,
        0
      ],
      "end_point": [
        2869,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STBX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r0);\n\t    STBX(r2, rn(reg), r1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTBX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        2871,
        0
      ],
      "end_point": [
        2893,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_c(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STB(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STB(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_c(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        2895,
        0
      ],
      "end_point": [
        2919,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTH(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTH(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_s(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        2921,
        0
      ],
      "end_point": [
        2937,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STHX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r0);\n\t    STHX(r2, rn(reg), r1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTHX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        2939,
        0
      ],
      "end_point": [
        2961,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_s(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STH(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STH(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_s(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        2963,
        0
      ],
      "end_point": [
        2987,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTW(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTW(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_i(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        2989,
        0
      ],
      "end_point": [
        3005,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STWX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r0);\n\t    STWX(r2, rn(reg), r1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTWX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        3007,
        0
      ],
      "end_point": [
        3029,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_i(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STW(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STW(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_i(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        3032,
        0
      ],
      "end_point": [
        3056,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTD(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTD(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_l(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        3058,
        0
      ],
      "end_point": [
        3074,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STDX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r0);\n\t    STDX(r2, rn(reg), r1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTDX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        3076,
        0
      ],
      "end_point": [
        3098,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_l(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STD(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STD(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_l(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpr": {
      "start_point": [
        3101,
        0
      ],
      "end_point": [
        3111,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n#if 0\n    MTLR(r0);\n    BLR();\n#else\n    MTCTR(r0);\n    BCTR();\n#endif\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        3114,
        0
      ],
      "end_point": [
        3130,
        1
      ],
      "content": "static jit_word_t\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_word_t\t\tw, d;\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    if (can_sign_extend_jump_p(d))\n\tB(d);\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tw = movi_p(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        3133,
        0
      ],
      "end_point": [
        3143,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    w = movi_p(rn(reg), i0);\n    jmpr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        3145,
        0
      ],
      "end_point": [
        3173,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n#  if __powerpc__\n#    if ABI_ELFv2\n    movr(_R12_REGNO, r0);\n#    else\n    stxi(sizeof(void*) * 5, _SP_REGNO, _R2_REGNO);\n    /* FIXME Pretend to not know about r11? */\n    if (r0 == _R0_REGNO) {\n\tmovr(_R11_REGNO, _R0_REGNO);\n\tldxi(_R2_REGNO, _R11_REGNO, sizeof(void*));\n\tldxi(_R11_REGNO, _R11_REGNO, sizeof(void*) * 2);\n    }\n    else {\n\tldxi(_R2_REGNO, r0, sizeof(void*));\n\tldxi(_R11_REGNO, r0, sizeof(void*) * 2);\n    }\n    ldr(r0, r0);\n#    endif\n#  endif\n\n    MTCTR(r0);\n    BCTRL();\n\n#  if __powerpc__ && !ABI_ELFv2\n    ldxi(_R2_REGNO, _SP_REGNO, sizeof(void*) * 5);\n#  endif\n}",
      "lines": 29,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        3176,
        0
      ],
      "end_point": [
        3195,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n#  if __ppc__\n    jit_word_t\t\td;\n#  endif\n    jit_int32_t\t\treg;\n#  if __ppc__\n    d = (i0 - _jit->pc.w) & ~3;\n    if (can_sign_extend_jump_p(d))\n\tBL(d);\n    else\n#  endif\n    {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tcallr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        3198,
        0
      ],
      "end_point": [
        3208,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    w = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        3218,
        0
      ],
      "end_point": [
        3292,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    unsigned long\tregno;\n    jit_word_t\t\toffset;\n\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar) {\n\t_jitc->function->self.aoff -= 2 * sizeof(jit_word_t);\n\t_jitc->function->self.aoff &= -16;\n    }\n    _jitc->function->stack = ((_jitc->function->self.alen +\n\t\t\t      _jitc->function->self.size -\n\t\t\t      _jitc->function->self.aoff) + 15) & -16;\n\n    /* return address */\n    MFLR(_R0_REGNO);\n\n    /* params >= %r31+params_offset+(8*sizeof(jit_word_t))\n     * alloca <  %r31-80 */\n\n#if __ppc__\n    /* save any clobbered callee save gpr register */\n    regno = jit_regset_scan1(&_jitc->function->regset, _R14);\n    if (regno == ULONG_MAX || regno > _R31)\n\tregno = _R31;\t/* aka _FP_REGNO */\n    STMW(rn(regno), _SP_REGNO, -fpr_save_area - (32 * 4) + rn(regno) * 4);\n    for (offset = 0; offset < 8; offset++) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, _F14 + offset))\n\t    stxi_d(-fpr_save_area + offset * 8, _SP_REGNO, rn(_F14 + offset));\n    }\n\n    stxi(8, _SP_REGNO, _R0_REGNO);\n#else\t\t/* __powerpc__ */\n    stxi(sizeof(void*) * 2, _SP_REGNO, _R0_REGNO);\n    offset = -gpr_save_area;\n    for (regno = 0; regno < jit_size(save); regno++, offset += sizeof(void*)) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, save[regno]))\n\t    stxi(offset, _SP_REGNO, rn(save[regno]));\n    }\n    for (offset = 0; offset < 8; offset++) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, _F14 + offset))\n\t    stxi_d(-(gpr_save_area + 8 + offset * 8),\n\t\t   _SP_REGNO, rn(_F14 + offset));\n    }\n\n    stxi(-(sizeof(void*)), _SP_REGNO, _FP_REGNO);\n#endif\n\n    movr(_FP_REGNO, _SP_REGNO);\n#if __WORDSIZE == 32\n    STWU(_SP_REGNO, _SP_REGNO, -_jitc->function->stack);\n#else\n    STDU(_SP_REGNO, _SP_REGNO, -_jitc->function->stack);\n#endif\n\n    if (_jitc->function->allocar) {\n\tregno = jit_get_reg(jit_class_gpr);\n\tmovi(rn(regno), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _FP_REGNO, rn(regno));\n\tjit_unget_reg(regno);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (regno = _jitc->function->vagp; jit_arg_reg_p(regno); ++regno)\n\t    stxi(params_offset + regno * sizeof(jit_word_t),\n\t\t _FP_REGNO, rn(JIT_RA0 - regno));\n    }\n}",
      "lines": 75,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        3294,
        0
      ],
      "end_point": [
        3339,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    unsigned long\tregno;\n    jit_word_t\t\toffset;\n\n    if (_jitc->function->assume_frame)\n\treturn;\n#if __ppc__\n    LWZ(_SP_REGNO, _SP_REGNO, 0);\n    ldxi(_R0_REGNO, _SP_REGNO, 8);\n\n    MTLR(_R0_REGNO);\n\n    regno = jit_regset_scan1(&_jitc->function->regset, _R14);\n    if (regno == ULONG_MAX || regno > _R31)\n\tregno = _R31;\t/* aka _FP_REGNO */\n    LMW(rn(regno), _SP_REGNO, -fpr_save_area - (32 * 4) + rn(regno) * 4);\n    for (offset = 0; offset < 8; offset++) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, _F14 + offset))\n\t    ldxi_d(rn(_F14 + offset), _SP_REGNO, -fpr_save_area + offset * 8);\n    }\n\n#else\t\t/* __powerpc__ */\n    if (_jitc->function->allocar)\n\tldr(_SP_REGNO, _SP_REGNO);\n    else\n\taddi(_SP_REGNO, _SP_REGNO, _jitc->function->stack);\n    ldxi(_R0_REGNO, _SP_REGNO, sizeof(void*) * 2);\n    offset = -gpr_save_area;\n    for (regno = 0; regno < jit_size(save); regno++, offset += sizeof(void*)) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, save[regno]))\n\t    ldxi(rn(save[regno]), _SP_REGNO, offset);\n    }\n    for (offset = 0; offset < 8; offset++) {\n\tif (jit_regset_tstbit(&_jitc->function->regset, _F14 + offset))\n\t    ldxi_d(rn(_F14 + offset), _SP_REGNO,\n\t\t   -(gpr_save_area + 8 + offset * 8));\n    }\n\n    MTLR(_R0_REGNO);\n    ldxi(_FP_REGNO, _SP_REGNO, -(sizeof(void*)));\n#endif\n\n    BLR();\n}",
      "lines": 46,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        3341,
        0
      ],
      "end_point": [
        3348,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Initialize stack pointer to the first stack argument. */\n    addi(r0, _FP_REGNO, _jitc->function->self.size);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        3350,
        0
      ],
      "end_point": [
        3360,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Load argument. */\n    ldr(r0, r1);\n\n    /* Update va_list. */\n    addi(r1, r1, sizeof(jit_word_t));\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        3362,
        0
      ],
      "end_point": [
        3481,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_word_t\t\t d;\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n    u.w = instr;\n    switch ((u.i[0] & 0xfc000000) >> 26) {\n\tcase 16:\t\t\t\t\t/* BCx */\n\t    d = label - instr;\n\t    assert(!(d & 3));\n\t    if (!can_sign_extend_short_p(d)) {\n\t\t/* use absolute address */\n\t\tassert(can_sign_extend_short_p(label));\n\t\td |= 2;\n\t    }\n\t    u.i[0] = (u.i[0] & ~0xfffd) | (d & 0xfffe);\n\t    break;\n\tcase 18:\t\t\t\t\t/* Bx */\n#if __powerpc__ && !ABI_ELFv2\n\t    if (_jitc->jump && (!(u.i[0] & 1))) {\t/* jmpi label */\n\t\t/* zero is used for toc and env, so, quick check\n\t\t * if this is a \"jmpi main\" like initial jit\n\t\t * instruction */\n\t\tif (((long *)label)[1] == 0 && ((long *)label)[2] == 0) {\n\t\t    for (d = 0; d < _jitc->prolog.offset; d++) {\n\t\t\t/* not so pretty, but hides powerpc\n\t\t\t * specific abi intrinsics and/or\n\t\t\t * implementation from user */\n\t\t\tif (_jitc->prolog.ptr[d] == label) {\n\t\t\t    label += sizeof(void*) * 3;\n\t\t\t    break;\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n#endif\n\t    d = label - instr;\n\t    assert(!(d & 3));\n\t    if (!can_sign_extend_jump_p(d)) {\n\t\t/* use absolute address */\n\t\tassert(can_sign_extend_jump_p(label));\n\t\td |= 2;\n\t    }\n\t    u.i[0] = (u.i[0] & ~0x3fffffd) | (d & 0x3fffffe);\n\t    break;\n\tcase 15:\t\t\t\t\t/* LI */\n#if __WORDSIZE == 32\n#  define MTCTR_OFF\t\t2\n#  define BCTR_OFF\t\t3\n#else\n#  define MTCTR_OFF\t\t6\n#  define BCTR_OFF\t\t7\n#endif\n\t    /* movi reg label; jmpr reg */\n\t    if (_jitc->jump &&\n#if 0\n\t\t/* check for MLTR(reg) */\n\t\t(u.i[MTCTR_OFF] >> 26) == 31 &&\n\t\t((u.i[MTCTR_OFF] >> 16) & 0x3ff) == 8 &&\n\t\t((u.i[MTCTR_OFF] >> 1) & 0x3ff) == 467 &&\n\t\t/* check for BLR */\n\t\tu.i[BCTR_OFF] == 0x4e800020) {\n#else\n\t\t/* check for MTCTR(reg) */\n\t\t(u.i[MTCTR_OFF] >> 26) == 31 &&\n\t\t((u.i[MTCTR_OFF] >> 16) & 0x3ff) == 9 &&\n\t\t((u.i[MTCTR_OFF] >> 1) & 0x3ff) == 467 &&\n\t\t/* check for BCTR */\n\t\tu.i[BCTR_OFF] == 0x4e800420) {\n#endif\n\t\t/* zero is used for toc and env, so, quick check\n\t\t * if this is a \"jmpi main\" like initial jit\n\t\t * instruction */\n\t\tif (((long *)label)[1] == 0 && ((long *)label)[2] == 0) {\n\t\t    for (d = 0; d < _jitc->prolog.offset; d++) {\n\t\t\t/* not so pretty, but hides powerpc\n\t\t\t * specific abi intrinsics and/or\n\t\t\t * implementation from user */\n\t\t\tif (_jitc->prolog.ptr[d] == label) {\n\t\t\t    label += sizeof(void*) * 3;\n\t\t\t    break;\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n#undef BCTR_OFF\n#undef MTCTR_OFF\n#if __WORDSIZE == 32\n\t    assert(!(u.i[0] & 0x1f0000));\n\t    u.i[0] = (u.i[0] & ~0xffff) | ((label >> 16) & 0xffff);\n\t    assert((u.i[1] & 0xfc000000) >> 26 == 24);\t/* ORI */\n\t    assert(((u.i[1] >> 16) & 0x1f) == ((u.i[1] >> 21) & 0x1f));\n\t    u.i[1] = (u.i[1] & ~0xffff) | (label & 0xffff);\n#else\n\t    assert(!(u.i[0] & 0x1f0000));\n\t    u.i[0] = (u.i[0] & ~0xffff) | ((label >> 48) & 0xffff);\n\t    assert((u.i[1] & 0xfc000000) >> 26 == 24);\t/* ORI */\n\t    assert(((u.i[1] >> 16) & 0x1f) == ((u.i[1] >> 21) & 0x1f));\n\t    u.i[1] = (u.i[1] & ~0xffff) | ((label >> 32) & 0xffff);\n\t    /* not fully validating SLDI */\n\t    assert((u.i[2] & 0xfc000000) >> 26 == 30);\t/* SLDI */\n\t    assert(((u.i[2] >> 16) & 0x1f) == ((u.i[2] >> 21) & 0x1f));\n\t    assert((u.i[3] & 0xfc000000) >> 26 == 24);\t/* ORI */\n\t    assert(((u.i[3] >> 16) & 0x1f) == ((u.i[3] >> 21) & 0x1f));\n\t    u.i[3] = (u.i[3] & ~0xffff) | ((label >> 16) & 0xffff);\n\t    /* not fully validating SLDI */\n\t    assert((u.i[4] & 0xfc000000) >> 26 == 30);\t/* SLDI */\n\t    assert(((u.i[4] >> 16) & 0x1f) == ((u.i[4] >> 21) & 0x1f));\n\t    assert((u.i[5] & 0xfc000000) >> 26 == 24);\t/* ORI */\n\t    assert(((u.i[5] >> 16) & 0x1f) == ((u.i[5] >> 21) & 0x1f));\n\t    u.i[5] = (u.i[5] & ~0xffff) | (label & 0xffff);\n#endif\n\t    break;\n\tdefault:\n\t    assert(!\"unhandled branch opcode\");\n    }\n}",
      "lines": 120,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ppc-fpu.c": {
    "_FA": {
      "start_point": [
        407,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "content": "static void\n_FA(jit_state_t *_jit, int o, int d, int a, int b, int c, int x, int r)\n{\n    assert(!(o & ~((1 << 6) - 1)));\n    assert(!(d & ~((1 << 5) - 1)));\n    assert(!(a & ~((1 << 5) - 1)));\n    assert(!(b & ~((1 << 5) - 1)));\n    assert(!(c & ~((1 << 5) - 1)));\n    assert(!(x & ~((1 << 5) - 1)));\n    assert(!(r & ~((1 << 1) - 1)));\n    ii((o<<26)|(d<<21)|(a<<16)|(b<<11)|(c<<6)|(x<<1)|r);\n}",
      "lines": 12,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_FXFL": {
      "start_point": [
        420,
        0
      ],
      "end_point": [
        429,
        1
      ],
      "content": "static void\n_FXFL(jit_state_t *_jit, int o, int m, int b, int x, int r)\n{\n    assert(!(o & ~((1 <<  6) - 1)));\n    assert(!(m & ~((1 <<  8) - 1)));\n    assert(!(b & ~((1 <<  5) - 1)));\n    assert(!(x & ~((1 << 10) - 1)));\n    assert(!(r & ~((1 <<  1) - 1)));\n    ii((o<<26)|(m<<17)|(b<<11)|(x<<1)|r);\n}",
      "lines": 10,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d": {
      "start_point": [
        431,
        0
      ],
      "end_point": [
        436,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tFMR(r0,r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        438,
        0
      ],
      "end_point": [
        457,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i & 0xffffffff);\n\tstxi_i(alloca_offset - 4, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_f(r0, _FP_REGNO, alloca_offset - 4);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        459,
        0
      ],
      "end_point": [
        486,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\t i[2];\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n#  if __WORDSIZE == 32\n\tmovi(rn(reg), data.i[0]);\n\tstxi(alloca_offset - 8, _FP_REGNO, rn(reg));\n\tmovi(rn(reg), data.i[1]);\n\tstxi(alloca_offset - 4, _FP_REGNO, rn(reg));\n#  else\n\tmovi(rn(reg), data.w);\n\tstxi(alloca_offset - 8, _FP_REGNO, rn(reg));\n#  endif\n\tjit_unget_reg(reg);\n\tldxi_d(r0, _FP_REGNO, alloca_offset - 8);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 28,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        489,
        0
      ],
      "end_point": [
        505,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#  if __WORDSIZE == 32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    rshi(rn(reg), r1, 31);\n    /* use reserved 8 bytes area */\n    stxi(alloca_offset - 4, _FP_REGNO, r1);\n    stxi(alloca_offset - 8, _FP_REGNO, rn(reg));\n    jit_unget_reg(reg);\n#  else\n    stxi(alloca_offset - 8, _FP_REGNO, r1);\n#  endif\n    ldxi_d(r0, _FP_REGNO, alloca_offset - 8);\n    FCFID(r0, r0);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_i": {
      "start_point": [
        507,
        0
      ],
      "end_point": [
        517,
        1
      ],
      "content": "static void\n_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FCTIWZ(rn(reg), r1);\n    /* use reserved 8 bytes area */\n    stxi_d(alloca_offset - 8, _FP_REGNO, rn(reg));\n    ldxi_i(r0, _FP_REGNO, alloca_offset - 4);\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_l": {
      "start_point": [
        520,
        0
      ],
      "end_point": [
        530,
        1
      ],
      "content": "static void\n_truncr_d_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FCTIDZ(rn(reg), r1);\n    /* use reserved 8 bytes area */\n    stxi_d(alloca_offset - 8, _FP_REGNO, rn(reg));\n    ldxi(r0, _FP_REGNO, alloca_offset - 8);\n    jit_unget_reg(reg);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_d": {
      "start_point": [
        574,
        0
      ],
      "end_point": [
        580,
        1
      ],
      "content": "static void\n_ltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_d": {
      "start_point": [
        584,
        0
      ],
      "end_point": [
        591,
        1
      ],
      "content": "static void\n_ler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    CREQV(CR_GT, CR_GT, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr_d": {
      "start_point": [
        595,
        0
      ],
      "end_point": [
        601,
        1
      ],
      "content": "static void\n_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_d": {
      "start_point": [
        605,
        0
      ],
      "end_point": [
        612,
        1
      ],
      "content": "static void\n_ger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    CREQV(CR_LT, CR_LT, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_d": {
      "start_point": [
        616,
        0
      ],
      "end_point": [
        622,
        1
      ],
      "content": "static void\n_gtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner_d": {
      "start_point": [
        626,
        0
      ],
      "end_point": [
        633,
        1
      ],
      "content": "static void\n_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPO(CR_0, r1, r2);\n    CRNOT(CR_EQ, CR_EQ);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unltr_d": {
      "start_point": [
        637,
        0
      ],
      "end_point": [
        644,
        1
      ],
      "content": "static void\n_unltr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CROR(CR_LT, CR_LT, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unler_d": {
      "start_point": [
        648,
        0
      ],
      "end_point": [
        655,
        1
      ],
      "content": "static void\n_unler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CRNOT(CR_GT, CR_GT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        659,
        0
      ],
      "end_point": [
        666,
        1
      ],
      "content": "static void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CROR(CR_EQ, CR_EQ, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_EQ);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unger_d": {
      "start_point": [
        670,
        0
      ],
      "end_point": [
        677,
        1
      ],
      "content": "static void\n_unger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CRNOT(CR_LT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_LT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ungtr_d": {
      "start_point": [
        681,
        0
      ],
      "end_point": [
        688,
        1
      ],
      "content": "static void\n_ungtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CROR(CR_GT, CR_GT, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        692,
        0
      ],
      "end_point": [
        699,
        1
      ],
      "content": "static void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CROR(CR_GT, CR_GT, CR_LT);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_GT);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ordr_d": {
      "start_point": [
        703,
        0
      ],
      "end_point": [
        710,
        1
      ],
      "content": "static void\n_ordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    CRNOT(CR_UN, CR_UN);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_UN);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unordr_d": {
      "start_point": [
        714,
        0
      ],
      "end_point": [
        720,
        1
      ],
      "content": "static void\n_unordr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPU(CR_0, r1, r2);\n    MFCR(r0);\n    EXTRWI(r0, r0, 1, CR_UN);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr_d": {
      "start_point": [
        724,
        0
      ],
      "end_point": [
        733,
        1
      ],
      "content": "static jit_word_t\n_bltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_d": {
      "start_point": [
        737,
        0
      ],
      "end_point": [
        747,
        1
      ],
      "content": "static jit_word_t\n_bler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    CREQV(CR_GT, CR_GT, CR_UN);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr_d": {
      "start_point": [
        751,
        0
      ],
      "end_point": [
        760,
        1
      ],
      "content": "static jit_word_t\n_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_d": {
      "start_point": [
        764,
        0
      ],
      "end_point": [
        774,
        1
      ],
      "content": "static jit_word_t\n_bger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    CREQV(CR_LT, CR_LT, CR_UN);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_d": {
      "start_point": [
        778,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "static jit_word_t\n_bgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner_d": {
      "start_point": [
        791,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "static jit_word_t\n_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPO(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunltr_d": {
      "start_point": [
        804,
        0
      ],
      "end_point": [
        814,
        1
      ],
      "content": "static jit_word_t\n_bunltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    CROR(CR_LT, CR_LT, CR_UN);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLT(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunler_d": {
      "start_point": [
        818,
        0
      ],
      "end_point": [
        827,
        1
      ],
      "content": "static jit_word_t\n_bunler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BLE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr_d": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        841,
        1
      ],
      "content": "static jit_word_t\n_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    CROR(CR_EQ, CR_EQ, CR_UN);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunger_d": {
      "start_point": [
        845,
        0
      ],
      "end_point": [
        854,
        1
      ],
      "content": "static jit_word_t\n_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGE(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bungtr_d": {
      "start_point": [
        858,
        0
      ],
      "end_point": [
        868,
        1
      ],
      "content": "static jit_word_t\n_bungtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    CROR(CR_GT, CR_GT, CR_UN);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BGT(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr_d": {
      "start_point": [
        872,
        0
      ],
      "end_point": [
        882,
        1
      ],
      "content": "static jit_word_t\n_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    CROR(CR_EQ, CR_LT, CR_GT);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BEQ(d);\n    return (w);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bordr_d": {
      "start_point": [
        886,
        0
      ],
      "end_point": [
        895,
        1
      ],
      "content": "static jit_word_t\n_bordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BNU(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bunordr_d": {
      "start_point": [
        899,
        0
      ],
      "end_point": [
        908,
        1
      ],
      "content": "static jit_word_t\n_bunordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    FCMPU(CR_0, r0, r1);\n    w = _jit->pc.w;\n    d = (i0 - w) & ~3;\n    BUN(d);\n    return (w);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_ldi_f": {
      "start_point": [
        912,
        0
      ],
      "end_point": [
        936,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLFS(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLFS(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        938,
        0
      ],
      "end_point": [
        962,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tLFD(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tLFD(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        964,
        0
      ],
      "end_point": [
        980,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LFSX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LFSX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLFSX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        982,
        0
      ],
      "end_point": [
        998,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r1 == _R0_REGNO) {\n\tif (r2 != _R0_REGNO)\n\t    LFDX(r0, r2, r1);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LFDX(r0, rn(reg), r2);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tLFDX(r0, r1, r2);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        1000,
        0
      ],
      "end_point": [
        1022,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_f(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LFS(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LFS(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_f(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        1024,
        0
      ],
      "end_point": [
        1046,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tldr_d(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r1 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    LFD(r0, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    LFD(r0, r1, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_d(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        1048,
        0
      ],
      "end_point": [
        1072,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTFS(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTFS(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        1074,
        0
      ],
      "end_point": [
        1098,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_bool_t\t\tinv;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tlo, hi;\n    if (can_sign_extend_short_p(i0))\n\tSTFD(r0, _R0_REGNO, i0);\n    else if (can_sign_extend_int_p(i0)) {\n\thi = (jit_int16_t)((i0 >> 16) + ((jit_uint16_t)i0 >> 15));\n\tlo = (jit_int16_t)(i0 - (hi << 16));\n\treg = jit_get_reg(jit_class_gpr);\n\tif ((inv = reg == _R0))\t\treg = jit_get_reg(jit_class_gpr);\n\tLIS(rn(reg), hi);\n\tSTFD(r0, rn(reg), lo);\n\tjit_unget_reg(reg);\n\tif (inv)\t\t\tjit_unget_reg(_R0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        1100,
        0
      ],
      "end_point": [
        1116,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STFSX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r1);\n\t    STFSX(r2, rn(reg), r0);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTFSX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        1118,
        0
      ],
      "end_point": [
        1134,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == _R0_REGNO) {\n\tif (r1 != _R0_REGNO)\n\t    STFDX(r2, r1, r0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), r0);\n\t    STFDX(r2, rn(reg), r1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else\n\tSTFDX(r2, r0, r1);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        1136,
        0
      ],
      "end_point": [
        1158,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_f(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STFS(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STFS(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_f(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        1160,
        0
      ],
      "end_point": [
        1182,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tstr_d(r0, r1);\n    else if (can_sign_extend_short_p(i0)) {\n\tif (r0 == _R0_REGNO) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), i0);\n\t    STFD(r1, rn(reg), i0);\n\t    jit_unget_reg(reg);\n\t}\n\telse\n\t    STFD(r1, r0, i0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_d(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1184,
        0
      ],
      "end_point": [
        1192,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    /* Load argument. */\n    ldr_d(r0, r1);\n\n    /* Update va_list. */\n    addi(r1, r1, sizeof(jit_float64_t));\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_ppc-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_ppc.c": {
    "jit_get_cpu": {
      "start_point": [
        133,
        0
      ],
      "end_point": [
        136,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        138,
        0
      ],
      "end_point": [
        142,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        144,
        0
      ],
      "end_point": [
        185,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = params_offset;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.alen = 0;\n    /* float conversion */\n    _jitc->function->self.aoff = alloca_offset - 8;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 42,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        187,
        0
      ],
      "end_point": [
        203,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        205,
        0
      ],
      "end_point": [
        228,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t r0, r1;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    r0 = jit_get_reg(jit_class_gpr);\n    r1 = jit_get_reg(jit_class_gpr);\n    jit_ldr(r0, JIT_SP);\n    jit_negr(r1, v);\n    jit_andi(r1, r1, -16);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, r1);\n    jit_addr(JIT_SP, JIT_SP, r1);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_str(JIT_SP, r0);\n    jit_unget_reg(r1);\n    jit_unget_reg(r0);\n    jit_dec_synth();\n}",
      "lines": 24,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        230,
        0
      ],
      "end_point": [
        240,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        242,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        261,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        263,
        0
      ],
      "end_point": [
        273,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (JIT_RET != u)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        275,
        0
      ],
      "end_point": [
        282,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        284,
        0
      ],
      "end_point": [
        294,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (JIT_FRET != u)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        296,
        0
      ],
      "end_point": [
        303,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        305,
        0
      ],
      "end_point": [
        312,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        321,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_f_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        323,
        0
      ],
      "end_point": [
        341,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t_jitc->function->vagp = _jitc->function->self.argi;\n\t_jitc->function->vafp = _jitc->function->self.argf;\n    }\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        343,
        0
      ],
      "end_point": [
        358,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else\n\toffset = _jitc->function->self.size;\n    _jitc->function->self.size += sizeof(jit_word_t);\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        360,
        0
      ],
      "end_point": [
        382,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else\n\toffset = _jitc->function->self.size + F_DISP;\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n#if __WORDSIZE == 32\n\t_jitc->function->self.argi += 2;\n#else\n\t_jitc->function->self.argi++;\n#endif\n    }\n    _jitc->function->self.size += sizeof(jit_word_t);\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        384,
        0
      ],
      "end_point": [
        406,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else\n\toffset = _jitc->function->self.size;\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n#if __WORDSIZE == 32\n\t_jitc->function->self.argi += 2;\n#else\n\t_jitc->function->self.argi++;\n#endif\n    }\n    _jitc->function->self.size += sizeof(jit_float64_t);\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        408,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        420,
        0
      ],
      "end_point": [
        430,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP, v->u.w + C_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        432,
        0
      ],
      "end_point": [
        442,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        444,
        0
      ],
      "end_point": [
        454,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP, v->u.w + S_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        456,
        0
      ],
      "end_point": [
        471,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w)) {\n#if __WORDSIZE == 32\n\tjit_movr(u, JIT_RA0 - v->u.w);\n#else\n\tjit_extr_i(u, JIT_RA0 - v->u.w);\n#endif\n    }\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        474,
        0
      ],
      "end_point": [
        484,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_ui(u, JIT_FP, v->u.w + I_DISP);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        486,
        0
      ],
      "end_point": [
        496,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_l(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        499,
        0
      ],
      "end_point": [
        509,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(JIT_RA0 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        511,
        0
      ],
      "end_point": [
        526,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    jit_inc_synth_wp(putargi, u, v);\n    assert(v->code == jit_code_arg);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(JIT_RA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        528,
        0
      ],
      "end_point": [
        538,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, JIT_FA0 - v->u.w);\n    else\n\tjit_ldxi_f(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        540,
        0
      ],
      "end_point": [
        550,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(JIT_FA0 - v->u.w, u);\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        552,
        0
      ],
      "end_point": [
        567,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_d(JIT_FA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_f(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        569,
        0
      ],
      "end_point": [
        579,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, JIT_FA0 - v->u.w);\n    else\n\tjit_ldxi_d(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        581,
        0
      ],
      "end_point": [
        591,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(JIT_FA0 - v->u.w, u);\n    else\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        593,
        0
      ],
      "end_point": [
        608,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_d(JIT_FA0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        610,
        0
      ],
      "end_point": [
        624,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, u);\n    _jitc->function->call.size += sizeof(jit_word_t);\n    jit_dec_synth();\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        626,
        0
      ],
      "end_point": [
        645,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + params_offset, JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += sizeof(jit_word_t);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        647,
        0
      ],
      "end_point": [
        689,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf) &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\tjit_movr_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n\t/* in case of excess arguments */\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n#if __WORDSIZE == 32\n\t    _jitc->function->call.argi += 2;\n\t    if (!jit_arg_reg_p(_jitc->function->call.argi - 1))\n\t\t--_jitc->function->call.argi;\n#else\n\t    _jitc->function->call.argi++;\n#endif\n\t}\n    }\n    else if (jit_arg_reg_p(_jitc->function->call.argi\n#if __WORDSIZE == 32\n\t\t\t  + 1\n#endif\n\t\t\t   )) {\n\t/* use reserved 8 bytes area */\n\tjit_stxi_d(alloca_offset - 8, JIT_FP, u);\n\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t alloca_offset - 8);\n\t_jitc->function->call.argi++;\n#if __WORDSIZE == 32\n\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t alloca_offset - 4);\n\t_jitc->function->call.argi++;\n#endif\n    }\n    else\n\tjit_stxi_f(_jitc->function->call.size + params_offset + F_DISP,\n\t\t   JIT_SP, u);\n    _jitc->function->call.size += sizeof(jit_word_t);\n    jit_dec_synth();\n}",
      "lines": 43,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        737,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf) &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\tjit_movi_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n\t    /* in case of excess arguments */\n#if __WORDSIZE == 32\n\t_jitc->function->call.argi += 2;\n\tif (!jit_arg_reg_p(_jitc->function->call.argi - 1))\n\t    --_jitc->function->call.argi;\n#else\n\t_jitc->function->call.argi++;\n#endif\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tif (jit_arg_reg_p(_jitc->function->call.argi\n#if __WORDSIZE == 32\n\t\t\t  + 1\n#endif\n\t\t\t  )) {\n\t    /* use reserved 8 bytes area */\n\t    jit_stxi_d(alloca_offset - 8, JIT_FP, regno);\n\t    jit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t     alloca_offset - 8);\n\t    _jitc->function->call.argi++;\n#if __WORDSIZE == 32\n\t    jit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t     alloca_offset - 4);\n\t    _jitc->function->call.argi++;\n#endif\n\t}\n\telse\n\t    jit_stxi_f(_jitc->function->call.size + params_offset + F_DISP,\n\t\t       JIT_SP, regno);\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += sizeof(jit_word_t);\n    jit_dec_synth();\n}",
      "lines": 47,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        739,
        0
      ],
      "end_point": [
        786,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf) &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\tjit_movr_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n\t    /* in case of excess arguments */\n#if __WORDSIZE == 32\n\t_jitc->function->call.argi += 2;\n\tif (!jit_arg_reg_p(_jitc->function->call.argi - 1))\n\t    --_jitc->function->call.argi;\n#else\n\t_jitc->function->call.argi++;\n#endif\n    }\n    else if (jit_arg_reg_p(_jitc->function->call.argi\n#if __WORDSIZE == 32\n\t\t\t  + 1\n#endif\n\t\t\t   )) {\n\t/* use reserved 8 bytes area */\n\tjit_stxi_d(alloca_offset - 8, JIT_FP, u);\n\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t alloca_offset - 8);\n\t_jitc->function->call.argi++;\n#if __WORDSIZE == 32\n\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t alloca_offset - 4);\n\t_jitc->function->call.argi++;\n#endif\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size + params_offset, JIT_SP, u);\n#if __WORDSIZE == 32\n\t    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_SP,\n\t\t\t _jitc->function->call.size + params_offset);\n\t\t_jitc->function->call.argi++;\n\t    }\n#endif\n    }\n    _jitc->function->call.size += sizeof(jit_float64_t);\n    jit_dec_synth();\n}",
      "lines": 48,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        788,
        0
      ],
      "end_point": [
        844,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf) &&\n\t!(_jitc->function->call.call & jit_call_varargs)) {\n\tjit_movi_d(JIT_FA0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n\t/* in case of excess arguments */\n\tif (jit_arg_reg_p(_jitc->function->call.argi)) {\n#if __WORDSIZE == 32\n\t    _jitc->function->call.argi += 2;\n\t    if (!jit_arg_reg_p(_jitc->function->call.argi - 1))\n\t\t--_jitc->function->call.argi;\n#else\n\t    _jitc->function->call.argi++;\n#endif\n\t}\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tif (jit_arg_reg_p(_jitc->function->call.argi\n#if __WORDSIZE == 32\n\t\t\t  + 1\n#endif\n\t\t\t  )) {\n\t    /* use reserved 8 bytes area */\n\t    jit_stxi_d(alloca_offset - 8, JIT_FP, regno);\n\t    jit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t     alloca_offset - 8);\n\t    _jitc->function->call.argi++;\n#if __WORDSIZE == 32\n\t    jit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_FP,\n\t\t     alloca_offset - 4);\n\t    _jitc->function->call.argi++;\n#endif\n\t}\n\telse {\n\t    jit_stxi_d(_jitc->function->call.size + params_offset,\n\t\t       JIT_SP, regno);\n#if __WORDSIZE == 32\n\t    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\t\tjit_ldxi(JIT_RA0 - _jitc->function->call.argi, JIT_SP,\n\t\t\t _jitc->function->call.size + params_offset);\n\t\t_jitc->function->call.argi++;\n\t    }\n#endif\n\t}\n\tjit_unget_reg(regno);\n    }\n    _jitc->function->call.size += sizeof(jit_float64_t);\n    jit_dec_synth();\n}",
      "lines": 57,
      "depth": 17,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        846,
        0
      ],
      "end_point": [
        864,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tif (spec & jit_class_gpr) {\n\t    regno = JIT_RA0 - regno;\n\t    if (regno >= 0 && regno < node->v.w)\n\t\treturn (1);\n\t}\n\telse if (spec & jit_class_fpr) {\n\t    regno = JIT_FA0 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n    return (0);\n}",
      "lines": 19,
      "depth": 14,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        866,
        0
      ],
      "end_point": [
        880,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = _jitc->function->call.argi;\n    call->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        882,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        899,
        0
      ],
      "end_point": [
        905,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_c);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        907,
        0
      ],
      "end_point": [
        913,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_uc);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        915,
        0
      ],
      "end_point": [
        921,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_s);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        923,
        0
      ],
      "end_point": [
        929,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_us);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        931,
        0
      ],
      "end_point": [
        942,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_i);\n#if __WORDSIZE == 32\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n#else\n    jit_extr_i(r0, JIT_RET);\n#endif\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        945,
        0
      ],
      "end_point": [
        951,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_ui);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        953,
        0
      ],
      "end_point": [
        960,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_l);\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        963,
        0
      ],
      "end_point": [
        969,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_f);\n    jit_retval_d(r0);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        971,
        0
      ],
      "end_point": [
        978,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth(retval_d);\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        980,
        0
      ],
      "end_point": [
        1664,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_word_t\t patch_offset;\n#if __powerpc__\n\tjit_word_t\t prolog_offset;\n#endif\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n#if __powerpc__ && !ABI_ELFv2\n    undo.prolog_offset = 0;\n    for (node = _jitc->head; node; node = node->next)\n\tif (node->code != jit_code_label &&\n\t    node->code != jit_code_note &&\n\t    node->code != jit_code_name)\n\t    break;\n    if (node && (node->code != jit_code_prolog ||\n\t\t !(_jitc->functions.ptr + node->w.w)->assume_frame)) {\n\t/* code may start with a jump so add an initial function descriptor */\n\tword = _jit->pc.w + sizeof(void*) * 3;\n\tiw(word);\t\t\t/* addr */\n\tiw(0);\t\t\t\t/* toc */\n\tiw(0);\t\t\t\t/* env */\n    }\n#endif\n\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n#  if __WORDSIZE == 64\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n#  endif\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n#  if __WORDSIZE == 64\n\t\tcase_rr(hton, _ul);\n#  endif\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n#  if __WORDSIZE == 64\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n#  endif\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n#endif\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n#endif\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n#if __powerpc__ && !ABI_ELFv2\n\t\t    if (_jit->pc.uc == _jit->code.ptr + sizeof(void*) * 3)\n\t\t\t_jitc->jump = 1;\n#endif\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    (void)jmpi_p(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    word = calli_p(temp->u.w);\n\t\t    if (!(temp->flag & jit_flag_patch))\n\t\t\tpatch(word, node);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n#if __powerpc__ && !ABI_ELFv2\n\t\tundo.prolog_offset = _jitc->prolog.offset;\n#endif\n\t    restart_function:\n\t\t_jitc->again = 0;\n#if __powerpc__ && !ABI_ELFv2\n\t\tif (_jitc->jump && !_jitc->function->assume_frame) {\n\t\t    /* remember prolog to hide offset adjustment for a jump\n\t\t     * to the start of a function, what is expected to be\n\t\t     * a common practice as first jit instruction */\n\t\t    if (_jitc->prolog.offset >= _jitc->prolog.length) {\n\t\t\t_jitc->prolog.length += 16;\n\t\t\tjit_realloc((jit_pointer_t *)&_jitc->prolog.ptr,\n\t\t\t\t    (_jitc->prolog.length - 16) *\n\t\t\t\t    sizeof(jit_word_t),\n\t\t\t\t    _jitc->prolog.length * sizeof(jit_word_t));\n\t\t    }\n\t\t    _jitc->prolog.ptr[_jitc->prolog.offset++] = _jit->pc.w;\n\t\t    /* function descriptor */\n\t\t    word = _jit->pc.w + sizeof(void*) * 3;\n\t\t    iw(word);\t\t\t\t/* addr */\n\t\t    iw(0);\t\t\t\t/* toc */\n\t\t    iw(0);\t\t\t\t/* env */\n\t\t}\n#endif\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n#if __powerpc__ && !ABI_ELFv2\n\t\t    _jitc->prolog.offset = undo.prolog_offset;\n#endif\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\n\t    case jit_code_arg:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n#if __WORDSIZE == 64\n\t    case jit_code_getarg_ui:\t\tcase jit_code_getarg_l:\n#endif\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n#if __WORDSIZE == 64\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n#endif\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrf\n#undef case_rrw\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 685,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1671,
        0
      ],
      "end_point": [
        1682,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__GNUC__)\n    jit_word_t\t\tf, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n    __clear_cache((void *)f, (void *)t);\n#endif\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1684,
        0
      ],
      "end_point": [
        1692,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n#if __WORDSIZE == 32\n    ldxi_i(rn(r0), rn(r1), i0);\n#else\n    ldxi_l(rn(r0), rn(r1), i0);\n#endif\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1694,
        0
      ],
      "end_point": [
        1702,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n#if __WORDSIZE == 32\n    stxi_i(i0, rn(r0), rn(r1));\n#else\n    stxi_l(i0, rn(r0), rn(r1));\n#endif\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1704,
        0
      ],
      "end_point": [
        1708,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1710,
        0
      ],
      "end_point": [
        1714,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1716,
        0
      ],
      "end_point": [
        1736,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\t flag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_print.c": {
    "_jit_print": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "content": "void\n_jit_print(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n\n    if ((node = _jitc->head)) {\n\tjit_print_node(node);\n\tfor (node = node->next; node; node = node->next) {\n\t    print_chr('\\n');\n\t    jit_print_node(node);\n\t}\n\tprint_chr('\\n');\n    }\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_print_node": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        366,
        1
      ],
      "content": "void\n_jit_print_node(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_block_t\t\t*block;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n\n    if (node->code == jit_code_label ||\n\tnode->code == jit_code_prolog || node->code == jit_code_epilog) {\n\tprint_chr('L');\n\tprint_dec(node->v.w);\n\tprint_chr(':');\n\tblock = _jitc->blocks.ptr + node->v.w;\n\tfor (offset = 0; offset < _jitc->reglen; offset++) {\n\t    if (jit_regset_tstbit(&block->reglive, offset)) {\n\t\tprint_chr(' ');\n\t\tprint_reg(offset);\n\t    }\n\t}\n\tif (node->code == jit_code_prolog ||\n\t    node->code == jit_code_epilog) {\n\t    print_str(\" /* \");\n\t    print_str(code_name[node->code]);\n\t    print_str(\" */\");\n\t}\n\treturn;\n    }\n    value = jit_classify(node->code) &\n\t(jit_cc_a0_int|jit_cc_a0_flt|jit_cc_a0_dbl|jit_cc_a0_jmp|\n\t jit_cc_a0_reg|jit_cc_a0_rlh|jit_cc_a0_arg|\n\t jit_cc_a1_reg|jit_cc_a1_int|jit_cc_a1_flt|jit_cc_a1_dbl|jit_cc_a1_arg|\n\t jit_cc_a2_reg|jit_cc_a2_int|jit_cc_a2_flt|jit_cc_a2_dbl);\n    if (!(node->flag & jit_flag_synth) && ((value & jit_cc_a0_jmp) ||\n\t\t\t\t\t   node->code == jit_code_finishr ||\n\t\t\t\t\t   node->code == jit_code_finishi))\n\tprint_str(\"    \");\n    else\n\tprint_chr('\\t');\n    if (node->flag & jit_flag_synth)\n\tprint_str(\" \\\\__ \");\n    print_str(code_name[node->code]);\n    switch (node->code) {\n\tr:\n\t    print_chr(' ');\tprint_reg(node->u.w);\treturn;\n\tw:\n\t    print_chr(' ');\tprint_hex(node->u.w);\treturn;\n\tf:\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float32_t *)node->u.n->u.w);\n\t    else\n\t\tprint_flt(node->u.f);\n\t    return;\n\td:\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float64_t *)node->u.n->u.w);\n\t    else\n\t\tprint_flt(node->u.d);\n\t    return;\n\tn:\n\t    print_chr(' ');\n\t    if (!(node->flag & jit_flag_node))\n\t\tprint_ptr(node->u.p);\n\t    else {\n\t\tprint_chr('L');\n\t\tprint_dec(node->u.n->v.w);\n\t    }\n\t    return;\n\ta:\n\t    print_chr(' ');\tprint_arg(node);\treturn;\n\tr_r:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\treturn;\n\tr_w:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_hex(node->v.w);\treturn;\n\tr_f:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float32_t *)node->v.n->u.w);\n\t    else\n\t\tprint_flt(node->v.f);\n\t    return;\n\tr_d:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float64_t *)node->v.n->u.w);\n\t    else\n\t\tprint_flt(node->v.d);\n\t    return;\n\tr_a:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_arg(node->v.n);\n\t    return;\n\tw_r:\n\t    print_chr(' ');\tprint_hex(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);   return;\n\tw_w:\n\t    print_chr(' ');\tprint_hex(node->u.w);\n\t    print_chr(' ');\tprint_hex(node->v.w);   return;\n\tw_a:\n\t    print_chr(' ');\tprint_hex(node->u.w);\n\t    print_chr(' ');\tprint_arg(node->v.n);\n\t    return;\n\tf_a:\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float32_t *)node->u.n->u.w);\n\t    else\n\t\tprint_flt(node->u.f);\n\t    print_chr(' ');\tprint_arg(node->v.n);\n\t    return;\n\td_a:\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float64_t *)node->u.n->u.w);\n\t    else\n\t\tprint_flt(node->u.d);\n\t    print_chr(' ');\tprint_arg(node->v.n);\n\t    return;\n\tr_r_r:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_reg(node->w.w);   return;\n\tr_r_w:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_hex(node->w.w);   return;\n\tq_r_r:\n\t    print_str(\" (\");\tprint_reg(node->u.q.l);\n\t    print_chr(' ');\tprint_reg(node->u.q.h);\n\t    print_str(\") \");\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_reg(node->w.w);   return;\n\tq_r_w:\n\t    print_str(\" (\");\tprint_reg(node->u.q.l);\n\t    print_chr(' ');\tprint_reg(node->u.q.h);\n\t    print_str(\") \");\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_hex(node->w.w);   return;\n\tr_r_f:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float32_t *)node->w.n->u.w);\n\t    else\n\t\tprint_flt(node->w.f);\n\t    return;\n\tr_r_d:\n\t    print_chr(' ');\tprint_reg(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float64_t *)node->w.n->u.w);\n\t    else\n\t\tprint_flt(node->w.d);\n\t    return;\n\tw_r_r:\n\t    print_chr(' ');\tprint_hex(node->u.w);\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_reg(node->w.w);   return;\n\tn_r_r:\n\t    print_chr(' ');\n\t    if (!(node->flag & jit_flag_node))\n\t\tprint_ptr(node->u.p);\n\t    else {\n\t\tprint_chr('L');\n\t\tprint_dec(node->u.n->v.w);\n\t    }\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_reg(node->w.w);   return;\n\tn_r_w:\n\t    print_chr(' ');\n\t    if (!(node->flag & jit_flag_node))\n\t\tprint_ptr(node->u.p);\n\t    else {\n\t\tprint_chr('L');\n\t\tprint_dec(node->u.n->v.w);\n\t    }\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\tprint_hex(node->w.w);   return;\n\tn_r_f:\n\t    print_chr(' ');\n\t    if (!(node->flag & jit_flag_node))\n\t\tprint_ptr(node->u.p);\n\t    else{\n\t\tprint_chr('L');\n\t\tprint_dec(node->u.n->v.w);\n\t    }\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float32_t *)node->w.n->u.w);\n\t    else\n\t\tprint_flt(node->w.f);\n\t    return;\n\tn_r_d:\n\t    print_chr(' ');\n\t    if (!(node->flag & jit_flag_node))\n\t\tprint_ptr(node->u.p);\n\t    else {\n\t\tprint_chr('L');\n\t\tprint_dec(node->u.n->v.w);\n\t    }\n\t    print_chr(' ');\tprint_reg(node->v.w);\n\t    print_chr(' ');\n\t    if (node->flag & jit_flag_data)\n\t\tprint_flt(*(jit_float64_t *)node->w.n->u.w);\n\t    else\n\t\tprint_flt(node->w.d);\n\t    return;\n\tcase jit_code_name:\n\t    print_chr(' ');\n\t    if (node->v.p && _jitc->emit)\n\t\tprint_str(node->v.n->u.p);\n\t    break;\n\tcase jit_code_note:\n\t    print_chr(' ');\n\t    if (node->v.p && _jitc->emit)\n\t\tprint_str(node->v.n->u.p);\n\t    if (node->v.p && _jitc->emit && node->w.w)\n\t\tprint_chr(':');\n\t    if (node->w.w)\n\t\tprint_dec(node->w.w);\n\t    break;\n\tcase jit_code_data:\n\tcase jit_code_label:\n\tcase jit_code_ellipsis:\n\tcase jit_code_prolog:\tcase jit_code_epilog:\n\tcase jit_code_ret:\tcase jit_code_prepare:\n\t    break;\n\tcase jit_code_save:\tcase jit_code_load:\n\t    goto r;\n\tdefault:\n\t    switch (value) {\n\t\tcase jit_cc_a0_reg:\n\t\tcase jit_cc_a0_reg|jit_cc_a0_chg:\n\t\tcase jit_cc_a0_reg|jit_cc_a0_jmp:\n\t\t    goto r;\n\t\tcase jit_cc_a0_int:\n\t\t    goto w;\n\t\tcase jit_cc_a0_flt:\n\t\t    goto f;\n\t\tcase jit_cc_a0_dbl:\n\t\t    goto d;\n\t\tcase jit_cc_a0_jmp:\n\t\t    goto n;\n\t\tcase jit_cc_a0_int|jit_cc_a0_arg:\n\t\t    goto a;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_reg:\n\t\t    goto r_r;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_int:\n\t\t    goto r_w;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_flt:\n\t\t    goto r_f;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_dbl:\n\t\t    goto r_d;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_arg:\n\t\t    goto r_a;\n\t\tcase jit_cc_a0_int|jit_cc_a1_reg:\n\t\t    goto w_r;\n\t\tcase jit_cc_a0_int|jit_cc_a1_int:\n\t\t    goto w_w;\n\t\tcase jit_cc_a0_int|jit_cc_a1_arg:\n\t\t    goto w_a;\n\t\tcase jit_cc_a0_flt|jit_cc_a1_arg:\n\t\t    goto f_a;\n\t\tcase jit_cc_a0_dbl|jit_cc_a1_arg:\n\t\t    goto d_a;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_reg|jit_cc_a2_reg:\n\t\t    goto r_r_r;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_reg|jit_cc_a2_int:\n\t\t    goto r_r_w;\n\t\tcase jit_cc_a0_reg|jit_cc_a0_rlh|\n\t\t     jit_cc_a1_reg|jit_cc_a2_reg:\n\t\t    goto q_r_r;\n\t\tcase jit_cc_a0_reg|jit_cc_a0_rlh|\n\t\t     jit_cc_a1_reg|jit_cc_a2_int:\n\t\t    goto q_r_w;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_reg|jit_cc_a2_flt:\n\t\t    goto r_r_f;\n\t\tcase jit_cc_a0_reg|jit_cc_a1_reg|jit_cc_a2_dbl:\n\t\t    goto r_r_d;\n\t\tcase jit_cc_a0_int|jit_cc_a1_reg|jit_cc_a2_reg:\n\t\t    goto w_r_r;\n\t\tcase jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_reg:\n\t\t    goto n_r_r;\n\t\tcase jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_int:\n\t\t    goto n_r_w;\n\t\tcase jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_flt:\n\t\t    goto n_r_f;\n\t\tcase jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_dbl:\n\t\t    goto n_r_d;\n\t\tdefault:\n\t\t    abort();\n\t    }\n\t    break;\n    }\n}",
      "lines": 301,
      "depth": 22,
      "decorators": [
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_rewind.c": {
    "_free_synth_list": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "content": "static jit_node_t *\n_free_synth_list(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_node_t\t\t*next;\n    next = node->next;\n    free_node(node);\n    for (node = next; node && (node->flag & jit_flag_synth); node = next) {\n\tnext = node->next;\n\tfree_node(node);\n    }\n    return (next);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_free_synth_list(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_rewind_prolog": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        143,
        1
      ],
      "content": "static void\n_rewind_prolog(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*next;\n    _jitc->function->self.size = stack_framesize;\n#if __arm__\n    assert(jit_cpu.abi);\n    _jitc->function->self.size += 64;\n#endif\n#if __mips__ && NEW_ABI\n    /* Only add extra stack space if there are varargs\n     * arguments in registers. */\n    assert(jit_arg_reg_p(_jitc->function->self.argi));\n    _jitc->function->self.size += 64;\n#endif\n    _jitc->function->self.argi =\n\t_jitc->function->self.argf = _jitc->function->self.argn = 0;\n    _jitc->tail = _jitc->function->prolog;\n    node = _jitc->tail->next;\n    _jitc->tail->next = (jit_node_t *)0;\n    _jitc->tail->link = (jit_node_t *)0;\n    for (; node; node = next) {\n\tnext = node->next;\n\tswitch (node->code) {\n\t    case jit_code_arg:\n\t\tnode->next = (jit_node_t *)0;\n\t\tjit_make_arg(node);\n\t\tbreak;\n\t    case jit_code_arg_f:\n\t\tnode->next = (jit_node_t *)0;\n\t\tjit_make_arg_f(node);\n\t\tbreak;\n\t    case jit_code_arg_d:\n\t\tnode->next = (jit_node_t *)0;\n\t\tjit_make_arg_d(node);\n\t\tbreak;\n\t    case jit_code_getarg_c:\n\t\tjit_getarg_c(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_uc:\n\t\tjit_getarg_uc(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_s:\n\t\tjit_getarg_s(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_us:\n\t\tjit_getarg_us(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_i:\n\t\tjit_getarg_i(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_f:\n\t\tjit_getarg_f(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_getarg_d:\n\t\tjit_getarg_d(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargr:\n\t\tjit_putargr(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargi:\n\t\tjit_putargi(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargr_f:\n\t\tjit_putargr_f(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargi_f:\n\t\tjit_putargi_f(node->u.f, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargr_d:\n\t\tjit_putargr_d(node->u.w, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_putargi_d:\n\t\tjit_putargi_d(node->u.d, node->v.n);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    default:\n\t\tnode->next = (jit_node_t *)0;\n\t\tlink_node(node);\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 96,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rewind_prepare": {
      "start_point": [
        145,
        0
      ],
      "end_point": [
        190,
        1
      ],
      "content": "static void\n_rewind_prepare(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*next;\n    _jitc->function->call.argi =\n\t_jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->tail = _jitc->prepare;\n    node = _jitc->tail->next;\n    _jitc->tail->next = (jit_node_t *)0;\n    _jitc->tail->link = (jit_node_t *)0;\n    for (; node; node = next) {\n\tnext = node->next;\n\tswitch (node->code) {\n\t    case jit_code_pushargr:\n\t\tjit_pushargr(node->u.w);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_pushargi:\n\t\tjit_pushargi(node->u.w);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_pushargr_f:\n\t\tjit_pushargr_f(node->u.w);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_pushargi_f:\n\t\tjit_pushargi_f(node->u.f);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_pushargr_d:\n\t\tjit_pushargr_d(node->u.w);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    case jit_code_pushargi_d:\n\t\tjit_pushargi_d(node->u.d);\n\t\tnext = free_synth_list(node);\n\t\tbreak;\n\t    default:\n\t\tnode->next = (jit_node_t *)0;\n\t\tlink_node(node);\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 46,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_s390-cpu.c": {
    "_E": {
      "start_point": [
        1310,
        0
      ],
      "end_point": [
        1322,
        1
      ],
      "content": "static void\n_E(jit_state_t *_jit, _ui Op)\n{\n    union {\n\tstruct {\n\t    _us\top;\n\t} b;\n\t_us\ts;\n    } i0;\n    i0.b.op = Op;\n    assert(i0.b.op == Op);\n    is(i0.s);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_I": {
      "start_point": [
        1324,
        0
      ],
      "end_point": [
        1339,
        1
      ],
      "content": "static void\n_I(jit_state_t *_jit, _ui Op, _ui I)\n{\n    union {\n\tstruct {\n\t    _us\top : 8;\n\t    _us\ti  : 8;\n\t} b;\n\t_us\ts;\n    } i0;\n    i0.b.op = Op;\n    i0.b.i  = I;\n    assert(i0.b.op == Op);\n    assert(i0.b.i  == I);\n    is(i0.s);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RR": {
      "start_point": [
        1341,
        0
      ],
      "end_point": [
        1359,
        1
      ],
      "content": "static void\n_RR(jit_state_t *_jit, _ui Op, _ui R1, _ui R2)\n{\n    union {\n\tstruct {\n\t    _us\top : 8;\n\t    _us\tr1 : 4;\n\t    _us\tr2 : 4;\n\t} b;\n\t_us\ts;\n    } i0;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.r2 = R2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.r2 == R2);\n    is(i0.s);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RRE": {
      "start_point": [
        1361,
        0
      ],
      "end_point": [
        1387,
        1
      ],
      "content": "static void\n_RRE(jit_state_t *_jit, _ui Op, _ui R1, _ui R2)\n{\n    union {\n\tstruct {\n\t    _us\top;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\t_  : 8;\n\t    _us\tr1 : 4;\n\t    _us\tr2 : 4;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i1.b._ = 0;\n    i1.b.r1 = R1;\n    i1.b.r2 = R2;\n    assert(i0.b.op == Op);\n    assert(i1.b.r1 == R1);\n    assert(i1.b.r2 == R2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RRF": {
      "start_point": [
        1389,
        0
      ],
      "end_point": [
        1419,
        1
      ],
      "content": "static void\n_RRF(jit_state_t *_jit, _ui Op, _ui R3, _ui M4, _ui R1, _ui R2)\n{\n    union {\n\tstruct {\n\t    _us\top;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tr3 : 4;\n\t    _us\tm4 : 4;\n\t    _us\tr1 : 4;\n\t    _us\tr2 : 4;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i1.b.r3 = R3;\n    i1.b.m4 = M4;\n    i1.b.r1 = R1;\n    i1.b.r2 = R2;\n    assert(i0.b.op == Op);\n    assert(i1.b.r3 == R3);\n    assert(i1.b.m4 == M4);\n    assert(i1.b.r1 == R1);\n    assert(i1.b.r2 == R2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 31,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RX": {
      "start_point": [
        1421,
        0
      ],
      "end_point": [
        1451,
        1
      ],
      "content": "static void\n_RX(jit_state_t *_jit, _ui Op, _ui R1, _ui X2, _ui B2, _ui D2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tx2 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.x2 = X2;\n    i1.b.b2 = B2;\n    i1.b.d2 = D2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.x2 == X2);\n    assert(i1.b.b2 == B2);\n    assert(i1.b.d2 == D2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 31,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RXE": {
      "start_point": [
        1453,
        0
      ],
      "end_point": [
        1494,
        1
      ],
      "content": "static void\n_RXE(jit_state_t *_jit, _ui Op, _ui R1, _ui X2, _ui B2, _ui D2, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tx2 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_ui\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\t_  :  8;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i2.b._ = 0;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.x2 = X2;\n    i1.b.b2 = B2;\n    i1.b.d2 = D2;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.x2 == X2);\n    assert(i1.b.b2 == B2);\n    assert(i1.b.d2 == D2);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 42,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RXF": {
      "start_point": [
        1496,
        0
      ],
      "end_point": [
        1540,
        1
      ],
      "content": "static void\n_RXF(jit_state_t *_jit, _ui Op, _ui R3, _ui X2, _ui B2, _ui D2, _ui R1, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr3 :  4;\n\t    _us\tx2 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\tr1 :  4;\n\t    _us\t_  :  4;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i2.b._ = 0;\n    i0.b.op = Op;\n    i0.b.r3 = R3;\n    i0.b.x2 = X2;\n    i1.b.b2 = B2;\n    i1.b.d2 = D2;\n    i2.b.r1 = R1;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r3 == R3);\n    assert(i0.b.x2 == X2);\n    assert(i1.b.b2 == B2);\n    assert(i1.b.d2 == D2);\n    assert(i2.b.r1 == R1);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 45,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RXY": {
      "start_point": [
        1542,
        0
      ],
      "end_point": [
        1584,
        1
      ],
      "content": "static void\n_RXY(jit_state_t *_jit, _ui Op, _ui R1, _ui X2, _ui B2, _ui D2, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tx2 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\tdl : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\tdh :  8;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i0.s = i1.s = i2.s = 0;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.x2 = X2;\n    i1.b.b2 = B2;\n    i1.b.dl = D2 & 0xfff;\n    i2.b.dh = D2 >> 12;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.x2 == X2);\n    assert(i1.b.b2 == B2);\n    assert(i2.b.dh == D2 >> 12);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 43,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RS": {
      "start_point": [
        1586,
        0
      ],
      "end_point": [
        1617,
        1
      ],
      "content": "static void\n_RS(jit_state_t *_jit, _ui Op, _ui R1, _ui R3, _ui B2, _ui D2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tr3 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.s = i1.s = 0;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.r3 = R3;\n    i1.b.b2 = B2;\n    i1.b.d2 = D2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.r3 == R3);\n    assert(i1.b.b2 == B2);\n    assert(i1.b.d2 == D2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 32,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RSL": {
      "start_point": [
        1619,
        0
      ],
      "end_point": [
        1659,
        1
      ],
      "content": "static void\n_RSL(jit_state_t *_jit, _ui Op, _ui L1, _ui B1, _ui D1, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tl1 :  4;\n\t    _us _  :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb1 :  4;\n\t    _us\td1 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\t_  :  8;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i0.b._ = 0;\n    i2.b._ = 0;\n    i0.b.op = Op;\n    i0.b.l1 = L1;\n    i1.b.b1 = B1;\n    i1.b.d1 = D1;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.l1 == L1);\n    assert(i1.b.b1 == B1);\n    assert(i1.b.d1 == D1);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 41,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RSI": {
      "start_point": [
        1661,
        0
      ],
      "end_point": [
        1688,
        1
      ],
      "content": "static void\n_RSI(jit_state_t *_jit, _ui Op, _ui R1, _ui R3, _ui I2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tr3 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\ti2;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.r3 = R3;\n    i1.b.i2 = I2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.r3 == R3);\n    assert(i1.b.i2 == I2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 28,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RIE": {
      "start_point": [
        1690,
        0
      ],
      "end_point": [
        1728,
        1
      ],
      "content": "static void\n_RIE(jit_state_t *_jit, _ui Op, _ui R1, _ui R3, _ui I2, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tr1 :  4;\n\t    _us\tr3 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\ti2;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\t_  :  8;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i2.b._ = 0;\n    i0.b.op = Op;\n    i0.b.r1 = R1;\n    i0.b.r3 = R3;\n    i1.b.i2 = I2;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.r3 == R3);\n    assert(i1.b.i2 == I2);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 39,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_RIL": {
      "start_point": [
        1730,
        0
      ],
      "end_point": [
        1758,
        1
      ],
      "content": "static void\n_RIL(jit_state_t *_jit, _ui Op, _ui R1, _ui Op2, _ui I2)\n{\n    union {\n\tstruct {\n\t    _us\to1 :  8;\n\t    _us\tr1 :  4;\n\t    _us\to2 :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _ui\tih : 16;\n\t    _ui\til : 16;\n\t} b;\n\t_ui\ti;\n    } i12;\n    i0.b.o1 = Op;\n    i0.b.r1 = R1;\n    i0.b.o2 = Op2;\n    i12.i   = I2;\n    assert(i0.b.o1 == Op);\n    assert(i0.b.r1 == R1);\n    assert(i0.b.o2 == Op2);\n    is(i0.s);\n    is(i12.b.ih);\n    is(i12.b.il);\n}",
      "lines": 29,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_SI": {
      "start_point": [
        1760,
        0
      ],
      "end_point": [
        1787,
        1
      ],
      "content": "static void\n_SI(jit_state_t *_jit, _ui Op, _ui I2, _ui B1, _ui D1)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\ti2 :  8;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb1 :  4;\n\t    _us\td1 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i0.b.i2 = I2;\n    i1.b.b1 = B1;\n    i1.b.d1 = D1;\n    assert(i0.b.op == Op);\n    assert(i0.b.i2 == I2);\n    assert(i1.b.b1 == B1);\n    assert(i1.b.d1 == D1);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 28,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_SIY": {
      "start_point": [
        1789,
        0
      ],
      "end_point": [
        1827,
        1
      ],
      "content": "static void\n_SIY(jit_state_t *_jit, _ui Op, _ui I2, _ui B1, _ui D1, _ui Op2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\ti2 :  8;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb1 :  4;\n\t    _us\tdl : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\tdh :  8;\n\t    _us\top :  8;\n\t} b;\n\t_us\ts;\n    } i2;\n    i0.b.op = Op;\n    i0.b.i2 = I2;\n    i1.b.b1 = B1;\n    i1.b.dl = D1 & 0xfff;\n    i2.b.dh = D1 >> 8;\n    i2.b.op = Op2;\n    assert(i0.b.op == Op);\n    assert(i0.b.i2 == I2);\n    assert(i1.b.b1 == B1);\n    assert(i2.b.dh == D1 >> 8);\n    assert(i2.b.op == Op2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 39,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_S": {
      "start_point": [
        1829,
        0
      ],
      "end_point": [
        1853,
        1
      ],
      "content": "static void\n_S(jit_state_t *_jit, _ui Op, _ui B2, _ui D2)\n{\n    union {\n\tstruct {\n\t    _us\top;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    i0.b.op = Op;\n    i1.b.b2 = B2;\n    i1.b.d2 = D2;\n    assert(i0.b.op == Op);\n    assert(i1.b.b2 == B2);\n    assert(i1.b.d2 == D2);\n    is(i0.s);\n    is(i1.s);\n}",
      "lines": 25,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_SS": {
      "start_point": [
        1855,
        0
      ],
      "end_point": [
        1897,
        1
      ],
      "content": "static void\n_SS(jit_state_t *_jit, _ui Op, _ui LL, _ui LH, _ui B1, _ui D1, _ui B2, _ui D2)\n{\n    union {\n\tstruct {\n\t    _us\top :  8;\n\t    _us\tll :  4;\n\t    _us\tlh :  4;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb1 :  4;\n\t    _us\td1 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i2;\n    i0.b.op = Op;\n    i0.b.ll = LL;\n    i0.b.lh = LH;\n    i1.b.b1 = B1;\n    i1.b.d1 = D1;\n    i2.b.b2 = B2;\n    i2.b.d2 = D2;\n    assert(i0.b.op == Op);\n    assert(i0.b.ll == LL);\n    assert(i0.b.lh == LH);\n    assert(i1.b.b1 == B1);\n    assert(i1.b.d1 == D1);\n    assert(i2.b.b2 == B2);\n    assert(i2.b.d2 == D2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 43,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_SSE": {
      "start_point": [
        1899,
        0
      ],
      "end_point": [
        1935,
        1
      ],
      "content": "static void\n_SSE(jit_state_t *_jit, _ui Op, _ui B1, _ui D1, _ui B2, _ui D2)\n{\n    union {\n\tstruct {\n\t    _us\top;\n\t} b;\n\t_us\ts;\n    } i0;\n    union {\n\tstruct {\n\t    _us\tb1 :  4;\n\t    _us\td1 : 12;\n\t} b;\n\t_us\ts;\n    } i1;\n    union {\n\tstruct {\n\t    _us\tb2 :  4;\n\t    _us\td2 : 12;\n\t} b;\n\t_us\ts;\n    } i2;\n    i0.b.op = Op;\n    i1.b.b1 = B1;\n    i1.b.d1 = D1;\n    i2.b.b2 = B2;\n    i2.b.d2 = D2;\n    assert(i0.b.op == Op);\n    assert(i1.b.b1 == B1);\n    assert(i1.b.d1 == D1);\n    assert(i2.b.b2 == B2);\n    assert(i2.b.d2 == D2);\n    is(i0.s);\n    is(i1.s);\n    is(i2.s);\n}",
      "lines": 37,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        1939,
        0
      ],
      "end_point": [
        1947,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t c)\n{\n    assert(c >= 0 && !(c & 1));\n    while (c) {\n\tNOPR(_R7_REGNO);\n\tc -= 2;\n    }\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xdivr": {
      "start_point": [
        1949,
        0
      ],
      "end_point": [
        1963,
        1
      ],
      "content": "static jit_int32_t\n_xdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tregno;\n    regno = jit_get_reg_pair();\n#if __WORDSIZE == 32\n    movr(rn(regno), r0);\n    SRDA(rn(regno), 32, 0);\n#else\n    movr(rn(regno) + 1, r0);\n#endif\n    DIVREM_(rn(regno), r1);\n    jit_unget_reg_pair(regno);\n    return (regno);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_xdivr_u": {
      "start_point": [
        1965,
        0
      ],
      "end_point": [
        1980,
        1
      ],
      "content": "static jit_int32_t\n_xdivr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tregno;\n    regno = jit_get_reg_pair();\n#if __WORDSIZE == 32\n    movr(rn(regno), r0);\n    SRDL(rn(regno), 32, 0);\n#else\n    movr(rn(regno) + 1, r0);\n#endif\n    movi(rn(regno), 0);\n    DIVREMU_(rn(regno), r1);\n    jit_unget_reg_pair(regno);\n    return (regno);\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_xdivi": {
      "start_point": [
        1982,
        0
      ],
      "end_point": [
        1999,
        1
      ],
      "content": "static jit_int32_t\n_xdivi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\timm, regno;\n    regno = jit_get_reg_pair();\n    imm = jit_get_reg(jit_class_gpr);\n#if __WORDSIZE == 32\n    movr(rn(regno), r0);\n    SRDA(rn(regno), 32, 0);\n#else\n    movr(rn(regno) + 1, r0);\n#endif\n    movi(rn(imm), i0);\n    DIVREM_(rn(regno), rn(imm));\n    jit_unget_reg(imm);\n    jit_unget_reg_pair(regno);\n    return (regno);\n}",
      "lines": 18,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_xdivi_u": {
      "start_point": [
        2001,
        0
      ],
      "end_point": [
        2020,
        1
      ],
      "content": "static jit_int32_t\n_xdivi_u(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    /* cannot overlap because operand is 128-bit */\n    jit_int32_t\t\timm, regno;\n    regno = jit_get_reg_pair();\n    imm = jit_get_reg(jit_class_gpr);\n#if __WORDSIZE == 32\n    movr(rn(regno), r0);\n    SRDL(rn(regno), 32, 0);\n#else\n    movr(rn(regno) + 1, r0);\n#endif\n    movi(rn(regno), 0);\n    movi(rn(imm), i0);\n    DIVREMU_(rn(regno), rn(imm));\n    jit_unget_reg(imm);\n    jit_unget_reg_pair(regno);\n    return (regno);\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_crr": {
      "start_point": [
        2022,
        0
      ],
      "end_point": [
        2044,
        1
      ],
      "content": "static void\n_crr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg, rg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\trg = rn(reg);\n    }\n    else\n\trg = r0;\n    movi(rg, 1);\n    CMP_(r1, r2);\n    w = _jit->pc.w;\n    BRC(cc, 0);\n    movi(rg, 0);\n    patch_at(w, _jit->pc.w);\n    if (r0 == r1 || r0 == r2) {\n\tmovr(r0, rg);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cri": {
      "start_point": [
        2046,
        0
      ],
      "end_point": [
        2055,
        1
      ],
      "content": "static void\n_cri(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    crr(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_crr_u": {
      "start_point": [
        2057,
        0
      ],
      "end_point": [
        2079,
        1
      ],
      "content": "static void\n_crr_u(jit_state_t *_jit, jit_int32_t cc,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg, rg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\trg = rn(reg);\n    }\n    else\n\trg = r0;\n    movi(rg, 1);\n    CMPU_(r1, r2);\n    w = _jit->pc.w;\n    BRC(cc, 0);\n    movi(rg, 0);\n    patch_at(w, _jit->pc.w);\n    if (r0 == r1 || r0 == r2) {\n\tmovr(r0, rg);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cri_u": {
      "start_point": [
        2081,
        0
      ],
      "end_point": [
        2090,
        1
      ],
      "content": "static void\n_cri_u(jit_state_t *_jit, jit_int32_t cc,\n       jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    crr_u(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_brr": {
      "start_point": [
        2092,
        0
      ],
      "end_point": [
        2105,
        1
      ],
      "content": "static void\n_brr(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    CMP_(r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_brr_p": {
      "start_point": [
        2107,
        0
      ],
      "end_point": [
        2116,
        1
      ],
      "content": "static jit_word_t\n_brr_p(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP_(r0, r1);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bri": {
      "start_point": [
        2118,
        0
      ],
      "end_point": [
        2127,
        1
      ],
      "content": "static void\n_bri(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    brr(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bri_p": {
      "start_point": [
        2129,
        0
      ],
      "end_point": [
        2140,
        1
      ],
      "content": "static jit_word_t\n_bri_p(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = brr_p(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_brr_u": {
      "start_point": [
        2142,
        0
      ],
      "end_point": [
        2155,
        1
      ],
      "content": "static void\n_brr_u(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    CMPU_(r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_brr_u_p": {
      "start_point": [
        2157,
        0
      ],
      "end_point": [
        2166,
        1
      ],
      "content": "static jit_word_t\n_brr_u_p(jit_state_t *_jit, jit_int32_t cc,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMPU_(r0, r1);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bri_u": {
      "start_point": [
        2168,
        0
      ],
      "end_point": [
        2177,
        1
      ],
      "content": "static void\n_bri_u(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    brr_u(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bri_u_p": {
      "start_point": [
        2179,
        0
      ],
      "end_point": [
        2190,
        1
      ],
      "content": "static jit_word_t\n_bri_u_p(jit_state_t *_jit, jit_int32_t cc,\n\t jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = brr_u_p(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddr": {
      "start_point": [
        2192,
        0
      ],
      "end_point": [
        2206,
        1
      ],
      "content": "static void\n_baddr(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    if (s)\t\taddr(r0, r0, r1);\n    else\t\taddcr(r0, r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(c, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(c, d);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_baddi": {
      "start_point": [
        2208,
        0
      ],
      "end_point": [
        2217,
        1
      ],
      "content": "static void\n_baddi(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    baddr(c, s, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_baddr_p": {
      "start_point": [
        2219,
        0
      ],
      "end_point": [
        2230,
        1
      ],
      "content": "static jit_word_t\n_baddr_p(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    if (s)\t\taddr(r0, r0, r1);\n    else\t\taddcr(r0, r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    w = _jit->pc.w;\n    BRCL(c, d);\n    return (w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_baddi_p": {
      "start_point": [
        2232,
        0
      ],
      "end_point": [
        2243,
        1
      ],
      "content": "static jit_word_t\n_baddi_p(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n\t jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = baddr_p(c, s, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubr": {
      "start_point": [
        2245,
        0
      ],
      "end_point": [
        2259,
        1
      ],
      "content": "static void\n_bsubr(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    if (s)\t\tsubr(r0, r0, r1);\n    else\t\tsubcr(r0, r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(c, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(c, d);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bsubi": {
      "start_point": [
        2261,
        0
      ],
      "end_point": [
        2270,
        1
      ],
      "content": "static void\n_bsubi(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    bsubr(c, s, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bsubr_p": {
      "start_point": [
        2272,
        0
      ],
      "end_point": [
        2283,
        1
      ],
      "content": "static jit_word_t\n_bsubr_p(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td, w;\n    if (s)\t\tsubr(r0, r0, r1);\n    else\t\tsubcr(r0, r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    w = _jit->pc.w;\n    BRCL(c, d);\n    return (w);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bsubi_p": {
      "start_point": [
        2285,
        0
      ],
      "end_point": [
        2296,
        1
      ],
      "content": "static jit_word_t\n_bsubi_p(jit_state_t *_jit, jit_int32_t c, jit_bool_t s,\n\t jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    w = bsubr_p(c, s, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxr": {
      "start_point": [
        2298,
        0
      ],
      "end_point": [
        2316,
        1
      ],
      "content": "static void\n_bmxr(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), r0);\n    andr(rn(reg), rn(reg), r1);\n    TEST_(rn(reg), rn(reg));\n    jit_unget_reg(reg);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmxr_p": {
      "start_point": [
        2318,
        0
      ],
      "end_point": [
        2332,
        1
      ],
      "content": "static jit_word_t\n_bmxr_p(jit_state_t *_jit, jit_int32_t cc,\n\tjit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movr(rn(reg), r0);\n    andr(rn(reg), rn(reg), r1);\n    TEST_(rn(reg), rn(reg));\n    jit_unget_reg(reg);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 15,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmxi": {
      "start_point": [
        2334,
        0
      ],
      "end_point": [
        2352,
        1
      ],
      "content": "static void\n_bmxi(jit_state_t *_jit, jit_int32_t cc,\n      jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i1);\n    andr(rn(reg), rn(reg), r0);\n    TEST_(rn(reg), rn(reg));\n    jit_unget_reg(reg);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmxi_p": {
      "start_point": [
        2354,
        0
      ],
      "end_point": [
        2368,
        1
      ],
      "content": "static jit_word_t\n_bmxi_p(jit_state_t *_jit, jit_int32_t cc,\n\tjit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i1);\n    andr(rn(reg), rn(reg), r0);\n    TEST_(rn(reg), rn(reg));\n    jit_unget_reg(reg);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 15,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_movr": {
      "start_point": [
        2370,
        0
      ],
      "end_point": [
        2380,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if __WORDSIZE == 32\n    if (r0 != r1)\n\tLR(r0, r1);\n#else\n    if (r0 != r1)\n\tLGR(r0, r1);\n#endif\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        2382,
        0
      ],
      "end_point": [
        2424,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\td;\n#if __WORDSIZE == 64\n    jit_int32_t\t\tbits;\n#endif\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(i0)) {\n#if __WORDSIZE == 32\n\tLHI(r0, x16(i0));\n#else\n\tLGHI(r0, x16(i0));\n#endif\n    }\n    /* easy way of loading a large amount of 32 bit values and\n     * usually address of constants */\n    else if (!(i0 & 1) &&\n#if __WORDSIZE == 32\n\t     i0 > 0\n#else\n\t     s32_p(d)\n#endif\n\t     )\n\tLARL(r0, d);\n    else {\n#if __WORDSIZE == 32\n\tLHI(r0, x16(i0));\n\tIILH(r0, x16((jit_uword_t)i0 >> 16));\n#else\n\tbits = 0;\n\tif (i0 &             0xffffL)\tbits |= 1;\n\tif (i0 &         0xffff0000L)\tbits |= 2;\n\tif (i0 &     0xffff00000000L)\tbits |= 4;\n\tif (i0 & 0xffff000000000000L)\tbits |= 8;\n\tif (bits != 15)\t\t\tLGHI(r0, 0);\n\tif (bits & 1)\t\t\tIILL(r0, x16(i0));\n\tif (bits & 2)\t\t\tIILH(r0, x16((jit_uword_t)i0 >> 16));\n\tif (bits & 4)\t\t\tIIHL(r0, x16((jit_uword_t)i0 >> 32));\n\tif (bits & 8)\t\t\tIIHH(r0, x16((jit_uword_t)i0 >> 48));\n#endif\n    }\n}",
      "lines": 43,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        2426,
        0
      ],
      "end_point": [
        2442,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n#if __WORDSIZE == 32\n    LHI(r0, x16(i0));\n#else\n    IILL(r0, x16(i0));\n#endif\n    IILH(r0, x16((jit_uword_t)i0 >> 16));\n#if __WORDSIZE == 64\n    IIHL(r0, x16((jit_uword_t)i0 >> 32));\n    IIHH(r0, x16((jit_uword_t)i0 >> 48));\n#endif\n    return (w);\n}",
      "lines": 17,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_addr": {
      "start_point": [
        2444,
        0
      ],
      "end_point": [
        2453,
        1
      ],
      "content": "static void\n_addr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tADD_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tADD_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        2455,
        0
      ],
      "end_point": [
        2470,
        5
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 && s16_p(i0))\n\tADDI_(r0, x16(i0));\n#if __WORDSIZE == 64\n    else if (s20_p(i0))\n\tLAY(r0, x20(i0), 0, r1);\n#endif\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        2473,
        0
      ],
      "end_point": [
        2482,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tADDC_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tADDC_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        2484,
        0
      ],
      "end_point": [
        2492,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    addcr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        2494,
        0
      ],
      "end_point": [
        2503,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tADDX_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tADDX_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        2505,
        0
      ],
      "end_point": [
        2513,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    addxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subr": {
      "start_point": [
        2515,
        0
      ],
      "end_point": [
        2530,
        1
      ],
      "content": "static void\n_subr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSUB_(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSUB_(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        2532,
        0
      ],
      "end_point": [
        2547,
        5
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 && s16_p(-i0))\n\tADDI_(r0, x16(-i0));\n#if __WORDSIZE == 64\n    else if (s20_p(-i0))\n\tLAY(r0, x20(-i0), 0, r1);\n#endif\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        2550,
        0
      ],
      "end_point": [
        2565,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSUBC_(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSUBC_(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        2567,
        0
      ],
      "end_point": [
        2575,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subcr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        2577,
        0
      ],
      "end_point": [
        2592,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSUBX_(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSUBX_(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        2594,
        0
      ],
      "end_point": [
        2602,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    subxr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        2604,
        0
      ],
      "end_point": [
        2609,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        2611,
        0
      ],
      "end_point": [
        2620,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tMUL_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tMUL_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        2622,
        0
      ],
      "end_point": [
        2636,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s16_p(i0)) {\n\tmovr(r0, r1);\n\tMULI_(r0, x16(i0));\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tmulr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr": {
      "start_point": [
        2638,
        0
      ],
      "end_point": [
        2674,
        1
      ],
      "content": "static void\n_qmulr(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\treg;\n    /* The only invalid condition is r0 == r1 */\n    jit_int32_t\t\tt2, t3, s2, s3;\n    if (r2 == r0 || r2 == r1) {\n\ts2 = jit_get_reg(jit_class_gpr);\n\tt2 = rn(s2);\n\tmovr(t2, r2);\n    }\n    else\n\tt2 = r2;\n    if (r3 == r0 || r3 == r1) {\n\ts3 = jit_get_reg(jit_class_gpr);\n\tt3 = rn(s3);\n\tmovr(t3, r3);\n    }\n    else\n\tt3 = r3;\n    qmulr_u(r0, r1, r2, r3);\n    reg = jit_get_reg(jit_class_gpr);\n    /**/\n    rshi(rn(reg), t2, 63);\n    mulr(rn(reg), rn(reg), t3);\n    addr(r1, r1, rn(reg));\n    /**/\n    rshi(rn(reg), t3, 63);\n    mulr(rn(reg), rn(reg), t2);\n    addr(r1, r1, rn(reg));\n    jit_unget_reg(reg);\n    if (t2 != r2)\n\tjit_unget_reg(s2);\n    if (t3 != r3)\n\tjit_unget_reg(s3);\n}",
      "lines": 37,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli": {
      "start_point": [
        2676,
        0
      ],
      "end_point": [
        2685,
        1
      ],
      "content": "static void\n_qmuli(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    qmulr(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmulr_u": {
      "start_point": [
        2687,
        0
      ],
      "end_point": [
        2698,
        1
      ],
      "content": "static void\n_qmulr_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\tregno;\n    regno = jit_get_reg_pair();\n    movr(rn(regno) + 1, r2);\n    MULU_(rn(regno), r3);\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n    jit_unget_reg_pair(regno);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qmuli_u": {
      "start_point": [
        2700,
        0
      ],
      "end_point": [
        2712,
        1
      ],
      "content": "static void\n_qmuli_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = jit_get_reg_pair();\n    movr(rn(regno) + 1, r2);\n    movi(rn(regno), i0);\n    MULU_(rn(regno), rn(regno));\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n    jit_unget_reg_pair(regno);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr": {
      "start_point": [
        2714,
        0
      ],
      "end_point": [
        2720,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr(r1, r2);\n    movr(r0, rn(regno) + 1);\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        2722,
        0
      ],
      "end_point": [
        2728,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi(r1, i0);\n    movr(r0, rn(regno) + 1);\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_u": {
      "start_point": [
        2730,
        0
      ],
      "end_point": [
        2736,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr_u(r1, r2);\n    movr(r0, rn(regno) + 1);\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        2738,
        0
      ],
      "end_point": [
        2744,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi_u(r1, i0);\n    movr(r0, rn(regno) + 1);\n}",
      "lines": 7,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        2746,
        0
      ],
      "end_point": [
        2752,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr(r1, r2);\n    movr(r0, rn(regno));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        2754,
        0
      ],
      "end_point": [
        2760,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi(r1, i0);\n    movr(r0, rn(regno));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        2762,
        0
      ],
      "end_point": [
        2768,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr_u(r1, r2);\n    movr(r0, rn(regno));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        2770,
        0
      ],
      "end_point": [
        2776,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi_u(r1, i0);\n    movr(r0, rn(regno));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivr": {
      "start_point": [
        2778,
        0
      ],
      "end_point": [
        2786,
        1
      ],
      "content": "static void\n_qdivr(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr(r2, r3);\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi": {
      "start_point": [
        2788,
        0
      ],
      "end_point": [
        2796,
        1
      ],
      "content": "static void\n_qdivi(jit_state_t *_jit,\n       jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi(r2, i0);\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivr_u": {
      "start_point": [
        2798,
        0
      ],
      "end_point": [
        2806,
        1
      ],
      "content": "static void\n_qdivr_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_int32_t r3)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivr_u(r2, r3);\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_qdivi_u": {
      "start_point": [
        2808,
        0
      ],
      "end_point": [
        2816,
        1
      ],
      "content": "static void\n_qdivi_u(jit_state_t *_jit,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2, jit_word_t i0)\n{\n    jit_int32_t\t\tregno;\n    regno = xdivi_u(r2, i0);\n    movr(r0, rn(regno) + 1);\n    movr(r1, rn(regno));\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshr": {
      "start_point": [
        2819,
        0
      ],
      "end_point": [
        2834,
        1
      ],
      "content": "static void\n_lshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg_but_zero(0);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSLL(r0, 0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSLL(r0, 0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        2837,
        0
      ],
      "end_point": [
        2845,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    lshr(r0, r1, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr": {
      "start_point": [
        2848,
        0
      ],
      "end_point": [
        2863,
        1
      ],
      "content": "static void\n_rshr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg_but_zero(0);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSRA(r0, 0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSRA(r0, 0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi": {
      "start_point": [
        2866,
        0
      ],
      "end_point": [
        2874,
        1
      ],
      "content": "static void\n_rshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    rshr(r0, r1, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshr_u": {
      "start_point": [
        2877,
        0
      ],
      "end_point": [
        2892,
        1
      ],
      "content": "static void\n_rshr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg_but_zero(0);\n\tmovr(rn(reg), r2);\n\tmovr(r0, r1);\n\tSRL(r0, 0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tSRL(r0, 0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rshi_u": {
      "start_point": [
        2895,
        0
      ],
      "end_point": [
        2903,
        1
      ],
      "content": "static void\n_rshi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    rshr_u(r0, r1, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_comr": {
      "start_point": [
        2905,
        0
      ],
      "end_point": [
        2914,
        1
      ],
      "content": "static void\n_comr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), -1);\n    movr(r0, r1);\n    XOR_(r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andr": {
      "start_point": [
        2916,
        0
      ],
      "end_point": [
        2925,
        1
      ],
      "content": "static void\n_andr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tAND_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tAND_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        2927,
        0
      ],
      "end_point": [
        2937,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(r0, r1);\n    NILL(r0, x16(i0));\n    NILH(r0, x16((jit_uword_t)i0 >> 16));\n#if __WORDSIZE == 64\n    NIHL(r0, x16((jit_uword_t)i0 >> 32));\n    NIHH(r0, x16((jit_uword_t)i0 >> 48));\n#endif\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_orr": {
      "start_point": [
        2939,
        0
      ],
      "end_point": [
        2948,
        1
      ],
      "content": "static void\n_orr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tOR_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tOR_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        2950,
        0
      ],
      "end_point": [
        2960,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(r0, r1);\n    OILL(r0, x16(i0));\n    OILH(r0, x16((jit_uword_t)i0 >> 16));\n#if __WORDSIZE == 64\n    OIHL(r0, x16((jit_uword_t)i0 >> 32));\n    OIHH(r0, x16((jit_uword_t)i0 >> 48));\n#endif\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xorr": {
      "start_point": [
        2962,
        0
      ],
      "end_point": [
        2971,
        1
      ],
      "content": "static void\n_xorr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tXOR_(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tXOR_(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        2973,
        0
      ],
      "end_point": [
        2981,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    xorr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        2983,
        0
      ],
      "end_point": [
        2988,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_c(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2990,
        0
      ],
      "end_point": [
        3002,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_c(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_c(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        3004,
        0
      ],
      "end_point": [
        3027,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0)) {\n#if __WORDSIZE == 32\n\tLB(r0, x20(i0), 0, r1);\n#else\n\tLGB(r0, x20(i0), 0, r1);\n#endif\n    }\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_c(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        3029,
        0
      ],
      "end_point": [
        3034,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_uc(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        3036,
        0
      ],
      "end_point": [
        3048,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_uc(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_uc(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        3050,
        0
      ],
      "end_point": [
        3068,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tLLGC(r0, x20(i0), 0, r1);\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_uc(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        3070,
        0
      ],
      "end_point": [
        3075,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_s(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        3077,
        0
      ],
      "end_point": [
        3089,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_s(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_s(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        3091,
        0
      ],
      "end_point": [
        3119,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n#if __WORDSIZE == 32\n    if (u12_p(i0))\n\tLH(r0, i0, 0, r1);\n    else\n#endif\n    if (s20_p(i0)) {\n#if __WORDSIZE == 32\n\tLHY(r0, x20(i0), 0, r1);\n#else\n\tLGH(r0, x20(i0), 0, r1);\n#endif\n    }\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_s(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 29,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        3121,
        0
      ],
      "end_point": [
        3126,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_us(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        3128,
        0
      ],
      "end_point": [
        3140,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_us(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_us(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        3142,
        0
      ],
      "end_point": [
        3160,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tLLGH(r0, x20(i0), 0, r1);\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_us(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        3162,
        0
      ],
      "end_point": [
        3167,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_i(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        3169,
        0
      ],
      "end_point": [
        3181,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_i(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_i(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        3183,
        0
      ],
      "end_point": [
        3201,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tLGF(r0, x20(i0), 0, r1);\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_i(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        3204,
        0
      ],
      "end_point": [
        3209,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_ui(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        3211,
        0
      ],
      "end_point": [
        3223,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_ui(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_ui(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        3225,
        0
      ],
      "end_point": [
        3243,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tLLGF(r0, x20(i0), 0, r1);\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_ui(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        3245,
        0
      ],
      "end_point": [
        3250,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    movi(r0, i0);\n    ldr_l(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        3252,
        0
      ],
      "end_point": [
        3264,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2) {\n\taddr(r0, r0, r1);\n\tldr_l(r0, r0);\n    }\n    else {\n\tmovr(r0, r1);\n\taddr(r0, r0, r2);\n\tldr_l(r0, r0);\n    }\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        3266,
        0
      ],
      "end_point": [
        3284,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tLG(r0, x20(i0), 0, r1);\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\taddr(r0, r0, r1);\n\tldr_l(r0, r0);\n    }\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        3287,
        0
      ],
      "end_point": [
        3295,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_c(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        3297,
        0
      ],
      "end_point": [
        3306,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        3308,
        0
      ],
      "end_point": [
        3322,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tSTC(r1, i0, 0, r0);\n    else if (s20_p(i0))\n\tSTCY(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\taddi(rn(reg), r0, i0);\n\tstr_c(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        3324,
        0
      ],
      "end_point": [
        3332,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_s(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        3334,
        0
      ],
      "end_point": [
        3343,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        3345,
        0
      ],
      "end_point": [
        3359,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tSTH(r1, i0, 0, r0);\n    else if (s20_p(i0))\n\tSTHY(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\taddi(rn(reg), r0, i0);\n\tstr_s(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        3361,
        0
      ],
      "end_point": [
        3369,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_i(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        3371,
        0
      ],
      "end_point": [
        3380,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        3382,
        0
      ],
      "end_point": [
        3396,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tST(r1, i0, 0, r0);\n    else if (s20_p(i0))\n\tSTY(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\taddi(rn(reg), r0, i0);\n\tstr_i(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        3399,
        0
      ],
      "end_point": [
        3407,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_l(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        3409,
        0
      ],
      "end_point": [
        3418,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_l(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        3420,
        0
      ],
      "end_point": [
        3432,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s20_p(i0))\n\tSTG(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\taddi(rn(reg), r0, i0);\n\tstr_l(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        3435,
        0
      ],
      "end_point": [
        3451,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tJ(x16(d));\n    else if (s32_p(d))\n\tBRL(d);\n    else {\n\treg = jit_get_reg_but_zero(jit_class_nospill);\n\tmovi(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        3453,
        0
      ],
      "end_point": [
        3463,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(jit_class_nospill);\n    w = movi_p(rn(reg), i0);\n    jmpr(rn(reg));\n    jit_unget_reg_but_zero(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_calli": {
      "start_point": [
        3465,
        0
      ],
      "end_point": [
        3479,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\td;\n    jit_int32_t\t\treg;\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s32_p(d))\n\tBRASL(_R14_REGNO, d);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\tcallr(rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        3481,
        0
      ],
      "end_point": [
        3491,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    w = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg_but_zero(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        3498,
        0
      ],
      "end_point": [
        3599,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *i0)\n{\n    jit_int32_t\t\tregno, offset;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -8;\n    _jitc->function->stack = ((_jitc->function->self.alen -\n\t\t\t      /* align stack at 8 bytes */\n\t\t\t      _jitc->function->self.aoff) + 7) & -8;\n    /* *IFF* a non variadic function,\n     * Lightning does not reserve stack space for spilling arguments\n     * in registers.\n     * S390x, as per gcc, has 8 stack slots for spilling arguments,\n     * (%r6 is callee save) and uses an alloca like approach to save\n     * callee save fpr registers.\n     * Since argument registers are not saved in any lightning port,\n     * use the 8 slots to spill any modified fpr register, and still\n     * use the same stack frame logic as gcc.\n     * Save at least %r13 to %r15, as %r13 is used as frame pointer.\n     * *IFF* a variadic function, a \"standard\" stack frame, with\n     * fpr registers saved in an alloca'ed area, is used.\n     */\n    if ((_jitc->function->self.call & jit_call_varargs) &&\n\tjit_arg_reg_p(_jitc->function->vagp))\n\tregno = _jitc->function->vagp;\n    else {\n\tfor (regno = 4; regno < jit_size(gprs) - 1; regno++) {\n\t    if (jit_regset_tstbit(&_jitc->function->regset, gprs[regno]))\n\t\tbreak;\n\t}\n    }\n#if __WORDSIZE == 32\n#  define FP_OFFSET\t\t64\n    if (_jitc->function->self.call & jit_call_varargs)\n\toffset = regno * 4 + 8;\n    else\n\toffset = (regno - 4) * 4 + 32;\n    STM(rn(gprs[regno]), _R15_REGNO, x20(offset), _R15_REGNO);\n#else\n#  define FP_OFFSET\t\t128\n    if (_jitc->function->self.call & jit_call_varargs)\n\toffset = regno * 8 + 16;\n    else\n\toffset = (regno - 4) * 8 + 48;\n    STMG(rn(gprs[regno]), _R15_REGNO, x20(offset), _R15_REGNO);\n#endif\n\n#define SPILL(R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, R))\t\t\\\n\t    stxi_d(O, _R15_REGNO, rn(R));\t\t\t\t\\\n    } while (0)\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (regno = _jitc->function->vafp; jit_arg_f_reg_p(regno); ++regno)\n\t    stxi_d(FP_OFFSET + regno * 8, _R15_REGNO, rn(_F0 - regno));\n\tSPILL(_F8, _jitc->function->vaoff + offsetof(jit_va_list_t, f8));\n\tSPILL(_F9, _jitc->function->vaoff + offsetof(jit_va_list_t, f9));\n\tSPILL(_F10, _jitc->function->vaoff + offsetof(jit_va_list_t, f10));\n\tSPILL(_F11, _jitc->function->vaoff + offsetof(jit_va_list_t, f11));\n\tSPILL(_F12, _jitc->function->vaoff + offsetof(jit_va_list_t, f12));\n\tSPILL(_F13, _jitc->function->vaoff + offsetof(jit_va_list_t, f13));\n\tSPILL(_F14, _jitc->function->vaoff + offsetof(jit_va_list_t, f14));\n    }\n    else {\n\t/* First 4 in low address */\n#if __WORDSIZE == 32\n\tSPILL(_F10, 0);\n\tSPILL(_F11, 8);\n\tSPILL(_F12, 16);\n\tSPILL(_F13, 24);\n\t/* gpr registers here */\n\tSPILL(_F14, 72);\n\tSPILL(_F8, 80);\n\tSPILL(_F9, 88);\n#else\n\tSPILL(_F10, 16);\n\tSPILL(_F11, 24);\n\tSPILL(_F12, 32);\n\tSPILL(_F13, 48);\n\t/* Last 3 in high address */\n\tSPILL(_F14, 136);\n\tSPILL(_F8, 144);\n\tSPILL(_F9, 152);\n#endif\n    }\n#undef SPILL\n    movr(_R13_REGNO, _R15_REGNO);\n    subi(_R15_REGNO, _R15_REGNO, stack_framesize + _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\tregno = jit_get_reg(jit_class_gpr);\n\tmovi(rn(regno), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _R13_REGNO, rn(regno));\n\tjit_unget_reg(regno);\n    }\n}",
      "lines": 102,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        3601,
        0
      ],
      "end_point": [
        3669,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *i0)\n{\n    jit_int32_t\t\tregno, offset;\n    if (_jitc->function->assume_frame)\n\treturn;\n    if ((_jitc->function->self.call & jit_call_varargs) &&\n\tjit_arg_reg_p(_jitc->function->vagp))\n\tregno = _jitc->function->vagp;\n    else {\n\tfor (regno = 4; regno < jit_size(gprs) - 1; regno++) {\n\t    if (jit_regset_tstbit(&_jitc->function->regset, gprs[regno]))\n\t\tbreak;\n\t}\n    }\n#if __WORDSIZE == 32\n    if (_jitc->function->self.call & jit_call_varargs)\n\toffset = regno * 4 + 8;\n    else\n\toffset = (regno - 4) * 4 + 32;\n#else\n    if (_jitc->function->self.call & jit_call_varargs)\n\toffset = regno * 8 + 16;\n    else\n\toffset = (regno - 4) * 8 + 48;\n#endif\n    movr(_R15_REGNO, _R13_REGNO);\n\n#define LOAD(R, O)\t\t\t\t\t\t\t\\\n    do {\t\t\t\t\t\t\t\t\\\n\tif (jit_regset_tstbit(&_jitc->function->regset, R))\t\t\\\n\t    ldxi_d(rn(R), _R15_REGNO, O);\t\t\t\t\\\n    } while (0)\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tLOAD(_F8, _jitc->function->vaoff + offsetof(jit_va_list_t, f8));\n\tLOAD(_F9, _jitc->function->vaoff + offsetof(jit_va_list_t, f9));\n\tLOAD(_F10, _jitc->function->vaoff + offsetof(jit_va_list_t, f10));\n\tLOAD(_F11, _jitc->function->vaoff + offsetof(jit_va_list_t, f11));\n\tLOAD(_F12, _jitc->function->vaoff + offsetof(jit_va_list_t, f12));\n\tLOAD(_F13, _jitc->function->vaoff + offsetof(jit_va_list_t, f13));\n\tLOAD(_F14, _jitc->function->vaoff + offsetof(jit_va_list_t, f14));\n    }\n    else {\n#if __WORDSIZE == 32\n\tLOAD(_F10, 0);\n\tLOAD(_F11, 8);\n\tLOAD(_F12, 16);\n\tLOAD(_F13, 24);\n\tLOAD(_F14, 72);\n\tLOAD(_F8, 80);\n\tLOAD(_F9, 88);\n#else\n\tLOAD(_F10, 16);\n\tLOAD(_F11, 24);\n\tLOAD(_F12, 32);\n\tLOAD(_F13, 48);\n\tLOAD(_F14, 136);\n\tLOAD(_F8, 144);\n\tLOAD(_F9, 152);\n#endif\n    }\n#undef LOAD\n#if __WORDSIZE == 32\n    LM(rn(gprs[regno]), _R15_REGNO, x20(offset), _R15_REGNO);\n#else\n    LMG(rn(gprs[regno]), _R15_REGNO, x20(offset), _R15_REGNO);\n#endif\n    BR(_R14_REGNO);\n}",
      "lines": 69,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        3671,
        0
      ],
      "end_point": [
        3698,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Return jit_va_list_t in the register argument */\n    addi(r0, _R13_REGNO, _jitc->function->vaoff);\n    reg = jit_get_reg(jit_class_gpr);\n\n    /* Initialize gp offset in the save area. */\n    movi(rn(reg), _jitc->function->vagp);\n    stxi(offsetof(jit_va_list_t, gpoff), r0, rn(reg));\n\n    /* Initialize fp offset in the save area. */\n    movi(rn(reg), _jitc->function->vafp);\n    stxi(offsetof(jit_va_list_t, fpoff), r0, rn(reg));\n\n    /* Initialize overflow pointer to the first stack argument. */\n    addi(rn(reg), _R13_REGNO, _jitc->function->self.size);\n    stxi(offsetof(jit_va_list_t, over), r0, rn(reg));\n\n    /* Initialize register save area pointer. */\n    stxi(offsetof(jit_va_list_t, save), r0, _R13_REGNO);\n\n    jit_unget_reg(reg);\n}",
      "lines": 28,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        3700,
        0
      ],
      "end_point": [
        3766,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0;\n    jit_int32_t\t\trg1;\n    jit_int32_t\t\trg2;\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg_but_zero(0);\n    rg1 = jit_get_reg_but_zero(0);\n\n    /* Load the gp offset in save area in the first temporary. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, gpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    ge_code = bgei_p(_jit->pc.w, rn(rg0), 5);\n\n    /* Load the save area pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, save));\n\n    /* Scale offset */\n    rg2 = jit_get_reg_but_zero(0);\n    lshi(rn(rg2), rn(rg0),\n#if __WORDSIZE == 32\n\t 2\n#else\n\t 3\n#endif\n\t );\n    /* Add offset to saved area. */\n    addi(rn(rg2), rn(rg2), 2 * sizeof(jit_word_t));\n\n    /* Load the vararg argument in the first argument. */\n    ldxr(r0, rn(rg1), rn(rg2));\n    jit_unget_reg_but_zero(rg2);\n\n    /* Update the gp offset. */\n    addi(rn(rg0), rn(rg0), 1);\n    stxi(offsetof(jit_va_list_t, gpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg_but_zero(rg1);\n\n    /* Jump over overflow code. */\n    lt_code = jmpi_p(_jit->pc.w);\n\n    /* Where to land if argument is in overflow area. */\n    patch_at(ge_code, _jit->pc.w);\n\n    /* Load overflow pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, over));\n\n    /* Load argument. */\n    ldr(r0, rn(rg0));\n\n    /* Update overflow pointer. */\n    addi(rn(rg0), rn(rg0), sizeof(jit_word_t));\n    stxi(offsetof(jit_va_list_t, over), r1, rn(rg0));\n\n    /* Where to land if argument is in save area. */\n    patch_at(lt_code, _jit->pc.w);\n\n    jit_unget_reg_but_zero(rg0);\n}",
      "lines": 67,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        3768,
        0
      ],
      "end_point": [
        3846,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_word_t\t\t\t d;\n    union {\n\tjit_uint16_t\t\t*s;\n\tjit_word_t\t\t w;\n    } u;\n    u.w = instr;\n    union {\n\tstruct {\n\t    jit_uint16_t\top :  8;\n\t    jit_uint16_t\tr1 :  4;\n\t    jit_uint16_t\tr3 :  4;\n\t} b;\n\tjit_uint16_t\t\ts;\n    } i0;\n    union {\n\tstruct {\n\t    jit_uint16_t\ti2;\n\t} b;\n\tjit_uint16_t\t\ts;\n    } i1;\n    union {\n\tstruct {\n\t    jit_uint32_t\tih : 16;\n\t    jit_uint32_t\til : 16;\n\t} b;\n\tjit_uint32_t\t\ti;\n    } i12;\n    i0.s = u.s[0];\n    /* movi_p */\n    if (i0.b.op ==\n#if __WORDSIZE == 32\n\t0xA7 && i0.b.r3 == 8\n#else\n\t0xA5\n#endif\n\t) {\n#if __WORDSIZE == 64\n\tassert(i0.b.r3 == 3);\n#endif\n\ti1.b.i2 = (jit_uword_t)label;\n\tu.s[1] = i1.s;\n\ti0.s = u.s[2];\n\tassert(i0.b.op == 0xA5 && i0.b.r3 == 2);\n\ti1.b.i2 = (jit_uword_t)label >> 16;\n\tu.s[3] = i1.s;\n#if __WORDSIZE == 64\n\ti0.s = u.s[4];\n\tassert(i0.b.op == 0xA5 && i0.b.r3 == 1);\n\ti1.b.i2 = (jit_uword_t)label >> 32;\n\tu.s[5] = i1.s;\n\ti0.s = u.s[6];\n\tassert(i0.b.op == 0xA5 && i0.b.r3 == 0);\n\ti1.b.i2 = (jit_uword_t)label >> 48;\n\tu.s[7] = i1.s;\n#endif\n    }\n    /* BRC */\n    else if (i0.b.op == 0xA7) {\n\tassert(i0.b.r3 == 0x4);\n\td = (label - instr) >> 1;\n\tassert(s16_p(d));\n\ti1.b.i2 = d;\n\tu.s[1] = i1.s;\n    }\n    /* BRCL */\n    else if (i0.b.op == 0xC0) {\n\tassert(i0.b.r3 == 0x4);\n\td = (label - instr) >> 1;\n\tassert(s32_p(d));\n\ti12.i = d;\n\tu.s[1] = i12.b.ih;\n\tu.s[2] = i12.b.il;\n    }\n    else\n\tabort();\n}",
      "lines": 79,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_s390-fpu.c": {
    "_fp": {
      "start_point": [
        602,
        0
      ],
      "end_point": [
        620,
        1
      ],
      "content": "static void\n_fp(jit_state_t *_jit, jit_code_t code,\n    jit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    switch (code) {\n\tcase jit_code_addi_f:\taddr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_subi_f:\tsubr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_rsbi_f:\trsbr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_muli_f:\tmulr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_divi_f:\tdivr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_uneqi_f:\tuneqr_f(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_ltgti_f:\tltgtr_f(r0, r1, rn(reg));\tbreak;\n\tdefault:\t\tabort();\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dp": {
      "start_point": [
        622,
        0
      ],
      "end_point": [
        640,
        1
      ],
      "content": "static void\n_dp(jit_state_t *_jit, jit_code_t code,\n    jit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    switch (code) {\n\tcase jit_code_addi_d:\taddr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_subi_d:\tsubr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_rsbi_d:\trsbr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_muli_d:\tmulr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_divi_d:\tdivr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_uneqi_d:\tuneqr_d(r0, r1, rn(reg));\tbreak;\n\tcase jit_code_ltgti_d:\tltgtr_d(r0, r1, rn(reg));\tbreak;\n\tdefault:\t\tabort();\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fr": {
      "start_point": [
        642,
        0
      ],
      "end_point": [
        653,
        1
      ],
      "content": "static void\n_fr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    LGHI(r0, 1);\n    CEBR(r1, r2);\n    w = _jit->pc.w;\n    BRC(cc, 0);\n    LGHI(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dr": {
      "start_point": [
        655,
        0
      ],
      "end_point": [
        666,
        1
      ],
      "content": "static void\n_dr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tw;\n    LGHI(r0, 1);\n    CDBR(r1, r2);\n    w = _jit->pc.w;\n    BRC(cc, 0);\n    LGHI(r0, 0);\n    patch_at(w, _jit->pc.w);\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fi": {
      "start_point": [
        668,
        0
      ],
      "end_point": [
        677,
        1
      ],
      "content": "static void\n_fi(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_f(rn(reg), i0);\n    fr(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_di": {
      "start_point": [
        679,
        0
      ],
      "end_point": [
        688,
        1
      ],
      "content": "static void\n_di(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    movi_d(rn(reg), i0);\n    dr(cc, r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bfr": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        704,
        1
      ],
      "content": "static void\n_bfr(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    CEBR(r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bdr": {
      "start_point": [
        706,
        0
      ],
      "end_point": [
        719,
        1
      ],
      "content": "static void\n_bdr(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\td;\n    CDBR(r0, r1);\n    d = (i0 - _jit->pc.w) >> 1;\n    if (s16_p(d))\n\tBRC(cc, x16(d));\n    else {\n\tassert(s32_p(d));\n\tBRCL(cc, d);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bfr_p": {
      "start_point": [
        721,
        0
      ],
      "end_point": [
        730,
        1
      ],
      "content": "static jit_word_t\n_bfr_p(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CEBR(r0, r1);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bdr_p": {
      "start_point": [
        732,
        0
      ],
      "end_point": [
        741,
        1
      ],
      "content": "static jit_word_t\n_bdr_p(jit_state_t *_jit, jit_int32_t cc,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CDBR(r0, r1);\n    w = _jit->pc.w;\n    BRCL(cc, 0);\n    return (w);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bfi": {
      "start_point": [
        743,
        0
      ],
      "end_point": [
        752,
        1
      ],
      "content": "static void\n_bfi(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float32_t *i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi_f(rn(reg), i1);\n    bfr(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bdi": {
      "start_point": [
        754,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "content": "static void\n_bdi(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float64_t *i1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi_d(rn(reg), i1);\n    bdr(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bfi_p": {
      "start_point": [
        765,
        0
      ],
      "end_point": [
        776,
        1
      ],
      "content": "static jit_word_t\n_bfi_p(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float32_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi_f(rn(reg), i1);\n    w = bfr_p(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bdi_p": {
      "start_point": [
        778,
        0
      ],
      "end_point": [
        789,
        1
      ],
      "content": "static jit_word_t\n_bdi_p(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float64_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi_d(rn(reg), i1);\n    w = bdr_p(cc, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqr": {
      "start_point": [
        791,
        0
      ],
      "end_point": [
        807,
        1
      ],
      "content": "static jit_word_t\n_buneqr(jit_state_t *_jit, jit_int32_t db,\n\tjit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tunord, ne, w;\n    if (db)\tCDBR(r0, r1);\n    else\tCEBR(r0, r1);\n    unord = _jit->pc.w;\n    BRC(CC_O, 0);\t\t\t/* unord satisfies condition */\n    ne = _jit->pc.w;\n    BRC(CC_NE, 0);\t\t\t/* ne does not satisfy condition */\n    patch_at(unord, _jit->pc.w);\n    w = _jit->pc.w;\n    BRCL(CC_AL, (i0 - _jit->pc.w) >> 1);\n    patch_at(ne, _jit->pc.w);\n    return (w);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_buneqi": {
      "start_point": [
        809,
        0
      ],
      "end_point": [
        823,
        1
      ],
      "content": "static jit_word_t\n_buneqi(jit_state_t *_jit, jit_int32_t db,\n\tjit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    if (db)\n\tmovi_d(rn(reg), (jit_float64_t *)i1);\n    else\n\tmovi_f(rn(reg), (jit_float32_t *)i1);\n    w = buneqr(db, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgtr": {
      "start_point": [
        825,
        0
      ],
      "end_point": [
        841,
        1
      ],
      "content": "static jit_word_t\n_bltgtr(jit_state_t *_jit, jit_int32_t db,\n\tjit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tunord, eq, w;\n    if (db)\tCDBR(r0, r1);\n    else\tCEBR(r0, r1);\n    unord = _jit->pc.w;\n    BRC(CC_O, 0);\t\t\t/* unord does not satisfy condition */\n    eq = _jit->pc.w;\n    BRC(CC_E, 0);\t\t\t/* eq does not satisfy condition */\n    w = _jit->pc.w;\n    BRCL(CC_AL, (i0 - _jit->pc.w) >> 1);\n    patch_at(unord, _jit->pc.w);\n    patch_at(eq, _jit->pc.w);\n    return (w);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltgti": {
      "start_point": [
        843,
        0
      ],
      "end_point": [
        857,
        1
      ],
      "content": "static jit_word_t\n_bltgti(jit_state_t *_jit, jit_int32_t db,\n\tjit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr|jit_class_nospill);\n    if (db)\n\tmovi_d(rn(reg), (jit_float64_t *)i1);\n    else\n\tmovi_f(rn(reg), (jit_float32_t *)i1);\n    w = bltgtr(db, i0, r0, rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_movr_f": {
      "start_point": [
        859,
        0
      ],
      "end_point": [
        864,
        1
      ],
      "content": "static void\n_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tLER(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        866,
        0
      ],
      "end_point": [
        887,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (*(jit_int32_t *)i0 == 0)\n\tLZER(r0);\n    else if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), data.i & 0xffffffff);\n\tstxi_i(-4, _FP_REGNO, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n\tldxi_f(r0, _FP_REGNO, -4);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 22,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d": {
      "start_point": [
        889,
        0
      ],
      "end_point": [
        894,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tLDR(r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        896,
        0
      ],
      "end_point": [
        928,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n#if __WORDSIZE == 32\n\tjit_int32_t\t i[2];\n#else\n\tjit_int64_t\t l;\n#endif\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (*(jit_int64_t *)i0 == 0)\n\tLZDR(r0);\n    else if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg_but_zero(0);\n#if __WORDSIZE == 32\n\tmovi(rn(reg), data.i[0]);\n\tstxi_i(-8, _FP_REGNO, rn(reg));\n\tmovi(rn(reg), data.i[1]);\n\tstxi_i(-4, _FP_REGNO, rn(reg));\n#else\n\tmovi(rn(reg), data.l);\n\tstxi_l(-8, _FP_REGNO, rn(reg));\n#endif\n\tjit_unget_reg_but_zero(reg);\n\tldxi_d(r0, _FP_REGNO, -8);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr_f": {
      "start_point": [
        930,
        0
      ],
      "end_point": [
        939,
        1
      ],
      "content": "static void\n_addr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tAEBR(r0, r1);\n    else {\n\tmovr_f(r0, r1);\n\tAEBR(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr_d": {
      "start_point": [
        941,
        0
      ],
      "end_point": [
        950,
        1
      ],
      "content": "static void\n_addr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tADBR(r0, r1);\n    else {\n\tmovr_d(r0, r1);\n\tADBR(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subr_f": {
      "start_point": [
        952,
        0
      ],
      "end_point": [
        967,
        1
      ],
      "content": "static void\n_subr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr);\n\tmovr_f(rn(reg), r2);\n\tmovr_f(r0, r1);\n\tSEBR(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr_f(r0, r1);\n\tSEBR(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subr_d": {
      "start_point": [
        969,
        0
      ],
      "end_point": [
        984,
        1
      ],
      "content": "static void\n_subr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr);\n\tmovr_d(rn(reg), r2);\n\tmovr_d(r0, r1);\n\tSDBR(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr_d(r0, r1);\n\tSDBR(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr_f": {
      "start_point": [
        986,
        0
      ],
      "end_point": [
        995,
        1
      ],
      "content": "static void\n_mulr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tMEEBR(r0, r1);\n    else {\n\tmovr_f(r0, r1);\n\tMEEBR(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr_d": {
      "start_point": [
        997,
        0
      ],
      "end_point": [
        1006,
        1
      ],
      "content": "static void\n_mulr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tMDBR(r0, r1);\n    else {\n\tmovr_d(r0, r1);\n\tMDBR(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_f": {
      "start_point": [
        1008,
        0
      ],
      "end_point": [
        1023,
        1
      ],
      "content": "static void\n_divr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr);\n\tmovr_f(rn(reg), r2);\n\tmovr_f(r0, r1);\n\tDEBR(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr_f(r0, r1);\n\tDEBR(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_d": {
      "start_point": [
        1025,
        0
      ],
      "end_point": [
        1040,
        1
      ],
      "content": "static void\n_divr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr);\n\tmovr_d(rn(reg), r2);\n\tmovr_d(r0, r1);\n\tDDBR(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr_d(r0, r1);\n\tDDBR(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        1042,
        0
      ],
      "end_point": [
        1050,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        1052,
        0
      ],
      "end_point": [
        1060,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_f": {
      "start_point": [
        1062,
        0
      ],
      "end_point": [
        1071,
        1
      ],
      "content": "static void\n_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r1);\n    addr(rn(reg), rn(reg), r2);\n    ldr_f(r0, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_d": {
      "start_point": [
        1073,
        0
      ],
      "end_point": [
        1082,
        1
      ],
      "content": "static void\n_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r1);\n    addr(rn(reg), rn(reg), r2);\n    ldr_d(r0, rn(reg));\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        1084,
        0
      ],
      "end_point": [
        1099,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tLE(r0, i0, 0, r1);\n    else if (s20_p(i0))\n\tLEY(r0, x20(i0), 0, r1);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        1101,
        0
      ],
      "end_point": [
        1116,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tLD(r0, i0, 0, r1);\n    else if (s20_p(i0))\n\tLDY(r0, x20(i0), 0, r1);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r1);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        1118,
        0
      ],
      "end_point": [
        1126,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_f(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        1128,
        0
      ],
      "end_point": [
        1136,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movi(rn(reg), i0);\n    str_d(rn(reg), r0);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_f": {
      "start_point": [
        1138,
        0
      ],
      "end_point": [
        1147,
        1
      ],
      "content": "static void\n_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_f(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_d": {
      "start_point": [
        1149,
        0
      ],
      "end_point": [
        1158,
        1
      ],
      "content": "static void\n_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg_but_zero(0);\n    movr(rn(reg), r0);\n    addr(rn(reg), rn(reg), r1);\n    str_d(rn(reg), r2);\n    jit_unget_reg_but_zero(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        1160,
        0
      ],
      "end_point": [
        1175,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tSTE(r1, i0, 0, r0);\n    else if (s20_p(i0))\n\tSTEY(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r0);\n\tstr_f(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        1177,
        0
      ],
      "end_point": [
        1192,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (u12_p(i0))\n\tSTD(r1, i0, 0, r0);\n    else if (s20_p(i0))\n\tSTDY(r1, x20(i0), 0, r0);\n    else {\n\treg = jit_get_reg_but_zero(0);\n\tmovi(rn(reg), i0);\n\taddr(rn(reg), rn(reg), r0);\n\tstr_d(rn(reg), r1);\n\tjit_unget_reg_but_zero(reg);\n    }\n}",
      "lines": 16,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_f": {
      "start_point": [
        1194,
        0
      ],
      "end_point": [
        1207,
        1
      ],
      "content": "static void\n_uneqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tunord, eq;\n    movi(r0, 1);\t\t\t/* set to one */\n    CEBR(r1, r2);\n    unord = _jit->pc.w;\t\t\t/* keep set to one if unord */\n    BRC(CC_O, 0);\n    eq = _jit->pc.w;\n    BRC(CC_E, 0);\t\t\t/* keep set to one if eq */\n    movi(r0, 0);\t\t\t/* set to zero */\n    patch_at(unord, _jit->pc.w);\n    patch_at(eq, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_uneqr_d": {
      "start_point": [
        1209,
        0
      ],
      "end_point": [
        1222,
        1
      ],
      "content": "static void\n_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tunord, eq;\n    movi(r0, 1);\t\t\t/* set to one */\n    CDBR(r1, r2);\n    unord = _jit->pc.w;\t\t\t/* keep set to one if unord */\n    BRC(CC_O, 0);\n    eq = _jit->pc.w;\n    BRC(CC_E, 0);\t\t\t/* keep set to one if eq */\n    movi(r0, 0);\t\t\t/* set to zero */\n    patch_at(unord, _jit->pc.w);\n    patch_at(eq, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_f": {
      "start_point": [
        1224,
        0
      ],
      "end_point": [
        1237,
        1
      ],
      "content": "static void\n_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tunord, eq;\n    movi(r0, 0);\t\t\t/* set to zero */\n    CEBR(r1, r2);\n    unord = _jit->pc.w;\t\t\t/* keep set to zero if unord */\n    BRC(CC_O, 0);\n    eq = _jit->pc.w;\n    BRC(CC_E, 0);\t\t\t/* keep set to zero if eq */\n    movi(r0, 1);\t\t\t/* set to one */\n    patch_at(unord, _jit->pc.w);\n    patch_at(eq, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltgtr_d": {
      "start_point": [
        1239,
        0
      ],
      "end_point": [
        1252,
        1
      ],
      "content": "static void\n_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_word_t\t\tunord, eq;\n    movi(r0, 0);\t\t\t/* set to zero */\n    CDBR(r1, r2);\n    unord = _jit->pc.w;\t\t\t/* keep set to zero if unord */\n    BRC(CC_O, 0);\n    eq = _jit->pc.w;\n    BRC(CC_E, 0);\t\t\t/* keep set to zero if eq */\n    movi(r0, 1);\t\t\t/* set to one */\n    patch_at(unord, _jit->pc.w);\n    patch_at(eq, _jit->pc.w);\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        1254,
        0
      ],
      "end_point": [
        1314,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\trg0;\n    jit_int32_t\t\trg1;\n    jit_int32_t\t\trg2;\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg_but_zero(jit_class_gpr);\n    rg1 = jit_get_reg_but_zero(jit_class_gpr);\n\n    /* Load the fp offset in save area in the first temporary. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, fpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    ge_code = bgei_p(_jit->pc.w, rn(rg0), NUM_FLOAT_REG_ARGS);\n\n    /* Load the save area pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, save));\n\n    /* Scale offset. */\n    rg2 = jit_get_reg_but_zero(0);\n    lshi(rn(rg2), rn(rg0), 3);\n    /* Add offset to saved area */\n    addi(rn(rg2), rn(rg2), 16 * sizeof(jit_word_t));\n\n    /* Load the vararg argument in the first argument. */\n    ldxr_d(r0, rn(rg1), rn(rg2));\n    jit_unget_reg_but_zero(rg2);\n\n    /* Update the fp offset. */\n    addi(rn(rg0), rn(rg0), 1);\n    stxi(offsetof(jit_va_list_t, fpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg_but_zero(rg1);\n\n    /* Jump over overflow code. */\n    lt_code = jmpi_p(_jit->pc.w);\n\n    /* Where to land if argument is in overflow area. */\n    patch_at(ge_code, _jit->pc.w);\n\n    /* Load overflow pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, over));\n\n    /* Load argument. */\n    ldr_d(r0, rn(rg0));\n\n    /* Update overflow pointer. */\n    addi(rn(rg0), rn(rg0), sizeof(jit_float64_t));\n    stxi(offsetof(jit_va_list_t, over), r1, rn(rg0));\n\n    /* Where to land if argument is in save area. */\n    patch_at(lt_code, _jit->pc.w);\n\n    jit_unget_reg_but_zero(rg0);\n}",
      "lines": 61,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_s390-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_s390.c": {
    "jit_get_cpu": {
      "start_point": [
        135,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        140,
        0
      ],
      "end_point": [
        144,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        146,
        0
      ],
      "end_point": [
        188,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\toffset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.aoff = _jitc->function->self.alen = 0;\n    /* preallocate 8 bytes if not using a constant data buffer */\n    if (_jitc->no_data)\n\t_jitc->function->self.aoff = -8;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 43,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        190,
        0
      ],
      "end_point": [
        206,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        208,
        0
      ],
      "end_point": [
        227,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -8);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        229,
        0
      ],
      "end_point": [
        239,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        241,
        0
      ],
      "end_point": [
        248,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    jit_movr(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        250,
        0
      ],
      "end_point": [
        257,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        266,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    jit_movr_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        268,
        0
      ],
      "end_point": [
        275,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        277,
        0
      ],
      "end_point": [
        284,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    jit_movr_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        286,
        0
      ],
      "end_point": [
        293,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        295,
        0
      ],
      "end_point": [
        302,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        304,
        0
      ],
      "end_point": [
        311,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_f_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        313,
        0
      ],
      "end_point": [
        343,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t/* Allocate va_list like object in the stack. */\n\t_jitc->function->vaoff = jit_allocai(sizeof(jit_va_list_t));\n\n\t/* Initialize gp offset in save area. */\n\tif (jit_arg_reg_p(_jitc->function->self.argi))\n\t    _jitc->function->vagp = _jitc->function->self.argi;\n\telse\n\t    _jitc->function->vagp = 5;\n\n\t/* Initialize fp offset in save area. */\n\tif (jit_arg_f_reg_p(_jitc->function->self.argf))\n\t    _jitc->function->vafp = _jitc->function->self.argf;\n\telse\n\t    _jitc->function->vafp = NUM_FLOAT_REG_ARGS;\n    }\n    jit_dec_synth();\n}",
      "lines": 31,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        345,
        0
      ],
      "end_point": [
        361,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        363,
        0
      ],
      "end_point": [
        379,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        381,
        0
      ],
      "end_point": [
        397,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_float64_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        399,
        0
      ],
      "end_point": [
        410,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP,\n\t\t   v->u.w + (__WORDSIZE >> 3) - sizeof(jit_int8_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        412,
        0
      ],
      "end_point": [
        423,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP,\n\t\t    v->u.w + (__WORDSIZE >> 3) - sizeof(jit_uint8_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        425,
        0
      ],
      "end_point": [
        436,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP,\n\t\t   v->u.w + (__WORDSIZE >> 3) - sizeof(jit_int16_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        438,
        0
      ],
      "end_point": [
        449,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP,\n\t\t    v->u.w + (__WORDSIZE >> 3) - sizeof(jit_uint16_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        451,
        0
      ],
      "end_point": [
        467,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w)) {\n#if __WORDSIZE == 32\n\tjit_movr(u, _R2 - v->u.w);\n#else\n\tjit_extr_i(u, _R2 - v->u.w);\n#endif\n    }\n    else\n\tjit_ldxi_i(u, JIT_FP,\n\t\t   v->u.w + (__WORDSIZE >> 3) - sizeof(jit_int32_t));\n    jit_dec_synth();\n}",
      "lines": 17,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        470,
        0
      ],
      "end_point": [
        481,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_ui(u, JIT_FP,\n\t\t    v->u.w + (__WORDSIZE >> 3) - sizeof(jit_uint32_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        483,
        0
      ],
      "end_point": [
        493,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, _R2 - v->u.w);\n    else\n\tjit_ldxi_l(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        496,
        0
      ],
      "end_point": [
        506,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(_R2 - v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        508,
        0
      ],
      "end_point": [
        523,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(_R2 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        525,
        0
      ],
      "end_point": [
        540,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(u, _F0 - v->u.w);\n    else\n\tjit_ldxi_f(u, JIT_FP,\n\t\t   v->u.w\n#if __WORDSIZE == 64\n\t\t   + (__WORDSIZE >> 3) - sizeof(jit_float32_t)\n#endif\n\t\t   );\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        542,
        0
      ],
      "end_point": [
        556,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(_F0 - v->u.w, u);\n    else\n\tjit_stxi_f(v->u.w\n#if __WORDSIZE == 64\n\t\t   + (__WORDSIZE >> 3) - sizeof(jit_float32_t)\n#endif\n\t\t   , JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        558,
        0
      ],
      "end_point": [
        577,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_f(_F0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w\n#if __WORDSIZE == 64\n\t\t   + (__WORDSIZE >> 3) - sizeof(jit_float32_t)\n#endif\n\t\t   , JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        579,
        0
      ],
      "end_point": [
        589,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, _F0 - v->u.w);\n    else\n\tjit_ldxi_d(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        591,
        0
      ],
      "end_point": [
        601,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(_F0 - v->u.w, u);\n    else\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        603,
        0
      ],
      "end_point": [
        618,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movi_d(_F0 - v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        620,
        0
      ],
      "end_point": [
        635,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_R2 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size + stack_framesize, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        637,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_R2 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + stack_framesize, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        658,
        0
      ],
      "end_point": [
        677,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movr_f(_F0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize\n#if __WORDSIZE == 64\n\t\t   + (__WORDSIZE >> 3) - sizeof(jit_float32_t)\n#endif\n\t\t   , JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        679,
        0
      ],
      "end_point": [
        702,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_f(_F0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n \tjit_stxi_f(_jitc->function->call.size + stack_framesize\n#if __WORDSIZE == 64\n\t\t   + (__WORDSIZE >> 3) - sizeof(jit_float32_t)\n#endif\n\t\t   , JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 24,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        704,
        0
      ],
      "end_point": [
        719,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movr_d(_F0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tjit_stxi_d(_jitc->function->call.size + stack_framesize, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        721,
        0
      ],
      "end_point": [
        740,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_d(_F0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n \tjit_stxi_d(_jitc->function->call.size + stack_framesize, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        742,
        0
      ],
      "end_point": [
        758,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tregno = _R2 - regno;\n\tif (regno >= 0 && regno < node->v.w)\n\t    return (1);\n\tif (spec & jit_class_fpr) {\n\t    regno = _F0 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n    return (0);\n}",
      "lines": 17,
      "depth": 13,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        760,
        0
      ],
      "end_point": [
        775,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = _jitc->function->call.argi;\n    call->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        777,
        0
      ],
      "end_point": [
        793,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        795,
        0
      ],
      "end_point": [
        801,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        803,
        0
      ],
      "end_point": [
        809,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        811,
        0
      ],
      "end_point": [
        817,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        819,
        0
      ],
      "end_point": [
        825,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        827,
        0
      ],
      "end_point": [
        837,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n#if __WORDSIZE == 64\n    jit_extr_i(r0, JIT_RET);\n#else\n    jit_movr(r0, JIT_RET);\n#endif\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        840,
        0
      ],
      "end_point": [
        846,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_ui, r0);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        848,
        0
      ],
      "end_point": [
        854,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    jit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        857,
        0
      ],
      "end_point": [
        863,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    jit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        865,
        0
      ],
      "end_point": [
        871,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    jit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        873,
        0
      ],
      "end_point": [
        1539,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n\n#define assert_data(node)\t\t/**/\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_f:\t\t\t\t\t\\\n\t\tassert_data(node);\t\t\t\t\t\\\n\t\tname##i_f(rn(node->u.w), rn(node->v.w),\t\t\t\\\n\t\t\t  (jit_float32_t *)node->w.n->u.w);\t\t\\\n\t\tbreak\n#define case_rrd(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_d:\t\t\t\t\t\\\n\t\tassert_data(node);\t\t\t\t\t\\\n\t\tname##i_d(rn(node->u.w), rn(node->v.w),\t\t\t\\\n\t\t\t  (jit_float64_t *)node->w.n->u.w);\t\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type##_p(_jit->pc.w,\t\t\\\n\t\t\t\t\t     rn(node->v.w),\t\t\\\n\t\t\t\t\t     rn(node->w.w));\t\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type##_p(_jit->pc.w,\t\t\\\n\t\t\t\t\t     rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak;\n#define case_brf(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_f:\t\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i_f(temp->u.w, rn(node->v.w),\t\t\t\\\n\t\t\t      (jit_float32_t *)node->w.n->u.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i_f_p(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t       (jit_float32_t *)node->w.n->u.w);\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brd(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_d:\t\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i_d(temp->u.w, rn(node->v.w),\t\t\t\\\n\t\t\t      (jit_float64_t *)node->w.n->u.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i_d_p(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t       (jit_float64_t *)node->w.n->u.w);\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\tif ((node->link || (node->flag & jit_flag_use)) &&\n\t\t    (word = _jit->pc.w & 3))\n\t\t    nop(4 - word);\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n#if __WORDSIZE == 64\n\t\tcase_rr(trunc, _f_l);\n\t\tcase_rr(trunc, _d_l);\n#endif\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n#endif\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n#endif\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n#if __WORDSIZE == 64\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n#endif\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n#if __WORDSIZE == 64\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n#endif\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n#if __WORDSIZE == 64\n\t\tcase_rr(hton, _ul);\n#endif\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n#if __WORDSIZE == 64\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n#endif\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), temp->u.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub);\n\t\tcase_rrf(rsb);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert_data(node);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord);\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrd(add);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrd(sub);\n\t\tcase_rrd(rsb);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrd(mul);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrd(div);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert_data(node);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrd(lt);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrd(le);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrd(eq);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrd(ge);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrd(gt);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrd(ne);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrd(unlt);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrd(unle);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrd(uneq);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrd(unge);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrd(ungt);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrd(ltgt);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrd(ord);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrd(unord);\n\t\tcase_brr(blt, _d);\n\t\tcase_brd(blt);\n\t\tcase_brr(ble, _d);\n\t\tcase_brd(ble);\n\t\tcase_brr(beq, _d);\n\t\tcase_brd(beq);\n\t\tcase_brr(bge, _d);\n\t\tcase_brd(bge);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brd(bgt);\n\t\tcase_brr(bne, _d);\n\t\tcase_brd(bne);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brd(bunlt);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brd(bunle);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brd(buneq);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brd(bunge);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brd(bungt);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brd(bltgt);\n\t\tcase_brr(bord, _d);\n\t\tcase_brd(bord);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brd(bunord);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tcalli(temp->u.w);\n\t\t    else {\n\t\t\tword = calli_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\tif (node->link && (word = _jit->pc.w & 3))\n\t\t    nop(4 - word);\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n#if __WORDSIZE == 64\n\t    case jit_code_getarg_ui:\t\tcase jit_code_getarg_l:\n#endif\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n#if __WORDSIZE == 64\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n#endif\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrw\n#undef case_rrr\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 667,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1546,
        0
      ],
      "end_point": [
        1557,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n#if defined(__GNUC__)\n    jit_word_t\t\tf, t, s;\n\n    s = sysconf(_SC_PAGE_SIZE);\n    f = (jit_word_t)fptr & -s;\n    t = (((jit_word_t)tptr) + s - 1) & -s;\n    __clear_cache((void *)f, (void *)t);\n#endif\n}",
      "lines": 12,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1559,
        0
      ],
      "end_point": [
        1563,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_gpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1565,
        0
      ],
      "end_point": [
        1569,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_gpr_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1571,
        0
      ],
      "end_point": [
        1575,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_fpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1577,
        0
      ],
      "end_point": [
        1581,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_fpr_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_reg_pair": {
      "start_point": [
        1583,
        0
      ],
      "end_point": [
        1628,
        1
      ],
      "content": "static jit_int32_t\n_jit_get_reg_pair(jit_state_t *_jit)\n{\n    jit_int32_t\t\tr1, r2;\n    /* Try to find a register pair for use with operations that\n     * require a odd based register pair. Search for the best\n     * match to avoid spills or at least a valid operation.\n     */\n\n    /* Try non callee save first */\n    if (jit_reg_free_p(_R0) && jit_reg_free_p(_R1))\n\tr1 = _R0, r2 = _R1;\n    else if (jit_reg_free_p(_R2) && jit_reg_free_p(_R3))\n\tr1 = _R2, r2 = _R3;\n    else if (jit_reg_free_p(_R4) && jit_reg_free_p(_R5))\n\tr1 = _R4, r2 = _R5;\n    /* Try callee save registers */\n    else if (jit_reg_free_p(_R10) && jit_reg_free_p(_R11))\n\tr1 = _R10, r2 = _R11;\n    else if (jit_reg_free_p(_R8) && jit_reg_free_p(_R9))\n\tr1 = _R8, r2 = _R9;\n    else if (jit_reg_free_p(_R6) && jit_reg_free_p(_R7))\n\tr1 = _R6, r2 = _R7;\n\n    /* We *must* find a register pair */\n    else if (jit_reg_free_if_spill_p(_R0) && jit_reg_free_if_spill_p(_R1))\n\tr1 = _R0, r2 = _R1;\n    else if (jit_reg_free_if_spill_p(_R2) && jit_reg_free_if_spill_p(_R3))\n\tr1 = _R2, r2 = _R3;\n    else if (jit_reg_free_if_spill_p(_R4) && jit_reg_free_if_spill_p(_R5))\n\tr1 = _R4, r2 = _R5;\n    else if (jit_reg_free_if_spill_p(_R10) && jit_reg_free_if_spill_p(_R11))\n\tr1 = _R10, r2 = _R11;\n    else if (jit_reg_free_if_spill_p(_R8) && jit_reg_free_if_spill_p(_R9))\n\tr1 = _R8, r2 = _R9;\n    else if (jit_reg_free_if_spill_p(_R6) && jit_reg_free_if_spill_p(_R7))\n\tr1 = _R6, r2 = _R7;\n    else\n\t/* Do not jit_get_reg() all registers to avoid it */\n\tabort();\n\n    (void)jit_get_reg(jit_class_gpr|jit_class_named|r1);\n    (void)jit_get_reg(jit_class_gpr|jit_class_named|r2);\n\n    return (r1);\n}",
      "lines": 46,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_jit_unget_reg_pair": {
      "start_point": [
        1630,
        0
      ],
      "end_point": [
        1646,
        1
      ],
      "content": "static void\n_jit_unget_reg_pair(jit_state_t *_jit, jit_int32_t reg)\n{\n    jit_int32_t\t\tr1, r2;\n    r1 = reg;\n    switch (r1) {\n\tcase _R0:\tr2 = _R1;\tbreak;\n\tcase _R2:\tr2 = _R3;\tbreak;\n\tcase _R4:\tr2 = _R5;\tbreak;\n\tcase _R6:\tr2 = _R7;\tbreak;\n\tcase _R8:\tr2 = _R9;\tbreak;\n\tcase _R10:\tr2 = _R11;\tbreak;\n\tdefault:\tabort();\n    }\n    jit_unget_reg(r1);\n    jit_unget_reg(r2);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jit_get_reg_but_zero": {
      "start_point": [
        1648,
        0
      ],
      "end_point": [
        1658,
        1
      ],
      "content": "static jit_int32_t\n_jit_get_reg_but_zero(jit_state_t *_jit, jit_int32_t flags)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    if (reg == _R0) {\n\treg = jit_get_reg(jit_class_gpr|flags);\n\tjit_unget_reg(_R0);\n    }\n    return (reg);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_patch": {
      "start_point": [
        1660,
        0
      ],
      "end_point": [
        1680,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\tflag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_size.c": {
    "jit_init_size": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "content": "void\njit_init_size(void)\n{\n#if DEBUG\n#  if !GET_JIT_SIZE\n    jit_word_t\t\toffset;\n\n    for (offset = 0; offset < jit_size(_szs); offset++)\n\tif (_szs[offset] != 0)\n\t    return;\n    /* Ensure data was collected */\n    abort();\n#  endif\n#endif\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_size_prepare": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "content": "void\n_jit_size_prepare(jit_state_t *_jit)\n{\n    _jitc->cptr = _jit->code.ptr;\n    _jitc->size = _jit->pc.w;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_size_collect": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "content": "void\n_jit_size_collect(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_word_t\t\tlength;\n\n    if (_jitc->cptr == _jit->code.ptr) {\n\tlength = _jit->pc.w - _jitc->size;\n\tif (_szs[node->code] < length)\n\t    _szs[node->code] = length;\n    }\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_size": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "content": "jit_word_t\n_jit_get_size(jit_state_t *_jit)\n{\n    jit_word_t\t\t size;\n    jit_node_t\t\t*node;\n\n    for (size = JIT_INSTR_MAX, node = _jitc->head; node; node = node->next)\n\tsize += _szs[node->code];\n\n    return ((size + 4095) & -4096);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_word_t"
      ]
    },
    "jit_get_max_instr": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        113,
        1
      ],
      "content": "jit_word_t\njit_get_max_instr(void)\n{\n    return (JIT_INSTR_MAX >= 144 ? JIT_INSTR_MAX : 144);\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "jit_word_t"
      ]
    },
    "jit_finish_size": {
      "start_point": [
        115,
        0
      ],
      "end_point": [
        129,
        1
      ],
      "content": "void\njit_finish_size(void)\n{\n#if GET_JIT_SIZE\n    FILE\t\t*fp;\n    jit_word_t\t\t offset;\n\n    /* Define a single path */\n    fp = fopen(JIT_SIZE_PATH, \"a\");\n    assert(fp);\n    for (offset = 0; offset < jit_size(_szs); offset++)\n\tfprintf(fp, \"%d %d\\n\", offset, _szs[offset]);\n    fclose(fp);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_sparc-cpu.c": {
    "_f2r": {
      "start_point": [
        684,
        0
      ],
      "end_point": [
        698,
        1
      ],
      "content": "static void\n_f2r(jit_state_t *_jit,\n     jit_int32_t op, jit_int32_t rd, jit_int32_t op2, jit_int32_t imm22)\n{\n    jit_instr_t\t\tv;\n    assert(!(op  & 0xfffffffc));\n    assert(!(rd  & 0xffffffe0));\n    assert(!(op2 & 0xfffffff8));\n    assert(s22_p(imm22));\n    v.op.b    = op;\n    v.rd.b    = rd;\n    v.op2.b   = op2;\n    v.imm22.b = imm22;\n    ii(v.v);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f2b": {
      "start_point": [
        700,
        0
      ],
      "end_point": [
        717,
        1
      ],
      "content": "static void\n_f2b(jit_state_t *_jit,\n     jit_int32_t op, jit_int32_t a, jit_int32_t cond, jit_int32_t op2,\n     jit_int32_t disp22)\n{\n    jit_instr_t\t\tv;\n    assert(!(op   & 0xfffffffc));\n    assert(!(a    & 0xfffffffe));\n    assert(!(cond & 0xfffffff0));\n    assert(!(op2  & 0xfffffff8));\n    assert(s22_p(disp22));\n    v.op.b     = op;\n    v.a.b      = a;\n    v.cond.b   = cond;\n    v.op2.b    = op2;\n    v.disp22.b = disp22;\n    ii(v.v);\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f3r": {
      "start_point": [
        719,
        0
      ],
      "end_point": [
        737,
        1
      ],
      "content": "static void\n_f3r(jit_state_t *_jit, jit_int32_t op, jit_int32_t rd,\n     jit_int32_t op3, jit_int32_t rs1, jit_int32_t rs2)\n{\n    jit_instr_t\t\tv;\n    assert(!(op  & 0xfffffffc));\n    assert(!(rd  & 0xffffffe0));\n    assert(!(op3 & 0xffffffc0));\n    assert(!(rs1 & 0xffffffe0));\n    assert(!(rs2 & 0xffffffe0));\n    v.op.b    = op;\n    v.rd.b    = rd;\n    v.op3.b   = op3;\n    v.rs1.b   = rs1;\n    v.i.b     = 0;\n    v.asi.b   = 0;\n    v.rs2.b   = rs2;\n    ii(v.v);\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f3i": {
      "start_point": [
        739,
        0
      ],
      "end_point": [
        756,
        1
      ],
      "content": "static void\n_f3i(jit_state_t *_jit, jit_int32_t op, jit_int32_t rd,\n     jit_int32_t op3, jit_int32_t rs1, jit_int32_t simm13)\n{\n    jit_instr_t\t\tv;\n    assert(!(op  & 0xfffffffc));\n    assert(!(rd  & 0xffffffe0));\n    assert(!(op3 & 0xffffffc0));\n    assert(!(rs1 & 0xffffffe0));\n    assert(s13_p(simm13));\n    v.op.b     = op;\n    v.rd.b     = rd;\n    v.op3.b    = op3;\n    v.rs1.b    = rs1;\n    v.i.b      = 1;\n    v.simm13.b = simm13;\n    ii(v.v);\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f3t": {
      "start_point": [
        758,
        0
      ],
      "end_point": [
        781,
        1
      ],
      "content": "static void\n_f3t(jit_state_t *_jit, jit_int32_t cond,\n     jit_int32_t rs1, jit_int32_t i, jit_int32_t rs2_imm7)\n{\n    jit_instr_t\t\tv;\n    assert(!(cond & 0xfffffff0));\n    assert(!(i    & 0xfffffffe));\n    assert(!(rs1 & 0xffffffe0));\n    v.op.b     = 2;\n    v.rd.b     = cond;\n    v.op3.b    = 58;\n    v.i.b      = i;\n    if (i) {\n\tassert(s7_p(rs2_imm7));\n\tv.res.b  = 0;\n\tv.imm7.b = rs2_imm7;\n    }\n    else {\n\tassert(!(rs2_imm7 & 0xffffffe0));\n\tv.asi.b = 0;\n\tv.rs2.b = rs2_imm7;\n    }\n    ii(v.v);\n}",
      "lines": 24,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f3a": {
      "start_point": [
        783,
        0
      ],
      "end_point": [
        802,
        1
      ],
      "content": "static void\n_f3a(jit_state_t *_jit, jit_int32_t op, jit_int32_t rd,\n     jit_int32_t op3, jit_int32_t rs1, jit_int32_t asi, jit_int32_t rs2)\n{\n    jit_instr_t\t\tv;\n    assert(!(op  & 0xfffffffc));\n    assert(!(rd  & 0xffffffe0));\n    assert(!(op3 & 0xffffffc0));\n    assert(!(rs1 & 0xffffffe0));\n    assert(!(asi & 0xffffff00));\n    assert(!(rs2 & 0xffffffe0));\n    v.op.b    = op;\n    v.rd.b    = rd;\n    v.op3.b   = op3;\n    v.rs1.b   = rs1;\n    v.i.b     = 0;\n    v.asi.b   = asi;\n    v.rs2.b   = rs2;\n    ii(v.v);\n}",
      "lines": 20,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_f1": {
      "start_point": [
        804,
        0
      ],
      "end_point": [
        813,
        1
      ],
      "content": "static void\n_f1(jit_state_t *_jit, jit_int32_t op, jit_int32_t disp30)\n{\n    jit_instr_t\t\tv;\n    assert(!(op  & 0xfffffffc));\n    assert(s30_p(disp30));\n    v.op.b     = op;\n    v.disp30.b = disp30;\n    ii(v.v);\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        815,
        0
      ],
      "end_point": [
        821,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t i0)\n{\n    for (; i0 > 0; i0 -= 4)\n\tNOP();\n    assert(i0 == 0);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        823,
        0
      ],
      "end_point": [
        828,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tORI(r1, 0, r0);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        830,
        0
      ],
      "end_point": [
        840,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    if (s13_p(i0))\n\tORI(0, i0, r0);\n    else {\n\tSETHI(HI(i0), r0);\n\tif (LO(i0))\n\t    ORI(r0, LO(i0), r0);\n    }\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        850,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = _jit->pc.w;\n    SETHI(HI(i0), r0);\n    ORI(r0, LO(i0), r0);\n    return (w);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_addi": {
      "start_point": [
        852,
        0
      ],
      "end_point": [
        864,
        1
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tADDI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        866,
        0
      ],
      "end_point": [
        878,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tADDIcc(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddcr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        880,
        0
      ],
      "end_point": [
        892,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tADDXIcc(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\taddxr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        894,
        0
      ],
      "end_point": [
        906,
        1
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSUBI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        908,
        0
      ],
      "end_point": [
        920,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSUBIcc(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubcr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        922,
        0
      ],
      "end_point": [
        934,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSUBXIcc(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsubxr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        936,
        0
      ],
      "end_point": [
        941,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        943,
        0
      ],
      "end_point": [
        955,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tUMULI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tmulr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        957,
        0
      ],
      "end_point": [
        966,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    if (sign)\n\tSMUL(r2, r3, r0);\n    else\n\tUMUL(r2, r3, r0);\n    RDY(r1);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        968,
        0
      ],
      "end_point": [
        986,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0)) {\n\tif (sign)\n\t    SMULI(r2, i0, r0);\n\telse\n\t    UMULI(r2, i0, r0);\n\tRDY(r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tiqmulr(r0, r1, r2, rn(reg), sign);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr": {
      "start_point": [
        988,
        0
      ],
      "end_point": [
        997,
        1
      ],
      "content": "static void\n_divr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    rshi(rn(reg), r1, 31);\n    WRY(rn(reg), 0);\n    SDIV(r1, r2, r0);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi": {
      "start_point": [
        999,
        0
      ],
      "end_point": [
        1014,
        1
      ],
      "content": "static void\n_divi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    if (s13_p(i0)) {\n\trshi(rn(reg), r1, 31);\n\tWRY(rn(reg), 0);\n\tSDIVI(r1, i0, r0);\n    }\n    else {\n\tmovi(rn(reg), i0);\n\tdivr(r0, r1, rn(reg));\n    }\n    jit_unget_reg(reg);\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divr_u": {
      "start_point": [
        1016,
        0
      ],
      "end_point": [
        1021,
        1
      ],
      "content": "static void\n_divr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    WRYI(0, 0);\n    UDIV(r1, r2, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divi_u": {
      "start_point": [
        1023,
        0
      ],
      "end_point": [
        1037,
        1
      ],
      "content": "static void\n_divi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0)) {\n\tWRYI(0, 0);\n\tUDIVI(r1, i0, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tdivr_u(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        1039,
        0
      ],
      "end_point": [
        1073,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\tsv0, rg0;\n    jit_int32_t\t\tsv1, rg1;\n\n    if (r0 == r2 || r0 == r3) {\n\tsv0 = jit_get_reg(jit_class_gpr);\n\trg0 = rn(sv0);\n    }\n    else\n\trg0 = r0;\n    if (r1 == r2 || r1 == r3) {\n\tsv1 = jit_get_reg(jit_class_gpr);\n\trg1 = rn(sv1);\n    }\n    else\n\trg1 = r1;\n\n    if (sign)\n\tdivr(rg0, r2, r3);\n    else\n\tdivr_u(rg0, r2, r3);\n    mulr(rg1, r3, rg0);\n    subr(rg1, r2, rg1);\n    if (rg0 != r0) {\n\tmovr(r0, rg0);\n\tjit_unget_reg(sv0);\n    }\n    if (rg1 != r1) {\n\tmovr(r1, rg1);\n\tjit_unget_reg(sv1);\n    }\n}",
      "lines": 35,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        1075,
        0
      ],
      "end_point": [
        1084,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    iqdivr(r0, r1, r2, rn(reg), sign);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr": {
      "start_point": [
        1086,
        0
      ],
      "end_point": [
        1102,
        1
      ],
      "content": "static void\n_remr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi": {
      "start_point": [
        1104,
        0
      ],
      "end_point": [
        1112,
        1
      ],
      "content": "static void\n_remi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remr_u": {
      "start_point": [
        1114,
        0
      ],
      "end_point": [
        1130,
        1
      ],
      "content": "static void\n_remr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1 || r0 == r2) {\n\treg = jit_get_reg(jit_class_gpr);\n\tdivr_u(rn(reg), r1, r2);\n\tmulr(rn(reg), r2, rn(reg));\n\tsubr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tdivr_u(r0, r1, r2);\n\tmulr(r0, r2, r0);\n\tsubr(r0, r1, r0);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_remi_u": {
      "start_point": [
        1132,
        0
      ],
      "end_point": [
        1140,
        1
      ],
      "content": "static void\n_remi_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    remr_u(r0, r1, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1142,
        0
      ],
      "end_point": [
        1154,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tANDI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tandr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1156,
        0
      ],
      "end_point": [
        1168,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tORI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\torr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1170,
        0
      ],
      "end_point": [
        1182,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tXORI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\txorr(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_c": {
      "start_point": [
        1184,
        0
      ],
      "end_point": [
        1189,
        1
      ],
      "content": "static void\n_extr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 24);\n    rshi(r0, r0, 24);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_s": {
      "start_point": [
        1191,
        0
      ],
      "end_point": [
        1196,
        1
      ],
      "content": "static void\n_extr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 16);\n    rshi(r0, r0, 16);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_us": {
      "start_point": [
        1198,
        0
      ],
      "end_point": [
        1203,
        1
      ],
      "content": "static void\n_extr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    lshi(r0, r1, 16);\n    rshi_u(r0, r0, 16);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cr": {
      "start_point": [
        1205,
        0
      ],
      "end_point": [
        1213,
        1
      ],
      "content": "static void\n_cr(jit_state_t *_jit, jit_int32_t cc,\n    jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    CMP(r1, r2);\n    Ba(cc, 3);\n    movi(r0, 1);\n    movi(r0, 0);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cw": {
      "start_point": [
        1215,
        0
      ],
      "end_point": [
        1232,
        1
      ],
      "content": "static void\n_cw(jit_state_t *_jit, jit_int32_t cc,\n    jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0)) {\n\tCMPI(r1, i0);\n\tBa(cc, 3);\n\tmovi(r0, 1);\n\tmovi(r0, 0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tcr(cc, r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        1234,
        0
      ],
      "end_point": [
        1246,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDSBI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        1248,
        0
      ],
      "end_point": [
        1260,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDUBI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        1262,
        0
      ],
      "end_point": [
        1274,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDSHI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        1276,
        0
      ],
      "end_point": [
        1288,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDUHI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        1290,
        0
      ],
      "end_point": [
        1302,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        1304,
        0
      ],
      "end_point": [
        1316,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDSBI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_c(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        1318,
        0
      ],
      "end_point": [
        1330,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDUBI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_uc(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        1332,
        0
      ],
      "end_point": [
        1344,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDSHI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_s(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        1346,
        0
      ],
      "end_point": [
        1358,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDUHI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_us(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        1360,
        0
      ],
      "end_point": [
        1372,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_i(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        1374,
        0
      ],
      "end_point": [
        1386,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTBI(r0, 0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_c(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        1388,
        0
      ],
      "end_point": [
        1400,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTHI(r0, 0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_s(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        1402,
        0
      ],
      "end_point": [
        1414,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTI(r0, 0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_i(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        1416,
        0
      ],
      "end_point": [
        1428,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTBI(r1, r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_c(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        1430,
        0
      ],
      "end_point": [
        1442,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTHI(r1, r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_s(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        1444,
        0
      ],
      "end_point": [
        1456,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTI(r1, r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_i(r0, rn(reg), r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_br": {
      "start_point": [
        1458,
        0
      ],
      "end_point": [
        1468,
        1
      ],
      "content": "static jit_word_t\n_br(jit_state_t *_jit, jit_int32_t cc,\n    jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    CMP(r0, r1);\n    w = _jit->pc.w;\n    B(cc, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bw": {
      "start_point": [
        1470,
        0
      ],
      "end_point": [
        1489,
        1
      ],
      "content": "static jit_word_t\n_bw(jit_state_t *_jit, jit_int32_t cc,\n    jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (s13_p(i1)) {\n\tCMPI(r0, i1);\n\tw = _jit->pc.w;\n\tB(cc, (i0 - w) >> 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = br(cc, i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_b_asr": {
      "start_point": [
        1491,
        0
      ],
      "end_point": [
        1507,
        1
      ],
      "content": "static jit_word_t\n_b_asr(jit_state_t *_jit, jit_bool_t jif, jit_bool_t add, jit_bool_t sgn,\n       jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    if (add)\n\tADDcc(r0, r1, r0);\n    else\n\tSUBcc(r0, r1, r0);\n    w = _jit->pc.w;\n    B(sgn ?\n      (jif ? SPARC_BVS : SPARC_BVC) :\n      (jif ? SPARC_BCS : SPARC_BCC),\n      (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 17,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_b_asw": {
      "start_point": [
        1509,
        0
      ],
      "end_point": [
        1534,
        1
      ],
      "content": "static jit_word_t\n_b_asw(jit_state_t *_jit, jit_bool_t jif, jit_bool_t add, jit_bool_t sgn,\n       jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (s13_p(i1)) {\n\tif (add)\n\t    ADDIcc(r0, i1, r0);\n\telse\n\t    SUBIcc(r0, i1, r0);\n\tw = _jit->pc.w;\n\tB(sgn ?\n\t  (jif ? SPARC_BVS : SPARC_BVC) :\n\t  (jif ? SPARC_BCS : SPARC_BCC),\n\t  (i0 - w) >> 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = b_asr(jif, add, sgn, i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 26,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bm_r": {
      "start_point": [
        1536,
        0
      ],
      "end_point": [
        1546,
        1
      ],
      "content": "static jit_word_t\n_bm_r(jit_state_t *_jit, jit_bool_t set,\n      jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    BTST(r0, r1);\n    w = _jit->pc.w;\n    B(set ? SPARC_BNZ : SPARC_BZ, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bm_w": {
      "start_point": [
        1548,
        0
      ],
      "end_point": [
        1567,
        1
      ],
      "content": "static jit_word_t\n_bm_w(jit_state_t *_jit, jit_bool_t set,\n      jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    if (s13_p(i1)) {\n\tBTSTI(r0, i1);\n\tw = _jit->pc.w;\n\tB(set ? SPARC_BNZ : SPARC_BZ, (i0 - w) >> 2);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i1);\n\tw = bm_r(set, i0, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    return (w);\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpr": {
      "start_point": [
        1569,
        0
      ],
      "end_point": [
        1574,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    JMPL(0, r0, 0);\n    NOP();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        1576,
        0
      ],
      "end_point": [
        1592,
        1
      ],
      "content": "static void\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    w = (i0 - _jit->pc.w) >> 2;\n    if (s22_p(w)) {\n\tBA(w);\n\tNOP();\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n\tmovi(rn(reg), i0);\n\tjmpr(rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi_p": {
      "start_point": [
        1594,
        0
      ],
      "end_point": [
        1604,
        1
      ],
      "content": "static jit_word_t\n_jmpi_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    w = movi_p(rn(reg), i0);\n    jmpr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        1606,
        0
      ],
      "end_point": [
        1611,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    CALL(r0);\n    NOP();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        1613,
        0
      ],
      "end_point": [
        1620,
        1
      ],
      "content": "static void\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    w = (i0 - _jit->pc.w) >> 2;\n    CALLI(w);\n    NOP();\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli_p": {
      "start_point": [
        1622,
        0
      ],
      "end_point": [
        1632,
        1
      ],
      "content": "static jit_word_t\n_calli_p(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    w = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_prolog": {
      "start_point": [
        1634,
        0
      ],
      "end_point": [
        1683,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -16;\n    /* align at 16 bytes boundary */\n    _jitc->function->stack = ((stack_framesize +\n\t\t\t      _jitc->function->self.alen -\n\t\t\t      _jitc->function->self.aoff) + 15) & -16;\n    SAVEI(_SP_REGNO, -_jitc->function->stack, _SP_REGNO);\n\n    /* (most) other backends do not save incoming arguments, so,\n     * only save locals here */\n    if (jit_regset_tstbit(&_jitc->function->regset, _L0))\n\tstxi(0, _SP_REGNO, _L0_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L1))\n\tstxi(4, _SP_REGNO, _L1_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L2))\n\tstxi(8, _SP_REGNO, _L2_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L3))\n\tstxi(12, _SP_REGNO, _L3_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L4))\n\tstxi(16, _SP_REGNO, _L4_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L5))\n\tstxi(20, _SP_REGNO, _L5_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L6))\n\tstxi(24, _SP_REGNO, _L6_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L7))\n\tstxi(28, _SP_REGNO, _L7_REGNO);\n\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tfor (reg = _jitc->function->vagp; jit_arg_reg_p(reg); ++reg)\n\t    stxi(68 + reg * 4, _SP_REGNO, rn(_I0 + reg));\n    }\n}",
      "lines": 50,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        1685,
        0
      ],
      "end_point": [
        1711,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n    /* (most) other backends do not save incoming arguments, so,\n     * only save locals here */\n    if (jit_regset_tstbit(&_jitc->function->regset, _L0))\n\tldxi(_L0_REGNO, _SP_REGNO, 0);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L1))\n\tldxi(_L1_REGNO, _SP_REGNO, 4);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L2))\n\tldxi(_L2_REGNO, _SP_REGNO, 8);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L3))\n\tldxi(_L3_REGNO, _SP_REGNO, 12);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L4))\n\tldxi(_L4_REGNO, _SP_REGNO, 16);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L5))\n\tldxi(_L5_REGNO, _SP_REGNO, 20);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L6))\n\tldxi(_L6_REGNO, _SP_REGNO, 24);\n    if (jit_regset_tstbit(&_jitc->function->regset, _L7))\n\tldxi(_L7_REGNO, _SP_REGNO, 28);\n    RESTOREI(0, 0, 0);\n    RETL();\n    NOP();\n}",
      "lines": 27,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        1713,
        0
      ],
      "end_point": [
        1718,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n    /* Initialize stack pointer to the first stack argument. */\n    addi(r0, _SP_REGNO, 68 + _jitc->function->vagp * 4);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        1720,
        0
      ],
      "end_point": [
        1730,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Load argument. */\n    ldr(r0, r1);\n\n    /* Update vararg stack pointer. */\n    addi(r1, r1, 4);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        1732,
        0
      ],
      "end_point": [
        1767,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_word_t instr, jit_word_t label)\n{\n    jit_instr_t\t\t i;\n    union {\n\tjit_int32_t\t*i;\n\tjit_word_t\t w;\n    } u;\n\n    u.w = instr;\n    i.v = u.i[0];\n\n    if (i.op.b == 0) {\t\t\t\t/* conditional branch */\n\tif (i.op2.b == 2 || i.op2.b == 6) {\t/* int or float condition */\n\t    i.disp22.b = (label - instr) >> 2;\n\t    u.i[0] = i.v;\n\t}\n\telse if (i.op2.b == 4) {\t/* movi_p */\n\t    /* SETHI */\n\t    i.imm22.b = HI(label);\n\t    u.i[0] = i.v;\n\t    i.v = u.i[1];\n\t    if (i.op.b == 2 && i.op3.b == 2) {\n\t\t/* ORI */\n\t\ti.simm13.b = LO(label);\n\t\tu.i[1] = i.v;\n\t    }\n\t    else\n\t\tabort();\n\t}\n\telse\n\t    abort();\n    }\n    else\n\tabort();\n}",
      "lines": 36,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_sparc-fpu.c": {
    "_f3f": {
      "start_point": [
        369,
        0
      ],
      "end_point": [
        386,
        1
      ],
      "content": "static void\n_f3f(jit_state_t *_jit, jit_int32_t rd,\n     jit_int32_t op3, jit_int32_t rs1, jit_int32_t opf, jit_int32_t rs2)\n{\n    jit_instr_t\t\tv;\n    assert(!(rd  & 0xffffffe0));\n    assert(!(op3 & 0xffffffc0));\n    assert(!(rs1 & 0xffffffe0));\n    assert(!(opf & 0xfffffe00));\n    assert(!(rs2 & 0xffffffe0));\n    v.op.b    = 2;\n    v.rd.b    = rd;\n    v.op3.b   = op3;\n    v.rs1.b   = rs1;\n    v.opf.b   = opf;\n    v.rs2.b   = rs2;\n    ii(v.v);\n}",
      "lines": 18,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_f": {
      "start_point": [
        388,
        0
      ],
      "end_point": [
        407,
        1
      ],
      "content": "static void\n_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.f = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i & 0xffffffff);\n\tstxi_i(-8, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_f(r0, _FP_REGNO, -8);\n    }\n    else\n\tldi_f(r0, (jit_word_t)i0);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_d": {
      "start_point": [
        409,
        0
      ],
      "end_point": [
        430,
        1
      ],
      "content": "static void\n_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\t i[2];\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    if (_jitc->no_data) {\n\tdata.d = *i0;\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), data.i[0]);\n\tstxi_i(-8, _FP_REGNO, rn(reg));\n\tmovi(rn(reg), data.i[1]);\n\tstxi_i(-4, _FP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n\tldxi_d(r0, _FP_REGNO, -8);\n    }\n    else\n\tldi_d(r0, (jit_word_t)i0);\n}",
      "lines": 22,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr_d": {
      "start_point": [
        432,
        0
      ],
      "end_point": [
        441,
        1
      ],
      "content": "static void\n_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(!(r0 & 1));\n    assert(!(r1 & 1));\n    if (r0 != r1) {\n\tFMOVS(r1, r0);\n\tFMOVS(r1 + 1, r0 + 1);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_negr_d": {
      "start_point": [
        443,
        0
      ],
      "end_point": [
        451,
        1
      ],
      "content": "static void\n_negr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(!(r0 & 1));\n    assert(!(r1 & 1));\n    FNEGS(r1, r0);\n    if (r0 != r1)\n\tFMOVS(r1 + 1, r0 + 1);\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_absr_d": {
      "start_point": [
        453,
        0
      ],
      "end_point": [
        461,
        1
      ],
      "content": "static void\n_absr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(!(r0 & 1));\n    assert(!(r1 & 1));\n    FABSS(r1, r0);\n    if (r0 != r1)\n\tFMOVS(r1 + 1, r0 + 1);\n}",
      "lines": 9,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fop1f": {
      "start_point": [
        463,
        0
      ],
      "end_point": [
        472,
        1
      ],
      "content": "static void\n_fop1f(jit_state_t *_jit, jit_int32_t op,\n       jit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    FPop1(r0, r1, op, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rfop1f": {
      "start_point": [
        474,
        0
      ],
      "end_point": [
        483,
        1
      ],
      "content": "static void\n_rfop1f(jit_state_t *_jit, jit_int32_t op,\n\tjit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    FPop1(r0, rn(reg), op, r1);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fop1d": {
      "start_point": [
        485,
        0
      ],
      "end_point": [
        494,
        1
      ],
      "content": "static void\n_fop1d(jit_state_t *_jit, jit_int32_t op,\n       jit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    FPop1(r0, r1, op, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rfop1d": {
      "start_point": [
        496,
        0
      ],
      "end_point": [
        505,
        1
      ],
      "content": "static void\n_rfop1d(jit_state_t *_jit, jit_int32_t op,\n\tjit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    FPop1(r0, rn(reg), op, r1);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_f": {
      "start_point": [
        507,
        0
      ],
      "end_point": [
        513,
        1
      ],
      "content": "static void\n_extr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(-8, _FP_REGNO, r1);\n    ldxi_f(r0, _FP_REGNO, -8);\n    FITOS(r0, r0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_f_i": {
      "start_point": [
        515,
        0
      ],
      "end_point": [
        524,
        1
      ],
      "content": "static void\n_truncr_f_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FSTOI(r1, rn(reg));\n    stxi_f(-8, _FP_REGNO, rn(reg));\n    ldxi_i(r0, _FP_REGNO, -8);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fcr": {
      "start_point": [
        526,
        0
      ],
      "end_point": [
        534,
        1
      ],
      "content": "static void\n_fcr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPS(r1, r2);\n    FBa(cc, 3);\n    movi(r0, 1);\n    movi(r0, 0);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fcw": {
      "start_point": [
        536,
        0
      ],
      "end_point": [
        548,
        1
      ],
      "content": "static void\n_fcw(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_float32_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i0);\n    FCMPS(r1, rn(reg));\n    jit_unget_reg(reg);\n    FBa(cc, 3);\n    movi(r0, 1);\n    movi(r0, 0);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dcr": {
      "start_point": [
        550,
        0
      ],
      "end_point": [
        558,
        1
      ],
      "content": "static void\n_dcr(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    FCMPD(r1, r2);\n    FBa(cc, 3);\n    movi(r0, 1);\n    movi(r0, 0);\n}",
      "lines": 9,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_dcw": {
      "start_point": [
        560,
        0
      ],
      "end_point": [
        572,
        1
      ],
      "content": "static void\n_dcw(jit_state_t *_jit, jit_int32_t cc,\n     jit_int32_t r0, jit_int32_t r1, jit_float64_t *i0)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i0);\n    FCMPD(r1, rn(reg));\n    jit_unget_reg(reg);\n    FBa(cc, 3);\n    movi(r0, 1);\n    movi(r0, 0);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_f": {
      "start_point": [
        574,
        0
      ],
      "end_point": [
        586,
        1
      ],
      "content": "static void\n_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDFI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_f": {
      "start_point": [
        588,
        0
      ],
      "end_point": [
        600,
        1
      ],
      "content": "static void\n_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDFI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_f(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_f": {
      "start_point": [
        602,
        0
      ],
      "end_point": [
        614,
        1
      ],
      "content": "static void\n_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTFI(r0, 0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_f": {
      "start_point": [
        616,
        0
      ],
      "end_point": [
        628,
        1
      ],
      "content": "static void\n_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTFI(r1, r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_f(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_d": {
      "start_point": [
        630,
        0
      ],
      "end_point": [
        637,
        1
      ],
      "content": "static void\n_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(-8, _FP_REGNO, r1);\n    stxi(-4, _FP_REGNO, 0);\n    ldxi_d(r0, _FP_REGNO, -8);\n    FITOD(r0, r0);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_truncr_d_i": {
      "start_point": [
        639,
        0
      ],
      "end_point": [
        648,
        1
      ],
      "content": "static void\n_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    FDTOI(r1, rn(reg));\n    stxi_d(-8, _FP_REGNO, rn(reg));\n    ldxi_i(r0, _FP_REGNO, -8);\n    jit_unget_reg(reg);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_d": {
      "start_point": [
        650,
        0
      ],
      "end_point": [
        662,
        1
      ],
      "content": "static void\n_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDDFI(0, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_d": {
      "start_point": [
        664,
        0
      ],
      "end_point": [
        676,
        1
      ],
      "content": "static void\n_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tLDDFI(r1, i0, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_d(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_d": {
      "start_point": [
        678,
        0
      ],
      "end_point": [
        690,
        1
      ],
      "content": "static void\n_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTDFI(r0, 0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_d": {
      "start_point": [
        692,
        0
      ],
      "end_point": [
        704,
        1
      ],
      "content": "static void\n_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (s13_p(i0))\n\tSTDFI(r1, r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_d(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_fbr": {
      "start_point": [
        706,
        0
      ],
      "end_point": [
        716,
        1
      ],
      "content": "static jit_word_t\n_fbr(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0,jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMPS(r0, r1);\n    w = _jit->pc.w;\n    FB(cc, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_fbw": {
      "start_point": [
        718,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "content": "static jit_word_t\n_fbw(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float32_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_f(rn(reg), i1);\n    FCMPS(r0, rn(reg));\n    jit_unget_reg(reg);\n    w = _jit->pc.w;\n    FB(cc, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_dbr": {
      "start_point": [
        734,
        0
      ],
      "end_point": [
        744,
        1
      ],
      "content": "static jit_word_t\n_dbr(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tw;\n    FCMPD(r0, r1);\n    w = _jit->pc.w;\n    FB(cc, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 11,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_dbw": {
      "start_point": [
        746,
        0
      ],
      "end_point": [
        760,
        1
      ],
      "content": "static jit_word_t\n_dbw(jit_state_t *_jit, jit_int32_t cc,\n     jit_word_t i0, jit_int32_t r0, jit_float64_t *i1)\n{\n    jit_word_t\t\tw;\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_fpr);\n    movi_d(rn(reg), i1);\n    FCMPD(r0, rn(reg));\n    jit_unget_reg(reg);\n    w = _jit->pc.w;\n    FB(cc, (i0 - w) >> 2);\n    NOP();\n    return (w);\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        762,
        0
      ],
      "end_point": [
        772,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Load argument. */\n    ldr_d(r0, r1);\n\n    /* Update vararg stack pointer. */\n    addi(r1, r1, 8);\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_sparc-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_sparc.c": {
    "jit_get_cpu": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        99,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n}",
      "lines": 4,
      "depth": 5,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        101,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n    _jitc->reglen = jit_size(_rvs) - 1;\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        107,
        0
      ],
      "end_point": [
        148,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\t offset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.aoff = _jitc->function->self.alen = 0;\n    /* float conversion */\n    _jitc->function->self.aoff = -8;\n     _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 42,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        150,
        0
      ],
      "end_point": [
        166,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n    return (_jitc->function->self.aoff);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        168,
        0
      ],
      "end_point": [
        187,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -16);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(_SP, _SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        189,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        201,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        213,
        0
      ],
      "end_point": [
        220,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        222,
        0
      ],
      "end_point": [
        232,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (JIT_FRET != u)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        234,
        0
      ],
      "end_point": [
        241,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        243,
        0
      ],
      "end_point": [
        253,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (JIT_FRET != u)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        255,
        0
      ],
      "end_point": [
        262,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        264,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        273,
        0
      ],
      "end_point": [
        280,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg || u->code == jit_code_arg_f)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_d);\n    return (jit_arg_d_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        282,
        0
      ],
      "end_point": [
        299,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n\t_jitc->function->vagp = _jitc->function->self.argi;\n    }\n    jit_dec_synth();\n}",
      "lines": 18,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        301,
        0
      ],
      "end_point": [
        317,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prepare();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        319,
        0
      ],
      "end_point": [
        335,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_reg_p(_jitc->function->self.argi))\n\toffset = _jitc->function->self.argi++;\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_float32_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prepare();\n    return (node);\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        337,
        0
      ],
      "end_point": [
        359,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    if (jit_arg_d_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi;\n\t_jitc->function->self.argi += 2;\n    }\n    else if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n\t_jitc->function->self.size += sizeof(jit_float32_t);\n    }\n    else {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_float64_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prepare();\n    return (node);\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        361,
        0
      ],
      "end_point": [
        372,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, _I0 + v->u.w);\n    else\n\tjit_ldxi_c(u, JIT_FP,\n\t\t   v->u.w + (__WORDSIZE >> 3) - sizeof(jit_int8_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        374,
        0
      ],
      "end_point": [
        385,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, _I0 + v->u.w);\n    else\n\tjit_ldxi_uc(u, JIT_FP,\n\t\t    v->u.w + (__WORDSIZE >> 3) - sizeof(jit_uint8_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        387,
        0
      ],
      "end_point": [
        398,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, _I0 + v->u.w);\n    else\n\tjit_ldxi_s(u, JIT_FP,\n\t\t   v->u.w + (__WORDSIZE >> 3) - sizeof(jit_int16_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        400,
        0
      ],
      "end_point": [
        411,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, _I0 + v->u.w);\n    else\n\tjit_ldxi_us(u, JIT_FP,\n\t\t    v->u.w + (__WORDSIZE >> 3) - sizeof(jit_uint16_t));\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        413,
        0
      ],
      "end_point": [
        423,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, _I0 + v->u.w);\n    else\n\tjit_ldxi_i(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        425,
        0
      ],
      "end_point": [
        435,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(_I0 + v->u.w, u);\n    else\n\tjit_stxi(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        437,
        0
      ],
      "end_point": [
        452,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(_I0 + v->u.w, u);\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        454,
        0
      ],
      "end_point": [
        467,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    assert(_jitc->function);\n    jit_inc_synth_wp(getarg_f, u, v);\n    if (jit_arg_reg_p(v->u.w)) {\n\tjit_stxi(-4, JIT_FP, _I0 + v->u.w);\n\tjit_ldxi_f(u, JIT_FP, -4);\n    }\n    else\n\tjit_ldxi_f(u, JIT_FP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 14,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        469,
        0
      ],
      "end_point": [
        481,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n    if (jit_arg_reg_p(v->u.w)) {\n\tjit_stxi_f(-4, JIT_FP, u);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -4);\n    }\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        483,
        0
      ],
      "end_point": [
        499,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_f(regno, u);\n    if (jit_arg_reg_p(v->u.w)) {\n\tjit_stxi_f(-4, JIT_FP, regno);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -4);\n    }\n    else\n\tjit_stxi_f(v->u.w, JIT_FP, regno);\n    jit_unget_reg(regno);\n    jit_dec_synth();\n}",
      "lines": 17,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        501,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    assert(_jitc->function);\n    jit_inc_synth_wp(getarg_d, u, v);\n    if (jit_arg_d_reg_p(v->u.w)) {\n\tjit_stxi(-8, JIT_FP, _I0 + v->u.w);\n\tjit_stxi(-4, JIT_FP, _I0 + v->u.w + 1);\n\tjit_ldxi_d(u, JIT_FP, -8);\n    }\n    else if (jit_arg_reg_p(v->u.w)) {\n\tjit_stxi(-8, JIT_FP, _I0 + v->u.w);\n\tjit_ldxi_f(u, JIT_FP, -8);\n\tjit_ldxi_f(u + 1, JIT_FP, stack_framesize);\n    }\n    else {\n\tjit_ldxi_f(u, JIT_FP, v->u.w);\n\tjit_ldxi_f(u + 1, JIT_FP, v->u.w + 4);\n    }\n    jit_dec_synth();\n}",
      "lines": 22,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        555,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n    if (jit_arg_d_reg_p(v->u.w)) {\n\tjit_stxi_d(-8, JIT_FP, u);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -8);\n\tjit_ldxi(_I0 + v->u.w + 1, JIT_FP, -4);\n    }\n    else if (jit_arg_reg_p(v->u.w)) {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_stxi_d(-8, JIT_FP, u);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -8);\n\tjit_ldxi(regno, JIT_FP, -4);\n\tjit_stxi(stack_framesize, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    else if ((v->u.w & 7) == 0)\n\tjit_stxi_d(v->u.w, JIT_FP, u);\n    else {\n\tjit_stxi_d(-8, JIT_FP, u);\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_ldxi(regno, JIT_FP, -8);\n\tjit_stxi(v->u.w, JIT_FP, regno);\n\tjit_ldxi(regno, JIT_FP, -4);\n\tjit_stxi(v->u.w + 4, JIT_FP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 32,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        557,
        0
      ],
      "end_point": [
        591,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno, gpr;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_d(regno, u);\n    if (jit_arg_d_reg_p(v->u.w)) {\n\tjit_stxi_d(-8, JIT_FP, regno);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -8);\n\tjit_ldxi(_I0 + v->u.w + 1, JIT_FP, -4);\n    }\n    else if (jit_arg_reg_p(v->u.w)) {\n\tgpr = jit_get_reg(jit_class_gpr);\n\tjit_stxi_d(-8, JIT_FP, regno);\n\tjit_ldxi(_I0 + v->u.w, JIT_FP, -8);\n\tjit_ldxi(gpr, JIT_FP, -4);\n\tjit_stxi(stack_framesize, JIT_FP, gpr);\n\tjit_unget_reg(gpr);\n    }\n    else if ((v->u.w & 7) == 0)\n\tjit_stxi_d(v->u.w, JIT_FP, regno);\n    else {\n\tjit_stxi_d(-8, JIT_FP, regno);\n\tgpr = jit_get_reg(jit_class_gpr);\n\tjit_ldxi(gpr, JIT_FP, -8);\n\tjit_stxi(v->u.w, JIT_FP, gpr);\n\tjit_ldxi(gpr, JIT_FP, -4);\n\tjit_stxi(v->u.w + 4, JIT_FP, gpr);\n\tjit_unget_reg(gpr);\n    }\n    jit_unget_reg(regno);\n    jit_dec_synth();\n}",
      "lines": 35,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        593,
        0
      ],
      "end_point": [
        607,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(_O0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi(_jitc->function->call.size + stack_framesize, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 15,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        609,
        0
      ],
      "end_point": [
        627,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\tregno;\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(_O0 + _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size + stack_framesize, JIT_SP, regno);\n\tjit_unget_reg(regno);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        629,
        0
      ],
      "end_point": [
        644,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_f(-4, JIT_FP, u);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -4);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize, JIT_SP, u);\n\t_jitc->function->call.size += sizeof(jit_float32_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        646,
        0
      ],
      "end_point": [
        665,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_f(regno, u);\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_f(-4, JIT_FP, regno);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -4);\n\t++_jitc->function->call.argi;\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize, JIT_SP, regno);\n\t_jitc->function->call.size += sizeof(jit_float32_t);\n    }\n    jit_unget_reg(regno);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        667,
        0
      ],
      "end_point": [
        693,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n    if (jit_arg_d_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_d(-8, JIT_FP, u);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -8);\n\tjit_ldxi(_O0 + _jitc->function->call.argi + 1, JIT_FP, -4);\n\t_jitc->function->call.argi += 2;\n    }\n    else if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_f(-8, JIT_FP, u);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -8);\n\t++_jitc->function->call.argi;\n\tjit_stxi_f(stack_framesize, JIT_SP, u + 1);\n\t_jitc->function->call.size += sizeof(jit_float32_t);\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize,\n\t\t   JIT_SP, u);\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize + 4,\n\t\t   JIT_SP, u + 1);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        695,
        0
      ],
      "end_point": [
        725,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\tregno;\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n    regno = jit_get_reg(jit_class_fpr);\n    jit_movi_d(regno, u);\n    if (jit_arg_d_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_d(-8, JIT_FP, regno);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -8);\n\tjit_ldxi(_O0 + _jitc->function->call.argi + 1, JIT_FP, -4);\n\t_jitc->function->call.argi += 2;\n    }\n    else if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_stxi_f(-8, JIT_FP, regno);\n\tjit_ldxi(_O0 + _jitc->function->call.argi, JIT_FP, -8);\n\t++_jitc->function->call.argi;\n\tjit_stxi_f(stack_framesize, JIT_SP, regno + 1);\n\t_jitc->function->call.size += sizeof(jit_float32_t);\n    }\n    else {\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize,\n\t\t   JIT_SP, regno);\n\tjit_stxi_f(_jitc->function->call.size + stack_framesize + 4,\n\t\t   JIT_SP, regno + 1);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_unget_reg(regno);\n    jit_dec_synth();\n}",
      "lines": 31,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        727,
        0
      ],
      "end_point": [
        741,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_int32_t\t\tspec;\n\n    spec = jit_class(_rvs[regno].spec);\n    if ((spec & (jit_class_arg|jit_class_gpr)) ==\n\t(jit_class_arg|jit_class_gpr)) {\n\tregno = _O0 - regno;\n\tif (regno >= 0 && regno < node->v.w)\n\t    return (1);\n    }\n\n    return (0);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        743,
        0
      ],
      "end_point": [
        758,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    call = jit_callr(r0);\n    call->v.w = _jitc->function->self.argi;\n    call->w.w = _jitc->function->self.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        760,
        0
      ],
      "end_point": [
        776,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        778,
        0
      ],
      "end_point": [
        784,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, _O0);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        786,
        0
      ],
      "end_point": [
        792,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, _O0);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        794,
        0
      ],
      "end_point": [
        800,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, _O0);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        802,
        0
      ],
      "end_point": [
        808,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, _O0);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        810,
        0
      ],
      "end_point": [
        817,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n    if (r0 != _O0)\n\tjit_movr(r0, _O0);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        819,
        0
      ],
      "end_point": [
        826,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_f(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        828,
        0
      ],
      "end_point": [
        835,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        837,
        0
      ],
      "end_point": [
        1457,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rf(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##_f(rn(node->u.w),\t\t\t\t\t\\\n\t\t(jit_float32_t *)node->v.n->u.w);\t\t\t\\\n\t\tbreak\n#define case_rd(name)\t\t\t\t\t\t\t\\\n\t    case jit_code_##name##i_d:\t\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##_d(rn(node->u.w),\t\t\t\t\t\\\n\t\t\t (jit_float64_t *)node->v.n->u.w);\t\t\\\n\t\tbreak\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_rrf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w),\t\t\\\n\t\t\t      (jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brf(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w, rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif (node->u.w == sizeof(jit_word_t) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\tif ((node->link || (node->flag & jit_flag_use)) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(trunc, _f_i);\n\t\tcase_rr(trunc, _d_i);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_rrr(add, _f);\n\t\tcase_rrf(add, _f, 32);\n\t\tcase_rrr(sub, _f);\n\t\tcase_rrf(sub, _f, 32);\n\t\tcase_rrf(rsb, _f, 32);\n\t\tcase_rrr(mul, _f);\n\t\tcase_rrf(mul, _f, 32);\n\t\tcase_rrr(div, _f);\n\t\tcase_rrf(div, _f, 32);\n\t\tcase_rr(abs, _f);\n\t\tcase_rr(neg, _f);\n\t\tcase_rr(sqrt, _f);\n\t\tcase_rr(ext, _f);\n\t\tcase_rr(ext, _d_f);\n\t\tcase_rrr(lt, _f);\n\t\tcase_rrf(lt, _f, 32);\n\t\tcase_rrr(le, _f);\n\t\tcase_rrf(le, _f, 32);\n\t\tcase_rrr(eq, _f);\n\t\tcase_rrf(eq, _f, 32);\n\t\tcase_rrr(ge, _f);\n\t\tcase_rrf(ge, _f, 32);\n\t\tcase_rrr(gt, _f);\n\t\tcase_rrf(gt, _f, 32);\n\t\tcase_rrr(ne, _f);\n\t\tcase_rrf(ne, _f, 32);\n\t\tcase_rrr(unlt, _f);\n\t\tcase_rrf(unlt, _f, 32);\n\t\tcase_rrr(unle, _f);\n\t\tcase_rrf(unle, _f, 32);\n\t\tcase_rrr(uneq, _f);\n\t\tcase_rrf(uneq, _f, 32);\n\t\tcase_rrr(unge, _f);\n\t\tcase_rrf(unge, _f, 32);\n\t\tcase_rrr(ungt, _f);\n\t\tcase_rrf(ungt, _f, 32);\n\t\tcase_rrr(ltgt, _f);\n\t\tcase_rrf(ltgt, _f, 32);\n\t\tcase_rrr(ord, _f);\n\t\tcase_rrf(ord, _f, 32);\n\t\tcase_rrr(unord, _f);\n\t\tcase_rrf(unord, _f, 32);\n\t\tcase_rr(ld, _f);\n\t\tcase_rw(ld, _f);\n\t\tcase_rrr(ldx, _f);\n\t\tcase_rrw(ldx, _f);\n\t\tcase_rr(st, _f);\n\t\tcase_wr(st, _f);\n\t\tcase_rrr(stx, _f);\n\t\tcase_wrr(stx, _f);\n\t\tcase_rr(mov, _f);\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_brr(blt, _f);\n\t\tcase_brf(blt, _f, 32);\n\t\tcase_brr(ble, _f);\n\t\tcase_brf(ble, _f, 32);\n\t\tcase_brr(beq, _f);\n\t\tcase_brf(beq, _f, 32);\n\t\tcase_brr(bge, _f);\n\t\tcase_brf(bge, _f, 32);\n\t\tcase_brr(bgt, _f);\n\t\tcase_brf(bgt, _f, 32);\n\t\tcase_brr(bne, _f);\n\t\tcase_brf(bne, _f, 32);\n\t\tcase_brr(bunlt, _f);\n\t\tcase_brf(bunlt, _f, 32);\n\t\tcase_brr(bunle, _f);\n\t\tcase_brf(bunle, _f, 32);\n\t\tcase_brr(buneq, _f);\n\t\tcase_brf(buneq, _f, 32);\n\t\tcase_brr(bunge, _f);\n\t\tcase_brf(bunge, _f, 32);\n\t\tcase_brr(bungt, _f);\n\t\tcase_brf(bungt, _f, 32);\n\t\tcase_brr(bltgt, _f);\n\t\tcase_brf(bltgt, _f, 32);\n\t\tcase_brr(bord, _f);\n\t\tcase_brf(bord, _f, 32);\n\t\tcase_brr(bunord, _f);\n\t\tcase_brf(bunord, _f, 32);\n\t\tcase_rrr(add, _d);\n\t\tcase_rrf(add, _d, 64);\n\t\tcase_rrr(sub, _d);\n\t\tcase_rrf(sub, _d, 64);\n\t\tcase_rrf(rsb, _d, 64);\n\t\tcase_rrr(mul, _d);\n\t\tcase_rrf(mul, _d, 64);\n\t\tcase_rrr(div, _d);\n\t\tcase_rrf(div, _d, 64);\n\t\tcase_rr(abs, _d);\n\t\tcase_rr(neg, _d);\n\t\tcase_rr(sqrt, _d);\n\t\tcase_rr(ext, _d);\n\t\tcase_rr(ext, _f_d);\n\t\tcase_rrr(lt, _d);\n\t\tcase_rrf(lt, _d, 64);\n\t\tcase_rrr(le, _d);\n\t\tcase_rrf(le, _d, 64);\n\t\tcase_rrr(eq, _d);\n\t\tcase_rrf(eq, _d, 64);\n\t\tcase_rrr(ge, _d);\n\t\tcase_rrf(ge, _d, 64);\n\t\tcase_rrr(gt, _d);\n\t\tcase_rrf(gt, _d, 64);\n\t\tcase_rrr(ne, _d);\n\t\tcase_rrf(ne, _d, 64);\n\t\tcase_rrr(unlt, _d);\n\t\tcase_rrf(unlt, _d, 64);\n\t\tcase_rrr(unle, _d);\n\t\tcase_rrf(unle, _d, 64);\n\t\tcase_rrr(uneq, _d);\n\t\tcase_rrf(uneq, _d, 64);\n\t\tcase_rrr(unge, _d);\n\t\tcase_rrf(unge, _d, 64);\n\t\tcase_rrr(ungt, _d);\n\t\tcase_rrf(ungt, _d, 64);\n\t\tcase_rrr(ltgt, _d);\n\t\tcase_rrf(ltgt, _d, 64);\n\t\tcase_rrr(ord, _d);\n\t\tcase_rrf(ord, _d, 64);\n\t\tcase_rrr(unord, _d);\n\t\tcase_rrf(unord, _d, 64);\n\t\tcase_rr(ld, _d);\n\t\tcase_rw(ld, _d);\n\t\tcase_rrr(ldx, _d);\n\t\tcase_rrw(ldx, _d);\n\t\tcase_rr(st, _d);\n\t\tcase_wr(st, _d);\n\t\tcase_rrr(stx, _d);\n\t\tcase_wrr(stx, _d);\n\t\tcase_rr(mov, _d);\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tmovi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_brr(blt, _d);\n\t\tcase_brf(blt, _d, 64);\n\t\tcase_brr(ble, _d);\n\t\tcase_brf(ble, _d, 64);\n\t\tcase_brr(beq, _d);\n\t\tcase_brf(beq, _d, 64);\n\t\tcase_brr(bge, _d);\n\t\tcase_brf(bge, _d, 64);\n\t\tcase_brr(bgt, _d);\n\t\tcase_brf(bgt, _d, 64);\n\t\tcase_brr(bne, _d);\n\t\tcase_brf(bne, _d, 64);\n\t\tcase_brr(bunlt, _d);\n\t\tcase_brf(bunlt, _d, 64);\n\t\tcase_brr(bunle, _d);\n\t\tcase_brf(bunle, _d, 64);\n\t\tcase_brr(buneq, _d);\n\t\tcase_brf(buneq, _d, 64);\n\t\tcase_brr(bunge, _d);\n\t\tcase_brf(bunge, _d, 64);\n\t\tcase_brr(bungt, _d);\n\t\tcase_brf(bungt, _d, 64);\n\t\tcase_brr(bltgt, _d);\n\t\tcase_brf(bltgt, _d, 64);\n\t\tcase_brr(bord, _d);\n\t\tcase_brf(bord, _d, 64);\n\t\tcase_brr(bunord, _d);\n\t\tcase_brf(bunord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi_p(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    word = calli_p(temp->u.w);\n\t\t    if (!(temp->flag & jit_flag_patch))\n\t\t\tpatch(word, node);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_live:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n\t    case jit_code_retval_f:\t\tcase jit_code_retval_d:\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_brf\n#undef case_brw\n#undef case_brr\n#undef case_wrr\n#undef case_rrf\n#undef case_rrrw\n#undef case_rrw\n#undef case_rrrr\n#undef case_rrr\n#undef case_rf\n#undef case_wr\n#undef case_rw\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(_jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 621,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        1464,
        0
      ],
      "end_point": [
        1467,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n}",
      "lines": 4,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        1469,
        0
      ],
      "end_point": [
        1473,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_gpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi_i(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        1475,
        0
      ],
      "end_point": [
        1479,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_gpr_t r1)\n{\n    stxi_i(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        1481,
        0
      ],
      "end_point": [
        1485,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_fpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        1487,
        0
      ],
      "end_point": [
        1491,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_fpr_t r1)\n{\n    stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        1493,
        0
      ],
      "end_point": [
        1515,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\tflag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\tmemset(_jitc->patches.ptr + _jitc->patches.length, 0,\n\t       1024 * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_x86-cpu.c": {
    "_rex": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        707,
        1
      ],
      "content": "static void\n_rex(jit_state_t *_jit, jit_int32_t l, jit_int32_t w,\n     jit_int32_t r, jit_int32_t x, jit_int32_t b)\n{\n#if __X64\n    jit_int32_t\tv = 0x40 | (w << 3);\n\n    if (r != _NOREG)\n\tv |= (r & 8) >> 1;\n    if (x != _NOREG)\n\tv |= (x & 8) >> 2;\n    if (b != _NOREG)\n\tv |= (b & 8) >> 3;\n    if (l || v != 0x40)\n\tic(v);\n#endif\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rx": {
      "start_point": [
        709,
        0
      ],
      "end_point": [
        777,
        1
      ],
      "content": "static void\n_rx(jit_state_t *_jit, jit_int32_t rd, jit_int32_t md,\n    jit_int32_t rb, jit_int32_t ri, jit_int32_t ms)\n{\n    if (ri == _NOREG) {\n\tif (rb == _NOREG) {\n#if __X32\n\t    mrm(0x00, r7(rd), 0x05);\n#else\n\t    mrm(0x00, r7(rd), 0x04);\n\t    sib(_SCL1, 0x04, 0x05);\n#endif\n\t    ii(md);\n\t}\n\telse if (r7(rb) == _RSP_REGNO) {\n\t    if (md == 0) {\n\t\tmrm(0x00, r7(rd), 0x04);\n\t\tsib(ms, 0x04, 0x04);\n\t    }\n\t    else if ((jit_int8_t)md == md) {\n\t\tmrm(0x01, r7(rd), 0x04);\n\t\tsib(ms, 0x04, 0x04);\n\t\tic(md);\n\t    }\n\t    else {\n\t\tmrm(0x02, r7(rd), 0x04);\n\t\tsib(ms, 0x04, 0x04);\n\t\tii(md);\n\t    }\n\t}\n\telse {\n\t    if (md == 0 && r7(rb) != _RBP_REGNO)\n\t\tmrm(0x00, r7(rd), r7(rb));\n\t    else if ((jit_int8_t)md == md) {\n\t\tmrm(0x01, r7(rd), r7(rb));\n\t\tic(md);\n\t    }\n\t    else {\n\t\tmrm(0x02, r7(rd), r7(rb));\n\t\tii(md);\n\t    }\n\t}\n    }\n    else if (rb == _NOREG) {\n\tmrm(0x00, r7(rd), 0x04);\n\tsib(ms, r7(ri), 0x05);\n\tii(md);\n    }\n    else if (r8(ri) != _RSP_REGNO) {\n\tif (md == 0 && r7(rb) != _RBP_REGNO) {\n\t    mrm(0x00, r7(rd), 0x04);\n\t    sib(ms, r7(ri), r7(rb));\n\t}\n\telse if ((jit_int8_t)md == md) {\n\t    mrm(0x01, r7(rd), 0x04);\n\t    sib(ms, r7(ri), r7(rb));\n\t    ic(md);\n\t}\n\telse {\n\t    mrm(0x02, r7(rd), 0x04);\n\t    sib(ms, r7(ri), r7(rb));\n\t    ic(md);\n\t}\n    }\n    else {\n\tfprintf(stderr, \"illegal index register\");\n\tabort();\n    }\n}",
      "lines": 69,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nop": {
      "start_point": [
        779,
        0
      ],
      "end_point": [
        818,
        1
      ],
      "content": "static void\n_nop(jit_state_t *_jit, jit_int32_t count)\n{\n    switch (count) {\n\tcase 0:\n\t    break;\n\tcase 1:\t\t/* NOP */\n\t    ic(0x90);\tbreak;\n\tcase 2:\t\t/* 66 NOP */\n\t    ic(0x66);\tic(0x90);\n\t    break;\n\tcase 3:\t\t/* NOP DWORD ptr [EAX] */\n\t    ic(0x0f);\tic(0x1f);\tic(0x00);\n\t    break;\n\tcase 4:\t\t/* NOP DWORD ptr [EAX + 00H] */\n\t    ic(0x0f);\tic(0x1f);\tic(0x40);\tic(0x00);\n\t    break;\n\tcase 5:\t\t/* NOP DWORD ptr [EAX + EAX*1 + 00H] */\n\t    ic(0x0f);\tic(0x1f);\tic(0x44);\tic(0x00);\n\t    ic(0x00);\n\t    break;\n\tcase 6:\t\t/* 66 NOP DWORD ptr [EAX + EAX*1 + 00H] */\n\t    ic(0x66);\tic(0x0f);\tic(0x1f);\tic(0x44);\n\t    ic(0x00);\tic(0x00);\n\t    break;\n\tcase 7:\t\t/* NOP DWORD ptr [EAX + 00000000H] */\n\t    ic(0x0f);\tic(0x1f);\tic(0x80);\tii(0x0000);\n\t    break;\n\tcase 8:\t\t/* NOP DWORD ptr [EAX + EAX*1 + 00000000H] */\n\t    ic(0x0f);\tic(0x1f);\tic(0x84);\tic(0x00);\n\t    ii(0x0000);\n\t    break;\n\tcase 9:\t\t/* 66 NOP DWORD ptr [EAX + EAX*1 + 00000000H] */\n\t    ic(0x66);\tic(0x0f);\tic(0x1f);\tic(0x84);\n\t    ic(0x00);\tii(0x0000);\n\t    break;\n\tdefault:\n\t    abort();\n    }\n}",
      "lines": 40,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lea": {
      "start_point": [
        820,
        0
      ],
      "end_point": [
        827,
        1
      ],
      "content": "static void\n_lea(jit_state_t *_jit, jit_int32_t md, jit_int32_t rb,\n     jit_int32_t ri, jit_int32_t ms, jit_int32_t rd)\n{\n    rex(0, WIDE, rd, ri, rb);\n    ic(0x8d);\n    rx(rd, md, rb, ri, ms);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_pushr": {
      "start_point": [
        829,
        0
      ],
      "end_point": [
        834,
        1
      ],
      "content": "static void\n_pushr(jit_state_t *_jit, jit_int32_t r0)\n{\n    rex(0, WIDE, 0, 0, r0);\n    ic(0x50 | r7(r0));\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_popr": {
      "start_point": [
        836,
        0
      ],
      "end_point": [
        841,
        1
      ],
      "content": "static void\n_popr(jit_state_t *_jit, jit_int32_t r0)\n{\n    rex(0, WIDE, 0, 0, r0);\n    ic(0x58 | r7(r0));\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xchgr": {
      "start_point": [
        843,
        0
      ],
      "end_point": [
        849,
        1
      ],
      "content": "static void\n_xchgr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r1, _NOREG, r0);\n    ic(0x87);\n    mrm(0x03, r7(r1), r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_testr": {
      "start_point": [
        851,
        0
      ],
      "end_point": [
        857,
        1
      ],
      "content": "static void\n_testr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r1, _NOREG, r0);\n    ic(0x85);\n    mrm(0x03, r7(r1), r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_testi": {
      "start_point": [
        859,
        0
      ],
      "end_point": [
        870,
        1
      ],
      "content": "static void\n_testi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    if (r0 == _RAX_REGNO)\n\tic(0xa9);\n    else {\n\tic(0xf7);\n\tmrm(0x03, 0x00, r7(r0));\n    }\n    ii(i0);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cc": {
      "start_point": [
        872,
        0
      ],
      "end_point": [
        879,
        1
      ],
      "content": "static void\n_cc(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0)\n{\n    rex(0, 0, _NOREG, _NOREG, r0);\n    ic(0x0f);\n    ic(0x90 | code);\n    mrm(0x03, 0x00, r7(r0));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_alur": {
      "start_point": [
        881,
        0
      ],
      "end_point": [
        887,
        1
      ],
      "content": "static void\n_alur(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r1, _NOREG, r0);\n    ic(code | 0x01);\n    mrm(0x03, r7(r1), r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_alui": {
      "start_point": [
        889,
        0
      ],
      "end_point": [
        916,
        1
      ],
      "content": "static void\n_alui(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, _NOREG, _NOREG, r0);\n\tif ((jit_int8_t)i0 == i0) {\n\t    ic(0x83);\n\t    ic(0xc0 | code | r7(r0));\n\t    ic(i0);\n\t}\n\telse {\n\t    if (r0 == _RAX_REGNO)\n\t\tic(code | 0x05);\n\t    else {\n\t\tic(0x81);\n\t\tic(0xc0 | code | r7(r0));\n\t    }\n\t    ii(i0);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\talur(code, r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 28,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_save": {
      "start_point": [
        918,
        0
      ],
      "end_point": [
        928,
        1
      ],
      "content": "static void\n_save(jit_state_t *_jit, jit_int32_t r0)\n{\n    if (!_jitc->function->regoff[r0]) {\n\t_jitc->function->regoff[r0] = jit_allocai(sizeof(jit_word_t));\n\t_jitc->again = 1;\n    }\n    assert(!jit_regset_tstbit(&_jitc->regsav, r0));\n    jit_regset_setbit(&_jitc->regsav, r0);\n    stxi(_jitc->function->regoff[r0], _RBP_REGNO, r0);\n}",
      "lines": 11,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_load": {
      "start_point": [
        930,
        0
      ],
      "end_point": [
        937,
        1
      ],
      "content": "static void\n_load(jit_state_t *_jit, jit_int32_t r0)\n{\n    assert(_jitc->function->regoff[r0]);\n    assert(jit_regset_tstbit(&_jitc->regsav, r0));\n    jit_regset_clrbit(&_jitc->regsav, r0);\n    ldxi(r0, _RBP_REGNO, _jitc->function->regoff[r0]);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addr": {
      "start_point": [
        939,
        0
      ],
      "end_point": [
        948,
        1
      ],
      "content": "static void\n_addr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\tiaddr(r0, r2);\n    else if (r0 == r2)\n\tiaddr(r0, r1);\n    else\n\tlea(0, r1, r2, _SCL1, r0);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addi": {
      "start_point": [
        950,
        0
      ],
      "end_point": [
        977,
        5
      ],
      "content": "static void\n_addi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n#if USE_INC_DEC\n    else if (i0 == 1)\n\tincr(r0, r1);\n    else if (i0 == -1)\n\tdecr(r0, r1);\n#endif\n    else if (can_sign_extend_int_p(i0)) {\n\tif (r0 == r1)\n\t    iaddi(r0, i0);\n\telse\n\t    lea(i0, r1, _NOREG, _SCL1, r0);\n    }\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\tiaddr(r0, r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tiaddr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }",
      "lines": 28,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addcr": {
      "start_point": [
        980,
        0
      ],
      "end_point": [
        989,
        1
      ],
      "content": "static void\n_addcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tiaddr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tiaddr(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addci": {
      "start_point": [
        991,
        0
      ],
      "end_point": [
        1009,
        1
      ],
      "content": "static void\n_addci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tmovr(r0, r1);\n\tiaddi(r0, i0);\n    }\n    else if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tiaddr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovi(r0, i0);\n\tiaddr(r0, r1);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxr": {
      "start_point": [
        1011,
        0
      ],
      "end_point": [
        1020,
        1
      ],
      "content": "static void\n_addxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r2)\n\tiaddxr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tiaddxr(r0, r2);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_addxi": {
      "start_point": [
        1022,
        0
      ],
      "end_point": [
        1040,
        1
      ],
      "content": "static void\n_addxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tmovr(r0, r1);\n\tiaddxi(r0, i0);\n    }\n    else if (r0 == r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tiaddxr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovi(r0, i0);\n\tiaddxr(r0, r1);\n    }\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subr": {
      "start_point": [
        1042,
        0
      ],
      "end_point": [
        1055,
        1
      ],
      "content": "static void\n_subr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tixorr(r0, r0);\n    else if (r0 == r2) {\n\tisubr(r0, r1);\n\tinegr(r0);\n    }\n    else {\n\tmovr(r0, r1);\n\tisubr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subi": {
      "start_point": [
        1057,
        0
      ],
      "end_point": [
        1084,
        5
      ],
      "content": "static void\n_subi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n#if USE_INC_DEC\n    else if (i0 == 1)\n\tdecr(r0, r1);\n    else if (i0 == -1)\n\tincr(r0, r1);\n#endif\n    else if (can_sign_extend_int_p(i0)) {\n\tif (r0 == r1)\n\t    isubi(r0, i0);\n\telse\n\t    lea(-i0, r1, _NOREG, _SCL1, r0);\n    }\n    else if (r0 != r1) {\n\tmovi(r0, -i0);\n\tiaddr(r0, r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tisubr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }",
      "lines": 28,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subcr": {
      "start_point": [
        1087,
        0
      ],
      "end_point": [
        1102,
        1
      ],
      "content": "static void\n_subcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 && r0 != r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r0);\n\tmovr(r0, r1);\n\tisubr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tisubr(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subci": {
      "start_point": [
        1104,
        0
      ],
      "end_point": [
        1117,
        1
      ],
      "content": "static void\n_subci(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    movr(r0, r1);\n    if (can_sign_extend_int_p(i0))\n\tisubi(r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tisubr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxr": {
      "start_point": [
        1119,
        0
      ],
      "end_point": [
        1134,
        1
      ],
      "content": "static void\n_subxr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r2 && r0 != r1) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r0);\n\tmovr(r0, r1);\n\tisubxr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tmovr(r0, r1);\n\tisubxr(r0, r2);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_subxi": {
      "start_point": [
        1136,
        0
      ],
      "end_point": [
        1149,
        1
      ],
      "content": "static void\n_subxi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    movr(r0, r1);\n    if (can_sign_extend_int_p(i0))\n\tisubxi(r0, i0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\timovi(rn(reg), i0);\n\tisubxr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rsbi": {
      "start_point": [
        1151,
        0
      ],
      "end_point": [
        1156,
        1
      ],
      "content": "static void\n_rsbi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    subi(r0, r1, i0);\n    negr(r0, r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_imulr": {
      "start_point": [
        1158,
        0
      ],
      "end_point": [
        1165,
        1
      ],
      "content": "static void\n_imulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xaf);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_imuli": {
      "start_point": [
        1167,
        0
      ],
      "end_point": [
        1190,
        1
      ],
      "content": "static void\n_imuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, r1);\n\tif ((jit_int8_t)i0 == i0) {\n\t    ic(0x6b);\n\t    mrm(0x03, r7(r0), r7(r1));\n\t    ic(i0);\n\t}\n\telse {\n\t    ic(0x69);\n\t    mrm(0x03, r7(r0), r7(r1));\n\t    ii(i0);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\timulr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_mulr": {
      "start_point": [
        1192,
        0
      ],
      "end_point": [
        1203,
        1
      ],
      "content": "static void\n_mulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\timulr(r0, r2);\n    else if (r0 == r2)\n\timulr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\timulr(r0, r2);\n    }\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_muli": {
      "start_point": [
        1205,
        0
      ],
      "end_point": [
        1240,
        1
      ],
      "content": "static void\n_muli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    switch (i0) {\n\tcase 0:\n\t    ixorr(r0, r0);\n\t    break;\n\tcase 1:\n\t    movr(r0, r1);\n\t    break;\n\tcase -1:\n\t    negr(r0, r1);\n\t    break;\n\tcase 2:\n\t    lea(0, _NOREG, r1, _SCL2, r0);\n\t    break;\n\tcase 4:\n\t    lea(0, _NOREG, r1, _SCL4, r0);\n\t    break;\n\tcase 8:\n\t    lea(0, _NOREG, r1, _SCL8, r0);\n\t    break;\n\tdefault:\n\t    if (i0 > 0 && !(i0 & (i0 - 1)))\n\t\tlshi(r0, r1, ffsl(i0) - 1);\n\t    else if (can_sign_extend_int_p(i0))\n\t\timuli(r0, r1, i0);\n\t    else if (r0 != r1) {\n\t\tmovi(r0, i0);\n\t\timulr(r0, r1);\n\t    }\n\t    else\n\t\timuli(r0, r0, i0);\n\t    break;\n    }\n}",
      "lines": 36,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmulr": {
      "start_point": [
        1275,
        0
      ],
      "end_point": [
        1312,
        1
      ],
      "content": "static void\n_iqmulr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\tmul;\n    jit_int32_t\t\tsav;\n    jit_int32_t\t\tset;\n\n    sav = set = 0;\n    qsavset(_RDX_REGNO);\n    qsavset(_RAX_REGNO);\n    allocr(_RDX_REGNO, _RDX);\n    allocr(_RAX_REGNO, _RAX);\n\n    if (r3 == _RAX_REGNO)\n\tmul = r2;\n    else {\n\tmul = r3;\n\tmovr(_RAX_REGNO, r2);\n    }\n    if (sign)\n\tumulr(mul);\n    else\n\tumulr_u(mul);\n\n    if (r0 == _RDX_REGNO && r1 == _RAX_REGNO)\n\txchgr(_RAX_REGNO, _RDX_REGNO);\n    else {\n\tif (r0 != _RDX_REGNO)\n\t    movr(r0, _RAX_REGNO);\n\tmovr(r1, _RDX_REGNO);\n\tif (r0 == _RDX_REGNO)\n\t    movr(r0, _RAX_REGNO);\n    }\n\n    clear(_RDX_REGNO, _RDX);\n    clear(_RAX_REGNO, _RAX);\n}",
      "lines": 38,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqmuli": {
      "start_point": [
        1314,
        0
      ],
      "end_point": [
        1333,
        1
      ],
      "content": "static void\n_iqmuli(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0) {\n\tixorr(r0, r0);\n\tixorr(r1, r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tif (sign)\n\t    qmulr(r0, r1, r2, rn(reg));\n\telse\n\t    qmulr_u(r0, r1, r2, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sign_extend_rdx_rax": {
      "start_point": [
        1335,
        0
      ],
      "end_point": [
        1340,
        1
      ],
      "content": "static void\n_sign_extend_rdx_rax(jit_state_t *_jit)\n{\n    rex(0, WIDE, 0, 0, 0);\n    ic(0x99);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divremr": {
      "start_point": [
        1342,
        0
      ],
      "end_point": [
        1424,
        1
      ],
      "content": "static void\n_divremr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2,\n\t jit_bool_t sign, jit_bool_t divide)\n{\n    jit_int32_t\t\tdiv;\n    jit_int32_t\t\treg;\n    jit_int32_t\t\tset;\n    jit_int32_t\t\tsav;\n    jit_int32_t\t\tuse;\n\n    sav = set = use = 0;\n    savset(_RDX_REGNO);\n    savset(_RAX_REGNO);\n    allocr(_RDX_REGNO, _RDX);\n    allocr(_RAX_REGNO, _RAX);\n\n    if (r2 == _RAX_REGNO) {\n\tif (r0 == _RAX_REGNO || r0 == _RDX_REGNO) {\n\t    if ((reg = jit_get_reg(jit_class_gpr|jit_class_chk)) == JIT_NOREG)\n\t\treg = jit_get_reg((r1 == _RCX_REGNO ? _RBX : _RCX) |\n\t\t\t\t  jit_class_gpr|jit_class_named);\n\t    use = 1;\n\t    div = rn(reg);\n\t    movr(div, _RAX_REGNO);\n\t    if (r1 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r1);\n\t}\n\telse {\n\t    if (r0 == r1)\n\t\txchgr(r0, _RAX_REGNO);\n\t    else {\n\t\tif (r0 != _RAX_REGNO)\n\t\t    movr(r0, _RAX_REGNO);\n\t\tif (r1 != _RAX_REGNO)\n\t\t    movr(_RAX_REGNO, r1);\n\t    }\n\t    div = r0;\n\t}\n    }\n    else if (r2 == _RDX_REGNO) {\n\tif (r0 == _RAX_REGNO || r0 == _RDX_REGNO) {\n\t    if ((reg = jit_get_reg(jit_class_gpr|jit_class_chk)) == JIT_NOREG)\n\t\treg = jit_get_reg((r1 == _RCX_REGNO ? _RBX : _RCX) |\n\t\t\t\t  jit_class_gpr|jit_class_named);\n\t    use = 1;\n\t    div = rn(reg);\n\t    movr(div, _RDX_REGNO);\n\t    if (r1 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r1);\n\t}\n\telse {\n\t    if (r1 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r1);\n\t    movr(r0, _RDX_REGNO);\n\t    div = r0;\n\t}\n    }\n    else {\n\tif (r1 != _RAX_REGNO)\n\t    movr(_RAX_REGNO, r1);\n\tdiv = r2;\n    }\n\n    if (sign) {\n\tsign_extend_rdx_rax();\n\tidivr(div);\n    }\n    else {\n\tixorr(_RDX_REGNO, _RDX_REGNO);\n\tidivr_u(div);\n    }\n\n    if (use)\n\tjit_unget_reg(reg);\n\n    if (divide)\n\tmovr(r0, _RAX_REGNO);\n    else\n\tmovr(r0, _RDX_REGNO);\n\n    clear(_RDX_REGNO, _RDX);\n    clear(_RAX_REGNO, _RAX);\n}",
      "lines": 83,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_divremi": {
      "start_point": [
        1426,
        0
      ],
      "end_point": [
        1519,
        1
      ],
      "content": "static void\n_divremi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0,\n\t jit_bool_t sign, jit_bool_t divide)\n{\n    jit_int32_t\t\treg;\n    jit_int32_t\t\tdiv;\n    jit_int32_t\t\tsav;\n    jit_int32_t\t\tset;\n    jit_int32_t\t\tuse;\n\n    if (divide) {\n\tswitch (i0) {\n\t    case 1:\n\t\tmovr(r0, r1);\n\t\treturn;\n\t    case -1:\n\t\tif (sign) {\n\t\t    negr(r0, r1);\n\t\t    return;\n\t\t}\n\t\tbreak;\n\t    default:\n\t\tif (i0 > 0 && !(i0 & (i0 - 1))) {\n\t\t    movr(r0, r1);\n\t\t    if (sign)\n\t\t\trshi(r0, r0, ffsl(i0) - 1);\n\t\t    else\n\t\t\trshi_u(r0, r0, ffsl(i0) - 1);\n\t\t    return;\n\t\t}\n\t\tbreak;\n\t}\n    }\n    else if (i0 == 1 || (sign && i0 == -1)) {\n\tixorr(r0, r0);\n\treturn;\n    }\n    else if (!sign && i0 > 0 && !(i0 & (i0 - 1))) {\n\tif (can_sign_extend_int_p(i0)) {\n\t    movr(r0, r1);\n\t    iandi(r0, i0 - 1);\n\t}\n\telse if (r0 != r1) {\n\t    movi(r0, i0 - 1);\n\t    iandr(r0, r1);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0 - 1);\n\t    iandr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n\treturn;\n    }\n\n    sav = set = use = 0;\n    isavset(_RDX_REGNO);\n    isavset(_RAX_REGNO);\n    allocr(_RDX_REGNO, _RDX);\n    allocr(_RAX_REGNO, _RAX);\n\n    if (r0 == _RAX_REGNO || r0 == _RDX_REGNO || r0 == r1) {\n\tif ((reg = jit_get_reg(jit_class_gpr|jit_class_chk)) == JIT_NOREG)\n\t    reg = jit_get_reg((r1 == _RCX_REGNO ? _RBX : _RCX) |\n\t\t\t      jit_class_gpr|jit_class_named);\n\tuse = 1;\n\tdiv = rn(reg);\n    }\n    else\n\tdiv = r0;\n\n    movi(div, i0);\n    movr(_RAX_REGNO, r1);\n\n    if (sign) {\n\tsign_extend_rdx_rax();\n\tidivr(div);\n    }\n    else {\n\tixorr(_RDX_REGNO, _RDX_REGNO);\n\tidivr_u(div);\n    }\n\n    if (use)\n\tjit_unget_reg(reg);\n\n    if (divide)\n\tmovr(r0, _RAX_REGNO);\n    else\n\tmovr(r0, _RDX_REGNO);\n\n    clear(_RDX_REGNO, _RDX);\n    clear(_RAX_REGNO, _RAX);\n}",
      "lines": 94,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivr": {
      "start_point": [
        1521,
        0
      ],
      "end_point": [
        1605,
        1
      ],
      "content": "static void\n_iqdivr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_int32_t r3, jit_bool_t sign)\n{\n    jit_int32_t\t\tdiv;\n    jit_int32_t\t\treg;\n    jit_int32_t\t\tsav;\n    jit_int32_t\t\tset;\n    jit_int32_t\t\tuse;\n\n    sav = set = use = 0;\n    qsavset(_RDX_REGNO);\n    qsavset(_RAX_REGNO);\n    allocr(_RDX_REGNO, _RDX);\n    allocr(_RAX_REGNO, _RAX);\n    if (r3 == _RAX_REGNO) {\n\tif (r0 == _RAX_REGNO || r0 == _RDX_REGNO) {\n\t    if ((reg = jit_get_reg(jit_class_gpr|jit_class_chk)) == JIT_NOREG)\n\t\treg = jit_get_reg((r1 == _RCX_REGNO ? _RBX : _RCX) |\n\t\t\t\t  jit_class_gpr|jit_class_named);\n\t    use = 1;\n\t    div = rn(reg);\n\t    movr(div, _RAX_REGNO);\n\t    if (r2 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r2);\n\t}\n\telse {\n\t    if (r0 == r2)\n\t\txchgr(r0, _RAX_REGNO);\n\t    else {\n\t\tif (r0 != _RAX_REGNO)\n\t\t    movr(r0, _RAX_REGNO);\n\t\tif (r2 != _RAX_REGNO)\n\t\t    movr(_RAX_REGNO, r2);\n\t    }\n\t    div = r0;\n\t}\n    }\n    else if (r3 == _RDX_REGNO) {\n\tif (r0 == _RAX_REGNO || r0 == _RDX_REGNO) {\n\t    if ((reg = jit_get_reg(jit_class_gpr|jit_class_chk)) == JIT_NOREG)\n\t\treg = jit_get_reg((r1 == _RCX_REGNO ? _RBX : _RCX) |\n\t\t\t\t  jit_class_gpr|jit_class_named);\n\t    use = 1;\n\t    div = rn(reg);\n\t    movr(div, _RDX_REGNO);\n\t    if (r2 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r2);\n\t}\n\telse {\n\t    if (r2 != _RAX_REGNO)\n\t\tmovr(_RAX_REGNO, r2);\n\t    movr(r0, _RDX_REGNO);\n\t    div = r0;\n\t}\n    }\n    else {\n\tif (r2 != _RAX_REGNO)\n\t    movr(_RAX_REGNO, r2);\n\tdiv = r3;\n    }\n    if (sign) {\n\tsign_extend_rdx_rax();\n\tidivr(div);\n    }\n    else {\n\tixorr(_RDX_REGNO, _RDX_REGNO);\n\tidivr_u(div);\n    }\n    if (use)\n\tjit_unget_reg(reg);\n\n    if (r0 == _RDX_REGNO && r1 == _RAX_REGNO)\n\txchgr(_RAX_REGNO, _RDX_REGNO);\n    else {\n\tif (r0 != _RDX_REGNO)\n\t    movr(r0, _RAX_REGNO);\n\tmovr(r1, _RDX_REGNO);\n\tif (r0 == _RDX_REGNO)\n\t    movr(r0, _RAX_REGNO);\n    }\n\n    clear(_RDX_REGNO, _RDX);\n    clear(_RAX_REGNO, _RAX);\n}",
      "lines": 85,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_iqdivi": {
      "start_point": [
        1607,
        0
      ],
      "end_point": [
        1620,
        1
      ],
      "content": "static void\n_iqdivi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1,\n\tjit_int32_t r2, jit_word_t i0, jit_bool_t sign)\n{\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    movi(rn(reg), i0);\n    if (sign)\n\tqdivr(r0, r1, r2, rn(reg));\n    else\n\tqdivr_u(r0, r1, r2, rn(reg));\n    jit_unget_reg(reg);\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andr": {
      "start_point": [
        1625,
        0
      ],
      "end_point": [
        1638,
        1
      ],
      "content": "static void\n_andr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovr(r0, r1);\n    else if (r0 == r1)\n\tiandr(r0, r2);\n    else if (r0 == r2)\n\tiandr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tiandr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_andi": {
      "start_point": [
        1640,
        0
      ],
      "end_point": [
        1663,
        1
      ],
      "content": "static void\n_andi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n\n    if (i0 == 0)\n\tixorr(r0, r0);\n    else if (i0 == -1)\n\tmovr(r0, r1);\n    else if (r0 == r1) {\n\tif (can_sign_extend_int_p(i0))\n\t    iandi(r0, i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), i0);\n\t    iandr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tmovi(r0, i0);\n\tiandr(r0, r1);\n    }\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_orr": {
      "start_point": [
        1665,
        0
      ],
      "end_point": [
        1678,
        1
      ],
      "content": "static void\n_orr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovr(r0, r1);\n    else if (r0 == r1)\n\tiorr(r0, r2);\n    else if (r0 == r2)\n\tiorr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tiorr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ori": {
      "start_point": [
        1680,
        0
      ],
      "end_point": [
        1702,
        1
      ],
      "content": "static void\n_ori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (i0 == -1)\n\tmovi(r0, -1);\n    else if (can_sign_extend_int_p(i0)) {\n\tmovr(r0, r1);\n\tiori(r0, i0);\n    }\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\tiorr(r0, r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tiorr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xorr": {
      "start_point": [
        1704,
        0
      ],
      "end_point": [
        1717,
        1
      ],
      "content": "static void\n_xorr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tixorr(r0, r0);\n    else if (r0 == r1)\n\tixorr(r0, r2);\n    else if (r0 == r2)\n\tixorr(r0, r1);\n    else {\n\tmovr(r0, r1);\n\tixorr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_xori": {
      "start_point": [
        1719,
        0
      ],
      "end_point": [
        1741,
        1
      ],
      "content": "static void\n_xori(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (i0 == -1)\n\tcomr(r0, r1);\n    else if (can_sign_extend_int_p(i0)) {\n\tmovr(r0, r1);\n\tixori(r0, i0);\n    }\n    else if (r0 != r1) {\n\tmovi(r0, i0);\n\tixorr(r0, r1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tixorr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_irotshr": {
      "start_point": [
        1743,
        0
      ],
      "end_point": [
        1749,
        1
      ],
      "content": "static void\n_irotshr(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0)\n{\n    rex(0, WIDE, _RCX_REGNO, _NOREG, r0);\n    ic(0xd3);\n    mrm(0x03, code, r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rotshr": {
      "start_point": [
        1751,
        0
      ],
      "end_point": [
        1797,
        1
      ],
      "content": "static void\n_rotshr(jit_state_t *_jit, jit_int32_t code,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_int32_t\t\tuse;\n\n    if (r0 == _RCX_REGNO) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovr(rn(reg), r1);\n\tif (r2 != _RCX_REGNO)\n\t    movr(_RCX_REGNO, r2);\n\tirotshr(code, rn(reg));\n\tmovr(_RCX_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else if (r2 != _RCX_REGNO) {\n\tuse = !jit_reg_free_p(_RCX);\n\tif (use) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movr(rn(reg), _RCX_REGNO);\n\t}\n\telse\n\t    reg = 0;\n\tif (r1 == _RCX_REGNO) {\n\t    if (r0 == r2)\n\t\txchgr(r0, _RCX_REGNO);\n\t    else {\n\t\tmovr(r0, r1);\n\t\tmovr(_RCX_REGNO, r2);\n\t    }\n\t}\n\telse {\n\t    movr(_RCX_REGNO, r2);\n\t    movr(r0, r1);\n\t}\n\tirotshr(code, r0);\n\tif (use) {\n\t    movr(_RCX_REGNO, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\tmovr(r0, r1);\n\tirotshr(code, r0);\n    }\n}",
      "lines": 47,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_irotshi": {
      "start_point": [
        1799,
        0
      ],
      "end_point": [
        1812,
        1
      ],
      "content": "static void\n_irotshi(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0, jit_word_t i0)\n{\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    if (i0 == 1) {\n\tic(0xd1);\n\tmrm(0x03, code, r7(r0));\n    }\n    else {\n\tic(0xc1);\n\tmrm(0x03, code, r7(r0));\n\tic(i0);\n    }\n}",
      "lines": 14,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_rotshi": {
      "start_point": [
        1814,
        0
      ],
      "end_point": [
        1821,
        1
      ],
      "content": "static void\n_rotshi(jit_state_t *_jit, jit_int32_t code,\n\tjit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    movr(r0, r1);\n    if (i0)\n\tirotshi(code, r0, i0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lshi": {
      "start_point": [
        1823,
        0
      ],
      "end_point": [
        1832,
        1
      ],
      "content": "static void\n_lshi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0 == 0)\n\tmovr(r0, r1);\n    else if (i0 <= 3)\n\tlea(0, _NOREG, r1, i0 == 1 ? _SCL2 : i0 == 2 ? _SCL4 : _SCL8, r0);\n    else\n\trotshi(X86_SHL, r0, r1, i0);\n}",
      "lines": 10,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_unr": {
      "start_point": [
        1834,
        0
      ],
      "end_point": [
        1840,
        1
      ],
      "content": "static void\n_unr(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0)\n{\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    ic(0xf7);\n    mrm(0x03, code, r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_negr": {
      "start_point": [
        1842,
        0
      ],
      "end_point": [
        1851,
        1
      ],
      "content": "static void\n_negr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tinegr(r0);\n    else {\n\tixorr(r0, r0);\n\tisubr(r0, r1);\n    }\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_comr": {
      "start_point": [
        1853,
        0
      ],
      "end_point": [
        1858,
        1
      ],
      "content": "static void\n_comr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr(r0, r1);\n    icomr(r0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_incr": {
      "start_point": [
        1861,
        0
      ],
      "end_point": [
        1872,
        1
      ],
      "content": "static void\n_incr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr(r0, r1);\n#  if __X64\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    ic(0xff);\n    ic(0xc0 | r7(r0));\n#  else\n    ic(0x40 | r7(r0));\n#  endif\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_decr": {
      "start_point": [
        1874,
        0
      ],
      "end_point": [
        1885,
        1
      ],
      "content": "static void\n_decr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr(r0, r1);\n#  if __X64\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    ic(0xff);\n    ic(0xc8 | r7(r0));\n#  else\n    ic(0x48 | r7(r0));\n#  endif\n}",
      "lines": 12,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_cr": {
      "start_point": [
        1888,
        0
      ],
      "end_point": [
        1911,
        1
      ],
      "content": "static void\n_cr(jit_state_t *_jit,\n    jit_int32_t code, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    jit_bool_t\t\tsame;\n    if (reg8_p(r0)) {\n\tsame = r0 == r1 || r0 == r2;\n\tif (!same)\n\t    ixorr(r0, r0);\n\ticmpr(r1, r2);\n\tif (same)\n\t    imovi(r0, 0);\n\tcc(code, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tixorr(rn(reg), rn(reg));\n\ticmpr(r1, r2);\n\tcc(code, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ci": {
      "start_point": [
        1913,
        0
      ],
      "end_point": [
        1936,
        1
      ],
      "content": "static void\n_ci(jit_state_t *_jit,\n    jit_int32_t code, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    jit_bool_t\t\tsame;\n    if (reg8_p(r0)) {\n\tsame = r0 == r1;\n\tif (!same)\n\t    ixorr(r0, r0);\n\ticmpi(r1, i0);\n\tif (same)\n\t    imovi(r0, 0);\n\tcc(code, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tixorr(rn(reg), rn(reg));\n\ticmpi(r1, i0);\n\tcc(code, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 24,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ci0": {
      "start_point": [
        1938,
        0
      ],
      "end_point": [
        1960,
        1
      ],
      "content": "static void\n_ci0(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    jit_bool_t\t\tsame;\n    if (reg8_p(r0)) {\n\tsame = r0 == r1;\n\tif (!same)\n\t    ixorr(r0, r0);\n\ttestr(r1, r1);\n\tif (same)\n\t    imovi(r0, 0);\n\tcc(code, r0);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tixorr(rn(reg), rn(reg));\n\ttestr(r1, r1);\n\tcc(code, rn(reg));\n\tmovr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 23,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr": {
      "start_point": [
        1962,
        0
      ],
      "end_point": [
        1969,
        1
      ],
      "content": "static void\n_ltr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 0);\n    else\n\tcr(X86_CC_L, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lti": {
      "start_point": [
        1971,
        0
      ],
      "end_point": [
        1978,
        1
      ],
      "content": "static void\n_lti(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_L, r0, r1, i0);\n    else\n\tci0(X86_CC_S, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ltr_u": {
      "start_point": [
        1980,
        0
      ],
      "end_point": [
        1987,
        1
      ],
      "content": "static void\n_ltr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 0);\n    else\n\tcr(X86_CC_B, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler": {
      "start_point": [
        1989,
        0
      ],
      "end_point": [
        1996,
        1
      ],
      "content": "static void\n_ler(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tcr(X86_CC_LE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ler_u": {
      "start_point": [
        1998,
        0
      ],
      "end_point": [
        2005,
        1
      ],
      "content": "static void\n_ler_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tcr(X86_CC_BE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_lei_u": {
      "start_point": [
        2007,
        0
      ],
      "end_point": [
        2014,
        1
      ],
      "content": "static void\n_lei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_BE, r0, r1, i0);\n    else\n\tci0(X86_CC_E, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqr": {
      "start_point": [
        2016,
        0
      ],
      "end_point": [
        2023,
        1
      ],
      "content": "static void\n_eqr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tcr(X86_CC_E, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_eqi": {
      "start_point": [
        2025,
        0
      ],
      "end_point": [
        2032,
        1
      ],
      "content": "static void\n_eqi(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_E, r0, r1, i0);\n    else\n\tci0(X86_CC_E, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger": {
      "start_point": [
        2034,
        0
      ],
      "end_point": [
        2041,
        1
      ],
      "content": "static void\n_ger(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tcr(X86_CC_GE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei": {
      "start_point": [
        2043,
        0
      ],
      "end_point": [
        2050,
        1
      ],
      "content": "static void\n_gei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_GE, r0, r1, i0);\n    else\n\tci0(X86_CC_NS, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ger_u": {
      "start_point": [
        2052,
        0
      ],
      "end_point": [
        2059,
        1
      ],
      "content": "static void\n_ger_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tcr(X86_CC_AE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gei_u": {
      "start_point": [
        2061,
        0
      ],
      "end_point": [
        2068,
        1
      ],
      "content": "static void\n_gei_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_AE, r0, r1, i0);\n    else\n\tci0(X86_CC_NB, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr": {
      "start_point": [
        2070,
        0
      ],
      "end_point": [
        2077,
        1
      ],
      "content": "static void\n_gtr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 0);\n    else\n\tcr(X86_CC_G, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gtr_u": {
      "start_point": [
        2079,
        0
      ],
      "end_point": [
        2086,
        1
      ],
      "content": "static void\n_gtr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 0);\n    else\n\tcr(X86_CC_A, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_gti_u": {
      "start_point": [
        2088,
        0
      ],
      "end_point": [
        2095,
        1
      ],
      "content": "static void\n_gti_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_A, r0, r1, i0);\n    else\n\tci0(X86_CC_NE, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ner": {
      "start_point": [
        2097,
        0
      ],
      "end_point": [
        2104,
        1
      ],
      "content": "static void\n_ner(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 0);\n    else\n\tcr(X86_CC_NE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_nei": {
      "start_point": [
        2106,
        0
      ],
      "end_point": [
        2113,
        1
      ],
      "content": "static void\n_nei(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    if (i0)\n\tci(X86_CC_NE, r0, r1, i0);\n    else\n\tci0(X86_CC_NE, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movr": {
      "start_point": [
        2115,
        0
      ],
      "end_point": [
        2123,
        1
      ],
      "content": "static void\n_movr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1) {\n\trex(0, 1, r1, _NOREG, r0);\n\tic(0x89);\n\tic(0xc0 | (r1 << 3) | r7(r0));\n    }\n}",
      "lines": 9,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_imovi": {
      "start_point": [
        2125,
        0
      ],
      "end_point": [
        2147,
        1
      ],
      "content": "static void\n_imovi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n#if __X64\n#  if !__X64_32\n    if (fits_uint32_p(i0)) {\n#  endif\n\trex(0, 0, _NOREG, _NOREG, r0);\n\tic(0xb8 | r7(r0));\n\tii(i0);\n#  if !__X64_32\n    }\n    else {\n\trex(0, 1, _NOREG, _NOREG, r0);\n\tic(0xb8 | r7(r0));\n\til(i0);\n    }\n#  endif\n#else\n    ic(0xb8 | r7(r0));\n    ii(i0);\n#endif\n}",
      "lines": 23,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi": {
      "start_point": [
        2149,
        0
      ],
      "end_point": [
        2156,
        1
      ],
      "content": "static void\n_movi(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    if (i0)\n\timovi(r0, i0);\n    else\n\tixorr(r0, r0);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movi_p": {
      "start_point": [
        2158,
        0
      ],
      "end_point": [
        2165,
        1
      ],
      "content": "static jit_word_t\n_movi_p(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    ic(0xb8 | r7(r0));\n    il(i0);\n    return (_jit->pc.w);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_movcr": {
      "start_point": [
        2167,
        0
      ],
      "end_point": [
        2174,
        1
      ],
      "content": "static void\n_movcr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xbe);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movcr_u": {
      "start_point": [
        2176,
        0
      ],
      "end_point": [
        2183,
        1
      ],
      "content": "static void\n_movcr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xb6);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movsr": {
      "start_point": [
        2185,
        0
      ],
      "end_point": [
        2192,
        1
      ],
      "content": "static void\n_movsr(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xbf);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movsr_u": {
      "start_point": [
        2194,
        0
      ],
      "end_point": [
        2201,
        1
      ],
      "content": "static void\n_movsr_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xb7);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movir": {
      "start_point": [
        2204,
        0
      ],
      "end_point": [
        2210,
        1
      ],
      "content": "static void\n_movir(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 1, r0, _NOREG, r1);\n    ic(0x63);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_movir_u": {
      "start_point": [
        2212,
        0
      ],
      "end_point": [
        2218,
        1
      ],
      "content": "static void\n_movir_u(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 0, r1, _NOREG, r0);\n    ic(0x89);\n    ic(0xc0 | (r1 << 3) | r7(r0));\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_us": {
      "start_point": [
        2221,
        0
      ],
      "end_point": [
        2230,
        1
      ],
      "content": "static void\n_htonr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    extr_us(r0, r1);\n    ic(0x66);\n    rex(0, 0, _NOREG, _NOREG, r0);\n    ic(0xc1);\n    mrm(0x03, X86_ROR, r7(r0));\n    ic(8);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ui": {
      "start_point": [
        2232,
        0
      ],
      "end_point": [
        2239,
        1
      ],
      "content": "static void\n_htonr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr(r0, r1);\n    rex(0, 0, _NOREG, _NOREG, r0);\n    ic(0x0f);\n    ic(0xc8 | r7(r0));\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_htonr_ul": {
      "start_point": [
        2242,
        0
      ],
      "end_point": [
        2249,
        1
      ],
      "content": "static void\n_htonr_ul(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    movr(r0, r1);\n    rex(0, 1, _NOREG, _NOREG, r0);\n    ic(0x0f);\n    ic(0xc8 | r7(r0));\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_c": {
      "start_point": [
        2252,
        0
      ],
      "end_point": [
        2264,
        1
      ],
      "content": "static void\n_extr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (reg8_p(r1))\n\tmovcr(r0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tmovr(rn(reg), r1);\n\tmovcr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_extr_uc": {
      "start_point": [
        2266,
        0
      ],
      "end_point": [
        2278,
        1
      ],
      "content": "static void\n_extr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (reg8_p(r1))\n\tmovcr_u(r0, r1);\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tmovr(rn(reg), r1);\n\tmovcr_u(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_c": {
      "start_point": [
        2280,
        0
      ],
      "end_point": [
        2287,
        1
      ],
      "content": "static void\n_ldr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xbe);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_c": {
      "start_point": [
        2289,
        0
      ],
      "end_point": [
        2305,
        1
      ],
      "content": "static void\n_ldi_c(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, _NOREG);\n\tic(0x0f);\n\tic(0xbe);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_c(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_uc": {
      "start_point": [
        2307,
        0
      ],
      "end_point": [
        2314,
        1
      ],
      "content": "static void\n_ldr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xb6);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_uc": {
      "start_point": [
        2316,
        0
      ],
      "end_point": [
        2332,
        1
      ],
      "content": "static void\n_ldi_uc(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, _NOREG);\n\tic(0x0f);\n\tic(0xb6);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_uc(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_s": {
      "start_point": [
        2334,
        0
      ],
      "end_point": [
        2341,
        1
      ],
      "content": "static void\n_ldr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xbf);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_s": {
      "start_point": [
        2343,
        0
      ],
      "end_point": [
        2359,
        1
      ],
      "content": "static void\n_ldi_s(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, _NOREG);\n\tic(0x0f);\n\tic(0xbf);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_s(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_us": {
      "start_point": [
        2361,
        0
      ],
      "end_point": [
        2368,
        1
      ],
      "content": "static void\n_ldr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x0f);\n    ic(0xb7);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_us": {
      "start_point": [
        2370,
        0
      ],
      "end_point": [
        2386,
        1
      ],
      "content": "static void\n_ldi_us(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, _NOREG);\n\tic(0x0f);\n\tic(0xb7);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_us(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_i": {
      "start_point": [
        2389,
        0
      ],
      "end_point": [
        2399,
        1
      ],
      "content": "static void\n_ldr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if __X64\n    rex(0, WIDE, r0, _NOREG, r1);\n    ic(0x63);\n#else\n    ic(0x8b);\n#endif\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_i": {
      "start_point": [
        2401,
        0
      ],
      "end_point": [
        2420,
        1
      ],
      "content": "static void\n_ldi_i(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n#if __X64\n\trex(0, WIDE, r0, _NOREG, _NOREG);\n\tic(0x63);\n#else\n\tic(0x8b);\n#endif\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_i(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_ui": {
      "start_point": [
        2424,
        0
      ],
      "end_point": [
        2430,
        1
      ],
      "content": "static void\n_ldr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 0, r0, _NOREG, r1);\n    ic(0x63);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_ui": {
      "start_point": [
        2432,
        0
      ],
      "end_point": [
        2447,
        1
      ],
      "content": "static void\n_ldi_ui(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 0, r0, _NOREG, _NOREG);\n\tic(0x63);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_ui(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldr_l": {
      "start_point": [
        2450,
        0
      ],
      "end_point": [
        2456,
        1
      ],
      "content": "static void\n_ldr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 1, r0, _NOREG, r1);\n    ic(0x8b);\n    rx(r0, 0, r1, _NOREG, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldi_l": {
      "start_point": [
        2458,
        0
      ],
      "end_point": [
        2473,
        1
      ],
      "content": "static void\n_ldi_l(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 1, r0, _NOREG, _NOREG);\n\tic(0x8b);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldr_l(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_c": {
      "start_point": [
        2477,
        0
      ],
      "end_point": [
        2489,
        1
      ],
      "content": "static void\n_ldxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    addr(r0, r1, r2);\n    ldr_c(r0, r0);\n#else\n    rex(0, WIDE, r0, r1, r2);\n    ic(0x0f);\n    ic(0xbe);\n    rx(r0, 0, r2, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_c": {
      "start_point": [
        2491,
        0
      ],
      "end_point": [
        2507,
        1
      ],
      "content": "static void\n_ldxi_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, r1);\n\tic(0x0f);\n\tic(0xbe);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_c(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_uc": {
      "start_point": [
        2509,
        0
      ],
      "end_point": [
        2521,
        1
      ],
      "content": "static void\n_ldxr_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    addr(r0, r1, r2);\n    ldr_uc(r0, r0);\n#else\n    rex(0, WIDE, r0, r1, r2);\n    ic(0x0f);\n    ic(0xb6);\n    rx(r0, 0, r2, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_uc": {
      "start_point": [
        2523,
        0
      ],
      "end_point": [
        2539,
        1
      ],
      "content": "static void\n_ldxi_uc(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, r1);\n\tic(0x0f);\n\tic(0xb6);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_uc(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_s": {
      "start_point": [
        2541,
        0
      ],
      "end_point": [
        2553,
        1
      ],
      "content": "static void\n_ldxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    addr(r0, r1, r2);\n    ldr_s(r0, r0);\n#else\n    rex(0, WIDE, r0, r1, r2);\n    ic(0x0f);\n    ic(0xbf);\n    rx(r0, 0, r2, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_s": {
      "start_point": [
        2555,
        0
      ],
      "end_point": [
        2571,
        1
      ],
      "content": "static void\n_ldxi_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, r1);\n\tic(0x0f);\n\tic(0xbf);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_s(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_us": {
      "start_point": [
        2573,
        0
      ],
      "end_point": [
        2585,
        1
      ],
      "content": "static void\n_ldxr_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    addr(r0, r1, r2);\n    ldr_us(r0, r0);\n#else\n    rex(0, WIDE, r0, r1, r2);\n    ic(0x0f);\n    ic(0xb7);\n    rx(r0, 0, r2, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_us": {
      "start_point": [
        2587,
        0
      ],
      "end_point": [
        2603,
        1
      ],
      "content": "static void\n_ldxi_us(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, WIDE, r0, _NOREG, r1);\n\tic(0x0f);\n\tic(0xb7);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_us(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_i": {
      "start_point": [
        2606,
        0
      ],
      "end_point": [
        2616,
        1
      ],
      "content": "static void\n_ldxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64\n    rex(0, WIDE, r0, r1, r2);\n    ic(0x63);\n#else\n    ic(0x8b);\n#endif\n    rx(r0, 0, r2, r1, _SCL1);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_i": {
      "start_point": [
        2618,
        0
      ],
      "end_point": [
        2637,
        1
      ],
      "content": "static void\n_ldxi_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n#if __X64\n\trex(0, WIDE, r0, _NOREG, r1);\n\tic(0x63);\n#else\n\tic(0x8b);\n#endif\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_i(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_ui": {
      "start_point": [
        2641,
        0
      ],
      "end_point": [
        2653,
        1
      ],
      "content": "static void\n_ldxr_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    addr(r0, r1, r2);\n    /* to avoid confusion with macro renames */\n    _ldr_ui(_jit, r0, r0);\n#else\n    rex(0, 0, r0, r1, r2);\n    ic(0x8b);\n    rx(r0, 0, r2, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_ui": {
      "start_point": [
        2655,
        0
      ],
      "end_point": [
        2670,
        1
      ],
      "content": "static void\n_ldxi_ui(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 0, r0, _NOREG, r1);\n\tic(0x8b);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_ui(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxr_l": {
      "start_point": [
        2673,
        0
      ],
      "end_point": [
        2679,
        1
      ],
      "content": "static void\n_ldxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    rex(0, 1, r0, r1, r2);\n    ic(0x8b);\n    rx(r0, 0, r2, r1, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ldxi_l": {
      "start_point": [
        2681,
        0
      ],
      "end_point": [
        2696,
        1
      ],
      "content": "static void\n_ldxi_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 1, r0, _NOREG, r1);\n\tic(0x8b);\n\trx(r0, i0, r1, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tldxr_l(r0, r1, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_c": {
      "start_point": [
        2700,
        0
      ],
      "end_point": [
        2717,
        1
      ],
      "content": "static void\n_str_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (reg8_p(r1)) {\n\trex(0, 0, r1, _NOREG, r0);\n\tic(0x88);\n\trx(r1, 0, r0, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tmovr(rn(reg), r1);\n\trex(0, 0, rn(reg), _NOREG, r0);\n\tic(0x88);\n\trx(rn(reg), 0, r0, _NOREG, _SCL1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_c": {
      "start_point": [
        2719,
        0
      ],
      "end_point": [
        2744,
        1
      ],
      "content": "static void\n_sti_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tif (reg8_p(r0)) {\n\t    rex(0, 0, r0, _NOREG, _NOREG);\n\t    ic(0x88);\n\t    rx(r0, i0, _NOREG, _NOREG, _SCL1);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\t    movr(rn(reg), r0);\n\t    rex(0, 0, rn(reg), _NOREG, _NOREG);\n\t    ic(0x88);\n\t    rx(rn(reg), i0, _NOREG, _NOREG, _SCL1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_c(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_s": {
      "start_point": [
        2746,
        0
      ],
      "end_point": [
        2753,
        1
      ],
      "content": "static void\n_str_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    ic(0x66);\n    rex(0, 0, r1, _NOREG, r0);\n    ic(0x89);\n    rx(r1, 0, r0, _NOREG, _SCL1);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_s": {
      "start_point": [
        2755,
        0
      ],
      "end_point": [
        2771,
        1
      ],
      "content": "static void\n_sti_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tic(0x66);\n\trex(0, 0, r0, _NOREG, _NOREG);\n\tic(0x89);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_s(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_i": {
      "start_point": [
        2773,
        0
      ],
      "end_point": [
        2779,
        1
      ],
      "content": "static void\n_str_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 0, r1, _NOREG, r0);\n    ic(0x89);\n    rx(r1, 0, r0, _NOREG, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_i": {
      "start_point": [
        2781,
        0
      ],
      "end_point": [
        2796,
        1
      ],
      "content": "static void\n_sti_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 0, r0, _NOREG, _NOREG);\n\tic(0x89);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_i(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_str_l": {
      "start_point": [
        2799,
        0
      ],
      "end_point": [
        2805,
        1
      ],
      "content": "static void\n_str_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 1, r1, _NOREG, r0);\n    ic(0x89);\n    rx(r1, 0, r0, _NOREG, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sti_l": {
      "start_point": [
        2807,
        0
      ],
      "end_point": [
        2822,
        1
      ],
      "content": "static void\n_sti_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 1, r0, _NOREG, _NOREG);\n\tic(0x89);\n\trx(r0, i0, _NOREG, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstr_l(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_c": {
      "start_point": [
        2825,
        0
      ],
      "end_point": [
        2849,
        1
      ],
      "content": "static void\n_stxr_c(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n#if __X64_32\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_c(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    if (reg8_p(r2)) {\n\trex(0, 0, r2, r1, r0);\n\tic(0x88);\n\trx(r2, 0, r0, r1, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\tmovr(rn(reg), r2);\n\trex(0, 0, rn(reg), r1, r0);\n\tic(0x88);\n\trx(rn(reg), 0, r0, r1, _SCL1);\n\tjit_unget_reg(reg);\n    }\n#endif\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_c": {
      "start_point": [
        2851,
        0
      ],
      "end_point": [
        2876,
        1
      ],
      "content": "static void\n_stxi_c(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tif (reg8_p(r1)) {\n\t    rex(0, 0, r1, _NOREG, r0);\n\t    ic(0x88);\n\t    rx(r1, i0, r0, _NOREG, _SCL1);\n\t}\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr|jit_class_rg8);\n\t    movr(rn(reg), r1);\n\t    rex(0, 0, rn(reg), _NOREG, r0);\n\t    ic(0x88);\n\t    rx(rn(reg), i0, r0, _NOREG, _SCL1);\n\t    jit_unget_reg(reg);\n\t}\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_c(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_s": {
      "start_point": [
        2878,
        0
      ],
      "end_point": [
        2893,
        1
      ],
      "content": "static void\n_stxr_s(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_s(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    ic(0x66);\n    rex(0, 0, r2, r1, r0);\n    ic(0x89);\n    rx(r2, 0, r0, r1, _SCL1);\n#endif\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_s": {
      "start_point": [
        2895,
        0
      ],
      "end_point": [
        2911,
        1
      ],
      "content": "static void\n_stxi_s(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tic(0x66);\n\trex(0, 0, r1, _NOREG, r0);\n\tic(0x89);\n\trx(r1, i0, r0, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_s(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_i": {
      "start_point": [
        2913,
        0
      ],
      "end_point": [
        2927,
        1
      ],
      "content": "static void\n_stxr_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    str_i(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    rex(0, 0, r2, r1, r0);\n    ic(0x89);\n    rx(r2, 0, r0, r1, _SCL1);\n#endif\n}",
      "lines": 15,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_i": {
      "start_point": [
        2929,
        0
      ],
      "end_point": [
        2944,
        1
      ],
      "content": "static void\n_stxi_i(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 0, r1, _NOREG, r0);\n\tic(0x89);\n\trx(r1, i0, r0, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_i(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxr_l": {
      "start_point": [
        2947,
        0
      ],
      "end_point": [
        2953,
        1
      ],
      "content": "static void\n_stxr_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    rex(0, 1, r2, r1, r0);\n    ic(0x89);\n    rx(r2, 0, r0, r1, _SCL1);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_stxi_l": {
      "start_point": [
        2955,
        0
      ],
      "end_point": [
        2970,
        1
      ],
      "content": "static void\n_stxi_l(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\trex(0, 1, r1, _NOREG, r0);\n\tic(0x89);\n\trx(r1, i0, r0, _NOREG, _SCL1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tstxr_l(rn(reg), r0, r1);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 16,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jccs": {
      "start_point": [
        2973,
        0
      ],
      "end_point": [
        2980,
        1
      ],
      "content": "static void\n_jccs(jit_state_t *_jit, jit_int32_t code, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    ic(0x70 | code);\n    w = i0 - (_jit->pc.w + 1);\n    ic(w);\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jcc": {
      "start_point": [
        2982,
        0
      ],
      "end_point": [
        2990,
        1
      ],
      "content": "static void\n_jcc(jit_state_t *_jit, jit_int32_t code, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    ic(0x0f);\n    ic(0x80 | code);\n    w = i0 - (_jit->pc.w + 4);\n    ii(w);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jcr": {
      "start_point": [
        2992,
        0
      ],
      "end_point": [
        2998,
        1
      ],
      "content": "static void\n_jcr(jit_state_t *_jit,\n     jit_int32_t code, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    alur(X86_CMP, r0, r1);\n    jcc(code, i0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jci": {
      "start_point": [
        3000,
        0
      ],
      "end_point": [
        3006,
        1
      ],
      "content": "static void\n_jci(jit_state_t *_jit,\n     jit_int32_t code, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    alui(X86_CMP, r0, i1);\n    jcc(code, i0);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jci0": {
      "start_point": [
        3008,
        0
      ],
      "end_point": [
        3013,
        1
      ],
      "content": "static void\n_jci0(jit_state_t *_jit, jit_int32_t code, jit_word_t i0, jit_int32_t r0)\n{\n    testr(r0, r0);\n    jcc(code, i0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bltr": {
      "start_point": [
        3015,
        0
      ],
      "end_point": [
        3020,
        1
      ],
      "content": "static jit_word_t\n_bltr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jcr(X86_CC_L, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti": {
      "start_point": [
        3022,
        0
      ],
      "end_point": [
        3028,
        1
      ],
      "content": "static jit_word_t\n_blti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_L, i0, r0, i1);\n    else\t\tjci0(X86_CC_S, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bltr_u": {
      "start_point": [
        3030,
        0
      ],
      "end_point": [
        3035,
        1
      ],
      "content": "static jit_word_t\n_bltr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jcr(X86_CC_B, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blti_u": {
      "start_point": [
        3037,
        0
      ],
      "end_point": [
        3043,
        1
      ],
      "content": "static jit_word_t\n_blti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_B, i0, r0, i1);\n    else\t\tjci0(X86_CC_B, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler": {
      "start_point": [
        3045,
        0
      ],
      "end_point": [
        3051,
        1
      ],
      "content": "static jit_word_t\n_bler(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\tjmpi(i0);\n    else\t\tjcr (X86_CC_LE, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei": {
      "start_point": [
        3053,
        0
      ],
      "end_point": [
        3059,
        1
      ],
      "content": "static jit_word_t\n_blei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_LE, i0, r0, i1);\n    else\t\tjci0(X86_CC_LE, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bler_u": {
      "start_point": [
        3061,
        0
      ],
      "end_point": [
        3067,
        1
      ],
      "content": "static jit_word_t\n_bler_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\tjmpi(i0);\n    else\t\tjcr (X86_CC_BE, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_blei_u": {
      "start_point": [
        3069,
        0
      ],
      "end_point": [
        3075,
        1
      ],
      "content": "static jit_word_t\n_blei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_BE, i0, r0, i1);\n    else\t\tjci0(X86_CC_BE, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqr": {
      "start_point": [
        3077,
        0
      ],
      "end_point": [
        3083,
        1
      ],
      "content": "static jit_word_t\n_beqr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\tjmpi(i0);\n    else\t\tjcr (X86_CC_E, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_beqi": {
      "start_point": [
        3085,
        0
      ],
      "end_point": [
        3091,
        1
      ],
      "content": "static jit_word_t\n_beqi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_E, i0, r0, i1);\n    else\t\tjci0(X86_CC_E, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger": {
      "start_point": [
        3093,
        0
      ],
      "end_point": [
        3099,
        1
      ],
      "content": "static jit_word_t\n_bger(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\tjmpi(i0);\n    else\t\tjcr (X86_CC_GE, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei": {
      "start_point": [
        3101,
        0
      ],
      "end_point": [
        3107,
        1
      ],
      "content": "static jit_word_t\n_bgei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_GE, i0, r0, i1);\n    else\t\tjci0(X86_CC_NS, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bger_u": {
      "start_point": [
        3109,
        0
      ],
      "end_point": [
        3115,
        1
      ],
      "content": "static jit_word_t\n_bger_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\tjmpi(i0);\n    else\t\tjcr (X86_CC_AE, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgei_u": {
      "start_point": [
        3117,
        0
      ],
      "end_point": [
        3123,
        1
      ],
      "content": "static jit_word_t\n_bgei_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_AE, i0, r0, i1);\n    else\t\tjmpi(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr": {
      "start_point": [
        3125,
        0
      ],
      "end_point": [
        3130,
        1
      ],
      "content": "static jit_word_t\n_bgtr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jcr(X86_CC_G, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti": {
      "start_point": [
        3132,
        0
      ],
      "end_point": [
        3137,
        1
      ],
      "content": "static jit_word_t\n_bgti(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jci(X86_CC_G, i0, r0, i1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgtr_u": {
      "start_point": [
        3139,
        0
      ],
      "end_point": [
        3144,
        1
      ],
      "content": "static jit_word_t\n_bgtr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jcr(X86_CC_A, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bgti_u": {
      "start_point": [
        3146,
        0
      ],
      "end_point": [
        3152,
        1
      ],
      "content": "static jit_word_t\n_bgti_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_A, i0, r0, i1);\n    else\t\tjci0(X86_CC_NE, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bner": {
      "start_point": [
        3154,
        0
      ],
      "end_point": [
        3159,
        1
      ],
      "content": "static jit_word_t\n_bner(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jcr(X86_CC_NE, i0, r0, r1);\n    return (_jit->pc.w);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bnei": {
      "start_point": [
        3161,
        0
      ],
      "end_point": [
        3167,
        1
      ],
      "content": "static jit_word_t\n_bnei(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    if (i1)\t\tjci (X86_CC_NE, i0, r0, i1);\n    else\t\tjci0(X86_CC_NE, i0, r0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsr": {
      "start_point": [
        3169,
        0
      ],
      "end_point": [
        3175,
        1
      ],
      "content": "static jit_word_t\n_bmsr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    testr(r0, r1);\n    jnz(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmsi": {
      "start_point": [
        3177,
        0
      ],
      "end_point": [
        3191,
        1
      ],
      "content": "static jit_word_t\n_bmsi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_int_p(i1))\n\ttesti(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\ttestr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    jnz(i0);\n    return (_jit->pc.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmcr": {
      "start_point": [
        3193,
        0
      ],
      "end_point": [
        3199,
        1
      ],
      "content": "static jit_word_t\n_bmcr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    testr(r0, r1);\n    jz(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bmci": {
      "start_point": [
        3201,
        0
      ],
      "end_point": [
        3215,
        1
      ],
      "content": "static jit_word_t\n_bmci(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_zero_extend_int_p(i1))\n\ttesti(r0, i1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i1);\n\ttestr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    jz(i0);\n    return (_jit->pc.w);\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr": {
      "start_point": [
        3217,
        0
      ],
      "end_point": [
        3223,
        1
      ],
      "content": "static jit_word_t\n_boaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    iaddr(r0, r1);\n    jo(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi": {
      "start_point": [
        3225,
        0
      ],
      "end_point": [
        3238,
        1
      ],
      "content": "static jit_word_t\n_boaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tiaddi(r0, i1);\n\tjo(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (boaddr(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddr_u": {
      "start_point": [
        3240,
        0
      ],
      "end_point": [
        3246,
        1
      ],
      "content": "static jit_word_t\n_boaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    iaddr(r0, r1);\n    jc(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_boaddi_u": {
      "start_point": [
        3248,
        0
      ],
      "end_point": [
        3261,
        1
      ],
      "content": "static jit_word_t\n_boaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tiaddi(r0, i1);\n\tjc(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (boaddr_u(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr": {
      "start_point": [
        3263,
        0
      ],
      "end_point": [
        3269,
        1
      ],
      "content": "static jit_word_t\n_bxaddr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    iaddr(r0, r1);\n    jno(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi": {
      "start_point": [
        3271,
        0
      ],
      "end_point": [
        3284,
        1
      ],
      "content": "static jit_word_t\n_bxaddi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tiaddi(r0, i1);\n\tjno(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bxaddr(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddr_u": {
      "start_point": [
        3286,
        0
      ],
      "end_point": [
        3292,
        1
      ],
      "content": "static jit_word_t\n_bxaddr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    iaddr(r0, r1);\n    jnc(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxaddi_u": {
      "start_point": [
        3294,
        0
      ],
      "end_point": [
        3307,
        1
      ],
      "content": "static jit_word_t\n_bxaddi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tiaddi(r0, i1);\n\tjnc(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bxaddr_u(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr": {
      "start_point": [
        3309,
        0
      ],
      "end_point": [
        3315,
        1
      ],
      "content": "static jit_word_t\n_bosubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    isubr(r0, r1);\n    jo(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi": {
      "start_point": [
        3317,
        0
      ],
      "end_point": [
        3330,
        1
      ],
      "content": "static jit_word_t\n_bosubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tisubi(r0, i1);\n\tjo(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bosubr(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubr_u": {
      "start_point": [
        3332,
        0
      ],
      "end_point": [
        3338,
        1
      ],
      "content": "static jit_word_t\n_bosubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    isubr(r0, r1);\n    jc(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bosubi_u": {
      "start_point": [
        3340,
        0
      ],
      "end_point": [
        3353,
        1
      ],
      "content": "static jit_word_t\n_bosubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tisubi(r0, i1);\n\tjc(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bosubr_u(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr": {
      "start_point": [
        3355,
        0
      ],
      "end_point": [
        3361,
        1
      ],
      "content": "static jit_word_t\n_bxsubr(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    isubr(r0, r1);\n    jno(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi": {
      "start_point": [
        3363,
        0
      ],
      "end_point": [
        3376,
        1
      ],
      "content": "static jit_word_t\n_bxsubi(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tisubi(r0, i1);\n\tjno(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bxsubr(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubr_u": {
      "start_point": [
        3378,
        0
      ],
      "end_point": [
        3384,
        1
      ],
      "content": "static jit_word_t\n_bxsubr_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    isubr(r0, r1);\n    jnc(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_bxsubi_u": {
      "start_point": [
        3386,
        0
      ],
      "end_point": [
        3399,
        1
      ],
      "content": "static jit_word_t\n_bxsubi_u(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_word_t i1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i1)) {\n\tisubi(r0, i1);\n\tjnc(i0);\n\treturn (_jit->pc.w);\n    }\n    reg = jit_get_reg(jit_class_gpr|jit_class_nospill);\n    movi(rn(reg), i1);\n    jit_unget_reg(reg);\n    return (bxsubr_u(i0, r0, rn(reg)));\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_callr": {
      "start_point": [
        3401,
        0
      ],
      "end_point": [
        3407,
        1
      ],
      "content": "static void\n_callr(jit_state_t *_jit, jit_int32_t r0)\n{\n    rex(0, 0, _NOREG, _NOREG, r0);\n    ic(0xff);\n    mrm(0x03, 0x02, r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_calli": {
      "start_point": [
        3409,
        0
      ],
      "end_point": [
        3428,
        1
      ],
      "content": "static jit_word_t\n_calli(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tword;\n#if __X64\n    jit_int32_t\t\treg;\n\n    reg = jit_get_reg(jit_class_gpr);\n    word = movi_p(rn(reg), i0);\n    callr(rn(reg));\n    jit_unget_reg(reg);\n#else\n    jit_word_t\t\tw;\n    ic(0xe8);\n    w = i0 - (_jit->pc.w + 4);\n    ii(w);\n    word = _jit->pc.w;\n#endif\n    return (word);\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpr": {
      "start_point": [
        3430,
        0
      ],
      "end_point": [
        3436,
        1
      ],
      "content": "static void\n_jmpr(jit_state_t *_jit, jit_int32_t r0)\n{\n    rex(0, WIDE, _NOREG, _NOREG, r0);\n    ic(0xff);\n    mrm(0x03, 0x04, r7(r0));\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jmpi": {
      "start_point": [
        3438,
        0
      ],
      "end_point": [
        3446,
        1
      ],
      "content": "static jit_word_t\n_jmpi(jit_state_t *_jit, jit_word_t i0)\n{\n    jit_word_t\t\tw;\n    ic(0xe9);\n    w = i0 - (_jit->pc.w + 4);\n    ii(w);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jmpsi": {
      "start_point": [
        3448,
        0
      ],
      "end_point": [
        3453,
        1
      ],
      "content": "static void\n_jmpsi(jit_state_t *_jit, jit_uint8_t i0)\n{\n    ic(0xeb);\n    ic(i0);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_prolog": {
      "start_point": [
        3455,
        0
      ],
      "end_point": [
        3582,
        1
      ],
      "content": "static void\n_prolog(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\treg;\n    if (_jitc->function->define_frame || _jitc->function->assume_frame) {\n\tjit_int32_t\tframe = -_jitc->function->frame;\n\tassert(_jitc->function->self.aoff >= frame);\n\tif (_jitc->function->assume_frame)\n\t    return;\n\t_jitc->function->self.aoff = frame;\n    }\n    if (_jitc->function->allocar)\n\t_jitc->function->self.aoff &= -16;\n#if __X64 && __CYGWIN__\n    _jitc->function->stack = (((/* first 32 bytes must be allocated */\n\t\t\t\t(_jitc->function->self.alen > 32 ?\n\t\t\t\t _jitc->function->self.alen : 32) -\n\t\t\t\t/* align stack at 16 bytes */\n\t\t\t\t_jitc->function->self.aoff) + 15) & -16) +\n\tstack_adjust;\n#else\n    _jitc->function->stack = (((_jitc->function->self.alen -\n\t\t\t       _jitc->function->self.aoff) + 15) & -16) +\n\tstack_adjust;\n#endif\n    subi(_RSP_REGNO, _RSP_REGNO, stack_framesize - REAL_WORDSIZE);\n    /* callee save registers */\n#if __X32\n    if (jit_regset_tstbit(&_jitc->function->regset, _RDI))\n\tstxi(12, _RSP_REGNO, _RDI_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RSI))\n\tstxi( 8, _RSP_REGNO, _RSI_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tstxi( 4, _RSP_REGNO, _RBX_REGNO);\n#else\n#  if __CYGWIN__\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM15))\n\tsse_stxi_d(136, _RSP_REGNO, _XMM15_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM14))\n\tsse_stxi_d(128, _RSP_REGNO, _XMM14_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM13))\n\tsse_stxi_d(120, _RSP_REGNO, _XMM13_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM12))\n\tsse_stxi_d(112, _RSP_REGNO, _XMM12_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM11))\n\tsse_stxi_d(104, _RSP_REGNO, _XMM11_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM10))\n\tsse_stxi_d(96, _RSP_REGNO, _XMM10_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM9))\n\tsse_stxi_d(88, _RSP_REGNO, _XMM9_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM8))\n\tsse_stxi_d(80, _RSP_REGNO, _XMM8_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM7))\n\tsse_stxi_d(72, _RSP_REGNO, _XMM7_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM6))\n\tsse_stxi_d(64, _RSP_REGNO, _XMM6_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R15))\n\tstxi(56, _RSP_REGNO, _R15_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R14))\n\tstxi(48, _RSP_REGNO, _R14_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R13))\n\tstxi(40, _RSP_REGNO, _R13_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R12))\n\tstxi(32, _RSP_REGNO, _R12_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RSI))\n\tstxi(24, _RSP_REGNO, _RSI_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RDI))\n\tstxi(16, _RSP_REGNO, _RDI_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tstxi( 8, _RSP_REGNO, _RBX_REGNO);\n#  else\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tstxi(40, _RSP_REGNO, _RBX_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R12))\n\tstxi(32, _RSP_REGNO, _R12_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R13))\n\tstxi(24, _RSP_REGNO, _R13_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R14))\n\tstxi(16, _RSP_REGNO, _R14_REGNO);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R15))\n\tstxi( 8, _RSP_REGNO, _R15_REGNO);\n#  endif\n#endif\n    stxi(0, _RSP_REGNO, _RBP_REGNO);\n    movr(_RBP_REGNO, _RSP_REGNO);\n\n    /* alloca */\n    subi(_RSP_REGNO, _RSP_REGNO, _jitc->function->stack);\n    if (_jitc->function->allocar) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), _jitc->function->self.aoff);\n\tstxi_i(_jitc->function->aoffoff, _RBP_REGNO, rn(reg));\n\tjit_unget_reg(reg);\n    }\n\n#if __X64 && !__CYGWIN__\n    if (_jitc->function->self.call & jit_call_varargs) {\n\tjit_word_t\tnofp_code;\n\n\t/* Save gp registers in the save area, if any is a vararg */\n\tfor (reg = first_gp_from_offset(_jitc->function->vagp);\n\t     jit_arg_reg_p(reg); ++reg)\n\t    stxi(_jitc->function->vaoff + first_gp_offset +\n\t\t reg * 8, _RBP_REGNO, rn(JIT_RA0 - reg));\n\n\treg = first_fp_from_offset(_jitc->function->vafp);\n\tif (jit_arg_f_reg_p(reg)) {\n\t    /* Skip over if no float registers were passed as argument */\n\t    /* test %al, %al */\n\t    ic(0x84);\n\t    ic(0xc0);\n\t    jes(0);\n\t    nofp_code = _jit->pc.w;\n\n\t    /* Save fp registers in the save area, if any is a vararg */\n\t    /* Note that the full 16 byte xmm is not saved, because\n\t     * lightning only handles float and double, and, while\n\t     * attempting to provide a va_list compatible pointer as\n\t     * jit_va_start return, does not guarantee it (on all ports). */\n\t    for (; jit_arg_f_reg_p(reg); ++reg)\n\t\tsse_stxi_d(_jitc->function->vaoff + first_fp_offset +\n\t\t\t   reg * va_fp_increment, _RBP_REGNO, rn(_XMM0 - reg));\n\n\t    patch_rel_char(nofp_code, _jit->pc.w);\n\t}\n    }\n#endif\n}",
      "lines": 128,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_epilog": {
      "start_point": [
        3584,
        0
      ],
      "end_point": [
        3651,
        1
      ],
      "content": "static void\n_epilog(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->function->assume_frame)\n\treturn;\n    /* callee save registers */\n    movr(_RSP_REGNO, _RBP_REGNO);\n#if __X32\n    if (jit_regset_tstbit(&_jitc->function->regset, _RDI))\n\tldxi(_RDI_REGNO, _RSP_REGNO, 12);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RSI))\n\tldxi(_RSI_REGNO, _RSP_REGNO,  8);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tldxi(_RBX_REGNO, _RSP_REGNO,  4);\n#else\n#  if __CYGWIN__\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM15))\n\tsse_ldxi_d(_XMM15_REGNO, _RSP_REGNO, 136);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM14))\n\tsse_ldxi_d(_XMM14_REGNO, _RSP_REGNO, 128);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM13))\n\tsse_ldxi_d(_XMM13_REGNO, _RSP_REGNO, 120);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM12))\n\tsse_ldxi_d(_XMM12_REGNO, _RSP_REGNO, 112);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM11))\n\tsse_ldxi_d(_XMM11_REGNO, _RSP_REGNO, 104);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM10))\n\tsse_ldxi_d(_XMM10_REGNO, _RSP_REGNO, 96);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM9))\n\tsse_ldxi_d(_XMM9_REGNO, _RSP_REGNO, 88);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM8))\n\tsse_ldxi_d(_XMM8_REGNO, _RSP_REGNO, 80);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM7))\n\tsse_ldxi_d(_XMM7_REGNO, _RSP_REGNO, 72);\n    if (jit_regset_tstbit(&_jitc->function->regset, _XMM6))\n\tsse_ldxi_d(_XMM6_REGNO, _RSP_REGNO, 64);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R15))\n\tldxi(_R15_REGNO, _RSP_REGNO, 56);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R14))\n\tldxi(_R14_REGNO, _RSP_REGNO, 48);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R13))\n\tldxi(_R13_REGNO, _RSP_REGNO, 40);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R12))\n\tldxi(_R12_REGNO, _RSP_REGNO, 32);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RSI))\n\tldxi(_RSI_REGNO, _RSP_REGNO, 24);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RDI))\n\tldxi(_RDI_REGNO, _RSP_REGNO, 16);\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tldxi(_RBX_REGNO, _RSP_REGNO,  8);\n#  else\n    if (jit_regset_tstbit(&_jitc->function->regset, _RBX))\n\tldxi(_RBX_REGNO, _RSP_REGNO, 40);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R12))\n\tldxi(_R12_REGNO, _RSP_REGNO, 32);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R13))\n\tldxi(_R13_REGNO, _RSP_REGNO, 24);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R14))\n\tldxi(_R14_REGNO, _RSP_REGNO, 16);\n    if (jit_regset_tstbit(&_jitc->function->regset, _R15))\n\tldxi(_R15_REGNO, _RSP_REGNO,  8);\n#  endif\n#endif\n    ldxi(_RBP_REGNO, _RSP_REGNO, 0);\n    addi(_RSP_REGNO, _RSP_REGNO, stack_framesize - REAL_WORDSIZE);\n\n    ic(0xc3);\n}",
      "lines": 68,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vastart": {
      "start_point": [
        3653,
        0
      ],
      "end_point": [
        3686,
        1
      ],
      "content": "static void\n_vastart(jit_state_t *_jit, jit_int32_t r0)\n{\n#if __X32 || __CYGWIN__\n    assert(_jitc->function->self.call & jit_call_varargs);\n    addi(r0, _RBP_REGNO, _jitc->function->self.size);\n#else\n    jit_int32_t\t\treg;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    /* Return jit_va_list_t in the register argument */\n    addi(r0, _RBP_REGNO, _jitc->function->vaoff);\n    reg = jit_get_reg(jit_class_gpr);\n\n    /* Initialize gp offset in the save area. */\n    movi(rn(reg), _jitc->function->vagp);\n    stxi_i(offsetof(jit_va_list_t, gpoff), r0, rn(reg));\n\n    /* Initialize fp offset in the save area. */\n    movi(rn(reg), _jitc->function->vafp);\n    stxi_i(offsetof(jit_va_list_t, fpoff), r0, rn(reg));\n\n    /* Initialize overflow pointer to the first stack argument. */\n    addi(rn(reg), _RBP_REGNO, _jitc->function->self.size);\n    stxi(offsetof(jit_va_list_t, over), r0, rn(reg));\n\n    /* Initialize register save area pointer. */\n    addi(rn(reg), r0, first_gp_offset);\n    stxi(offsetof(jit_va_list_t, save), r0, rn(reg));\n\n    jit_unget_reg(reg);\n#endif\n}",
      "lines": 34,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg": {
      "start_point": [
        3688,
        0
      ],
      "end_point": [
        3749,
        1
      ],
      "content": "static void\n_vaarg(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if __X32 || __CYGWIN__\n    assert(_jitc->function->self.call & jit_call_varargs);\n    ldr(r0, r1);\n    addi(r1, r1, va_gp_increment);\n#else\n    jit_int32_t\t\trg0;\n    jit_int32_t\t\trg1;\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n\n    /* Load the gp offset in save area in the first temporary. */\n    ldxi_i(rn(rg0), r1, offsetof(jit_va_list_t, gpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    icmpi(rn(rg0), va_gp_max_offset);\n    jaes(0);\n    ge_code = _jit->pc.w;\n\n    /* Load the save area pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, save));\n\n    /* Load the vararg argument in the first argument. */\n    ldxr(r0, rn(rg1), rn(rg0));\n\n    /* Update the gp offset. */\n    addi(rn(rg0), rn(rg0), 8);\n    stxi_i(offsetof(jit_va_list_t, gpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg(rg1);\n\n    /* Jump over overflow code. */\n    jmpsi(0);\n    lt_code = _jit->pc.w;\n\n    /* Where to land if argument is in overflow area. */\n    patch_rel_char(ge_code, _jit->pc.w);\n\n    /* Load overflow pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, over));\n\n    /* Load argument. */\n    ldr(r0, rn(rg0));\n\n    /* Update overflow pointer. */\n    addi(rn(rg0), rn(rg0), va_gp_increment);\n    stxi(offsetof(jit_va_list_t, over), r1, rn(rg0));\n\n    /* Where to land if argument is in save area. */\n    patch_rel_char(lt_code, _jit->pc.w);\n\n    jit_unget_reg(rg0);\n#endif\n}",
      "lines": 62,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_vaarg_d": {
      "start_point": [
        3753,
        0
      ],
      "end_point": [
        3823,
        1
      ],
      "content": "static void\n_vaarg_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_bool_t x87)\n{\n#if __X32 || __CYGWIN__\n    assert(_jitc->function->self.call & jit_call_varargs);\n    if (x87)\n\tx87_ldr_d(r0, r1);\n    else\n\tsse_ldr_d(r0, r1);\n    addi(r1, r1, 8);\n#else\n    jit_int32_t\t\trg0;\n    jit_int32_t\t\trg1;\n    jit_word_t\t\tge_code;\n    jit_word_t\t\tlt_code;\n\n    assert(_jitc->function->self.call & jit_call_varargs);\n\n    rg0 = jit_get_reg(jit_class_gpr);\n    rg1 = jit_get_reg(jit_class_gpr);\n\n    /* Load the fp offset in save area in the first temporary. */\n    ldxi_i(rn(rg0), r1, offsetof(jit_va_list_t, fpoff));\n\n    /* Jump over if there are no remaining arguments in the save area. */\n    icmpi(rn(rg0), va_fp_max_offset);\n    jaes(0);\n    ge_code = _jit->pc.w;\n\n    /* Load the save area pointer in the second temporary. */\n    ldxi(rn(rg1), r1, offsetof(jit_va_list_t, save));\n\n    /* Load the vararg argument in the first argument. */\n    if (x87)\n\tx87_ldxr_d(r0, rn(rg1), rn(rg0));\n    else\n\tsse_ldxr_d(r0, rn(rg1), rn(rg0));\n\n    /* Update the fp offset. */\n    addi(rn(rg0), rn(rg0), va_fp_increment);\n    stxi_i(offsetof(jit_va_list_t, fpoff), r1, rn(rg0));\n\n    /* Will only need one temporary register below. */\n    jit_unget_reg(rg1);\n\n    /* Jump over overflow code. */\n    jmpsi(0);\n    lt_code = _jit->pc.w;\n\n    /* Where to land if argument is in overflow area. */\n    patch_rel_char(ge_code, _jit->pc.w);\n\n    /* Load overflow pointer. */\n    ldxi(rn(rg0), r1, offsetof(jit_va_list_t, over));\n\n    /* Load argument. */\n    if (x87)\n\tx87_ldr_d(r0, rn(rg0));\n    else\n\tsse_ldr_d(r0, rn(rg0));\n\n    /* Update overflow pointer. */\n    addi(rn(rg0), rn(rg0), 8);\n    stxi(offsetof(jit_va_list_t, over), r1, rn(rg0));\n\n    /* Where to land if argument is in save area. */\n    patch_rel_char(lt_code, _jit->pc.w);\n\n    jit_unget_reg(rg0);\n#endif\n}",
      "lines": 71,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_at": {
      "start_point": [
        3825,
        0
      ],
      "end_point": [
        3840,
        1
      ],
      "content": "static void\n_patch_at(jit_state_t *_jit, jit_node_t *node,\n\t  jit_word_t instr, jit_word_t label)\n{\n    switch (node->code) {\n#  if __X64\n\tcase jit_code_calli:\n#  endif\n\tcase jit_code_movi:\n\t    patch_abs(instr, label);\n\t    break;\n\tdefault:\n\t    patch_rel(instr, label);\n\t    break;\n    }\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "ffsl": {
      "start_point": [
        3843,
        0
      ],
      "end_point": [
        3858,
        1
      ],
      "content": "static int\nffsl(long i)\n{\n    int\t\tbit;\n#    if __CYGWIN__\n    /* Bug workaround */\n    if ((int)i == (int)0x80000000)\n\tbit = 32;\n    else\n#    endif\n    if ((bit = ffs((int)i)) == 0) {\n\tif ((bit = ffs((int)((unsigned long)i >> 32))))\n\t    bit += 32;\n    }\n    return (bit);\n}",
      "lines": 16,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "int"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_x86-sse.c": {
    "_sser": {
      "start_point": [
        485,
        0
      ],
      "end_point": [
        492,
        1
      ],
      "content": "static void\n_sser(jit_state_t *_jit, jit_int32_t c, jit_int32_t r0, jit_int32_t r1)\n{\n    rex(0, 0, r0, 0, r1);\n    ic(0x0f);\n    ic(c);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 8,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ssexr": {
      "start_point": [
        494,
        0
      ],
      "end_point": [
        503,
        1
      ],
      "content": "static void\n_ssexr(jit_state_t *_jit, jit_int32_t p, jit_int32_t c,\n       jit_int32_t r0, jit_int32_t r1)\n{\n    ic(p);\n    rex(0, 0, r0, 0, r1);\n    ic(0x0f);\n    ic(c);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ssexi": {
      "start_point": [
        505,
        0
      ],
      "end_point": [
        515,
        1
      ],
      "content": "static void\n_ssexi(jit_state_t *_jit, jit_int32_t c, jit_int32_t r0,\n       jit_int32_t m, jit_int32_t i)\n{\n    ic(0x66);\n    rex(0, 0, 0, 0, r0);\n    ic(0x0f);\n    ic(c);\n    mrm(0x03, r7(m), r7(r0));\n    ic(i);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sselxr": {
      "start_point": [
        518,
        0
      ],
      "end_point": [
        527,
        1
      ],
      "content": "static void\n_sselxr(jit_state_t *_jit, jit_int32_t p, jit_int32_t c,\n\tjit_int32_t r0, jit_int32_t r1)\n{\n    ic(p);\n    rex(0, 1, r0, 0, r1);\n    ic(0x0f);\n    ic(c);\n    mrm(0x03, r7(r0), r7(r1));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ssexrx": {
      "start_point": [
        530,
        0
      ],
      "end_point": [
        539,
        1
      ],
      "content": "static void\n_ssexrx(jit_state_t *_jit, jit_int32_t px, jit_int32_t code, jit_int32_t md,\n       jit_int32_t rb, jit_int32_t ri, jit_int32_t ms, jit_int32_t rd)\n{\n    ic(px);\n    rex(0, 0, rd, ri, rb);\n    ic(0x0f);\n    ic(code);\n    rx(rd, md, rb, ri, ms);\n}",
      "lines": 10,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_addr_f": {
      "start_point": [
        541,
        0
      ],
      "end_point": [
        552,
        1
      ],
      "content": "static void\n_sse_addr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\taddssr(r0, r2);\n    else if (r0 == r2)\n\taddssr(r0, r1);\n    else {\n\tsse_movr_f(r0, r1);\n\taddssr(r0, r2);\n    }\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_addr_d": {
      "start_point": [
        554,
        0
      ],
      "end_point": [
        567,
        1
      ],
      "content": "fopi(add)\n\nstatic void\n_sse_addr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\taddsdr(r0, r2);\n    else if (r0 == r2)\n\taddsdr(r0, r1);\n    else {\n\tsse_movr_d(r0, r1);\n\taddsdr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "fopi(add)",
        "fopi",
        "(",
        "add",
        "add",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_subr_f": {
      "start_point": [
        569,
        0
      ],
      "end_point": [
        588,
        1
      ],
      "content": "dopi(add)\n\nstatic void\n_sse_subr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1)\n\tsubssr(r0, r2);\n    else if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tsse_movr_f(rn(reg), r0);\n\tsse_movr_f(r0, r1);\n\tsubssr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsse_movr_f(r0, r1);\n\tsubssr(r0, r2);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "dopi(add)",
        "dopi",
        "(",
        "add",
        "add",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_subr_d": {
      "start_point": [
        590,
        0
      ],
      "end_point": [
        609,
        1
      ],
      "content": "fopi(sub)\n\nstatic void\n_sse_subr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1)\n\tsubsdr(r0, r2);\n    else if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tsse_movr_d(rn(reg), r0);\n\tsse_movr_d(r0, r1);\n\tsubsdr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsse_movr_d(r0, r1);\n\tsubsdr(r0, r2);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "fopi(sub)",
        "fopi",
        "(",
        "sub",
        "sub",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_mulr_f": {
      "start_point": [
        615,
        0
      ],
      "end_point": [
        628,
        1
      ],
      "content": "dopi(rsb)\n\nstatic void\n_sse_mulr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\tmulssr(r0, r2);\n    else if (r0 == r2)\n\tmulssr(r0, r1);\n    else {\n\tsse_movr_f(r0, r1);\n\tmulssr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "dopi(rsb)",
        "dopi",
        "(",
        "rsb",
        "rsb",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_mulr_d": {
      "start_point": [
        630,
        0
      ],
      "end_point": [
        643,
        1
      ],
      "content": "fopi(mul)\n\nstatic void\n_sse_mulr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1)\n\tmulsdr(r0, r2);\n    else if (r0 == r2)\n\tmulsdr(r0, r1);\n    else {\n\tsse_movr_d(r0, r1);\n\tmulsdr(r0, r2);\n    }\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "fopi(mul)",
        "fopi",
        "(",
        "mul",
        "mul",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_divr_f": {
      "start_point": [
        645,
        0
      ],
      "end_point": [
        664,
        1
      ],
      "content": "dopi(mul)\n\nstatic void\n_sse_divr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1)\n\tdivssr(r0, r2);\n    else if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tsse_movr_f(rn(reg), r0);\n\tsse_movr_f(r0, r1);\n\tdivssr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsse_movr_f(r0, r1);\n\tdivssr(r0, r2);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "dopi(mul)",
        "dopi",
        "(",
        "mul",
        "mul",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_divr_d": {
      "start_point": [
        666,
        0
      ],
      "end_point": [
        685,
        1
      ],
      "content": "fopi(div)\n\nstatic void\n_sse_divr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1)\n\tdivsdr(r0, r2);\n    else if (r0 == r2) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tsse_movr_d(rn(reg), r0);\n\tsse_movr_d(r0, r1);\n\tdivsdr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tsse_movr_d(r0, r1);\n\tdivsdr(r0, r2);\n    }\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "fopi(div)",
        "fopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_absr_f": {
      "start_point": [
        687,
        0
      ],
      "end_point": [
        705,
        1
      ],
      "content": "dopi(div)\n\nstatic void\n_sse_absr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tpcmpeqlr(rn(reg), rn(reg));\n\tpsrl(rn(reg), 1);\n\tandpsr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tpcmpeqlr(r0, r0);\n\tpsrl(r0, 1);\n\tandpsr(r0, r1);\n    }\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "dopi(div)",
        "dopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_absr_d": {
      "start_point": [
        707,
        0
      ],
      "end_point": [
        723,
        1
      ],
      "content": "static void\n_sse_absr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (r0 == r1) {\n\treg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tpcmpeqlr(rn(reg), rn(reg));\n\tpsrq(rn(reg), 1);\n\tandpdr(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n    else {\n\tpcmpeqlr(r0, r0);\n\tpsrq(r0, 1);\n\tandpdr(r0, r1);\n    }\n}",
      "lines": 17,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_negr_f": {
      "start_point": [
        725,
        0
      ],
      "end_point": [
        742,
        1
      ],
      "content": "static void\n_sse_negr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tfreg, ireg;\n    ireg = jit_get_reg(jit_class_gpr);\n    imovi(rn(ireg), 0x80000000);\n    if (r0 == r1) {\n\tfreg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tmovdlxr(rn(freg), rn(ireg));\n\txorpsr(r0, rn(freg));\n\tjit_unget_reg(freg);\n    }\n    else {\n\tmovdlxr(r0, rn(ireg));\n\txorpsr(r0, r1);\n    }\n    jit_unget_reg(ireg);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_negr_d": {
      "start_point": [
        744,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "content": "static void\n_sse_negr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\tfreg, ireg;\n    ireg = jit_get_reg(jit_class_gpr);\n    imovi(rn(ireg), 0x80000000);\n    if (r0 == r1) {\n\tfreg = jit_get_reg(jit_class_fpr|jit_class_xpr);\n\tmovdlxr(rn(freg), rn(ireg));\n\tpslq(rn(freg), 32);\n\txorpdr(r0, rn(freg));\n\tjit_unget_reg(freg);\n    }\n    else {\n\tmovdlxr(r0, rn(ireg));\n\tpslq(r0, 32);\n\txorpdr(r0, r1);\n    }\n    jit_unget_reg(ireg);\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_ssecmp": {
      "start_point": [
        765,
        0
      ],
      "end_point": [
        785,
        1
      ],
      "content": "static void\n_ssecmp(jit_state_t *_jit, jit_bool_t d, jit_int32_t code,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, reg);\n    }\n    ixorr(reg, reg);\n    if (d)\n\tucomisdr(r2, r1);\n    else\n\tucomissr(r2, r1);\n    cc(code, reg);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 21,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_movr_f": {
      "start_point": [
        787,
        0
      ],
      "end_point": [
        792,
        1
      ],
      "content": "static void\n_sse_movr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tssexr(0xf3, X86_SSE_MOV, r0, r1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_movi_f": {
      "start_point": [
        794,
        0
      ],
      "end_point": [
        823,
        1
      ],
      "content": "static void\n_sse_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n    jit_bool_t\t\t ldi;\n\n    data.f = *i0;\n    if (data.f == 0.0 && !(data.i & 0x80000000))\n\txorpsr(r0, r0);\n    else {\n\tldi = !_jitc->no_data;\n#if __X64\n\t/* if will allocate a register for offset, just use immediate */\n\tif (ldi && !sse_address_p(i0))\n\t    ldi = 0;\n#endif\n\tif (ldi)\n\t    sse_ldi_f(r0, (jit_word_t)i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), data.i);\n\t    movdlxr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n\t}\n    }\n}",
      "lines": 30,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_eqr_f": {
      "start_point": [
        828,
        0
      ],
      "end_point": [
        848,
        1
      ],
      "content": "static void\n_sse_eqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tjp_code;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, _RAX_REGNO);\n    }\n    ixorr(reg, reg);\n    ucomissr(r2, r1);\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_E, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 21,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ner_f": {
      "start_point": [
        852,
        0
      ],
      "end_point": [
        874,
        1
      ],
      "content": "fopi(gt)\n\nstatic void\n_sse_ner_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tjp_code;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, _RAX_REGNO);\n    }\n    imovi(reg, 1);\n    ucomissr(r2, r1);\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_NE, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "fopi(gt)",
        "fopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_unler_f": {
      "start_point": [
        879,
        0
      ],
      "end_point": [
        886,
        1
      ],
      "content": "static void\n_sse_unler_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpf(X86_CC_NA, r0, r2, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_uneqr_f": {
      "start_point": [
        888,
        0
      ],
      "end_point": [
        897,
        1
      ],
      "content": "fopi(unle)\n\nstatic void\n_sse_uneqr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpf(X86_CC_E, r0, r1, r2);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "fopi(unle)",
        "fopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_unger_f": {
      "start_point": [
        899,
        0
      ],
      "end_point": [
        908,
        1
      ],
      "content": "fopi(uneq)\n\nstatic void\n_sse_unger_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpf(X86_CC_NA, r0, r1, r2);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "fopi(uneq)",
        "fopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_ltgtr_f": {
      "start_point": [
        913,
        0
      ],
      "end_point": [
        920,
        1
      ],
      "content": "static void\n_sse_ltgtr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tixorr(r0, r0);\n    else\n\tssecmpf(X86_CC_NE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ldi_f": {
      "start_point": [
        924,
        0
      ],
      "end_point": [
        938,
        1
      ],
      "content": "fopi(unord)\n\nstatic void\n_sse_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (sse_address_p(i0))\n\tmovssmr(i0, _NOREG, _NOREG, _SCL1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsse_ldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "fopi(unord)",
        "fopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_ldxr_f": {
      "start_point": [
        940,
        0
      ],
      "end_point": [
        952,
        1
      ],
      "content": "static void\n_sse_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    sse_ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n#else\n    movssmr(0, r1, r2, _SCL1, r0);\n#endif\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ldxi_f": {
      "start_point": [
        954,
        0
      ],
      "end_point": [
        971,
        1
      ],
      "content": "static void\n_sse_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0))\n\tmovssmr(i0, r1, _NOREG, _SCL1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r1, i0);\n\tsse_ldr_f(r0, rn(reg));\n#else\n\tmovi(rn(reg), i0);\n\tsse_ldxr_f(r0, r1, rn(reg));\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_sti_f": {
      "start_point": [
        973,
        0
      ],
      "end_point": [
        985,
        1
      ],
      "content": "static void\n_sse_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (sse_address_p(i0))\n\tmovssrm(r0, i0, _NOREG, _NOREG, _SCL1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsse_str_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_stxr_f": {
      "start_point": [
        987,
        0
      ],
      "end_point": [
        999,
        1
      ],
      "content": "static void\n_sse_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    sse_str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    movssrm(r2, 0, r0, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_stxi_f": {
      "start_point": [
        1001,
        0
      ],
      "end_point": [
        1018,
        1
      ],
      "content": "static void\n_sse_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0))\n\tmovssrm(r1, i0, r0, _NOREG, _SCL1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r0, i0);\n\tsse_str_f(rn(reg), r1);\n#else\n\tmovi(rn(reg), i0);\n\tsse_stxr_f(rn(reg), r0, r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_bltr_f": {
      "start_point": [
        1020,
        0
      ],
      "end_point": [
        1026,
        1
      ],
      "content": "static jit_word_t\n_sse_bltr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r1, r0);\n    ja(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_sse_bler_f": {
      "start_point": [
        1027,
        0
      ],
      "end_point": [
        1035,
        1
      ],
      "content": "fbopi(lt)\n\nstatic jit_word_t\n_sse_bler_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r1, r0);\n    jae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(lt)",
        "fbopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_beqr_f": {
      "start_point": [
        1036,
        0
      ],
      "end_point": [
        1048,
        1
      ],
      "content": "fbopi(le)\n\nstatic jit_word_t\n_sse_beqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tjp_code;\n    ucomissr(r0, r1);\n    jps(0);\n    jp_code = _jit->pc.w;\n    je(i0);\n    patch_rel_char(jp_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fbopi(le)",
        "fbopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bger_f": {
      "start_point": [
        1049,
        0
      ],
      "end_point": [
        1057,
        1
      ],
      "content": "fbopi(eq)\n\nstatic jit_word_t\n_sse_bger_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    jae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(eq)",
        "fbopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bgtr_f": {
      "start_point": [
        1058,
        0
      ],
      "end_point": [
        1066,
        1
      ],
      "content": "fbopi(ge)\n\nstatic jit_word_t\n_sse_bgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    ja(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(ge)",
        "fbopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bner_f": {
      "start_point": [
        1067,
        0
      ],
      "end_point": [
        1083,
        1
      ],
      "content": "fbopi(gt)\n\nstatic jit_word_t\n_sse_bner_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tjp_code;\n    jit_word_t\t\tjz_code;\n    ucomissr(r0, r1);\n    jps(0);\n    jp_code = _jit->pc.w;\n    jzs(0);\n    jz_code = _jit->pc.w;\n    patch_rel_char(jp_code, _jit->pc.w);\n    jmpi(i0);\n    patch_rel_char(jz_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 17,
      "depth": 8,
      "decorators": [
        "fbopi(gt)",
        "fbopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunltr_f": {
      "start_point": [
        1084,
        0
      ],
      "end_point": [
        1092,
        1
      ],
      "content": "fbopi(ne)\n\nstatic jit_word_t\n_sse_bunltr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    jnae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(ne)",
        "fbopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunler_f": {
      "start_point": [
        1093,
        0
      ],
      "end_point": [
        1105,
        1
      ],
      "content": "fbopi(unlt)\n\nstatic jit_word_t\n_sse_bunler_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomissr(r0, r1);\n\tjna(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fbopi(unlt)",
        "fbopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_buneqr_f": {
      "start_point": [
        1106,
        0
      ],
      "end_point": [
        1118,
        1
      ],
      "content": "fbopi(unle)\n\nstatic jit_word_t\n_sse_buneqr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomissr(r0, r1);\n\tje(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fbopi(unle)",
        "fbopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunger_f": {
      "start_point": [
        1119,
        0
      ],
      "end_point": [
        1131,
        1
      ],
      "content": "fbopi(uneq)\n\nstatic jit_word_t\n_sse_bunger_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomissr(r1, r0);\n\tjna(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "fbopi(uneq)",
        "fbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bungtr_f": {
      "start_point": [
        1132,
        0
      ],
      "end_point": [
        1140,
        1
      ],
      "content": "fbopi(unge)\n\nstatic jit_word_t\n_sse_bungtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r1, r0);\n    jnae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(unge)",
        "fbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bltgtr_f": {
      "start_point": [
        1141,
        0
      ],
      "end_point": [
        1149,
        1
      ],
      "content": "fbopi(ungt)\n\nstatic jit_word_t\n_sse_bltgtr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    jne(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(ungt)",
        "fbopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bordr_f": {
      "start_point": [
        1150,
        0
      ],
      "end_point": [
        1158,
        1
      ],
      "content": "fbopi(ltgt)\n\nstatic jit_word_t\n_sse_bordr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    jnp(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(ltgt)",
        "fbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunordr_f": {
      "start_point": [
        1159,
        0
      ],
      "end_point": [
        1167,
        1
      ],
      "content": "fbopi(ord)\n\nstatic jit_word_t\n_sse_bunordr_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomissr(r0, r1);\n    jp(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "fbopi(ord)",
        "fbopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_eqr_d": {
      "start_point": [
        1171,
        0
      ],
      "end_point": [
        1193,
        1
      ],
      "content": "dopi(le)\n\nstatic void\n_sse_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tjp_code;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, _RAX_REGNO);\n    }\n    ixorr(reg, reg);\n    ucomisdr(r2, r1);\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_E, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "dopi(le)",
        "dopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_ner_d": {
      "start_point": [
        1197,
        0
      ],
      "end_point": [
        1219,
        1
      ],
      "content": "dopi(gt)\n\nstatic void\n_sse_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    jit_word_t\t\tjp_code;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, _RAX_REGNO);\n    }\n    imovi(reg, 1);\n    ucomisdr(r2, r1);\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_NE, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "dopi(gt)",
        "dopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_unler_d": {
      "start_point": [
        1224,
        0
      ],
      "end_point": [
        1231,
        1
      ],
      "content": "static void\n_sse_unler_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpd(X86_CC_NA, r0, r2, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_uneqr_d": {
      "start_point": [
        1233,
        0
      ],
      "end_point": [
        1242,
        1
      ],
      "content": "dopi(unle)\n\nstatic void\n_sse_uneqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpd(X86_CC_E, r0, r1, r2);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "dopi(unle)",
        "dopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_unger_d": {
      "start_point": [
        1244,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "dopi(uneq)\n\nstatic void\n_sse_unger_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tssecmpd(X86_CC_NA, r0, r1, r2);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "dopi(uneq)",
        "dopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_ltgtr_d": {
      "start_point": [
        1258,
        0
      ],
      "end_point": [
        1265,
        1
      ],
      "content": "static void\n_sse_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tixorr(r0, r0);\n    else\n\tssecmpd(X86_CC_NE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_movr_d": {
      "start_point": [
        1269,
        0
      ],
      "end_point": [
        1276,
        1
      ],
      "content": "dopi(unord)\n\nstatic void\n_sse_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1)\n\tssexr(0xf2, X86_SSE_MOV, r0, r1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "dopi(unord)",
        "dopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_sse_movi_d": {
      "start_point": [
        1278,
        0
      ],
      "end_point": [
        1317,
        1
      ],
      "content": "static void\n_sse_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\t ii[2];\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n    jit_bool_t\t\t ldi;\n\n    data.d = *i0;\n    if (data.d == 0.0 && !(data.ii[1] & 0x80000000))\n\txorpdr(r0, r0);\n    else {\n\tldi = !_jitc->no_data;\n#if __X64\n\t/* if will allocate a register for offset, just use immediate */\n\tif (ldi && !sse_address_p(i0))\n\t    ldi = 0;\n#endif\n\tif (ldi)\n\t    sse_ldi_d(r0, (jit_word_t)i0);\n\telse {\n\t    reg = jit_get_reg(jit_class_gpr);\n#if __X64 && !__X64_32\n\t    movi(rn(reg), data.w);\n\t    movdqxr(r0, rn(reg));\n\t    jit_unget_reg(reg);\n#else\n\t    movi(rn(reg), data.ii[0]);\n\t    stxi_i(CVT_OFFSET, _RBP_REGNO, rn(reg));\n\t    movi(rn(reg), data.ii[1]);\n\t    stxi_i(CVT_OFFSET + 4, _RBP_REGNO, rn(reg));\n\t    jit_unget_reg(reg);\n\t    sse_ldxi_d(r0, _RBP_REGNO, CVT_OFFSET);\n#endif\n\t}\n    }\n}",
      "lines": 40,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ldi_d": {
      "start_point": [
        1319,
        0
      ],
      "end_point": [
        1331,
        1
      ],
      "content": "static void\n_sse_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (sse_address_p(i0))\n\tmovsdmr(i0, _NOREG, _NOREG, _SCL1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsse_ldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ldxr_d": {
      "start_point": [
        1333,
        0
      ],
      "end_point": [
        1345,
        1
      ],
      "content": "static void\n_sse_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    sse_ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n#else\n    movsdmr(0, r1, r2, _SCL1, r0);\n#endif\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_ldxi_d": {
      "start_point": [
        1347,
        0
      ],
      "end_point": [
        1364,
        1
      ],
      "content": "static void\n_sse_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0))\n\tmovsdmr(i0, r1, _NOREG, _SCL1, r0);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r1, i0);\n\tsse_ldr_d(r0, rn(reg));\n#else\n\tmovi(rn(reg), i0);\n\tsse_ldxr_d(r0, r1, rn(reg));\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_sti_d": {
      "start_point": [
        1366,
        0
      ],
      "end_point": [
        1378,
        1
      ],
      "content": "static void\n_sse_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (sse_address_p(i0))\n\tmovsdrm(r0, i0, _NOREG, _NOREG, _SCL1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tsse_str_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_stxr_d": {
      "start_point": [
        1380,
        0
      ],
      "end_point": [
        1392,
        1
      ],
      "content": "static void\n_sse_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    sse_str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    movsdrm(r2, 0, r0, r1, _SCL1);\n#endif\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_stxi_d": {
      "start_point": [
        1394,
        0
      ],
      "end_point": [
        1411,
        1
      ],
      "content": "static void\n_sse_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0))\n\tmovsdrm(r1, i0, r0, _NOREG, _SCL1);\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r0, i0);\n\tsse_str_d(rn(reg), r1);\n#else\n\tmovi(rn(reg), i0);\n\tsse_stxr_f(rn(reg), r0, r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 18,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_bltr_d": {
      "start_point": [
        1413,
        0
      ],
      "end_point": [
        1419,
        1
      ],
      "content": "static jit_word_t\n_sse_bltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r1, r0);\n    ja(i0);\n    return (_jit->pc.w);\n}",
      "lines": 7,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_sse_bler_d": {
      "start_point": [
        1420,
        0
      ],
      "end_point": [
        1428,
        1
      ],
      "content": "dbopi(lt)\n\nstatic jit_word_t\n_sse_bler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r1, r0);\n    jae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(lt)",
        "dbopi",
        "(",
        "lt",
        "lt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_beqr_d": {
      "start_point": [
        1429,
        0
      ],
      "end_point": [
        1441,
        1
      ],
      "content": "dbopi(le)\n\nstatic jit_word_t\n_sse_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tjp_code;\n    ucomisdr(r0, r1);\n    jps(0);\n    jp_code = _jit->pc.w;\n    je(i0);\n    patch_rel_char(jp_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dbopi(le)",
        "dbopi",
        "(",
        "le",
        "le",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bger_d": {
      "start_point": [
        1442,
        0
      ],
      "end_point": [
        1450,
        1
      ],
      "content": "dbopi(eq)\n\nstatic jit_word_t\n_sse_bger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    jae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(eq)",
        "dbopi",
        "(",
        "eq",
        "eq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bgtr_d": {
      "start_point": [
        1451,
        0
      ],
      "end_point": [
        1459,
        1
      ],
      "content": "dbopi(ge)\n\nstatic jit_word_t\n_sse_bgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    ja(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(ge)",
        "dbopi",
        "(",
        "ge",
        "ge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bner_d": {
      "start_point": [
        1460,
        0
      ],
      "end_point": [
        1476,
        1
      ],
      "content": "dbopi(gt)\n\nstatic jit_word_t\n_sse_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_word_t\t\tjp_code;\n    jit_word_t\t\tjz_code;\n    ucomisdr(r0, r1);\n    jps(0);\n    jp_code = _jit->pc.w;\n    jzs(0);\n    jz_code = _jit->pc.w;\n    patch_rel_char(jp_code, _jit->pc.w);\n    jmpi(i0);\n    patch_rel_char(jz_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 17,
      "depth": 8,
      "decorators": [
        "dbopi(gt)",
        "dbopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunltr_d": {
      "start_point": [
        1477,
        0
      ],
      "end_point": [
        1485,
        1
      ],
      "content": "dbopi(ne)\n\nstatic jit_word_t\n_sse_bunltr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    jnae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(ne)",
        "dbopi",
        "(",
        "ne",
        "ne",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunler_d": {
      "start_point": [
        1486,
        0
      ],
      "end_point": [
        1498,
        1
      ],
      "content": "dbopi(unlt)\n\nstatic jit_word_t\n_sse_bunler_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomisdr(r0, r1);\n\tjna(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dbopi(unlt)",
        "dbopi",
        "(",
        "unlt",
        "unlt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_buneqr_d": {
      "start_point": [
        1499,
        0
      ],
      "end_point": [
        1511,
        1
      ],
      "content": "dbopi(unle)\n\nstatic jit_word_t\n_sse_buneqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomisdr(r0, r1);\n\tje(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dbopi(unle)",
        "dbopi",
        "(",
        "unle",
        "unle",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunger_d": {
      "start_point": [
        1512,
        0
      ],
      "end_point": [
        1524,
        1
      ],
      "content": "dbopi(uneq)\n\nstatic jit_word_t\n_sse_bunger_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1)\n\tjmpi(i0);\n    else {\n\tucomisdr(r1, r0);\n\tjna(i0);\n    }\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 8,
      "decorators": [
        "dbopi(uneq)",
        "dbopi",
        "(",
        "uneq",
        "uneq",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bungtr_d": {
      "start_point": [
        1525,
        0
      ],
      "end_point": [
        1533,
        1
      ],
      "content": "dbopi(unge)\n\nstatic jit_word_t\n_sse_bungtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r1, r0);\n    jnae(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(unge)",
        "dbopi",
        "(",
        "unge",
        "unge",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bltgtr_d": {
      "start_point": [
        1534,
        0
      ],
      "end_point": [
        1542,
        1
      ],
      "content": "dbopi(ungt)\n\nstatic jit_word_t\n_sse_bltgtr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    jne(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(ungt)",
        "dbopi",
        "(",
        "ungt",
        "ungt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bordr_d": {
      "start_point": [
        1543,
        0
      ],
      "end_point": [
        1551,
        1
      ],
      "content": "dbopi(ltgt)\n\nstatic jit_word_t\n_sse_bordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    jnp(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(ltgt)",
        "dbopi",
        "(",
        "ltgt",
        "ltgt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    },
    "_sse_bunordr_d": {
      "start_point": [
        1552,
        0
      ],
      "end_point": [
        1560,
        1
      ],
      "content": "dbopi(ord)\n\nstatic jit_word_t\n_sse_bunordr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    ucomisdr(r0, r1);\n    jp(i0);\n    return (_jit->pc.w);\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "dbopi(ord)",
        "dbopi",
        "(",
        "ord",
        "ord",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_x86-sz.c": {},
  "lightning/lightning-2.1.2/lib/jit_x86-x87.c": {
    "_fstcwm": {
      "start_point": [
        424,
        0
      ],
      "end_point": [
        431,
        1
      ],
      "content": "static void\n_fstcwm(jit_state_t *_jit, jit_int32_t md,\n\tjit_int32_t rb,\tjit_int32_t ri, jit_int32_t ms)\n{\n    ic(0x9b);\n    rex(0, 1, rb, ri, _NOREG);\n    x87rx(017, md, rb, ri, ms);\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87rx": {
      "start_point": [
        433,
        0
      ],
      "end_point": [
        440,
        1
      ],
      "content": "static void\n_x87rx(jit_state_t *_jit, jit_int32_t code, jit_int32_t md,\n       jit_int32_t rb, jit_int32_t ri, jit_int32_t ms)\n{\n    rex(0, 1, rb, ri, _NOREG);\n    ic(0xd8 | (code >> 3));\n    rx((code & 7), md, rb, ri, ms);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87ri": {
      "start_point": [
        442,
        0
      ],
      "end_point": [
        447,
        1
      ],
      "content": "static void\n_x87ri(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0)\n{\n    ic(0xd8 | (code >> 3));\n    mrm(0x03, (code & 7), r0);\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87rri": {
      "start_point": [
        449,
        0
      ],
      "end_point": [
        458,
        1
      ],
      "content": "static void\n_x87rri(jit_state_t *_jit, jit_int32_t code, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r1 == _ST0_REGNO)\n\tx87ri(code | 040, r0);\n    else {\n\tassert(r0 == _ST0_REGNO);\n\tx87ri(code, r1);\n    }\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_addr_d": {
      "start_point": [
        464,
        0
      ],
      "end_point": [
        496,
        1
      ],
      "content": "fopi(div)\n\nstatic void\n_x87_addr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1) {\n\tif (r2 == _ST0_REGNO)\n\t    faddr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    faddr(_ST0_REGNO, r2);\n\telse {\n\t    fxchr(r0);\n\t    faddr(_ST0_REGNO, r0 == r2 ? _ST0_REGNO : r2);\n\t    fxchr(r0);\n\t}\n    }\n    else if (r0 == r2) {\n\tif (r1 == _ST0_REGNO)\n\t    faddr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    faddr(_ST0_REGNO, r1);\n\telse {\n\t    fxchr(r0);\n\t    faddr(_ST0_REGNO, r1);\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfaddr(_ST0_REGNO, r2 + 1);\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "fopi(div)",
        "fopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_subr_d": {
      "start_point": [
        498,
        0
      ],
      "end_point": [
        530,
        1
      ],
      "content": "dopi(add)\n\nstatic void\n_x87_subr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1) {\n\tif (r2 == _ST0_REGNO)\n\t    fsubrr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fsubr(_ST0_REGNO, r2);\n\telse {\n\t    fxchr(r0);\n\t    fsubr(_ST0_REGNO, r0 == r2 ? _ST0_REGNO : r2);\n\t    fxchr(r0);\n\t}\n    }\n    else if (r0 == r2) {\n\tif (r1 == _ST0_REGNO)\n\t    fsubr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fsubrr(_ST0_REGNO, r1);\n\telse {\n\t    fxchr(r0);\n\t    fsubrr(_ST0_REGNO, r1);\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfsubr(_ST0_REGNO, r2 + 1);\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "dopi(add)",
        "dopi",
        "(",
        "add",
        "add",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_mulr_d": {
      "start_point": [
        536,
        0
      ],
      "end_point": [
        566,
        1
      ],
      "content": "static void\n_x87_mulr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1) {\n\tif (r2 == _ST0_REGNO)\n\t    fmulr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fmulr(_ST0_REGNO, r2);\n\telse {\n\t    fxchr(r0);\n\t    fmulr(_ST0_REGNO, r0 == r2 ? _ST0_REGNO : r2);\n\t    fxchr(r0);\n\t}\n    }\n    else if (r0 == r2) {\n\tif (r1 == _ST0_REGNO)\n\t    fmulr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fmulr(_ST0_REGNO, r1);\n\telse {\n\t    fxchr(r0);\n\t    fmulr(_ST0_REGNO, r1);\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfmulr(_ST0_REGNO, r2 + 1);\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 31,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_divr_d": {
      "start_point": [
        568,
        0
      ],
      "end_point": [
        600,
        1
      ],
      "content": "dopi(mul)\n\nstatic void\n_x87_divr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r0 == r1) {\n\tif (r2 == _ST0_REGNO)\n\t    fdivrr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fdivr(_ST0_REGNO, r2);\n\telse {\n\t    fxchr(r0);\n\t    fdivr(_ST0_REGNO, r0 == r2 ? _ST0_REGNO : r2);\n\t    fxchr(r0);\n\t}\n    }\n    else if (r0 == r2) {\n\tif (r1 == _ST0_REGNO)\n\t    fdivr(r0, _ST0_REGNO);\n\telse if (r0 == _ST0_REGNO)\n\t    fsubrr(_ST0_REGNO, r1);\n\telse {\n\t    fxchr(r0);\n\t    fdivrr(_ST0_REGNO, r1);\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfdivr(_ST0_REGNO, r2 + 1);\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 33,
      "depth": 13,
      "decorators": [
        "dopi(mul)",
        "dopi",
        "(",
        "mul",
        "mul",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_absr_d": {
      "start_point": [
        602,
        0
      ],
      "end_point": [
        621,
        1
      ],
      "content": "dopi(div)\n\nstatic void\n_x87_absr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1) {\n\tif (r1 == _ST0_REGNO)\n\t    fabs_();\n\telse {\n\t    fxchr(r0);\n\t    fabs_();\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfabs_();\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "dopi(div)",
        "dopi",
        "(",
        "div",
        "div",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_negr_d": {
      "start_point": [
        623,
        0
      ],
      "end_point": [
        640,
        1
      ],
      "content": "static void\n_x87_negr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1) {\n\tif (r1 == _ST0_REGNO)\n\t    fchs_();\n\telse {\n\t    fxchr(r0);\n\t    fchs_();\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfchs_();\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_sqrtr_d": {
      "start_point": [
        642,
        0
      ],
      "end_point": [
        659,
        1
      ],
      "content": "static void\n_x87_sqrtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == r1) {\n\tif (r1 == _ST0_REGNO)\n\t    fsqrt_();\n\telse {\n\t    fxchr(r0);\n\t    fsqrt_();\n\t    fxchr(r0);\n\t}\n    }\n    else {\n\tfldr(r1);\n\tfsqrt_();\n\tfstpr(r0 + 1);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_truncr_d_i": {
      "start_point": [
        661,
        0
      ],
      "end_point": [
        688,
        1
      ],
      "content": "static void\n_x87_truncr_d_i(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n#if defined(sun)\n    /* for the sake of passing test cases in x87 mode, otherwise only sse\n     * is supported */\n    fstcwm(-4, _RBP_REGNO, _NOREG, _SCL1);\n    ldxi_s(r0, _RBP_REGNO, -4);\n    extr_uc(r0, r0);\n#  define FPCW_CHOP\t0xc00\n    ori(r0, r0, FPCW_CHOP);\n    stxi_s(-8, _RBP_REGNO, r0);\n    fldcwm(-8, _RBP_REGNO, _NOREG, _SCL1);\n    if (r1 == _ST0_REGNO)\n\tfistlm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n    else {\n\tfxchr(r1);\n\tfistlm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n\tfxchr(r1);\n    }\n    fldcwm(-4, _RBP_REGNO, _NOREG, _SCL1);\n    ldxi(r0, _RBP_REGNO, CVT_OFFSET);\n#else\n    fldr(r1);\n    fisttplm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n    ldxi_i(r0, _RBP_REGNO, CVT_OFFSET);\n#endif\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_truncr_d_l": {
      "start_point": [
        691,
        0
      ],
      "end_point": [
        697,
        1
      ],
      "content": "static void\n_x87_truncr_d_l(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    fldr(r1);\n    fisttpqm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n    ldxi(r0, _RBP_REGNO, CVT_OFFSET);\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_extr_d": {
      "start_point": [
        700,
        0
      ],
      "end_point": [
        710,
        1
      ],
      "content": "static void\n_x87_extr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    stxi(CVT_OFFSET, _RBP_REGNO, r1);\n#  if __X32\n    fildlm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n#  else\n    fildqm(CVT_OFFSET, _RBP_REGNO, _NOREG, _SCL1);\n#  endif\n    fstpr(r0 + 1);\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87cmp": {
      "start_point": [
        712,
        0
      ],
      "end_point": [
        734,
        1
      ],
      "content": "static void\n_x87cmp(jit_state_t *_jit, jit_int32_t code,\n\tjit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\trc;\n    jit_int32_t\t\treg;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, reg);\n    }\n    ixorr(reg, reg);\n    if (r1 == _ST0_REGNO)\n\tfucomir(r2);\n    else {\n\tfldr(r1);\n\tfucomipr(r2 + 1);\n    }\n    cc(code, reg);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 23,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87cmp2": {
      "start_point": [
        736,
        0
      ],
      "end_point": [
        761,
        1
      ],
      "content": "static void\n_x87cmp2(jit_state_t *_jit, jit_int32_t code,\n\t jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\t\trc;\n    jit_int32_t\t\t\treg;\n    jit_int32_t\t\t\tf1, f2;\n    if (r2 == _ST0_REGNO)\tf1 = r2, f2 = r1;\n    else\t\t\tf1 = r1, f2 = r2;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, reg);\n    }\n    ixorr(reg, reg);\n    if (f1 == _ST0_REGNO)\n\tfucomir(f2);\n    else {\n\tfldr(f1);\n\tfucomipr(f2 + 1);\n    }\n    cc(code, reg);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 26,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87jcc": {
      "start_point": [
        763,
        0
      ],
      "end_point": [
        775,
        1
      ],
      "content": "static jit_word_t\n_x87jcc(jit_state_t *_jit, jit_int32_t code,\n\tjit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 == _ST0_REGNO)\n\tfucomir(r1);\n    else {\n\tfldr(r0);\n\tfucomipr(r1 + 1);\n    }\n    jcc(code, i0);\n    return (_jit->pc.w);\n}",
      "lines": 13,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_x87jcc2": {
      "start_point": [
        777,
        0
      ],
      "end_point": [
        792,
        1
      ],
      "content": "static jit_word_t\n_x87jcc2(jit_state_t *_jit, jit_int32_t code,\n\t jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\t\tf0, f1;\n    if (r1 == _ST0_REGNO)\tf0 = r1, f1 = r0;\n    else\t\t\tf0 = r0, f1 = r1;\n    if (f0 == _ST0_REGNO)\n\tfucomir(f1);\n    else {\n\tfldr(f0);\n\tfucomipr(f1 + 1);\n    }\n    jcc(code, i0);\n    return (_jit->pc.w);\n}",
      "lines": 16,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_x87_movi_f": {
      "start_point": [
        823,
        0
      ],
      "end_point": [
        860,
        1
      ],
      "content": "static void\n_x87_movi_f(jit_state_t *_jit, jit_int32_t r0, jit_float32_t *i0)\n{\n    union {\n\tjit_int32_t\t i;\n\tjit_float32_t\t f;\n    } data;\n    jit_int32_t\t\t reg;\n\n    data.f = *i0;\n    if (data.f == 0.0 && !(data.i & 0x80000000))\n\tfldz();\n    else if (data.f == 1.0)\n\tfld1();\n    else if (data.f == 3.3219280948873623478703195458468f)\n\tfldl2t();\n    else if (data.f == 1.4426950408889634073599246886656f)\n\tfldl2e();\n    else if (data.f == 3.1415926535897932384626421096161f)\n\tfldpi();\n    else if (data.f == 0.3010299956639811952137387498515f)\n\tfldlg2();\n    else if (data.f == 0.6931471805599453094172323683399f)\n\tfldln2();\n    else {\n\tif (_jitc->no_data) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    movi(rn(reg), data.i);\n\t    stxi_i(CVT_OFFSET, _RBP_REGNO, rn(reg));\n\t    jit_unget_reg(reg);\n\t    x87_ldxi_f(r0, _RBP_REGNO, CVT_OFFSET);\n\t}\n\telse\n\t    x87_ldi_f(r0, (jit_word_t)i0);\n\treturn;\n    }\n    fstpr(r0 + 1);\n}",
      "lines": 38,
      "depth": 18,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldr_f": {
      "start_point": [
        862,
        0
      ],
      "end_point": [
        867,
        1
      ],
      "content": "static void\n_x87_ldr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    fldsm(0, r1, _NOREG, _SCL1);\n    fstpr(r0 + 1);\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldi_f": {
      "start_point": [
        869,
        0
      ],
      "end_point": [
        883,
        1
      ],
      "content": "static void\n_x87_ldi_f(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (x87_address_p(i0)) {\n\tfldsm(i0, _NOREG, _NOREG, _SCL1);\n\tfstpr(r0 + 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tx87_ldr_f(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldxr_f": {
      "start_point": [
        885,
        0
      ],
      "end_point": [
        898,
        1
      ],
      "content": "static void\n_x87_ldxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    x87_ldr_f(r0, rn(reg));\n    jit_unget_reg(reg);\n#else\n    fldsm(0, r1, r2, _SCL1);\n    fstpr(r0 + 1);\n#endif\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldxi_f": {
      "start_point": [
        900,
        0
      ],
      "end_point": [
        919,
        1
      ],
      "content": "static void\n_x87_ldxi_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tfldsm(i0, r1, _NOREG, _SCL1);\n\tfstpr(r0 + 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r1, i0);\n\tx87_ldr_f(r0, rn(reg));\n#else\n\tmovi(rn(reg), i0);\n\tx87_ldxr_f(r0, r1, rn(reg));\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_str_f": {
      "start_point": [
        921,
        0
      ],
      "end_point": [
        931,
        1
      ],
      "content": "static void\n_x87_str_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r1 == _ST0_REGNO)\n\tfstsm(0, r0, _NOREG, _SCL1);\n    else {\n\tfxchr(r1);\n\tfstsm(0, r0, _NOREG, _SCL1);\n\tfxchr(r1);\n    }\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_sti_f": {
      "start_point": [
        933,
        0
      ],
      "end_point": [
        950,
        1
      ],
      "content": "static void\n_x87_sti_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (!x87_address_p(i0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tx87_str_f(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n    else if (r0 == _ST0_REGNO)\n\tfstsm(i0, _NOREG, _NOREG, _SCL1);\n    else {\n\tfxchr(r0);\n\tfstsm(i0, _NOREG, _NOREG, _SCL1);\n\tfxchr(r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_stxr_f": {
      "start_point": [
        952,
        0
      ],
      "end_point": [
        970,
        1
      ],
      "content": "static void\n_x87_stxr_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    x87_str_f(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    if (r2 == _ST0_REGNO)\n\tfstsm(0, r0, r1, _SCL1);\n    else {\n\tfxchr(r2);\n\tfstsm(0, r0, r1, _SCL1);\n\tfxchr(r2);\n    }\n#endif\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_stxi_f": {
      "start_point": [
        972,
        0
      ],
      "end_point": [
        994,
        1
      ],
      "content": "static void\n_x87_stxi_f(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (!can_sign_extend_int_p(i0)) {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r0, i0);\n\tx87_str_f(rn(reg), r1);\n#else\n\tmovi(rn(reg), i0);\n\tx87_stxr_f(rn(reg), r0, r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n    else if (r1 == _ST0_REGNO)\n\tfstsm(i0, r0, _NOREG, _SCL1);\n    else {\n\tfxchr(r1);\n\tfstsm(i0, r0, _NOREG, _SCL1);\n\tfxchr(r1);\n    }\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_movr_d": {
      "start_point": [
        996,
        0
      ],
      "end_point": [
        1011,
        1
      ],
      "content": "static void\n_x87_movr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r0 != r1) {\n\tif (r1 == _ST0)\n\t    fstr(r0);\n\telse if (r0 == _ST0) {\n\t    fxchr(r1);\n\t    fstr(r1);\n\t}\n\telse {\n\t    fldr(r1);\n\t    fstpr(r0 + 1);\n\t}\n    }\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_movi_d": {
      "start_point": [
        1013,
        0
      ],
      "end_point": [
        1058,
        1
      ],
      "content": "static void\n_x87_movi_d(jit_state_t *_jit, jit_int32_t r0, jit_float64_t *i0)\n{\n    union {\n\tjit_int32_t\t ii[2];\n\tjit_word_t\t w;\n\tjit_float64_t\t d;\n    } data;\n    jit_int32_t\t\t reg;\n\n    data.d = *i0;\n    if (data.d == 0.0 && !(data.ii[1] & 0x80000000))\n\tfldz();\n    else if (data.d == 1.0)\n\tfld1();\n    else if (data.d == 3.3219280948873623478703195458468)\n\tfldl2t();\n    else if (data.d == 1.4426950408889634073599246886656)\n\tfldl2e();\n    else if (data.d == 3.1415926535897932384626421096161)\n\tfldpi();\n    else if (data.d == 0.3010299956639811952137387498515)\n\tfldlg2();\n    else if (data.d == 0.6931471805599453094172323683399)\n\tfldln2();\n    else {\n\tif (_jitc->no_data) {\n\t    reg = jit_get_reg(jit_class_gpr);\n#if __X32 || __X64_32\n\t    movi(rn(reg), data.ii[0]);\n\t    stxi_i(CVT_OFFSET, _RBP_REGNO, rn(reg));\n\t    movi(rn(reg), data.ii[1]);\n\t    stxi_i(CVT_OFFSET + 4, _RBP_REGNO, rn(reg));\n#else\n\t    movi(rn(reg), data.w);\n\t    stxi_l(CVT_OFFSET, _RBP_REGNO, rn(reg));\n#endif\n\t    jit_unget_reg(reg);\n\t    x87_ldxi_d(r0, _RBP_REGNO, CVT_OFFSET);\n\t}\n\telse\n\t    x87_ldi_d(r0, (jit_word_t)i0);\n\treturn;\n    }\n    fstpr(r0 + 1);\n}",
      "lines": 46,
      "depth": 20,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_eqr_d": {
      "start_point": [
        1063,
        0
      ],
      "end_point": [
        1090,
        1
      ],
      "content": "static void\n_x87_eqr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\t\trc;\n    jit_word_t\t\t\tjp_code;\n    jit_int32_t\t\t\treg, f1, f2;\n    if (r2 == _ST0_REGNO)\tf1 = r2, f2 = r1;\n    else\t\t\tf1 = r1, f2 = r2;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, reg);\n    }\n    ixorr(reg, reg);\n    if (f1 == _ST0_REGNO)\n\tfucomir(f2);\n    else {\n\tfldr(f1);\n\tfucomipr(f2 + 1);\n    }\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_E, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 28,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ner_d": {
      "start_point": [
        1094,
        0
      ],
      "end_point": [
        1123,
        1
      ],
      "content": "dopi(gt)\n\nstatic void\n_x87_ner_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    jit_bool_t\t\t\trc;\n    jit_word_t\t\t\tjp_code;\n    jit_int32_t\t\t\treg, f1, f2;\n    if (r2 == _ST0_REGNO)\tf1 = r2, f2 = r1;\n    else\t\t\tf1 = r1, f2 = r2;\n    if ((rc = reg8_p(r0)))\n\treg = r0;\n    else {\n\treg = _RAX_REGNO;\n\tmovr(r0, reg);\n    }\n    imovi(reg, 1);\n    if (f1 == _ST0_REGNO)\n\tfucomir(f2);\n    else {\n\tfldr(f1);\n\tfucomipr(f2 + 1);\n    }\n    jpes(0);\n    jp_code = _jit->pc.w;\n    cc(X86_CC_NE, reg);\n    patch_rel_char(jp_code, _jit->pc.w);\n    if (!rc)\n\txchgr(r0, reg);\n}",
      "lines": 30,
      "depth": 9,
      "decorators": [
        "dopi(gt)",
        "dopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_ltgtr_d": {
      "start_point": [
        1132,
        0
      ],
      "end_point": [
        1139,
        1
      ],
      "content": "static void\n_x87_ltgtr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n    if (r1 == r2)\n\tmovi(r0, 1);\n    else\n\tx87cmp2(X86_CC_NE, r0, r1, r2);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldr_d": {
      "start_point": [
        1143,
        0
      ],
      "end_point": [
        1150,
        1
      ],
      "content": "dopi(unord)\n\nstatic void\n_x87_ldr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    fldlm(0, r1, _NOREG, _SCL1);\n    fstpr(r0 + 1);\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "dopi(unord)",
        "dopi",
        "(",
        "unord",
        "unord",
        ")",
        "static",
        "static",
        "void",
        "void"
      ]
    },
    "_x87_ldi_d": {
      "start_point": [
        1152,
        0
      ],
      "end_point": [
        1166,
        1
      ],
      "content": "static void\n_x87_ldi_d(jit_state_t *_jit, jit_int32_t r0, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (x87_address_p(i0)) {\n\tfldlm(i0, _NOREG, _NOREG, _SCL1);\n\tfstpr(r0 + 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tx87_ldr_d(r0, rn(reg));\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 15,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldxr_d": {
      "start_point": [
        1168,
        0
      ],
      "end_point": [
        1181,
        1
      ],
      "content": "static void\n_x87_ldxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r1, r2);\n    x87_ldr_d(r0, rn(reg));\n    jit_unget_reg(reg);\n#else\n    fldlm(0, r1, r2, _SCL1);\n    fstpr(r0 + 1);\n#endif\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_ldxi_d": {
      "start_point": [
        1183,
        0
      ],
      "end_point": [
        1202,
        1
      ],
      "content": "static void\n_x87_ldxi_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_word_t i0)\n{\n    jit_int32_t\t\treg;\n    if (can_sign_extend_int_p(i0)) {\n\tfldlm(i0, r1, _NOREG, _SCL1);\n\tfstpr(r0 + 1);\n    }\n    else {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r1, i0);\n\tx87_ldr_d(r0, rn(reg));\n#else\n\tmovi(rn(reg), i0);\n\tx87_ldxr_d(r0, r1, rn(reg));\n#endif\n\tjit_unget_reg(reg);\n    }\n}",
      "lines": 20,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_str_d": {
      "start_point": [
        1204,
        0
      ],
      "end_point": [
        1214,
        1
      ],
      "content": "static void\n_x87_str_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    if (r1 == _ST0_REGNO)\n\tfstlm(0, r0, _NOREG, _SCL1);\n    else {\n\tfxchr(r1);\n\tfstlm(0, r0, _NOREG, _SCL1);\n\tfxchr(r1);\n    }\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_sti_d": {
      "start_point": [
        1216,
        0
      ],
      "end_point": [
        1233,
        1
      ],
      "content": "static void\n_x87_sti_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0)\n{\n    jit_int32_t\t\treg;\n    if (!x87_address_p(i0)) {\n\treg = jit_get_reg(jit_class_gpr);\n\tmovi(rn(reg), i0);\n\tx87_str_d(rn(reg), r0);\n\tjit_unget_reg(reg);\n    }\n    else if (r0 == _ST0_REGNO)\n\tfstlm(i0, _NOREG, _NOREG, _SCL1);\n    else {\n\tfxchr(r0);\n\tfstlm(i0, _NOREG, _NOREG, _SCL1);\n\tfxchr(r0);\n    }\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_stxr_d": {
      "start_point": [
        1235,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "static void\n_x87_stxr_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1, jit_int32_t r2)\n{\n#if __X64_32\n    jit_int32_t\t\treg;\n    reg = jit_get_reg(jit_class_gpr);\n    addr(rn(reg), r0, r1);\n    x87_str_d(rn(reg), r2);\n    jit_unget_reg(reg);\n#else\n    if (r2 == _ST0_REGNO)\n\tfstlm(0, r0, r1, _SCL1);\n    else {\n\tfxchr(r2);\n\tfstlm(0, r0, r1, _SCL1);\n\tfxchr(r2);\n    }\n#endif\n}",
      "lines": 19,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_stxi_d": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1277,
        1
      ],
      "content": "static void\n_x87_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\treg;\n    if (!can_sign_extend_int_p(i0)) {\n\treg = jit_get_reg(jit_class_gpr);\n#if __X64_32\n\taddi(rn(reg), r0, i0);\n\tx87_str_d(rn(reg), r1);\n#else\n\tmovi(rn(reg), i0);\n\tx87_stxr_d(rn(reg), r0, r1);\n#endif\n\tjit_unget_reg(reg);\n    }\n    else if (r1 == _ST0_REGNO)\n\tfstlm(i0, r0, _NOREG, _SCL1);\n    else {\n\tfxchr(r1);\n\tfstlm(i0, r0, _NOREG, _SCL1);\n\tfxchr(r1);\n    }\n}",
      "lines": 23,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_beqr_d": {
      "start_point": [
        1282,
        0
      ],
      "end_point": [
        1300,
        1
      ],
      "content": "static jit_word_t\n_x87_beqr_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\t\tf0, f1;\n    jit_word_t\t\t\tjp_code;\n    if (r1 == _ST0_REGNO)\tf0 = r1, f1 = r0;\n    else\t\t\tf0 = r0, f1 = r1;\n    if (f0 == _ST0_REGNO)\n\tfucomir(f1);\n    else {\n\tfldr(f0);\n\tfucomipr(f1 + 1);\n    }\n    jpes(0);\n    jp_code = _jit->pc.w;\n    jcc(X86_CC_E, i0);\n    patch_rel_char(jp_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 19,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_x87_bner_d": {
      "start_point": [
        1303,
        0
      ],
      "end_point": [
        1327,
        1
      ],
      "content": "dbopi(gt)\n\nstatic jit_word_t\n_x87_bner_d(jit_state_t *_jit, jit_word_t i0, jit_int32_t r0, jit_int32_t r1)\n{\n    jit_int32_t\t\t\tf0, f1;\n    jit_word_t\t\t\tjp_code;\n    jit_word_t\t\t\tjz_code;\n    if (r1 == _ST0_REGNO)\tf0 = r1, f1 = r0;\n    else\t\t\tf0 = r0, f1 = r1;\n    if (f0 == _ST0_REGNO)\n\tfucomir(f1);\n    else {\n\tfldr(f0);\n\tfucomipr(f1 + 1);\n    }\n    jpes(0);\n    jp_code = _jit->pc.w;\n    jzs(0);\n    jz_code = _jit->pc.w;\n    patch_rel_char(jp_code, _jit->pc.w);\n    jmpi(i0);\n    patch_rel_char(jz_code, _jit->pc.w);\n    return (_jit->pc.w);\n}",
      "lines": 25,
      "depth": 9,
      "decorators": [
        "dbopi(gt)",
        "dbopi",
        "(",
        "gt",
        "gt",
        ")",
        "static",
        "static",
        "jit_word_t",
        "jit_word_t"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/jit_x86.c": {
    "jit_get_cpu": {
      "start_point": [
        232,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "content": "void\njit_get_cpu(void)\n{\n    union {\n\tstruct {\n\t    jit_uint32_t sse3\t\t: 1;\n\t    jit_uint32_t pclmulqdq\t: 1;\n\t    jit_uint32_t dtes64\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t monitor\t: 1;\n\t    jit_uint32_t ds_cpl\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t vmx\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t smx\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t est\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t tm2\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t ssse3\t\t: 1;\n\t    jit_uint32_t cntx_id\t: 1;\t/* amd reserved */\n\t    jit_uint32_t __reserved0\t: 1;\n\t    jit_uint32_t fma\t\t: 1;\n\t    jit_uint32_t cmpxchg16b\t: 1;\n\t    jit_uint32_t xtpr\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t pdcm\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t __reserved1\t: 1;\n\t    jit_uint32_t pcid\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t dca\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t sse4_1\t\t: 1;\n\t    jit_uint32_t sse4_2\t\t: 1;\n\t    jit_uint32_t x2apic\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t movbe\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t popcnt\t\t: 1;\n\t    jit_uint32_t tsc\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t aes\t\t: 1;\n\t    jit_uint32_t xsave\t\t: 1;\n\t    jit_uint32_t osxsave\t: 1;\n\t    jit_uint32_t avx\t\t: 1;\n\t    jit_uint32_t __reserved2\t: 1;\t/* amd F16C */\n\t    jit_uint32_t __reserved3\t: 1;\n\t    jit_uint32_t __alwayszero\t: 1;\t/* amd RAZ */\n\t} bits;\n\tjit_uword_t\tcpuid;\n    } ecx;\n    union {\n\tstruct {\n\t    jit_uint32_t fpu\t\t: 1;\n\t    jit_uint32_t vme\t\t: 1;\n\t    jit_uint32_t de\t\t: 1;\n\t    jit_uint32_t pse\t\t: 1;\n\t    jit_uint32_t tsc\t\t: 1;\n\t    jit_uint32_t msr\t\t: 1;\n\t    jit_uint32_t pae\t\t: 1;\n\t    jit_uint32_t mce\t\t: 1;\n\t    jit_uint32_t cmpxchg8b\t: 1;\n\t    jit_uint32_t apic\t\t: 1;\n\t    jit_uint32_t __reserved0\t: 1;\n\t    jit_uint32_t sep\t\t: 1;\n\t    jit_uint32_t mtrr\t\t: 1;\n\t    jit_uint32_t pge\t\t: 1;\n\t    jit_uint32_t mca\t\t: 1;\n\t    jit_uint32_t cmov\t\t: 1;\n\t    jit_uint32_t pat\t\t: 1;\n\t    jit_uint32_t pse36\t\t: 1;\n\t    jit_uint32_t psn\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t clfsh\t\t: 1;\n\t    jit_uint32_t __reserved1\t: 1;\n\t    jit_uint32_t ds\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t acpi\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t mmx\t\t: 1;\n\t    jit_uint32_t fxsr\t\t: 1;\n\t    jit_uint32_t sse\t\t: 1;\n\t    jit_uint32_t sse2\t\t: 1;\n\t    jit_uint32_t ss\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t htt\t\t: 1;\n\t    jit_uint32_t tm\t\t: 1;\t/* amd reserved */\n\t    jit_uint32_t __reserved2\t: 1;\n\t    jit_uint32_t pbe\t\t: 1;\t/* amd reserved */\n\t} bits;\n\tjit_uword_t\tcpuid;\n    } edx;\n#if __X32\n    int\t\t\tac, flags;\n#endif\n    jit_uword_t\t\teax, ebx;\n\n#if __X32\n    /* adapted from glibc __sysconf */\n    __asm__ volatile (\"pushfl;\\n\\t\"\n\t\t      \"popl %0;\\n\\t\"\n\t\t      \"movl $0x240000, %1;\\n\\t\"\n\t\t      \"xorl %0, %1;\\n\\t\"\n\t\t      \"pushl %1;\\n\\t\"\n\t\t      \"popfl;\\n\\t\"\n\t\t      \"pushfl;\\n\\t\"\n\t\t      \"popl %1;\\n\\t\"\n\t\t      \"xorl %0, %1;\\n\\t\"\n\t\t      \"pushl %0;\\n\\t\"\n\t\t      \"popfl\"\n\t\t      : \"=r\" (flags), \"=r\" (ac));\n\n    /* i386 or i486 without cpuid */\n    if ((ac & (1 << 21)) == 0)\n\t/* probably without x87 as well */\n\treturn;\n#endif\n\n    /* query %eax = 1 function */\n#if __X32 || __X64_32\n    __asm__ volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n#else\n    __asm__ volatile (\"xchgq %%rbx, %1; cpuid; xchgq %%rbx, %1\"\n#endif\n\t\t      : \"=a\" (eax), \"=r\" (ebx),\n\t\t      \"=c\" (ecx.cpuid), \"=d\" (edx.cpuid)\n\t\t      : \"0\" (1));\n\n    jit_cpu.fpu\t\t= edx.bits.fpu;\n    jit_cpu.cmpxchg8b\t= edx.bits.cmpxchg8b;\n    jit_cpu.cmov\t= edx.bits.cmov;\n    jit_cpu.mmx\t\t= edx.bits.mmx;\n    jit_cpu.sse\t\t= edx.bits.sse;\n    jit_cpu.sse2\t= edx.bits.sse2;\n    jit_cpu.sse3\t= ecx.bits.sse3;\n    jit_cpu.pclmulqdq\t= ecx.bits.pclmulqdq;\n    jit_cpu.ssse3\t= ecx.bits.ssse3;\n    jit_cpu.fma\t\t= ecx.bits.fma;\n    jit_cpu.cmpxchg16b\t= ecx.bits.cmpxchg16b;\n    jit_cpu.sse4_1\t= ecx.bits.sse4_1;\n    jit_cpu.sse4_2\t= ecx.bits.sse4_2;\n    jit_cpu.movbe\t= ecx.bits.movbe;\n    jit_cpu.popcnt\t= ecx.bits.popcnt;\n    jit_cpu.aes\t\t= ecx.bits.aes;\n    jit_cpu.avx\t\t= ecx.bits.avx;\n\n    /* query %eax = 0x80000001 function */\n#if __X64\n#  if __X64_32\n    __asm__ volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n#  else\n    __asm__ volatile (\"xchgq %%rbx, %1; cpuid; xchgq %%rbx, %1\"\n#  endif\n\t\t      : \"=a\" (eax), \"=r\" (ebx),\n\t\t      \"=c\" (ecx.cpuid), \"=d\" (edx.cpuid)\n\t\t      : \"0\" (0x80000001));\n    jit_cpu.lahf\t= ecx.cpuid & 1;\n#endif\n}",
      "lines": 144,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_init": {
      "start_point": [
        377,
        0
      ],
      "end_point": [
        397,
        1
      ],
      "content": "void\n_jit_init(jit_state_t *_jit)\n{\n#if __X32\n    jit_int32_t\t\tregno;\n    static jit_bool_t\tfirst = 1;\n#endif\n\n    _jitc->reglen = jit_size(_rvs) - 1;\n#if __X32\n    if (first) {\n\tif (!jit_cpu.sse2) {\n\t    for (regno = _jitc->reglen; regno >= 0; regno--) {\n\t\tif (_rvs[regno].spec & jit_class_xpr)\n\t\t    _rvs[regno].spec = 0;\n\t    }\n\t}\n\tfirst = 0;\n    }\n#endif\n}",
      "lines": 21,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_prolog": {
      "start_point": [
        399,
        0
      ],
      "end_point": [
        440,
        1
      ],
      "content": "void\n_jit_prolog(jit_state_t *_jit)\n{\n    jit_int32_t\t\toffset;\n\n    if (_jitc->function)\n\tjit_epilog();\n    assert(jit_regset_cmp_ui(&_jitc->regarg, 0) == 0);\n    jit_regset_set_ui(&_jitc->regsav, 0);\n    offset = _jitc->functions.offset;\n    if (offset >= _jitc->functions.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t\t    _jitc->functions.length * sizeof(jit_function_t),\n\t\t    (_jitc->functions.length + 16) * sizeof(jit_function_t));\n\t_jitc->functions.length += 16;\n    }\n    _jitc->function = _jitc->functions.ptr + _jitc->functions.offset++;\n    _jitc->function->self.size = stack_framesize;\n    _jitc->function->self.argi = _jitc->function->self.argf =\n\t_jitc->function->self.aoff = _jitc->function->self.alen = 0;\n    /* sse/x87 conversion */\n    _jitc->function->self.aoff = CVT_OFFSET;\n    _jitc->function->self.call = jit_call_default;\n    jit_alloc((jit_pointer_t *)&_jitc->function->regoff,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n\n    /* _no_link here does not mean the jit_link() call can be removed\n     * by rewriting as:\n     * _jitc->function->prolog = jit_new_node(jit_code_prolog);\n     */\n    _jitc->function->prolog = jit_new_node_no_link(jit_code_prolog);\n    jit_link(_jitc->function->prolog);\n    _jitc->function->prolog->w.w = offset;\n    _jitc->function->epilog = jit_new_node_no_link(jit_code_epilog);\n    /*\tu:\tlabel value\n     *\tv:\toffset in blocks vector\n     *\tw:\toffset in functions vector\n     */\n    _jitc->function->epilog->w.w = offset;\n\n    jit_regset_new(&_jitc->function->regset);\n}",
      "lines": 42,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_allocai": {
      "start_point": [
        442,
        0
      ],
      "end_point": [
        466,
        1
      ],
      "content": "jit_int32_t\n_jit_allocai(jit_state_t *_jit, jit_int32_t length)\n{\n    assert(_jitc->function);\n    switch (length) {\n\tcase 0:\tcase 1:\t\t\t\t\t\tbreak;\n\tcase 2:\t\t_jitc->function->self.aoff &= -2;\tbreak;\n\tcase 3:\tcase 4:\t_jitc->function->self.aoff &= -4;\tbreak;\n\tdefault:\t_jitc->function->self.aoff &= -8;\tbreak;\n    }\n    _jitc->function->self.aoff -= length;\n\n    /* jit_allocai() may be called from jit_x86-cpu.c, and force a function\n     * generation restart on some conditions: div/rem and qmul/qdiv, due\n     * to registers constraints.\n     * The check is to prevent an assertion of a jit_xyz() being called\n     * during code generation, and attempting to add a node to the tail\n     * of the current IR generation. */\n    if (!_jitc->realize) {\n\tjit_inc_synth_ww(allocai, _jitc->function->self.aoff, length);\n\tjit_dec_synth();\n    }\n\n    return (_jitc->function->self.aoff);\n}",
      "lines": 25,
      "depth": 11,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_allocar": {
      "start_point": [
        468,
        0
      ],
      "end_point": [
        487,
        1
      ],
      "content": "void\n_jit_allocar(jit_state_t *_jit, jit_int32_t u, jit_int32_t v)\n{\n    jit_int32_t\t\t reg;\n    assert(_jitc->function);\n    jit_inc_synth_ww(allocar, u, v);\n    if (!_jitc->function->allocar) {\n\t_jitc->function->aoffoff = jit_allocai(sizeof(jit_int32_t));\n\t_jitc->function->allocar = 1;\n    }\n    reg = jit_get_reg(jit_class_gpr);\n    jit_negr(reg, v);\n    jit_andi(reg, reg, -16);\n    jit_ldxi_i(u, JIT_FP, _jitc->function->aoffoff);\n    jit_addr(u, u, reg);\n    jit_addr(JIT_SP, JIT_SP, reg);\n    jit_stxi_i(_jitc->function->aoffoff, JIT_FP, u);\n    jit_unget_reg(reg);\n    jit_dec_synth();\n}",
      "lines": 20,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_ret": {
      "start_point": [
        489,
        0
      ],
      "end_point": [
        499,
        1
      ],
      "content": "void\n_jit_ret(jit_state_t *_jit)\n{\n    jit_node_t\t\t*instr;\n    assert(_jitc->function);\n    jit_inc_synth(ret);\n    /* jump to epilog */\n    instr = jit_jmpi();\n    jit_patch_at(instr, _jitc->function->epilog);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr": {
      "start_point": [
        501,
        0
      ],
      "end_point": [
        513,
        1
      ],
      "content": "void\n_jit_retr(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr, u);\n    /* movr(%ret, %ret) would be optimized out */\n    if (JIT_RET != u)\n\tjit_movr(JIT_RET, u);\n    /* explicitly tell it is live */\n    else\n\tjit_live(JIT_RET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti": {
      "start_point": [
        515,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "content": "void\n_jit_reti(jit_state_t *_jit, jit_word_t u)\n{\n    jit_inc_synth_w(reti, u);\n    jit_movi(JIT_RET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_f": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        534,
        1
      ],
      "content": "void\n_jit_retr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_f, u);\n    if (JIT_FRET != u)\n\tjit_movr_f(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_f": {
      "start_point": [
        536,
        0
      ],
      "end_point": [
        543,
        1
      ],
      "content": "void\n_jit_reti_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_inc_synth_f(reti_f, u);\n    jit_movi_f(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retr_d": {
      "start_point": [
        545,
        0
      ],
      "end_point": [
        555,
        1
      ],
      "content": "void\n_jit_retr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    jit_inc_synth_w(retr_d, u);\n    if (JIT_FRET != u)\n\tjit_movr_d(JIT_FRET, u);\n    else\n\tjit_live(JIT_FRET);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_reti_d": {
      "start_point": [
        557,
        0
      ],
      "end_point": [
        564,
        1
      ],
      "content": "void\n_jit_reti_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_inc_synth_d(reti_d, u);\n    jit_movi_d(JIT_FRET, u);\n    jit_ret();\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_epilog": {
      "start_point": [
        566,
        0
      ],
      "end_point": [
        573,
        1
      ],
      "content": "void\n_jit_epilog(jit_state_t *_jit)\n{\n    assert(_jitc->function);\n    assert(_jitc->function->epilog->next == NULL);\n    jit_link(_jitc->function->epilog);\n    _jitc->function = NULL;\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg_register_p": {
      "start_point": [
        575,
        0
      ],
      "end_point": [
        582,
        1
      ],
      "content": "jit_bool_t\n_jit_arg_register_p(jit_state_t *_jit, jit_node_t *u)\n{\n    if (u->code == jit_code_arg)\n\treturn (jit_arg_reg_p(u->u.w));\n    assert(u->code == jit_code_arg_f || u->code == jit_code_arg_d);\n    return (jit_arg_f_reg_p(u->u.w));\n}",
      "lines": 8,
      "depth": 10,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_ellipsis": {
      "start_point": [
        584,
        0
      ],
      "end_point": [
        621,
        1
      ],
      "content": "void\n_jit_ellipsis(jit_state_t *_jit)\n{\n    jit_inc_synth(ellipsis);\n    if (_jitc->prepare) {\n\tjit_link_prepare();\n\t/* Remember that a varargs function call is being constructed. */\n\tassert(!(_jitc->function->call.call & jit_call_varargs));\n\t_jitc->function->call.call |= jit_call_varargs;\n    }\n    else {\n\tjit_link_prolog();\n\t/* Remember the current function is varargs. */\n\tassert(!(_jitc->function->self.call & jit_call_varargs));\n\t_jitc->function->self.call |= jit_call_varargs;\n\n#if __X64 && !__CYGWIN__\n\t/* Allocate va_list like object in the stack.\n\t * If applicable, with enough space to save all argument\n\t * registers, and use fixed offsets for them. */\n\t_jitc->function->vaoff = jit_allocai(sizeof(jit_va_list_t));\n\n\t/* Initialize gp offset in save area. */\n\tif (jit_arg_reg_p(_jitc->function->self.argi))\n\t    _jitc->function->vagp = _jitc->function->self.argi * 8;\n\telse\n\t    _jitc->function->vagp = va_gp_max_offset;\n\n\t/* Initialize fp offset in save area. */\n\tif (jit_arg_f_reg_p(_jitc->function->self.argf))\n\t    _jitc->function->vafp = _jitc->function->self.argf * 16 +\n\t\t\t\t    va_gp_max_offset;\n\telse\n\t    _jitc->function->vafp = va_fp_max_offset;\n#endif\n    }\n    jit_dec_synth();\n}",
      "lines": 38,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_arg": {
      "start_point": [
        623,
        0
      ],
      "end_point": [
        647,
        1
      ],
      "content": "jit_node_t *\n_jit_arg(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n#if __X64\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n#  if __CYGWIN__\n\t_jitc->function->self.size += sizeof(jit_word_t);\n#  endif\n    }\n    else\n#endif\n    {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += REAL_WORDSIZE;\n    }\n    node = jit_new_node_ww(jit_code_arg, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_f": {
      "start_point": [
        649,
        0
      ],
      "end_point": [
        676,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_f(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n#  endif\n    else\n#endif\n    {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += REAL_WORDSIZE;\n    }\n    node = jit_new_node_ww(jit_code_arg_f, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_f(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_arg_d": {
      "start_point": [
        678,
        0
      ],
      "end_point": [
        705,
        1
      ],
      "content": "jit_node_t *\n_jit_arg_d(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_int32_t\t\t offset;\n    assert(_jitc->function);\n    assert(!(_jitc->function->self.call & jit_call_varargs));\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->self.argi)) {\n\toffset = _jitc->function->self.argi++;\n\t_jitc->function->self.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->self.argf))\n\toffset = _jitc->function->self.argf++;\n#  endif\n    else\n#endif\n    {\n\toffset = _jitc->function->self.size;\n\t_jitc->function->self.size += sizeof(jit_float64_t);\n    }\n    node = jit_new_node_ww(jit_code_arg_d, offset,\n\t\t\t   ++_jitc->function->self.argn);\n    jit_link_prolog();\n    return (node);\n}",
      "lines": 28,
      "depth": 13,
      "decorators": [
        "jit_node_t",
        "*\n_jit_arg_d(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_getarg_c": {
      "start_point": [
        707,
        0
      ],
      "end_point": [
        719,
        1
      ],
      "content": "void\n_jit_getarg_c(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_c, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_c(u, JIT_RA0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_c(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_uc": {
      "start_point": [
        721,
        0
      ],
      "end_point": [
        733,
        1
      ],
      "content": "void\n_jit_getarg_uc(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_uc, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_uc(u, JIT_RA0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_uc(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_s": {
      "start_point": [
        735,
        0
      ],
      "end_point": [
        747,
        1
      ],
      "content": "void\n_jit_getarg_s(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_s, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_s(u, JIT_RA0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_s(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_us": {
      "start_point": [
        749,
        0
      ],
      "end_point": [
        761,
        1
      ],
      "content": "void\n_jit_getarg_us(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_us, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_us(u, JIT_RA0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_us(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_i": {
      "start_point": [
        763,
        0
      ],
      "end_point": [
        780,
        1
      ],
      "content": "void\n_jit_getarg_i(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_i, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w)) {\n#  if __X64_32\n\tjit_movr(u, JIT_RA0 - v->u.w);\n#  else\n\tjit_extr_i(u, JIT_RA0 - v->u.w);\n#  endif\n     }\n    else\n#endif\n\tjit_ldxi_i(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 18,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_ui": {
      "start_point": [
        783,
        0
      ],
      "end_point": [
        793,
        1
      ],
      "content": "void\n_jit_getarg_ui(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_ui, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_extr_ui(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_ui(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_l": {
      "start_point": [
        795,
        0
      ],
      "end_point": [
        805,
        1
      ],
      "content": "void\n_jit_getarg_l(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(getarg_l, u, v);\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(u, JIT_RA0 - v->u.w);\n    else\n\tjit_ldxi_l(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 11,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr": {
      "start_point": [
        808,
        0
      ],
      "end_point": [
        820,
        1
      ],
      "content": "void\n_jit_putargr(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargr, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr(JIT_RA0 - v->u.w, u);\n    else\n#endif\n\tjit_stxi(v->u.w, _RBP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi": {
      "start_point": [
        822,
        0
      ],
      "end_point": [
        840,
        1
      ],
      "content": "void\n_jit_putargi(jit_state_t *_jit, jit_word_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg);\n    jit_inc_synth_wp(putargi, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi(JIT_RA0 - v->u.w, u);\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(v->u.w, _RBP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_f": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        854,
        1
      ],
      "content": "void\n_jit_getarg_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(getarg_f, u, v);\n#if __X64\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_f(u, _XMM0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_f(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_f": {
      "start_point": [
        856,
        0
      ],
      "end_point": [
        868,
        1
      ],
      "content": "void\n_jit_putargr_f(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_wp(putargr_f, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_f(_XMM0 - v->u.w, u);\n    else\n#endif\n\tjit_stxi_f(v->u.w, _RBP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_f": {
      "start_point": [
        870,
        0
      ],
      "end_point": [
        888,
        1
      ],
      "content": "void\n_jit_putargi_f(jit_state_t *_jit, jit_float32_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_f);\n    jit_inc_synth_fp(putargi_f, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_f(_XMM0 - v->u.w, u);\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(v->u.w, _RBP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_getarg_d": {
      "start_point": [
        890,
        0
      ],
      "end_point": [
        902,
        1
      ],
      "content": "void\n_jit_getarg_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(getarg_d, u, v);\n#if __X64\n    if (jit_arg_f_reg_p(v->u.w))\n\tjit_movr_d(u, _XMM0 - v->u.w);\n    else\n#endif\n\tjit_ldxi_d(u, _RBP, v->u.w);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargr_d": {
      "start_point": [
        904,
        0
      ],
      "end_point": [
        916,
        1
      ],
      "content": "void\n_jit_putargr_d(jit_state_t *_jit, jit_int32_t u, jit_node_t *v)\n{\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_wp(putargr_d, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movr_d(_XMM0 - v->u.w, u);\n    else\n#endif\n\tjit_stxi_d(v->u.w, _RBP, u);\n    jit_dec_synth();\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_putargi_d": {
      "start_point": [
        918,
        0
      ],
      "end_point": [
        936,
        1
      ],
      "content": "void\n_jit_putargi_d(jit_state_t *_jit, jit_float64_t u, jit_node_t *v)\n{\n    jit_int32_t\t\tregno;\n    assert(v->code == jit_code_arg_d);\n    jit_inc_synth_dp(putargi_d, u, v);\n#if __X64\n    if (jit_arg_reg_p(v->u.w))\n\tjit_movi_d(_XMM0 - v->u.w, u);\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(v->u.w, _RBP, regno);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 19,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr": {
      "start_point": [
        938,
        0
      ],
      "end_point": [
        961,
        1
      ],
      "content": "void\n_jit_pushargr(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr, u);\n    jit_link_prepare();\n#if __X64\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr(JIT_RA0 - _jitc->function->call.argi, u);\n\t++_jitc->function->call.argi;\n#  if __CYGWIN__\n\tif (_jitc->function->call.call & jit_call_varargs)\n\t    jit_stxi(_jitc->function->call.size, _RSP, u);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n#  endif\n    }\n    else\n#endif\n    {\n\tjit_stxi(_jitc->function->call.size, _RSP, u);\n\t_jitc->function->call.size += REAL_WORDSIZE;\n    }\n    jit_dec_synth();\n}",
      "lines": 24,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi": {
      "start_point": [
        963,
        0
      ],
      "end_point": [
        991,
        1
      ],
      "content": "void\n_jit_pushargi(jit_state_t *_jit, jit_word_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargi, u);\n    jit_link_prepare();\n#if __X64\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi(JIT_RA0 - _jitc->function->call.argi, u);\n#  if __CYGWIN__\n\tif (_jitc->function->call.call & jit_call_varargs)\n\t    jit_stxi(_jitc->function->call.size, _RSP,\n\t\t     JIT_RA0 - _jitc->function->call.argi);\n\t_jitc->function->call.size += sizeof(jit_word_t);\n#  endif\n\t++_jitc->function->call.argi;\n    }\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_gpr);\n\tjit_movi(regno, u);\n\tjit_stxi(_jitc->function->call.size, _RSP, regno);\n\t_jitc->function->call.size += REAL_WORDSIZE;\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 29,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_f": {
      "start_point": [
        993,
        0
      ],
      "end_point": [
        1025,
        1
      ],
      "content": "void\n_jit_pushargr_f(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_f, u);\n    jit_link_prepare();\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_f(_XMM0 - _jitc->function->call.argi, u);\n\tif (_jitc->function->call.call & jit_call_varargs) {\n\t    jit_stxi_f(_jitc->function->call.size, _RSP,\n\t\t       _XMM0 - _jitc->function->call.argi);\n\t    jit_ldxi_i(JIT_RA0 - _jitc->function->call.argi, _RSP,\n\t\t       _jitc->function->call.size);\n\t}\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->self.argf)) {\n\tjit_movr_f(_XMM0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n#  endif\n    else\n#endif\n    {\n\tjit_stxi_f(_jitc->function->call.size, _RSP, u);\n\t_jitc->function->call.size += REAL_WORDSIZE;\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_f": {
      "start_point": [
        1027,
        0
      ],
      "end_point": [
        1063,
        1
      ],
      "content": "void\n_jit_pushargi_f(jit_state_t *_jit, jit_float32_t u)\n{\n    jit_int32_t\t\tregno;\n    assert(_jitc->function);\n    jit_inc_synth_f(pushargi_f, u);\n    jit_link_prepare();\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_f(_XMM0 - _jitc->function->call.argi, u);\n\tif (_jitc->function->call.call & jit_call_varargs) {\n\t    jit_stxi_f(_jitc->function->call.size, _RSP,\n\t\t       _XMM0 - _jitc->function->call.argi);\n\t    jit_ldxi_i(JIT_RA0 - _jitc->function->call.argi, _RSP,\n\t\t       _jitc->function->call.size);\n\t}\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_f(_XMM0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n#  endif\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_f(regno, u);\n\tjit_stxi_f(_jitc->function->call.size, _RSP, regno);\n\t_jitc->function->call.size += REAL_WORDSIZE;\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 37,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargr_d": {
      "start_point": [
        1065,
        0
      ],
      "end_point": [
        1097,
        1
      ],
      "content": "void\n_jit_pushargr_d(jit_state_t *_jit, jit_int32_t u)\n{\n    assert(_jitc->function);\n    jit_inc_synth_w(pushargr_d, u);\n    jit_link_prepare();\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movr_d(_XMM0 - _jitc->function->call.argi, u);\n\tif (_jitc->function->call.call & jit_call_varargs) {\n\t    jit_stxi_d(_jitc->function->call.size, _RSP,\n\t\t       _XMM0 - _jitc->function->call.argi);\n\t    jit_ldxi_l(JIT_RA0 - _jitc->function->call.argi, _RSP,\n\t\t       _jitc->function->call.size);\n\t}\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movr_d(_XMM0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n#  endif\n    else\n#endif\n    {\n\tjit_stxi_d(_jitc->function->call.size, _RSP, u);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n    }\n    jit_dec_synth();\n}",
      "lines": 33,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_pushargi_d": {
      "start_point": [
        1099,
        0
      ],
      "end_point": [
        1135,
        1
      ],
      "content": "void\n_jit_pushargi_d(jit_state_t *_jit, jit_float64_t u)\n{\n    jit_int32_t\t\t regno;\n    assert(_jitc->function);\n    jit_inc_synth_d(pushargi_d, u);\n    jit_link_prepare();\n#if __X64\n#  if __CYGWIN__\n    if (jit_arg_reg_p(_jitc->function->call.argi)) {\n\tjit_movi_d(_XMM0 - _jitc->function->call.argi, u);\n\tif (_jitc->function->call.call & jit_call_varargs) {\n\t    jit_stxi_d(_jitc->function->call.size, _RSP,\n\t\t       _XMM0 - _jitc->function->call.argi);\n\t    jit_ldxi_l(JIT_RA0 - _jitc->function->call.argi, _RSP,\n\t\t       _jitc->function->call.size);\n\t}\n\t++_jitc->function->call.argi;\n\t_jitc->function->call.size += sizeof(jit_word_t);\n    }\n#  else\n    if (jit_arg_f_reg_p(_jitc->function->call.argf)) {\n\tjit_movi_d(_XMM0 - _jitc->function->call.argf, u);\n\t++_jitc->function->call.argf;\n    }\n#  endif\n    else\n#endif\n    {\n\tregno = jit_get_reg(jit_class_fpr);\n\tjit_movi_d(regno, u);\n\tjit_stxi_d(_jitc->function->call.size, _RSP, regno);\n\t_jitc->function->call.size += sizeof(jit_float64_t);\n\tjit_unget_reg(regno);\n    }\n    jit_dec_synth();\n}",
      "lines": 37,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_p": {
      "start_point": [
        1137,
        0
      ],
      "end_point": [
        1158,
        1
      ],
      "content": "jit_bool_t\n_jit_regarg_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n#if __X64\n    jit_int32_t\t\tspec;\n\n    spec = jit_class(_rvs[regno].spec);\n    if (spec & jit_class_arg) {\n\tif (spec & jit_class_gpr) {\n\t    regno = JIT_RA0 - regno;\n\t    if (regno >= 0 && regno < node->v.w)\n\t\treturn (1);\n\t}\n\telse if (spec & jit_class_fpr) {\n\t    regno = _XMM0 - regno;\n\t    if (regno >= 0 && regno < node->w.w)\n\t\treturn (1);\n\t}\n    }\n#endif\n    return (0);\n}",
      "lines": 22,
      "depth": 15,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_finishr": {
      "start_point": [
        1160,
        0
      ],
      "end_point": [
        1193,
        1
      ],
      "content": "void\n_jit_finishr(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_int32_t\t\t reg;\n    jit_node_t\t\t*call;\n    assert(_jitc->function);\n    reg = r0;\n    jit_inc_synth_w(finishr, r0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n#if __X64\n#  if !__CYGWIN__\n    if (_jitc->function->call.call & jit_call_varargs) {\n\tif (jit_regno(reg) == _RAX) {\n\t    reg = jit_get_reg(jit_class_gpr);\n\t    jit_movr(reg, _RAX);\n\t}\n\tif (_jitc->function->call.argf)\n\t    jit_movi(_RAX, _jitc->function->call.argf);\n\telse\n\t    jit_movi(_RAX, 0);\n\tif (reg != r0)\n\t    jit_unget_reg(reg);\n    }\n#  endif\n#endif\n    call = jit_callr(reg);\n    call->v.w = _jitc->function->call.argi;\n    call->w.w = _jitc->function->call.argf;\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n}",
      "lines": 34,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_finishi": {
      "start_point": [
        1195,
        0
      ],
      "end_point": [
        1229,
        1
      ],
      "content": "jit_node_t *\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)\n{\n#if __X64\n    jit_int32_t\t\treg;\n#endif\n    jit_node_t\t\t*node;\n    assert(_jitc->function);\n    jit_inc_synth_w(finishi, (jit_word_t)i0);\n    if (_jitc->function->self.alen < _jitc->function->call.size)\n\t_jitc->function->self.alen = _jitc->function->call.size;\n#if __X64\n    /* FIXME preventing %rax allocation is good enough, but for consistency\n     * it should automatically detect %rax is dead, in case it has run out\n     * registers, and not save/restore it, what would be wrong if using the\n     * the return value, otherwise, just a needless noop */\n    /* >> prevent %rax from being allocated as the function pointer */\n    jit_regset_setbit(&_jitc->regarg, _RAX);\n    reg = jit_get_reg(jit_class_gpr);\n    node = jit_movi(reg, (jit_word_t)i0);\n    jit_finishr(reg);\n    jit_unget_reg(reg);\n    /* << prevent %rax from being allocated as the function pointer */\n    jit_regset_clrbit(&_jitc->regarg, _RAX);\n#else\n    node = jit_calli(i0);\n    node->v.w = _jitc->function->call.argi;\n    node->w.w = _jitc->function->call.argf;\n#endif\n    _jitc->function->call.argi = _jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = 0;\n    jit_dec_synth();\n    return (node);\n}",
      "lines": 35,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_finishi(jit_state_t *_jit, jit_pointer_t i0)",
        "*"
      ]
    },
    "_jit_retval_c": {
      "start_point": [
        1231,
        0
      ],
      "end_point": [
        1237,
        1
      ],
      "content": "void\n_jit_retval_c(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_c, r0);\n    jit_extr_c(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_uc": {
      "start_point": [
        1239,
        0
      ],
      "end_point": [
        1245,
        1
      ],
      "content": "void\n_jit_retval_uc(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_uc, r0);\n    jit_extr_uc(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_s": {
      "start_point": [
        1247,
        0
      ],
      "end_point": [
        1253,
        1
      ],
      "content": "void\n_jit_retval_s(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_s, r0);\n    jit_extr_s(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_us": {
      "start_point": [
        1255,
        0
      ],
      "end_point": [
        1261,
        1
      ],
      "content": "void\n_jit_retval_us(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_us, r0);\n    jit_extr_us(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_i": {
      "start_point": [
        1263,
        0
      ],
      "end_point": [
        1274,
        1
      ],
      "content": "void\n_jit_retval_i(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_i, r0);\n#if __X32 || __X64_32\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n#else\n    jit_extr_i(r0, JIT_RET);\n#endif\n    jit_dec_synth();\n}",
      "lines": 12,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_ui": {
      "start_point": [
        1277,
        0
      ],
      "end_point": [
        1283,
        1
      ],
      "content": "void\n_jit_retval_ui(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_ui, r0);\n    jit_extr_ui(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_l": {
      "start_point": [
        1285,
        0
      ],
      "end_point": [
        1292,
        1
      ],
      "content": "void\n_jit_retval_l(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_l, r0);\n    if (r0 != JIT_RET)\n\tjit_movr(r0, JIT_RET);\n    jit_dec_synth();\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_f": {
      "start_point": [
        1295,
        0
      ],
      "end_point": [
        1304,
        1
      ],
      "content": "void\n_jit_retval_f(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_f, r0);\n#if __X64\n    if (r0 != JIT_FRET)\n\tjit_movr_f(r0, JIT_FRET);\n#endif\n    jit_dec_synth();\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_retval_d": {
      "start_point": [
        1306,
        0
      ],
      "end_point": [
        1315,
        1
      ],
      "content": "void\n_jit_retval_d(jit_state_t *_jit, jit_int32_t r0)\n{\n    jit_inc_synth_w(retval_d, r0);\n#if __X64\n    if (r0 != JIT_FRET)\n\tjit_movr_d(r0, JIT_FRET);\n#endif\n    jit_dec_synth();\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_code": {
      "start_point": [
        1317,
        0
      ],
      "end_point": [
        2164,
        1
      ],
      "content": "jit_pointer_t\n_emit_code(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*temp;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t value;\n    jit_int32_t\t\t offset;\n    struct {\n\tjit_node_t\t*node;\n\tjit_word_t\t word;\n#if DEVEL_DISASSEMBLER\n\tjit_word_t\t prevw;\n#endif\n\tjit_int32_t\t patch_offset;\n    } undo;\n#if DEVEL_DISASSEMBLER\n    jit_word_t\t\t prevw;\n#endif\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n\n    undo.word = 0;\n    undo.node = NULL;\n    undo.patch_offset = 0;\n#define case_rr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w), rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_rw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), node->v.w);\t\t\\\n\t\tbreak\n#define case_rf(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->v.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\tbreak\n#define case_fr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\tbreak\n#define case_fw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(rn(node->u.w), node->v.w);\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(rn(node->u.w), node->v.w);\t\\\n\t\tbreak\n#define case_wr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w));\t\t\\\n\t\tbreak\n#define case_wf(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->v.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(node->u.w, rn(node->v.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(node->u.w, rn(node->v.w));\t\\\n\t\tbreak\n#define case_ff(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w) &&\t\t\t\t\\\n\t\t    jit_x87_reg_p(node->v.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w), rn(node->v.w));\t\\\n\t\tbreak;\n#define case_rrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.w),\t\t\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_rrrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tname##r##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), rn(node->w.w));\t\t\\\n\t\tbreak\n#define case_frr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_rrf(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->w.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_rrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.w), rn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_rrrw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(rn(node->u.q.l), rn(node->u.q.h),\t\t\\\n\t\t\t      rn(node->v.w), node->w.w);\t\t\\\n\t\tbreak\n#define case_frw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), node->w.w);\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), node->w.w);\t\\\n\t\tbreak\n#define case_wrr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tname##i##type(node->u.w, rn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_wrf(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->w.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(node->u.w,\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(node->u.w,\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_brr(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##r##type(temp->u.w, rn(node->v.w),\t\t\\\n\t\t\t\t  rn(node->w.w));\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##r##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), rn(node->w.w));\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_brw(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch)\t\t\t\\\n\t\t    name##i##type(temp->u.w,\t\t\t\t\\\n\t\t\t\t  rn(node->v.w), node->w.w);\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    word = name##i##type(_jit->pc.w,\t\t\t\\\n\t\t\t\t\t rn(node->v.w), node->w.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_rff(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->v.w) &&\t\t\t\t\\\n\t\t    jit_x87_reg_p(node->w.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t\trn(node->w.w));\t\t\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t\trn(node->w.w));\t\t\t\\\n\t\tbreak;\n#define case_rfw(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tif (jit_x87_reg_p(node->v.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_fff(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_##name##r##type:\t\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w) &&\t\t\t\t\\\n\t\t    jit_x87_reg_p(node->v.w) &&\t\t\t\t\\\n\t\t    jit_x87_reg_p(node->w.w))\t\t\t\t\\\n\t\t    x87_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##r##type(rn(node->u.w),\t\t\t\\\n\t\t\t\t\trn(node->v.w), rn(node->w.w));\t\\\n\t\tbreak\n#define case_ffw(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_##name##i##type:\t\t\t\t\\\n\t\tassert(node->flag & jit_flag_data);\t\t\t\\\n\t\tif (jit_x87_reg_p(node->u.w) &&\t\t\t\t\\\n\t\t    jit_x87_reg_p(node->v.w))\t\t\t\t\\\n\t\t    x87_##name##i##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\telse\t\t\t\t\t\t\t\\\n\t\t    sse_##name##i##type(rn(node->u.w), rn(node->v.w),\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\tbreak\n#define case_bff(name, type)\t\t\t\t\t\t\\\n\t    case jit_code_b##name##r##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch) {\t\t\t\\\n\t\t    if (jit_x87_reg_p(node->v.w) &&\t\t\t\\\n\t\t\tjit_x87_reg_p(node->w.w))\t\t\t\\\n\t\t\tx87_b##name##r##type(temp->u.w,\t\t\t\\\n\t\t\t\trn(node->v.w), rn(node->w.w));\t\t\\\n\t\t    else\t\t\t\t\t\t\\\n\t\t\tsse_b##name##r##type(temp->u.w,\t\t\t\\\n\t\t\t\trn(node->v.w), rn(node->w.w));\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    if (jit_x87_reg_p(node->v.w) &&\t\t\t\\\n\t\t\tjit_x87_reg_p(node->w.w))\t\t\t\\\n\t\t\tword = x87_b##name##r##type(_jit->pc.w,\t\t\\\n\t\t\t\trn(node->v.w), rn(node->w.w));\t\t\\\n\t\t    else\t\t\t\t\t\t\\\n\t\t\tword = sse_b##name##r##type(_jit->pc.w,\t\t\\\n\t\t\t\trn(node->v.w), rn(node->w.w));\t\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#define case_bfw(name, type, size)\t\t\t\t\t\\\n\t    case jit_code_b##name##i##type:\t\t\t\t\\\n\t\ttemp = node->u.n;\t\t\t\t\t\\\n\t\tassert(temp->code == jit_code_label ||\t\t\t\\\n\t\t       temp->code == jit_code_epilog);\t\t\t\\\n\t\tif (temp->flag & jit_flag_patch) {\t\t\t\\\n\t\t    if (jit_x87_reg_p(node->v.w))\t\t\t\\\n\t\t\tx87_b##name##i##type(temp->u.w,\t\t\t\\\n\t\t\t\trn(node->v.w),\t\t\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    else\t\t\t\t\t\t\\\n\t\t\tsse_b##name##i##type(temp->u.w,\t\t\t\\\n\t\t\t\trn(node->v.w),\t\t\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t    if (jit_x87_reg_p(node->v.w))\t\t\t\\\n\t\t\tword = x87_b##name##i##type(_jit->pc.w,\t\t\\\n\t\t\t\trn(node->v.w),\t\t\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    else\t\t\t\t\t\t\\\n\t\t\tword = sse_b##name##i##type(_jit->pc.w,\t\t\\\n\t\t\t\trn(node->v.w),\t\t\t\t\\\n\t\t\t\t(jit_float##size##_t *)node->w.n->u.w);\t\\\n\t\t    patch(word, node);\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak\n#if DEVEL_DISASSEMBLER\n    prevw = _jit->pc.w;\n#endif\n    for (node = _jitc->head; node; node = node->next) {\n\tif (_jit->pc.uc >= _jitc->code.end)\n\t    return (NULL);\n\n#if DEVEL_DISASSEMBLER\n\tnode->offset = (jit_uword_t)_jit->pc.w - (jit_uword_t)prevw;\n\tprevw = _jit->pc.w;\n#endif\n\tvalue = jit_classify(node->code);\n\tjit_regarg_set(node, value);\n\tswitch (node->code) {\n\t    case jit_code_align:\n\t\tassert(!(node->u.w & (node->u.w - 1)) &&\n\t\t       node->u.w <= sizeof(jit_word_t));\n\t\tif ((word = _jit->pc.w & (node->u.w - 1)))\n\t\t    nop(node->u.w - word);\n\t\tbreak;\n\t    case jit_code_note:\t\tcase jit_code_name:\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t    case jit_code_label:\n\t\tif ((node->link || (node->flag & jit_flag_use)) &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tbreak;\n\t\tcase_rrr(add,);\n\t\tcase_rrw(add,);\n\t\tcase_rrr(addx,);\n\t\tcase_rrw(addx,);\n\t\tcase_rrr(addc,);\n\t\tcase_rrw(addc,);\n\t\tcase_rrr(sub,);\n\t\tcase_rrw(sub,);\n\t\tcase_rrr(subx,);\n\t\tcase_rrw(subx,);\n\t\tcase_rrr(subc,);\n\t\tcase_rrw(subc,);\n\t\tcase_rrw(rsb,);\n\t\tcase_rrr(mul,);\n\t\tcase_rrw(mul,);\n\t\tcase_rrrr(qmul,);\n\t\tcase_rrrw(qmul,);\n\t\tcase_rrrr(qmul, _u);\n\t\tcase_rrrw(qmul, _u);\n\t\tcase_rrr(div,);\n\t\tcase_rrw(div,);\n\t\tcase_rrr(div, _u);\n\t\tcase_rrw(div, _u);\n\t\tcase_rrrr(qdiv,);\n\t\tcase_rrrw(qdiv,);\n\t\tcase_rrrr(qdiv, _u);\n\t\tcase_rrrw(qdiv, _u);\n\t\tcase_rrr(rem,);\n\t\tcase_rrw(rem,);\n\t\tcase_rrr(rem, _u);\n\t\tcase_rrw(rem, _u);\n\t\tcase_rrr(and,);\n\t\tcase_rrw(and,);\n\t\tcase_rrr(or,);\n\t\tcase_rrw(or,);\n\t\tcase_rrr(xor,);\n\t\tcase_rrw(xor,);\n\t\tcase_rrr(lsh,);\n\t\tcase_rrw(lsh,);\n\t\tcase_rrr(rsh,);\n\t\tcase_rrw(rsh,);\n\t\tcase_rrr(rsh, _u);\n\t\tcase_rrw(rsh, _u);\n\t\tcase_rr(neg,);\n\t\tcase_rr(com,);\n\t\tcase_rrr(lt,);\n\t\tcase_rrw(lt,);\n\t\tcase_rrr(lt, _u);\n\t\tcase_rrw(lt, _u);\n\t\tcase_rrr(le,);\n\t\tcase_rrw(le,);\n\t\tcase_rrr(le, _u);\n\t\tcase_rrw(le, _u);\n\t\tcase_rrr(eq,);\n\t\tcase_rrw(eq,);\n\t\tcase_rrr(ge,);\n\t\tcase_rrw(ge,);\n\t\tcase_rrr(ge, _u);\n\t\tcase_rrw(ge, _u);\n\t\tcase_rrr(gt,);\n\t\tcase_rrw(gt,);\n\t\tcase_rrr(gt, _u);\n\t\tcase_rrw(gt, _u);\n\t\tcase_rrr(ne,);\n\t\tcase_rrw(ne,);\n\t\tcase_rr(mov,);\n\t    case jit_code_movi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->v.n;\n\t\t    if (temp->code == jit_code_data ||\n\t\t\t(temp->code == jit_code_label &&\n\t\t\t (temp->flag & jit_flag_patch)))\n\t\t\tmovi(rn(node->u.w), temp->u.w);\n\t\t    else {\n\t\t\tassert(temp->code == jit_code_label ||\n\t\t\t       temp->code == jit_code_epilog);\n\t\t\tword = movi_p(rn(node->u.w), node->v.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    movi(rn(node->u.w), node->v.w);\n\t\tbreak;\n\t\tcase_rr(hton, _us);\n\t\tcase_rr(hton, _ui);\n#if __X64 && !__X64_32\n\t\tcase_rr(hton, _ul);\n#endif\n\t\tcase_rr(ext, _c);\n\t\tcase_rr(ext, _uc);\n\t\tcase_rr(ext, _s);\n\t\tcase_rr(ext, _us);\n#if __X64 && !__X64_32\n\t\tcase_rr(ext, _i);\n\t\tcase_rr(ext, _ui);\n#endif\n\t\tcase_rf(trunc, _f_i);\n\t\tcase_rf(trunc, _d_i);\n#if __X64\n\t\tcase_rf(trunc, _f_l);\n\t\tcase_rf(trunc, _d_l);\n#endif\n\t\tcase_rr(ld, _c);\n\t\tcase_rw(ld, _c);\n\t\tcase_rr(ld, _uc);\n\t\tcase_rw(ld, _uc);\n\t\tcase_rr(ld, _s);\n\t\tcase_rw(ld, _s);\n\t\tcase_rr(ld, _us);\n\t\tcase_rw(ld, _us);\n\t\tcase_rr(ld, _i);\n\t\tcase_rw(ld, _i);\n#if __X64 && !__X64_32\n\t\tcase_rr(ld, _ui);\n\t\tcase_rw(ld, _ui);\n\t\tcase_rr(ld, _l);\n\t\tcase_rw(ld, _l);\n#endif\n\t\tcase_rrr(ldx, _c);\n\t\tcase_rrw(ldx, _c);\n\t\tcase_rrr(ldx, _uc);\n\t\tcase_rrw(ldx, _uc);\n\t\tcase_rrr(ldx, _s);\n\t\tcase_rrw(ldx, _s);\n\t\tcase_rrr(ldx, _us);\n\t\tcase_rrw(ldx, _us);\n\t\tcase_rrr(ldx, _i);\n\t\tcase_rrw(ldx, _i);\n#if __X64 && !__X64_32\n\t\tcase_rrr(ldx, _ui);\n\t\tcase_rrw(ldx, _ui);\n\t\tcase_rrr(ldx, _l);\n\t\tcase_rrw(ldx, _l);\n#endif\n\t\tcase_rr(st, _c);\n\t\tcase_wr(st, _c);\n\t\tcase_rr(st, _s);\n\t\tcase_wr(st, _s);\n\t\tcase_rr(st, _i);\n\t\tcase_wr(st, _i);\n#if __X64 && !__X64_32\n\t\tcase_rr(st, _l);\n\t\tcase_wr(st, _l);\n#endif\n\t\tcase_rrr(stx, _c);\n\t\tcase_wrr(stx, _c);\n\t\tcase_rrr(stx, _s);\n\t\tcase_wrr(stx, _s);\n\t\tcase_rrr(stx, _i);\n\t\tcase_wrr(stx, _i);\n#if __X64 && !__X64_32\n\t\tcase_rrr(stx, _l);\n\t\tcase_wrr(stx, _l);\n#endif\n\t\tcase_brr(blt,);\n\t\tcase_brw(blt,);\n\t\tcase_brr(blt, _u);\n\t\tcase_brw(blt, _u);\n\t\tcase_brr(ble,);\n\t\tcase_brw(ble,);\n\t\tcase_brr(ble, _u);\n\t\tcase_brw(ble, _u);\n\t\tcase_brr(beq,);\n\t\tcase_brw(beq,);\n\t\tcase_brr(bge,);\n\t\tcase_brw(bge,);\n\t\tcase_brr(bge, _u);\n\t\tcase_brw(bge, _u);\n\t\tcase_brr(bgt,);\n\t\tcase_brw(bgt,);\n\t\tcase_brr(bgt, _u);\n\t\tcase_brw(bgt, _u);\n\t\tcase_brr(bne,);\n\t\tcase_brw(bne,);\n\t\tcase_brr(bms,);\n\t\tcase_brw(bms,);\n\t\tcase_brr(bmc,);\n\t\tcase_brw(bmc,);\n\t\tcase_brr(boadd,);\n\t\tcase_brw(boadd,);\n\t\tcase_brr(boadd, _u);\n\t\tcase_brw(boadd, _u);\n\t\tcase_brr(bxadd,);\n\t\tcase_brw(bxadd,);\n\t\tcase_brr(bxadd, _u);\n\t\tcase_brw(bxadd, _u);\n\t\tcase_brr(bosub,);\n\t\tcase_brw(bosub,);\n\t\tcase_brr(bosub, _u);\n\t\tcase_brw(bosub, _u);\n\t\tcase_brr(bxsub,);\n\t\tcase_brw(bxsub,);\n\t\tcase_brr(bxsub, _u);\n\t\tcase_brw(bxsub, _u);\n\t\tcase_fff(add, _f);\n\t\tcase_ffw(add, _f, 32);\n\t\tcase_fff(sub, _f);\n\t\tcase_ffw(sub, _f, 32);\n\t\tcase_ffw(rsb, _f, 32);\n\t\tcase_fff(mul, _f);\n\t\tcase_ffw(mul, _f, 32);\n\t\tcase_fff(div, _f);\n\t\tcase_ffw(div, _f, 32);\n\t\tcase_ff(abs, _f);\n\t\tcase_ff(neg, _f);\n\t\tcase_ff(sqrt, _f);\n\t\tcase_fr(ext, _f);\n\t\tcase_fr(ext, _d_f);\n\t\tcase_rff(lt, _f);\n\t\tcase_rfw(lt, _f, 32);\n\t\tcase_rff(le, _f);\n\t\tcase_rfw(le, _f, 32);\n\t\tcase_rff(eq, _f);\n\t\tcase_rfw(eq, _f, 32);\n\t\tcase_rff(ge, _f);\n\t\tcase_rfw(ge, _f, 32);\n\t\tcase_rff(gt, _f);\n\t\tcase_rfw(gt, _f, 32);\n\t\tcase_rff(ne, _f);\n\t\tcase_rfw(ne, _f, 32);\n\t\tcase_rff(unlt, _f);\n\t\tcase_rfw(unlt, _f, 32);\n\t\tcase_rff(unle, _f);\n\t\tcase_rfw(unle, _f, 32);\n\t\tcase_rff(uneq, _f);\n\t\tcase_rfw(uneq, _f, 32);\n\t\tcase_rff(unge, _f);\n\t\tcase_rfw(unge, _f, 32);\n\t\tcase_rff(ungt, _f);\n\t\tcase_rfw(ungt, _f, 32);\n\t\tcase_rff(ltgt, _f);\n\t\tcase_rfw(ltgt, _f, 32);\n\t\tcase_rff(ord, _f);\n\t\tcase_rfw(ord, _f, 32);\n\t\tcase_rff(unord, _f);\n\t\tcase_rfw(unord, _f, 32);\n\t    case jit_code_movr_f:\n\t\tif (jit_x87_reg_p(node->u.w)) {\n\t\t    if (jit_x87_reg_p(node->v.w))\n\t\t\tx87_movr_f(rn(node->u.w), rn(node->v.w));\n\t\t    else\n\t\t\tx87_from_sse_f(rn(node->u.w), rn(node->v.w));\n\t\t}\n\t\telse {\n\t\t    if (jit_sse_reg_p(node->v.w))\n\t\t\tsse_movr_f(rn(node->u.w), rn(node->v.w));\n\t\t    else\n\t\t\tsse_from_x87_f(rn(node->u.w), rn(node->v.w));\n\t\t}\n\t\tbreak;\n\t    case jit_code_movi_f:\n\t\tassert(node->flag & jit_flag_data);\n\t\tif (jit_x87_reg_p(node->u.w))\n\t\t    x87_movi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\telse\n\t\t    sse_movi_f(rn(node->u.w), (jit_float32_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_fr(ld, _f);\n\t\tcase_fw(ld, _f);\n\t\tcase_frr(ldx, _f);\n\t\tcase_frw(ldx, _f);\n\t\tcase_rf(st, _f);\n\t\tcase_wf(st, _f);\n\t\tcase_rrf(stx, _f);\n\t\tcase_wrf(stx, _f);\n\t\tcase_bff(lt, _f);\n\t\tcase_bfw(lt, _f, 32);\n\t\tcase_bff(le, _f);\n\t\tcase_bfw(le, _f, 32);\n\t\tcase_bff(eq, _f);\n\t\tcase_bfw(eq, _f, 32);\n\t\tcase_bff(ge, _f);\n\t\tcase_bfw(ge, _f, 32);\n\t\tcase_bff(gt, _f);\n\t\tcase_bfw(gt, _f, 32);\n\t\tcase_bff(ne, _f);\n\t\tcase_bfw(ne, _f, 32);\n\t\tcase_bff(unlt, _f);\n\t\tcase_bfw(unlt, _f, 32);\n\t\tcase_bff(unle, _f);\n\t\tcase_bfw(unle, _f, 32);\n\t\tcase_bff(uneq, _f);\n\t\tcase_bfw(uneq, _f, 32);\n\t\tcase_bff(unge, _f);\n\t\tcase_bfw(unge, _f, 32);\n\t\tcase_bff(ungt, _f);\n\t\tcase_bfw(ungt, _f, 32);\n\t\tcase_bff(ltgt, _f);\n\t\tcase_bfw(ltgt, _f, 32);\n\t\tcase_bff(ord, _f);\n\t\tcase_bfw(ord, _f, 32);\n\t\tcase_bff(unord, _f);\n\t\tcase_bfw(unord, _f, 32);\n\t\tcase_fff(add, _d);\n\t\tcase_ffw(add, _d, 64);\n\t\tcase_fff(sub, _d);\n\t\tcase_ffw(sub, _d, 64);\n\t\tcase_ffw(rsb, _d, 64);\n\t\tcase_fff(mul, _d);\n\t\tcase_ffw(mul, _d, 64);\n\t\tcase_fff(div, _d);\n\t\tcase_ffw(div, _d, 64);\n\t\tcase_ff(abs, _d);\n\t\tcase_ff(neg, _d);\n\t\tcase_ff(sqrt, _d);\n\t\tcase_fr(ext, _d);\n\t\tcase_fr(ext, _f_d);\n\t\tcase_rff(lt, _d);\n\t\tcase_rfw(lt, _d, 64);\n\t\tcase_rff(le, _d);\n\t\tcase_rfw(le, _d, 64);\n\t\tcase_rff(eq, _d);\n\t\tcase_rfw(eq, _d, 64);\n\t\tcase_rff(ge, _d);\n\t\tcase_rfw(ge, _d, 64);\n\t\tcase_rff(gt, _d);\n\t\tcase_rfw(gt, _d, 64);\n\t\tcase_rff(ne, _d);\n\t\tcase_rfw(ne, _d, 64);\n\t\tcase_rff(unlt, _d);\n\t\tcase_rfw(unlt, _d, 64);\n\t\tcase_rff(unle, _d);\n\t\tcase_rfw(unle, _d, 64);\n\t\tcase_rff(uneq, _d);\n\t\tcase_rfw(uneq, _d, 64);\n\t\tcase_rff(unge, _d);\n\t\tcase_rfw(unge, _d, 64);\n\t\tcase_rff(ungt, _d);\n\t\tcase_rfw(ungt, _d, 64);\n\t\tcase_rff(ltgt, _d);\n\t\tcase_rfw(ltgt, _d, 64);\n\t\tcase_rff(ord, _d);\n\t\tcase_rfw(ord, _d, 64);\n\t\tcase_rff(unord, _d);\n\t\tcase_rfw(unord, _d, 64);\n\t    case jit_code_movr_d:\n\t\tif (jit_x87_reg_p(node->u.w)) {\n\t\t    if (jit_x87_reg_p(node->v.w))\n\t\t\tx87_movr_d(rn(node->u.w), rn(node->v.w));\n\t\t    else\n\t\t\tx87_from_sse_d(rn(node->u.w), rn(node->v.w));\n\t\t}\n\t\telse {\n\t\t    if (jit_sse_reg_p(node->v.w))\n\t\t\tsse_movr_d(rn(node->u.w), rn(node->v.w));\n\t\t    else\n\t\t\tsse_from_x87_d(rn(node->u.w), rn(node->v.w));\n\t\t}\n\t\tbreak;\n\t    case jit_code_movi_d:\n\t\tassert(node->flag & jit_flag_data);\n\t\tif (jit_x87_reg_p(node->u.w))\n\t\t    x87_movi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\telse\n\t\t    sse_movi_d(rn(node->u.w), (jit_float64_t *)node->v.n->u.w);\n\t\tbreak;\n\t\tcase_fr(ld, _d);\n\t\tcase_fw(ld, _d);\n\t\tcase_frr(ldx, _d);\n\t\tcase_frw(ldx, _d);\n\t\tcase_rf(st, _d);\n\t\tcase_wf(st, _d);\n\t\tcase_rrf(stx, _d);\n\t\tcase_wrf(stx, _d);\n\t\tcase_bff(lt, _d);\n\t\tcase_bfw(lt, _d, 64);\n\t\tcase_bff(le, _d);\n\t\tcase_bfw(le, _d, 64);\n\t\tcase_bff(eq, _d);\n\t\tcase_bfw(eq, _d, 64);\n\t\tcase_bff(ge, _d);\n\t\tcase_bfw(ge, _d, 64);\n\t\tcase_bff(gt, _d);\n\t\tcase_bfw(gt, _d, 64);\n\t\tcase_bff(ne, _d);\n\t\tcase_bfw(ne, _d, 64);\n\t\tcase_bff(unlt, _d);\n\t\tcase_bfw(unlt, _d, 64);\n\t\tcase_bff(unle, _d);\n\t\tcase_bfw(unle, _d, 64);\n\t\tcase_bff(uneq, _d);\n\t\tcase_bfw(uneq, _d, 64);\n\t\tcase_bff(unge, _d);\n\t\tcase_bfw(unge, _d, 64);\n\t\tcase_bff(ungt, _d);\n\t\tcase_bfw(ungt, _d, 64);\n\t\tcase_bff(ltgt, _d);\n\t\tcase_bfw(ltgt, _d, 64);\n\t\tcase_bff(ord, _d);\n\t\tcase_bfw(ord, _d, 64);\n\t\tcase_bff(unord, _d);\n\t\tcase_bfw(unord, _d, 64);\n\t    case jit_code_jmpr:\n\t\tjmpr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_jmpi:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    if (temp->flag & jit_flag_patch)\n\t\t\tjmpi(temp->u.w);\n\t\t    else {\n\t\t\tword = jmpi(_jit->pc.w);\n\t\t\tpatch(word, node);\n\t\t    }\n\t\t}\n\t\telse\n\t\t    jmpi(node->u.w);\n\t\tbreak;\n\t    case jit_code_callr:\n\t\tcallr(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_calli:\n\t\tif (node->flag & jit_flag_node) {\n\t\t    temp = node->u.n;\n\t\t    assert(temp->code == jit_code_label ||\n\t\t\t   temp->code == jit_code_epilog);\n\t\t    word = calli(temp->u.w);\n\t\t    if (!(temp->flag & jit_flag_patch))\n\t\t\tpatch(word, node);\n\t\t}\n\t\telse\n\t\t    calli(node->u.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tundo.node = node;\n\t\tundo.word = _jit->pc.w;\n#if DEVEL_DISASSEMBLER\n\t\tundo.prevw = prevw;\n#endif\n\t\tundo.patch_offset = _jitc->patches.offset;\n\t    restart_function:\n\t\t_jitc->again = 0;\n\t\tprolog(node);\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\tassert(_jitc->function == _jitc->functions.ptr + node->w.w);\n\t\tif (_jitc->again) {\n\t\t    for (temp = undo.node->next;\n\t\t\t temp != node; temp = temp->next) {\n\t\t\tif (temp->code == jit_code_label ||\n\t\t\t    temp->code == jit_code_epilog)\n\t\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    }\n\t\t    temp->flag &= ~jit_flag_patch;\n\t\t    node = undo.node;\n\t\t    _jit->pc.w = undo.word;\n#if DEVEL_DISASSEMBLER\n\t\t    prevw = undo.prevw;\n#endif\n\t\t    _jitc->patches.offset = undo.patch_offset;\n\t\t    goto restart_function;\n\t\t}\n\t\tif (node->link &&\n\t\t    (word = _jit->pc.w & (sizeof(jit_word_t) - 1)))\n\t\t    nop(sizeof(jit_word_t) - word);\n\t\t/* remember label is defined */\n\t\tnode->flag |= jit_flag_patch;\n\t\tnode->u.w = _jit->pc.w;\n\t\tepilog(node);\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_va_start:\n\t\tvastart(rn(node->u.w));\n\t\tbreak;\n\t    case jit_code_va_arg:\n\t\tvaarg(rn(node->u.w), rn(node->v.w));\n\t\tbreak;\n\t    case jit_code_va_arg_d:\n\t\tvaarg_d(rn(node->u.w), rn(node->v.w), jit_x87_reg_p(node->u.w));\n\t\tbreak;\n\t    case jit_code_live:\t\t\tcase jit_code_ellipsis:\n\t    case jit_code_allocai:\t\tcase jit_code_allocar:\n\t    case jit_code_arg:\n\t    case jit_code_arg_f:\t\tcase jit_code_arg_d:\n\t    case jit_code_va_end:\n\t    case jit_code_ret:\n\t    case jit_code_retr:\t\t\tcase jit_code_reti:\n\t    case jit_code_retr_f:\t\tcase jit_code_reti_f:\n\t    case jit_code_retr_d:\t\tcase jit_code_reti_d:\n\t    case jit_code_getarg_c:\t\tcase jit_code_getarg_uc:\n\t    case jit_code_getarg_s:\t\tcase jit_code_getarg_us:\n\t    case jit_code_getarg_i:\n#if __X64 && !__X64_32\n\t    case jit_code_getarg_ui:\t\tcase jit_code_getarg_l:\n#endif\n\t    case jit_code_getarg_f:\t\tcase jit_code_getarg_d:\n\t    case jit_code_putargr:\t\tcase jit_code_putargi:\n\t    case jit_code_putargr_f:\t\tcase jit_code_putargi_f:\n\t    case jit_code_putargr_d:\t\tcase jit_code_putargi_d:\n\t    case jit_code_pushargr:\t\tcase jit_code_pushargi:\n\t    case jit_code_pushargr_f:\t\tcase jit_code_pushargi_f:\n\t    case jit_code_pushargr_d:\t\tcase jit_code_pushargi_d:\n\t    case jit_code_retval_c:\t\tcase jit_code_retval_uc:\n\t    case jit_code_retval_s:\t\tcase jit_code_retval_us:\n\t    case jit_code_retval_i:\n#if __X64 && !__X32\n\t    case jit_code_retval_ui:\t\tcase jit_code_retval_l:\n#endif\n\t    case jit_code_prepare:\n\t    case jit_code_finishr:\t\tcase jit_code_finishi:\n\t\tbreak;\n\t    case jit_code_retval_f:\n#if __X32\n\t\tif (jit_sse_reg_p(node->u.w)) {\n\t\t    fstpr(_ST1_REGNO);\n\t\t    sse_from_x87_f(rn(node->u.w), _ST0_REGNO);\n\t\t}\n\t\telse\n\t\t    fstpr(rn(node->u.w) + 1);\n#endif\n\t\tbreak;\n\t    case jit_code_retval_d:\n#if __X32\n\t\tif (jit_sse_reg_p(node->u.w)) {\n\t\t    fstpr(_ST1_REGNO);\n\t\t    sse_from_x87_d(rn(node->u.w), _ST0_REGNO);\n\t\t}\n\t\telse\n\t\t    fstpr(rn(node->u.w) + 1);\n#endif\n\t\tbreak;\n\t    default:\n\t\tabort();\n\t}\n\tjit_regarg_clr(node, value);\n\tassert(_jitc->regarg == 0 && _jitc->synth == 0);\n\t/* update register live state */\n\tjit_reglive(node);\n    }\n#undef case_bfw\n#undef case_bff\n#undef case_ffw\n#undef case_rfw\n#undef case_rff\n#undef case_brw\n#undef case_brr\n#undef case_wrf\n#undef case_wrr\n#undef case_frw\n#undef case_rrf\n#undef case_rrw\n#undef case_frr\n#undef case_rrr\n#undef case_wf\n#undef case_fw\n#undef case_fr\n#undef case_rr\n\n    for (offset = 0; offset < _jitc->patches.offset; offset++) {\n\tnode = _jitc->patches.ptr[offset].node;\n\tword = node->code == jit_code_movi ? node->v.n->u.w : node->u.n->u.w;\n\tpatch_at(node, _jitc->patches.ptr[offset].inst, word);\n    }\n\n    jit_flush(_jit->code.ptr, _jit->pc.uc);\n\n    return (_jit->code.ptr);\n}",
      "lines": 848,
      "depth": 20,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "jit_flush": {
      "start_point": [
        2172,
        0
      ],
      "end_point": [
        2175,
        1
      ],
      "content": "void\njit_flush(void *fptr, void *tptr)\n{\n}",
      "lines": 4,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi": {
      "start_point": [
        2177,
        0
      ],
      "end_point": [
        2181,
        1
      ],
      "content": "void\n_emit_ldxi(jit_state_t *_jit, jit_gpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    ldxi(rn(r0), rn(r1), i0);\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi": {
      "start_point": [
        2183,
        0
      ],
      "end_point": [
        2187,
        1
      ],
      "content": "void\n_emit_stxi(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_gpr_t r1)\n{\n    stxi(i0, rn(r0), rn(r1));\n}",
      "lines": 5,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_emit_ldxi_d": {
      "start_point": [
        2189,
        0
      ],
      "end_point": [
        2196,
        1
      ],
      "content": "void\n_emit_ldxi_d(jit_state_t *_jit, jit_fpr_t r0, jit_gpr_t r1, jit_word_t i0)\n{\n    if (jit_x87_reg_p(r0))\n\tx87_ldxi_d(rn(r0), rn(r1), i0);\n    else\n\tsse_ldxi_d(rn(r0), rn(r1), i0);\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_emit_stxi_d": {
      "start_point": [
        2198,
        0
      ],
      "end_point": [
        2205,
        1
      ],
      "content": "void\n_emit_stxi_d(jit_state_t *_jit, jit_word_t i0, jit_gpr_t r0, jit_fpr_t r1)\n{\n    if (jit_x87_reg_p(r1))\n\tx87_stxi_d(i0, rn(r0), rn(r1));\n    else\n\tsse_stxi_d(i0, rn(r0), rn(r1));\n}",
      "lines": 8,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_patch": {
      "start_point": [
        2207,
        0
      ],
      "end_point": [
        2227,
        1
      ],
      "content": "static void\n_patch(jit_state_t *_jit, jit_word_t instr, jit_node_t *node)\n{\n    jit_int32_t\t\tflag;\n\n    assert(node->flag & jit_flag_node);\n    if (node->code == jit_code_movi)\n\tflag = node->v.n->flag;\n    else\n\tflag = node->u.n->flag;\n    assert(!(flag & jit_flag_patch));\n    if (_jitc->patches.offset >= _jitc->patches.length) {\n\tjit_realloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t\t    _jitc->patches.length * sizeof(jit_patch_t),\n\t\t    (_jitc->patches.length + 1024) * sizeof(jit_patch_t));\n\t_jitc->patches.length += 1024;\n    }\n    _jitc->patches.ptr[_jitc->patches.offset].inst = instr;\n    _jitc->patches.ptr[_jitc->patches.offset].node = node;\n    ++_jitc->patches.offset;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_from_x87_f": {
      "start_point": [
        2229,
        0
      ],
      "end_point": [
        2234,
        1
      ],
      "content": "static void\n_sse_from_x87_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    x87_stxi_f(CVT_OFFSET, _RBP_REGNO, r1);\n    sse_ldxi_f(r0, _RBP_REGNO, CVT_OFFSET);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sse_from_x87_d": {
      "start_point": [
        2236,
        0
      ],
      "end_point": [
        2241,
        1
      ],
      "content": "static void\n_sse_from_x87_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    x87_stxi_d(CVT_OFFSET, _RBP_REGNO, r1);\n    sse_ldxi_d(r0, _RBP_REGNO, CVT_OFFSET);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_from_sse_f": {
      "start_point": [
        2243,
        0
      ],
      "end_point": [
        2248,
        1
      ],
      "content": "static void\n_x87_from_sse_f(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    sse_stxi_f(CVT_OFFSET, _RBP_REGNO, r1);\n    x87_ldxi_f(r0, _RBP_REGNO, CVT_OFFSET);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_x87_from_sse_d": {
      "start_point": [
        2250,
        0
      ],
      "end_point": [
        2255,
        1
      ],
      "content": "static void\n_x87_from_sse_d(jit_state_t *_jit, jit_int32_t r0, jit_int32_t r1)\n{\n    sse_stxi_d(CVT_OFFSET, _RBP_REGNO, r1);\n    x87_ldxi_d(r0, _RBP_REGNO, CVT_OFFSET);\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "lightning/lightning-2.1.2/lib/lightning.c": {
    "init_jit": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        188,
        1
      ],
      "content": "void\ninit_jit(const char *progname)\n{\n    jit_get_cpu();\n    jit_init_debug(progname);\n    jit_init_size();\n}",
      "lines": 7,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "finish_jit": {
      "start_point": [
        190,
        0
      ],
      "end_point": [
        195,
        1
      ],
      "content": "void\nfinish_jit(void)\n{\n    jit_finish_debug();\n    jit_finish_size();\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_reg": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        309,
        1
      ],
      "content": "jit_int32_t\n_jit_get_reg(jit_state_t *_jit, jit_int32_t regspec)\n{\n    jit_int32_t\t\tspec;\n    jit_int32_t\t\tregno;\n\n    spec = regspec & ~(jit_class_chk|jit_class_nospill);\n    if (spec & jit_class_named) {\n\tregno = jit_regno(spec);\n\tif (jit_regset_tstbit(&_jitc->regsav, regno))\n\t    /* fail if register is spilled */\n\t    goto fail;\n\tif (jit_regset_tstbit(&_jitc->regarg, regno))\n\t    /* fail if register is an argument to current instruction */\n\t    goto fail;\n\tif (jit_regset_tstbit(&_jitc->reglive, regno)) {\n\t    if (regspec & jit_class_nospill)\n\t\t/* fail if register is live and should not spill/reload */\n\t\tgoto fail;\n\t    goto spill;\n\t}\n\tjit_regset_setbit(&_jitc->regarg, regno);\n\treturn (regno);\n    }\n    else\n\tassert(jit_class(spec) != 0);\n\n    if (_jitc->emit) {\n\t/* search for a free register matching spec */\n\tfor (regno = 0; regno < _jitc->reglen; regno++) {\n\t    if ((jit_class(_rvs[regno].spec) & spec) == spec &&\n\t\t!jit_regset_tstbit(&_jitc->regarg, regno) &&\n\t\t!jit_regset_tstbit(&_jitc->reglive, regno))\n\t\tgoto regarg;\n\t}\n\n\t/* search for a register matching spec that is not an argument\n\t * for the current instruction */\n\tfor (regno = 0; regno < _jitc->reglen; regno++) {\n\t    if ((jit_class(_rvs[regno].spec) & spec) == spec &&\n\t\t!jit_regset_tstbit(&_jitc->regsav, regno) &&\n\t\t!jit_regset_tstbit(&_jitc->regarg, regno) &&\n\t\t!(regspec & jit_class_nospill)) {\n\t    spill:\n\t\tassert(_jitc->function != NULL);\n\t\tif (spec & jit_class_gpr) {\n\t\t    if (!_jitc->function->regoff[regno]) {\n\t\t\t_jitc->function->regoff[regno] =\n\t\t\t    jit_allocai(sizeof(jit_word_t));\n\t\t\t_jitc->again = 1;\n\t\t    }\n#if DEBUG\n\t\t    /* emit_stxi must not need temporary registers */\n\t\t    assert(!_jitc->getreg);\n\t\t    _jitc->getreg = 1;\n#endif\n\t\t    emit_stxi(_jitc->function->regoff[regno], JIT_FP, regno);\n#if DEBUG\n\t\t    _jitc->getreg = 0;\n#endif\n\t\t}\n\t\telse {\n\t\t    if (!_jitc->function->regoff[regno]) {\n\t\t\t_jitc->function->regoff[regno] =\n\t\t\t    jit_allocai(sizeof(jit_float64_t));\n\t\t\t_jitc->again = 1;\n\t\t    }\n#if DEBUG\n\t\t    /* emit_stxi must not need temporary registers */\n\t\t    assert(!_jitc->getreg);\n\t\t    _jitc->getreg = 1;\n#endif\n\t\t    emit_stxi_d(_jitc->function->regoff[regno], JIT_FP, regno);\n#if DEBUG\n\t\t    _jitc->getreg = 0;\n#endif\n\t\t}\n\t\tjit_regset_setbit(&_jitc->regsav, regno);\n\t    regarg:\n\t\tjit_regset_setbit(&_jitc->regarg, regno);\n\t\tif (jit_class(_rvs[regno].spec) & jit_class_sav) {\n\t\t    /* if will modify callee save registers without a\n\t\t     * function prolog, better patch this assertion */\n\t\t    assert(_jitc->function != NULL);\n\t\t    if (!jit_regset_tstbit(&_jitc->function->regset, regno)) {\n\t\t\tjit_regset_setbit(&_jitc->function->regset, regno);\n\t\t\t_jitc->again = 1;\n\t\t    }\n\t\t}\n\t\treturn (regno);\n\t    }\n\t}\n    }\n    else {\n\t/* nospill hint only valid during emit\" */\n\tassert(!(regspec & jit_class_nospill));\n\tfor (regno = 0; regno < _jitc->reglen; regno++) {\n\t    if ((jit_class(_rvs[regno].spec) & spec) == spec &&\n\t\t!jit_regset_tstbit(&_jitc->regsav, regno) &&\n\t\t!jit_regset_tstbit(&_jitc->regarg, regno)) {\n\t\tjit_regset_setbit(&_jitc->regarg, regno);\n\t\tjit_regset_setbit(&_jitc->regsav, regno);\n\t\tjit_save(regno);\n\t\treturn (jit_regno_patch|regno);\n\t    }\n\t}\n    }\n\n    /* Out of hardware registers */\nfail:\n    assert(regspec & jit_class_chk);\n    return (JIT_NOREG);\n}",
      "lines": 113,
      "depth": 19,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_unget_reg": {
      "start_point": [
        311,
        0
      ],
      "end_point": [
        337,
        1
      ],
      "content": "void\n_jit_unget_reg(jit_state_t *_jit, jit_int32_t regno)\n{\n    regno = jit_regno(regno);\n    if (jit_regset_tstbit(&_jitc->regsav, regno)) {\n\tif (_jitc->emit) {\n#if DEBUG\n\t    /* emit_ldxi must not need a temporary register */\n\t    assert(!_jitc->getreg);\n\t    _jitc->getreg = 1;\n#endif\n\t    if (jit_class(_rvs[regno].spec) & jit_class_gpr)\n\t\temit_ldxi(regno, JIT_FP, _jitc->function->regoff[regno]);\n\t    else\n\t\temit_ldxi_d(regno, JIT_FP, _jitc->function->regoff[regno]);\n#if DEBUG\n\t    /* emit_ldxi must not need a temporary register */\n\t    _jitc->getreg = 0;\n#endif\n\t}\n\telse\n\t    jit_load(regno);\n\tjit_regset_clrbit(&_jitc->regsav, regno);\n    }\n    assert(jit_regset_tstbit(&_jitc->regarg, regno) != 0);\n    jit_regset_clrbit(&_jitc->regarg, regno);\n}",
      "lines": 27,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_callee_save_p": {
      "start_point": [
        339,
        0
      ],
      "end_point": [
        344,
        1
      ],
      "content": "jit_bool_t\n_jit_callee_save_p(jit_state_t *_jit, jit_int32_t regno)\n{\n    assert(regno >= 0 && regno < JIT_NOREG);\n    return (!!(_rvs[regno].spec & jit_class_sav));\n}",
      "lines": 6,
      "depth": 11,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_pointer_p": {
      "start_point": [
        346,
        0
      ],
      "end_point": [
        351,
        1
      ],
      "content": "extern jit_bool_t\n_jit_pointer_p(jit_state_t *_jit, jit_pointer_t address)\n{\n    return ((jit_uint8_t *)address >= _jit->code.ptr &&\n\t    (jit_word_t)address < _jit->pc.w);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "extern",
        "extern",
        "jit_bool_t"
      ]
    },
    "jit_regset_com": {
      "start_point": [
        354,
        0
      ],
      "end_point": [
        359,
        1
      ],
      "content": "void\njit_regset_com(jit_regset_t *u, jit_regset_t *v)\n{\n    u->rl = ~v->rl;\t\tu->rh = ~v->rh;\n    u->fl = ~v->fl;\t\tu->fh = ~v->fh;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_and": {
      "start_point": [
        361,
        0
      ],
      "end_point": [
        366,
        1
      ],
      "content": "void\njit_regset_and(jit_regset_t *u, jit_regset_t *v, jit_regset_t *w)\n{\n    u->rl = v->rl & w->rl;\tu->rh = v->rh & w->rh;\n    u->fl = v->fl & w->fl;\tu->fh = v->fh & w->fh;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_ior": {
      "start_point": [
        368,
        0
      ],
      "end_point": [
        373,
        1
      ],
      "content": "void\njit_regset_ior(jit_regset_t *u, jit_regset_t *v, jit_regset_t *w)\n{\n    u->rl = v->rl | w->rl;\tu->rh = v->rh | w->rh;\n    u->fl = v->fl | w->fl;\tu->fh = v->fh | w->fh;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_xor": {
      "start_point": [
        375,
        0
      ],
      "end_point": [
        380,
        1
      ],
      "content": "void\njit_regset_xor(jit_regset_t *u, jit_regset_t *v, jit_regset_t *w)\n{\n    u->rl = v->rl ^ w->rl;\tu->rh = v->rh ^ w->rh;\n    u->fl = v->fl ^ w->fl;\tu->fh = v->fh ^ w->fh;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_set": {
      "start_point": [
        382,
        0
      ],
      "end_point": [
        387,
        1
      ],
      "content": "void\njit_regset_set(jit_regset_t *u, jit_regset_t *v)\n{\n    u->rl = v->rl;\t\tu->rh = v->rh;\n    u->fl = v->fl;\t\tu->fh = v->fh;\n}",
      "lines": 6,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_set_mask": {
      "start_point": [
        389,
        0
      ],
      "end_point": [
        415,
        1
      ],
      "content": "void\njit_regset_set_mask(jit_regset_t *u, jit_int32_t v)\n{\n    jit_bool_t\t\tw = !!(v & (v - 1));\n\n    assert(v >= 0 && v <= 256);\n    if (v == 0)\n\tu->rl = u->rh = u->fl = u->fh = -1LL;\n    else if (v <= 64) {\n\tu->rl = w ? (1LL << v) - 1 : -1LL;\n\tu->rh = u->fl = u->fh = 0;\n    }\n    else if (v <= 128) {\n\tu->rl = -1LL;\n\tu->rh = w ? (1LL << (v - 64)) - 1 : -1LL;\n\tu->fl = u->fh = 0;\n    }\n    else if (v <= 192) {\n\tu->rl = u->rh = -1LL;\n\tu->fl = w ? (1LL << (v - 128)) - 1 : -1LL;\n\tu->fh = 0;\n    }\n    else {\n\tu->rl = u->rh = u->fl = -1LL;\n\tu->fh = w ? (1LL << (v - 128)) - 1 : -1LL;\n    }\n}",
      "lines": 27,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_cmp_ui": {
      "start_point": [
        417,
        0
      ],
      "end_point": [
        421,
        1
      ],
      "content": "jit_bool_t\njit_regset_cmp_ui(jit_regset_t *u, jit_word_t v)\n{\n    return !((u->rl == v && u->rh == 0 && u->fl == 0 && u->fh == 0));\n}",
      "lines": 5,
      "depth": 12,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "jit_regset_set_ui": {
      "start_point": [
        423,
        0
      ],
      "end_point": [
        428,
        1
      ],
      "content": "void\njit_regset_set_ui(jit_regset_t *u, jit_word_t v)\n{\n    u->rl = v;\n    u->rh = u->fl = u->fh = 0;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_set_p": {
      "start_point": [
        430,
        0
      ],
      "end_point": [
        434,
        1
      ],
      "content": "jit_bool_t\njit_regset_set_p(jit_regset_t *u)\n{\n    return (u->rl || u->rh || u->fl || u->fh);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "jit_regset_clrbit": {
      "start_point": [
        436,
        0
      ],
      "end_point": [
        448,
        1
      ],
      "content": "void\njit_regset_clrbit(jit_regset_t *set, jit_int32_t bit)\n{\n    assert(bit >= 0 && bit <= 255);\n    if (bit < 64)\n\tset->rl &= ~(1LL << bit);\n    else if (bit < 128)\n\tset->rh &= ~(1LL << (bit - 64));\n    else if (bit < 192)\n\tset->fl &= ~(1LL << (bit - 128));\n    else\n\tset->fh &= ~(1LL << (bit - 192));\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_setbit": {
      "start_point": [
        450,
        0
      ],
      "end_point": [
        462,
        1
      ],
      "content": "void\njit_regset_setbit(jit_regset_t *set, jit_int32_t bit)\n{\n    assert(bit >= 0 && bit <= 255);\n    if (bit < 64)\n\tset->rl |= 1LL << bit;\n    else if (bit < 128)\n\tset->rh |= 1LL << (bit - 64);\n    else if (bit < 192)\n\tset->fl |= 1LL << (bit - 128);\n    else\n\tset->fh |= 1LL << (bit - 192);\n}",
      "lines": 13,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "jit_regset_tstbit": {
      "start_point": [
        464,
        0
      ],
      "end_point": [
        475,
        1
      ],
      "content": "jit_bool_t\njit_regset_tstbit(jit_regset_t *set, jit_int32_t bit)\n{\n    assert(bit >= 0 && bit <= 255);\n    if (bit < 64)\n\treturn (!!(set->rl & (1LL << bit)));\n    else if (bit < 128)\n\treturn (!!(set->rh & (1LL << (bit - 64))));\n    else if (bit < 192)\n\treturn (!!(set->fl & (1LL << (bit - 128))));\n    return (!!(set->fh & (1LL << (bit - 192))));\n}",
      "lines": 12,
      "depth": 16,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "jit_regset_scan1": [
      {
        "start_point": [
          477,
          0
        ],
        "end_point": [
          498,
          1
        ],
        "content": "unsigned long\njit_regset_scan1(jit_regset_t *set, jit_int32_t offset)\n{\n    assert(offset >= 0 && offset <= 255);\n    for (; offset < 64; offset++) {\n\tif (set->rl & (1LL << offset))\n\t    return (offset);\n    }\n    for (; offset < 128; offset++) {\n\tif (set->rh & (1LL << (offset - 64)))\n\t    return (offset);\n    }\n    for (; offset < 192; offset++) {\n\tif (set->fl & (1LL << (offset - 128)))\n\t    return (offset);\n    }\n    for (; offset < 256; offset++) {\n\tif (set->fh & (1LL << (offset - 192)))\n\t    return (offset);\n    }\n    return (ULONG_MAX);\n}",
        "lines": 22,
        "depth": 12,
        "decorators": [
          "unsigned long",
          "unsigned",
          "long"
        ]
      },
      {
        "start_point": [
          500,
          0
        ],
        "end_point": [
          514,
          1
        ],
        "content": "unsigned long\njit_regset_scan1(jit_regset_t *set, jit_int32_t offset)\n{\n    jit_regset_t       mask;\n    assert(offset >= 0 && offset <= 63);\n    if ((mask = *set >> offset)) {\n\tfor (;;) {\n\t    if (mask & 1)\n\t\treturn (offset);\n\t    mask >>= 1;\n\t    ++offset;\n\t}\n    }\n    return (ULONG_MAX);\n}",
        "lines": 15,
        "depth": 10,
        "decorators": [
          "unsigned long",
          "unsigned",
          "long"
        ]
      }
    ],
    "_jit_save": {
      "start_point": [
        517,
        0
      ],
      "end_point": [
        523,
        1
      ],
      "content": "void\n_jit_save(jit_state_t *_jit, jit_int32_t reg)\n{\n    reg = jit_regno(reg);\n    assert(!_jitc->realize);\n    _jitc->spill[reg] = jit_new_node_w(jit_code_save, reg);\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_load": {
      "start_point": [
        525,
        0
      ],
      "end_point": [
        538,
        1
      ],
      "content": "void\n_jit_load(jit_state_t *_jit, jit_int32_t reg)\n{\n    jit_node_t\t\t*node;\n\n    reg = jit_regno(reg);\n    assert(!_jitc->realize);\n    assert(_jitc->spill[reg] != NULL);\n    node = jit_new_node_w(jit_code_load, reg);\n    /* create a path to flag the save/load is not required */\n    node->link = _jitc->spill[reg];\n    node->link->link = node;\n    _jitc->spill[reg] = NULL;\n}",
      "lines": 14,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "hash_data": {
      "start_point": [
        540,
        0
      ],
      "end_point": [
        548,
        1
      ],
      "content": "static jit_word_t\nhash_data(const void *data, jit_word_t length)\n{\n    const jit_uint8_t\t\t*ptr;\n    jit_word_t\t\t i, key;\n    for (i = key = 0, ptr = data; i < length; i++)\n\tkey = (key << (key & 1)) ^ ptr[i];\n    return (key);\n}",
      "lines": 9,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "jit_word_t"
      ]
    },
    "_jit_address": {
      "start_point": [
        550,
        0
      ],
      "end_point": [
        560,
        1
      ],
      "content": "jit_pointer_t\n_jit_address(jit_state_t *_jit, jit_node_t *node)\n{\n    assert(_jitc->done);\n    assert(node != NULL &&\n\t   /* If a node type that is documented to be a fixed marker */\n\t   (node->code == jit_code_note || node->code == jit_code_name ||\n\t    /* If another special fixed marker, returned by jit_indirect() */\n\t    (node->code == jit_code_label && (node->flag & jit_flag_use) != 0)));\n    return ((jit_pointer_t)node->u.w);\n}",
      "lines": 11,
      "depth": 15,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "_jit_data": {
      "start_point": [
        562,
        0
      ],
      "end_point": [
        650,
        1
      ],
      "content": "jit_node_t *\n_jit_data(jit_state_t *_jit, const void *data,\n\t  jit_word_t length, jit_int32_t align)\n{\n    jit_word_t\t\t key;\n    jit_node_t\t\t*node;\n\n    assert(!_jitc->realize);\n\n    /* Ensure there is space even if asking for a duplicate */\n    if (((_jitc->data.offset + 7) & -8) + length > _jit->data.length) {\n\tjit_word_t\t size;\n\n\tsize = (_jit->data.length + length + 4096) & - 4095;\n\tassert(size >= _jit->data.length);\n\tif (_jitc->data.ptr == NULL)\n\t    jit_alloc((jit_pointer_t *)&_jitc->data.ptr, size);\n\telse\n\t    jit_realloc((jit_pointer_t *)&_jitc->data.ptr,\n\t\t\t_jit->data.length, size);\n\t_jit->data.length = size;\n    }\n    if (_jitc->data.table == NULL)\n\tjit_alloc((jit_pointer_t *)&_jitc->data.table,\n\t\t  (_jitc->data.size = 16) * sizeof(jit_node_t*));\n\n    key = hash_data(data, length) & (_jitc->data.size - 1);\n    node = _jitc->data.table[key];\n    for (; node; node = node->next) {\n\tif (node->v.w == length &&\n\t    memcmp(_jitc->data.ptr + node->u.w, data, length) == 0)\n\t    break;\n    }\n\n    if (!node) {\n\tnode = jit_new_node_no_link(jit_code_data);\n\tif (!align)\n\t    align = length;\n\tswitch (align) {\n\t    case 0:\tcase 1:\n\t\tbreak;\n\t    case 2:\n\t\t_jitc->data.offset = (_jitc->data.offset + 1) & -2;\n\t\tbreak;\n\t    case 3:\tcase 4:\n\t\t_jitc->data.offset = (_jitc->data.offset + 3) & -4;\n\t\tbreak;\n\t    default:\n\t\t_jitc->data.offset = (_jitc->data.offset + 7) & -8;\n\t\tbreak;\n\t}\n\tnode->u.w = _jitc->data.offset;\n\tnode->v.w = length;\n\tjit_memcpy(_jitc->data.ptr + _jitc->data.offset, data, length);\n\t_jitc->data.offset += length;\n\n\tnode->next = _jitc->data.table[key];\n\t_jitc->data.table[key] = node;\n\t++_jitc->data.count;\n\n\t/* Rehash if more than 75% used table */\n\tif (_jitc->data.count >\n\t    (_jitc->data.size >> 1) + (_jitc->data.size >> 2) &&\n\t    (_jitc->data.size << 1) > _jitc->data.size) {\n\t    jit_word_t\t  i;\n\t    jit_node_t\t**hash;\n\t    jit_node_t\t *next;\n\t    jit_node_t\t *temp;\n\n\t    jit_alloc((jit_pointer_t *)&hash,\n\t\t      (_jitc->data.size << 1) * sizeof(jit_node_t*));\n\t    for (i = 0; i < _jitc->data.size; i++) {\n\t\ttemp = _jitc->data.table[i];\n\t\tfor (; temp; temp = next) {\n\t\t    next = temp->next;\n\t\t    key = hash_data(_jitc->data.ptr + temp->u.w, temp->v.w) &\n\t\t\t  ((_jitc->data.size << 1) - 1);\n\t\t    temp->next = hash[key];\n\t\t    hash[key] = temp;\n\t\t}\n\t    }\n\t    jit_free((jit_pointer_t *)&_jitc->data.table);\n\t    _jitc->data.table = hash;\n\t    _jitc->data.size <<= 1;\n\t}\n    }\n\n    return (node);\n}",
      "lines": 89,
      "depth": 20,
      "decorators": [
        "jit_node_t",
        "*\n_jit_data(jit_state_t *_jit, const void *data,\n\t  jit_word_t length, jit_int32_t align)",
        "*"
      ]
    },
    "_new_pool": {
      "start_point": [
        652,
        0
      ],
      "end_point": [
        675,
        1
      ],
      "content": "static void\n_new_pool(jit_state_t *_jit)\n{\n    jit_node_t\t\t*list;\n    jit_int32_t\t\t offset;\n\n    if (_jitc->pool.offset >= _jitc->pool.length) {\n\tjit_int32_t\t length;\n\n\tlength = _jitc->pool.length + 16;\n\tjit_realloc((jit_pointer_t *)&_jitc->pool.ptr,\n\t\t    _jitc->pool.length * sizeof(jit_node_t *),\n\t\t    length * sizeof(jit_node_t *));\n\t_jitc->pool.length = length;\n    }\n    jit_alloc((jit_pointer_t *)(_jitc->pool.ptr + _jitc->pool.offset),\n\t      sizeof(jit_node_t) * 1024);\n    list = _jitc->pool.ptr[_jitc->pool.offset];\n    for (offset = 1; offset < 1024; offset++, list++)\n\tlist->next = list + 1;\n    list->next = _jitc->list;\n    _jitc->list = _jitc->pool.ptr[_jitc->pool.offset];\n    ++_jitc->pool.offset;\n}",
      "lines": 24,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_new_node": {
      "start_point": [
        677,
        0
      ],
      "end_point": [
        692,
        1
      ],
      "content": "static jit_node_t *\n_new_node(jit_state_t *_jit, jit_code_t code)\n{\n    jit_node_t\t\t*node;\n\n    if (_jitc->list == NULL)\n\tnew_pool();\n    node = _jitc->list;\n    _jitc->list = node->next;\n    if (_jitc->synth)\n\tnode->flag |= jit_flag_synth;\n    node->next = NULL;\n    node->code = code;\n\n    return (node);\n}",
      "lines": 16,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "jit_node_t",
        "*\n_new_node(jit_state_t *_jit, jit_code_t code)",
        "*"
      ]
    },
    "_link_node": {
      "start_point": [
        694,
        0
      ],
      "end_point": [
        702,
        1
      ],
      "content": "static inline jit_node_t *\n_link_node(jit_state_t *_jit, jit_node_t *node)\n{\n    if (_jitc->tail)\n\t_jitc->tail->next = node;\n    else\n\t_jitc->head = node;\n    return (_jitc->tail = node);\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "jit_node_t",
        "*\n_link_node(jit_state_t *_jit, jit_node_t *node)",
        "*"
      ]
    },
    "_del_node": {
      "start_point": [
        704,
        0
      ],
      "end_point": [
        716,
        1
      ],
      "content": "static inline void\n_del_node(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    if (prev == node) {\n\tassert(prev == _jitc->head);\n\t_jitc->head = node->next;\n    }\n    else\n\tprev->next = node->next;\n    memset(node, 0, sizeof(jit_node_t));\n    node->next = _jitc->list;\n    _jitc->list = node;\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "void"
      ]
    },
    "_free_node": {
      "start_point": [
        718,
        0
      ],
      "end_point": [
        724,
        1
      ],
      "content": "static inline void\n_free_node(jit_state_t *_jit, jit_node_t *node)\n{\n    memset(node, 0, sizeof(jit_node_t));\n    node->next = _jitc->list;\n    _jitc->list = node;\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "inline",
        "inline",
        "void"
      ]
    },
    "_del_label": {
      "start_point": [
        726,
        0
      ],
      "end_point": [
        744,
        1
      ],
      "content": "static void\n_del_label(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_block_t\t\t*block;\n\n    /* only allow call to del_label on linked labels */\n    block = _jitc->blocks.ptr + node->v.w;\n    assert(block->label == node);\n\n    /* del_label() should only be called when optimizing.\n     * This will leave an empty block index */\n    jit_regset_del(&block->reglive);\n    jit_regset_del(&block->regmask);\n    block->label = NULL;\n\n    /* redundant, should be already true */\n    assert(node->link == NULL);\n    del_node(prev, node);\n}",
      "lines": 19,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmp_init": {
      "start_point": [
        746,
        0
      ],
      "end_point": [
        752,
        1
      ],
      "content": "static void\n_bmp_init(jit_state_t *_jit)\n{\n    _jitc->blockmask.length = 16;\n    jit_alloc((jit_pointer_t *)&_jitc->blockmask.ptr,\n\t      sizeof(jit_word_t) * _jitc->blockmask.length);\n}",
      "lines": 7,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmp_clear": {
      "start_point": [
        754,
        0
      ],
      "end_point": [
        759,
        1
      ],
      "content": "static void\n_bmp_clear(jit_state_t *_jit)\n{\n    _jitc->blockmask.length = 0;\n    jit_free((jit_pointer_t *)&_jitc->blockmask.ptr);\n}",
      "lines": 6,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmp_set": {
      "start_point": [
        761,
        0
      ],
      "end_point": [
        776,
        1
      ],
      "content": "static void\n_bmp_set(jit_state_t *_jit, jit_word_t bit)\n{\n    jit_word_t\t\twoff, boff;\n\n    woff = bit >> bmp_shift;\n    boff = 1LL << (bit & (__WORDSIZE - 1));\n    if (woff >= _jitc->blockmask.length) {\n\tjit_word_t\tlength = (woff + 16) & -16;\n\tjit_realloc((jit_pointer_t *)&_jitc->blockmask.ptr,\n\t\t    _jitc->blockmask.length * sizeof(jit_word_t),\n\t\t    length * sizeof(jit_word_t));\n\t_jitc->blockmask.length = length;\n    }\n    _jitc->blockmask.ptr[woff] |= boff;\n}",
      "lines": 16,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmp_clr": {
      "start_point": [
        778,
        0
      ],
      "end_point": [
        787,
        1
      ],
      "content": "static void\n_bmp_clr(jit_state_t *_jit, jit_word_t bit)\n{\n    jit_word_t\t\twoff, boff;\n\n    woff = bit >> bmp_shift;\n    boff = 1LL << (bit & (__WORDSIZE - 1));\n    if (woff < _jitc->blockmask.length)\n\t_jitc->blockmask.ptr[woff] &= ~boff;\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_bmp_tst": {
      "start_point": [
        789,
        0
      ],
      "end_point": [
        799,
        1
      ],
      "content": "static jit_bool_t\n_bmp_tst(jit_state_t *_jit, jit_word_t bit)\n{\n    jit_word_t\t\twoff, boff;\n\n    woff = bit >> bmp_shift;\n    boff = 1LL << (bit & (__WORDSIZE - 1));\n    if (woff < _jitc->blockmask.length)\n\treturn ((_jitc->blockmask.ptr[woff] & boff) != 0);\n    return (0);\n}",
      "lines": 11,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "jit_new_state": {
      "start_point": [
        801,
        0
      ],
      "end_point": [
        842,
        1
      ],
      "content": "jit_state_t *\njit_new_state(void)\n{\n    jit_state_t\t\t*_jit;\n\n    jit_alloc((jit_pointer_t *)&_jit, sizeof(jit_state_t));\n    jit_alloc((jit_pointer_t *)&_jitc, sizeof(jit_compiler_t));\n    jit_regset_new(&_jitc->regarg);\n    jit_regset_new(&_jitc->regsav);\n    jit_regset_new(&_jitc->reglive);\n    jit_regset_new(&_jitc->regmask);\n    bmp_init();\n\n    jit_init();\n\n    jit_alloc((jit_pointer_t *)&_jitc->spill,\n\t      _jitc->reglen * sizeof(jit_node_t*));\n    jit_alloc((jit_pointer_t *)&_jitc->gen,\n\t      _jitc->reglen * sizeof(jit_int32_t));\n    jit_alloc((jit_pointer_t *)&_jitc->values,\n\t      _jitc->reglen * sizeof(jit_value_t));\n\n    jit_alloc((jit_pointer_t *)&_jitc->patches.ptr,\n\t      (_jitc->patches.length = 1024) * sizeof(jit_patch_t));\n    jit_alloc((jit_pointer_t *)&_jitc->functions.ptr,\n\t      (_jitc->functions.length = 16) * sizeof(jit_function_t));\n    jit_alloc((jit_pointer_t *)&_jitc->pool.ptr,\n\t      (_jitc->pool.length = 16) * sizeof(jit_node_t*));\n    jit_alloc((jit_pointer_t *)&_jitc->blocks.ptr,\n\t      (_jitc->blocks.length = 16) * sizeof(jit_block_t));\n#if __arm__ && DISASSEMBLER\n    jit_alloc((jit_pointer_t *)&_jitc->data_info.ptr,\n\t      (_jitc->data_info.length = 1024) * sizeof(jit_data_info_t));\n#endif\n\n    /* allocate at most one extra note in case jit_name() is\n     * never called, or called after adding at least one note */\n    _jit->note.length = 1;\n    _jitc->note.size = sizeof(jit_note_t);\n\n    return (_jit);\n}",
      "lines": 42,
      "depth": 12,
      "decorators": [
        "jit_state_t",
        "*\njit_new_state(void)",
        "*"
      ]
    },
    "_jit_really_clear_state": {
      "start_point": [
        851,
        0
      ],
      "end_point": [
        906,
        1
      ],
      "content": "void _jit_really_clear_state(jit_state_t *_jit)\n{\n#endif\n    jit_word_t\t\t offset;\n    jit_function_t\t*function;\n\n    /* release memory not required at jit execution time and set\n     * pointers to NULL to explicitly know they are released */\n    _jitc->head = _jitc->tail = NULL;\n\n    bmp_clear();\n\n    jit_free((jit_pointer_t *)&_jitc->data.table);\n    _jitc->data.size = _jitc->data.count = 0;\n\n    jit_free((jit_pointer_t *)&_jitc->spill);\n    jit_free((jit_pointer_t *)&_jitc->gen);\n    jit_free((jit_pointer_t *)&_jitc->values);\n\n    jit_free((jit_pointer_t *)&_jitc->blocks.ptr);\n\n    jit_free((jit_pointer_t *)&_jitc->patches.ptr);\n    _jitc->patches.offset = _jitc->patches.length = 0;\n\n    for (offset = 0; offset < _jitc->functions.offset; offset++) {\n\tfunction = _jitc->functions.ptr + offset;\n\tjit_free((jit_pointer_t *)&function->regoff);\n    }\n    jit_free((jit_pointer_t *)&_jitc->functions.ptr);\n    _jitc->functions.offset = _jitc->functions.length = 0;\n    _jitc->function = NULL;\n\n    for (offset = 0; offset < _jitc->pool.offset; offset++)\n\tjit_free((jit_pointer_t *)(_jitc->pool.ptr + offset));\n    jit_free((jit_pointer_t *)&_jitc->pool.ptr);\n    _jitc->pool.offset = _jitc->pool.length = 0;\n    _jitc->list = NULL;\n\n    _jitc->note.head = _jitc->note.tail =\n\t_jitc->note.name = _jitc->note.note = NULL;\n    _jitc->note.base = NULL;\n\n#if __arm__ && DISASSEMBLER\n    jit_free((jit_pointer_t *)&_jitc->data_info.ptr);\n#endif\n\n#if __powerpc64__ || __ia64__\n    jit_free((jit_pointer_t *)&_jitc->prolog.ptr);\n#endif\n\n#if __ia64__\n    jit_regset_del(&_jitc->regs);\n#endif\n\n    jit_free((jit_pointer_t *)&_jitc);\n}",
      "lines": 56,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_destroy_state": {
      "start_point": [
        908,
        0
      ],
      "end_point": [
        919,
        1
      ],
      "content": "void\n_jit_destroy_state(jit_state_t *_jit)\n{\n#if DEVEL_DISASSEMBLER\n    jit_really_clear_state();\n#endif\n    if (!_jit->user_code)\n\tmunmap(_jit->code.ptr, _jit->code.length);\n    if (!_jit->user_data)\n\tmunmap(_jit->data.ptr, _jit->data.length);\n    jit_free((jit_pointer_t *)&_jit);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "void"
      ]
    },
    "_jit_synth_inc": {
      "start_point": [
        921,
        0
      ],
      "end_point": [
        926,
        1
      ],
      "content": "void\n_jit_synth_inc(jit_state_t *_jit)\n{\n    assert(_jitc->synth < 8);\n    ++_jitc->synth;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_new_node": {
      "start_point": [
        928,
        0
      ],
      "end_point": [
        933,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node(jit_state_t *_jit, jit_code_t code)\n{\n    assert(!_jitc->realize);\n    return (link_node(new_node(code)));\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node(jit_state_t *_jit, jit_code_t code)",
        "*"
      ]
    },
    "_jit_new_node_no_link": {
      "start_point": [
        935,
        0
      ],
      "end_point": [
        940,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_no_link(jit_state_t *_jit, jit_code_t code)\n{\n    assert(!_jitc->realize);\n    return (new_node(code));\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_no_link(jit_state_t *_jit, jit_code_t code)",
        "*"
      ]
    },
    "_jit_link_node": {
      "start_point": [
        942,
        0
      ],
      "end_point": [
        947,
        1
      ],
      "content": "void\n_jit_link_node(jit_state_t *_jit, jit_node_t *node)\n{\n    assert(!_jitc->realize);\n    link_node(node);\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_synth_dec": {
      "start_point": [
        949,
        0
      ],
      "end_point": [
        954,
        1
      ],
      "content": "void\n_jit_synth_dec(jit_state_t *_jit)\n{\n    assert(_jitc->synth > 0);\n    --_jitc->synth;\n}",
      "lines": 6,
      "depth": 8,
      "decorators": [
        "void"
      ]
    },
    "_jit_new_node_w": {
      "start_point": [
        956,
        0
      ],
      "end_point": [
        964,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_w(jit_state_t *_jit, jit_code_t code,\n\t\tjit_word_t u)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    return (link_node(node));\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_w(jit_state_t *_jit, jit_code_t code,\n\t\tjit_word_t u)",
        "*"
      ]
    },
    "_jit_new_node_f": {
      "start_point": [
        966,
        0
      ],
      "end_point": [
        974,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_f(jit_state_t *_jit, jit_code_t code,\n\t\tjit_float32_t u)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.f = u;\n    return (link_node(node));\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_f(jit_state_t *_jit, jit_code_t code,\n\t\tjit_float32_t u)",
        "*"
      ]
    },
    "_jit_new_node_d": {
      "start_point": [
        976,
        0
      ],
      "end_point": [
        984,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_d(jit_state_t *_jit, jit_code_t code,\n\t\tjit_float64_t u)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.d = u;\n    return (link_node(node));\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_d(jit_state_t *_jit, jit_code_t code,\n\t\tjit_float64_t u)",
        "*"
      ]
    },
    "_jit_new_node_p": {
      "start_point": [
        986,
        0
      ],
      "end_point": [
        994,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_p(jit_state_t *_jit, jit_code_t code,\n\t\tjit_pointer_t u)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.p = u;\n    return (link_node(node));\n}",
      "lines": 9,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_p(jit_state_t *_jit, jit_code_t code,\n\t\tjit_pointer_t u)",
        "*"
      ]
    },
    "_jit_new_node_ww": {
      "start_point": [
        996,
        0
      ],
      "end_point": [
        1005,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_ww(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_word_t v)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.w = v;\n    return (link_node(node));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_ww(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_word_t v)",
        "*"
      ]
    },
    "_jit_new_node_wp": {
      "start_point": [
        1007,
        0
      ],
      "end_point": [
        1012,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_wp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_pointer_t v)\n{\n    return (jit_new_node_ww(code, u, (jit_word_t)v));\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_wp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_pointer_t v)",
        "*"
      ]
    },
    "_jit_new_node_fp": {
      "start_point": [
        1014,
        0
      ],
      "end_point": [
        1023,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_fp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_float32_t u, jit_pointer_t v)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.f = u;\n    node->v.w = (jit_word_t)v;\n    return (link_node(node));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_fp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_float32_t u, jit_pointer_t v)",
        "*"
      ]
    },
    "_jit_new_node_dp": {
      "start_point": [
        1025,
        0
      ],
      "end_point": [
        1034,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_dp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_float64_t u, jit_pointer_t v)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.d = u;\n    node->v.w = (jit_word_t)v;\n    return (link_node(node));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_dp(jit_state_t *_jit, jit_code_t code,\n\t\t jit_float64_t u, jit_pointer_t v)",
        "*"
      ]
    },
    "_jit_new_node_pw": {
      "start_point": [
        1036,
        0
      ],
      "end_point": [
        1041,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_pw(jit_state_t *_jit, jit_code_t code,\n\t\t jit_pointer_t u, jit_word_t v)\n{\n    return (jit_new_node_ww(code, (jit_word_t)u, v));\n}",
      "lines": 6,
      "depth": 9,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_pw(jit_state_t *_jit, jit_code_t code,\n\t\t jit_pointer_t u, jit_word_t v)",
        "*"
      ]
    },
    "_jit_new_node_wf": {
      "start_point": [
        1043,
        0
      ],
      "end_point": [
        1052,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_wf(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_float32_t v)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.f = v;\n    return (link_node(node));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_wf(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_float32_t v)",
        "*"
      ]
    },
    "_jit_new_node_wd": {
      "start_point": [
        1054,
        0
      ],
      "end_point": [
        1063,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_wd(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_float64_t v)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.d = v;\n    return (link_node(node));\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_wd(jit_state_t *_jit, jit_code_t code,\n\t\t jit_word_t u, jit_float64_t v)",
        "*"
      ]
    },
    "_jit_new_node_www": {
      "start_point": [
        1065,
        0
      ],
      "end_point": [
        1075,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_www(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_word_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.w = v;\n    node->w.w = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_www(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_word_t w)",
        "*"
      ]
    },
    "_jit_new_node_qww": {
      "start_point": [
        1077,
        0
      ],
      "end_point": [
        1090,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_qww(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_int32_t l, jit_int32_t h,\n\t\t  jit_word_t v, jit_word_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    assert(l != h);\n    node->u.q.l = l;\n    node->u.q.h = h;\n    node->v.w = v;\n    node->w.w = w;\n    return (link_node(node));\n}",
      "lines": 14,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_qww(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_int32_t l, jit_int32_t h,\n\t\t  jit_word_t v, jit_word_t w)",
        "*"
      ]
    },
    "_jit_new_node_wwf": {
      "start_point": [
        1092,
        0
      ],
      "end_point": [
        1102,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_wwf(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_float32_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.w = v;\n    node->w.f = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_wwf(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_float32_t w)",
        "*"
      ]
    },
    "_jit_new_node_wwd": {
      "start_point": [
        1104,
        0
      ],
      "end_point": [
        1114,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_wwd(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_float64_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.w = u;\n    node->v.w = v;\n    node->w.d = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_wwd(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_word_t u, jit_word_t v, jit_float64_t w)",
        "*"
      ]
    },
    "_jit_new_node_pww": {
      "start_point": [
        1116,
        0
      ],
      "end_point": [
        1126,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_pww(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_word_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.p = u;\n    node->v.w = v;\n    node->w.w = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_pww(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_word_t w)",
        "*"
      ]
    },
    "_jit_new_node_pwf": {
      "start_point": [
        1128,
        0
      ],
      "end_point": [
        1138,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_pwf(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_float32_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.p = u;\n    node->v.w = v;\n    node->w.f = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_pwf(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_float32_t w)",
        "*"
      ]
    },
    "_jit_new_node_pwd": {
      "start_point": [
        1140,
        0
      ],
      "end_point": [
        1150,
        1
      ],
      "content": "jit_node_t *\n_jit_new_node_pwd(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_float64_t w)\n{\n    jit_node_t\t\t*node = new_node(code);\n    assert(!_jitc->realize);\n    node->u.p = u;\n    node->v.w = v;\n    node->w.d = w;\n    return (link_node(node));\n}",
      "lines": 11,
      "depth": 8,
      "decorators": [
        "jit_node_t",
        "*\n_jit_new_node_pwd(jit_state_t *_jit, jit_code_t code,\n\t\t  jit_pointer_t u, jit_word_t v, jit_float64_t w)",
        "*"
      ]
    },
    "_jit_label": {
      "start_point": [
        1152,
        0
      ],
      "end_point": [
        1163,
        1
      ],
      "content": "jit_node_t *\n_jit_label(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n\n    if (!(node = _jitc->tail) || node->code != jit_code_label) {\n\tnode = jit_forward();\n\tjit_link(node);\n    }\n\n    return (node);\n}",
      "lines": 12,
      "depth": 10,
      "decorators": [
        "jit_node_t",
        "*\n_jit_label(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_forward": {
      "start_point": [
        1165,
        0
      ],
      "end_point": [
        1169,
        1
      ],
      "content": "jit_node_t *\n_jit_forward(jit_state_t *_jit)\n{\n    return (jit_new_node_no_link(jit_code_label));\n}",
      "lines": 5,
      "depth": 7,
      "decorators": [
        "jit_node_t",
        "*\n_jit_forward(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_indirect": {
      "start_point": [
        1171,
        0
      ],
      "end_point": [
        1180,
        1
      ],
      "content": "jit_node_t *\n_jit_indirect(jit_state_t *_jit)\n{\n    jit_node_t\t\t*node;\n\n    node = jit_label();\n    node->flag |= jit_flag_use;\n\n    return (node);\n}",
      "lines": 10,
      "depth": 7,
      "decorators": [
        "jit_node_t",
        "*\n_jit_indirect(jit_state_t *_jit)",
        "*"
      ]
    },
    "_jit_link": {
      "start_point": [
        1182,
        0
      ],
      "end_point": [
        1206,
        1
      ],
      "content": "void\n_jit_link(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_block_t\t\t*block;\n\n    assert((node->code == jit_code_label ||\n\t    node->code == jit_code_prolog ||\n\t    node->code == jit_code_epilog) && !node->next);\n    jit_link_node(node);\n    if (_jitc->blocks.offset >= _jitc->blocks.length) {\n\tjit_word_t\t  length;\n\n\tlength = _jitc->blocks.length + 16;\n\tjit_realloc((jit_pointer_t *)&_jitc->blocks.ptr,\n\t\t    _jitc->blocks.length * sizeof(jit_block_t),\n\t\t    length * sizeof(jit_block_t));\n\t_jitc->blocks.length = length;\n    }\n    block = _jitc->blocks.ptr + _jitc->blocks.offset;\n    block->label = node;\n    node->v.w = _jitc->blocks.offset;\n    jit_regset_new(&block->reglive);\n    jit_regset_new(&block->regmask);\n    ++_jitc->blocks.offset;\n}",
      "lines": 25,
      "depth": 12,
      "decorators": [
        "void"
      ]
    },
    "_jit_forward_p": {
      "start_point": [
        1208,
        0
      ],
      "end_point": [
        1212,
        1
      ],
      "content": "jit_bool_t\n_jit_forward_p(jit_state_t *_jit, jit_node_t *node)\n{\n    return (node->code == jit_code_label && !node->next && node != _jitc->tail);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_indirect_p": {
      "start_point": [
        1214,
        0
      ],
      "end_point": [
        1218,
        1
      ],
      "content": "jit_bool_t\n_jit_indirect_p(jit_state_t *_jit, jit_node_t *node)\n{\n    return (node->code == jit_code_label && !!(node->flag & jit_flag_use));\n}",
      "lines": 5,
      "depth": 11,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_target_p": {
      "start_point": [
        1220,
        0
      ],
      "end_point": [
        1224,
        1
      ],
      "content": "jit_bool_t\n_jit_target_p(jit_state_t *_jit, jit_node_t *node)\n{\n    return (node->code == jit_code_label && !!node->link);\n}",
      "lines": 5,
      "depth": 9,
      "decorators": [
        "jit_bool_t"
      ]
    },
    "_jit_prepare": {
      "start_point": [
        1226,
        0
      ],
      "end_point": [
        1235,
        1
      ],
      "content": "void\n_jit_prepare(jit_state_t *_jit)\n{\n    assert(_jitc->function != NULL);\n    _jitc->function->call.call = jit_call_default;\n    _jitc->function->call.argi =\n\t_jitc->function->call.argf =\n\t_jitc->function->call.size = 0;\n    _jitc->prepare = jit_new_node(jit_code_prepare);\n}",
      "lines": 10,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_patch": {
      "start_point": [
        1237,
        0
      ],
      "end_point": [
        1245,
        1
      ],
      "content": "void\n_jit_patch(jit_state_t* _jit, jit_node_t *instr)\n{\n    jit_node_t\t\t*label;\n\n    if (!(label = _jitc->tail) || label->code != jit_code_label)\n\tlabel = jit_label();\n    jit_patch_at(instr, label);\n}",
      "lines": 9,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_classify": {
      "start_point": [
        1247,
        0
      ],
      "end_point": [
        1494,
        1
      ],
      "content": "jit_int32_t\n_jit_classify(jit_state_t *_jit, jit_code_t code)\n{\n    jit_int32_t\t\tmask;\n\n    switch (code) {\n\tcase jit_code_data:\tcase jit_code_save:\tcase jit_code_load:\n\tcase jit_code_name:\tcase jit_code_label:\tcase jit_code_note:\n\tcase jit_code_prolog:\tcase jit_code_ellipsis:\tcase jit_code_epilog:\n\tcase jit_code_ret:\tcase jit_code_prepare:\n\t    mask = 0;\n\t    break;\n\tcase jit_code_live:\tcase jit_code_va_end:\n\tcase jit_code_retr:\tcase jit_code_retr_f:\tcase jit_code_retr_d:\n\tcase jit_code_pushargr:\tcase jit_code_pushargr_f:\n\tcase jit_code_pushargr_d:\n\tcase jit_code_finishr:\t/* synthesized will set jit_cc_a0_jmp */\n\t    mask = jit_cc_a0_reg;\n\t    break;\n\tcase jit_code_align:\tcase jit_code_reti:\tcase jit_code_pushargi:\n\tcase jit_code_finishi:\t/* synthesized will set jit_cc_a0_jmp */\n\t    mask = jit_cc_a0_int;\n\t    break;\n\tcase jit_code_reti_f:\tcase jit_code_pushargi_f:\n\t    mask = jit_cc_a0_flt;\n\t    break;\n\tcase jit_code_reti_d:\tcase jit_code_pushargi_d:\n\t    mask = jit_cc_a0_dbl;\n\t    break;\n\tcase jit_code_allocai:\n\t    mask = jit_cc_a0_int|jit_cc_a1_int;\n\t    break;\n\tcase jit_code_arg:\tcase jit_code_arg_f:\tcase jit_code_arg_d:\n\t    mask = jit_cc_a0_int|jit_cc_a0_arg;\n\t    break;\n\tcase jit_code_calli:\tcase jit_code_jmpi:\n\t    mask = jit_cc_a0_jmp;\n\t    break;\n\tcase jit_code_callr:\tcase jit_code_jmpr:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_jmp;\n\t    break;\n\tcase jit_code_retval_c:\tcase jit_code_retval_uc:\n\tcase jit_code_retval_s:\tcase jit_code_retval_us:\n\tcase jit_code_retval_i:\tcase jit_code_retval_ui:\n\tcase jit_code_retval_l:\n\tcase jit_code_retval_f:\tcase jit_code_retval_d:\n\tcase jit_code_va_start:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg;\n\t    break;\n\tcase jit_code_getarg_c:\tcase jit_code_getarg_uc:\n\tcase jit_code_getarg_s:\tcase jit_code_getarg_us:\n\tcase jit_code_getarg_i:\tcase jit_code_getarg_ui:\n\tcase jit_code_getarg_l:\n\tcase jit_code_getarg_f:\tcase jit_code_getarg_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_arg;\n\t    break;\n\tcase jit_code_putargr:\tcase jit_code_putargr_f:\n\tcase jit_code_putargr_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a1_arg;\n\t    break;\n\tcase jit_code_putargi:\n\t    mask = jit_cc_a0_int|jit_cc_a1_arg;\n\t    break;\n\tcase jit_code_putargi_f:\n\t    mask = jit_cc_a0_flt|jit_cc_a1_arg;\n\t    break;\n\tcase jit_code_putargi_d:\n\t    mask = jit_cc_a0_dbl|jit_cc_a1_arg;\n\t    break;\n\tcase jit_code_movi:\tcase jit_code_ldi_c:\tcase jit_code_ldi_uc:\n\tcase jit_code_ldi_s:\tcase jit_code_ldi_us:\tcase jit_code_ldi_i:\n\tcase jit_code_ldi_ui:\tcase jit_code_ldi_l:\tcase jit_code_ldi_f:\n\tcase jit_code_ldi_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_int;\n\t    break;\n\tcase jit_code_movi_f:\tcase jit_code_movi_f_w:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_flt;\n\t    break;\n\tcase jit_code_movi_d:\tcase jit_code_movi_d_w:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_dbl;\n\t    break;\n\tcase jit_code_movi_d_ww:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a1_chg|\n\t\t   jit_cc_a2_dbl;\n\t    break;\n\tcase jit_code_negr:\tcase jit_code_comr:\tcase jit_code_movr:\n\tcase jit_code_extr_c:\tcase jit_code_extr_uc:\tcase jit_code_extr_s:\n\tcase jit_code_extr_us:\tcase jit_code_extr_i:\tcase jit_code_extr_ui:\n\tcase jit_code_truncr_f_i:\t\t\tcase jit_code_truncr_f_l:\n\tcase jit_code_truncr_d_i:\t\t\tcase jit_code_truncr_d_l:\n\tcase jit_code_htonr_us:\tcase jit_code_htonr_ui:\tcase jit_code_htonr_ul:\n\tcase jit_code_ldr_c:\tcase jit_code_ldr_uc:\n\tcase jit_code_ldr_s:\tcase jit_code_ldr_us:\tcase jit_code_ldr_i:\n\tcase jit_code_ldr_ui:\tcase jit_code_ldr_l:\tcase jit_code_negr_f:\n\tcase jit_code_absr_f:\tcase jit_code_sqrtr_f:\tcase jit_code_movr_f:\n\tcase jit_code_extr_f:\tcase jit_code_extr_d_f:\tcase jit_code_ldr_f:\n\tcase jit_code_negr_d:\tcase jit_code_absr_d:\tcase jit_code_sqrtr_d:\n\tcase jit_code_movr_d:\tcase jit_code_extr_d:\tcase jit_code_extr_f_d:\n\tcase jit_code_ldr_d:\n\tcase jit_code_movr_w_f:\tcase jit_code_movr_f_w:\n\tcase jit_code_movr_w_d:\tcase jit_code_movr_d_w:\n\tcase jit_code_va_arg:\tcase jit_code_va_arg_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg;\n\t    break;\n\tcase jit_code_movr_d_ww:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a1_chg|\n\t\t   jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_addi:\tcase jit_code_addxi:\tcase jit_code_addci:\n\tcase jit_code_subi:\tcase jit_code_subxi:\tcase jit_code_subci:\n\tcase jit_code_rsbi:\n\tcase jit_code_muli:\tcase jit_code_divi:\tcase jit_code_divi_u:\n\tcase jit_code_remi:\tcase jit_code_remi_u:\tcase jit_code_andi:\n\tcase jit_code_ori:\tcase jit_code_xori:\tcase jit_code_lshi:\n\tcase jit_code_rshi:\tcase jit_code_rshi_u:\tcase jit_code_lti:\n\tcase jit_code_lti_u:\tcase jit_code_lei:\tcase jit_code_lei_u:\n\tcase jit_code_eqi:\tcase jit_code_gei:\tcase jit_code_gei_u:\n\tcase jit_code_gti:\tcase jit_code_gti_u:\tcase jit_code_nei:\n\tcase jit_code_ldxi_c:\tcase jit_code_ldxi_uc:\tcase jit_code_ldxi_s:\n\tcase jit_code_ldxi_us:\tcase jit_code_ldxi_i:\tcase jit_code_ldxi_ui:\n\tcase jit_code_ldxi_l:\tcase jit_code_ldxi_f:\tcase jit_code_ldxi_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a2_int;\n\t    break;\n\tcase jit_code_qmuli:\tcase jit_code_qmuli_u:\n\tcase jit_code_qdivi:\tcase jit_code_qdivi_u:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_rlh|jit_cc_a0_chg|\n\t\t   jit_cc_a1_reg|jit_cc_a2_int;\n\t    break;\n\tcase jit_code_addi_f:\tcase jit_code_subi_f:\tcase jit_code_rsbi_f:\n\tcase jit_code_muli_f:\tcase jit_code_divi_f:\tcase jit_code_lti_f:\n\tcase jit_code_lei_f:\tcase jit_code_eqi_f:\tcase jit_code_gei_f:\n\tcase jit_code_gti_f:\tcase jit_code_nei_f:\tcase jit_code_unlti_f:\n\tcase jit_code_unlei_f:\tcase jit_code_uneqi_f:\tcase jit_code_ungei_f:\n\tcase jit_code_ungti_f:\tcase jit_code_ltgti_f:\tcase jit_code_ordi_f:\n\tcase jit_code_unordi_f:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a2_flt;\n\t    break;\n\tcase jit_code_addi_d:\tcase jit_code_subi_d:\tcase jit_code_rsbi_d:\n\tcase jit_code_muli_d:\tcase jit_code_divi_d:\tcase jit_code_lti_d:\n\tcase jit_code_lei_d:\tcase jit_code_eqi_d:\tcase jit_code_gei_d:\n\tcase jit_code_gti_d:\tcase jit_code_nei_d:\tcase jit_code_unlti_d:\n\tcase jit_code_unlei_d:\tcase jit_code_uneqi_d:\tcase jit_code_ungei_d:\n\tcase jit_code_ungti_d:\tcase jit_code_ltgti_d:\tcase jit_code_ordi_d:\n\tcase jit_code_unordi_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a2_dbl;\n\t    break;\n\tcase jit_code_addr:\tcase jit_code_addxr:\tcase jit_code_addcr:\n\tcase jit_code_subr:\tcase jit_code_subxr:\tcase jit_code_subcr:\n\tcase jit_code_mulr:\tcase jit_code_divr:\tcase jit_code_divr_u:\n\tcase jit_code_remr:\tcase jit_code_remr_u:\tcase jit_code_andr:\n\tcase jit_code_orr:\tcase jit_code_xorr:\tcase jit_code_lshr:\n\tcase jit_code_rshr:\tcase jit_code_rshr_u:\tcase jit_code_ltr:\n\tcase jit_code_ltr_u:\tcase jit_code_ler:\tcase jit_code_ler_u:\n\tcase jit_code_eqr:\tcase jit_code_ger:\tcase jit_code_ger_u:\n\tcase jit_code_gtr:\tcase jit_code_gtr_u:\tcase jit_code_ner:\n\tcase jit_code_ldxr_c:\tcase jit_code_ldxr_uc:\tcase jit_code_ldxr_s:\n\tcase jit_code_ldxr_us:\tcase jit_code_ldxr_i:\tcase jit_code_ldxr_ui:\n\tcase jit_code_ldxr_l:\tcase jit_code_addr_f:\tcase jit_code_subr_f:\n\tcase jit_code_mulr_f:\tcase jit_code_divr_f:\tcase jit_code_ltr_f:\n\tcase jit_code_ler_f:\tcase jit_code_eqr_f:\tcase jit_code_ger_f:\n\tcase jit_code_gtr_f:\tcase jit_code_ner_f:\tcase jit_code_unltr_f:\n\tcase jit_code_unler_f:\tcase jit_code_uneqr_f:\tcase jit_code_unger_f:\n\tcase jit_code_ungtr_f:\tcase jit_code_ltgtr_f:\tcase jit_code_ordr_f:\n\tcase jit_code_unordr_f:\tcase jit_code_ldxr_f:\tcase jit_code_addr_d:\n\tcase jit_code_subr_d:\tcase jit_code_mulr_d:\tcase jit_code_divr_d:\n\tcase jit_code_ltr_d:\tcase jit_code_ler_d:\tcase jit_code_eqr_d:\n\tcase jit_code_ger_d:\tcase jit_code_gtr_d:\tcase jit_code_ner_d:\n\tcase jit_code_unltr_d:\tcase jit_code_unler_d:\tcase jit_code_uneqr_d:\n\tcase jit_code_unger_d:\tcase jit_code_ungtr_d:\tcase jit_code_ltgtr_d:\n\tcase jit_code_ordr_d:\tcase jit_code_unordr_d:\tcase jit_code_ldxr_d:\n\tcase jit_code_movr_ww_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_chg|jit_cc_a1_reg|jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_qmulr:\tcase jit_code_qmulr_u:\n\tcase jit_code_qdivr:\tcase jit_code_qdivr_u:\n\t    mask = jit_cc_a0_reg|jit_cc_a0_rlh|jit_cc_a0_chg|\n\t\t   jit_cc_a1_reg|jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_sti_c:\tcase jit_code_sti_s:\tcase jit_code_sti_i:\n\tcase jit_code_sti_l:\tcase jit_code_sti_f:\tcase jit_code_sti_d:\n\t    mask = jit_cc_a0_int|jit_cc_a1_reg;\n\t    break;\n\tcase jit_code_blti:\tcase jit_code_blti_u:\tcase jit_code_blei:\n\tcase jit_code_blei_u:\tcase jit_code_beqi:\tcase jit_code_bgei:\n\tcase jit_code_bgei_u:\tcase jit_code_bgti:\tcase jit_code_bgti_u:\n\tcase jit_code_bnei:\tcase jit_code_bmsi:\tcase jit_code_bmci:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_int;\n\t    break;\n\tcase jit_code_blti_f:\tcase jit_code_blei_f:\tcase jit_code_beqi_f:\n\tcase jit_code_bgei_f:\tcase jit_code_bgti_f:\tcase jit_code_bnei_f:\n\tcase jit_code_bunlti_f:\tcase jit_code_bunlei_f:\tcase jit_code_buneqi_f:\n\tcase jit_code_bungei_f:\tcase jit_code_bungti_f:\tcase jit_code_bltgti_f:\n\tcase jit_code_bordi_f:\tcase jit_code_bunordi_f:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_flt;\n\t    break;\n\tcase jit_code_blti_d:\tcase jit_code_blei_d:\tcase jit_code_beqi_d:\n\tcase jit_code_bgei_d:\tcase jit_code_bgti_d:\tcase jit_code_bnei_d:\n\tcase jit_code_bunlti_d:\tcase jit_code_bunlei_d:\tcase jit_code_buneqi_d:\n\tcase jit_code_bungei_d:\tcase jit_code_bungti_d:\tcase jit_code_bltgti_d:\n\tcase jit_code_bordi_d:\tcase jit_code_bunordi_d:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_dbl;\n\t    break;\n\tcase jit_code_allocar:\t/* synthesized instructions make it\n\t\t\t\t * equivalent to jit_cc_a0_chg */\n\tcase jit_code_str_c:\tcase jit_code_str_s:\tcase jit_code_str_i:\n\tcase jit_code_str_l:\tcase jit_code_str_f:\tcase jit_code_str_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a1_reg;\n\t    break;\n\tcase jit_code_stxi_c:\tcase jit_code_stxi_s:\tcase jit_code_stxi_i:\n\tcase jit_code_stxi_l:\tcase jit_code_stxi_f:\tcase jit_code_stxi_d:\n\t    mask = jit_cc_a0_int|jit_cc_a1_reg|jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_bltr:\tcase jit_code_bltr_u:\tcase jit_code_bler:\n\tcase jit_code_bler_u:\tcase jit_code_beqr:\tcase jit_code_bger:\n\tcase jit_code_bger_u:\tcase jit_code_bgtr:\tcase jit_code_bgtr_u:\n\tcase jit_code_bner:\tcase jit_code_bmsr:\tcase jit_code_bmcr:\n\tcase jit_code_bltr_f:\tcase jit_code_bler_f:\tcase jit_code_beqr_f:\n\tcase jit_code_bger_f:\tcase jit_code_bgtr_f:\tcase jit_code_bner_f:\n\tcase jit_code_bunltr_f:\tcase jit_code_bunler_f:\tcase jit_code_buneqr_f:\n\tcase jit_code_bunger_f:\tcase jit_code_bungtr_f:\tcase jit_code_bltgtr_f:\n\tcase jit_code_bordr_f:\tcase jit_code_bunordr_f:case jit_code_bltr_d:\n\tcase jit_code_bler_d:\tcase jit_code_beqr_d:\tcase jit_code_bger_d:\n\tcase jit_code_bgtr_d:\tcase jit_code_bner_d:\tcase jit_code_bunltr_d:\n\tcase jit_code_bunler_d:\tcase jit_code_buneqr_d:\tcase jit_code_bunger_d:\n\tcase jit_code_bungtr_d:\tcase jit_code_bltgtr_d:\tcase jit_code_bordr_d:\n\tcase jit_code_bunordr_d:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_boaddi:\tcase jit_code_boaddi_u:\tcase jit_code_bxaddi:\n\tcase jit_code_bxaddi_u:\tcase jit_code_bosubi:\tcase jit_code_bosubi_u:\n\tcase jit_code_bxsubi:\tcase jit_code_bxsubi_u:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a1_chg|jit_cc_a2_int;\n\t    break;\n\tcase jit_code_stxr_c:\tcase jit_code_stxr_s:\tcase jit_code_stxr_i:\n\tcase jit_code_stxr_l:\tcase jit_code_stxr_f:\tcase jit_code_stxr_d:\n\t    mask = jit_cc_a0_reg|jit_cc_a1_reg|jit_cc_a2_reg;\n\t    break;\n\tcase jit_code_boaddr:\tcase jit_code_boaddr_u:\tcase jit_code_bxaddr:\n\tcase jit_code_bxaddr_u:\tcase jit_code_bosubr:\tcase jit_code_bosubr_u:\n\tcase jit_code_bxsubr:\tcase jit_code_bxsubr_u:\n\t    mask = jit_cc_a0_jmp|jit_cc_a1_reg|jit_cc_a1_chg|jit_cc_a2_reg;\n\t    break;\n\tdefault:\n\t    abort();\n    }\n\n    return (mask);\n}",
      "lines": 248,
      "depth": 12,
      "decorators": [
        "jit_int32_t"
      ]
    },
    "_jit_patch_abs": {
      "start_point": [
        1496,
        0
      ],
      "end_point": [
        1508,
        1
      ],
      "content": "void\n_jit_patch_abs(jit_state_t *_jit, jit_node_t *instr, jit_pointer_t address)\n{\n    jit_int32_t\t\tmask;\n\n    if (instr->code == jit_code_movi)\n\tinstr->v.p = address;\n    else {\n\tmask = jit_classify(instr->code);\n\tassert((mask & (jit_cc_a0_reg|jit_cc_a0_jmp)) == jit_cc_a0_jmp);\n\tinstr->u.p = address;\n    }\n}",
      "lines": 13,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_patch_at": {
      "start_point": [
        1510,
        0
      ],
      "end_point": [
        1540,
        1
      ],
      "content": "void\n_jit_patch_at(jit_state_t *_jit, jit_node_t *instr, jit_node_t *label)\n{\n    jit_int32_t\t\tmask;\n\n    assert(!(instr->flag & jit_flag_node));\n    instr->flag |= jit_flag_node;\n    switch (instr->code) {\n\tcase jit_code_movi:\n\t    assert(label->code == jit_code_label ||\n\t\t   label->code == jit_code_data);\n\t    instr->v.n = label;\n\t    if (label->code == jit_code_data)\n\t\tinstr->flag |= jit_flag_data;\n\t    break;\n\tcase jit_code_jmpi:\n\t    assert(label->code == jit_code_label ||\n\t\t   label->code == jit_code_epilog);\n\t    instr->u.n = label;\n\t    break;\n\tdefault:\n\t    mask = jit_classify(instr->code);\n\t    assert((mask & (jit_cc_a0_reg|jit_cc_a0_jmp)) == jit_cc_a0_jmp);\n\t    assert(label->code == jit_code_label);\n\t    instr->u.n = label;\n\t    break;\n    }\n    /* link field is used as list of nodes associated with a given label */\n    instr->link = label->link;\n    label->link = instr;\n}",
      "lines": 31,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_optimize": {
      "start_point": [
        1542,
        0
      ],
      "end_point": [
        1691,
        1
      ],
      "content": "void\n_jit_optimize(jit_state_t *_jit)\n{\n    jit_bool_t\t\t jump;\n    jit_int32_t\t\t mask;\n    jit_node_t\t\t*node;\n    jit_block_t\t\t*block;\n    jit_word_t\t\t offset;\n\n    _jitc->function = NULL;\n\n    thread_jumps();\n    sequential_labels();\n\n    /* create initial mapping of live register values\n     * at the start of a basic block */\n    for (offset = 0; offset < _jitc->blocks.offset; offset++) {\n\tblock = _jitc->blocks.ptr + offset;\n\tif (!block->label)\n\t    continue;\n\tif (block->label->code != jit_code_epilog) {\n\t    jit_setup(block);\n\t    jit_regset_set(&block->setmask, &block->regmask);\n\t}\n    }\n    /* call jit_update resolving undefined values in reverse\n     * order so that sequential code would find most data already\n     * resolved when reaching the start of a new basic block */\n    for (offset = _jitc->blocks.offset - 1; offset >= 0; offset--) {\n\tblock = _jitc->blocks.ptr + offset;\n\tif (!block->label)\n\t    continue;\n\tif (block->label->code != jit_code_epilog) {\n\t    jit_regset_set(&_jitc->regmask, &block->regmask);\n\t    jit_update(block->label->next, &block->reglive, &_jitc->regmask);\n\t}\n    }\n    /* do a second pass from start to properly handle some conditions\n     * of very long living registers that are not referenced for\n     * several blocks */\n    bmp_zero();\n    for (offset = 0; offset < _jitc->blocks.offset; offset++) {\n\tblock = _jitc->blocks.ptr + offset;\n\tif (!block->label)\n\t    continue;\n\tif (block->label->code != jit_code_epilog) {\n\t    jit_regset_set(&_jitc->regmask, &block->setmask);\n\t    jit_update(block->label->next, &block->reglive, &_jitc->regmask);\n\t}\n    }\n\n    patch_registers();\n    simplify();\n\n    /* figure out labels that are only reached with a jump\n     * and is required to do a simple redundant_store removal\n     * on jit_beqi below */\n    jump = 1;\n    for (node = _jitc->head; node; node = node->next) {\n\tswitch (node->code) {\n\t    case jit_code_label:\n\t\tif (!jump)\n\t\t    node->flag |= jit_flag_head;\n\t\tbreak;\n\t    case jit_code_jmpi:\t\tcase jit_code_jmpr:\n\t    case jit_code_epilog:\n\t\tjump = 1;\n\t\tbreak;\n\t    case jit_code_data:\t\tcase jit_code_note:\n\t\tbreak;\n\t    default:\n\t\tjump = 0;\n\t\tbreak;\n\t}\n    }\n\n    for (node = _jitc->head; node; node = node->next) {\n\tmask = jit_classify(node->code);\n\tif (mask & jit_cc_a0_reg)\n\t    node->u.w &= ~jit_regno_patch;\n\tif (mask & jit_cc_a1_reg)\n\t    node->v.w &= ~jit_regno_patch;\n\tif (mask & jit_cc_a2_reg)\n\t    node->w.w &= ~jit_regno_patch;\n\tswitch (node->code) {\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    case jit_code_beqi:\n\t\tredundant_store(node, 1);\n\t\tbreak;\n\t    case jit_code_bnei:\n\t\tredundant_store(node, 0);\n\t\tbreak;\n\t    default:\n#if JIT_HASH_CONSTS\n\t\tif (mask & jit_cc_a0_flt) {\n\t\t    node->u.p = jit_data(&node->u.f, sizeof(jit_float32_t), 4);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n\t\telse if (mask & jit_cc_a0_dbl) {\n\t\t    node->u.p = jit_data(&node->u.d, sizeof(jit_float64_t), 8);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n\t\telse if (mask & jit_cc_a1_flt) {\n\t\t    node->v.p = jit_data(&node->v.f, sizeof(jit_float32_t), 4);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n\t\telse if (mask & jit_cc_a1_dbl) {\n\t\t    node->v.p = jit_data(&node->v.d, sizeof(jit_float64_t), 8);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n\t\telse if (mask & jit_cc_a2_flt) {\n\t\t    node->w.p = jit_data(&node->w.f, sizeof(jit_float32_t), 4);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n\t\telse if (mask & jit_cc_a2_dbl) {\n\t\t    node->w.p = jit_data(&node->w.d, sizeof(jit_float64_t), 8);\n\t\t    node->flag |= jit_flag_node | jit_flag_data;\n\t\t}\n#endif\n\t\tif (_jitc->function) {\n\t\t    if ((mask & (jit_cc_a0_reg|jit_cc_a0_chg)) ==\n\t\t\t(jit_cc_a0_reg|jit_cc_a0_chg)) {\n\t\t\tif (mask & jit_cc_a0_rlh) {\n\t\t\t    jit_regset_setbit(&_jitc->function->regset,\n\t\t\t\t\t      jit_regno(node->u.q.l));\n\t\t\t    jit_regset_setbit(&_jitc->function->regset,\n\t\t\t\t\t      jit_regno(node->u.q.h));\n\t\t\t}\n\t\t\telse\n\t\t\t    jit_regset_setbit(&_jitc->function->regset,\n\t\t\t\t\t      jit_regno(node->u.w));\n\t\t    }\n\t\t    if ((mask & (jit_cc_a1_reg|jit_cc_a1_chg)) ==\n\t\t\t(jit_cc_a1_reg|jit_cc_a1_chg))\n\t\t\tjit_regset_setbit(&_jitc->function->regset,\n\t\t\t\t\t  jit_regno(node->v.w));\n\t\t    if ((mask & (jit_cc_a2_reg|jit_cc_a2_chg)) ==\n\t\t\t(jit_cc_a2_reg|jit_cc_a2_chg))\n\t\t\tjit_regset_setbit(&_jitc->function->regset,\n\t\t\t\t\t  jit_regno(node->w.w));\n\t\t}\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 150,
      "depth": 22,
      "decorators": [
        "void"
      ]
    },
    "_jit_reglive": {
      "start_point": [
        1693,
        0
      ],
      "end_point": [
        1779,
        1
      ],
      "content": "void\n_jit_reglive(jit_state_t *_jit, jit_node_t *node)\n{\n    jit_int32_t\t\t spec;\n    jit_int32_t\t\t value;\n    jit_block_t\t\t*block;\n\n    switch (node->code) {\n\tcase jit_code_label:\tcase jit_code_prolog:\tcase jit_code_epilog:\n\t    block = _jitc->blocks.ptr + node->v.w;\n\t    jit_regset_set(&_jitc->reglive, &block->reglive);\n\t    break;\n\tcase jit_code_callr:\n\t    value = jit_regno(node->u.w);\n\t    if (!(node->u.w & jit_regno_patch)) {\n\t\tjit_regset_setbit(&_jitc->reglive, value);\n\t    }\n\tcase jit_code_calli:\n\t    for (value = 0; value < _jitc->reglen; value++) {\n\t\tspec = jit_class(_rvs[value].spec);\n\t\tif ((spec & jit_class_arg) && jit_regarg_p(node, value))\n\t\t    jit_regset_setbit(&_jitc->reglive, value);\n\t\telse if (!(spec & jit_class_sav))\n\t\t    jit_regset_clrbit(&_jitc->reglive, value);\n\t    }\n\t    break;\n\tdefault:\n\t    value = jit_classify(node->code);\n\t    if (value & jit_cc_a0_reg) {\n\t\tif (value & jit_cc_a0_rlh) {\n\t\t    if (!(node->u.q.l & jit_regno_patch)) {\n\t\t\tif (value & jit_cc_a0_chg) {\n\t\t\t    jit_regset_clrbit(&_jitc->reglive, node->u.q.l);\n\t\t\t    jit_regset_setbit(&_jitc->regmask, node->u.q.l);\n\t\t\t}\n\t\t\telse\n\t\t\t    jit_regset_setbit(&_jitc->reglive, node->u.q.l);\n\t\t    }\n\t\t    if (!(node->u.q.h & jit_regno_patch)) {\n\t\t\tif (value & jit_cc_a0_chg) {\n\t\t\t    jit_regset_clrbit(&_jitc->reglive, node->u.q.h);\n\t\t\t    jit_regset_setbit(&_jitc->regmask, node->u.q.h);\n\t\t\t}\n\t\t\telse\n\t\t\t    jit_regset_setbit(&_jitc->reglive, node->u.q.h);\n\t\t    }\n\t\t}\n\t\telse {\n\t\t    if (!(node->u.w & jit_regno_patch)) {\n\t\t\tif (value & jit_cc_a0_chg) {\n\t\t\t    jit_regset_clrbit(&_jitc->reglive, node->u.w);\n\t\t\t    jit_regset_setbit(&_jitc->regmask, node->u.w);\n\t\t\t}\n\t\t\telse\n\t\t\t    jit_regset_setbit(&_jitc->reglive, node->u.w);\n\t\t    }\n\t\t}\n\t    }\n\t    if ((value & jit_cc_a1_reg) && !(node->v.w & jit_regno_patch)) {\n\t\tif (value & jit_cc_a1_chg) {\n\t\t    jit_regset_clrbit(&_jitc->reglive, node->v.w);\n\t\t    jit_regset_setbit(&_jitc->regmask, node->v.w);\n\t\t}\n\t\telse\n\t\t    jit_regset_setbit(&_jitc->reglive, node->v.w);\n\t    }\n\t    if ((value & jit_cc_a2_reg) && !(node->w.w & jit_regno_patch)) {\n\t\tif (value & jit_cc_a2_chg) {\n\t\t    jit_regset_clrbit(&_jitc->reglive, node->w.w);\n\t\t    jit_regset_setbit(&_jitc->regmask, node->w.w);\n\t\t}\n\t\telse\n\t\t    jit_regset_setbit(&_jitc->reglive, node->w.w);\n\t    }\n\t    if (jit_regset_set_p(&_jitc->regmask)) {\n\t\tbmp_zero();\n\t\tjit_update(node->next, &_jitc->reglive, &_jitc->regmask);\n\t\tif (jit_regset_set_p(&_jitc->regmask)) {\n\t\t    /* any unresolved live state is considered as live */\n\t\t    jit_regset_ior(&_jitc->reglive,\n\t\t\t\t   &_jitc->reglive, &_jitc->regmask);\n\t\t    jit_regset_set_ui(&_jitc->regmask, 0);\n\t\t}\n\t    }\n\t    break;\n    }\n}",
      "lines": 87,
      "depth": 20,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_set": {
      "start_point": [
        1781,
        0
      ],
      "end_point": [
        1799,
        1
      ],
      "content": "void\n_jit_regarg_set(jit_state_t *_jit, jit_node_t *node, jit_int32_t value)\n{\n#if GET_JIT_SIZE\n    jit_size_prepare();\n#endif\n    if (value & jit_cc_a0_reg) {\n\tif (value & jit_cc_a0_rlh) {\n\t    jit_regset_setbit(&_jitc->regarg, jit_regno(node->u.q.l));\n\t    jit_regset_setbit(&_jitc->regarg, jit_regno(node->u.q.h));\n\t}\n\telse\n\t    jit_regset_setbit(&_jitc->regarg, jit_regno(node->u.w));\n    }\n    if (value & jit_cc_a1_reg)\n\tjit_regset_setbit(&_jitc->regarg, jit_regno(node->v.w));\n    if (value & jit_cc_a2_reg)\n\tjit_regset_setbit(&_jitc->regarg, jit_regno(node->w.w));\n}",
      "lines": 19,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_regarg_clr": {
      "start_point": [
        1801,
        0
      ],
      "end_point": [
        1819,
        1
      ],
      "content": "void\n_jit_regarg_clr(jit_state_t *_jit, jit_node_t *node, jit_int32_t value)\n{\n#if GET_JIT_SIZE\n    jit_size_collect(node);\n#endif\n    if (value & jit_cc_a0_reg) {\n\tif (value & jit_cc_a0_rlh) {\n\t    jit_regset_clrbit(&_jitc->regarg, jit_regno(node->u.q.l));\n\t    jit_regset_clrbit(&_jitc->regarg, jit_regno(node->u.q.h));\n\t}\n\telse\n\t    jit_regset_clrbit(&_jitc->regarg, jit_regno(node->u.w));\n    }\n    if (value & jit_cc_a1_reg)\n\tjit_regset_clrbit(&_jitc->regarg, jit_regno(node->v.w));\n    if (value & jit_cc_a2_reg)\n\tjit_regset_clrbit(&_jitc->regarg, jit_regno(node->w.w));\n}",
      "lines": 19,
      "depth": 15,
      "decorators": [
        "void"
      ]
    },
    "_jit_realize": {
      "start_point": [
        1821,
        0
      ],
      "end_point": [
        1840,
        1
      ],
      "content": "void\n_jit_realize(jit_state_t *_jit)\n{\n    assert(!_jitc->realize);\n    if (_jitc->function)\n\tjit_epilog();\n    jit_optimize();\n    _jitc->realize = 1;\n\n    /* ensure it is aligned */\n    _jitc->data.offset = (_jitc->data.offset + 7) & -8;\n\n#if GET_JIT_SIZE\n    /* Heuristic to guess code buffer size */\n    _jitc->mult = 4;\n    _jit->code.length = _jitc->pool.length * 1024 * _jitc->mult;\n#else\n    _jit->code.length = jit_get_size();\n#endif\n}",
      "lines": 20,
      "depth": 10,
      "decorators": [
        "void"
      ]
    },
    "_jit_dataset": {
      "start_point": [
        1842,
        0
      ],
      "end_point": [
        1905,
        1
      ],
      "content": "void\n_jit_dataset(jit_state_t *_jit)\n{\n    jit_uint8_t\t\t*ptr;\n    jit_node_t\t\t*node;\n    jit_word_t\t\t offset;\n#if defined(__sgi)\n    int\t\t\t mmap_fd;\n#endif\n\n    assert(!_jitc->dataset);\n    if (!_jit->user_data) {\n\n\t/* create read only data buffer */\n\t_jit->data.length = (_jitc->data.offset +\n\t\t\t     /* reserve space for annotations */\n\t\t\t     _jitc->note.size + 4095) & -4096;\n#if defined(__sgi)\n\tmmap_fd = open(\"/dev/zero\", O_RDWR);\n#endif\n\t_jit->data.ptr = mmap(NULL, _jit->data.length,\n\t\t\t      PROT_READ | PROT_WRITE,\n\t\t\t      MAP_PRIVATE | MAP_ANON, mmap_fd, 0);\n\tassert(_jit->data.ptr != MAP_FAILED);\n#if defined(__sgi)\n\tclose(mmap_fd);\n#endif\n    }\n\n    if (!_jitc->no_data)\n\tjit_memcpy(_jit->data.ptr, _jitc->data.ptr, _jitc->data.offset);\n\n    if (_jitc->no_note) {\n\t/* Space for one note is always allocated, so revert it here\n\t * if after jit_new_state was called, it is also requested to\n\t * not generate annotation information */\n\t_jit->note.length = 0;\n\t_jitc->note.size = 0;\n    }\n    else {\n\t_jitc->note.base = _jit->data.ptr;\n\tif (!_jitc->no_data)\n\t    _jitc->note.base += _jitc->data.offset;\n\tmemset(_jitc->note.base, 0, _jitc->note.size);\n    }\n\n    if (_jit->user_data)\n\t/* Need the temporary hashed data until jit_emit is finished */\n\tptr = _jitc->no_data ? _jitc->data.ptr : _jit->data.ptr;\n    else {\n\tptr = _jit->data.ptr;\n\t/* Temporary hashed data no longer required */\n\tjit_free((jit_pointer_t *)&_jitc->data.ptr);\n    }\n\n    for (offset = 0; offset < _jitc->data.size; offset++) {\n\tfor (node = _jitc->data.table[offset]; node; node = node->next) {\n\t    node->flag |= jit_flag_patch;\n\t    node->u.w = (jit_word_t)(ptr + node->u.w);\n\t}\n    }\n\n    _jitc->dataset = 1;\n}",
      "lines": 64,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_code": {
      "start_point": [
        1907,
        0
      ],
      "end_point": [
        1921,
        1
      ],
      "content": "jit_pointer_t\n_jit_get_code(jit_state_t *_jit, jit_word_t *length)\n{\n    assert(_jitc->realize);\n    if (length) {\n\tif (_jitc->done)\n\t    /* If code already generated, return exact size of code */\n\t    *length = _jit->pc.uc - _jit->code.ptr;\n\telse\n\t    /* Else return current size of the code buffer */\n\t    *length = _jit->code.length;\n    }\n\n    return (_jit->code.ptr);\n}",
      "lines": 15,
      "depth": 11,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "_jit_set_code": {
      "start_point": [
        1923,
        0
      ],
      "end_point": [
        1930,
        1
      ],
      "content": "void\n_jit_set_code(jit_state_t *_jit, jit_pointer_t ptr, jit_word_t length)\n{\n    assert(_jitc->realize);\n    _jit->code.ptr = ptr;\n    _jit->code.length = length;\n    _jit->user_code = 1;\n}",
      "lines": 8,
      "depth": 7,
      "decorators": [
        "void"
      ]
    },
    "_jit_get_data": {
      "start_point": [
        1932,
        0
      ],
      "end_point": [
        1941,
        1
      ],
      "content": "jit_pointer_t\n_jit_get_data(jit_state_t *_jit, jit_word_t *data_size, jit_word_t *note_size)\n{\n    assert(_jitc->realize);\n    if (data_size)\n\t*data_size = _jitc->data.offset;\n    if (note_size)\n\t*note_size = _jitc->note.size;\n    return (_jit->data.ptr);\n}",
      "lines": 10,
      "depth": 8,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "_jit_set_data": {
      "start_point": [
        1943,
        0
      ],
      "end_point": [
        1963,
        1
      ],
      "content": "void\n_jit_set_data(jit_state_t *_jit, jit_pointer_t ptr,\n\t      jit_word_t length, jit_word_t flags)\n{\n    assert(_jitc->realize);\n    if (flags & JIT_DISABLE_DATA)\n\t_jitc->no_data = 1;\n    else\n\tassert(length >= _jitc->data.offset);\n    if (flags & JIT_DISABLE_NOTE)\n\t_jitc->no_note = 1;\n    else {\n\tif (flags & JIT_DISABLE_DATA)\n\t    assert(length >= _jitc->note.size);\n\telse\n\t    assert(length >= _jitc->data.offset + _jitc->note.size);\n    }\n    _jit->data.ptr = ptr;\n    _jit->data.length = length;\n    _jit->user_data = 1;\n}",
      "lines": 21,
      "depth": 13,
      "decorators": [
        "void"
      ]
    },
    "_jit_emit": {
      "start_point": [
        1965,
        0
      ],
      "end_point": [
        2068,
        1
      ],
      "content": "jit_pointer_t\n_jit_emit(jit_state_t *_jit)\n{\n    jit_pointer_t\t code;\n    jit_node_t\t\t*node;\n    size_t\t\t length;\n    int\t\t\t result;\n#if defined(__sgi)\n    int\t\t\t mmap_fd;\n#endif\n\n    if (!_jitc->realize)\n\tjit_realize();\n\n    if (!_jitc->dataset)\n\tjit_dataset();\n\n    _jitc->emit = 1;\n\n    if (!_jit->user_code) {\n#if defined(__sgi)\n\tmmap_fd = open(\"/dev/zero\", O_RDWR);\n#endif\n\t_jit->code.ptr = mmap(NULL, _jit->code.length,\n\t\t\t      PROT_EXEC | PROT_READ | PROT_WRITE,\n\t\t\t      MAP_PRIVATE | MAP_ANON, mmap_fd, 0);\n\tassert(_jit->code.ptr != MAP_FAILED);\n    }\n    _jitc->code.end = _jit->code.ptr + _jit->code.length -\n\tjit_get_max_instr();\n    _jit->pc.uc = _jit->code.ptr;\n\n    for (;;) {\n\tif ((code = emit_code()) == NULL) {\n\t    _jitc->patches.offset = 0;\n\t    for (node = _jitc->head; node; node = node->next) {\n\t\tif (node->link &&\n\t\t    (node->code == jit_code_label ||\n\t\t     node->code == jit_code_epilog))\n\t\t    node->flag &= ~jit_flag_patch;\n\t    }\n\t    if (_jit->user_code)\n\t\tgoto fail;\n#if GET_JIT_SIZE\n\t    ++_jitc->mult;\n\t    length = _jitc->pool.length * 1024 * _jitc->mult;\n#else\n\t    /* Should only happen on very special cases */\n\t    length = _jit->code.length + 4096;\n#endif\n\n#if !HAVE_MREMAP\n\t    munmap(_jit->code.ptr, _jit->code.length);\n#endif\n\n#if HAVE_MREMAP\n#  if __NetBSD__\n\t    _jit->code.ptr = mremap(_jit->code.ptr, _jit->code.length,\n\t\t\t\t    _jit->code.ptr, length, 0);\n#  else\n\t    _jit->code.ptr = mremap(_jit->code.ptr, _jit->code.length,\n\t\t\t\t    length, MREMAP_MAYMOVE, NULL);\n#  endif\n#else\n\t    _jit->code.ptr = mmap(NULL, length,\n\t\t\t\t  PROT_EXEC | PROT_READ | PROT_WRITE,\n\t\t\t\t  MAP_PRIVATE | MAP_ANON, mmap_fd, 0);\n#endif\n\n\t    assert(_jit->code.ptr != MAP_FAILED);\n\t    _jit->code.length = length;\n\t    _jitc->code.end = _jit->code.ptr + _jit->code.length -\n\t\tjit_get_max_instr();\n\t    _jit->pc.uc = _jit->code.ptr;\n\t}\n\telse\n\t    break;\n    }\n\n#if defined(__sgi)\n    if (!_jit->user_code)\n\tclose(mmap_fd);\n#endif\n\n    _jitc->done = 1;\n    if (!_jitc->no_note)\n\tjit_annotate();\n\n    if (_jit->user_data)\n\tjit_free((jit_pointer_t *)&_jitc->data.ptr);\n    else {\n\tresult = mprotect(_jit->data.ptr, _jit->data.length, PROT_READ);\n\tassert(result == 0);\n    }\n    if (!_jit->user_code) {\n\tresult = mprotect(_jit->code.ptr, _jit->code.length,\n\t\t\t  PROT_READ | PROT_EXEC);\n\tassert(result == 0);\n    }\n\n    return (_jit->code.ptr);\nfail:\n    return (NULL);\n}",
      "lines": 104,
      "depth": 16,
      "decorators": [
        "jit_pointer_t"
      ]
    },
    "_jit_frame": {
      "start_point": [
        2070,
        0
      ],
      "end_point": [
        2074,
        1
      ],
      "content": "void\n_jit_frame(jit_state_t *_jit, jit_int32_t frame)\n{\n    jit_trampoline(frame, 1);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_tramp": {
      "start_point": [
        2076,
        0
      ],
      "end_point": [
        2080,
        1
      ],
      "content": "void\n_jit_tramp(jit_state_t *_jit, jit_int32_t frame)\n{\n    jit_trampoline(frame, 0);\n}",
      "lines": 5,
      "depth": 6,
      "decorators": [
        "void"
      ]
    },
    "_jit_trampoline": {
      "start_point": [
        2082,
        0
      ],
      "end_point": [
        2107,
        1
      ],
      "content": "void\n_jit_trampoline(jit_state_t *_jit, jit_int32_t frame, jit_bool_t prolog)\n{\n    jit_int32_t\t\tregno;\n\n    /* Must be called after prolog, actually, just to simplify\n     * tests and know there is a current function and that\n     * _jitc->function->self.aoff is at the before any alloca value */\n    assert(_jitc->tail && _jitc->tail->code == jit_code_prolog);\n\n    /* + 24 for 3 possible spilled temporaries (that could be a double) */\n    frame += 24;\n#if defined(__hppa__)\n    frame += _jitc->function->self.aoff;\n#else\n    frame -= _jitc->function->self.aoff;\n#endif\n    _jitc->function->frame = frame;\n    if (prolog)\n\t_jitc->function->define_frame = 1;\n    else\n\t_jitc->function->assume_frame = 1;\n    for (regno = 0; regno < _jitc->reglen; regno++)\n\tif (jit_class(_rvs[regno].spec) & jit_class_sav)\n\t    jit_regset_setbit(&_jitc->function->regset, regno);\n}",
      "lines": 26,
      "depth": 11,
      "decorators": [
        "void"
      ]
    },
    "_jit_setup": {
      "start_point": [
        2113,
        0
      ],
      "end_point": [
        2185,
        1
      ],
      "content": "static void\n_jit_setup(jit_state_t *_jit, jit_block_t *block)\n{\n#define reglive\t\t\tblock->reglive\n#define regmask\t\t\tblock->regmask\n    jit_node_t\t\t*node;\n    jit_bool_t\t\t live;\n    jit_bool_t\t\t jump;\n    unsigned long\t value;\n\n    jump = 0;\n    jit_regset_set_mask(&regmask, _jitc->reglen);\n    for (node = block->label->next; node; node = node->next) {\n\tswitch (node->code) {\n\t    case jit_code_label:\tcase jit_code_prolog:\n\t    case jit_code_epilog:\n\t\treturn;\n\t    default:\n\t\tvalue = jit_classify(node->code);\n\t\tif (value & jit_cc_a0_reg) {\n\t\t    live = !(value & jit_cc_a0_chg);\n\t\t    if (value & jit_cc_a0_rlh) {\n\t\t\tif (!(node->u.q.l & jit_regno_patch) &&\n\t\t\t    jit_regset_tstbit(&regmask, node->u.q.l)) {\n\t\t\t    if (live || !jump)\n\t\t\t\tjit_regset_clrbit(&regmask, node->u.q.l);\n\t\t\t    if (live)\n\t\t\t\tjit_regset_setbit(&reglive, node->u.q.l);\n\t\t\t}\n\t\t\tif (!(node->u.q.h & jit_regno_patch) &&\n\t\t\t    jit_regset_tstbit(&regmask, node->u.q.h)) {\n\t\t\t    if (live || !jump)\n\t\t\t\tjit_regset_clrbit(&regmask, node->u.q.h);\n\t\t\t    if (live)\n\t\t\t\tjit_regset_setbit(&reglive, node->u.q.h);\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tif (!(node->u.w & jit_regno_patch) &&\n\t\t\t    jit_regset_tstbit(&regmask, node->u.w)) {\n\t\t\t    if (live || !jump)\n\t\t\t\tjit_regset_clrbit(&regmask, node->u.w);\n\t\t\t    if (live)\n\t\t\t\tjit_regset_setbit(&reglive, node->u.w);\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif ((value & jit_cc_a1_reg) &&\n\t\t    !(node->v.w & jit_regno_patch) &&\n\t\t    jit_regset_tstbit(&regmask, node->v.w)) {\n\t\t    live = !(value & jit_cc_a1_chg);\n\t\t    if (live || !jump)\n\t\t\tjit_regset_clrbit(&regmask, node->v.w);\n\t\t    if (live)\n\t\t\tjit_regset_setbit(&reglive, node->v.w);\n\t\t}\n\t\tif ((value & jit_cc_a2_reg) &&\n\t\t    !(node->w.w & jit_regno_patch) &&\n\t\t    jit_regset_tstbit(&regmask, node->w.w)) {\n\t\t    live = !(value & jit_cc_a2_chg);\n\t\t    if (live || !jump)\n\t\t\tjit_regset_clrbit(&regmask, node->w.w);\n\t\t    if (live)\n\t\t\tjit_regset_setbit(&reglive, node->w.w);\n\t\t}\n\t\tif (value & jit_cc_a0_jmp)\n\t\t    jump = 1;\n\t\tbreak;\n\t}\n    }\n#undef regmask\n#undef reglive\n}",
      "lines": 73,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_jit_update": {
      "start_point": [
        2193,
        0
      ],
      "end_point": [
        2350,
        1
      ],
      "content": "static void\n_jit_update(jit_state_t *_jit, jit_node_t *node,\n\t    jit_regset_t *live, jit_regset_t *mask)\n{\n    jit_int32_t\t\t spec;\n    jit_int32_t\t\t regno;\n    jit_regset_t\t ztmp;\n    jit_regset_t\t zmask;\n    unsigned long\t value;\n    jit_block_t\t\t*block;\n    jit_node_t\t\t*label;\n\n    for (; node; node = node->next) {\n    restart:\n\tif (jit_regset_set_p(mask) == 0)\n\t    break;\n\tswitch (node->code) {\n\t    case jit_code_label:\n\t\tblock = _jitc->blocks.ptr + node->v.w;\n\t\tjit_regset_and(&ztmp, mask, &block->reglive);\n\t\tif (jit_regset_set_p(&ztmp)) {\n\t\t    jit_regset_ior(live, live, &ztmp);\n\t\t    jit_regset_com(&ztmp, &ztmp);\n\t\t    jit_regset_and(mask, mask, &ztmp);\n\t\t}\n\t\tif (bmp_tst(node->v.w))\n\t\t    return;\n\t\tbmp_set(node->v.w);\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\tjit_regset_set_ui(mask, 0);\n\t\treturn;\n\t    case jit_code_epilog:\n\t\tjit_regset_set_ui(mask, 0);\n\t\treturn;\n\t    case jit_code_callr:\n\t\tvalue = jit_regno(node->u.w);\n\t\tif (!(node->u.w & jit_regno_patch)) {\n\t\t    if (jit_regset_tstbit(mask, value)) {\n\t\t\tjit_regset_clrbit(mask, value);\n\t\t\tjit_regset_setbit(live, value);\n\t\t    }\n\t\t}\n\t    case jit_code_calli:\n\t\tfor (value = 0; value < _jitc->reglen; ++value) {\n\t\t    value = jit_regset_scan1(mask, value);\n\t\t    if (value >= _jitc->reglen)\n\t\t\tbreak;\n\t\t    spec = jit_class(_rvs[value].spec);\n\t\t    if (!(spec & jit_class_sav))\n\t\t\tjit_regset_clrbit(mask, value);\n\t\t    if ((spec & jit_class_arg) && jit_regarg_p(node, value))\n\t\t\tjit_regset_setbit(live, value);\n\t\t}\n\t\tbreak;\n\t    default:\n\t\tvalue = jit_classify(node->code);\n\t\tif (value & jit_cc_a2_reg) {\n\t\t    if (!(node->w.w & jit_regno_patch)) {\n\t\t\tif (jit_regset_tstbit(mask, node->w.w)) {\n\t\t\t    jit_regset_clrbit(mask, node->w.w);\n\t\t\t    if (!(value & jit_cc_a2_chg))\n\t\t\t\tjit_regset_setbit(live, node->w.w);\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (value & jit_cc_a1_reg) {\n\t\t    if (!(node->v.w & jit_regno_patch)) {\n\t\t\tif (jit_regset_tstbit(mask, node->v.w)) {\n\t\t\t    jit_regset_clrbit(mask, node->v.w);\n\t\t\t    if (!(value & jit_cc_a1_chg))\n\t\t\t\tjit_regset_setbit(live, node->v.w);\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (value & jit_cc_a0_reg) {\n\t\t    if (value & jit_cc_a0_rlh) {\n\t\t\tif (!(node->u.q.l & jit_regno_patch)) {\n\t\t\t    if (jit_regset_tstbit(mask, node->u.q.l)) {\n\t\t\t\tjit_regset_clrbit(mask, node->u.q.l);\n\t\t\t\tif (!(value & jit_cc_a0_chg))\n\t\t\t\t    jit_regset_setbit(live, node->u.q.l);\n\t\t\t    }\n\t\t\t}\n\t\t\tif (!(node->u.q.h & jit_regno_patch)) {\n\t\t\t    if (jit_regset_tstbit(mask, node->u.q.h)) {\n\t\t\t\tjit_regset_clrbit(mask, node->u.q.h);\n\t\t\t\tif (!(value & jit_cc_a0_chg))\n\t\t\t\t    jit_regset_setbit(live, node->u.q.h);\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t    else {\n\t\t\tif (!(node->u.w & jit_regno_patch)) {\n\t\t\t    if (jit_regset_tstbit(mask, node->u.w)) {\n\t\t\t\tjit_regset_clrbit(mask, node->u.w);\n\t\t\t\tif (!(value & jit_cc_a0_chg))\n\t\t\t\t    jit_regset_setbit(live, node->u.w);\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (value & jit_cc_a0_jmp) {\n\t\t    if (node->flag & jit_flag_node) {\n\t\t\tlabel = node->u.n;\n\t\t\tif (node->code == jit_code_jmpi) {\n\t\t\t    node = label;\n\t\t\t    goto restart;\n\t\t\t}\n\t\t\tblock = _jitc->blocks.ptr + label->v.w;\n\t\t\tjit_regset_and(&ztmp, mask, &block->reglive);\n\t\t\tif (jit_regset_set_p(&ztmp)) {\n\t\t\t    jit_regset_ior(live, live, &ztmp);\n\t\t\t    jit_regset_com(&ztmp, &ztmp);\n\t\t\t    jit_regset_and(mask, mask, &ztmp);\n\t\t\t}\n\t\t\tif (bmp_tst(label->v.w))\n\t\t\t    continue;\n\t\t\tbmp_set(label->v.w);\n\t\t\tif (jit_regset_set_p(mask) == 0)\n\t\t\t    return;\n\t\t\t/* restore mask if branch is conditional */\n\t\t\tjit_regset_set(&zmask, mask);\n\t\t\tjit_update(block->label->next, live, &zmask);\n\t\t\tjit_regset_xor(&ztmp, &zmask, mask);\n\t\t\t/* remove known live registers from mask */\n\t\t\tif (jit_regset_set_p(&ztmp)) {\n\t\t\t    jit_regset_and(&ztmp, &ztmp, live);\n\t\t\t    jit_regset_com(&ztmp, &ztmp);\n\t\t\t    jit_regset_and(mask, mask, &ztmp);\n\t\t\t}\n\t\t\tcontinue;\n\t\t    }\n\t\t    /* Should not really mark as live all registers in unknown\n\t\t     * state if using jit_jmpr(), or jit_jmpi(absolute_address)\n\t\t     * because that would leave the register allocator with\n\t\t     * no options for \"nospill\" temporaries (other temporaries\n\t\t     * also benefit from not needing to spill/reload), so, the\n\t\t     * user must ensure to either spill/reload, or only leave\n\t\t     * live values on registers that are advertised as\n\t\t     * callee save (as per jit_callee_save_p); on most targets\n\t\t     * these are the JIT_Vn registers. */\n\t\t    for (regno = 0; regno < _jitc->reglen; regno++) {\n\t\t\tspec = jit_class(_rvs[regno].spec);\n\t\t\tif (jit_regset_tstbit(mask, regno) &&\n\t\t\t    (spec & (jit_class_gpr|jit_class_fpr)) &&\n\t\t\t    !(spec & jit_class_sav))\n\t\t\t    jit_regset_clrbit(mask, regno);\n\t\t    }\n\t\t    /* assume value is live due to jump to unknown location */\n\t\t    jit_regset_ior(live, live, mask);\n\t\t    jit_regset_set_ui(mask, 0);\n\t\t    return;\n\t\t}\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 158,
      "depth": 23,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_thread_jumps": {
      "start_point": [
        2352,
        0
      ],
      "end_point": [
        2387,
        1
      ],
      "content": "static void\n_thread_jumps(jit_state_t *_jit)\n{\n    jit_node_t\t\t*prev;\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*next;\n    jit_int32_t\t\t mask;\n\n    for (prev = node = _jitc->head; node;) {\n\tnext = node->next;\n\tswitch (node->code) {\n\t    case jit_code_jmpi:\n\t\tif (redundant_jump(prev, node)) {\n\t\t    node = prev;\n\t\t    continue;\n\t\t}\n\t\tif (shortcut_jump(prev, node))\n\t\t    continue;\n\t\tbreak;\n\t    case jit_code_jmpr:\n\t    case jit_code_callr:\tcase jit_code_calli:\n\t\t/* non optimizable jump like code */\n\t\tbreak;\n\t    default:\n\t\tmask = jit_classify(node->code);\n\t\tif (mask & jit_cc_a0_jmp) {\n\t\t    if (reverse_jump(prev, node) ||\n\t\t\tshortcut_jump(prev, node))\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\n\tprev = node;\n\tnode = next;\n    }\n}",
      "lines": 36,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_sequential_labels": {
      "start_point": [
        2389,
        0
      ],
      "end_point": [
        2437,
        1
      ],
      "content": "static void\n_sequential_labels(jit_state_t *_jit)\n{\n    jit_node_t\t\t*jump;\n    jit_node_t\t\t*link;\n    jit_node_t\t\t*prev;\n    jit_node_t\t\t*next;\n    jit_node_t\t\t*node;\n\n    for (prev = node = _jitc->head; node; node = next) {\n\tnext = node->next;\n\tif (node->code == jit_code_label) {\n\t    if (!node->flag) {\n\t\tif (!node->link) {\n\t\t    del_label(prev, node);\n\t\t    continue;\n\t\t}\n\t\tif (prev != node && prev->code == jit_code_label) {\n\t\t    if ((jump = node->link)) {\n\t\t\tfor (; jump; jump = link) {\n\t\t\t    link = jump->link;\n\t\t\t    jump->u.n = prev;\n\t\t\t    jump->link = prev->link;\n\t\t\t    prev->link = jump;\n\t\t\t}\n\t\t\tnode->link = NULL;\n\t\t    }\n\t\t    del_label(prev, node);\n\t\t    continue;\n\t\t}\n\t    }\n\t    if (next && next->code == jit_code_label && !next->flag) {\n\t\tif ((jump = next->link)) {\n\t\t    for (; jump; jump = link) {\n\t\t\tlink = jump->link;\n\t\t\tjump->u.n = node;\n\t\t\tjump->link = node->link;\n\t\t\tnode->link = jump;\n\t\t    }\n\t\t    next->link = NULL;\n\t\t}\n\t\tdel_label(node, next);\n\t\tnext = node->next;\n\t\tcontinue;\n\t    }\n\t}\n\tprev = node;\n    }\n}",
      "lines": 49,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_shortcut_jump": {
      "start_point": [
        2439,
        0
      ],
      "end_point": [
        2486,
        1
      ],
      "content": "static jit_bool_t\n_shortcut_jump(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_bool_t\t\t cond;\n    jit_node_t\t\t*jump;\n    jit_node_t\t\t*next;\n    jit_node_t\t\t*temp;\n\n    if (!(node->flag & jit_flag_node))\n\treturn (0);\n    assert(node->code != jit_code_jmpr);\n    cond = node->code != jit_code_jmpi;\n    jump = node->u.n;\n    for (next = jump->next; next; next = next->next) {\n\tswitch (next->code) {\n\t    case jit_code_jmpi:\n\t\tif (!(next->flag & jit_flag_node))\n\t\t    return (0);\n\t\tif (jump->link == node)\n\t\t    jump->link = node->link;\n\t\telse {\n\t\t    for (temp = jump->link;\n\t\t\t temp->link != node;\n\t\t\t temp = temp->link)\n\t\t\tassert(temp != NULL);\n\t\t    temp->link = node->link;\n\t\t}\n\t\tjump = next->u.n;\n\t\tnode->u.n = jump;\n\t\tnode->link = jump->link;\n\t\tjump->link = node;\n\t\treturn (1);\n\t    case jit_code_jmpr:\n\t\tif (cond)\n\t\t    return (0);\n\t\tnode->code = jit_code_jmpr;\n\t\tnode->u.w = next->u.w;\n\t\tnode->link = NULL;\n\t\tnode->flag &= ~jit_flag_node;\n\t\treturn (1);\n\t    case jit_code_note:\t\tcase jit_code_label:\n\t\tbreak;\n\t    default:\n\t\treturn (0);\n\t}\n    }\n    return (0);\n}",
      "lines": 48,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_redundant_jump": {
      "start_point": [
        2488,
        0
      ],
      "end_point": [
        2524,
        1
      ],
      "content": "static jit_bool_t\n_redundant_jump(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_node_t\t\t*local_prev;\n    jit_node_t\t\t*local_next;\n\n    if (!(node->flag & jit_flag_node))\n\treturn (0);\n    for (local_prev = node, local_next = node->next;\n\t local_next;\n\t local_prev = local_next, local_next = local_next->next) {\n\n\tswitch (local_next->code) {\n\t    case jit_code_label:\tcase jit_code_epilog:\n\t\tif (node->u.n == local_next) {\n\t\t    if (local_next->link == node)\n\t\t\tlocal_next->link = node->link;\n\t\t    else {\n\t\t\tfor (local_prev = local_next->link;\n\t\t\t     local_prev->link != node;\n\t\t\t     local_prev = local_prev->link)\n\t\t\t    assert(local_prev != NULL);\n\t\t\tlocal_prev->link = node->link;\n\t\t    }\n\t\t    del_node(prev, node);\n\t\t    return (1);\n\t\t}\n\t\tbreak;\n\t    case jit_code_name:\t\tcase jit_code_note:\n\t    case jit_code_align:\n\t\tbreak;\n\t    default:\n\t\treturn (0);\n\t}\n    }\n    return (0);\n}",
      "lines": 37,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "reverse_jump_code": {
      "start_point": [
        2526,
        0
      ],
      "end_point": [
        2644,
        1
      ],
      "content": "static jit_code_t\nreverse_jump_code(jit_code_t code)\n{\n    switch (code) {\n\tcase jit_code_bltr:\treturn (jit_code_bger);\n\tcase jit_code_blti:\treturn (jit_code_bgei);\n\tcase jit_code_bltr_u:\treturn (jit_code_bger_u);\n\tcase jit_code_blti_u:\treturn (jit_code_bgei_u);\n\tcase jit_code_bler:\treturn (jit_code_bgtr);\n\tcase jit_code_blei:\treturn (jit_code_bgti);\n\tcase jit_code_bler_u:\treturn (jit_code_bgtr_u);\n\tcase jit_code_blei_u:\treturn (jit_code_bgti_u);\n\tcase jit_code_beqr:\treturn (jit_code_bner);\n\tcase jit_code_beqi:\treturn (jit_code_bnei);\n\tcase jit_code_bger:\treturn (jit_code_bltr);\n\tcase jit_code_bgei:\treturn (jit_code_blti);\n\tcase jit_code_bger_u:\treturn (jit_code_bltr_u);\n\tcase jit_code_bgei_u:\treturn (jit_code_blti_u);\n\tcase jit_code_bgtr:\treturn (jit_code_bler);\n\tcase jit_code_bgti:\treturn (jit_code_blei);\n\tcase jit_code_bgtr_u:\treturn (jit_code_bler_u);\n\tcase jit_code_bgti_u:\treturn (jit_code_blei_u);\n\tcase jit_code_bner:\treturn (jit_code_beqr);\n\tcase jit_code_bnei:\treturn (jit_code_beqi);\n\tcase jit_code_bmsr:\treturn (jit_code_bmcr);\n\tcase jit_code_bmsi:\treturn (jit_code_bmci);\n\tcase jit_code_bmcr:\treturn (jit_code_bmsr);\n\tcase jit_code_bmci:\treturn (jit_code_bmsi);\n\tcase jit_code_bltr_f:\treturn (jit_code_bunger_f);\n\tcase jit_code_blti_f:\treturn (jit_code_bungei_f);\n\tcase jit_code_bler_f:\treturn (jit_code_bungtr_f);\n\tcase jit_code_blei_f:\treturn (jit_code_bungti_f);\n\n\tcase jit_code_beqr_f:\treturn (jit_code_bner_f);\n\tcase jit_code_beqi_f:\treturn (jit_code_bnei_f);\n\n\tcase jit_code_bger_f:\treturn (jit_code_bunltr_f);\n\tcase jit_code_bgei_f:\treturn (jit_code_bunlti_f);\n\tcase jit_code_bgtr_f:\treturn (jit_code_bunler_f);\n\tcase jit_code_bgti_f:\treturn (jit_code_bunlei_f);\n\n\tcase jit_code_bner_f:\treturn (jit_code_beqr_f);\n\tcase jit_code_bnei_f:\treturn (jit_code_beqr_f);\n\n\tcase jit_code_bunltr_f:\treturn (jit_code_bger_f);\n\tcase jit_code_bunlti_f:\treturn (jit_code_bgei_f);\n\tcase jit_code_bunler_f:\treturn (jit_code_bgtr_f);\n\tcase jit_code_bunlei_f:\treturn (jit_code_bgti_f);\n\n\tcase jit_code_buneqr_f:\treturn (jit_code_bltgtr_f);\n\tcase jit_code_buneqi_f:\treturn (jit_code_bltgti_f);\n\n\tcase jit_code_bunger_f:\treturn (jit_code_bltr_f);\n\tcase jit_code_bungei_f:\treturn (jit_code_blti_f);\n\tcase jit_code_bungtr_f:\treturn (jit_code_bler_f);\n\tcase jit_code_bungti_f:\treturn (jit_code_blei_f);\n\n\tcase jit_code_bltgtr_f:\treturn (jit_code_buneqr_f);\n\tcase jit_code_bltgti_f:\treturn (jit_code_buneqi_f);\n\n\tcase jit_code_bordr_f:\treturn (jit_code_bunordr_f);\n\tcase jit_code_bordi_f:\treturn (jit_code_bunordi_f);\n\tcase jit_code_bunordr_f:return (jit_code_bordr_f);\n\tcase jit_code_bunordi_f:return (jit_code_bordi_f);\n\tcase jit_code_bltr_d:\treturn (jit_code_bunger_d);\n\tcase jit_code_blti_d:\treturn (jit_code_bungei_d);\n\tcase jit_code_bler_d:\treturn (jit_code_bungtr_d);\n\tcase jit_code_blei_d:\treturn (jit_code_bungti_d);\n\n\tcase jit_code_beqr_d:\treturn (jit_code_bner_d);\n\tcase jit_code_beqi_d:\treturn (jit_code_bnei_d);\n\n\tcase jit_code_bger_d:\treturn (jit_code_bunltr_d);\n\tcase jit_code_bgei_d:\treturn (jit_code_bunlti_d);\n\tcase jit_code_bgtr_d:\treturn (jit_code_bunler_d);\n\tcase jit_code_bgti_d:\treturn (jit_code_bunlei_d);\n\n\tcase jit_code_bner_d:\treturn (jit_code_beqr_d);\n\tcase jit_code_bnei_d:\treturn (jit_code_beqi_d);\n\n\tcase jit_code_bunltr_d:\treturn (jit_code_bger_d);\n\tcase jit_code_bunlti_d:\treturn (jit_code_bgei_d);\n\tcase jit_code_bunler_d:\treturn (jit_code_bgtr_d);\n\tcase jit_code_bunlei_d:\treturn (jit_code_bgti_d);\n\n\tcase jit_code_buneqr_d:\treturn (jit_code_bltgtr_d);\n\tcase jit_code_buneqi_d:\treturn (jit_code_bltgti_d);\n\n\tcase jit_code_bunger_d:\treturn (jit_code_bltr_d);\n\tcase jit_code_bungei_d:\treturn (jit_code_blti_d);\n\tcase jit_code_bungtr_d:\treturn (jit_code_bler_d);\n\tcase jit_code_bungti_d:\treturn (jit_code_blei_d);\n\n\tcase jit_code_bltgtr_d:\treturn (jit_code_buneqr_d);\n\tcase jit_code_bltgti_d:\treturn (jit_code_buneqi_d);\n\n\tcase jit_code_bordr_d:\treturn (jit_code_bunordr_d);\n\tcase jit_code_bordi_d:\treturn (jit_code_bunordi_d);\n\tcase jit_code_bunordr_d:return (jit_code_bordr_d);\n\tcase jit_code_bunordi_d:return (jit_code_bordi_d);\n\tcase jit_code_boaddr:\treturn (jit_code_bxaddr);\n\tcase jit_code_boaddi:\treturn (jit_code_bxaddi);\n\tcase jit_code_boaddr_u:\treturn (jit_code_bxaddr_u);\n\tcase jit_code_boaddi_u:\treturn (jit_code_bxaddi_u);\n\tcase jit_code_bxaddr:\treturn (jit_code_boaddr);\n\tcase jit_code_bxaddi:\treturn (jit_code_boaddi);\n\tcase jit_code_bxaddr_u:\treturn (jit_code_boaddr_u);\n\tcase jit_code_bxaddi_u:\treturn (jit_code_boaddi_u);\n\tcase jit_code_bosubr:\treturn (jit_code_bxsubr);\n\tcase jit_code_bosubi:\treturn (jit_code_bxsubi);\n\tcase jit_code_bosubr_u:\treturn (jit_code_bxsubr_u);\n\tcase jit_code_bosubi_u:\treturn (jit_code_bxsubi_u);\n\tcase jit_code_bxsubr:\treturn (jit_code_bosubr);\n\tcase jit_code_bxsubi:\treturn (jit_code_bosubi);\n\tcase jit_code_bxsubr_u:\treturn (jit_code_bosubr_u);\n\tcase jit_code_bxsubi_u:\treturn (jit_code_bosubi_u);\n\tdefault:\t\tabort();\t/* invalid jump code */\n    }\n}",
      "lines": 119,
      "depth": 9,
      "decorators": [
        "static",
        "static",
        "jit_code_t"
      ]
    },
    "_reverse_jump": {
      "start_point": [
        2652,
        0
      ],
      "end_point": [
        2699,
        1
      ],
      "content": "static jit_bool_t\n_reverse_jump(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_node_t\t\t*local_prev;\n    jit_node_t\t\t*local_next;\n    jit_node_t\t\t*local_jump;\n\n    if (!(node->flag & jit_flag_node))\n\treturn (0);\n    /* =><cond_jump L0> <jump L1> <label L0> */\n    local_next = node->next;\n    if (local_next->code != jit_code_jmpi ||\n\t!(local_next->flag & jit_flag_node))\n\treturn (0);\n    /* <cond_jump L0> =><jump L1> <label L0> */\n\n    local_jump = local_next->u.n;\n    for (local_prev = local_next, local_next = local_next->next;\n\t local_next;\n\t local_prev = local_next, local_next = local_next->next) {\n\tswitch (local_next->code) {\n\t    case jit_code_label:\tcase jit_code_epilog:\n\t\tif (node->u.n == local_next) {\n\t\t    if (local_next->link == node)\n\t\t\tlocal_next->link = node->link;\n\t\t    else {\n\t\t\tfor (local_prev = local_next->link;\n\t\t\t     local_prev->link != node;\n\t\t\t     local_prev = local_prev->link)\n\t\t\t    assert(local_prev != NULL);\n\t\t\tlocal_prev->link = node->link;\n\t\t    }\n\t\t    del_node(node, node->next);\n\t\t    node->code = reverse_jump_code(node->code);\n\t\t    node->u.n = local_jump;\n\t\t    node->link = local_jump->link;\n\t\t    local_jump->link = node;\n\t\t    return (1);\n\t\t}\n\t\tbreak;\n\t    case jit_code_note:\n\t\tbreak;\n\t    default:\n\t\treturn (0);\n\t}\n    }\n    return (0);\n}",
      "lines": 48,
      "depth": 17,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_redundant_store": {
      "start_point": [
        2701,
        0
      ],
      "end_point": [
        2766,
        1
      ],
      "content": "static void\n_redundant_store(jit_state_t *_jit, jit_node_t *node, jit_bool_t jump)\n{\n    jit_node_t\t\t*iter;\n    jit_node_t\t\t*prev;\n    jit_word_t\t\t word;\n    jit_int32_t\t\t spec;\n    jit_int32_t\t\t regno;\n\n    if (jump) {\n\tprev = node->u.n;\n\tif (prev->code == jit_code_epilog)\n\t    return;\n\tassert(prev->code == jit_code_label);\n\tif ((prev->flag & jit_flag_head) || node->link || prev->link != node)\n\t    /* multiple sources */\n\t    return;\n\t/* if there are sequential labels it will return below */\n    }\n    else\n\tprev = node;\n    word = node->w.w;\n    regno = jit_regno(node->v.w);\n    for (iter = prev->next; iter; prev = iter, iter = iter->next) {\n\tswitch (iter->code) {\n\t    case jit_code_label:\tcase jit_code_prolog:\n\t    case jit_code_epilog:\n\t\treturn;\n\t    case jit_code_movi:\n\t\tif (regno == jit_regno(iter->u.w)) {\n\t\t    if (iter->flag || iter->v.w != word)\n\t\t\treturn;\n\t\t    del_node(prev, iter);\n\t\t    iter = prev;\n\t\t}\n\t\tbreak;\n\t    default:\n\t\tspec = jit_classify(iter->code);\n\t\tif (spec & jit_cc_a0_jmp)\n\t\t    return;\n\t\tif ((spec & (jit_cc_a0_reg|jit_cc_a0_chg)) ==\n\t\t    (jit_cc_a0_reg|jit_cc_a0_chg)) {\n\t\t    if (spec & jit_cc_a0_rlh) {\n\t\t\tif (regno == jit_regno(iter->u.q.l) ||\n\t\t\t    regno == jit_regno(iter->u.q.h))\n\t\t\t    return;\n\t\t    }\n\t\t    else {\n\t\t\tif (regno == jit_regno(iter->u.w))\n\t\t\t    return;\n\t\t    }\n\t\t}\n\t\tif ((spec & (jit_cc_a1_reg|jit_cc_a1_chg)) ==\n\t\t    (jit_cc_a1_reg|jit_cc_a1_chg)) {\n\t\t    if (regno == jit_regno(iter->v.w))\n\t\t\treturn;\n\t\t}\n\t\tif ((spec & (jit_cc_a2_reg|jit_cc_a2_chg)) ==\n\t\t    (jit_cc_a2_reg|jit_cc_a2_chg)) {\n\t\t    if (regno == jit_regno(iter->w.w))\n\t\t\treturn;\n\t\t}\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 66,
      "depth": 21,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_simplify_movr": {
      "start_point": [
        2768,
        0
      ],
      "end_point": [
        2797,
        1
      ],
      "content": "static jit_bool_t\n_simplify_movr(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node,\n\t       jit_int32_t kind, jit_int32_t size)\n{\n    jit_int32_t\t\t regno;\n    jit_int32_t\t\t right;\n    jit_value_t\t\t*value;\n\n    regno = jit_regno(node->u.w);\n    right = jit_regno(node->v.w);\n    value = _jitc->values + regno;\n    if ((value->kind == jit_kind_register &&\n\t jit_regno(value->base.q.l) == right &&\n\t value->base.q.h == _jitc->gen[right]) ||\n\t(value->kind == kind && _jitc->values[right].kind == kind &&\n\t memcmp(&value->base.w, &_jitc->values[right].base.w, size) == 0)) {\n\tdel_node(prev, node);\n\treturn (1);\n    }\n    if (_jitc->values[right].kind == jit_kind_word)\n\tjit_memcpy(value, _jitc->values + right, sizeof(jit_value_t));\n    else {\n\tvalue->kind = jit_kind_register;\n\tvalue->base.q.l = right;\n\tvalue->base.q.h = _jitc->gen[right];\n    }\n    ++_jitc->gen[regno];\n\n    return (0);\n}",
      "lines": 30,
      "depth": 16,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_simplify_movi": {
      "start_point": [
        2799,
        0
      ],
      "end_point": [
        2848,
        1
      ],
      "content": "static jit_bool_t\n_simplify_movi(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node,\n\t       jit_int32_t kind, jit_int32_t size)\n{\n    jit_value_t\t\t*value;\n    jit_int32_t\t\t spec;\n    jit_int32_t\t\t regno;\n    jit_int32_t\t\t offset;\n\n    regno = jit_regno(node->u.w);\n    value = _jitc->values + regno;\n    if (node->flag & jit_flag_node) {\n\t/* set to undefined if value will be patched */\n\tvalue->kind = 0;\n\t++_jitc->gen[regno];\n\treturn (0);\n    }\n    if (value->kind == kind) {\n\tif (memcmp(&node->v.w, &value->base.w, size) == 0) {\n\t    del_node(prev, node);\n\t    return (1);\n\t}\n\tspec = jit_class(_rvs[regno].spec);\n\tif (kind == jit_kind_word)\n\t    spec &= jit_class_gpr;\n\telse\n\t    spec &= (jit_class_xpr | jit_class_fpr);\n\tfor (offset = 0; offset < _jitc->reglen; offset++) {\n\t    if (_jitc->values[offset].kind == kind &&\n\t\tmemcmp(&node->v.w, &_jitc->values[offset].base.w, size) == 0 &&\n\t\t(jit_class(_rvs[offset].spec) & spec) == spec) {\n\t\tif (kind == jit_kind_word)\n\t\t    node->code = jit_code_movr;\n\t\telse if (kind == jit_kind_float32)\n\t\t    node->code = jit_code_movr_f;\n\t\telse\n\t\t    node->code = jit_code_movr_d;\n\t\tnode->v.w = offset;\n\t\tjit_memcpy(value, _jitc->values + offset, sizeof(jit_value_t));\n\t\t++_jitc->gen[regno];\n\t\treturn (0);\n\t    }\n\t}\n    }\n    value->kind = kind;\n    jit_memcpy(&value->base.w, &node->v.w, size);\n    ++_jitc->gen[regno];\n\n    return (0);\n}",
      "lines": 50,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_simplify_ldxi": {
      "start_point": [
        2853,
        0
      ],
      "end_point": [
        2878,
        1
      ],
      "content": "static jit_bool_t\n_simplify_ldxi(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_value_t\t\t*value;\n    jit_int32_t\t\t regno;\n    jit_int32_t\t\t right;\n\n    regno = jit_regno(node->u.w);\n    right = jit_regno(node->v.w);\n    value = _jitc->values + regno;\n    if (regno != right &&\n\tvalue->kind == jit_kind_code && value->code == node->code &&\n\tvalue->base.q.l == right && value->base.q.h == _jitc->gen[right] &&\n\tnode->w.w == value->disp.w) {\n\tdel_node(prev, node);\n\treturn (1);\n    }\n    value->kind = jit_kind_code;\n    value->code = node->code;\n    value->base.q.l = right;\n    value->base.q.h = _jitc->gen[right];\n    value->disp.w = node->w.w;\n    ++_jitc->gen[regno];\n\n    return (0);\n}",
      "lines": 26,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_simplify_stxi": {
      "start_point": [
        2880,
        0
      ],
      "end_point": [
        2930,
        1
      ],
      "content": "static jit_bool_t\n_simplify_stxi(jit_state_t *_jit, jit_node_t *prev, jit_node_t *node)\n{\n    jit_value_t\t\t*value;\n    jit_int32_t\t\t regno;\n    jit_int32_t\t\t right;\n    jit_int32_t\t\t offset;\n\n    regno = jit_regno(node->w.w);\n    right = jit_regno(node->v.w);\n    value = _jitc->values + regno;\n\n    /* check for redundant store after load */\n    if (regno != right &&\n\tvalue->kind == jit_kind_code && value->code == node->code &&\n\tvalue->base.q.l == right && value->base.q.h == _jitc->gen[right] &&\n\tnode->u.w == value->disp.w) {\n\tdel_node(prev, node);\n\treturn (1);\n    }\n\n    /* assume anything can alias, and invalidate tracked values */\n    for (offset = 0; offset < _jitc->reglen; offset++) {\n\tif (_jitc->values[offset].kind == jit_kind_code) {\n\t    _jitc->values[offset].kind = 0;\n\t    ++_jitc->gen[offset];\n\t}\n    }\n\n    /* no multiple information, so, if set to a constant,\n     * prefer to keep that information */\n    if (value->kind == 0) {\n\tvalue->kind = jit_kind_code;\n\tswitch (node->code) {\n\t    /* no information about signed/unsigned either */\n\t    case jit_code_stxi_c:\tvalue->code = jit_code_ldxi_c;\tbreak;\n\t    case jit_code_stxi_s:\tvalue->code = jit_code_ldxi_s;\tbreak;\n\t    case jit_code_stxi_i:\tvalue->code = jit_code_ldxi_i;\tbreak;\n\t    case jit_code_stxi_l:\tvalue->code = jit_code_ldxi_l;\tbreak;\n\t    case jit_code_stxi_f:\tvalue->code = jit_code_ldxi_f;\tbreak;\n\t    case jit_code_stxi_d:\tvalue->code = jit_code_ldxi_d;\tbreak;\n\t    default:\t\t \tabort();\n\t}\n\tvalue->kind = jit_kind_code;\n\tvalue->base.q.l = right;\n\tvalue->base.q.h = _jitc->gen[right];\n\tvalue->disp.w = node->u.w;\n    }\n\n    return (0);\n}",
      "lines": 51,
      "depth": 12,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_simplify_spill": {
      "start_point": [
        2935,
        0
      ],
      "end_point": [
        2947,
        1
      ],
      "content": "static void\n_simplify_spill(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    jit_node_t\t\t*save;\n    jit_node_t\t\t*temp;\n\n    if ((temp = _jitc->spill[regno]) && (save = temp->next) != node) {\n\ttemp->next = save->next;\n\tsave->next = node->next;\n\tnode->next = save;\n\t_jitc->spill[regno] = node;\n    }\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_simplify": {
      "start_point": [
        2953,
        0
      ],
      "end_point": [
        3076,
        1
      ],
      "content": "static void\n_simplify(jit_state_t *_jit)\n{\n    jit_node_t\t\t*prev;\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*next;\n    jit_int32_t\t\t info;\n    jit_int32_t\t\t regno;\n\n    for (prev = NULL, node = _jitc->head; node; prev = node, node = next) {\n\tnext = node->next;\n\tswitch (node->code) {\n\t    case jit_code_label:\tcase jit_code_prolog:\n\t    case jit_code_callr:\tcase jit_code_calli:\n\t    reset:\n\t\tmemset(_jitc->gen, 0, sizeof(jit_int32_t) * _jitc->reglen);\n\t\tmemset(_jitc->values, 0, sizeof(jit_value_t) * _jitc->reglen);\n\t\tbreak;\n\t    case jit_code_save:\n\t\t_jitc->spill[jit_regno(node->u.w)] = prev;\n\t\tbreak;\n\t    case jit_code_load:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (register_change_p(node->link->next, node, regno) !=\n\t\t    jit_reg_change) {\n\t\t    /* spill not required due to optimizing common\n\t\t     * redundancy case of calling jit_get_reg/jit_unget_reg\n\t\t     * and then setting the register to the value it is\n\t\t     * already holding */\n\t\t    patch_register(node->link->next, node,\n\t\t\t\t   jit_regno_patch|regno, regno);\n\t\t    del_node(_jitc->spill[regno], node->link);\n\t\t    del_node(prev, node);\n\t\t    node = prev;\n\t\t}\n\t\t_jitc->spill[regno] = NULL;\n\t\tbreak;\n\t    case jit_code_movr:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movr(prev, node,\n\t\t\t\t  jit_kind_word, sizeof(jit_word_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_movi:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movi(prev, node,\n\t\t\t\t  jit_kind_word, sizeof(jit_word_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_movr_f:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movr(prev, node,\n\t\t\t\t  jit_kind_float32, sizeof(jit_float32_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_movi_f:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movi(prev, node,\n\t\t\t\t  jit_kind_float32, sizeof(jit_float32_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_movr_d:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movr(prev, node,\n\t\t\t\t  jit_kind_float64, sizeof(jit_float64_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_movi_d:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_movi(prev, node,\n\t\t\t\t  jit_kind_float64, sizeof(jit_float64_t)))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_ldxi_c:\tcase jit_code_ldxi_uc:\n\t    case jit_code_ldxi_s:\tcase jit_code_ldxi_us:\n\t    case jit_code_ldxi_i:\tcase jit_code_ldxi_ui:\n\t    case jit_code_ldxi_l:\n\t    case jit_code_ldxi_f:\tcase jit_code_ldxi_d:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_ldxi(prev, node))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    case jit_code_stxi_c:\tcase jit_code_stxi_s:\n\t    case jit_code_stxi_i:\tcase jit_code_stxi_l:\n\t    case jit_code_stxi_f:\tcase jit_code_stxi_d:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (simplify_stxi(prev, node))\n\t\t    simplify_spill(node = prev, regno);\n\t\tbreak;\n\t    default:\n\t\tinfo = jit_classify(node->code);\n\t\tif (info & jit_cc_a0_jmp)\n\t\t    /* labels are not implicitly added when not taking\n\t\t     * a conditional branch */\n\t\t    goto reset;\n\t\tif (info & jit_cc_a0_chg) {\n\t\t    if (info & jit_cc_a0_rlh) {\n\t\t\tregno = jit_regno(node->u.q.l);\n\t\t\t_jitc->values[regno].kind = 0;\n\t\t\t++_jitc->gen[regno];\n\t\t\tregno = jit_regno(node->u.q.h);\n\t\t\t_jitc->values[regno].kind = 0;\n\t\t\t++_jitc->gen[regno];\n\t\t    }\n\t\t    else {\n\t\t\tregno = jit_regno(node->u.w);\n\t\t\t_jitc->values[regno].kind = 0;\n\t\t\t++_jitc->gen[regno];\n\t\t    }\n\t\t}\n\t\tif (info & jit_cc_a1_chg) {\n\t\t    regno = jit_regno(node->v.w);\n\t\t    _jitc->values[regno].kind = 0;\n\t\t    ++_jitc->gen[regno];\n\t\t}\n\t\tif (info & jit_cc_a2_chg) {\n\t\t    regno = jit_regno(node->w.w);\n\t\t    _jitc->values[regno].kind = 0;\n\t\t    ++_jitc->gen[regno];\n\t\t}\n\t\tbreak;\n\t}\n    }\n}",
      "lines": 124,
      "depth": 19,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_register_change_p": {
      "start_point": [
        3078,
        0
      ],
      "end_point": [
        3115,
        1
      ],
      "content": "static jit_int32_t\n_register_change_p(jit_state_t *_jit, jit_node_t *node, jit_node_t *link,\n\t\t   jit_int32_t regno)\n{\n    jit_int32_t\t\tvalue;\n\n    for (; node != link; node = node->next) {\n\tswitch (node->code) {\n\t    case jit_code_label:\tcase jit_code_prolog:\n\t\t/* lack of extra information so cannot say it is undefined */\n\t\treturn (jit_reg_change);\n\t    case jit_code_callr:\tcase jit_code_calli:\n\t\tif (!(jit_class(_rvs[regno].spec) & jit_class_sav))\n\t\t    return (jit_reg_undef);\n\t\tbreak;\n\t    default:\n\t\tvalue = jit_classify(node->code);\n\t\t/* lack of extra information */\n\t\tif (value & jit_cc_a0_jmp)\n\t\t    return (jit_reg_change);\n\t\telse if ((value & (jit_cc_a0_reg|jit_cc_a0_chg)) ==\n\t\t\t (jit_cc_a0_reg|jit_cc_a0_chg) &&\n\t\t\t (((value & jit_cc_a0_rlh) &&\n\t\t\t   (node->u.q.l == regno || node->u.q.h == regno)) ||\n\t\t\t  (!(value & jit_cc_a0_rlh) &&\n\t\t\t   node->u.w == regno)))\n\t\t    return (jit_reg_change);\n\t\telse if ((value & jit_cc_a1_reg) && node->v.w == regno &&\n\t\t\t (value & jit_cc_a1_chg))\n\t\t    return (jit_reg_change);\n\t\telse if ((value & jit_cc_a2_reg) && node->w.w == regno &&\n\t\t\t (value & jit_cc_a2_chg))\n\t\t    return (jit_reg_change);\n\t}\n    }\n\n    return (jit_reg_static);\n}",
      "lines": 38,
      "depth": 22,
      "decorators": [
        "static",
        "static",
        "jit_int32_t"
      ]
    },
    "_spill_reglive_p": {
      "start_point": [
        3120,
        0
      ],
      "end_point": [
        3133,
        1
      ],
      "content": "static jit_bool_t\n_spill_reglive_p(jit_state_t *_jit, jit_node_t *node, jit_int32_t regno)\n{\n    if (!jit_regset_tstbit(&_jitc->reglive, regno)) {\n\tbmp_zero();\n\tjit_regset_setbit(&_jitc->regmask, regno);\n\tjit_update(node->next, &_jitc->reglive, &_jitc->regmask);\n\tif (!jit_regset_tstbit(&_jitc->reglive, regno) &&\n\t    register_change_p(node->next, node->link, regno) != jit_reg_change)\n\t    return (0);\n    }\n\n    return (1);\n}",
      "lines": 14,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "jit_bool_t"
      ]
    },
    "_patch_registers": {
      "start_point": [
        3135,
        0
      ],
      "end_point": [
        3253,
        1
      ],
      "content": "static void\n_patch_registers(jit_state_t *_jit)\n{\n    jit_node_t\t\t*prev;\n    jit_node_t\t\t*node;\n    jit_node_t\t\t*next;\n    jit_int32_t\t\t info;\n    jit_int32_t\t\t spec;\n    jit_int32_t\t\t regno;\n    jit_int32_t\t\t value;\n\n    _jitc->function = NULL;\n\n    jit_reglive_setup();\n    for (prev = NULL, node = _jitc->head; node; node = next) {\n\tnext = node->next;\n\n\tinfo = jit_classify(node->code);\n\tjit_regarg_set(node, info);\n\n\tswitch (node->code) {\n\t    case jit_code_save:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (!spill_reglive_p(node, regno)) {\n\t\t    /* register is not live, just remove spill/reload */\n\t\t    jit_regarg_clr(node, info);\n\t\t    node->link->v.w = jit_regload_delete;\n\t\t    del_node(prev, node);\n\t\t    continue;\n\t\t}\n\t\telse {\n\t\t    /* try to find a free register of the same class */\n\t\t    spec = jit_class(_rvs[regno].spec) & ~jit_class_arg;\n\t\t    for (value = 0; value < _jitc->reglen; value++) {\n\t\t\tif (value != regno &&\n\t\t\t    ((jit_class(_rvs[value].spec) & spec) &\n\t\t\t     ~jit_class_arg) == spec &&\n\t\t\t    !jit_regset_tstbit(&_jitc->regarg, value) &&\n\t\t\t    !spill_reglive_p(node, value))\n\t\t\t    break;\n\t\t    }\n\t\t    if (value < _jitc->reglen) {\n\t\t\tjit_regarg_clr(node, info);\n\t\t\tpatch_register(node->next, node->link,\n\t\t\t\t       jit_regno_patch|node->u.w,\n\t\t\t\t       jit_regno_patch|value);\n\t\t\t/* mark as live just in case there are nested\n\t\t\t * register patches, so that next patch will\n\t\t\t * not want to use the same register */\n\t\t\tjit_regset_setbit(&_jitc->reglive, value);\n\t\t\t/* register is not live, just remove spill/reload */\n\t\t\tnode->link->v.w = jit_regload_isdead;\n\t\t\tdel_node(prev, node);\n\t\t\tcontinue;\n\t\t    }\n\t\t    else {\n\t\t\t/* failed to find a free register */\n\t\t\tif (spec & jit_class_gpr) {\n\t\t\t    if (!_jitc->function->regoff[regno])\n\t\t\t\t_jitc->function->regoff[regno] =\n\t\t\t\t    jit_allocai(sizeof(jit_word_t));\n#if __WORDSIZE == 32\n\t\t\t    node->code = jit_code_stxi_i;\n#else\n\t\t\t    node->code = jit_code_stxi_l;\n#endif\n\t\t\t}\n\t\t\telse {\n\t\t\t    node->code = jit_code_stxi_d;\n\t\t\t    if (!_jitc->function->regoff[regno])\n\t\t\t\t_jitc->function->regoff[regno] =\n\t\t\t\t    jit_allocai(sizeof(jit_float64_t));\n\t\t\t}\n\t\t\tnode->u.w = _jitc->function->regoff[regno];\n\t\t\tnode->v.w = JIT_FP;\n\t\t\tnode->w.w = regno;\n\t\t\tnode->link = NULL;\n\t\t    }\n\t\t}\n\t\tbreak;\n\t    case jit_code_load:\n\t\tregno = jit_regno(node->u.w);\n\t\tif (node->v.w) {\n\t\t    if (node->v.w == jit_regload_isdead)\n\t\t\tjit_regset_clrbit(&_jitc->reglive, regno);\n\t\t    del_node(prev, node);\n\t\t    continue;\n\t\t}\n\t\tspec = jit_class(_rvs[regno].spec);\n\t\tif (spec & jit_class_gpr) {\n#if __WORDSIZE == 32\n\t\t    node->code = jit_code_ldxi_i;\n#else\n\t\t    node->code = jit_code_ldxi_l;\n#endif\n\t\t}\n\t\telse\n\t\t    node->code = jit_code_ldxi_d;\n\t\tnode->v.w = regno;\n\t\tnode->v.w = JIT_FP;\n\t\tnode->w.w = _jitc->function->regoff[regno];\n\t\tnode->link = NULL;\n\t\tbreak;\n\t    case jit_code_prolog:\n\t\t_jitc->function = _jitc->functions.ptr + node->w.w;\n\t\tbreak;\n\t    case jit_code_epilog:\n\t\t_jitc->function = NULL;\n\t\tbreak;\n\t    default:\n\t\tbreak;\n\t}\n\n\tjit_regarg_clr(node, info);\n\t/* update register live state */\n\tjit_reglive(node);\n\tprev = node;\n    }\n}",
      "lines": 119,
      "depth": 26,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "_patch_register": {
      "start_point": [
        3255,
        0
      ],
      "end_point": [
        3280,
        1
      ],
      "content": "static void\n_patch_register(jit_state_t *_jit, jit_node_t *node, jit_node_t *link,\n\t\tjit_int32_t regno, jit_int32_t patch)\n{\n    jit_int32_t\t\tvalue;\n\n    for (; node != link; node = node->next) {\n\tvalue = jit_classify(node->code);\n\tif (value & jit_cc_a0_reg) {\n\t    if (value & jit_cc_a0_rlh) {\n\t\tif (node->u.q.l == regno)\n\t\t    node->u.q.l = patch;\n\t\tif (node->u.q.h == regno)\n\t\t    node->u.q.h = patch;\n\t    }\n\t    else {\n\t\tif (node->u.w == regno)\n\t\t    node->u.w = patch;\n\t    }\n\t}\n\tif ((value & jit_cc_a1_reg) && node->v.w == regno)\n\t    node->v.w = patch;\n\tif ((value & jit_cc_a2_reg) && node->w.w == regno)\n\t    node->w.w = patch;\n    }\n}",
      "lines": 26,
      "depth": 15,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  }
}