{
  "which/which-2.21/bash.c": {
    "uidget": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        101,
        1
      ],
      "content": "int\nuidget ()\n{\n  uid_t u;\n\n  u = getuid ();\n  if (current_user.uid != u)\n    {\n      FREE (current_user.user_name);\n      FREE (current_user.shell);\n      FREE (current_user.home_dir);\n      current_user.user_name = current_user.shell = current_user.home_dir = (char *)NULL;\n    }\n  current_user.uid = u;\n  current_user.gid = getgid ();\n  current_user.euid = geteuid ();\n  current_user.egid = getegid ();\n\n  /* See whether or not we are running setuid or setgid. */\n  return (current_user.uid != current_user.euid) ||\n           (current_user.gid != current_user.egid);\n}",
      "lines": 22,
      "depth": 12,
      "decorators": [
        "int"
      ]
    },
    "getmaxgroups": {
      "start_point": [
        119,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "content": "int\ngetmaxgroups ()\n{\n  static int maxgroups = -1;\n\n  if (maxgroups > 0)\n    return maxgroups;\n\n#if defined (HAVE_SYSCONF) && defined (_SC_NGROUPS_MAX)\n  maxgroups = sysconf (_SC_NGROUPS_MAX);\n#else\n#  if defined (NGROUPS_MAX)\n  maxgroups = NGROUPS_MAX;\n#  else /* !NGROUPS_MAX */\n#    if defined (NGROUPS)\n  maxgroups = NGROUPS;\n#    else /* !NGROUPS */\n  maxgroups = DEFAULT_MAXGROUPS;\n#    endif /* !NGROUPS */\n#  endif /* !NGROUPS_MAX */\n#endif /* !HAVE_SYSCONF || !SC_NGROUPS_MAX */\n\n  if (maxgroups <= 0)\n    maxgroups = DEFAULT_MAXGROUPS;\n\n  return maxgroups;\n}",
      "lines": 27,
      "depth": 11,
      "decorators": [
        "int"
      ]
    },
    "initialize_group_array": {
      "start_point": [
        148,
        0
      ],
      "end_point": [
        198,
        1
      ],
      "content": "static void\ninitialize_group_array ()\n{\n  register int i;\n\n  if (maxgroups == 0)\n    maxgroups = getmaxgroups ();\n\n  ngroups = 0;\n  group_array = (GETGROUPS_T *)xrealloc (group_array, maxgroups * sizeof (GETGROUPS_T));\n\n#if defined (HAVE_GETGROUPS)\n  ngroups = getgroups (maxgroups, group_array);\n#endif\n\n  /* If getgroups returns nothing, or the OS does not support getgroups(),\n     make sure the groups array includes at least the current gid. */\n  if (ngroups == 0)\n    {\n      group_array[0] = current_user.gid;\n      ngroups = 1;\n    }\n\n  /* If the primary group is not in the groups array, add it as group_array[0]\n     and shuffle everything else up 1, if there's room. */\n  for (i = 0; i < ngroups; i++)\n    if (current_user.gid == (GID_T)group_array[i])\n      break;\n  if (i == ngroups && ngroups < maxgroups)\n    {\n      for (i = ngroups; i > 0; i--)\n        group_array[i] = group_array[i - 1];\n      group_array[0] = current_user.gid;\n      ngroups++;\n    }\n\n  /* If the primary group is not group_array[0], swap group_array[0] and\n     whatever the current group is.  The vast majority of systems should\n     not need this; a notable exception is Linux. */\n  if (group_array[0] != current_user.gid)\n    {\n      for (i = 0; i < ngroups; i++)\n        if (group_array[i] == current_user.gid)\n          break;\n      if (i < ngroups)\n        {\n          group_array[i] = group_array[0];\n          group_array[0] = current_user.gid;\n        }\n    }\n}",
      "lines": 51,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "file_status": {
      "start_point": [
        240,
        0
      ],
      "end_point": [
        323,
        1
      ],
      "content": "int\nfile_status (char const* name)\n{\n  struct stat finfo;\n  int r;\n\n  /* Determine whether this file exists or not. */\n  if (stat (name, &finfo) < 0)\n    return (0);\n\n  /* If the file is a directory, then it is not \"executable\" in the\n     sense of the shell. */\n  if (S_ISDIR (finfo.st_mode))\n    return (FS_EXISTS|FS_DIRECTORY);\n\n  r = FS_EXISTS;\n\n#if defined (HAVE_EACCESS)\n  /* Use eaccess(2) if we have it to take things like ACLs and other\n     file access mechanisms into account.  eaccess uses the effective\n     user and group IDs, not the real ones.  We could use sh_eaccess,\n     but we don't want any special treatment for /dev/fd. */\n  if (eaccess (name, X_OK) == 0)\n    r |= FS_EXECABLE;\n  if (eaccess (name, R_OK) == 0)\n    r |= FS_READABLE;\n\n  return r;\n#elif defined (AFS)\n  /* We have to use access(2) to determine access because AFS does not\n     support Unix file system semantics.  This may produce wrong\n     answers for non-AFS files when ruid != euid.  I hate AFS. */\n  if (access (name, X_OK) == 0)\n    r |= FS_EXECABLE;\n  if (access (name, R_OK) == 0)\n    r |= FS_READABLE;\n\n  return r;\n#else /* !AFS */\n\n  /* Find out if the file is actually executable.  By definition, the\n     only other criteria is that the file has an execute bit set that\n     we can use.  The same with whether or not a file is readable. */\n\n  /* Root only requires execute permission for any of owner, group or\n     others to be able to exec a file, and can read any file. */\n  if (current_user.euid == (uid_t)0)\n    {\n      r |= FS_READABLE;\n      if (finfo.st_mode & S_IXUGO)\n\tr |= FS_EXECABLE;\n      return r;\n    }\n\n  /* If we are the owner of the file, the owner bits apply. */\n  if (current_user.euid == finfo.st_uid)\n    {\n      if (finfo.st_mode & S_IXUSR)\n\tr |= FS_EXECABLE;\n      if (finfo.st_mode & S_IRUSR)\n\tr |= FS_READABLE;\n    }\n\n  /* If we are in the owning group, the group permissions apply. */\n  else if (group_member (finfo.st_gid))\n    {\n      if (finfo.st_mode & S_IXGRP)\n\tr |= FS_EXECABLE;\n      if (finfo.st_mode & S_IRGRP)\n\tr |= FS_READABLE;\n    }\n\n  /* Else we check whether `others' have permission to execute the file */\n  else\n    {\n      if (finfo.st_mode & S_IXOTH)\n\tr |= FS_EXECABLE;\n      if (finfo.st_mode & S_IROTH)\n\tr |= FS_READABLE;\n    }\n\n  return r;\n#endif /* !AFS */\n}",
      "lines": 84,
      "depth": 13,
      "decorators": [
        "int"
      ]
    },
    "absolute_program": {
      "start_point": [
        329,
        0
      ],
      "end_point": [
        333,
        1
      ],
      "content": "int\nabsolute_program (char const* string)\n{\n  return ((char *)strchr (string, '/') != (char *)NULL);\n}",
      "lines": 5,
      "depth": 10,
      "decorators": [
        "int"
      ]
    },
    "substring": {
      "start_point": [
        338,
        0
      ],
      "end_point": [
        349,
        1
      ],
      "content": "char *\nsubstring (char const* string, int start, int end)\n{\n  register int len;\n  register char *result;\n\n  len = end - start;\n  result = (char *)xmalloc (len + 1);\n  memcpy (result, string + start, len);\n  result[len] = '\\0';\n  return (result);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "char",
        "*\nsubstring (char const* string, int start, int end)",
        "*"
      ]
    },
    "extract_colon_unit": {
      "start_point": [
        355,
        0
      ],
      "end_point": [
        395,
        1
      ],
      "content": "char*\nextract_colon_unit (char const* string, int* p_index)\n{\n  int i, start, len;\n  char *value;\n\n  if (string == 0)\n    return NULL;\n\n  len = strlen (string);\n  if (*p_index >= len)\n    return ((char *)NULL);\n\n  i = *p_index;\n\n  /* Each call to this routine leaves the index pointing at a colon if\n     there is more to the path.  If I is > 0, then increment past the\n     `:'.  If I is 0, then the path has a leading colon.  Trailing colons\n     are handled OK by the `else' part of the if statement; an empty\n     string is returned in that case. */\n  if (i && string[i] == ':')\n    i++;\n\n  for (start = i; string[i] && string[i] != ':'; i++)\n    ;\n\n  *p_index = i;\n\n  if (i == start)\n    {\n      if (string[i])\n        (*p_index)++;\n      /* Return \"\" in the case of a trailing `:'. */\n      value = (char *)xmalloc (1);\n      value[0] = '\\0';\n    }\n  else\n    value = substring (string, start, i);\n\n  return (value);\n}",
      "lines": 41,
      "depth": 10,
      "decorators": [
        "char",
        "*\nextract_colon_unit (char const* string, int* p_index)",
        "*"
      ]
    },
    "get_next_path_element": {
      "start_point": [
        402,
        0
      ],
      "end_point": [
        419,
        1
      ],
      "content": "char*\nget_next_path_element (char const* path_list, int* path_index_pointer)\n{\n  char* path;\n\n  path = extract_colon_unit (path_list, path_index_pointer);\n\n  if (path == 0)\n    return (path);\n\n  if (*path == '\\0')\n    {\n      free (path);\n      path = savestring (\".\");\n    }\n\n  return (path);\n}",
      "lines": 18,
      "depth": 10,
      "decorators": [
        "char",
        "*\nget_next_path_element (char const* path_list, int* path_index_pointer)",
        "*"
      ]
    },
    "make_full_pathname": {
      "start_point": [
        424,
        0
      ],
      "end_point": [
        436,
        1
      ],
      "content": "char *\nmake_full_pathname (const char *path, const char *name, int name_len)\n{\n  char *full_path;\n  int path_len;\n\n  path_len = strlen (path);\n  full_path = (char *) xmalloc (2 + path_len + name_len);\n  strcpy (full_path, path);\n  full_path[path_len] = '/';\n  strcpy (full_path + path_len + 1, name);\n  return (full_path);\n}",
      "lines": 13,
      "depth": 10,
      "decorators": [
        "char",
        "*\nmake_full_pathname (const char *path, const char *name, int name_len)",
        "*"
      ]
    },
    "get_current_user_info": {
      "start_point": [
        439,
        0
      ],
      "end_point": [
        469,
        1
      ],
      "content": "void\nget_current_user_info ()\n{\n  struct passwd *entry;\n\n  /* Don't fetch this more than once. */\n  if (current_user.user_name == 0)\n    {\n#if defined (__TANDEM)\n      entry = getpwnam (getlogin ());\n#else\n      entry = getpwuid (current_user.uid);\n#endif\n      if (entry)\n        {\n          current_user.user_name = savestring (entry->pw_name);\n          current_user.shell = (entry->pw_shell && entry->pw_shell[0])\n                                ? savestring (entry->pw_shell)\n                                : savestring (\"/bin/sh\");\n          current_user.home_dir = savestring (entry->pw_dir);\n        }\n      else\n        {\n          current_user.user_name = \"I have no name!\";\n          current_user.user_name = savestring (current_user.user_name);\n          current_user.shell = savestring (\"/bin/sh\");\n          current_user.home_dir = savestring (\"/\");\n        }\n      endpwent ();\n    }\n}",
      "lines": 31,
      "depth": 14,
      "decorators": [
        "void"
      ]
    },
    "sh_get_env_value": {
      "start_point": [
        472,
        0
      ],
      "end_point": [
        475,
        1
      ],
      "content": "char* sh_get_env_value (const char* v)\n{\n  return getenv(v);\n}",
      "lines": 4,
      "depth": 7,
      "decorators": [
        "char",
        "* sh_get_env_value (const char* v)",
        "*"
      ]
    },
    "sh_get_home_dir": {
      "start_point": [
        477,
        0
      ],
      "end_point": [
        482,
        1
      ],
      "content": "char* sh_get_home_dir(void)\n{\n  if (current_user.home_dir == NULL)\n    get_current_user_info();\n  return current_user.home_dir;\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "char",
        "* sh_get_home_dir(void)",
        "*"
      ]
    }
  },
  "which/which-2.21/bash.h": {},
  "which/which-2.21/getopt.c": {
    "store_args_and_env": {
      "start_point": [
        272,
        0
      ],
      "end_point": [
        280,
        1
      ],
      "content": "static void\n__attribute__ ((unused))\nstore_args_and_env (int argc, char *const *argv)\n{\n  /* XXX This is no good solution.  We should rather copy the args so\n     that we can compare them later.  But we must not use malloc(3).  */\n  original_argc = argc;\n  original_argv = argv;\n}",
      "lines": 9,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void",
        "__attribute__ ((unused))",
        "__attribute__",
        "(",
        "(unused)",
        "(",
        "unused",
        ")",
        ")"
      ]
    }
  },
  "which/which-2.21/getopt.h": {},
  "which/which-2.21/getopt1.c": {},
  "which/which-2.21/posixstat.h": {},
  "which/which-2.21/sys.h": {},
  "which/which-2.21/which.c": {
    "print_usage": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "content": "static void print_usage(FILE *out)\n{\n  fprintf(out, \"Usage: %s [options] [--] COMMAND [...]\\n\", progname);\n  fprintf(out, \"Write the full path of COMMAND(s) to standard output.\\n\\n\");\n  fprintf(out, \"  --version, -[vV] Print version and exit successfully.\\n\");\n  fprintf(out, \"  --help,          Print this help and exit successfully.\\n\");\n  fprintf(out, \"  --skip-dot       Skip directories in PATH that start with a dot.\\n\");\n  fprintf(out, \"  --skip-tilde     Skip directories in PATH that start with a tilde.\\n\");\n  fprintf(out, \"  --show-dot       Don't expand a dot to current directory in output.\\n\");\n  fprintf(out, \"  --show-tilde     Output a tilde for HOME directory for non-root.\\n\");\n  fprintf(out, \"  --tty-only       Stop processing options on the right if not on tty.\\n\");\n  fprintf(out, \"  --all, -a        Print all matches in PATH, not just the first\\n\");\n  fprintf(out, \"  --read-alias, -i Read list of aliases from stdin.\\n\");\n  fprintf(out, \"  --skip-alias     Ignore option --read-alias; don't read stdin.\\n\");\n  fprintf(out, \"  --read-functions Read shell functions from stdin.\\n\");\n  fprintf(out, \"  --skip-functions Ignore option --read-functions; don't read stdin.\\n\\n\");\n  fprintf(out, \"Recommended use is to write the output of (alias; declare -f) to standard\\n\");\n  fprintf(out, \"input, so that which can show aliases and shell functions. See which(1) for\\n\");\n  fprintf(out, \"examples.\\n\\n\");\n  fprintf(out, \"If the options --read-alias and/or --read-functions are specified then the\\n\");\n  fprintf(out, \"output can be a full alias or function definition, optionally followed by\\n\");\n  fprintf(out, \"the full path of each command used inside of those.\\n\\n\");\n  fprintf(out, \"Report bugs to <which-bugs@gnu.org>.\\n\");\n}",
      "lines": 24,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_version": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "content": "static void print_version(void)\n{\n  fprintf(stdout, \"GNU which v\" VERSION \", Copyright (C) 1999 - 2015 Carlo Wood.\\n\");\n  fprintf(stdout, \"GNU which comes with ABSOLUTELY NO WARRANTY;\\n\");\n  fprintf(stdout, \"This program is free software; your freedom to use, change\\n\");\n  fprintf(stdout, \"and distribute this program is protected by the GPL.\\n\");\n}",
      "lines": 7,
      "depth": 8,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "print_fail": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        63,
        1
      ],
      "content": "static void print_fail(const char *name, const char *path_list)\n{\n  fprintf(stderr, \"%s: no %s in (%s)\\n\", progname, name, path_list);\n}",
      "lines": 4,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "find_command_in_path": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        162,
        1
      ],
      "content": "static char *find_command_in_path(const char *name, const char *path_list, int *path_index)\n{\n  char *found = NULL, *full_path;\n  int status, name_len;\n\n  name_len = strlen(name);\n\n  if (!absolute_program(name))\n    absolute_path_given = 0;\n  else\n  {\n    char *p;\n    absolute_path_given = 1;\n\n    if (abs_path)\n      free(abs_path);\n\n    if (*name != '.' && *name != '/' && *name != '~')\n    {\n      abs_path = (char *)xmalloc(3 + name_len);\n      strcpy(abs_path, \"./\");\n      strcat(abs_path, name);\n    }\n    else\n    {\n      abs_path = (char *)xmalloc(1 + name_len);\n      strcpy(abs_path, name);\n    }\n\n    path_list = abs_path;\n    p = strrchr(abs_path, '/');\n    *p++ = 0;\n    name = p;\n  }\n\n  while (path_list && path_list[*path_index])\n  {\n    char *path;\n\n    if (absolute_path_given)\n    {\n      path = savestring(path_list);\n      *path_index = strlen(path);\n    }\n    else\n      path = get_next_path_element(path_list, path_index);\n\n    if (!path)\n      break;\n\n    if (*path == '~')\n    {\n      char *t = tilde_expand(path);\n      free(path);\n      path = t;\n\n      if (skip_tilde)\n      {\n\tfree(path);\n\tcontinue;\n      }\n    }\n\n    if (skip_dot && *path != '/')\n    {\n      free(path);\n      continue;\n    }\n\n    found_path_starts_with_dot = (*path == '.');\n\n    full_path = make_full_pathname(path, name, name_len);\n    free(path);\n\n    status = file_status(full_path);\n\n    if ((status & FS_EXISTS) && (status & FS_EXECABLE))\n    {\n      found = full_path;\n      break;\n    }\n\n    free(full_path);\n  }\n\n  return (found);\n}",
      "lines": 87,
      "depth": 13,
      "decorators": [
        "static",
        "static",
        "char",
        "*find_command_in_path(const char *name, const char *path_list, int *path_index)",
        "*"
      ]
    },
    "get_current_working_directory": {
      "start_point": [
        167,
        0
      ],
      "end_point": [
        192,
        1
      ],
      "content": "static void get_current_working_directory(void)\n{\n  if (cwdlen)\n    return;\n\n  if (!getcwd(cwd, sizeof(cwd)))\n  {\n    const char *pwd = getenv(\"PWD\");\n    if (pwd && strlen(pwd) < sizeof(cwd))\n      strcpy(cwd, pwd);\n  }\n\n  if (*cwd != '/')\n  {\n    fprintf(stderr, \"Can't get current working directory\\n\");\n    exit(-1);\n  }\n\n  cwdlen = strlen(cwd);\n\n  if (cwd[cwdlen - 1] != '/')\n  {\n    cwd[cwdlen++] = '/';\n    cwd[cwdlen] = 0;\n  }\n}",
      "lines": 26,
      "depth": 11,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    },
    "path_clean_up": {
      "start_point": [
        194,
        0
      ],
      "end_point": [
        244,
        1
      ],
      "content": "static char *path_clean_up(const char *path)\n{\n  static char result[256];\n\n  const char *p1 = path;\n  char *p2 = result;\n\n  int saw_slash = 0, saw_slash_dot = 0, saw_slash_dot_dot = 0;\n\n  if (*p1 != '/')\n  {\n    get_current_working_directory();\n    strcpy(result, cwd);\n    saw_slash = 1;\n    p2 = &result[cwdlen];\n  }\n\n  do\n  {\n    /*\n     * Two leading slashes are allowed, having an OS implementation-defined meaning.\n     * See http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11\n     */\n    if (!saw_slash || *p1 != '/' || (p1 == path + 1 && p1[1] != '/'))\n      *p2++ = *p1;\n    if (saw_slash_dot && (*p1 == '/'))\n      p2 -= 2;\n    if (saw_slash_dot_dot && (*p1 == '/'))\n    {\n      int cnt = 0;\n      do\n      {\n\tif (--p2 < result)\n\t{\n\t  strcpy(result, path);\n\t  return result;\n\t}\n\tif (*p2 == '/')\n\t  ++cnt;\n      }\n      while (cnt != 3);\n      ++p2;\n    }\n    saw_slash_dot_dot = saw_slash_dot && (*p1 == '.');\n    saw_slash_dot = saw_slash && (*p1 == '.');\n    saw_slash = (*p1 == '/');\n  }\n  while (*p1++);\n\n  return result;\n}",
      "lines": 51,
      "depth": 14,
      "decorators": [
        "static",
        "static",
        "char",
        "*path_clean_up(const char *path)",
        "*"
      ]
    },
    "func_search": {
      "start_point": [
        261,
        0
      ],
      "end_point": [
        285,
        1
      ],
      "content": "int func_search(int indent, const char *cmd, struct function_st *func_list, int function_start_type)\n{\n  int i;\n  for (i = 0; i < func_count; ++i)\n  {\n    if (!strcmp(functions[i].name, cmd))\n    {\n      int j;\n      if (indent)\n        fputc('\\t', stdout);\n      if (function_start_type == 1)\n\tfprintf(stdout, \"%s () {\\n\", cmd);\n      else\n\tfprintf(stdout, \"%s ()\\n\", cmd);\n      for (j = 0; j < functions[i].line_count; ++j)\n      {\n\tif (indent)\n\t  fputc('\\t', stdout);\n        fputs(functions[i].lines[j], stdout);\n      }\n      return 1;\n    }\n  }\n  return 0;\n}",
      "lines": 25,
      "depth": 15,
      "decorators": [
        "int"
      ]
    },
    "path_search": {
      "start_point": [
        287,
        0
      ],
      "end_point": [
        336,
        1
      ],
      "content": "int path_search(int indent, const char *cmd, const char *path_list)\n{\n  char *result = NULL;\n  int found_something = 0;\n\n  if (path_list && *path_list != '\\0')\n  {\n    int next;\n    int path_index = 0;\n    do\n    {\n      next = show_all;\n      result = find_command_in_path(cmd, path_list, &path_index);\n      if (result)\n      {\n\tconst char *full_path = path_clean_up(result);\n\tint in_home = (show_tilde || skip_tilde) && !strncmp(full_path, home, homelen);\n\tif (indent)\n\t  fprintf(stdout, \"\\t\");\n\tif (!(skip_tilde && in_home) && show_dot && found_path_starts_with_dot && !strncmp(full_path, cwd, cwdlen))\n\t{\n\t  full_path += cwdlen;\n\t  fprintf(stdout, \"./\");\n\t}\n\telse if (in_home)\n\t{\n\t  if (skip_tilde)\n\t  {\n\t    next = 1;\n\t    free(result);\n\t    continue;\n\t  }\n\t  if (show_tilde)\n\t  {\n\t    full_path += homelen;\n\t    fprintf(stdout, \"~/\");\n\t  }\n\t}\n\tfprintf(stdout, \"%s\\n\", full_path);\n\tfree(result);\n\tfound_something = 1;\n      }\n      else\n\tbreak;\n    }\n    while (next);\n  }\n\n  return found_something;\n}",
      "lines": 50,
      "depth": 18,
      "decorators": [
        "int"
      ]
    },
    "process_alias": {
      "start_point": [
        338,
        0
      ],
      "end_point": [
        406,
        1
      ],
      "content": "void process_alias(const char *str, int argc, char *argv[], const char *path_list, int function_start_type)\n{\n  const char *p = str;\n  int len = 0;\n\n  while(*p == ' ' || *p == '\\t')\n    ++p;\n  if (!strncmp(\"alias\", p, 5))\n    p += 5;\n  while(*p == ' ' || *p == '\\t')\n    ++p;\n  while(*p && *p != ' ' && *p != '\\t' && *p != '=')\n    ++p, ++len;\n\n  for (; argc > 0; --argc, ++argv)\n  {\n    char q = 0;\n    char *cmd;\n\n    if (!*argv || len != strlen(*argv) || strncmp(*argv, &p[-len], len))\n      continue;\n\n    fputs(str, stdout);\n\n    if (!show_all)\n      *argv = NULL;\n\n    while(*p == ' ' || *p == '\\t')\n      ++p;\n    if (*p == '=')\n      ++p;\n    while(*p == ' ' || *p == '\\t')\n      ++p;\n    if (*p == '\"' || *p == '\\'')\n      q = *p, ++p;\n\n    for(;;)\n    {\n      int found = 0;\n\n      while(*p == ' ' || *p == '\\t')\n\t++p;\n      len = 0;\n      while(*p && *p != ' ' && *p != '\\t' && *p != q && *p != '|' && *p != '&')\n\t++p, ++len;\n\n      cmd = (char *)xmalloc(len + 1);\n      strncpy(cmd, &p[-len], len);\n      cmd[len] = 0;\n      if (*argv && !strcmp(cmd, *argv))\n        *argv = NULL;\n      if (read_functions && !strchr(cmd, '/'))\n        found = func_search(1, cmd, functions, function_start_type);\n      if (show_all || !found)\n\tpath_search(1, cmd, path_list);\n      free(cmd);\n\n      while(*p && (*p != '|' || p[1] == '|') && (*p != '&' || p[1] == '&'))\n        ++p;\n\n      if (!*p)\n        break;\n\n      ++p;\n    }\n\n    break;\n  }\n}",
      "lines": 69,
      "depth": 16,
      "decorators": [
        "void"
      ]
    },
    "main": {
      "start_point": [
        428,
        0
      ],
      "end_point": [
        674,
        1
      ],
      "content": "int main(int argc, char *argv[])\n{\n  const char *path_list = getenv(\"PATH\");\n  int short_option, fail_count = 0;\n  static int long_option;\n  struct option longopts[] = {\n    {\"help\", 0, &long_option, opt_help},\n    {\"version\", 0, &long_option, opt_version},\n    {\"skip-dot\", 0, &long_option, opt_skip_dot},\n    {\"skip-tilde\", 0, &long_option, opt_skip_tilde},\n    {\"show-dot\", 0, &long_option, opt_show_dot},\n    {\"show-tilde\", 0, &long_option, opt_show_tilde},\n    {\"tty-only\", 0, &long_option, opt_tty_only},\n    {\"all\", 0, NULL, 'a'},\n    {\"read-alias\", 0, NULL, 'i'},\n    {\"skip-alias\", 0, &long_option, opt_skip_alias},\n    {\"read-functions\", 0, &long_option, opt_read_functions},\n    {\"skip-functions\", 0, &long_option, opt_skip_functions},\n    {NULL, 0, NULL, 0}\n  };\n\n  progname = argv[0];\n  while ((short_option = getopt_long(argc, argv, \"aivV\", longopts, NULL)) != -1)\n  {\n    switch (short_option)\n    {\n      case 0:\n\tswitch (long_option)\n\t{\n\t  case opt_help:\n\t    print_usage(stdout);\n\t    return 0;\n\t  case opt_version:\n\t    print_version();\n\t    return 0;\n\t  case opt_skip_dot:\n\t    skip_dot = !tty_only;\n\t    break;\n\t  case opt_skip_tilde:\n\t    skip_tilde = !tty_only;\n\t    break;\n\t  case opt_skip_alias:\n\t    skip_alias = 1;\n\t    break;\n\t  case opt_show_dot:\n\t    show_dot = !tty_only;\n\t    break;\n\t  case opt_show_tilde:\n\t    show_tilde = (!tty_only && geteuid() != superuser);\n\t    break;\n\t  case opt_tty_only:\n\t    tty_only = !isatty(1);\n\t    break;\n\t  case opt_read_functions:\n\t    read_functions = 1;\n\t    break;\n\t  case opt_skip_functions:\n\t    skip_functions = 1;\n\t    break;\n\t}\n\tbreak;\n      case 'a':\n\tshow_all = 1;\n\tbreak;\n      case 'i':\n        read_alias = 1;\n\tbreak;\n      case 'v':\n      case 'V':\n\tprint_version();\n\treturn 0;\n    }\n  }\n\n  uidget();\n\n  if (show_dot)\n    get_current_working_directory();\n\n  if (show_tilde || skip_tilde)\n  {\n    const char *h;\n\n    if (!(h = getenv(\"HOME\")))\n      h = sh_get_home_dir();\n\n    strncpy(home, h, sizeof(home));\n    home[sizeof(home) - 1] = 0;\n    homelen = strlen(home);\n    if (home[homelen - 1] != '/' && homelen < sizeof(home) - 1)\n    {\n      strcat(home, \"/\");\n      ++homelen;\n    }\n  }\n\n  if (skip_alias)\n    read_alias = 0;\n\n  if (skip_functions)\n    read_functions = 0;\n\n  argv += optind;\n  argc -= optind;\n\n  if (argc == 0)\n  {\n    print_usage(stderr);\n    return -1;\n  }\n\n  int function_start_type = 0;\n  if (read_alias || read_functions)\n  {\n    char buf[1024];\n    int processing_aliases = read_alias;\n\n    if (isatty(0))\n    {\n      fprintf(stderr, \"%s: %s: Warning: stdin is a tty.\\n\", progname,\n          (read_functions ? read_alias ? \"--read-functions, --read-alias, -i\" : \"--read-functions\" : \"--read-alias, -i\"));\n    }\n\n    while (fgets(buf, sizeof(buf), stdin))\n    {\n      int looks_like_function_start = 0;\n      int function_start_has_declare;\n      if (read_functions)\n      {\n\t// bash version 2.0.5a and older output a pattern for `str' like\n\t// declare -fx FUNCTION_NAME ()\n\t// {\n\t//   body\n\t// }\n\t//\n\t// bash version 2.0.5b and later output a pattern for `str' like\n\t// FUNCTION_NAME ()\n\t// {\n\t//   body\n\t// }\n\tchar *p = buf + strlen(buf) - 1;\n\twhile (isspace(*p) && p > buf + 2)\n\t  --p;\n\tif (*p == ')' && p[-1] == '(' && p[-2] == ' ')\n\t{\n\t  looks_like_function_start = 1;\n\t  function_start_has_declare = (strncmp(\"declare -\", buf, 9) == 0);\n\t}\n\t// Add some zsh support here.\n\t// zsh does output a pattern for `str' like\n\t// FUNCTION () {\n\t//   body\n\t// }\n\tif (p > buf + 4 && *p == '{' && p[-1] == ' ' &&\n\t    p[-2] == ')' && p[-3] == '(' && p[-4] == ' ')\n\t{\n\t  looks_like_function_start = 1;\n\t  function_start_type = 1;\n\t  function_start_has_declare = 0;\n\t}\n      }\n      if (processing_aliases && !looks_like_function_start)\n      {\n\t// bash version 2.0.5b can throw in lines like \"declare -fx FUNCTION_NAME\", eat them.\n\tif (!strncmp(\"declare -\", buf, 9))\n\t  continue;\n\tif (alias_count == max_alias_count)\n\t{\n\t  max_alias_count += 32;\n\t  aliases = (char **)xrealloc(aliases, max_alias_count * sizeof(char *));\n\t}\n\taliases[alias_count++] = strcpy((char *)xmalloc(strlen(buf) + 1), buf);\n      }\n      else if (read_functions && looks_like_function_start)\n      {\n        struct function_st *function;\n        int max_line_count;\n\n\tconst char *p = buf;\n\tint len = 0;\n\n        processing_aliases = 0;\n\n\t// Eat \"declare -fx \" at start of bash version 2.0.5a and older, if present.\n\tif (function_start_has_declare)\n\t{\n\t  p += 9;\n\t  while(*p && *p++ != ' ');\n\t}\n\n\twhile(*p && *p != ' ')\n\t  ++p, ++len;\n\n\tif (func_count == max_func_count)\n\t{\n\t  max_func_count += 16;\n\t  functions = (struct function_st *)xrealloc(functions, max_func_count * sizeof(struct function_st));\n\t}\n\tfunction = &functions[func_count++];\n\tfunction->name = (char *)xmalloc(len + 1);\n\tstrncpy(function->name, &p[-len], len);\n\tfunction->name[len] = 0;\n\tfunction->len = len;\n\tmax_line_count = 32;\n\tfunction->lines = (char **)xmalloc(max_line_count * sizeof(char *));\n\tfunction->line_count = 0;\n\twhile (fgets(buf, sizeof(buf), stdin))\n\t{\n\t  size_t blen = strlen(buf);\n\t  function->lines[function->line_count++] = strcpy((char *)xmalloc(blen + 1), buf);\n\t  if (!strcmp(buf, \"}\\n\"))\n\t    break;\n          if (function->line_count == max_line_count)\n\t  {\n\t    max_line_count += 32;\n\t    function->lines = (char **)xrealloc(function->lines, max_line_count * sizeof(char *));\n\t  }\n\t}\n      }\n    }\n    if (read_alias)\n    {\n      int i;\n      for (i = 0; i < alias_count; ++i)\n\tprocess_alias(aliases[i], argc, argv, path_list, function_start_type);\n    }\n  }\n\n  for (; argc > 0; --argc, ++argv)\n  {\n    int found_something = 0;\n\n    if (!*argv)\n      continue;\n\n    if (read_functions && !strchr(*argv, '/'))\n      found_something = func_search(0, *argv, functions, function_start_type);\n\n    if ((show_all || !found_something) && !path_search(0, *argv, path_list) && !found_something)\n    {\n      print_fail(absolute_path_given ? strrchr(*argv, '/') + 1 : *argv, absolute_path_given ? abs_path : path_list);\n      ++fail_count;\n    }\n  }\n\n  return fail_count;\n}",
      "lines": 247,
      "depth": 23,
      "decorators": [
        "int"
      ]
    },
    "xmalloc": {
      "start_point": [
        677,
        0
      ],
      "end_point": [
        686,
        1
      ],
      "content": "void *xmalloc(size_t size)\n{\n  void *ptr = malloc(size);\n  if (ptr == NULL)\n  {\n    fprintf(stderr, \"%s: Out of memory\", progname);\n    exit(-1);\n  }\n  return ptr;\n}",
      "lines": 10,
      "depth": 9,
      "decorators": [
        "void",
        "*xmalloc(size_t size)",
        "*"
      ]
    },
    "xrealloc": {
      "start_point": [
        688,
        0
      ],
      "end_point": [
        699,
        1
      ],
      "content": "void *xrealloc(void *ptr, size_t size)\n{\n  if (!ptr)\n    return xmalloc(size);\n  ptr = realloc(ptr, size);\n  if (size > 0 && ptr == NULL)\n  {\n    fprintf(stderr, \"%s: Out of memory\\n\", progname);\n    exit(-1);\n  }\n  return ptr;\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "void",
        "*xrealloc(void *ptr, size_t size)",
        "*"
      ]
    }
  },
  "which/which-2.21/tilde/ansi_stdlib.h": {},
  "which/which-2.21/tilde/bashansi.h": {},
  "which/which-2.21/tilde/shell.c": {
    "get_home_dir": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "content": "char *\nget_home_dir ()\n{\n  char *home_dir;\n  struct passwd *entry;\n\n  home_dir = (char *)NULL;\n  entry = getpwuid (getuid ());\n  if (entry)\n    home_dir = entry->pw_dir;\n  return (home_dir);\n}",
      "lines": 12,
      "depth": 9,
      "decorators": [
        "char",
        "*\nget_home_dir ()",
        "*"
      ]
    }
  },
  "which/which-2.21/tilde/tilde.c": {
    "memory_error_and_abort": {
      "start_point": [
        489,
        0
      ],
      "end_point": [
        494,
        1
      ],
      "content": "static void\nmemory_error_and_abort ()\n{\n  fprintf (stderr, \"readline: out of virtual memory\\n\");\n  abort ();\n}",
      "lines": 6,
      "depth": 7,
      "decorators": [
        "static",
        "static",
        "void"
      ]
    }
  },
  "which/which-2.21/tilde/tilde.h": {},
  "which/which-2.21/tilde/xmalloc.h": {}
}