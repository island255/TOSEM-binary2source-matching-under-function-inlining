{
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/basicauthentication.c": {
    "answer_to_connection": {
      "start_point": [
        19,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"root\"",
        "\"pa$$w0rd\"",
        "\"<html><body>Go away.</body></html>\"",
        "\"my realm\"",
        "\"<html><body>A secret.</body></html>\""
      ]
    },
    "main": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/hellobrowser.c": {
    "answer_to_connection": {
      "start_point": [
        16,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "strings": [
        "\"<html><body>Hello, browser!</body></html>\""
      ]
    },
    "main": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/largepost.c": {
    "send_page": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "strings": [
        "\"text/html\""
      ]
    },
    "iterate_post": {
      "start_point": [
        117,
        0
      ],
      "end_point": [
        176,
        1
      ],
      "strings": [
        "\"file\"",
        "\"rb\"",
        "\"ab\""
      ]
    },
    "request_completed": {
      "start_point": [
        179,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "strings": []
    },
    "answer_to_connection": {
      "start_point": [
        210,
        0
      ],
      "end_point": [
        328,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        331,
        0
      ],
      "end_point": [
        350,
        1
      ],
      "strings": [
        "\"Failed to start daemon\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/logging.c": {
    "print_out_key": {
      "start_point": [
        16,
        0
      ],
      "end_point": [
        24,
        1
      ],
      "strings": [
        "\"%s: %s\\n\""
      ]
    },
    "answer_to_connection": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        44,
        1
      ],
      "strings": [
        "\"New %s request for %s using version %s\\n\""
      ]
    },
    "main": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/responseheaders.c": {
    "answer_to_connection": {
      "start_point": [
        21,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"<html><body>An internal server error has occured!\\\n                              </body></html>\"",
        "\"Content-Type\""
      ]
    },
    "main": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/sessions.c": {
    "asprintf": {
      "start_point": [
        14,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "strings": []
    },
    "get_session": {
      "start_point": [
        167,
        0
      ],
      "end_point": [
        213,
        1
      ],
      "strings": [
        "\"calloc error: %s\\n\"",
        "\"%X%X%X%X\""
      ]
    },
    "add_session_cookie": {
      "start_point": [
        264,
        0
      ],
      "end_point": [
        282,
        1
      ],
      "strings": [
        "\"%s=%s\"",
        "\"Failed to set session cookie header!\\n\""
      ]
    },
    "serve_simple_form": {
      "start_point": [
        294,
        0
      ],
      "end_point": [
        317,
        1
      ],
      "strings": []
    },
    "fill_v1_form": {
      "start_point": [
        328,
        0
      ],
      "end_point": [
        359,
        1
      ],
      "strings": []
    },
    "fill_v1_v2_form": {
      "start_point": [
        370,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "strings": []
    },
    "not_found_page": {
      "start_point": [
        413,
        0
      ],
      "end_point": [
        436,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        472,
        0
      ],
      "end_point": [
        521,
        1
      ],
      "strings": [
        "\"DONE\"",
        "\"Session `%s' submitted `%s', `%s'\\n\"",
        "\"v1\"",
        "\"v2\"",
        "\"Unsupported form value `%s'\\n\""
      ]
    },
    "create_response": {
      "start_point": [
        558,
        0
      ],
      "end_point": [
        655,
        1
      ],
      "strings": [
        "\"calloc error: %s\\n\"",
        "\"Failed to setup post processor for `%s'\\n\"",
        "\"Failed to setup session for `%s'\\n\"",
        "\"Failed to create page for `%s'\\n\""
      ]
    },
    "request_completed_callback": {
      "start_point": [
        667,
        0
      ],
      "end_point": [
        685,
        1
      ],
      "strings": []
    },
    "expire_sessions": {
      "start_point": [
        692,
        0
      ],
      "end_point": [
        719,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        726,
        0
      ],
      "end_point": [
        783,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"Aborting due to error during select: %s\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/simplepost.c": {
    "send_page": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "strings": []
    },
    "iterate_post": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        101,
        1
      ],
      "strings": [
        "\"name\""
      ]
    },
    "request_completed": {
      "start_point": [
        103,
        0
      ],
      "end_point": [
        124,
        1
      ],
      "strings": []
    },
    "answer_to_connection": {
      "start_point": [
        127,
        0
      ],
      "end_point": [
        190,
        1
      ],
      "strings": [
        "\"POST\"",
        "\"GET\"",
        "\"POST\""
      ]
    },
    "main": {
      "start_point": [
        192,
        0
      ],
      "end_point": [
        209,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/doc/examples/tlsauthentication.c": {
    "string_to_base64": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "strings": [
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"",
        "\"===\""
      ]
    },
    "get_file_size": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "strings": [
        "\"rb\""
      ]
    },
    "load_file": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "strings": [
        "\"rb\""
      ]
    },
    "ask_for_authentication": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        153,
        1
      ],
      "strings": [
        "\"Basic realm=\"",
        "\"WWW-Authenticate\""
      ]
    },
    "is_authenticated": {
      "start_point": [
        155,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "strings": [
        "\"Basic \"",
        "\"Authorization\"",
        "\":\""
      ]
    },
    "secret_page": {
      "start_point": [
        194,
        0
      ],
      "end_point": [
        211,
        1
      ],
      "strings": [
        "\"<html><body>A secret.</body></html>\""
      ]
    },
    "answer_to_connection": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        238,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        241,
        0
      ],
      "end_point": [
        283,
        1
      ],
      "strings": [
        "\"The key/certificate files could not be read.\\n\"",
        "\"%s\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/authorization_example.c": {
    "ahc_echo": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        97,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"Aladdin\"",
        "\"open sesame\"",
        "\"TestRealm\""
      ]
    },
    "main": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        124,
        1
      ],
      "strings": [
        "\"%u\"",
        "\"%s PORT\\n\"",
        "\"HTTP server running. Press ENTER to stop the server\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/benchmark.c": {
    "completed_callback": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": [
        "\"D: %llu 1\\n\""
      ]
    },
    "uri_logger_cb": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        126,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        129,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"close\"",
        "\"D: %d %u\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/benchmark_https.c": {
    "completed_callback": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": [
        "\"D: %llu 1\\n\""
      ]
    },
    "uri_logger_cb": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        126,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        180,
        0
      ],
      "end_point": [
        218,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"D: %d %u\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/chunked_example.c": {
    "callback": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": []
    },
    "free_callback_param": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        92,
        0
      ],
      "end_point": [
        142,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        145,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"Port must be a number between 1 and 65535\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/demo.c": {
    "mark_as_html": {
      "start_point": [
        202,
        0
      ],
      "end_point": [
        208,
        1
      ],
      "strings": [
        "\"text/html\""
      ]
    },
    "update_cached_response": {
      "start_point": [
        217,
        0
      ],
      "end_point": [
        225,
        1
      ],
      "strings": []
    },
    "list_directory": {
      "start_point": [
        258,
        0
      ],
      "end_point": [
        301,
        1
      ],
      "strings": [
        "\"%s/%s\"",
        "\"<li><a href=\\\"/%s\\\">%s</a></li>\\n\""
      ]
    },
    "update_directory": {
      "start_point": [
        307,
        0
      ],
      "end_point": [
        383,
        1
      ],
      "strings": [
        "\"%s\"",
        "\"<h2>%s</h2>\\n\"",
        "\"%s/%s\"",
        "\"<h3>%s</h3>\\n\"",
        "\"%s\"",
        "\"close\""
      ]
    },
    "do_append": {
      "start_point": [
        437,
        0
      ],
      "end_point": [
        459,
        1
      ],
      "strings": []
    },
    "process_upload_data": {
      "start_point": [
        481,
        0
      ],
      "end_point": [
        597,
        1
      ],
      "strings": [
        "\"category\"",
        "\"language\"",
        "\"upload\"",
        "\"Ignoring unexpected form value `%s'\\n\"",
        "\"No filename, aborting upload\\n\"",
        "\"Missing form data for upload `%s'\\n\"",
        "\"..\"",
        "\"%s/%s\"",
        "\"%s/%s/%s\"",
        "\"Error opening file `%s' for upload: %s\\n\"",
        "\"Error writing to file `%s': %s\\n\""
      ]
    },
    "response_completed_callback": {
      "start_point": [
        611,
        0
      ],
      "end_point": [
        643,
        1
      ],
      "strings": [
        "\"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\""
      ]
    },
    "return_directory_response": {
      "start_point": [
        652,
        0
      ],
      "end_point": [
        668,
        1
      ],
      "strings": []
    },
    "generate_page": {
      "start_point": [
        684,
        0
      ],
      "end_point": [
        822,
        1
      ],
      "strings": [
        "\"/\"",
        "\"..\""
      ]
    },
    "catcher": {
      "start_point": [
        831,
        0
      ],
      "end_point": [
        836,
        1
      ],
      "strings": []
    },
    "ignore_sigpipe": {
      "start_point": [
        842,
        0
      ],
      "end_point": [
        858,
        1
      ],
      "strings": [
        "\"Failed to install SIGPIPE handler: %s\\n\""
      ]
    },
    "main": {
      "start_point": [
        871,
        0
      ],
      "end_point": [
        933,
        1
      ],
      "strings": [
        "\"%u\"",
        "\"%s PORT\\n\"",
        "\"HTTP server running. Press ENTER to stop the server\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/demo_https.c": {
    "mark_as_html": {
      "start_point": [
        203,
        0
      ],
      "end_point": [
        209,
        1
      ],
      "strings": [
        "\"text/html\""
      ]
    },
    "update_cached_response": {
      "start_point": [
        218,
        0
      ],
      "end_point": [
        226,
        1
      ],
      "strings": []
    },
    "list_directory": {
      "start_point": [
        259,
        0
      ],
      "end_point": [
        302,
        1
      ],
      "strings": [
        "\"%s/%s\"",
        "\"<li><a href=\\\"/%s\\\">%s</a></li>\\n\""
      ]
    },
    "update_directory": {
      "start_point": [
        308,
        0
      ],
      "end_point": [
        384,
        1
      ],
      "strings": [
        "\"%s\"",
        "\"<h2>%s</h2>\\n\"",
        "\"%s/%s\"",
        "\"<h3>%s</h3>\\n\"",
        "\"%s\"",
        "\"close\""
      ]
    },
    "do_append": {
      "start_point": [
        438,
        0
      ],
      "end_point": [
        460,
        1
      ],
      "strings": []
    },
    "process_upload_data": {
      "start_point": [
        482,
        0
      ],
      "end_point": [
        598,
        1
      ],
      "strings": [
        "\"category\"",
        "\"language\"",
        "\"upload\"",
        "\"Ignoring unexpected form value `%s'\\n\"",
        "\"No filename, aborting upload\\n\"",
        "\"Missing form data for upload `%s'\\n\"",
        "\"..\"",
        "\"%s/%s\"",
        "\"%s/%s/%s\"",
        "\"Error opening file `%s' for upload: %s\\n\"",
        "\"Error writing to file `%s': %s\\n\""
      ]
    },
    "response_completed_callback": {
      "start_point": [
        612,
        0
      ],
      "end_point": [
        644,
        1
      ],
      "strings": [
        "\"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\""
      ]
    },
    "return_directory_response": {
      "start_point": [
        653,
        0
      ],
      "end_point": [
        669,
        1
      ],
      "strings": []
    },
    "generate_page": {
      "start_point": [
        685,
        0
      ],
      "end_point": [
        821,
        1
      ],
      "strings": [
        "\"/\"",
        "\"..\""
      ]
    },
    "catcher": {
      "start_point": [
        830,
        0
      ],
      "end_point": [
        835,
        1
      ],
      "strings": []
    },
    "ignore_sigpipe": {
      "start_point": [
        841,
        0
      ],
      "end_point": [
        857,
        1
      ],
      "strings": [
        "\"Failed to install SIGPIPE handler: %s\\n\""
      ]
    },
    "main": {
      "start_point": [
        920,
        0
      ],
      "end_point": [
        984,
        1
      ],
      "strings": [
        "\"%u\"",
        "\"%s PORT\\n\"",
        "\"HTTP server running. Press ENTER to stop the server\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/digest_auth_example.c": {
    "ahc_echo": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "strings": [
        "\"testpass\"",
        "\"test@example.com\""
      ]
    },
    "main": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to open `%s': %s\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to read `%s': %s\\n\"",
        "\"/dev/urandom\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/dual_stack_example.c": {
    "ahc_echo": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/fileserver_example.c": {
    "ahc_echo": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        111,
        1
      ],
      "strings": [
        "\"../\""
      ]
    },
    "main": {
      "start_point": [
        114,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/fileserver_example_dirs.c": {
    "file_reader": {
      "start_point": [
        33,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "strings": []
    },
    "file_free_callback": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "strings": []
    },
    "dir_free_callback": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": []
    },
    "dir_reader": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": [
        "\"<a href=\\\"/%s\\\">%s</a><br>\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        184,
        1
      ],
      "strings": [
        "\"rb\"",
        "\".\"",
        "\"Failed to open directory `.': %s\\n\""
      ]
    },
    "main": {
      "start_point": [
        187,
        0
      ],
      "end_point": [
        205,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/fileserver_example_external_select.c": {
    "file_reader": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        38,
        1
      ],
      "strings": []
    },
    "free_callback": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        46,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "strings": [
        "\"rb\""
      ]
    },
    "main": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        174,
        1
      ],
      "strings": [
        "\"%s PORT SECONDS-TO-RUN\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/https_fileserver_example.c": {
    "file_reader": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        102,
        1
      ],
      "strings": []
    },
    "file_free_callback": {
      "start_point": [
        104,
        0
      ],
      "end_point": [
        109,
        1
      ],
      "strings": []
    },
    "http_ahc": {
      "start_point": [
        112,
        0
      ],
      "end_point": [
        182,
        1
      ],
      "strings": [
        "\"rb\""
      ]
    },
    "main": {
      "start_point": [
        185,
        0
      ],
      "end_point": [
        227,
        1
      ],
      "strings": [
        "\"%s PORT\\n\"",
        "\"Port must be a number between 1 and 65535\\n\"",
        "\"Error: failed to start TLS_daemon\\n\"",
        "\"MHD daemon listening on port %u\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/minimal_example.c": {
    "ahc_echo": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        63,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/minimal_example_comet.c": {
    "data_generator": {
      "start_point": [
        27,
        0
      ],
      "end_point": [
        37,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        71,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        73,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/msgs_i18n.c": {
    "ahc_echo": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "strings": []
    },
    "error_handler": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "strings": [
        "\"libmicrohttpd\""
      ]
    },
    "main": {
      "start_point": [
        73,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "strings": [
        "\"\"",
        "\"libmicrohttpd\"",
        "\"locale\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/post_example.c": {
    "get_session": {
      "start_point": [
        145,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "strings": [
        "\"calloc error: %s\\n\"",
        "\"%X%X%X%X\""
      ]
    },
    "add_session_cookie": {
      "start_point": [
        242,
        0
      ],
      "end_point": [
        260,
        1
      ],
      "strings": [
        "\"%s=%s\"",
        "\"Failed to set session cookie header!\\n\""
      ]
    },
    "serve_simple_form": {
      "start_point": [
        272,
        0
      ],
      "end_point": [
        297,
        1
      ],
      "strings": []
    },
    "fill_v1_form": {
      "start_point": [
        308,
        0
      ],
      "end_point": [
        346,
        1
      ],
      "strings": []
    },
    "fill_v1_v2_form": {
      "start_point": [
        357,
        0
      ],
      "end_point": [
        396,
        1
      ],
      "strings": []
    },
    "not_found_page": {
      "start_point": [
        407,
        0
      ],
      "end_point": [
        432,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        468,
        0
      ],
      "end_point": [
        517,
        1
      ],
      "strings": [
        "\"DONE\"",
        "\"Session `%s' submitted `%s', `%s'\\n\"",
        "\"v1\"",
        "\"v2\"",
        "\"Unsupported form value `%s'\\n\""
      ]
    },
    "create_response": {
      "start_point": [
        553,
        0
      ],
      "end_point": [
        650,
        1
      ],
      "strings": [
        "\"calloc error: %s\\n\"",
        "\"Failed to setup post processor for `%s'\\n\"",
        "\"Failed to setup session for `%s'\\n\"",
        "\"Failed to create page for `%s'\\n\""
      ]
    },
    "request_completed_callback": {
      "start_point": [
        662,
        0
      ],
      "end_point": [
        680,
        1
      ],
      "strings": []
    },
    "expire_sessions": {
      "start_point": [
        687,
        0
      ],
      "end_point": [
        714,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        721,
        0
      ],
      "end_point": [
        775,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/querystring_example.c": {
    "ahc_echo": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"q\"",
        "\"q\"",
        "\"q\""
      ]
    },
    "main": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/refuse_post_example.c": {
    "ahc_echo": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"POST\"",
        "\"POST\""
      ]
    },
    "main": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        102,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/timeout.c": {
    "answer_to_connection": {
      "start_point": [
        31,
        0
      ],
      "end_point": [
        63,
        1
      ],
      "strings": [
        "\"<html><body>Hello timeout!</body></html>\"",
        "\"text/html\""
      ]
    },
    "main": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/examples/upgrade_example.c": {
    "make_blocking": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        61,
        1
      ],
      "strings": []
    },
    "send_all": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    },
    "run_usock": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        143,
        1
      ],
      "strings": []
    },
    "uh_cb": {
      "start_point": [
        193,
        0
      ],
      "end_point": [
        238,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        241,
        0
      ],
      "end_point": [
        280,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"Echo Server\""
      ]
    },
    "main": {
      "start_point": [
        283,
        0
      ],
      "end_point": [
        305,
        1
      ],
      "strings": [
        "\"%s PORT\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/include/autoinit_funcs.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/include/mhd_options.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/include/microhttpd.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/include/platform.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/base64.c": {
    "BASE64Decode": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        55,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/base64.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/basicauth.c": {
    "MHD_basic_auth_get_username_password": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "strings": [
        "\"Error decoding basic authentication\\n\"",
        "\"Basic authentication doesn't contain ':' separator\\n\"",
        "\"Failed to allocate memory for password\\n\""
      ]
    },
    "MHD_queue_basic_auth_fail_response": {
      "start_point": [
        118,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "strings": [
        "\"Basic realm=\\\"\\\"\"",
        "\"Failed to allocate memory for auth header\\n\"",
        "\"Basic realm=\\\"%s\\\"\"",
        "\"Failed to add Basic auth header\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/connection.c": {
    "MHD_conn_init_static_": {
      "start_point": [
        144,
        0
      ],
      "end_point": [
        165,
        1
      ],
      "strings": []
    },
    "recv_param_adapter": {
      "start_point": [
        176,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "strings": []
    },
    "send_param_adapter": {
      "start_point": [
        229,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "strings": []
    },
    "sendfile_adapter": {
      "start_point": [
        281,
        0
      ],
      "end_point": [
        451,
        1
      ],
      "strings": []
    },
    "socket_flush_possible": {
      "start_point": [
        474,
        0
      ],
      "end_point": [
        483,
        1
      ],
      "strings": []
    },
    "socket_start_extra_buffering": {
      "start_point": [
        493,
        0
      ],
      "end_point": [
        543,
        1
      ],
      "strings": []
    },
    "socket_start_no_buffering": {
      "start_point": [
        552,
        0
      ],
      "end_point": [
        595,
        1
      ],
      "strings": []
    },
    "socket_start_no_buffering_flush": {
      "start_point": [
        605,
        0
      ],
      "end_point": [
        626,
        1
      ],
      "strings": []
    },
    "socket_start_normal_buffering": {
      "start_point": [
        635,
        0
      ],
      "end_point": [
        684,
        1
      ],
      "strings": []
    },
    "MHD_get_connection_values": {
      "start_point": [
        698,
        0
      ],
      "end_point": [
        722,
        1
      ],
      "strings": []
    },
    "MHD_set_connection_value": {
      "start_point": [
        750,
        0
      ],
      "end_point": [
        779,
        1
      ],
      "strings": []
    },
    "MHD_lookup_connection_value": {
      "start_point": [
        792,
        0
      ],
      "end_point": [
        810,
        1
      ],
      "strings": []
    },
    "MHD_lookup_header_token_ci": {
      "start_point": [
        826,
        0
      ],
      "end_point": [
        846,
        1
      ],
      "strings": []
    },
    "need_100_continue": {
      "start_point": [
        871,
        0
      ],
      "end_point": [
        887,
        1
      ],
      "strings": [
        "\"100-continue\""
      ]
    },
    "MHD_connection_mark_closed_": {
      "start_point": [
        896,
        0
      ],
      "end_point": [
        922,
        1
      ],
      "strings": []
    },
    "MHD_connection_close_": {
      "start_point": [
        934,
        0
      ],
      "end_point": [
        954,
        1
      ],
      "strings": []
    },
    "MHD_connection_finish_forward_": {
      "start_point": [
        968,
        0
      ],
      "end_point": [
        1019,
        1
      ],
      "strings": [
        "\"Failed to remove FD from epoll set\\n\"",
        "\"Failed to remove FD from epoll set\\n\""
      ]
    },
    "connection_close_error": {
      "start_point": [
        1030,
        0
      ],
      "end_point": [
        1043,
        1
      ],
      "strings": []
    },
    "try_ready_normal_body": {
      "start_point": [
        1069,
        0
      ],
      "end_point": [
        1123,
        1
      ],
      "strings": [
        "\"Closing connection (application reported error generating data)\\n\""
      ]
    },
    "try_ready_chunked_body": {
      "start_point": [
        1135,
        0
      ],
      "end_point": [
        1243,
        1
      ],
      "strings": [
        "\"Closing connection (out of memory)\\n\"",
        "\"Closing connection (application error generating response)\\n\"",
        "\"0\\r\\n\"",
        "\"%X\\r\\n\"",
        "\"\\r\\n\""
      ]
    },
    "keepalive_possible": {
      "start_point": [
        1262,
        0
      ],
      "end_point": [
        1299,
        1
      ],
      "strings": [
        "\"upgrade\"",
        "\"close\"",
        "\"Keep-Alive\""
      ]
    },
    "get_date_string": {
      "start_point": [
        1309,
        0
      ],
      "end_point": [
        1356,
        1
      ],
      "strings": [
        "\"Sun\"",
        "\"Mon\"",
        "\"Tue\"",
        "\"Wed\"",
        "\"Thu\"",
        "\"Fri\"",
        "\"Sat\"",
        "\"Jan\"",
        "\"Feb\"",
        "\"Mar\"",
        "\"Apr\"",
        "\"May\"",
        "\"Jun\"",
        "\"Jul\"",
        "\"Aug\"",
        "\"Sep\"",
        "\"Oct\"",
        "\"Nov\"",
        "\"Dec\"",
        "\"Date: %3s, %02u %3s %04u %02u:%02u:%02u GMT\\r\\n\""
      ]
    },
    "try_grow_read_buffer": {
      "start_point": [
        1369,
        0
      ],
      "end_point": [
        1389,
        1
      ],
      "strings": []
    },
    "build_header_response": {
      "start_point": [
        1401,
        0
      ],
      "end_point": [
        1734,
        1
      ],
      "strings": [
        "\"%s %u %s\\r\\n\"",
        "\"ICY\"",
        "\"close\"",
        "\"Keep-Alive\"",
        "\"close\"",
        "\"identity\"",
        "\" MHD_UNSIGNED_LONG_LONG_PRINTF \"",
        "\"Connection: close\\r\\n\"",
        "\"Connection: Keep-Alive\\r\\n\"",
        "\"Transfer-Encoding: chunked\\r\\n\"",
        "\"Keep-Alive\"",
        "\"Not enough memory for write!\\n\"",
        "\"Connection: close\\r\\n\"",
        "\"Connection: close\\r\\n\"",
        "\"Connection: close\\r\\n\"",
        "\"Connection: Keep-Alive\\r\\n\"",
        "\"Connection: Keep-Alive\\r\\n\"",
        "\"Connection: Keep-Alive\\r\\n\"",
        "\"Transfer-Encoding: chunked\\r\\n\"",
        "\"Transfer-Encoding: chunked\\r\\n\"",
        "\"Transfer-Encoding: chunked\\r\\n\"",
        "\"Keep-Alive\"",
        "\"%s: %s\\r\\n\"",
        "\"\\r\\n\""
      ]
    },
    "transmit_error_response": {
      "start_point": [
        1746,
        0
      ],
      "end_point": [
        1792,
        1
      ],
      "strings": [
        "\"Error processing request (HTTP response code is %u (`%s')). Closing connection.\\n\"",
        "\"Closing connection (failed to create response header)\\n\""
      ]
    },
    "MHD_connection_update_event_loop_info": {
      "start_point": [
        1803,
        0
      ],
      "end_point": [
        1958,
        1
      ],
      "strings": [
        "\"In function %s handling connection at state: %s\\n\""
      ]
    },
    "get_next_header_line": {
      "start_point": [
        1974,
        0
      ],
      "end_point": [
        2019,
        1
      ],
      "strings": []
    },
    "connection_add_header": {
      "start_point": [
        2033,
        0
      ],
      "end_point": [
        2055,
        1
      ],
      "strings": [
        "\"Not enough memory in pool to allocate header record!\\n\""
      ]
    },
    "parse_cookie_header": {
      "start_point": [
        2064,
        0
      ],
      "end_point": [
        2167,
        1
      ],
      "strings": [
        "\"Not enough memory in pool to parse cookies!\\n\"",
        "\"\""
      ]
    },
    "parse_initial_message_line": {
      "start_point": [
        2178,
        0
      ],
      "end_point": [
        2263,
        1
      ],
      "strings": [
        "\"\"",
        "\"\"",
        "\"\""
      ]
    },
    "call_connection_handler": {
      "start_point": [
        2273,
        0
      ],
      "end_point": [
        2297,
        1
      ],
      "strings": [
        "\"Application reported internal error, closing connection.\\n\""
      ]
    },
    "process_request_body": {
      "start_point": [
        2308,
        0
      ],
      "end_point": [
        2520,
        1
      ],
      "strings": [
        "\"Received malformed HTTP request (bad chunked encoding). Closing connection.\\n\"",
        "\"Received malformed HTTP request (bad chunked encoding). Closing connection.\\n\"",
        "\"Application reported internal error, closing connection.\\n\"",
        "\"libmicrohttpd API violation\"",
        "\"WARNING: incomplete upload processing and connection not suspended may result in hung connection.\\n\""
      ]
    },
    "check_write_done": {
      "start_point": [
        2531,
        0
      ],
      "end_point": [
        2548,
        1
      ],
      "strings": []
    },
    "process_header_line": {
      "start_point": [
        2560,
        0
      ],
      "end_point": [
        2606,
        1
      ],
      "strings": [
        "\"Received malformed line (no colon). Closing connection.\\n\""
      ]
    },
    "process_broken_line": {
      "start_point": [
        2619,
        0
      ],
      "end_point": [
        2691,
        1
      ],
      "strings": []
    },
    "parse_connection_headers": {
      "start_point": [
        2701,
        0
      ],
      "end_point": [
        2772,
        1
      ],
      "strings": [
        "\"Received HTTP 1.1 request without `Host' header.\\n\"",
        "\"chunked\"",
        "\"Failed to parse `Content-Length' header. Closing connection.\\n\""
      ]
    },
    "MHD_update_last_activity_": {
      "start_point": [
        2782,
        0
      ],
      "end_point": [
        2809,
        1
      ],
      "strings": []
    },
    "MHD_connection_handle_read": {
      "start_point": [
        2818,
        0
      ],
      "end_point": [
        2918,
        1
      ],
      "strings": [
        "\"Socket disconnected while reading request.\\n\"",
        "\"Connection socket is closed due to error when reading request.\\n\"",
        "\"In function %s handling connection at state: %s\\n\""
      ]
    },
    "MHD_connection_handle_write": {
      "start_point": [
        2927,
        0
      ],
      "end_point": [
        3156,
        1
      ],
      "strings": [
        "\"In function %s handling connection at state: %s\\n\"",
        "\"Failed to send data in request for %s.\\n\"",
        "\"Sent 100 continue response: `%.*s'\\n\"",
        "\"Connection was closed while sending response headers.\\n\"",
        "\"Data offset exceeds limit\"",
        "\"Sent %d-byte DATA response: `%.*s'\\n\"",
        "\"Failed to send data in request for `%s'.\\n\"",
        "\"Connection was closed while sending response body.\\n\"",
        "\"Connection was closed while sending response body.\\n\"",
        "\"Internal error\\n\""
      ]
    },
    "cleanup_connection": {
      "start_point": [
        3167,
        0
      ],
      "end_point": [
        3225,
        1
      ],
      "strings": [
        "\"c\"",
        "\"Failed to signal end of connection via inter-thread communication channel\""
      ]
    },
    "MHD_connection_handle_idle": {
      "start_point": [
        3238,
        0
      ],
      "end_point": [
        3733,
        1
      ],
      "strings": [
        "\"In function %s handling connection at state: %s\\n\"",
        "\"Closing connection (failed to create response header)\\n\"",
        "\"Closing connection (failed to create response header)\\n\""
      ]
    },
    "MHD_connection_epoll_update_": {
      "start_point": [
        3745,
        0
      ],
      "end_point": [
        3781,
        1
      ],
      "strings": [
        "\"Call to epoll_ctl failed: %s\\n\""
      ]
    },
    "MHD_set_http_callbacks_": {
      "start_point": [
        3790,
        0
      ],
      "end_point": [
        3795,
        1
      ],
      "strings": []
    },
    "MHD_get_connection_info": {
      "start_point": [
        3808,
        0
      ],
      "end_point": [
        3854,
        1
      ],
      "strings": []
    },
    "MHD_set_connection_option": {
      "start_point": [
        3866,
        0
      ],
      "end_point": [
        3915,
        1
      ],
      "strings": []
    },
    "MHD_queue_response": {
      "start_point": [
        3929,
        0
      ],
      "end_point": [
        4016,
        1
      ],
      "strings": [
        "\"Attempted to queue response on wrong thread!\\n\"",
        "\"Attempted 'upgrade' connection on daemon without MHD_ALLOW_UPGRADE option!\\n\"",
        "\"Application used invalid status code for 'upgrade' response!\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/connection.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/connection_https.c": {
    "recv_tls_adapter": {
      "start_point": [
        46,
        0
      ],
      "end_point": [
        88,
        1
      ],
      "strings": []
    },
    "send_tls_adapter": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        134,
        1
      ],
      "strings": []
    },
    "MHD_run_tls_handshake_": {
      "start_point": [
        146,
        0
      ],
      "end_point": [
        180,
        1
      ],
      "strings": [
        "\"Error: received handshake message out of context\\n\""
      ]
    },
    "MHD_set_https_callbacks": {
      "start_point": [
        189,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "strings": []
    },
    "MHD_tls_connection_shutdown": {
      "start_point": [
        203,
        0
      ],
      "end_point": [
        225,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/connection_https.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/daemon.c": {
    "mhd_panic_std": {
      "start_point": [
        126,
        0
      ],
      "end_point": [
        145,
        1
      ],
      "strings": [
        "\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\""
      ]
    },
    "MHD_check_global_init_": {
      "start_point": [
        193,
        0
      ],
      "end_point": [
        204,
        1
      ],
      "strings": []
    },
    "MHD_get_master": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        220,
        1
      ],
      "strings": []
    },
    "MHD_ip_count_lock": {
      "start_point": [
        262,
        0
      ],
      "end_point": [
        266,
        1
      ],
      "strings": []
    },
    "MHD_ip_count_unlock": {
      "start_point": [
        274,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "strings": []
    },
    "MHD_ip_addr_compare": {
      "start_point": [
        290,
        0
      ],
      "end_point": [
        298,
        1
      ],
      "strings": []
    },
    "MHD_ip_addr_to_key": {
      "start_point": [
        309,
        0
      ],
      "end_point": [
        346,
        1
      ],
      "strings": []
    },
    "MHD_ip_limit_add": {
      "start_point": [
        360,
        0
      ],
      "end_point": [
        415,
        1
      ],
      "strings": [
        "\"Failed to add IP connection count node\\n\""
      ]
    },
    "MHD_ip_limit_del": {
      "start_point": [
        426,
        0
      ],
      "end_point": [
        472,
        1
      ],
      "strings": [
        "\"Failed to find previously-added IP address\\n\"",
        "\"Previously-added IP address had counter of zero\\n\""
      ]
    },
    "MHD_init_daemon_certificate": {
      "start_point": [
        482,
        0
      ],
      "end_point": [
        565,
        1
      ],
      "strings": [
        "\"Bad trust certificate format\\n\"",
        "\"Failed to setup x509 certificate/key: pre 3.X.X version \"",
        "\"of GnuTLS does not support setting key password\"",
        "\"GnuTLS failed to setup x509 certificate/key: %s\\n\"",
        "\"You need to specify a certificate and key location\\n\""
      ]
    },
    "MHD_TLS_init": {
      "start_point": [
        574,
        0
      ],
      "end_point": [
        592,
        1
      ],
      "strings": [
        "\"Error: invalid credentials type %d specified.\\n\""
      ]
    },
    "MHD_get_fdset": {
      "start_point": [
        627,
        0
      ],
      "end_point": [
        640,
        1
      ],
      "strings": []
    },
    "urh_to_fdset": {
      "start_point": [
        656,
        0
      ],
      "end_point": [
        722,
        1
      ],
      "strings": []
    },
    "urh_from_fdset": {
      "start_point": [
        734,
        0
      ],
      "end_point": [
        765,
        1
      ],
      "strings": []
    },
    "urh_update_pollfd": {
      "start_point": [
        777,
        0
      ],
      "end_point": [
        809,
        1
      ],
      "strings": []
    },
    "urh_to_pollfd": {
      "start_point": [
        818,
        0
      ],
      "end_point": [
        825,
        1
      ],
      "strings": []
    },
    "urh_from_pollfd": {
      "start_point": [
        833,
        0
      ],
      "end_point": [
        857,
        1
      ],
      "strings": []
    },
    "internal_get_fdset2": {
      "start_point": [
        876,
        0
      ],
      "end_point": [
        990,
        1
      ],
      "strings": [
        "\"Maximum socket in select set: %d\\n\""
      ]
    },
    "MHD_get_fdset2": {
      "start_point": [
        1025,
        0
      ],
      "end_point": [
        1075,
        1
      ],
      "strings": [
        "\"MHD_get_fdset2() called with except_fd_set \"",
        "\"set to NULL. Such behavior is unsupported.\\n\""
      ]
    },
    "call_handlers": {
      "start_point": [
        1091,
        0
      ],
      "end_point": [
        1186,
        1
      ],
      "strings": []
    },
    "cleanup_upgraded_connection": {
      "start_point": [
        1197,
        0
      ],
      "end_point": [
        1219,
        1
      ],
      "strings": []
    },
    "process_urh": {
      "start_point": [
        1232,
        0
      ],
      "end_point": [
        1567,
        1
      ],
      "strings": [
        "\"Initiated daemon shutdown while \\\"upgraded\\\" connection was not closed.\\n\"",
        "\"Failed to forward to application \"",
        "\" bytes of data received from remote side: application shut down socket\\n\"",
        "\"Failed to forward to remote client \"",
        "\" bytes of data received from application: %s\\n\"",
        "\"Failed to forward to application \"",
        "\" bytes of data received from remote side: %s\\n\"",
        "\"Failed to forward to remote client \"",
        "\" bytes of data received from application: daemon shut down\\n\""
      ]
    },
    "thread_main_connection_upgrade": {
      "start_point": [
        1580,
        0
      ],
      "end_point": [
        1720,
        1
      ],
      "strings": [
        "\"Error preparing select\\n\"",
        "\"Error during select (%d): `%s'\\n\"",
        "\"Error during poll: `%s'\\n\""
      ]
    },
    "thread_main_handle_connection": {
      "start_point": [
        1731,
        0
      ],
      "end_point": [
        2098,
        1
      ],
      "strings": [
        "\"Failed to add FD to fd_set\\n\"",
        "\"Error during select (%d): `%s'\\n\"",
        "\"Error during poll: `%s'\\n\"",
        "\"Failed to add FD to fd_set\\n\"",
        "\"Error during select (%d): `%s'\\n\"",
        "\"Error during poll: `%s'\\n\"",
        "\"Processing thread terminating. Closing connection\\n\""
      ]
    },
    "MHD_tls_push_func_": {
      "start_point": [
        2127,
        0
      ],
      "end_point": [
        2137,
        1
      ],
      "strings": []
    },
    "internal_add_connection": {
      "start_point": [
        2166,
        0
      ],
      "end_point": [
        2545,
        1
      ],
      "strings": [
        "\"Socket descriptor larger than FD_SETSIZE: %d > %d\\n\"",
        "\"Failed to set SO_NOSIGPIPE on accepted socket: %s\\n\"",
        "\"Accepted connection on socket %d\\n\"",
        "\"Server reached connection limit. Closing inbound connection.\\n\"",
        "\"Connection rejected by application. Closing connection.\\n\"",
        "\"Error allocating memory: %s\\n\"",
        "\"Error allocating memory: %s\\n\"",
        "\"Error allocating memory: %s\\n\"",
        "\"Failed to setup TLS credentials: unknown credential type %d\\n\"",
        "\"Unknown credential type\"",
        "\"Server reached connection limit. Closing inbound connection.\\n\"",
        "\"MHD-connection\"",
        "\"Failed to create a thread: %s\\n\"",
        "\"Call to epoll_ctl failed: %s\\n\"",
        "\"n\"",
        "\"Failed to signal new connection via inter-thread communication channel.\""
      ]
    },
    "internal_suspend_connection_": {
      "start_point": [
        2557,
        0
      ],
      "end_point": [
        2612,
        1
      ],
      "strings": [
        "\"Failed to remove FD from epoll set\\n\""
      ]
    },
    "MHD_suspend_connection": {
      "start_point": [
        2646,
        0
      ],
      "end_point": [
        2664,
        1
      ],
      "strings": [
        "\"Cannot suspend connections without enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"",
        "\"Error: connection scheduled for \\\"upgrade\\\" cannot be suspended\""
      ]
    },
    "MHD_resume_connection": {
      "start_point": [
        2675,
        0
      ],
      "end_point": [
        2695,
        1
      ],
      "strings": [
        "\"Cannot resume connections without enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"",
        "\"r\"",
        "\"Failed to signal resume via inter-thread communication channel.\""
      ]
    },
    "resume_suspended_connections": {
      "start_point": [
        2707,
        0
      ],
      "end_point": [
        2814,
        1
      ],
      "strings": [
        "\"Resumed connection was already in EREADY set\\n\"",
        "\"w\"",
        "\"Failed to signal resume of connection via inter-thread communication channel.\""
      ]
    },
    "MHD_add_connection": {
      "start_point": [
        2844,
        0
      ],
      "end_point": [
        2877,
        1
      ],
      "strings": [
        "\"Failed to set nonblocking mode on new client socket: %s\\n\"",
        "\"Failed to set noninheritable mode on new client socket.\\n\""
      ]
    },
    "MHD_accept_connection": {
      "start_point": [
        2894,
        0
      ],
      "end_point": [
        3010,
        1
      ],
      "strings": [
        "\"Error accepting connection: %s\\n\"",
        "\"Hit process or system resource limit at FIRST connection. This is really bad as there is no sane way to proceed. Will try busy waiting for system resources to become magically available.\\n\"",
        "\"Hit process or system resource limit at %u connections, temporarily suspending accept(). Consider setting a lower MHD_OPTION_CONNECTION_LIMIT.\\n\"",
        "\"Failed to set nonblocking mode on incoming connection socket: %s\\n\"",
        "\"Failed to set noninheritable mode on incoming connection socket.\\n\"",
        "\"Accepted connection on socket %d\\n\""
      ]
    },
    "MHD_cleanup_connections": {
      "start_point": [
        3022,
        0
      ],
      "end_point": [
        3101,
        1
      ],
      "strings": [
        "\"Failed to join a thread\\n\"",
        "\"Failed to remove FD from epoll set\\n\""
      ]
    },
    "MHD_get_timeout": {
      "start_point": [
        3124,
        0
      ],
      "end_point": [
        3200,
        1
      ],
      "strings": [
        "\"Illegal call to MHD_get_timeout\\n\""
      ]
    },
    "internal_run_from_select": {
      "start_point": [
        3213,
        0
      ],
      "end_point": [
        3292,
        1
      ],
      "strings": []
    },
    "MHD_run_from_select": {
      "start_point": [
        3317,
        0
      ],
      "end_point": [
        3357,
        1
      ],
      "strings": [
        "\"MHD_run_from_select() called with except_fd_set \"",
        "\"set to NULL. Such behavior is deprecated.\\n\""
      ]
    },
    "MHD_select": {
      "start_point": [
        3368,
        0
      ],
      "end_point": [
        3522,
        1
      ],
      "strings": [
        "\"Could not obtain daemon fdsets\"",
        "\"Could not add listen socket to fdset\"",
        "\"Could not add control inter-thread communication channel FD to fdset\"",
        "\"select failed: %s\\n\""
      ]
    },
    "MHD_poll_all": {
      "start_point": [
        3534,
        0
      ],
      "end_point": [
        3736,
        1
      ],
      "strings": [
        "\"Error allocating memory: %s\\n\"",
        "\"poll failed: %s\\n\""
      ]
    },
    "MHD_poll_listen_socket": {
      "start_point": [
        3746,
        0
      ],
      "end_point": [
        3817,
        1
      ],
      "strings": [
        "\"poll failed: %s\\n\""
      ]
    },
    "MHD_poll": {
      "start_point": [
        3828,
        0
      ],
      "end_point": [
        3843,
        1
      ],
      "strings": []
    },
    "is_urh_ready": {
      "start_point": [
        3868,
        0
      ],
      "end_point": [
        3900,
        1
      ],
      "strings": []
    },
    "run_epoll_for_upgrade": {
      "start_point": [
        3910,
        0
      ],
      "end_point": [
        4008,
        1
      ],
      "strings": [
        "\"Call to epoll_wait failed: %s\\n\""
      ]
    },
    "MHD_epoll": {
      "start_point": [
        4024,
        0
      ],
      "end_point": [
        4312,
        1
      ],
      "strings": [
        "\"upgrade_ptr\"",
        "\"Call to epoll_ctl failed: %s\\n\"",
        "\"Failed to remove listen FD from epoll set\\n\"",
        "\"Call to epoll_ctl failed: %s\\n\"",
        "\"Failed to remove listen FD from epoll set\\n\"",
        "\"Call to epoll_wait failed: %s\\n\""
      ]
    },
    "MHD_run": {
      "start_point": [
        4336,
        0
      ],
      "end_point": [
        4360,
        1
      ],
      "strings": []
    },
    "close_connection": {
      "start_point": [
        4371,
        0
      ],
      "end_point": [
        4404,
        1
      ],
      "strings": []
    },
    "MHD_polling_thread": {
      "start_point": [
        4414,
        0
      ],
      "end_point": [
        4439,
        1
      ],
      "strings": []
    },
    "unescape_wrapper": {
      "start_point": [
        4453,
        0
      ],
      "end_point": [
        4461,
        1
      ],
      "strings": []
    },
    "MHD_start_daemon": {
      "start_point": [
        4484,
        0
      ],
      "end_point": [
        4507,
        1
      ],
      "strings": []
    },
    "MHD_quiesce_daemon": {
      "start_point": [
        4529,
        0
      ],
      "end_point": [
        4590,
        1
      ],
      "strings": [
        "\"Using MHD_quiesce_daemon in this mode requires MHD_USE_ITC\\n\"",
        "\"Failed to remove listen FD from epoll set\\n\"",
        "\"q\"",
        "\"Failed to signal quiesce via inter-thread communication channel\"",
        "\"Failed to remove listen FD from epoll set\\n\"",
        "\"q\"",
        "\"failed to signal quiesce via inter-thread communication channel\""
      ]
    },
    "parse_options": {
      "start_point": [
        4628,
        0
      ],
      "end_point": [
        4642,
        1
      ],
      "strings": []
    },
    "parse_options_va": {
      "start_point": [
        4653,
        0
      ],
      "end_point": [
        5109,
        1
      ],
      "strings": [
        "\"Warning: Too large timeout value, ignored.\\n\"",
        "\"Warning: Zero size, specified for thread pool size, is ignored. \"",
        "\"Thread pool is not used.\\n\"",
        "\"Warning: \\\"1\\\", specified for thread pool size, is ignored. \"",
        "\"Thread pool is not used.\\n\"",
        "\"Specified thread pool size (%u) too big\\n\"",
        "\"MHD_OPTION_THREAD_POOL_SIZE option is specified but \"",
        "\"MHD_USE_INTERNAL_POLLING_THREAD flag is not specified.\\n\"",
        "\"Both MHD_OPTION_THREAD_POOL_SIZE option and \"",
        "\"MHD_USE_THREAD_PER_CONNECTION flag are specified.\\n\"",
        "\"MHD HTTPS option %d passed to MHD but MHD_USE_TLS not set\\n\"",
        "\"MHD HTTPS option %d passed to MHD but MHD_USE_TLS not set\\n\"",
        "\"MHD HTTPS option %d passed to MHD but MHD_USE_TLS not set\\n\"",
        "\"MHD HTTPS option %d passed to MHD but MHD_USE_TLS not set\\n\"",
        "\"Error initializing DH parameters\\n\"",
        "\"Bad Diffie-Hellman parameters format\\n\"",
        "\"MHD HTTPS option %d passed to MHD but MHD_USE_TLS not set\\n\"",
        "\"Setting priorities to `%s' failed: %s\\n\"",
        "\"MHD_OPTION_HTTPS_CERT_CALLBACK requires building MHD with GnuTLS >= 3.0\\n\"",
        "\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"",
        "\"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"",
        "\"Flag MHD_USE_PEDANTIC_CHECKS is ignored because \"",
        "\"another behavior is specified by MHD_OPTION_STRICT_CLIENT.\\n\"",
        "\"MHD HTTPS option %d passed to MHD compiled without HTTPS support\\n\"",
        "\"Invalid option %d! (Did you terminate the list with MHD_OPTION_END?)\\n\""
      ]
    },
    "setup_epoll_fd": {
      "start_point": [
        5113,
        0
      ],
      "end_point": [
        5146,
        1
      ],
      "strings": [
        "\"Call to epoll_create1 failed: %s\\n\"",
        "\"Failed to set noninheritable mode on epoll FD.\\n\""
      ]
    },
    "setup_epoll_to_listen": {
      "start_point": [
        5158,
        0
      ],
      "end_point": [
        5211,
        1
      ],
      "strings": [
        "\"Call to epoll_ctl failed: %s\\n\"",
        "\"Call to epoll_ctl failed: %s\\n\""
      ]
    },
    "MHD_start_daemon_va": {
      "start_point": [
        5236,
        0
      ],
      "end_point": [
        6111,
        1
      ],
      "strings": [
        "\"NORMAL\"",
        "\"Warning: MHD_USE_THREAD_PER_CONNECTION must be used only with \"",
        "\"MHD_USE_INTERNAL_POLLING_THREAD. Flag MHD_USE_INTERNAL_POLLING_THREAD \"",
        "\"was added. Consider setting MHD_USE_INTERNAL_POLLING_THREAD explicitly.\\n\"",
        "\"Using debug build of libmicrohttpd.\\n\"",
        "\"Failed to create inter-thread communication channel: %s\\n\"",
        "\"file descriptor for inter-thread communication channel exceeds maximum value\\n\"",
        "\"Specified value for NC_SIZE too large\\n\"",
        "\"Failed to allocate memory for nonce-nc map: %s\\n\"",
        "\"MHD failed to initialize nonce-nc mutex\\n\"",
        "\"MHD thread pooling only works with MHD_USE_INTERNAL_POLLING_THREAD\\n\"",
        "\"Failed to create socket for listening: %s\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"Cannot allow listening address reuse: SO_REUSEPORT not defined\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"Cannot disallow listening address reuse: SO_EXCLUSIVEADDRUSE not defined\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"Failed to bind to port %u: %s\\n\"",
        "\"setsockopt failed: %s\\n\"",
        "\"Failed to listen for connections: %s\\n\"",
        "\"Failed to get listen port number: %s\\n\"",
        "\"Failed to get listen port number (`struct sockaddr_storage` too small!?)\\n\"",
        "\"Unknown address family!\\n\"",
        "\"Failed to set nonblocking mode on listening socket: %s\\n\"",
        "\"Socket descriptor larger than FD_SETSIZE: %d > %d\\n\"",
        "\"Combining MHD_USE_THREAD_PER_CONNECTION and MHD_USE_EPOLL is not supported.\\n\"",
        "\"MHD failed to initialize IP connection limit mutex\\n\"",
        "\"MHD failed to initialize IP connection limit mutex\\n\"",
        "\"Failed to initialize TLS support\\n\"",
        "\"MHD-listen\"",
        "\"MHD-single\"",
        "\"Failed to create listen thread: %s\\n\"",
        "\"Failed to create worker inter-thread communication channel: %s\\n\"",
        "\"File descriptor for worker inter-thread communication channel exceeds maximum value\\n\"",
        "\"MHD failed to initialize cleanup connection mutex\\n\"",
        "\"MHD-worker\"",
        "\"Failed to create pool thread: %s\\n\"",
        "\"Failed to remove FD from epoll set\\n\""
      ]
    },
    "close_all_connections": {
      "start_point": [
        6122,
        0
      ],
      "end_point": [
        6261,
        1
      ],
      "strings": [
        "\"MHD_stop_daemon() called while we have suspended connections.\\n\"",
        "\"Initiated daemon shutdown while \\\"upgraded\\\" connection was not closed.\\n\"",
        "\"MHD_stop_daemon() called while we have suspended connections.\\n\"",
        "\"e\"",
        "\"Failed to signal shutdown via inter-thread communication channel\"",
        "\"Failed to join a thread\\n\"",
        "\"Failed to join a thread\\n\""
      ]
    },
    "MHD_stop_daemon": {
      "start_point": [
        6270,
        0
      ],
      "end_point": [
        6411,
        1
      ],
      "strings": [
        "\"e\"",
        "\"Failed to signal shutdown via inter-thread communication channel.\"",
        "\"e\"",
        "\"Failed to signal shutdown via inter-thread communication channel\"",
        "\"Failed to join a thread\\n\""
      ]
    },
    "MHD_get_daemon_info": {
      "start_point": [
        6425,
        0
      ],
      "end_point": [
        6470,
        1
      ],
      "strings": []
    },
    "MHD_set_panic_func": {
      "start_point": [
        6489,
        0
      ],
      "end_point": [
        6495,
        1
      ],
      "strings": []
    },
    "MHD_get_version": {
      "start_point": [
        6504,
        0
      ],
      "end_point": [
        6524,
        1
      ],
      "strings": [
        "\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"",
        "\"%x.%x.%x\"",
        "\"0.0.0\""
      ]
    },
    "MHD_is_feature_supported": {
      "start_point": [
        6538,
        0
      ],
      "end_point": [
        6676,
        1
      ],
      "strings": []
    },
    "gcry_w32_mutex_init": {
      "start_point": [
        6685,
        0
      ],
      "end_point": [
        6700,
        1
      ],
      "strings": []
    },
    "gcry_w32_mutex_destroy": {
      "start_point": [
        6703,
        0
      ],
      "end_point": [
        6709,
        1
      ],
      "strings": []
    },
    "gcry_w32_mutex_lock": {
      "start_point": [
        6712,
        0
      ],
      "end_point": [
        6716,
        1
      ],
      "strings": []
    },
    "gcry_w32_mutex_unlock": {
      "start_point": [
        6719,
        0
      ],
      "end_point": [
        6723,
        1
      ],
      "strings": []
    },
    "MHD_init": {
      "start_point": [
        6739,
        0
      ],
      "end_point": [
        6780,
        1
      ],
      "strings": [
        "\"Failed to initialize winsock\\n\"",
        "\"Winsock version 2.2 is not available\\n\"",
        "\"Failed to initialise multithreading in libgcrypt\\n\"",
        "\"Failed to initialise multithreading in libgcrypt\\n\"",
        "\"1.6.0\"",
        "\"libgcrypt is too old. MHD was compiled for libgcrypt 1.6.0 or newer\\n\""
      ]
    },
    "MHD_fini": {
      "start_point": [
        6783,
        0
      ],
      "end_point": [
        6794,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/digestauth.c": {
    "cvthex": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    },
    "digest_calc_ha1": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "strings": [
        "\":\"",
        "\":\"",
        "\"md5-sess\"",
        "\":\"",
        "\":\""
      ]
    },
    "digest_calc_response": {
      "start_point": [
        177,
        0
      ],
      "end_point": [
        267,
        1
      ],
      "strings": [
        "\":\"",
        "\"auth-int\"",
        "\":\"",
        "\":\"",
        "\":\"",
        "\":\"",
        "\":\"",
        "\":\""
      ]
    },
    "lookup_sub_value": {
      "start_point": [
        284,
        0
      ],
      "end_point": [
        365,
        1
      ],
      "strings": []
    },
    "check_nonce_nc": {
      "start_point": [
        377,
        0
      ],
      "end_point": [
        455,
        1
      ],
      "strings": [
        "\"Stale nonce received.  If this happens a lot, you should probably increase the size of the nonce array.\\n\""
      ]
    },
    "MHD_digest_auth_get_username": {
      "start_point": [
        467,
        0
      ],
      "end_point": [
        490,
        1
      ],
      "strings": [
        "\"username\""
      ]
    },
    "calculate_nonce": {
      "start_point": [
        506,
        0
      ],
      "end_point": [
        564,
        1
      ],
      "strings": [
        "\":\"",
        "\":\"",
        "\":\"",
        "\":\""
      ]
    },
    "test_header": {
      "start_point": [
        578,
        0
      ],
      "end_point": [
        604,
        1
      ],
      "strings": []
    },
    "check_argument_match": {
      "start_point": [
        617,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "strings": [
        "\"Failed to allocate memory for copy of URI arguments\\n\""
      ]
    },
    "MHD_digest_auth_check": {
      "start_point": [
        672,
        0
      ],
      "end_point": [
        929,
        1
      ],
      "strings": [
        "\"username\"",
        "\"username\"",
        "\"realm\"",
        "\"realm\"",
        "\"nonce\"",
        "\"nonce\"",
        "\"Authentication failed, invalid timestamp format.\\n\"",
        "\"cnonce\"",
        "\"qop\"",
        "\"auth\"",
        "\"\"",
        "\"nc\"",
        "\"response\"",
        "\"Authentication failed, invalid format.\\n\"",
        "\"Authentication failed, invalid nc format.\\n\"",
        "\"Failed to allocate memory for auth header processing\\n\"",
        "\"uri\"",
        "\"md5\"",
        "\"Authentication failed, URI does not match.\\n\"",
        "\"\"",
        "\"Authentication failed, arguments do not match.\\n\""
      ]
    },
    "MHD_queue_auth_fail_response": {
      "start_point": [
        946,
        0
      ],
      "end_point": [
        1033,
        1
      ],
      "strings": [
        "\"Could not register nonce (is the nonce array size zero?).\\n\"",
        "\"Digest realm=\\\"%s\\\",qop=\\\"auth\\\",nonce=\\\"%s\\\",opaque=\\\"%s\\\"%s\"",
        "\",stale=\\\"true\\\"\"",
        "\"\"",
        "\"Failed to allocate memory for auth response header\\n\"",
        "\"Digest realm=\\\"%s\\\",qop=\\\"auth\\\",nonce=\\\"%s\\\",opaque=\\\"%s\\\"%s\"",
        "\",stale=\\\"true\\\"\"",
        "\"\"",
        "\"Failed to add Digest auth header\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/internal.c": {
    "MHD_state_to_string": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": [
        "\"connection init\"",
        "\"connection url received\"",
        "\"header partially received\"",
        "\"headers received\"",
        "\"headers processed\"",
        "\"continue sending\"",
        "\"continue sent\"",
        "\"body received\"",
        "\"footer partially received\"",
        "\"footers received\"",
        "\"headers sending\"",
        "\"headers sent\"",
        "\"normal body ready\"",
        "\"normal body unready\"",
        "\"chunked body ready\"",
        "\"chunked body unready\"",
        "\"body sent\"",
        "\"footers sending\"",
        "\"footers sent\"",
        "\"closed\"",
        "\"unrecognized connection state\""
      ]
    },
    "MHD_DLOG": {
      "start_point": [
        92,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": []
    },
    "MHD_unescape_plus": {
      "start_point": [
        115,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "strings": []
    },
    "MHD_http_unescape": {
      "start_point": [
        134,
        0
      ],
      "end_point": [
        165,
        1
      ],
      "strings": []
    },
    "MHD_parse_arguments_": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/internal.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/md5.c": {
    "MD5Init": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "strings": []
    },
    "MD5Update": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "strings": []
    },
    "MD5Pad": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "strings": []
    },
    "MD5Final": {
      "start_point": [
        133,
        0
      ],
      "end_point": [
        146,
        1
      ],
      "strings": []
    },
    "MD5Transform": {
      "start_point": [
        166,
        0
      ],
      "end_point": [
        261,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/md5.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/memorypool.c": {
    "MHD_free": {
      "start_point": [
        87,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    },
    "MHD_pool_create": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        147,
        1
      ],
      "strings": []
    },
    "MHD_pool_destroy": {
      "start_point": [
        155,
        0
      ],
      "end_point": [
        174,
        1
      ],
      "strings": []
    },
    "MHD_pool_get_free": {
      "start_point": [
        183,
        0
      ],
      "end_point": [
        187,
        1
      ],
      "strings": []
    },
    "MHD_pool_allocate": {
      "start_point": [
        201,
        0
      ],
      "end_point": [
        226,
        1
      ],
      "strings": []
    },
    "MHD_pool_reallocate": {
      "start_point": [
        246,
        0
      ],
      "end_point": [
        296,
        1
      ],
      "strings": []
    },
    "MHD_pool_reset": {
      "start_point": [
        312,
        0
      ],
      "end_point": [
        336,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/memorypool.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_assert.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_byteorder.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_compat.c": {
    "W32_snprintf": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": []
    },
    "MHD_calloc_": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        112,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_compat.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_itc.c": {
    "MHD_itc_nonblocking_": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_itc.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_itc_types.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_limits.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_locks.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_mono_clock.c": {
    "MHD_monotonic_sec_counter_init": {
      "start_point": [
        136,
        0
      ],
      "end_point": [
        308,
        1
      ],
      "strings": []
    },
    "MHD_monotonic_sec_counter_finish": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        325,
        1
      ],
      "strings": []
    },
    "MHD_monotonic_sec_counter": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        376,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_mono_clock.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_sockets.c": {
    "MHD_W32_strerror_winsock_": {
      "start_point": [
        39,
        0
      ],
      "end_point": [
        237,
        1
      ],
      "strings": [
        "\"No error\"",
        "\"Specified event object handle is invalid\"",
        "\"Insufficient memory available\"",
        "\"One or more parameters are invalid\"",
        "\"Overlapped operation aborted\"",
        "\"Overlapped I/O event object not in signaled state\"",
        "\"Overlapped operations will complete later\"",
        "\"Interrupted function call\"",
        "\"File handle is not valid\"",
        "\"Permission denied\"",
        "\"Bad address\"",
        "\"Invalid argument\"",
        "\"Too many open files\"",
        "\"Resource temporarily unavailable\"",
        "\"Operation now in progress\"",
        "\"Operation already in progress\"",
        "\"Socket operation on nonsocket\"",
        "\"Destination address required\"",
        "\"Message too long\"",
        "\"Protocol wrong type for socket\"",
        "\"Bad protocol option\"",
        "\"Protocol not supported\"",
        "\"Socket type not supported\"",
        "\"Operation not supported\"",
        "\"Protocol family not supported\"",
        "\"Address family not supported by protocol family\"",
        "\"Address already in use\"",
        "\"Cannot assign requested address\"",
        "\"Network is down\"",
        "\"Network is unreachable\"",
        "\"Network dropped connection on reset\"",
        "\"Software caused connection abort\"",
        "\"Connection reset by peer\"",
        "\"No buffer space available\"",
        "\"Socket is already connected\"",
        "\"Socket is not connected\"",
        "\"Cannot send after socket shutdown\"",
        "\"Too many references\"",
        "\"Connection timed out\"",
        "\"Connection refused\"",
        "\"Cannot translate name\"",
        "\"Name too long\"",
        "\"Host is down\"",
        "\"No route to host\"",
        "\"Directory not empty\"",
        "\"Too many processes\"",
        "\"User quota exceeded\"",
        "\"Disk quota exceeded\"",
        "\"Stale file handle reference\"",
        "\"Item is remote\"",
        "\"Network subsystem is unavailable\"",
        "\"Winsock.dll version out of range\"",
        "\"Successful WSAStartup not yet performed\"",
        "\"Graceful shutdown in progress\"",
        "\"No more results\"",
        "\"Call has been canceled\"",
        "\"Procedure call table is invalid\"",
        "\"Service provider is invalid\"",
        "\"Service provider failed to initialize\"",
        "\"System call failure\"",
        "\"Service not found\"",
        "\"Class type not found\"",
        "\"No more results\"",
        "\"Call was canceled\"",
        "\"Database query was refused\"",
        "\"Host not found\"",
        "\"Nonauthoritative host not found\"",
        "\"This is a nonrecoverable error\"",
        "\"Valid name, no data record of requested type\"",
        "\"QoS receivers\"",
        "\"QoS senders\"",
        "\"No QoS senders\"",
        "\"QoS no receivers\"",
        "\"QoS request confirmed\"",
        "\"QoS admission error\"",
        "\"QoS policy failure\"",
        "\"QoS bad style\"",
        "\"QoS bad object\"",
        "\"QoS traffic control error\"",
        "\"QoS generic error\"",
        "\"QoS service type error\"",
        "\"QoS flowspec error\"",
        "\"Invalid QoS provider buffer\"",
        "\"Invalid QoS filter style\"",
        "\"Invalid QoS filter type\"",
        "\"Incorrect QoS filter count\"",
        "\"Invalid QoS object length\"",
        "\"Incorrect QoS flow count\"",
        "\"Unrecognized QoS object\"",
        "\"Invalid QoS policy object\"",
        "\"Invalid QoS flow descriptor\"",
        "\"Invalid QoS provider-specific flowspec\"",
        "\"Invalid QoS provider-specific filterspec\"",
        "\"Invalid QoS shape discard mode object\"",
        "\"Invalid QoS shaping rate object\"",
        "\"Reserved policy QoS element type\"",
        "\"Unknown winsock error\""
      ]
    },
    "MHD_W32_socket_pair_": {
      "start_point": [
        247,
        0
      ],
      "end_point": [
        357,
        1
      ],
      "strings": []
    },
    "MHD_add_to_fd_set_": {
      "start_point": [
        372,
        0
      ],
      "end_point": [
        393,
        1
      ],
      "strings": []
    },
    "MHD_socket_nonblocking_": {
      "start_point": [
        402,
        0
      ],
      "end_point": [
        427,
        1
      ],
      "strings": []
    },
    "MHD_socket_noninheritable_": {
      "start_point": [
        437,
        0
      ],
      "end_point": [
        460,
        1
      ],
      "strings": []
    },
    "MHD_socket_create_listen_": {
      "start_point": [
        469,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_sockets.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_str.c": {
    "isasciilower": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "strings": []
    },
    "isasciiupper": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": []
    },
    "isasciialpha": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "strings": []
    },
    "isasciidigit": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": []
    },
    "isasciixdigit": {
      "start_point": [
        115,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "strings": []
    },
    "isasciialnum": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        134,
        1
      ],
      "strings": []
    },
    "toasciilower": {
      "start_point": [
        147,
        0
      ],
      "end_point": [
        151,
        1
      ],
      "strings": []
    },
    "toasciiupper": {
      "start_point": [
        164,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "strings": []
    },
    "todigitvalue": {
      "start_point": [
        179,
        0
      ],
      "end_point": [
        186,
        1
      ],
      "strings": []
    },
    "toxdigitvalue": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        207,
        1
      ],
      "strings": []
    },
    "MHD_str_equal_caseless_": {
      "start_point": [
        327,
        0
      ],
      "end_point": [
        342,
        1
      ],
      "strings": []
    },
    "MHD_str_equal_caseless_n_": {
      "start_point": [
        357,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "strings": []
    },
    "MHD_str_has_token_caseless_": {
      "start_point": [
        391,
        0
      ],
      "end_point": [
        433,
        1
      ],
      "strings": []
    },
    "MHD_str_to_uint64_": {
      "start_point": [
        448,
        0
      ],
      "end_point": [
        474,
        1
      ],
      "strings": []
    },
    "MHD_str_to_uint64_n_": {
      "start_point": [
        490,
        0
      ],
      "end_point": [
        520,
        1
      ],
      "strings": []
    },
    "MHD_strx_to_uint32_": {
      "start_point": [
        533,
        0
      ],
      "end_point": [
        563,
        1
      ],
      "strings": []
    },
    "MHD_strx_to_uint32_n_": {
      "start_point": [
        579,
        0
      ],
      "end_point": [
        606,
        1
      ],
      "strings": []
    },
    "MHD_strx_to_uint64_": {
      "start_point": [
        619,
        0
      ],
      "end_point": [
        648,
        1
      ],
      "strings": []
    },
    "MHD_strx_to_uint64_n_": {
      "start_point": [
        664,
        0
      ],
      "end_point": [
        691,
        1
      ],
      "strings": []
    },
    "MHD_str_to_uvalue_n_": {
      "start_point": [
        712,
        0
      ],
      "end_point": [
        756,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_str.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_threads.c": {
    "MHD_set_thread_name_": [
      {
        "start_point": [
          62,
          0
        ],
        "end_point": [
          83,
          1
        ],
        "strings": []
      },
      {
        "start_point": [
          118,
          0
        ],
        "end_point": [
          152,
          1
        ],
        "strings": []
      }
    ],
    "thread_info": {
      "start_point": [
        148,
        2
      ],
      "end_point": [
        149,
        4
      ],
      "strings": []
    },
    "MHD_create_thread_": {
      "start_point": [
        176,
        0
      ],
      "end_point": [
        233,
        1
      ],
      "strings": []
    },
    "named_thread_starter": {
      "start_point": [
        257,
        0
      ],
      "end_point": [
        275,
        1
      ],
      "strings": []
    },
    "MHD_create_named_thread_": {
      "start_point": [
        289,
        0
      ],
      "end_point": [
        360,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/mhd_threads.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/postprocessor.c": {
    "MHD_create_post_processor": {
      "start_point": [
        272,
        0
      ],
      "end_point": [
        340,
        1
      ],
      "strings": [
        "\"boundary=\"",
        "\"boundary=\""
      ]
    },
    "post_process_urlencoded": {
      "start_point": [
        351,
        0
      ],
      "end_point": [
        512,
        1
      ],
      "strings": []
    },
    "try_match_header": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        543,
        1
      ],
      "strings": []
    },
    "find_boundary": {
      "start_point": [
        559,
        0
      ],
      "end_point": [
        612,
        1
      ],
      "strings": [
        "\"--\""
      ]
    },
    "try_get_value": {
      "start_point": [
        621,
        0
      ],
      "end_point": [
        661,
        1
      ],
      "strings": []
    },
    "process_multipart_headers": {
      "start_point": [
        679,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "strings": [
        "\"Content-disposition: \"",
        "\"Content-disposition: \"",
        "\"Content-disposition: \"",
        "\"name\"",
        "\"Content-disposition: \"",
        "\"filename\"",
        "\"Content-type: \"",
        "\"Content-Transfer-Encoding: \""
      ]
    },
    "process_value_to_boundary": {
      "start_point": [
        751,
        0
      ],
      "end_point": [
        844,
        1
      ],
      "strings": [
        "\"\\r\\n--\""
      ]
    },
    "free_unmarked": {
      "start_point": [
        851,
        0
      ],
      "end_point": [
        878,
        1
      ],
      "strings": []
    },
    "post_process_multipart": {
      "start_point": [
        889,
        0
      ],
      "end_point": [
        1196,
        1
      ],
      "strings": [
        "\"multipart/mixed\"",
        "\"multipart/mixed\"",
        "\"boundary=\"",
        "\"boundary=\""
      ]
    },
    "MHD_post_process": {
      "start_point": [
        1212,
        0
      ],
      "end_point": [
        1235,
        1
      ],
      "strings": []
    },
    "MHD_destroy_post_processor": {
      "start_point": [
        1248,
        0
      ],
      "end_point": [
        1279,
        1
      ],
      "strings": [
        "\"\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/reason_phrase.c": {
    "MHD_get_reason_phrase_for": {
      "start_point": [
        174,
        0
      ],
      "end_point": [
        182,
        1
      ],
      "strings": [
        "\"Unknown\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/response.c": {
    "add_response_entry": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        104,
        1
      ],
      "strings": []
    },
    "MHD_add_response_header": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        125,
        1
      ],
      "strings": []
    },
    "MHD_add_response_footer": {
      "start_point": [
        137,
        0
      ],
      "end_point": [
        146,
        1
      ],
      "strings": []
    },
    "MHD_del_response_header": {
      "start_point": [
        158,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "strings": []
    },
    "MHD_get_response_headers": {
      "start_point": [
        204,
        0
      ],
      "end_point": [
        225,
        1
      ],
      "strings": []
    },
    "MHD_get_response_header": {
      "start_point": [
        236,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "strings": []
    },
    "MHD_check_response_header_token_ci": {
      "start_point": [
        268,
        0
      ],
      "end_point": [
        295,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_callback": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        341,
        1
      ],
      "strings": []
    },
    "MHD_set_response_options": {
      "start_point": [
        352,
        0
      ],
      "end_point": [
        375,
        1
      ],
      "strings": []
    },
    "file_reader": {
      "start_point": [
        388,
        0
      ],
      "end_point": [
        463,
        1
      ],
      "strings": []
    },
    "free_callback": {
      "start_point": [
        472,
        0
      ],
      "end_point": [
        479,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_fd_at_offset": {
      "start_point": [
        499,
        0
      ],
      "end_point": [
        507,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_fd_at_offset64": {
      "start_point": [
        526,
        19
      ],
      "end_point": [
        556,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_fd": {
      "start_point": [
        568,
        0
      ],
      "end_point": [
        575,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_fd64": {
      "start_point": [
        591,
        19
      ],
      "end_point": [
        598,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_data": {
      "start_point": [
        615,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "strings": []
    },
    "MHD_create_response_from_buffer": {
      "start_point": [
        669,
        0
      ],
      "end_point": [
        678,
        1
      ],
      "strings": []
    },
    "MHD_upgrade_action": {
      "start_point": [
        694,
        0
      ],
      "end_point": [
        740,
        1
      ],
      "strings": []
    },
    "MHD_response_execute_upgrade_": {
      "start_point": [
        756,
        0
      ],
      "end_point": [
        993,
        1
      ],
      "strings": [
        "\"Invalid response for upgrade: application failed to set the 'Upgrade' header!\\n\"",
        "\"Failed to make loopback sockets non-blocking.\\n\"",
        "\"Failed to set SO_NOSIGPIPE on loopback sockets.\\n\"",
        "\"Socketpair descriptor larger than FD_SETSIZE: %d > %d\\n\"",
        "\"Call to epoll_ctl failed: %s\\n\"",
        "\"Error cleaning up while handling epoll error\"",
        "\"Call to epoll_ctl failed: %s\\n\""
      ]
    },
    "MHD_create_response_for_upgrade": {
      "start_point": [
        1025,
        19
      ],
      "end_point": [
        1054,
        1
      ],
      "strings": [
        "\"Upgrade\""
      ]
    },
    "MHD_destroy_response": {
      "start_point": [
        1067,
        0
      ],
      "end_point": [
        1093,
        1
      ],
      "strings": []
    },
    "MHD_increment_response_rc": {
      "start_point": [
        1101,
        0
      ],
      "end_point": [
        1107,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/response.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/sysfdsetsize.c": {
    "get_system_fdsetsize_value": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/sysfdsetsize.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_daemon.c": {
    "testStartError": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        51,
        1
      ],
      "strings": [
        "\"Succeeded to start without MHD_AccessHandlerCallback?\\n\""
      ]
    },
    "apc_nothing": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "strings": []
    },
    "apc_all": {
      "start_point": [
        65,
        0
      ],
      "end_point": [
        73,
        1
      ],
      "strings": []
    },
    "ahc_nothing": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "strings": []
    },
    "testStartStop": {
      "start_point": [
        93,
        0
      ],
      "end_point": [
        112,
        1
      ],
      "strings": [
        "\"Failed to start daemon on port %u\\n\""
      ]
    },
    "testExternalRun": {
      "start_point": [
        115,
        0
      ],
      "end_point": [
        159,
        1
      ],
      "strings": [
        "\"Failed to start daemon on port %u\\n\"",
        "\"Failed in MHD_get_fdset()\\n\"",
        "\"Failed in MHD_run()\\n\""
      ]
    },
    "testThread": {
      "start_point": [
        162,
        0
      ],
      "end_point": [
        188,
        1
      ],
      "strings": [
        "\"Failed to start daemon on port %u\\n\"",
        "\"Failed in MHD_run()\\n\""
      ]
    },
    "testMultithread": {
      "start_point": [
        191,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "strings": [
        "\"Failed to start daemon on port %u\\n\"",
        "\"Failed in MHD_run()\\n\""
      ]
    },
    "main": {
      "start_point": [
        220,
        0
      ],
      "end_point": [
        237,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_helpers.h": {
    "has_in_name": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        64,
        1
      ],
      "strings": []
    },
    "has_param": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_http_reasons.c": {
    "expect_result": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        38,
        1
      ],
      "strings": [
        "\"Incorrect reason returned for code %d:\\n  Returned: \\\"%s\\\"  \\tExpected: \\\"%s\\\"\\n\""
      ]
    },
    "expect_absent": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        43,
        1
      ],
      "strings": [
        "\"unknown\""
      ]
    },
    "test_absent_codes": {
      "start_point": [
        45,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": []
    },
    "test_1xx": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "strings": [
        "\"continue\"",
        "\"processing\""
      ]
    },
    "test_2xx": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": [
        "\"ok\"",
        "\"already reported\"",
        "\"im used\""
      ]
    },
    "test_3xx": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "strings": [
        "\"multiple choices\"",
        "\"see other\"",
        "\"permanent redirect\""
      ]
    },
    "test_4xx": {
      "start_point": [
        92,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": [
        "\"bad request\"",
        "\"not found\"",
        "\"uri too long\"",
        "\"expectation failed\"",
        "\"request header fields too large\"",
        "\"no response\"",
        "\"unavailable for legal reasons\""
      ]
    },
    "test_5xx": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        118,
        1
      ],
      "strings": [
        "\"internal server error\"",
        "\"bad gateway\"",
        "\"http version not supported\"",
        "\"network authentication required\""
      ]
    },
    "main": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_options.c": {
    "ahc_echo": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "strings": []
    },
    "test_wrap_loc": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "strings": [
        "\"running test: %s \"",
        "\"[pass]\\n\"",
        "\"[fail]\\n\""
      ]
    },
    "test_ip_addr_option": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        122,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        125,
        0
      ],
      "end_point": [
        134,
        1
      ],
      "strings": [
        "\"ip addr option\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_postprocessor.c": {
    "mismatch": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "strings": []
    },
    "value_checker": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "strings": [
        "\"VC: `%s' `%s' `%s' `%s' `%.*s'\\n\""
      ]
    },
    "test_urlencoding": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        154,
        1
      ],
      "strings": []
    },
    "test_multipart_garbage": {
      "start_point": [
        157,
        0
      ],
      "end_point": [
        195,
        1
      ],
      "strings": [
        "\", boundary=AaB03x\""
      ]
    },
    "test_multipart_splits": {
      "start_point": [
        198,
        0
      ],
      "end_point": [
        228,
        1
      ],
      "strings": [
        "\", boundary=AaB03x\""
      ]
    },
    "test_multipart": {
      "start_point": [
        231,
        0
      ],
      "end_point": [
        263,
        1
      ],
      "strings": [
        "\", boundary=AaB03x\""
      ]
    },
    "test_nested_multipart": {
      "start_point": [
        266,
        0
      ],
      "end_point": [
        298,
        1
      ],
      "strings": [
        "\", boundary=AaB03x\""
      ]
    },
    "test_empty_value": {
      "start_point": [
        301,
        0
      ],
      "end_point": [
        332,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        337,
        0
      ],
      "end_point": [
        352,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_postprocessor_amp.c": {
    "check_post": {
      "start_point": [
        8,
        0
      ],
      "end_point": [
        21,
        1
      ],
      "strings": [
        "\"a\"",
        "\"b\"",
        "\"ERROR: got unexpected '%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        24,
        0
      ],
      "end_point": [
        48,
        1
      ],
      "strings": [
        "\"a=xx+xx+xxx+xxxxx+xxxx+xxxxxxxx+xxx+xxxxxx+xxx+xxx+xxxxxxx+xxxxx%0A+++++++xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx%0A+++++++--%3E%0A++++++++++++++%3Cxxxxx+xxxxx%3D%22xxx%25%22%3E%0A+++++++++++%3Cxx%3E%0A+++++++++++++++%3Cxx+xxxxxxx%3D%22x%22+xxxxx%3D%22xxxxx%22%3E%0A+++++++++++++++++++%3Cxxxxx+xxxxx%3D%22xxx%25%22%3E%0A+++++++++++++++++++++++%3Cxx%3E%0A+++++++++++++++++++++++++++%3Cxx+xxxxx%3D%22xxxx%22%3E%0A+++++++++++++++++++++++++++++++%3Cx+xxxxx%3D%22xxxx-xxxxx%3Axxxxx%22%3Exxxxx%3A%3C%2Fx%3E%0A%0A+++++++++++++++++++++++++++++++%3Cx+xxxxx%3D%22xxxx-xxxxx%3Axxxxx%22%3Exxx%3A%3C%2Fx%3E%0A%0A+++++++++++++++++++++++++++++++%3Cx+xxxxx%3D%22xxxx-xxxxx%3Axxxxx%3B+xxxx-xxxxxx%3A+xxxx%3B%22%3Exxxxx+xxxxx%3A%3C%2Fx%3E%0A+++++++++++++++++++++++++++%3C%2Fxx%3E%0A+++++++++++++++++++++++%3C%2Fxx%3E%0A+++++++++++++++++++%3C%2Fxxxxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A+++++++++++++++%3Cxx+xxxxx%3D%22xxxx-xxxxx%3A+xxxxx%3B+xxxxx%3A+xxxx%22%3E%26xxxxx%3B+%3Cxxxx%0A+++++++++++++++++++++++xxxxx%3D%22xxxxxxxxxxxxxxx%22%3Exxxx.xx%3C%2Fxxxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A+++++++++++%3C%2Fxx%3E%0A++++++++++++++++++++++++++%3Cxx%3E%0A+++++++++++++++++++%3Cxx+xxxxx%3D%22xxxx-xxxxx%3A+xxxxx%3B+xxxxx%3A+xxxx%22%3E%26xxxxx%3B+%3Cxxxx%0A+++++++++++++++++++++++++++xxxxx%3D%22xxxxxxxxxxxxxxx%22%3Exxx.xx%3C%2Fxxxx%3E%0A+++++++++++++++++++%3C%2Fxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A++++++++++++++++++++++%3Cxx%3E%0A+++++++++++++++%3Cxx+xxxxx%3D%22xxxx-xxxxx%3A+xxxxx%3Bxxxx-xxxxxx%3A+xxxx%3B+xxxxx%3A+xxxx%22%3E%26xxxxx%3B+%3Cxxxx%0A+++++++++++++++++++++++xxxxx%3D%22xxxxxxxxxxxxxxx%22%3Exxxx.xx%3C%2Fxxxx%3E%3C%2Fxx%3E%0A+++++++++++%3C%2Fxx%3E%0A+++++++%3C%2Fxxxxx%3E%0A+++++++%3C%21--%0A+++++++xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx%0A+++++++xxx+xx+xxxxx+xxxxxxx+xxxxxxx%0A+++++++xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx%0A+++++++--%3E%0A+++%3C%2Fxxx%3E%0A%0A%0A%0A+++%3Cxxx+xxxxx%3D%22xxxxxxxxx%22+xx%3D%22xxxxxxxxx%22%3E%3C%2Fxxx%3E%0A%0A+++%3Cxxx+xx%3D%22xxxx%22+xxxxx%3D%22xxxx%22%3E%0A+++++++%3Cxxxxx+xxxxx%3D%22xxxxxxxxx%22%3E%0A+++++++++++%3Cxx%3E%0A+++++++++++++++%3Cxx+xxxxxxx%3D%22x%22+xx%3D%22xxxxxxxxxxxxx%22+xxxxx%3D%22xxxxxxxxxxxxx%22%3E%0A+++++++++++++++++++%3Cxxx+xx%3D%22xxxxxx%22%3E%3C%2Fxxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A+++++++++++%3C%2Fxx%3E%0A+++++++++++%3Cxx%3E%0A+++++++++++++++%3Cxx+xx%3D%22xxxxxxxxxxxxxxxxx%22+xxxxx%3D%22xxxxxxxxxxxxxxxxx%22%3E%3C%2Fxx%3E%0A+++++++++++++++%3Cxx+xx%3D%22xxxxxxxxxxxxxx%22+xxxxx%3D%22xxxxxxxxxxxxxx%22%3E%0A+++++++++++++++++++%3Cxxx+xx%3D%22xxxxxxx%22%3E%3C%2Fxxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A+++++++++++%3C%2Fxx%3E%0A+++++++++++%3Cxx%3E%0A+++++++++++++++%3Cxx+xxxxxxx%3D%22x%22+xx%3D%22xxxxxxxxxxxxx%22+xxxxx%3D%22xxxxxxxxxxxxx%22%3E%0A+++++++++++++++++++%3Cxxx+xx%3D%22xxxxxx%22%3E%3C%2Fxxx%3E%0A+++++++++++++++%3C%2Fxx%3E%0A+++++++++++%3C%2Fxx%3E%0A+++++++%3C%2Fxxxxx%3E%0A+++%3C%2Fxxx%3E%0A%3C%2Fxxx%3E%0A%0A%3Cxxx+xx%3D%22xxxxxx%22%3E%3C%2Fxxx%3E%0A%0A%3C%2Fxxxx%3E%0A%3C%2Fxxxx%3E+&b=value\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_postprocessor_large.c": {
    "value_checker": {
      "start_point": [
        35,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "strings": [
        "\"VC: %llu %u `%s' `%s' `%s' `%s' `%.*s'\\n\""
      ]
    },
    "test_simple_large": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        96,
        1
      ],
      "strings": [
        "\"key=\""
      ]
    },
    "main": {
      "start_point": [
        98,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_shutdown_select.c": {
    "has_in_name": {
      "start_point": [
        92,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "strings": []
    },
    "start_socket_listen": {
      "start_point": [
        119,
        0
      ],
      "end_point": [
        218,
        1
      ],
      "strings": [
        "\"Can't create socket: %u\\n\"",
        "\"Failed to make socket non-inheritable: %u\\n\"",
        "\"Failed to make socket non-inheritable: %s\\n\"",
        "\"Failed to bind socket: %u\\n\"",
        "\"Failed to make socket non-blocking: %u\\n\"",
        "\"Failed to make socket non-blocking: %s\\n\"",
        "\"Failed to listen on socket: %u\\n\""
      ]
    },
    "select_thread": {
      "start_point": [
        221,
        0
      ],
      "end_point": [
        238,
        1
      ],
      "strings": []
    },
    "poll_thread": {
      "start_point": [
        242,
        0
      ],
      "end_point": [
        256,
        1
      ],
      "strings": []
    },
    "local_sleep": {
      "start_point": [
        260,
        0
      ],
      "end_point": [
        272,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        275,
        0
      ],
      "end_point": [
        386,
        1
      ],
      "strings": [
        "\"_poll\"",
        "\"_ignore\"",
        "\"WSAStartup() failed\\n\"",
        "\"Can't start thread\\n\"",
        "\"Can't start select() thread\\n\"",
        "\"Can't join select() thread\\n\"",
        "\"Error in waiting thread\\n\"",
        "\"Can't get current time\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_start_stop.c": {
    "ahc_echo": {
      "start_point": [
        37,
        0
      ],
      "end_point": [
        51,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_str.c": {
    "set_test_locale": {
      "start_point": [
        209,
        0
      ],
      "end_point": [
        224,
        1
      ],
      "strings": [
        "\"Setting locale \\\"%s\\\":\"",
        "\" succeed.\\n\"",
        "\" failed.\\n\""
      ]
    },
    "get_current_locale_str": {
      "start_point": [
        226,
        0
      ],
      "end_point": [
        230,
        1
      ],
      "strings": [
        "\"unknown\""
      ]
    },
    "n_prnt": {
      "start_point": [
        236,
        0
      ],
      "end_point": [
        279,
        1
      ],
      "strings": [
        "\"\\\\x%02hX\""
      ]
    },
    "check_eq_strings": {
      "start_point": [
        476,
        0
      ],
      "end_point": [
        514,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") returned zero, while expected non-zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") returned zero, while expected non-zero.\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") != 0 && \\\\\\n\"",
        "\"        MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") != 0\\n\""
      ]
    },
    "check_neq_strings": {
      "start_point": [
        516,
        0
      ],
      "end_point": [
        554,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") returned non-zero, while expected zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") returned non-zero, while expected zero.\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") == 0 && \\\\\\n\"",
        "\"        MHD_str_equal_caseless_(\\\"%s\\\", \\\"%s\\\") == 0\\n\""
      ]
    },
    "check_eq_strings_n": {
      "start_point": [
        556,
        0
      ],
      "end_point": [
        599,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned zero,\"",
        "\" while expected non-zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned zero,\"",
        "\" while expected non-zero. Locale: %s\\n\"",
        "\"PASSED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) != 0 && \\\\\\n\"",
        "\"        MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) != 0, where N is 0..%u\\n\""
      ]
    },
    "check_neq_strings_n": {
      "start_point": [
        601,
        0
      ],
      "end_point": [
        695,
        1
      ],
      "strings": [
        "\"ERROR: neq_strings[%u] has wrong dif_pos (%u): dif_pos is expected to be less than \"",
        "\"s1.len (%u) or s2.len (%u).\\n\"",
        "\"ERROR: neq_strings[%u] has wrong dif_pos (%u): dif_pos is expected to be less or \"",
        "\"equal to s1.len (%u).\\n\"",
        "\"ERROR: neq_strings[%u] has wrong dif_pos (%u): dif_pos is expected to be less or \"",
        "\"equal to s2.len (%u).\\n\"",
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned zero,\"",
        "\" while expected non-zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned zero,\"",
        "\" while expected non-zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned non-zero,\"",
        "\" while expected zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", %u) returned non-zero,\"",
        "\" while expected zero. Locale: %s\\n\"",
        "\"PASSED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) != 0 && \\\\\\n\"",
        "\"        MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) != 0, where N is 0..%u\\n\"",
        "\"PASSED: MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) == 0 && \\\\\\n\"",
        "\"        MHD_str_equal_caseless_n_(\\\"%s\\\", \\\"%s\\\", N) == 0, where N is %u..%u\\n\""
      ]
    },
    "run_eq_neq_str_tests": {
      "start_point": [
        700,
        0
      ],
      "end_point": [
        786,
        1
      ],
      "strings": [
        "\"ERROR: test internal error in check_eq_strings().\\n\"",
        "\"FAILED: testcase check_eq_strings() failed.\\n\\n\"",
        "\"PASSED: testcase check_eq_strings() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_neq_strings().\\n\"",
        "\"FAILED: testcase check_neq_strings() failed.\\n\\n\"",
        "\"PASSED: testcase check_neq_strings() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_str_equal_caseless_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_str_equal_caseless_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_eq_strings_n().\\n\"",
        "\"FAILED: testcase check_eq_strings_n() failed.\\n\\n\"",
        "\"PASSED: testcase check_eq_strings_n() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_neq_strings_n().\\n\"",
        "\"FAILED: testcase check_neq_strings_n() failed.\\n\\n\"",
        "\"PASSED: testcase check_neq_strings_n() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_str_equal_caseless_n_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_str_equal_caseless_n_() successfully passed all checks.\\n\\n\"",
        "\"At least one test failed.\\n\"",
        "\"All tests passed successfully.\\n\""
      ]
    },
    "check_str_to_uint64_valid": {
      "start_point": [
        1052,
        0
      ],
      "end_point": [
        1103,
        1
      ],
      "strings": [
        "\"ERROR: dstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") returned %\"",
        "\", while expecting %d.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") converted string to value %\"",
        "\",\"",
        "\" while expecting result %\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") == %\"",
        "\"\\n\""
      ]
    },
    "check_str_to_uint64_all_chars": {
      "start_point": [
        1106,
        0
      ],
      "end_point": [
        1161,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: %\"",
        "\", after call %\"",
        "\"). Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_str_to_uint64_overflow": {
      "start_point": [
        1164,
        0
      ],
      "end_point": [
        1210,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: %\"",
        "\", after call %\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_str_to_uint64_no_val": {
      "start_point": [
        1213,
        0
      ],
      "end_point": [
        1259,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", ->%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: %\"",
        "\", after call %\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_str_to_uint64_n_valid": {
      "start_point": [
        1262,
        0
      ],
      "end_point": [
        1317,
        1
      ],
      "strings": [
        "\"ERROR: dstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting %d. Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->%\"",
        "\")\"",
        "\" converted string to value %\"",
        "\", while expecting result %\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", ->%\"",
        "\")\"",
        "\" == %\"",
        "\"\\n\""
      ]
    },
    "check_str_to_uint64_n_all_chars": {
      "start_point": [
        1320,
        0
      ],
      "end_point": [
        1383,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: %\"",
        "\", after call %\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_str_to_uint64_n_(\\\"%s\\\", 0..5, &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_str_to_uint64_n_overflow": {
      "start_point": [
        1386,
        0
      ],
      "end_point": [
        1439,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: %\"",
        "\", after call %\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "check_str_to_uint64_n_no_val": {
      "start_point": [
        1442,
        0
      ],
      "end_point": [
        1495,
        1
      ],
      "strings": [
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_str_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: %\"",
        "\", after call %\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_str_to_uint64_n_(\\\"%s\\\", 0..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_valid": {
      "start_point": [
        1498,
        0
      ],
      "end_point": [
        1552,
        1
      ],
      "strings": [
        "\"ERROR: xdstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting %d.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") converted string to value 0x%\"",
        "\",\"",
        "\" while expecting result 0x%\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") == %\"",
        "\"\\n\""
      ]
    },
    "check_strx_to_uint32_all_chars": {
      "start_point": [
        1555,
        0
      ],
      "end_point": [
        1610,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_overflow": {
      "start_point": [
        1613,
        0
      ],
      "end_point": [
        1674,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_no_val": {
      "start_point": [
        1677,
        0
      ],
      "end_point": [
        1723,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_n_valid": {
      "start_point": [
        1726,
        0
      ],
      "end_point": [
        1784,
        1
      ],
      "strings": [
        "\"ERROR: xdstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting %d. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" converted string to value 0x%\"",
        "\", while expecting result 0x%\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", ->0x%\"",
        "\")\"",
        "\" == %\"",
        "\"\\n\""
      ]
    },
    "check_strx_to_uint32_n_all_chars": {
      "start_point": [
        1787,
        0
      ],
      "end_point": [
        1850,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_strx_to_uint32_n_(\\\"%s\\\", 0..5, &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_n_overflow": {
      "start_point": [
        1853,
        0
      ],
      "end_point": [
        1934,
        1
      ],
      "strings": [
        "\"ERROR: xdstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint32_n_no_val": {
      "start_point": [
        1937,
        0
      ],
      "end_point": [
        1990,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint32_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint32_n_(\\\"%s\\\", 0..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_valid": {
      "start_point": [
        1993,
        0
      ],
      "end_point": [
        2044,
        1
      ],
      "strings": [
        "\"ERROR: xdstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting %d.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") converted string to value 0x%\"",
        "\",\"",
        "\" while expecting result 0x%\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") == %\"",
        "\"\\n\""
      ]
    },
    "check_strx_to_uint64_all_chars": {
      "start_point": [
        2047,
        0
      ],
      "end_point": [
        2102,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_overflow": {
      "start_point": [
        2105,
        0
      ],
      "end_point": [
        2151,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_no_val": {
      "start_point": [
        2154,
        0
      ],
      "end_point": [
        2200,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", ->0x%\"",
        "\") returned %\"",
        "\", while expecting zero.\"",
        "\" Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) modified value of ret_val\"",
        "\" (before call: 0x%\"",
        "\", after call 0x%\"",
        "\"). Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_(\\\"%s\\\", &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_n_valid": {
      "start_point": [
        2203,
        0
      ],
      "end_point": [
        2258,
        1
      ],
      "strings": [
        "\"ERROR: xdstrs_w_values[%u] has wrong num_of_digt (%u): num_of_digt is expected\"",
        "\" to be less or equal to str.len (%u).\\n\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting %d. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" converted string to value 0x%\"",
        "\", while expecting result 0x%\"",
        "\". Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", ->0x%\"",
        "\")\"",
        "\" == %\"",
        "\"\\n\""
      ]
    },
    "check_strx_to_uint64_n_all_chars": {
      "start_point": [
        2261,
        0
      ],
      "end_point": [
        2324,
        1
      ],
      "strings": [
        "\"0123\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"0123\"",
        "\"PASSED: MHD_strx_to_uint64_n_(\\\"%s\\\", 0..5, &ret_val) == 0, value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_n_overflow": {
      "start_point": [
        2327,
        0
      ],
      "end_point": [
        2380,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\"..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "check_strx_to_uint64_n_no_val": {
      "start_point": [
        2383,
        0
      ],
      "end_point": [
        2436,
        1
      ],
      "strings": [
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", ->0x%\"",
        "\")\"",
        "\" returned %\"",
        "\", while expecting zero. Locale: %s\\n\"",
        "\"FAILED: MHD_strx_to_uint64_n_(\\\"%s\\\", %\"",
        "\", &ret_val)\"",
        "\" modified value of ret_val (before call: 0x%\"",
        "\", after call 0x%\"",
        "\").\"",
        "\" Locale: %s\\n\"",
        "\"PASSED: MHD_strx_to_uint64_n_(\\\"%s\\\", 0..%\"",
        "\", &ret_val) == 0,\"",
        "\" value of ret_val is unmodified\\n\""
      ]
    },
    "run_str_to_X_tests": {
      "start_point": [
        2439,
        0
      ],
      "end_point": [
        2835,
        1
      ],
      "strings": [
        "\"ERROR: test internal error in check_str_to_uint64_valid().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_all_chars().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_overflow().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_no_val().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_str_to_uint64_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_str_to_uint64_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_n_valid().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_n_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_n_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_n_all_chars().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_n_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_n_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_n_overflow().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_n_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_n_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_str_to_uint64_n_no_val().\\n\"",
        "\"FAILED: testcase check_str_to_uint64_n_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_str_to_uint64_n_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_str_to_uint64_n_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_str_to_uint64_n_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_valid().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_all_chars().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_overflow().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_no_val().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_strx_to_uint32_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_strx_to_uint32_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_n_valid().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_n_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_n_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_n_all_chars().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_n_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_n_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_n_overflow().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_n_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_n_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint32_n_no_val().\\n\"",
        "\"FAILED: testcase check_strx_to_uint32_n_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint32_n_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_strx_to_uint32_n_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_strx_to_uint32_n_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_valid().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_all_chars().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_overflow().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_no_val().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_strx_to_uint64_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_strx_to_uint64_() successfully passed all checks.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_n_valid().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_n_valid() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_n_valid() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_n_all_chars().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_n_all_chars() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_n_all_chars() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_n_overflow().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_n_overflow() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_n_overflow() successfully passed.\\n\\n\"",
        "\"ERROR: test internal error in check_strx_to_uint64_n_no_val().\\n\"",
        "\"FAILED: testcase check_strx_to_uint64_n_no_val() failed.\\n\\n\"",
        "\"PASSED: testcase check_strx_to_uint64_n_no_val() successfully passed.\\n\\n\"",
        "\"FAILED: function MHD_strx_to_uint64_n_() failed %d time%s.\\n\\n\"",
        "\"\"",
        "\"s\"",
        "\"PASSED: function MHD_strx_to_uint64_n_() successfully passed all checks.\\n\\n\"",
        "\"At least one test failed.\\n\"",
        "\"All tests passed successfully.\\n\""
      ]
    },
    "main": {
      "start_point": [
        2838,
        0
      ],
      "end_point": [
        2851,
        1
      ],
      "strings": [
        "\"-v\"",
        "\"--verbose\"",
        "\"--verbose1\"",
        "\"-vv\"",
        "\"--verbose2\"",
        "\"-vvv\"",
        "\"--verbose3\"",
        "\"_to_value\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_str_token.c": {
    "expect_found_n": {
      "start_point": [
        30,
        0
      ],
      "end_point": [
        40,
        1
      ],
      "strings": [
        "\"MHD_str_has_token_caseless_() FAILED:\\n\\tMHD_str_has_token_caseless_(%s, %s, %lu) return false\\n\""
      ]
    },
    "expect_not_found_n": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "strings": [
        "\"MHD_str_has_token_caseless_() FAILED:\\n\\tMHD_str_has_token_caseless_(%s, %s, %lu) return true\\n\""
      ]
    },
    "check_match": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": [
        "\"string\"",
        "\"string\"",
        "\"String\"",
        "\"string\"",
        "\"string\"",
        "\"String\"",
        "\"strinG\"",
        "\"String\"",
        "\"\\t strinG\"",
        "\"String\"",
        "\"strinG\\t \"",
        "\"String\"",
        "\" \\t tOkEn  \"",
        "\"toKEN\"",
        "\"not token\\t,  tOkEn  \"",
        "\"toKEN\"",
        "\"not token,\\t  tOkEn, more token\"",
        "\"toKEN\"",
        "\"not token,\\t  tOkEn\\t, more token\"",
        "\"toKEN\"",
        "\",,,,,,test,,,,\"",
        "\"TESt\"",
        "\",,,,,\\t,test,,,,\"",
        "\"TESt\"",
        "\",,,,,,test, ,,,\"",
        "\"TESt\"",
        "\",,,,,, test,,,,\"",
        "\"TESt\"",
        "\",,,,,, test not,test,,\"",
        "\"TESt\"",
        "\",,,,,, test not,,test,,\"",
        "\"TESt\"",
        "\",,,,,, test not ,test,,\"",
        "\"TESt\"",
        "\",,,,,, test\"",
        "\"TESt\"",
        "\",,,,,, test      \"",
        "\"TESt\"",
        "\"no test,,,,,, test      \"",
        "\"TESt\""
      ]
    },
    "check_not_match": {
      "start_point": [
        84,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "strings": [
        "\"strin\"",
        "\"string\"",
        "\"Stringer\"",
        "\"string\"",
        "\"sstring\"",
        "\"String\"",
        "\"string\"",
        "\"Strin\"",
        "\"\\t( strinG\"",
        "\"String\"",
        "\")strinG\\t \"",
        "\"String\"",
        "\" \\t tOkEn t \"",
        "\"toKEN\"",
        "\"not token\\t,  tOkEner  \"",
        "\"toKEN\"",
        "\"not token,\\t  tOkEns, more token\"",
        "\"toKEN\"",
        "\"not token,\\t  tOkEns\\t, more token\"",
        "\"toKEN\"",
        "\",,,,,,testing,,,,\"",
        "\"TESt\"",
        "\",,,,,\\t,test,,,,\"",
        "\"TESting\"",
        "\"tests,,,,,,quest, ,,,\"",
        "\"TESt\"",
        "\",,,,,, test\u00d1\u008b,,,,\", ",
        "ESt\");",
        "\",,,,,, test not,\u00d1\u0085test,,\", ",
        "ESt\");",
        "\"testing,,,,,, test not,,test2,,\"",
        "\"TESt\"",
        "\",testi,,,,, test not ,test,,\"",
        "\"TESting\"",
        "\",,,,,,2 test\"",
        "\"TESt\"",
        "\",,,,,,test test      \"",
        "\"test\"",
        "\"no test,,,,,, test      test\"",
        "\"test\""
      ]
    },
    "main": {
      "start_point": [
        110,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/test_upgrade.c": {
    "gnutlscli_connect": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "strings": [
        "\"%u\"",
        "\"gnutls-cli\"",
        "\"gnutls-cli\"",
        "\"--insecure\"",
        "\"-p\"",
        "\"127.0.0.1\"",
        "\"127.0.0.1:%u\"",
        "\"openssl\"",
        "\"openssl\"",
        "\"s_client\"",
        "\"-connect\"",
        "\"-verify\"",
        "\"1\""
      ]
    },
    "wr_create_plain_sckt": {
      "start_point": [
        203,
        0
      ],
      "end_point": [
        215,
        1
      ],
      "strings": []
    },
    "wr_create_tls_sckt": {
      "start_point": [
        222,
        0
      ],
      "end_point": [
        259,
        1
      ],
      "strings": []
    },
    "wr_create_from_plain_sckt": {
      "start_point": [
        268,
        0
      ],
      "end_point": [
        278,
        1
      ],
      "strings": []
    },
    "wr_connect": {
      "start_point": [
        288,
        0
      ],
      "end_point": [
        310,
        1
      ],
      "strings": []
    },
    "wr_handshake": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        324,
        1
      ],
      "strings": []
    },
    "wr_send": {
      "start_point": [
        337,
        0
      ],
      "end_point": [
        361,
        1
      ],
      "strings": []
    },
    "wr_recv": {
      "start_point": [
        373,
        0
      ],
      "end_point": [
        397,
        1
      ],
      "strings": []
    },
    "wr_close": {
      "start_point": [
        405,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "strings": []
    },
    "notify_completed_cb": {
      "start_point": [
        442,
        0
      ],
      "end_point": [
        457,
        1
      ],
      "strings": []
    },
    "log_cb": {
      "start_point": [
        468,
        0
      ],
      "end_point": [
        484,
        1
      ],
      "strings": [
        "\"/\""
      ]
    },
    "notify_connection_cb": {
      "start_point": [
        506,
        0
      ],
      "end_point": [
        532,
        1
      ],
      "strings": []
    },
    "make_blocking": {
      "start_point": [
        541,
        0
      ],
      "end_point": [
        559,
        1
      ],
      "strings": []
    },
    "send_all": {
      "start_point": [
        562,
        0
      ],
      "end_point": [
        586,
        1
      ],
      "strings": []
    },
    "recv_hdr": {
      "start_point": [
        593,
        0
      ],
      "end_point": [
        635,
        1
      ],
      "strings": []
    },
    "recv_all": {
      "start_point": [
        638,
        0
      ],
      "end_point": [
        665,
        1
      ],
      "strings": []
    },
    "run_usock": {
      "start_point": [
        674,
        0
      ],
      "end_point": [
        688,
        1
      ],
      "strings": [
        "\"Hello\"",
        "\"World\"",
        "\"Finished\""
      ]
    },
    "run_usock_client": {
      "start_point": [
        697,
        0
      ],
      "end_point": [
        714,
        1
      ],
      "strings": [
        "\"GET / HTTP/1.1\\r\\nConnection: Upgrade\\r\\n\\r\\n\"",
        "\"Hello\"",
        "\"World\"",
        "\"Finished\""
      ]
    },
    "upgrade_cb": {
      "start_point": [
        761,
        0
      ],
      "end_point": [
        779,
        1
      ],
      "strings": []
    },
    "ahc_upgrade": {
      "start_point": [
        821,
        0
      ],
      "end_point": [
        850,
        1
      ],
      "strings": [
        "\"Hello World Protocol\""
      ]
    },
    "run_mhd_select_loop": {
      "start_point": [
        858,
        0
      ],
      "end_point": [
        900,
        1
      ],
      "strings": []
    },
    "run_mhd_poll_loop": {
      "start_point": [
        909,
        0
      ],
      "end_point": [
        914,
        1
      ],
      "strings": []
    },
    "run_mhd_epoll_loop": {
      "start_point": [
        924,
        0
      ],
      "end_point": [
        955,
        1
      ],
      "strings": []
    },
    "run_mhd_loop": {
      "start_point": [
        963,
        0
      ],
      "end_point": [
        979,
        1
      ],
      "strings": []
    },
    "test_upgrade": {
      "start_point": [
        989,
        0
      ],
      "end_point": [
        1085,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        1088,
        0
      ],
      "end_point": [
        1271,
        1
      ],
      "strings": [
        "\"_tls\"",
        "\"-q\"",
        "\"--quiet\"",
        "\"--use-gnutls-cli\"",
        "\"--use-openssl\"",
        "\"--use-gnutls-lib\"",
        "\"gnutls-cli --version 1> /dev/null 2> /dev/null\"",
        "\"openssl version 1> /dev/null 2> /dev/null\"",
        "\"GnuTLS-CLI will be used for testing.\\n\"",
        "\"Command line version of OpenSSL will be used for testing.\\n\"",
        "\"GnuTLS library will be used for testing.\\n\"",
        "\"HTTPS support was disabled by configure.\\n\"",
        "\"Starting HTTP \\\"Upgrade\\\" tests with %s connections.\\n\"",
        "\"TLS\"",
        "\"plain\"",
        "\"FAILED: Upgrade with external select, return code %d.\\n\"",
        "\"PASSED: Upgrade with external select.\\n\"",
        "\"FAILED: Upgrade with external 'auto', return code %d.\\n\"",
        "\"PASSED: Upgrade with external 'auto'.\\n\"",
        "\"FAILED: Upgrade with external select with EPOLL, return code %d.\\n\"",
        "\"PASSED: Upgrade with external select with EPOLL.\\n\"",
        "\"FAILED: Upgrade with thread per connection, return code %d.\\n\"",
        "\"PASSED: Upgrade with thread per connection.\\n\"",
        "\"FAILED: Upgrade with thread per connection and 'auto', return code %d.\\n\"",
        "\"PASSED: Upgrade with thread per connection and 'auto'.\\n\"",
        "\"FAILED: Upgrade with thread per connection and poll, return code %d.\\n\"",
        "\"PASSED: Upgrade with thread per connection and poll.\\n\"",
        "\"FAILED: Upgrade with internal select, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal select.\\n\"",
        "\"FAILED: Upgrade with internal select with thread pool, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal select with thread pool.\\n\"",
        "\"FAILED: Upgrade with internal 'auto' return code %d.\\n\"",
        "\"PASSED: Upgrade with internal 'auto'.\\n\"",
        "\"FAILED: Upgrade with internal 'auto' with thread pool, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal 'auto' with thread pool.\\n\"",
        "\"FAILED: Upgrade with internal poll, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal poll.\\n\"",
        "\"FAILED: Upgrade with internal poll with thread pool, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal poll with thread pool.\\n\"",
        "\"FAILED: Upgrade with internal epoll, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal epoll.\\n\"",
        "\"FAILED: Upgrade with internal epoll, return code %d.\\n\"",
        "\"PASSED: Upgrade with internal epoll.\\n\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/tsearch.c": {
    "tsearch": {
      "start_point": [
        25,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "strings": []
    },
    "tfind": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": []
    },
    "tdelete": {
      "start_point": [
        93,
        0
      ],
      "end_point": [
        140,
        1
      ],
      "strings": []
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/microhttpd/tsearch.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/curl_version_check.c": {
    "parse_version_number": {
      "start_point": [
        34,
        0
      ],
      "end_point": [
        50,
        1
      ],
      "strings": []
    },
    "parse_version_string": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "strings": []
    },
    "curl_uses_nss_ssl": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "strings": [
        "\" NSS/\""
      ]
    },
    "curl_check_version": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        175,
        1
      ],
      "strings": [
        "\"curl version: %s\\n\"",
        "\"Error: running curl test depends on local libcurl version > %s\\n\"",
        "\"GnuTLS\"",
        "\"GNUtls\"",
        "\"OpenSSL\"",
        "\"OpenSSL\"",
        "\"NSS\"",
        "\"NSS\"",
        "\"Error: unrecognized curl ssl library\\n\"",
        "\"Error: running curl test depends on local libcurl SSL version > %s\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/gauger.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/perf_get.c": {
    "now": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        94,
        1
      ],
      "strings": []
    },
    "start_timer": {
      "start_point": [
        100,
        0
      ],
      "end_point": [
        104,
        1
      ],
      "strings": []
    },
    "stop": {
      "start_point": [
        112,
        0
      ],
      "end_point": [
        126,
        1
      ],
      "strings": [
        "\"Sequential GETs using %s: %f %s\\n\"",
        "\"requests/s\"",
        "\"Sequential GETs\"",
        "\"requests/s\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        137,
        0
      ],
      "end_point": [
        149,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        151,
        0
      ],
      "end_point": [
        178,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        181,
        0
      ],
      "end_point": [
        249,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"internal thread with 'auto'\"",
        "\"internal thread with poll()\"",
        "\"internal thread with epoll\"",
        "\"internal thread with select()\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        252,
        0
      ],
      "end_point": [
        321,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"internal thread with 'auto' and thread per connection\"",
        "\"internal thread with poll() and thread per connection\"",
        "\"internal thread with epoll and thread per connection\"",
        "\"internal thread with select() and thread per connection\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        323,
        0
      ],
      "end_point": [
        392,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"internal thread pool with 'auto'\"",
        "\"internal thread pool with poll()\"",
        "\"internal thread pool with epoll\"",
        "\"internal thread pool with select()\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        394,
        0
      ],
      "end_point": [
        557,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"Timeout!?\\n\"",
        "\"external select\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        560,
        0
      ],
      "end_point": [
        599,
        1
      ],
      "strings": [
        "\"11\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/perf_get_concurrent.c": {
    "now": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        96,
        1
      ],
      "strings": []
    },
    "start_timer": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": []
    },
    "stop": {
      "start_point": [
        114,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "strings": [
        "\"Parallel GETs using %s: %f %s\\n\"",
        "\"requests/s\"",
        "\"Parallel GETs\"",
        "\"requests/s\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        131,
        0
      ],
      "end_point": [
        138,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        141,
        0
      ],
      "end_point": [
        168,
        1
      ],
      "strings": []
    },
    "thread_gets": {
      "start_point": [
        171,
        0
      ],
      "end_point": [
        208,
        1
      ],
      "strings": [
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"curl error\""
      ]
    },
    "do_gets": {
      "start_point": [
        211,
        0
      ],
      "end_point": [
        240,
        1
      ],
      "strings": [
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"pthread_create error\""
      ]
    },
    "testInternalGet": {
      "start_point": [
        243,
        0
      ],
      "end_point": [
        280,
        1
      ],
      "strings": [
        "\"internal thread with 'auto'\"",
        "\"internal thread with poll()\"",
        "\"internal thread with epoll\"",
        "\"internal thread with select()\"",
        "\"GET\"",
        "\"Error performing %s test: %s\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        283,
        0
      ],
      "end_point": [
        321,
        1
      ],
      "strings": [
        "\"internal thread with 'auto' and thread per connection\"",
        "\"internal thread with poll() and thread per connection\"",
        "\"internal thread with epoll and thread per connection\"",
        "\"internal thread with select() and thread per connection\"",
        "\"GET\"",
        "\"Error performing %s test: %s\\n\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        324,
        0
      ],
      "end_point": [
        362,
        1
      ],
      "strings": [
        "\"internal thread pool with 'auto'\"",
        "\"internal thread pool with poll()\"",
        "\"internal thread poll with epoll\"",
        "\"internal thread pool with select()\"",
        "\"GET\"",
        "\"Error performing %s test: %s\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        365,
        0
      ],
      "end_point": [
        452,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"select failed: %s\\n\"",
        "\"external select\"",
        "\"%s\\n\"",
        "\"Error performing test.\\n\""
      ]
    },
    "main": {
      "start_point": [
        455,
        0
      ],
      "end_point": [
        494,
        1
      ],
      "strings": [
        "\"11\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_callback.c": {
    "called_twice": {
      "start_point": [
        36,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": [
        "\"test\"",
        "\"Handler called after returning END_OF_STREAM!\\n\""
      ]
    },
    "callback": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        90,
        1
      ],
      "strings": []
    },
    "discard_buffer": {
      "start_point": [
        93,
        0
      ],
      "end_point": [
        101,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        104,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_concurrent_stop.c": {
    "copyBuffer": {
      "start_point": [
        63,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        73,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "strings": []
    },
    "clean_curl": {
      "start_point": [
        105,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "strings": []
    },
    "thread_gets": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "strings": [
        "\"pthread_setcancelstate()/pthread_setcanceltype() failed.\\n\""
      ]
    },
    "do_gets": {
      "start_point": [
        163,
        0
      ],
      "end_point": [
        193,
        1
      ],
      "strings": [
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"pthread_create failed.\\n\""
      ]
    },
    "start_gets": {
      "start_point": [
        196,
        0
      ],
      "end_point": [
        205,
        1
      ],
      "strings": [
        "\"pthread_create failed.\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        208,
        0
      ],
      "end_point": [
        235,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        238,
        0
      ],
      "end_point": [
        266,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "main": {
      "start_point": [
        269,
        0
      ],
      "end_point": [
        298,
        1
      ],
      "strings": [
        "\"11\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_delete.c": {
    "putBuffer": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "strings": [
        "\"DELETE\"",
        "\"Hello123\"",
        "\"Invalid upload data `%8s'!\\n\""
      ]
    },
    "testInternalDelete": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        190,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"DELETE\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedDelete": {
      "start_point": [
        193,
        0
      ],
      "end_point": [
        264,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"DELETE\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolDelete": {
      "start_point": [
        266,
        0
      ],
      "end_point": [
        338,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"DELETE\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalDelete": {
      "start_point": [
        341,
        0
      ],
      "end_point": [
        500,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"DELETE\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        504,
        0
      ],
      "end_point": [
        522,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_digestauth.c": {
    "copyBuffer": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        132,
        1
      ],
      "strings": [
        "\"testpass\"",
        "\"test@example.com\"",
        "\"testuser\""
      ]
    },
    "testDigestAuth": {
      "start_point": [
        135,
        0
      ],
      "end_point": [
        251,
        1
      ],
      "strings": [
        "\"/dev/urandom\"",
        "\"Failed to open `%s': %s\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to read `%s': %s\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to acquire crypto provider context: %lu\\n\"",
        "\"Failed to generate 8 random bytes: %lu\\n\"",
        "\"http://127.0.0.1:%d/bar%%20 foo?a=b\u00c3\u00bc%%20\", ",
        "\"testuser:testpass\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        275,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_digestauth_with_arguments.c": {
    "copyBuffer": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "strings": [
        "\"testpass\"",
        "\"test@example.com\"",
        "\"testuser\""
      ]
    },
    "testDigestAuth": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        246,
        1
      ],
      "strings": [
        "\"/dev/urandom\"",
        "\"Failed to open `%s': %s\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to read `%s': %s\\n\"",
        "\"/dev/urandom\"",
        "\"Failed to acquire crypto provider context: %lu\\n\"",
        "\"Failed to generate 8 random bytes: %lu\\n\"",
        "\"http://127.0.0.1:%d/foo?key=value\"",
        "\"testuser:testpass\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        249,
        0
      ],
      "end_point": [
        270,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_get.c": {
    "copyBuffer": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        78,
        0
      ],
      "end_point": [
        109,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        112,
        0
      ],
      "end_point": [
        176,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        179,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        246,
        0
      ],
      "end_point": [
        311,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        467,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testUnknownPortGet": {
      "start_point": [
        470,
        0
      ],
      "end_point": [
        551,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testStopRace": {
      "start_point": [
        554,
        0
      ],
      "end_point": [
        612,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"socket error\\n\"",
        "\"connect error\\n\""
      ]
    },
    "ahc_empty": {
      "start_point": [
        615,
        0
      ],
      "end_point": [
        646,
        1
      ],
      "strings": [
        "\"GET\""
      ]
    },
    "curlExcessFound": {
      "start_point": [
        649,
        0
      ],
      "end_point": [
        661,
        1
      ],
      "strings": [
        "\"Excess found\""
      ]
    },
    "testEmptyGet": {
      "start_point": [
        664,
        0
      ],
      "end_point": [
        732,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        735,
        0
      ],
      "end_point": [
        773,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_get_chunked.c": {
    "copyBuffer": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "strings": []
    },
    "crc": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "strings": [
        "\"Footer\"",
        "\"working\""
      ]
    },
    "crcf": {
      "start_point": [
        101,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        151,
        1
      ],
      "strings": []
    },
    "validate": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        175,
        1
      ],
      "strings": [
        "\"Got  `%.*s'\\nWant `%.*s'\\n\""
      ]
    },
    "testInternalGet": {
      "start_point": [
        177,
        0
      ],
      "end_point": [
        232,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        234,
        0
      ],
      "end_point": [
        289,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        291,
        0
      ],
      "end_point": [
        347,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        349,
        0
      ],
      "end_point": [
        493,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\""
      ]
    },
    "main": {
      "start_point": [
        497,
        0
      ],
      "end_point": [
        513,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_get_response_cleanup.c": {
    "fork_curl": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "strings": [
        "\"curl\"",
        "\"curl\"",
        "\"-s\"",
        "\"-N\"",
        "\"-o\"",
        "\"/dev/null\"",
        "\"-GET\"",
        "\"Failed to exec curl: %s\\n\""
      ]
    },
    "kill_curl": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    },
    "push_callback": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "strings": []
    },
    "push_free_callback": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        113,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        151,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        154,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        251,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        295,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        298,
        0
      ],
      "end_point": [
        385,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/\""
      ]
    },
    "main": {
      "start_point": [
        388,
        0
      ],
      "end_point": [
        414,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_get_sendfile.c": {
    "copyBuffer": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "strings": [
        "\"Failed to open `%s': %s\\n\""
      ]
    },
    "testInternalGet": {
      "start_point": [
        117,
        0
      ],
      "end_point": [
        183,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        186,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        255,
        0
      ],
      "end_point": [
        322,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        325,
        0
      ],
      "end_point": [
        480,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\""
      ]
    },
    "testUnknownPortGet": {
      "start_point": [
        483,
        0
      ],
      "end_point": [
        567,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1:%d/\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        570,
        0
      ],
      "end_point": [
        611,
        1
      ],
      "strings": [
        "\"TMPDIR\"",
        "\"TMP\"",
        "\"TEMP\"",
        "\"/tmp\"",
        "\"%s/%s\"",
        "\"test-mhd-sendfile\"",
        "\"w\"",
        "\"failed to write test file\\n\"",
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_iplimit.c": {
    "copyBuffer": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        74,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": []
    },
    "testMultithreadedGet": {
      "start_point": [
        107,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"Unexpected number of success (%u) or failure (%u)\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        219,
        0
      ],
      "end_point": [
        333,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"No error on IP address over limit\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        351,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_large_put.c": {
    "alloc_init": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "strings": [
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz\""
      ]
    },
    "putBuffer": {
      "start_point": [
        87,
        0
      ],
      "end_point": [
        102,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        104,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        172,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Incoming data larger than expected.\\n\"",
        "\"Incoming data does not match sent data.\\n\""
      ]
    },
    "testPutInternalThread": {
      "start_point": [
        175,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testPutThreadPerConn": {
      "start_point": [
        254,
        0
      ],
      "end_point": [
        335,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"Got invalid response `%.*s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testPutThreadPool": {
      "start_point": [
        337,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"Got invalid response `%.*s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testPutExternal": {
      "start_point": [
        420,
        0
      ],
      "end_point": [
        589,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"Got invalid response `%.*s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        593,
        0
      ],
      "end_point": [
        656,
        1
      ],
      "strings": [
        "\"11\"",
        "\"_inc\"",
        "\"-v\"",
        "\"Error during testing with internal thread with select().\\n\"",
        "\"Error during testing with internal thread per connection with select().\\n\"",
        "\"Error during testing with thread pool per connection with select().\\n\"",
        "\"Error during testing with external select().\\n\"",
        "\"Error during testing with internal thread with poll().\\n\"",
        "\"Error during testing with internal thread per connection with poll().\\n\"",
        "\"Error during testing with thread pool per connection with poll().\\n\"",
        "\"Error during testing with internal thread with epoll.\\n\"",
        "\"Error during testing with thread pool per connection with epoll.\\n\"",
        "\"Error (code: %u)\\n\"",
        "\"All checks passed successfully.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_long_header.c": {
    "apc_all": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        52,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        91,
        1
      ],
      "strings": []
    },
    "testLongUrlGet": {
      "start_point": [
        94,
        0
      ],
      "end_point": [
        179,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/\"",
        "\"http://127.0.0.1/\""
      ]
    },
    "testLongHeaderGet": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        276,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        278,
        0
      ],
      "end_point": [
        294,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_parse_cookies.c": {
    "copyBuffer": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        105,
        1
      ],
      "strings": [
        "\"name1\"",
        "\"var1\"",
        "\"name2\"",
        "\"var2\"",
        "\"name3\"",
        "\"\"",
        "\"name4\"",
        "\"var4 with spaces\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        107,
        0
      ],
      "end_point": [
        267,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"name1=var1; name2=var2,name3 ;name4=\\\"var4 with spaces\\\";\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        270,
        0
      ],
      "end_point": [
        285,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_post.c": {
    "completed_cb": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        79,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        97,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "strings": [
        "\"name\"",
        "\"daniel\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\"",
        "\"curl\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "strings": [
        "\"POST\"",
        "\"METHOD: %s\\n\""
      ]
    },
    "testInternalPost": {
      "start_point": [
        164,
        0
      ],
      "end_point": [
        235,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPost": {
      "start_point": [
        237,
        0
      ],
      "end_point": [
        308,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolPost": {
      "start_point": [
        310,
        0
      ],
      "end_point": [
        382,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalPost": {
      "start_point": [
        384,
        0
      ],
      "end_point": [
        543,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "ahc_cancel": {
      "start_point": [
        546,
        0
      ],
      "end_point": [
        585,
        1
      ],
      "strings": [
        "\"POST\"",
        "\"Unexpected method `%s'\\n\"",
        "\"wibble\"",
        "\"Failed to queue response\\n\"",
        "\"In ahc_cancel again. This should not happen.\\n\""
      ]
    },
    "readBuffer": {
      "start_point": [
        595,
        0
      ],
      "end_point": [
        609,
        1
      ],
      "strings": []
    },
    "slowReadBuffer": {
      "start_point": [
        612,
        0
      ],
      "end_point": [
        617,
        1
      ],
      "strings": []
    },
    "testMultithreadedPostCancelPart": {
      "start_point": [
        627,
        0
      ],
      "end_point": [
        752,
        1
      ],
      "strings": [
        "\"Test content\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"Transfer-Encoding: chunked\"",
        "\"Content-Type: application/octet-stream\"",
        "\"Expect: 100-Continue\"",
        "\"Ignored curl_easy_perform expected failure on W32 with \\\"slow read\\\".\\n\"",
        "\"flibbet curl_easy_perform didn't fail as expected: `%s' %d\\n\"",
        "\"curl_easy_getinfo failed: '%s'\\n\"",
        "\"Unexpected response code: %ld\\n\""
      ]
    },
    "testMultithreadedPostCancel": {
      "start_point": [
        755,
        0
      ],
      "end_point": [
        763,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        766,
        0
      ],
      "end_point": [
        785,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_postform.c": {
    "completed_cb": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        85,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        93,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "strings": [
        "\"PI sees %s-%.*s\\n\"",
        "\"name\"",
        "\"daniel\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\"",
        "\"curl\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        119,
        0
      ],
      "end_point": [
        162,
        1
      ],
      "strings": [
        "\"POST\"",
        "\"METHOD: %s\\n\""
      ]
    },
    "make_form": {
      "start_point": [
        164,
        0
      ],
      "end_point": [
        175,
        1
      ],
      "strings": [
        "\"name\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\""
      ]
    },
    "testInternalPost": {
      "start_point": [
        178,
        0
      ],
      "end_point": [
        251,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPost": {
      "start_point": [
        253,
        0
      ],
      "end_point": [
        326,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolPost": {
      "start_point": [
        328,
        0
      ],
      "end_point": [
        402,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalPost": {
      "start_point": [
        404,
        0
      ],
      "end_point": [
        570,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        573,
        0
      ],
      "end_point": [
        599,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_post_loop.c": {
    "copyBuffer": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        107,
        1
      ],
      "strings": [
        "\"POST\"",
        "\"METHOD: %s\\n\"",
        "\"OK\""
      ]
    },
    "testInternalPost": {
      "start_point": [
        110,
        0
      ],
      "end_point": [
        190,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:%d/hw%d\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPost": {
      "start_point": [
        192,
        0
      ],
      "end_point": [
        272,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:%d/hw%d\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPoolPost": {
      "start_point": [
        274,
        0
      ],
      "end_point": [
        355,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:%d/hw%d\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"\\n\""
      ]
    },
    "testExternalPost": {
      "start_point": [
        357,
        0
      ],
      "end_point": [
        532,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:%d/hw%d\"",
        "\"select failed: %s\\n\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"\\n\""
      ]
    },
    "now": {
      "start_point": [
        546,
        0
      ],
      "end_point": [
        554,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        557,
        0
      ],
      "end_point": [
        611,
        1
      ],
      "strings": [
        "\"11\"",
        "\"%s: Sequential POSTs (http/1.1) %f/s\\n\"",
        "\"%s: Sequential POSTs (http/1.0) %f/s\\n\"",
        "\"internal select\"",
        "\"internal select\"",
        "\"Sequential POSTs (http/1.1)\"",
        "\"Sequential POSTs (http/1.0)\"",
        "\"requests/s\"",
        "\"%s: Sequential POSTs (http/1.1) %f/s\\n\"",
        "\"%s: Sequential POSTs (http/1.0) %f/s\\n\"",
        "\"multithreaded post\"",
        "\"Multithreaded select\"",
        "\"Sequential POSTs (http/1.1)\"",
        "\"Sequential POSTs (http/1.0)\"",
        "\"requests/s\"",
        "\"%s: Sequential POSTs (http/1.1) %f/s\\n\"",
        "\"%s: Sequential POSTs (http/1.0) %f/s\\n\"",
        "\"thread with pool\"",
        "\"thread with pool\"",
        "\"Sequential POSTs (http/1.1)\"",
        "\"Sequential POSTs (http/1.0)\"",
        "\"requests/s\"",
        "\"%s: Sequential POSTs (http/1.1) %f/s\\n\"",
        "\"%s: Sequential POSTs (http/1.0) %f/s\\n\"",
        "\"external select\"",
        "\"external select\"",
        "\"Sequential POSTs (http/1.1)\"",
        "\"Sequential POSTs (http/1.0)\"",
        "\"requests/s\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_process_arguments.c": {
    "copyBuffer": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        58,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "strings": [
        "\"k\"",
        "\"v x\"",
        "\"hash\"",
        "\"#foo\"",
        "\"space\"",
        "\"\\240bar\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        111,
        0
      ],
      "end_point": [
        267,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello+world?k=v+x&hash=%23foo&space=%A0bar\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello+world\"",
        "\"/hello+world\"",
        "\"/hello+world\""
      ]
    },
    "main": {
      "start_point": [
        270,
        0
      ],
      "end_point": [
        285,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_process_headers.c": {
    "copyBuffer": {
      "start_point": [
        55,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "strings": []
    },
    "kv_cb": {
      "start_point": [
        67,
        0
      ],
      "end_point": [
        77,
        1
      ],
      "strings": [
        "\"127.0.0.1\"",
        "\"127.0.0.1\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        79,
        0
      ],
      "end_point": [
        147,
        1
      ],
      "strings": [
        "\"NotFound\"",
        "\"*/*\"",
        "\"127.0.0.1\"",
        "\"127.0.0.1\"",
        "\"FakeHeader\"",
        "\"NowPresent\"",
        "\"FakeHeader\"",
        "\"NowPresent\"",
        "\"MyHeader\"",
        "\"MyValue\"",
        "\"MyHeader\"",
        "\"MyValue\"",
        "\"MyHeader\"",
        "\"MyValueToo\"",
        "\"MyHeader\"",
        "\"MyValue\"",
        "\"MyHeader\"",
        "\"MyValueToo\""
      ]
    },
    "testInternalGet": {
      "start_point": [
        150,
        0
      ],
      "end_point": [
        216,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        218,
        0
      ],
      "end_point": [
        284,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolGet": {
      "start_point": [
        286,
        0
      ],
      "end_point": [
        353,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        355,
        0
      ],
      "end_point": [
        510,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        514,
        0
      ],
      "end_point": [
        530,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_put.c": {
    "putBuffer": {
      "start_point": [
        54,
        0
      ],
      "end_point": [
        66,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        80,
        0
      ],
      "end_point": [
        117,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Hello123\"",
        "\"Invalid upload data `%8s'!\\n\""
      ]
    },
    "testInternalPut": {
      "start_point": [
        120,
        0
      ],
      "end_point": [
        193,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPut": {
      "start_point": [
        195,
        0
      ],
      "end_point": [
        269,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolPut": {
      "start_point": [
        271,
        0
      ],
      "end_point": [
        346,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalPut": {
      "start_point": [
        349,
        0
      ],
      "end_point": [
        511,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        515,
        0
      ],
      "end_point": [
        533,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_put_chunked.c": {
    "putBuffer": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        81,
        0
      ],
      "end_point": [
        127,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Invalid upload data `%8s'!\\n\"",
        "\"Hello123\"",
        "\"Invalid upload data `%8s'!\\n\"",
        "\"Not ready for response: %u/%u\\n\""
      ]
    },
    "testInternalPut": {
      "start_point": [
        130,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPut": {
      "start_point": [
        201,
        0
      ],
      "end_point": [
        271,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testMultithreadedPoolPut": {
      "start_point": [
        273,
        0
      ],
      "end_point": [
        344,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalPut": {
      "start_point": [
        347,
        0
      ],
      "end_point": [
        506,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        510,
        0
      ],
      "end_point": [
        526,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_quiesce.c": {
    "copyBuffer": {
      "start_point": [
        59,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        103,
        1
      ],
      "strings": []
    },
    "request_completed": {
      "start_point": [
        106,
        0
      ],
      "end_point": [
        113,
        1
      ],
      "strings": []
    },
    "ServeOneRequest": {
      "start_point": [
        116,
        0
      ],
      "end_point": [
        174,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"MHD_start_daemon() failed\"",
        "\"MHD_get_fdset() failed\"",
        "\"MHD_quiesce_daemon() failed in ServeOneRequest()\"",
        "\"Requests was not served by ServeOneRequest()\""
      ]
    },
    "setupCURL": {
      "start_point": [
        177,
        0
      ],
      "end_point": [
        197,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\""
      ]
    },
    "testGet": {
      "start_point": [
        200,
        0
      ],
      "end_point": [
        339,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"GET\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"MHD_quiesce_daemon failed.\\n\"",
        "\"pthread_create failed\\n\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"pthread_join failed\\n\"",
        "\"ServeOneRequest() error: %s\\n\"",
        "\"/hello_world\"",
        "\"%s\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"%s\\n\"",
        "\"curl_easy_perform should fail\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        342,
        0
      ],
      "end_point": [
        521,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"%s should have failed at %s:%d\\n\"",
        "\"curl_multi_perform\"",
        "\"MHD_quiesce_daemon failed.\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        524,
        0
      ],
      "end_point": [
        551,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_quiesce_stream.c": {
    "http_PanicCallback": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": [
        "\"PANIC: exit process: %s at %s:%u\\n\""
      ]
    },
    "resume_connection": {
      "start_point": [
        60,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "strings": []
    },
    "suspend_connection": {
      "start_point": [
        71,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "strings": [
        "\"Could not create thead\\n\""
      ]
    },
    "http_ContentReaderCallback": {
      "start_point": [
        99,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "strings": [
        "\"\\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"",
        "\"finish: %d\\n\""
      ]
    },
    "http_AccessHandlerCallback": {
      "start_point": [
        124,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "strings": [
        "\"start: %d\\n\""
      ]
    },
    "main": {
      "start_point": [
        173,
        0
      ],
      "end_point": [
        236,
        1
      ],
      "strings": [
        "\"curl -s http://127.0.0.1:%d\"",
        "\"quiesce\\n\"",
        "\"stopping daemon\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_termination.c": {
    "connection_handler": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": [
        "\"Response\"",
        "\"Response\""
      ]
    },
    "write_data": {
      "start_point": [
        84,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        91,
        0
      ],
      "end_point": [
        142,
        1
      ],
      "strings": [
        "\"Daemon cannot be started!\"",
        "\"http://127.0.0.1:%d\"",
        "\"CURL Error\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_timeout.c": {
    "termination_cb": {
      "start_point": [
        52,
        0
      ],
      "end_point": [
        83,
        1
      ],
      "strings": []
    },
    "putBuffer": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        98,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "putBuffer_fail": {
      "start_point": [
        101,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        109,
        0
      ],
      "end_point": [
        119,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        122,
        0
      ],
      "end_point": [
        160,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Hello123\"",
        "\"Invalid upload data `%8s'!\\n\""
      ]
    },
    "testWithoutTimeout": {
      "start_point": [
        163,
        0
      ],
      "end_point": [
        236,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testWithTimeout": {
      "start_point": [
        238,
        0
      ],
      "end_point": [
        311,
        1
      ],
      "strings": [
        "\"http://127.0.0.1/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        314,
        0
      ],
      "end_point": [
        335,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error during test execution (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/test_urlparse.c": {
    "copyBuffer": {
      "start_point": [
        57,
        0
      ],
      "end_point": [
        67,
        1
      ],
      "strings": []
    },
    "test_values": {
      "start_point": [
        69,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "strings": [
        "\"a\"",
        "\"b\"",
        "\"c\"",
        "\"\"",
        "\"d\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        123,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        126,
        0
      ],
      "end_point": [
        194,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"http://127.0.0.1/hello_world?a=b&c=&d\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        197,
        0
      ],
      "end_point": [
        212,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_empty_response.c": {
    "ahc_echo": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "strings": []
    },
    "testInternalSelectGet": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        215,
        1
      ],
      "strings": [
        "\"GET\"",
        "\"AES256-SHA\"",
        "\"rsa_aes_256_sha\"",
        "\"https://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\""
      ]
    },
    "main": {
      "start_point": [
        218,
        0
      ],
      "end_point": [
        236,
        1
      ],
      "strings": [
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"Failed test: %s, error: %u.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_get.c": {
    "test_secure_get": {
      "start_point": [
        40,
        0
      ],
      "end_point": [
        79,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        116,
        1
      ],
      "strings": [
        "\"AES256-SHA\"",
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"rsa_aes_256_sha\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_get_parallel.c": {
    "https_transfer_thread_adapter": {
      "start_point": [
        55,
        0
      ],
      "end_point": [
        69,
        1
      ],
      "strings": []
    },
    "test_single_client": {
      "start_point": [
        79,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "strings": []
    },
    "test_parallel_clients": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        133,
        1
      ],
      "strings": [
        "\"Error: failed to spawn test client threads.\\n\""
      ]
    },
    "main": {
      "start_point": [
        136,
        0
      ],
      "end_point": [
        199,
        1
      ],
      "strings": [
        "\"AES256-SHA\"",
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"rsa_aes_256_sha\"",
        "\"single threaded daemon, single client, epoll\"",
        "\"single threaded daemon, single client\"",
        "\"single threaded daemon, parallel clients, epoll\"",
        "\"single threaded daemon, parallel clients\"",
        "\"Failed test: %s, error: %u.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_get_parallel_threads.c": {
    "https_transfer_thread_adapter": {
      "start_point": [
        56,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "strings": []
    },
    "test_single_client": {
      "start_point": [
        79,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "strings": []
    },
    "test_parallel_clients": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        134,
        1
      ],
      "strings": [
        "\"Error: failed to spawn test client threads.\\n\""
      ]
    },
    "main": {
      "start_point": [
        137,
        0
      ],
      "end_point": [
        202,
        1
      ],
      "strings": [
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"GnuTLS\"",
        "\"This test can be run only with libcurl-gnutls.\\n\"",
        "\"AES256-SHA\"",
        "\"rsa_aes_256_sha\"",
        "\"multi threaded daemon, single client\"",
        "\"multi threaded daemon, parallel client\"",
        "\"Failed test: %s, error: %u.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_get_select.c": {
    "ahc_echo": {
      "start_point": [
        41,
        0
      ],
      "end_point": [
        72,
        1
      ],
      "strings": []
    },
    "testExternalGet": {
      "start_point": [
        75,
        0
      ],
      "end_point": [
        243,
        1
      ],
      "strings": [
        "\"AES256-SHA\"",
        "\"GET\"",
        "\"rsa_aes_256_sha\"",
        "\"https://127.0.0.1/hello_world\"",
        "\"%s failed at %s:%d: `%s'\\n\"",
        "\"curl_multi_perform\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "main": {
      "start_point": [
        246,
        0
      ],
      "end_point": [
        269,
        1
      ],
      "strings": [
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"Failed test: %s, error: %u.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_multi_daemon.c": {
    "test_concurent_daemon_pair": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        121,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        124,
        0
      ],
      "end_point": [
        170,
        1
      ],
      "strings": [
        "\"AES256-SHA\"",
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"rsa_aes_256_sha\"",
        "\"concurent_daemon_pair\"",
        "\"Failed to remove `%s'\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_session_info.c": {
    "query_session_ahc": {
      "start_point": [
        43,
        0
      ],
      "end_point": [
        89,
        1
      ],
      "strings": [
        "\"Warning: requested TLS 1.1, got TLS 1.2\\n\"",
        "\"Error: requested protocol mismatch (wanted %d, got %d)\\n\""
      ]
    },
    "test_query_session": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        184,
        1
      ],
      "strings": [
        "\"NORMAL:+ARCFOUR-128\"",
        "\"AES256-SHA\"",
        "\"rsa_aes_256_sha\"",
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "main": {
      "start_point": [
        187,
        0
      ],
      "end_point": [
        224,
        1
      ],
      "strings": [
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"GnuTLS\"",
        "\"This test can be run only with libcurl-gnutls.\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_sni.c": {
    "load_keys": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        119,
        1
      ],
      "strings": [
        "\"*** Error loading certificate file %s.\\n\"",
        "\"*** Error loading certificate file: %s\\n\"",
        "\"*** Error loading key file %s.\\n\"",
        "\"*** Error loading key file: %s\\n\""
      ]
    },
    "sni_callback": {
      "start_point": [
        133,
        0
      ],
      "end_point": [
        178,
        1
      ],
      "strings": [
        "\"Need certificate for %.*s\\n\"",
        "\"Returning certificate for %.*s\\n\""
      ]
    },
    "do_get": {
      "start_point": [
        182,
        0
      ],
      "end_point": [
        249,
        1
      ],
      "strings": [
        "\"host1:%d:127.0.0.1\"",
        "\"host2:%d:127.0.0.1\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"Error: local file & received file differ.\\n\""
      ]
    },
    "main": [
      {
        "start_point": [
          252,
          0
        ],
        "end_point": [
          311,
          1
        ],
        "strings": [
          "\"Curl does not support SSL.  Cannot run the test.\\n\"",
          "\"host1\"",
          "\"/host1.crt\"",
          "\"/host1.key\"",
          "\"host2\"",
          "\"/host2.crt\"",
          "\"/host2.key\"",
          "\"https://host1/\"",
          "\"https://host2/\"",
          "\"Failed test: %s, error: %u.\\n\""
        ]
      },
      {
        "start_point": [
          316,
          0
        ],
        "end_point": [
          321,
          1
        ],
        "strings": [
          "\"SNI not supported by GnuTLS < 3.0\\n\""
        ]
      }
    ]
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_https_time_out.c": {
    "test_tls_session_time_out": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        99,
        1
      ],
      "strings": [
        "\"Failed to create socket: %s\\n\"",
        "\"Error: %s\\n\"",
        "\"Handshake failed\\n\"",
        "\"\"",
        "\"Connection failed to time-out\\n\""
      ]
    },
    "main": {
      "start_point": [
        102,
        0
      ],
      "end_point": [
        164,
        1
      ],
      "strings": [
        "\"failed to setup session\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_tls_authentication.c": {
    "test_secure_get": {
      "start_point": [
        42,
        0
      ],
      "end_point": [
        80,
        1
      ],
      "strings": []
    },
    "main": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "strings": [
        "\"AES256-SHA\"",
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"rsa_aes_256_sha\"",
        "\"Failed to remove `%s'\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/test_tls_options.c": {
    "test_unmatching_ssl_version": {
      "start_point": [
        44,
        0
      ],
      "end_point": [
        81,
        1
      ],
      "strings": [
        "\"Error: failed to allocate: %s\\n\"",
        "\"Internal error in gen_test_file_url\\n\"",
        "\"cURL failed to reject request despite SSL version missmatch!\\n\""
      ]
    },
    "main": {
      "start_point": [
        85,
        0
      ],
      "end_point": [
        166,
        1
      ],
      "strings": [
        "\"Curl does not support SSL.  Cannot run the test.\\n\"",
        "\"GnuTLS\"",
        "\"This test can be run only with libcurl-gnutls.\\n\"",
        "\"AES128-SHA\"",
        "\"AES256-SHA\"",
        "\"rsa_aes_128_sha\"",
        "\"rsa_aes_256_sha\"",
        "\"TLS1.0-AES-SHA1\"",
        "\"NONE:+VERS-TLS1.0:+AES-128-CBC:+SHA1:+RSA:+COMP-NULL\"",
        "\"TLS1.0-AES-SHA1 test failed\\n\"",
        "\"The following handshake should fail (and print an error message)...\\n\"",
        "\"TLS1.0 vs SSL3\"",
        "\"NONE:+VERS-TLS1.0:+AES-256-CBC:+SHA1:+RSA:+COMP-NULL\"",
        "\"TLS1.0 vs SSL3 test failed\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/tls_test_common.c": {
    "setup_ca_cert": {
      "start_point": [
        29,
        0
      ],
      "end_point": [
        56,
        1
      ],
      "strings": [
        "\"wb+\"",
        "\"Error: failed to open `%s': %s\\n\"",
        "\"Error: failed to write `%s. %s'\\n\"",
        "\"Error: failed to flush ca cert file stream. %s\\n\""
      ]
    },
    "test_daemon_get": {
      "start_point": [
        62,
        0
      ],
      "end_point": [
        136,
        1
      ],
      "strings": [
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"Error: local file & received file differ.\\n\""
      ]
    },
    "print_test_result": {
      "start_point": [
        139,
        0
      ],
      "end_point": [
        148,
        1
      ],
      "strings": [
        "\"running test: %s [fail: %u]\\n\"",
        "\"running test: %s [pass]\\n\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        150,
        0
      ],
      "end_point": [
        160,
        1
      ],
      "strings": []
    },
    "http_ahc": {
      "start_point": [
        165,
        0
      ],
      "end_point": [
        191,
        1
      ],
      "strings": []
    },
    "http_dummy_ahc": {
      "start_point": [
        194,
        0
      ],
      "end_point": [
        203,
        1
      ],
      "strings": []
    },
    "send_curl_req": {
      "start_point": [
        214,
        0
      ],
      "end_point": [
        259,
        1
      ],
      "strings": [
        "\"curl_easy_perform failed: `%s'\\n\""
      ]
    },
    "gen_test_file_url": {
      "start_point": [
        270,
        0
      ],
      "end_point": [
        329,
        1
      ],
      "strings": [
        "\"Error: failed to get working directory. %s\\n\"",
        "\"%s:%d%s/%s\"",
        "\"https://127.0.0.1\"",
        "\"urlpath\""
      ]
    },
    "test_https_transfer": {
      "start_point": [
        335,
        0
      ],
      "end_point": [
        383,
        1
      ],
      "strings": [
        "\"Error: local file & received file differ.\\n\""
      ]
    },
    "setup_testcase": {
      "start_point": [
        393,
        0
      ],
      "end_point": [
        418,
        1
      ],
      "strings": []
    },
    "teardown_testcase": {
      "start_point": [
        420,
        0
      ],
      "end_point": [
        424,
        1
      ],
      "strings": []
    },
    "setup_session": {
      "start_point": [
        426,
        0
      ],
      "end_point": [
        469,
        1
      ],
      "strings": [
        "\"NORMAL\""
      ]
    },
    "teardown_session": {
      "start_point": [
        471,
        0
      ],
      "end_point": [
        486,
        1
      ],
      "strings": []
    },
    "test_wrap": {
      "start_point": [
        489,
        0
      ],
      "end_point": [
        526,
        1
      ],
      "strings": [
        "\"Failed to setup testcase %s\\n\"",
        "\"running test: %s \"",
        "\"[pass]\\n\"",
        "\"[fail]\\n\""
      ]
    },
    "testsuite_curl_global_init": {
      "start_point": [
        528,
        0
      ],
      "end_point": [
        545,
        1
      ],
      "strings": [
        "\"WARNING: libcurl was already initialised.\\n\"",
        "\"libcurl initialisation error: %s\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/tls_test_common.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testcurl/https/tls_test_keys.h": {},
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/socat.c": {
    "zzuf_socat_start": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        95,
        1
      ],
      "strings": [
        "\"zzuf\"",
        "\"--ratio=0.0:0.75\"",
        "\"-n\"",
        "\"-A\"",
        "\"socat\"",
        "\"-lf\"",
        "\"/dev/null\"",
        "\"TCP4-LISTEN:11081,reuseaddr,fork\"",
        "\"TCP4:127.0.0.1:11080\"",
        "\"fork failed: %s\\n\"",
        "\"zzuf died with status code %d!\\n\"",
        "\"zzuf died from signal %d!\\n\"",
        "\"zzuf\"",
        "\"execution of `zzuf' failed: %s\\n\""
      ]
    },
    "zzuf_socat_stop": {
      "start_point": [
        98,
        0
      ],
      "end_point": [
        110,
        1
      ],
      "strings": [
        "\"Failed to killpg: %s\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_get.c": {
    "copyBuffer": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        59,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        61,
        0
      ],
      "end_point": [
        92,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        95,
        0
      ],
      "end_point": [
        137,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        139,
        0
      ],
      "end_point": [
        181,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        184,
        0
      ],
      "end_point": [
        295,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        298,
        0
      ],
      "end_point": [
        315,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_get_chunked.c": {
    "copyBuffer": {
      "start_point": [
        47,
        0
      ],
      "end_point": [
        57,
        1
      ],
      "strings": []
    },
    "crc": {
      "start_point": [
        63,
        0
      ],
      "end_point": [
        77,
        1
      ],
      "strings": [
        "\"Footer\"",
        "\"working\""
      ]
    },
    "crcf": {
      "start_point": [
        82,
        0
      ],
      "end_point": [
        86,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        88,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "strings": []
    },
    "testInternalGet": {
      "start_point": [
        122,
        0
      ],
      "end_point": [
        161,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedGet": {
      "start_point": [
        163,
        0
      ],
      "end_point": [
        202,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalGet": {
      "start_point": [
        205,
        0
      ],
      "end_point": [
        313,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        317,
        0
      ],
      "end_point": [
        332,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_long_header.c": {
    "apc_all": {
      "start_point": [
        49,
        0
      ],
      "end_point": [
        54,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        63,
        0
      ],
      "end_point": [
        68,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        70,
        0
      ],
      "end_point": [
        93,
        1
      ],
      "strings": []
    },
    "testLongUrlGet": {
      "start_point": [
        96,
        0
      ],
      "end_point": [
        154,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/\"",
        "\"http://127.0.0.1:11081/\"",
        "\"\\n\""
      ]
    },
    "testLongHeaderGet": {
      "start_point": [
        157,
        0
      ],
      "end_point": [
        219,
        1
      ],
      "strings": [
        "\"GET\"",
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        222,
        0
      ],
      "end_point": [
        238,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_post.c": {
    "completed_cb": {
      "start_point": [
        53,
        0
      ],
      "end_point": [
        65,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        68,
        0
      ],
      "end_point": [
        78,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        86,
        0
      ],
      "end_point": [
        106,
        1
      ],
      "strings": [
        "\"name\"",
        "\"daniel\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\"",
        "\"curl\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        108,
        0
      ],
      "end_point": [
        148,
        1
      ],
      "strings": [
        "\"POST\""
      ]
    },
    "testInternalPost": {
      "start_point": [
        151,
        0
      ],
      "end_point": [
        200,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPost": {
      "start_point": [
        202,
        0
      ],
      "end_point": [
        252,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalPost": {
      "start_point": [
        255,
        0
      ],
      "end_point": [
        378,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:1082/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        381,
        0
      ],
      "end_point": [
        398,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_post_form.c": {
    "completed_cb": {
      "start_point": [
        51,
        0
      ],
      "end_point": [
        63,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        66,
        0
      ],
      "end_point": [
        76,
        1
      ],
      "strings": []
    },
    "post_iterator": {
      "start_point": [
        83,
        0
      ],
      "end_point": [
        108,
        1
      ],
      "strings": [
        "\"PI sees %s-%.*s\\n\"",
        "\"name\"",
        "\"daniel\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\"",
        "\"curl\""
      ]
    },
    "ahc_echo": {
      "start_point": [
        111,
        0
      ],
      "end_point": [
        153,
        1
      ],
      "strings": [
        "\"POST\""
      ]
    },
    "make_form": {
      "start_point": [
        155,
        0
      ],
      "end_point": [
        166,
        1
      ],
      "strings": [
        "\"name\"",
        "\"daniel\"",
        "\"project\"",
        "\"curl\""
      ]
    },
    "testInternalPost": {
      "start_point": [
        169,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPost": {
      "start_point": [
        220,
        0
      ],
      "end_point": [
        268,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalPost": {
      "start_point": [
        271,
        0
      ],
      "end_point": [
        394,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:1082/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        397,
        0
      ],
      "end_point": [
        414,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_put.c": {
    "putBuffer": {
      "start_point": [
        50,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        114,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Hello123\"",
        "\"Invalid upload data `%8s'!\\n\""
      ]
    },
    "testInternalPut": {
      "start_point": [
        117,
        0
      ],
      "end_point": [
        166,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPut": {
      "start_point": [
        168,
        0
      ],
      "end_point": [
        217,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalPut": {
      "start_point": [
        220,
        0
      ],
      "end_point": [
        342,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        345,
        0
      ],
      "end_point": [
        362,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_put_chunked.c": {
    "putBuffer": {
      "start_point": [
        48,
        0
      ],
      "end_point": [
        62,
        1
      ],
      "strings": [
        "\"Hello123\""
      ]
    },
    "copyBuffer": {
      "start_point": [
        64,
        0
      ],
      "end_point": [
        74,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        76,
        0
      ],
      "end_point": [
        120,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Hello123\"",
        "\"Not ready for response: %u/%u\\n\""
      ]
    },
    "testInternalPut": {
      "start_point": [
        123,
        0
      ],
      "end_point": [
        172,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11080/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPut": {
      "start_point": [
        174,
        0
      ],
      "end_point": [
        229,
        1
      ],
      "strings": [
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"curl_easy_perform failed: `%s'\\n\"",
        "\"/hello_world\"",
        "\"/hello_world\"",
        "\"/hello_world\""
      ]
    },
    "testExternalPut": {
      "start_point": [
        232,
        0
      ],
      "end_point": [
        353,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11082/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        357,
        0
      ],
      "end_point": [
        372,
        1
      ],
      "strings": [
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/src/testzzuf/test_put_large.c": {
    "putBuffer": {
      "start_point": [
        58,
        0
      ],
      "end_point": [
        70,
        1
      ],
      "strings": []
    },
    "copyBuffer": {
      "start_point": [
        72,
        0
      ],
      "end_point": [
        82,
        1
      ],
      "strings": []
    },
    "ahc_echo": {
      "start_point": [
        84,
        0
      ],
      "end_point": [
        128,
        1
      ],
      "strings": [
        "\"PUT\"",
        "\"Waiting for more data (%u/%u)...\\n\""
      ]
    },
    "testInternalPut": {
      "start_point": [
        131,
        0
      ],
      "end_point": [
        181,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testMultithreadedPut": {
      "start_point": [
        183,
        0
      ],
      "end_point": [
        233,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "testExternalPut": {
      "start_point": [
        236,
        0
      ],
      "end_point": [
        360,
        1
      ],
      "strings": [
        "\".\"",
        "\"http://127.0.0.1:11081/hello_world\"",
        "\"\\n\""
      ]
    },
    "main": {
      "start_point": [
        363,
        0
      ],
      "end_point": [
        383,
        1
      ],
      "strings": [
        "\"11\"",
        "\"Error (code: %u)\\n\""
      ]
    }
  },
  "libmicrohttpd/libmicrohttpd-0.9.59/w32/common/MHD_config.h": {}
}